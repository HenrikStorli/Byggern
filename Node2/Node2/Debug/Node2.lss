
Node2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002188  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  00082188  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000c0  20000434  000825bc  00020434  2**2
                  ALLOC
  3 .stack        00000404  200004f4  0008267c  00020434  2**0
                  ALLOC
  4 .heap         00000200  200008f8  00082a80  00020434  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002045d  2**0
                  CONTENTS, READONLY
  7 .debug_info   00008074  00000000  00000000  000204b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001833  00000000  00000000  0002852a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00001456  00000000  00000000  00029d5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000288  00000000  00000000  0002b1b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000210  00000000  00000000  0002b43b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00013824  00000000  00000000  0002b64b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005bf0  00000000  00000000  0003ee6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0005552c  00000000  00000000  00044a5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000a54  00000000  00000000  00099f8c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	f8 08 00 20 61 04 08 00 5d 04 08 00 5d 04 08 00     ... a...]...]...
   80010:	5d 04 08 00 5d 04 08 00 5d 04 08 00 00 00 00 00     ]...]...].......
	...
   8002c:	5d 04 08 00 5d 04 08 00 00 00 00 00 5d 04 08 00     ]...].......]...
   8003c:	5d 04 08 00 5d 04 08 00 5d 04 08 00 5d 04 08 00     ]...]...]...]...
   8004c:	5d 04 08 00 5d 04 08 00 5d 04 08 00 5d 04 08 00     ]...]...]...]...
   8005c:	5d 04 08 00 35 0f 08 00 5d 04 08 00 00 00 00 00     ]...5...].......
   8006c:	5d 04 08 00 5d 04 08 00 5d 04 08 00 5d 04 08 00     ]...]...]...]...
	...
   80084:	5d 04 08 00 5d 04 08 00 5d 04 08 00 5d 04 08 00     ]...]...]...]...
   80094:	5d 04 08 00 5d 04 08 00 5d 04 08 00 5d 04 08 00     ]...]...]...]...
   800a4:	00 00 00 00 5d 04 08 00 8d 0c 08 00 5d 04 08 00     ....].......]...
   800b4:	5d 04 08 00 5d 04 08 00 5d 04 08 00 5d 04 08 00     ]...]...]...]...
   800c4:	5d 04 08 00 5d 04 08 00 5d 04 08 00 5d 04 08 00     ]...]...]...]...
   800d4:	5d 04 08 00 5d 04 08 00 5d 04 08 00 5d 04 08 00     ]...]...]...]...
   800e4:	5d 04 08 00 5d 04 08 00 61 03 08 00 5d 04 08 00     ]...]...a...]...

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000434 	.word	0x20000434
   80110:	00000000 	.word	0x00000000
   80114:	00082188 	.word	0x00082188

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00082188 	.word	0x00082188
   80154:	20000438 	.word	0x20000438
   80158:	00082188 	.word	0x00082188
   8015c:	00000000 	.word	0x00000000

00080160 <can_init>:
 * \retval Success(0) or failure(1)
 */


uint8_t can_init(uint32_t can_br, uint8_t num_tx_mb, uint8_t num_rx_mb)
{
   80160:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	
	//Make sure num_rx_mb and num_tx_mb is valid
	if(num_rx_mb > 8 | num_tx_mb > 8 | num_rx_mb + num_tx_mb > 8)
   80164:	1855      	adds	r5, r2, r1
   80166:	2908      	cmp	r1, #8
   80168:	bf98      	it	ls
   8016a:	2a08      	cmpls	r2, #8
   8016c:	d864      	bhi.n	80238 <can_init+0xd8>
   8016e:	460e      	mov	r6, r1
   80170:	2d08      	cmp	r5, #8
   80172:	dc61      	bgt.n	80238 <can_init+0xd8>


	uint32_t ul_status; 
	
	//Disable can
	CAN0->CAN_MR &= ~CAN_MR_CANEN; 
   80174:	4a32      	ldr	r2, [pc, #200]	; (80240 <can_init+0xe0>)
   80176:	6813      	ldr	r3, [r2, #0]
   80178:	f023 0301 	bic.w	r3, r3, #1
   8017c:	6013      	str	r3, [r2, #0]
	//Clear status register on read
	ul_status = CAN0->CAN_SR; 
   8017e:	6913      	ldr	r3, [r2, #16]
	
	
	// Disable interrupts on CANH and CANL pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80180:	4b30      	ldr	r3, [pc, #192]	; (80244 <can_init+0xe4>)
   80182:	f44f 7440 	mov.w	r4, #768	; 0x300
   80186:	645c      	str	r4, [r3, #68]	; 0x44
	
	//Select CAN0 RX and TX in PIOA
	uint32_t ul_sr = PIOA->PIO_ABSR;
   80188:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	PIOA->PIO_ABSR = ~(PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0) & ul_sr;
   8018a:	f024 0403 	bic.w	r4, r4, #3
   8018e:	671c      	str	r4, [r3, #112]	; 0x70
	
	// Disable the Parallel IO (PIO) of the Rx and Tx pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0;
   80190:	2403      	movs	r4, #3
   80192:	605c      	str	r4, [r3, #4]
	
	// Enable pull up on CANH and CANL pin
	PIOA->PIO_PUER = (PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0);
   80194:	665c      	str	r4, [r3, #100]	; 0x64
	
	
	//Enable Clock for CAN0 in PMC
	PMC->PMC_PCR = PMC_PCR_EN | (0 << PMC_PCR_DIV_Pos) | PMC_PCR_CMD | (ID_CAN0 << PMC_PCR_PID_Pos); // DIV = 1(can clk = MCK/2), CMD = 1 (write), PID = 2B (CAN0)
   80196:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   8019a:	4c2b      	ldr	r4, [pc, #172]	; (80248 <can_init+0xe8>)
   8019c:	f8c3 410c 	str.w	r4, [r3, #268]	; 0x10c
	PMC->PMC_PCER1 |= 1 << (ID_CAN0 - 32);
   801a0:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   801a4:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
   801a8:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	
	//Set baudrate, Phase1, phase2 and propagation delay for can bus. Must match on all nodes!
	CAN0->CAN_BR = can_br; 
   801ac:	6150      	str	r0, [r2, #20]
	/****** Start of mailbox configuration ******/

	uint32_t can_ier = 0;

	/* Configure receive mailboxes */
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   801ae:	42a9      	cmp	r1, r5
   801b0:	dc40      	bgt.n	80234 <can_init+0xd4>
   801b2:	460a      	mov	r2, r1
   801b4:	2400      	movs	r4, #0
	{
		CAN0->CAN_MB[n].CAN_MAM = 0; //Accept all messages
   801b6:	46a1      	mov	r9, r4
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   801b8:	f8df 8084 	ldr.w	r8, [pc, #132]	; 80240 <can_init+0xe0>
   801bc:	f04f 5c00 	mov.w	ip, #536870912	; 0x20000000
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_RX);
   801c0:	f04f 7e80 	mov.w	lr, #16777216	; 0x1000000
		CAN0->CAN_MB[n].CAN_MCR |= CAN_MCR_MTCR;

		can_ier |= 1 << n; //Enable interrupt on rx mailbox
   801c4:	2701      	movs	r7, #1
   801c6:	0153      	lsls	r3, r2, #5
   801c8:	f103 2040 	add.w	r0, r3, #1073758208	; 0x40004000
   801cc:	f500 2030 	add.w	r0, r0, #720896	; 0xb0000
		CAN0->CAN_MB[n].CAN_MAM = 0; //Accept all messages
   801d0:	f8c0 9204 	str.w	r9, [r0, #516]	; 0x204
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   801d4:	4443      	add	r3, r8
   801d6:	f8c3 c208 	str.w	ip, [r3, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_RX);
   801da:	f8c0 e200 	str.w	lr, [r0, #512]	; 0x200
		CAN0->CAN_MB[n].CAN_MCR |= CAN_MCR_MTCR;
   801de:	f8d3 021c 	ldr.w	r0, [r3, #540]	; 0x21c
   801e2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   801e6:	f8c3 021c 	str.w	r0, [r3, #540]	; 0x21c
		can_ier |= 1 << n; //Enable interrupt on rx mailbox
   801ea:	fa07 f302 	lsl.w	r3, r7, r2
   801ee:	431c      	orrs	r4, r3
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   801f0:	3201      	adds	r2, #1
   801f2:	4295      	cmp	r5, r2
   801f4:	dae7      	bge.n	801c6 <can_init+0x66>
	}
	
	/*Configure transmit mailboxes */
	for (int n = 0; n < num_tx_mb; n++)
   801f6:	b181      	cbz	r1, 8021a <can_init+0xba>
   801f8:	2300      	movs	r3, #0
	{
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   801fa:	4911      	ldr	r1, [pc, #68]	; (80240 <can_init+0xe0>)
   801fc:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_TX);
   80200:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   80204:	eb01 1243 	add.w	r2, r1, r3, lsl #5
   80208:	f8c2 5208 	str.w	r5, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_TX);
   8020c:	f103 0210 	add.w	r2, r3, #16
   80210:	0152      	lsls	r2, r2, #5
   80212:	5088      	str	r0, [r1, r2]
	for (int n = 0; n < num_tx_mb; n++)
   80214:	3301      	adds	r3, #1
   80216:	429e      	cmp	r6, r3
   80218:	d1f4      	bne.n	80204 <can_init+0xa4>
	}
	
	/****** End of mailbox configuraion ******/

	//Enable interrupt on receive mailboxes
	CAN0->CAN_IER = can_ier;
   8021a:	4b09      	ldr	r3, [pc, #36]	; (80240 <can_init+0xe0>)
   8021c:	605c      	str	r4, [r3, #4]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   8021e:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80222:	4a0a      	ldr	r2, [pc, #40]	; (8024c <can_init+0xec>)
   80224:	6051      	str	r1, [r2, #4]

	//Enable interrupt in NVIC 
	NVIC_EnableIRQ(ID_CAN0);

	//enable CAN
	CAN0->CAN_MR |= CAN_MR_CANEN;
   80226:	681a      	ldr	r2, [r3, #0]
   80228:	f042 0201 	orr.w	r2, r2, #1
   8022c:	601a      	str	r2, [r3, #0]

	return 0;
   8022e:	2000      	movs	r0, #0
   80230:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t can_ier = 0;
   80234:	2400      	movs	r4, #0
   80236:	e7de      	b.n	801f6 <can_init+0x96>
		return 1; //Too many mailboxes is configured
   80238:	2001      	movs	r0, #1
}
   8023a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8023e:	bf00      	nop
   80240:	400b4000 	.word	0x400b4000
   80244:	400e0e00 	.word	0x400e0e00
   80248:	1000102b 	.word	0x1000102b
   8024c:	e000e100 	.word	0xe000e100

00080250 <can_send>:
 * \retval Success(0) or failure(1)
 */
uint8_t can_send(CAN_MESSAGE* can_msg, uint8_t tx_mb_id)
{
	//Check that mailbox is ready
	if(CAN0->CAN_MB[tx_mb_id].CAN_MSR & CAN_MSR_MRDY)
   80250:	014b      	lsls	r3, r1, #5
   80252:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   80256:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   8025a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   8025e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   80262:	d036      	beq.n	802d2 <can_send+0x82>
	{
		//Set message ID and use CAN 2.0B protocol
		CAN0->CAN_MB[tx_mb_id].CAN_MID = CAN_MID_MIDvA(can_msg->id) | CAN_MID_MIDE ;
   80264:	8803      	ldrh	r3, [r0, #0]
   80266:	4a1c      	ldr	r2, [pc, #112]	; (802d8 <can_send+0x88>)
   80268:	ea02 4283 	and.w	r2, r2, r3, lsl #18
   8026c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   80270:	014b      	lsls	r3, r1, #5
   80272:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   80276:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   8027a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
		
		//Make sure message is not to long
		if(can_msg->data_length > 7){
   8027e:	7883      	ldrb	r3, [r0, #2]
   80280:	2b07      	cmp	r3, #7
			can_msg->data_length = 7;
   80282:	bf84      	itt	hi
   80284:	2307      	movhi	r3, #7
   80286:	7083      	strbhi	r3, [r0, #2]
			//Message is to long, sending only the first 8 bytes
		}
		//Put message in can data registers
		CAN0->CAN_MB[tx_mb_id].CAN_MDL = can_msg->data[3] << 24 | can_msg->data[2] << 16 | can_msg->data[1] << 8 | can_msg->data[0];
   80288:	7982      	ldrb	r2, [r0, #6]
   8028a:	7943      	ldrb	r3, [r0, #5]
   8028c:	041b      	lsls	r3, r3, #16
   8028e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   80292:	78c2      	ldrb	r2, [r0, #3]
   80294:	4313      	orrs	r3, r2
   80296:	7902      	ldrb	r2, [r0, #4]
   80298:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   8029c:	0149      	lsls	r1, r1, #5
   8029e:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   802a2:	f501 2130 	add.w	r1, r1, #720896	; 0xb0000
   802a6:	f8c1 3214 	str.w	r3, [r1, #532]	; 0x214
		CAN0->CAN_MB[tx_mb_id].CAN_MDH = can_msg->data[7] << 24 | can_msg->data[6] << 16 | can_msg->data[5] << 8 | can_msg->data[4];
   802aa:	7a82      	ldrb	r2, [r0, #10]
   802ac:	7a43      	ldrb	r3, [r0, #9]
   802ae:	041b      	lsls	r3, r3, #16
   802b0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   802b4:	79c2      	ldrb	r2, [r0, #7]
   802b6:	4313      	orrs	r3, r2
   802b8:	7a02      	ldrb	r2, [r0, #8]
   802ba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   802be:	f8c1 3218 	str.w	r3, [r1, #536]	; 0x218
		
		//Set message length and mailbox ready to send
		CAN0->CAN_MB[tx_mb_id].CAN_MCR = (can_msg->data_length << CAN_MCR_MDLC_Pos) | CAN_MCR_MTCR;
   802c2:	7883      	ldrb	r3, [r0, #2]
   802c4:	041b      	lsls	r3, r3, #16
   802c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   802ca:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
		return 0;
   802ce:	2000      	movs	r0, #0
   802d0:	4770      	bx	lr
	}
	
	else //Mailbox busy
	{
		return 1;
   802d2:	2001      	movs	r0, #1
	}
	
}
   802d4:	4770      	bx	lr
   802d6:	bf00      	nop
   802d8:	1ffc0000 	.word	0x1ffc0000

000802dc <can_receive>:
 * \retval Success(0) or failure(1)
 */
uint8_t can_receive(CAN_MESSAGE* can_msg, uint8_t rx_mb_id)
{
	//Check that mailbox is ready
	if(CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MRDY)
   802dc:	014b      	lsls	r3, r1, #5
   802de:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   802e2:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   802e6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   802ea:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   802ee:	d033      	beq.n	80358 <can_receive+0x7c>
{
   802f0:	b430      	push	{r4, r5}
	{
		//Get data from CAN mailbox
		uint32_t data_low = CAN0->CAN_MB[rx_mb_id].CAN_MDL;
   802f2:	014b      	lsls	r3, r1, #5
   802f4:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   802f8:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   802fc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
		uint32_t data_high = CAN0->CAN_MB[rx_mb_id].CAN_MDH;
   80300:	f8d3 4218 	ldr.w	r4, [r3, #536]	; 0x218
		
		//Get message ID
		can_msg->id = (uint16_t)((CAN0->CAN_MB[rx_mb_id].CAN_MID & CAN_MID_MIDvA_Msk) >> CAN_MID_MIDvA_Pos);
   80304:	f8d3 5208 	ldr.w	r5, [r3, #520]	; 0x208
   80308:	f3c5 458a 	ubfx	r5, r5, #18, #11
   8030c:	8005      	strh	r5, [r0, #0]
		
		//Get data length
		can_msg->data_length = (uint8_t)((CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos);
   8030e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   80312:	f3c3 4303 	ubfx	r3, r3, #16, #4
   80316:	7083      	strb	r3, [r0, #2]
		
		//Put data in CAN_MESSAGE object
		for(int i = 0; i < can_msg->data_length;i++)
   80318:	461d      	mov	r5, r3
   8031a:	b15b      	cbz	r3, 80334 <can_receive+0x58>
   8031c:	3003      	adds	r0, #3
   8031e:	2300      	movs	r3, #0
		{
			if(i < 4)
   80320:	2b03      	cmp	r3, #3
			{
				can_msg->data[i] = (char)(data_low & 0xff);
   80322:	bfd9      	ittee	le
   80324:	7002      	strble	r2, [r0, #0]
				data_low = data_low >> 8;
   80326:	0a12      	lsrle	r2, r2, #8
			}
			else
			{
				can_msg->data[i] = (uint8_t)(data_high & 0xff);
   80328:	7004      	strbgt	r4, [r0, #0]
				data_high = data_high >> 8;
   8032a:	0a24      	lsrgt	r4, r4, #8
		for(int i = 0; i < can_msg->data_length;i++)
   8032c:	3301      	adds	r3, #1
   8032e:	3001      	adds	r0, #1
   80330:	42ab      	cmp	r3, r5
   80332:	d1f5      	bne.n	80320 <can_receive+0x44>
			}
		}
		
		//Reset for new receive
		CAN0->CAN_MB[rx_mb_id].CAN_MMR = CAN_MMR_MOT_MB_RX;
   80334:	4b09      	ldr	r3, [pc, #36]	; (8035c <can_receive+0x80>)
   80336:	f101 0210 	add.w	r2, r1, #16
   8033a:	0152      	lsls	r2, r2, #5
   8033c:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   80340:	5098      	str	r0, [r3, r2]
		CAN0->CAN_MB[rx_mb_id].CAN_MCR |= CAN_MCR_MTCR;
   80342:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   80346:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
   8034a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   8034e:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
		return 0;
   80352:	2000      	movs	r0, #0
	}
	else //Mailbox busy
	{
		return 1;
	}
}
   80354:	bc30      	pop	{r4, r5}
   80356:	4770      	bx	lr
		return 1;
   80358:	2001      	movs	r0, #1
   8035a:	4770      	bx	lr
   8035c:	400b4000 	.word	0x400b4000

00080360 <CAN0_Handler>:
 * \param void
 *
 * \retval 
 */
void CAN0_Handler( void )
{
   80360:	b510      	push	{r4, lr}
   80362:	b084      	sub	sp, #16
	if(DEBUG_INTERRUPT)printf("CAN0 interrupt\n\r");
	char can_sr = CAN0->CAN_SR; 
   80364:	4b32      	ldr	r3, [pc, #200]	; (80430 <CAN0_Handler+0xd0>)
   80366:	691c      	ldr	r4, [r3, #16]
	
	//RX interrupt
	if(can_sr & (CAN_SR_MB1 | CAN_SR_MB2) )//Only mailbox 1 and 2 specified for receiving
   80368:	f014 0f06 	tst.w	r4, #6
   8036c:	d018      	beq.n	803a0 <CAN0_Handler+0x40>
	{
		CAN_MESSAGE message;
		if(can_sr & CAN_SR_MB1)  //Mailbox 1 event
   8036e:	f014 0f02 	tst.w	r4, #2
   80372:	d122      	bne.n	803ba <CAN0_Handler+0x5a>
		{
			can_receive(&message, 1);

		}
		else if(can_sr & CAN_SR_MB2) //Mailbox 2 event
   80374:	f014 0f04 	tst.w	r4, #4
   80378:	d024      	beq.n	803c4 <CAN0_Handler+0x64>
		
		{
			can_receive(&message, 2);
   8037a:	2102      	movs	r1, #2
   8037c:	a801      	add	r0, sp, #4
   8037e:	4b2d      	ldr	r3, [pc, #180]	; (80434 <CAN0_Handler+0xd4>)
   80380:	4798      	blx	r3
			printf("CAN0 message arrived in non-used mailbox\n\r");
		}

		if(DEBUG_INTERRUPT)printf("message id: %d\n\r", message.id);
		if(DEBUG_INTERRUPT)printf("message data length: %d\n\r", message.data_length);
		for (int i = 0; i < message.data_length; i++)
   80382:	f89d 2006 	ldrb.w	r2, [sp, #6]
   80386:	b11a      	cbz	r2, 80390 <CAN0_Handler+0x30>
   80388:	2300      	movs	r3, #0
   8038a:	3301      	adds	r3, #1
   8038c:	4293      	cmp	r3, r2
   8038e:	d1fc      	bne.n	8038a <CAN0_Handler+0x2a>
			if(DEBUG_INTERRUPT)printf("%d ", message.data[i]);
		}
		if(DEBUG_INTERRUPT)printf("\n\r");
        
        // Fetching joystick data
		if(message.id == 0b11111111){
   80390:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   80394:	2bff      	cmp	r3, #255	; 0xff
   80396:	d019      	beq.n	803cc <CAN0_Handler+0x6c>
			received_joystick_data.button_pushed = (message.data[2]) % 2;     
			received_joystick_data.joystick_direction = (message.data[2] >> 1);
			received_joystick_data.sliderRight = (message.data[3]);
		}
		// Start game message received and reset counter
		else if(message.id == 9){
   80398:	2b09      	cmp	r3, #9
   8039a:	d02b      	beq.n	803f4 <CAN0_Handler+0x94>
			reset_count();
		}
		// Update difficulty message received
		else if(message.id == 5){
   8039c:	2b05      	cmp	r3, #5
   8039e:	d02c      	beq.n	803fa <CAN0_Handler+0x9a>
					
		}

	}
	
	if(can_sr & CAN_SR_MB0)
   803a0:	f014 0f01 	tst.w	r4, #1
   803a4:	d002      	beq.n	803ac <CAN0_Handler+0x4c>
	{
		if(DEBUG_INTERRUPT) printf("CAN0 MB0 ready to send \n\r");
		
	//Disable interrupt
		CAN0->CAN_IDR = CAN_IER_MB0;
   803a6:	2201      	movs	r2, #1
   803a8:	4b21      	ldr	r3, [pc, #132]	; (80430 <CAN0_Handler+0xd0>)
   803aa:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   803ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
   803b0:	4b21      	ldr	r3, [pc, #132]	; (80438 <CAN0_Handler+0xd8>)
   803b2:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ClearPendingIRQ(ID_CAN0);
	//sei();*/


    
}
   803b6:	b004      	add	sp, #16
   803b8:	bd10      	pop	{r4, pc}
			can_receive(&message, 1);
   803ba:	2101      	movs	r1, #1
   803bc:	a801      	add	r0, sp, #4
   803be:	4b1d      	ldr	r3, [pc, #116]	; (80434 <CAN0_Handler+0xd4>)
   803c0:	4798      	blx	r3
   803c2:	e7de      	b.n	80382 <CAN0_Handler+0x22>
			printf("CAN0 message arrived in non-used mailbox\n\r");
   803c4:	481d      	ldr	r0, [pc, #116]	; (8043c <CAN0_Handler+0xdc>)
   803c6:	4b1e      	ldr	r3, [pc, #120]	; (80440 <CAN0_Handler+0xe0>)
   803c8:	4798      	blx	r3
   803ca:	e7da      	b.n	80382 <CAN0_Handler+0x22>
			received_joystick_data.posX = (message.data[0]) - 128;
   803cc:	4b1d      	ldr	r3, [pc, #116]	; (80444 <CAN0_Handler+0xe4>)
   803ce:	f89d 2007 	ldrb.w	r2, [sp, #7]
   803d2:	3a80      	subs	r2, #128	; 0x80
   803d4:	601a      	str	r2, [r3, #0]
			received_joystick_data.posY = (message.data[1]) - 128;  
   803d6:	f89d 2008 	ldrb.w	r2, [sp, #8]
   803da:	3a80      	subs	r2, #128	; 0x80
   803dc:	605a      	str	r2, [r3, #4]
			received_joystick_data.button_pushed = (message.data[2]) % 2;     
   803de:	f89d 2009 	ldrb.w	r2, [sp, #9]
   803e2:	f002 0101 	and.w	r1, r2, #1
   803e6:	7219      	strb	r1, [r3, #8]
			received_joystick_data.joystick_direction = (message.data[2] >> 1);
   803e8:	0852      	lsrs	r2, r2, #1
   803ea:	725a      	strb	r2, [r3, #9]
			received_joystick_data.sliderRight = (message.data[3]);
   803ec:	f89d 200a 	ldrb.w	r2, [sp, #10]
   803f0:	729a      	strb	r2, [r3, #10]
   803f2:	e7d5      	b.n	803a0 <CAN0_Handler+0x40>
			reset_count();
   803f4:	4b14      	ldr	r3, [pc, #80]	; (80448 <CAN0_Handler+0xe8>)
   803f6:	4798      	blx	r3
   803f8:	e7d2      	b.n	803a0 <CAN0_Handler+0x40>
			switch(message.data[0]){
   803fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
   803fe:	2b02      	cmp	r3, #2
   80400:	d009      	beq.n	80416 <CAN0_Handler+0xb6>
   80402:	2b03      	cmp	r3, #3
   80404:	d00d      	beq.n	80422 <CAN0_Handler+0xc2>
   80406:	2b01      	cmp	r3, #1
   80408:	d1ca      	bne.n	803a0 <CAN0_Handler+0x40>
					init_motor_controller_parameters(0.003, 0.9, 0); // Easy mode
   8040a:	2200      	movs	r2, #0
   8040c:	490f      	ldr	r1, [pc, #60]	; (8044c <CAN0_Handler+0xec>)
   8040e:	4810      	ldr	r0, [pc, #64]	; (80450 <CAN0_Handler+0xf0>)
   80410:	4b10      	ldr	r3, [pc, #64]	; (80454 <CAN0_Handler+0xf4>)
   80412:	4798      	blx	r3
					break;
   80414:	e7c4      	b.n	803a0 <CAN0_Handler+0x40>
					init_motor_controller_parameters(0.003, 0.7, 0); // Medium mode
   80416:	2200      	movs	r2, #0
   80418:	490f      	ldr	r1, [pc, #60]	; (80458 <CAN0_Handler+0xf8>)
   8041a:	480d      	ldr	r0, [pc, #52]	; (80450 <CAN0_Handler+0xf0>)
   8041c:	4b0d      	ldr	r3, [pc, #52]	; (80454 <CAN0_Handler+0xf4>)
   8041e:	4798      	blx	r3
					break;
   80420:	e7be      	b.n	803a0 <CAN0_Handler+0x40>
					init_motor_controller_parameters(0.003, 0.5, 0); // Hard mode
   80422:	2200      	movs	r2, #0
   80424:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   80428:	4809      	ldr	r0, [pc, #36]	; (80450 <CAN0_Handler+0xf0>)
   8042a:	4b0a      	ldr	r3, [pc, #40]	; (80454 <CAN0_Handler+0xf4>)
   8042c:	4798      	blx	r3
					break;
   8042e:	e7b7      	b.n	803a0 <CAN0_Handler+0x40>
   80430:	400b4000 	.word	0x400b4000
   80434:	000802dd 	.word	0x000802dd
   80438:	e000e100 	.word	0xe000e100
   8043c:	000820d4 	.word	0x000820d4
   80440:	00080c29 	.word	0x00080c29
   80444:	20000480 	.word	0x20000480
   80448:	00080d05 	.word	0x00080d05
   8044c:	3f666666 	.word	0x3f666666
   80450:	3b449ba6 	.word	0x3b449ba6
   80454:	000806a5 	.word	0x000806a5
   80458:	3f333333 	.word	0x3f333333

0008045c <Dummy_Handler>:
   8045c:	e7fe      	b.n	8045c <Dummy_Handler>
	...

00080460 <Reset_Handler>:
   80460:	b508      	push	{r3, lr}
   80462:	4b18      	ldr	r3, [pc, #96]	; (804c4 <Reset_Handler+0x64>)
   80464:	4a18      	ldr	r2, [pc, #96]	; (804c8 <Reset_Handler+0x68>)
   80466:	429a      	cmp	r2, r3
   80468:	d010      	beq.n	8048c <Reset_Handler+0x2c>
   8046a:	4b18      	ldr	r3, [pc, #96]	; (804cc <Reset_Handler+0x6c>)
   8046c:	4a15      	ldr	r2, [pc, #84]	; (804c4 <Reset_Handler+0x64>)
   8046e:	429a      	cmp	r2, r3
   80470:	d20c      	bcs.n	8048c <Reset_Handler+0x2c>
   80472:	3b01      	subs	r3, #1
   80474:	1a9b      	subs	r3, r3, r2
   80476:	f023 0303 	bic.w	r3, r3, #3
   8047a:	3304      	adds	r3, #4
   8047c:	4413      	add	r3, r2
   8047e:	4912      	ldr	r1, [pc, #72]	; (804c8 <Reset_Handler+0x68>)
   80480:	f851 0b04 	ldr.w	r0, [r1], #4
   80484:	f842 0b04 	str.w	r0, [r2], #4
   80488:	429a      	cmp	r2, r3
   8048a:	d1f9      	bne.n	80480 <Reset_Handler+0x20>
   8048c:	4b10      	ldr	r3, [pc, #64]	; (804d0 <Reset_Handler+0x70>)
   8048e:	4a11      	ldr	r2, [pc, #68]	; (804d4 <Reset_Handler+0x74>)
   80490:	429a      	cmp	r2, r3
   80492:	d20a      	bcs.n	804aa <Reset_Handler+0x4a>
   80494:	3b01      	subs	r3, #1
   80496:	1a9b      	subs	r3, r3, r2
   80498:	f023 0303 	bic.w	r3, r3, #3
   8049c:	3304      	adds	r3, #4
   8049e:	4413      	add	r3, r2
   804a0:	2100      	movs	r1, #0
   804a2:	f842 1b04 	str.w	r1, [r2], #4
   804a6:	4293      	cmp	r3, r2
   804a8:	d1fb      	bne.n	804a2 <Reset_Handler+0x42>
   804aa:	4b0b      	ldr	r3, [pc, #44]	; (804d8 <Reset_Handler+0x78>)
   804ac:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   804b0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   804b4:	4a09      	ldr	r2, [pc, #36]	; (804dc <Reset_Handler+0x7c>)
   804b6:	6093      	str	r3, [r2, #8]
   804b8:	4b09      	ldr	r3, [pc, #36]	; (804e0 <Reset_Handler+0x80>)
   804ba:	4798      	blx	r3
   804bc:	4b09      	ldr	r3, [pc, #36]	; (804e4 <Reset_Handler+0x84>)
   804be:	4798      	blx	r3
   804c0:	e7fe      	b.n	804c0 <Reset_Handler+0x60>
   804c2:	bf00      	nop
   804c4:	20000000 	.word	0x20000000
   804c8:	00082188 	.word	0x00082188
   804cc:	20000434 	.word	0x20000434
   804d0:	200004f4 	.word	0x200004f4
   804d4:	20000434 	.word	0x20000434
   804d8:	00080000 	.word	0x00080000
   804dc:	e000ed00 	.word	0xe000ed00
   804e0:	00081f65 	.word	0x00081f65
   804e4:	000805cd 	.word	0x000805cd

000804e8 <SystemInit>:
   804e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
   804ec:	4a20      	ldr	r2, [pc, #128]	; (80570 <SystemInit+0x88>)
   804ee:	6013      	str	r3, [r2, #0]
   804f0:	f502 7200 	add.w	r2, r2, #512	; 0x200
   804f4:	6013      	str	r3, [r2, #0]
   804f6:	4b1f      	ldr	r3, [pc, #124]	; (80574 <SystemInit+0x8c>)
   804f8:	6a1b      	ldr	r3, [r3, #32]
   804fa:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   804fe:	d107      	bne.n	80510 <SystemInit+0x28>
   80500:	4a1d      	ldr	r2, [pc, #116]	; (80578 <SystemInit+0x90>)
   80502:	4b1c      	ldr	r3, [pc, #112]	; (80574 <SystemInit+0x8c>)
   80504:	621a      	str	r2, [r3, #32]
   80506:	461a      	mov	r2, r3
   80508:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8050a:	f013 0f01 	tst.w	r3, #1
   8050e:	d0fb      	beq.n	80508 <SystemInit+0x20>
   80510:	4a1a      	ldr	r2, [pc, #104]	; (8057c <SystemInit+0x94>)
   80512:	4b18      	ldr	r3, [pc, #96]	; (80574 <SystemInit+0x8c>)
   80514:	621a      	str	r2, [r3, #32]
   80516:	461a      	mov	r2, r3
   80518:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8051a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   8051e:	d0fb      	beq.n	80518 <SystemInit+0x30>
   80520:	4a14      	ldr	r2, [pc, #80]	; (80574 <SystemInit+0x8c>)
   80522:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80524:	f023 0303 	bic.w	r3, r3, #3
   80528:	f043 0301 	orr.w	r3, r3, #1
   8052c:	6313      	str	r3, [r2, #48]	; 0x30
   8052e:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80530:	f013 0f08 	tst.w	r3, #8
   80534:	d0fb      	beq.n	8052e <SystemInit+0x46>
   80536:	4a12      	ldr	r2, [pc, #72]	; (80580 <SystemInit+0x98>)
   80538:	4b0e      	ldr	r3, [pc, #56]	; (80574 <SystemInit+0x8c>)
   8053a:	629a      	str	r2, [r3, #40]	; 0x28
   8053c:	461a      	mov	r2, r3
   8053e:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80540:	f013 0f02 	tst.w	r3, #2
   80544:	d0fb      	beq.n	8053e <SystemInit+0x56>
   80546:	2211      	movs	r2, #17
   80548:	4b0a      	ldr	r3, [pc, #40]	; (80574 <SystemInit+0x8c>)
   8054a:	631a      	str	r2, [r3, #48]	; 0x30
   8054c:	461a      	mov	r2, r3
   8054e:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80550:	f013 0f08 	tst.w	r3, #8
   80554:	d0fb      	beq.n	8054e <SystemInit+0x66>
   80556:	2212      	movs	r2, #18
   80558:	4b06      	ldr	r3, [pc, #24]	; (80574 <SystemInit+0x8c>)
   8055a:	631a      	str	r2, [r3, #48]	; 0x30
   8055c:	461a      	mov	r2, r3
   8055e:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80560:	f013 0f08 	tst.w	r3, #8
   80564:	d0fb      	beq.n	8055e <SystemInit+0x76>
   80566:	4a07      	ldr	r2, [pc, #28]	; (80584 <SystemInit+0x9c>)
   80568:	4b07      	ldr	r3, [pc, #28]	; (80588 <SystemInit+0xa0>)
   8056a:	601a      	str	r2, [r3, #0]
   8056c:	4770      	bx	lr
   8056e:	bf00      	nop
   80570:	400e0a00 	.word	0x400e0a00
   80574:	400e0600 	.word	0x400e0600
   80578:	00370809 	.word	0x00370809
   8057c:	01370809 	.word	0x01370809
   80580:	200d3f01 	.word	0x200d3f01
   80584:	0501bd00 	.word	0x0501bd00
   80588:	20000000 	.word	0x20000000

0008058c <IR_init>:

#include "IR.h"

void IR_init(void){
	
    REG_PMC_PCER1 |= (1 << 5);  // enable ADC on ID37
   8058c:	4a09      	ldr	r2, [pc, #36]	; (805b4 <IR_init+0x28>)
   8058e:	6813      	ldr	r3, [r2, #0]
   80590:	f043 0320 	orr.w	r3, r3, #32
   80594:	6013      	str	r3, [r2, #0]
    REG_ADC_MR |= (1 << 7); // ADC in free run mode
   80596:	f5a2 3201 	sub.w	r2, r2, #132096	; 0x20400
   8059a:	f5a2 723f 	sub.w	r2, r2, #764	; 0x2fc
   8059e:	6813      	ldr	r3, [r2, #0]
   805a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   805a4:	6013      	str	r3, [r2, #0]
    REG_ADC_CHER |= ADC_CHER_CH7; //enable as adc channel on AD7 extra func     
   805a6:	320c      	adds	r2, #12
   805a8:	6813      	ldr	r3, [r2, #0]
   805aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   805ae:	6013      	str	r3, [r2, #0]
   805b0:	4770      	bx	lr
   805b2:	bf00      	nop
   805b4:	400e0700 	.word	0x400e0700

000805b8 <IR_check>:
return data;
}

uint8_t IR_check(void){
	
	uint16_t data = ADC->ADC_CDR[7];
   805b8:	4b03      	ldr	r3, [pc, #12]	; (805c8 <IR_check+0x10>)
   805ba:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
	
    if(data < 90){
   805bc:	b280      	uxth	r0, r0
        return 1;
    }
    else{
        return 0;
    }
}
   805be:	2859      	cmp	r0, #89	; 0x59
   805c0:	bf8c      	ite	hi
   805c2:	2000      	movhi	r0, #0
   805c4:	2001      	movls	r0, #1
   805c6:	4770      	bx	lr
   805c8:	400c0000 	.word	0x400c0000

000805cc <main>:
#include "motor_controller.h"
#include "IR.h"
#include "Timer.h"

int main(void)
{
   805cc:	b570      	push	{r4, r5, r6, lr}
   805ce:	b084      	sub	sp, #16
    /* Initialize the SAM system */
    SystemInit();
   805d0:	4b1f      	ldr	r3, [pc, #124]	; (80650 <main+0x84>)
   805d2:	4798      	blx	r3
    configure_uart();
   805d4:	4b1f      	ldr	r3, [pc, #124]	; (80654 <main+0x88>)
   805d6:	4798      	blx	r3
	servo_pwm_init();
   805d8:	4b1f      	ldr	r3, [pc, #124]	; (80658 <main+0x8c>)
   805da:	4798      	blx	r3
	motor_init_DAC();   
   805dc:	4b1f      	ldr	r3, [pc, #124]	; (8065c <main+0x90>)
   805de:	4798      	blx	r3
    IR_init();
   805e0:	4b1f      	ldr	r3, [pc, #124]	; (80660 <main+0x94>)
   805e2:	4798      	blx	r3
    timer_init();
   805e4:	4b1f      	ldr	r3, [pc, #124]	; (80664 <main+0x98>)
   805e6:	4798      	blx	r3
    
    // Initializes can config     
    uint32_t can_msk = 0x00143555;
    uint8_t can_status = can_init(can_msk, 2, 1);
   805e8:	2201      	movs	r2, #1
   805ea:	2102      	movs	r1, #2
   805ec:	481e      	ldr	r0, [pc, #120]	; (80668 <main+0x9c>)
   805ee:	4b1f      	ldr	r3, [pc, #124]	; (8066c <main+0xa0>)
   805f0:	4798      	blx	r3
    
	// Disable watchdog 
    WDT->WDT_MR = WDT_MR_WDDIS;      
   805f2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   805f6:	4b1e      	ldr	r3, [pc, #120]	; (80670 <main+0xa4>)
   805f8:	605a      	str	r2, [r3, #4]
    
    SetTimer(1);  
   805fa:	2001      	movs	r0, #1
   805fc:	4b1d      	ldr	r3, [pc, #116]	; (80674 <main+0xa8>)
   805fe:	4798      	blx	r3
    motor_enable();
   80600:	4b1d      	ldr	r3, [pc, #116]	; (80678 <main+0xac>)
   80602:	4798      	blx	r3
	init_motor_controller_parameters(0.003, 0.9, 0);
   80604:	2200      	movs	r2, #0
   80606:	491d      	ldr	r1, [pc, #116]	; (8067c <main+0xb0>)
   80608:	481d      	ldr	r0, [pc, #116]	; (80680 <main+0xb4>)
   8060a:	4b1e      	ldr	r3, [pc, #120]	; (80684 <main+0xb8>)
   8060c:	4798      	blx	r3
	
	// Creates game over message
	CAN_MESSAGE game_over_message;
	game_over_message.id = 0;
   8060e:	2300      	movs	r3, #0
   80610:	f8ad 3004 	strh.w	r3, [sp, #4]
	game_over_message.data_length = 2;
   80614:	2302      	movs	r3, #2
   80616:	f88d 3006 	strb.w	r3, [sp, #6]
	
	
    while (1) 
    {	
		// Set input to the game equipment 
		motor_controller_set_input();
   8061a:	4e1b      	ldr	r6, [pc, #108]	; (80688 <main+0xbc>)
		servo_set_angle(received_joystick_data);
   8061c:	4c1b      	ldr	r4, [pc, #108]	; (8068c <main+0xc0>)
   8061e:	4d1c      	ldr	r5, [pc, #112]	; (80690 <main+0xc4>)
		motor_controller_set_input();
   80620:	47b0      	blx	r6
		servo_set_angle(received_joystick_data);
   80622:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   80626:	47a8      	blx	r5
		servo_activate_solonoid(received_joystick_data);
   80628:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   8062c:	4b19      	ldr	r3, [pc, #100]	; (80694 <main+0xc8>)
   8062e:	4798      	blx	r3
		
		// Checks if the game is lost
		if(IR_check()){
   80630:	4b19      	ldr	r3, [pc, #100]	; (80698 <main+0xcc>)
   80632:	4798      	blx	r3
   80634:	2800      	cmp	r0, #0
   80636:	d0f3      	beq.n	80620 <main+0x54>
			
			// Sends game over message
			game_over_message.data[0] = 0b10101011;
   80638:	23ab      	movs	r3, #171	; 0xab
   8063a:	f88d 3007 	strb.w	r3, [sp, #7]
			game_over_message.data[1] = count_value();
   8063e:	4b17      	ldr	r3, [pc, #92]	; (8069c <main+0xd0>)
   80640:	4798      	blx	r3
   80642:	f88d 0008 	strb.w	r0, [sp, #8]
			mailbox_busy = can_send(&game_over_message, 0);
   80646:	2100      	movs	r1, #0
   80648:	a801      	add	r0, sp, #4
   8064a:	4b15      	ldr	r3, [pc, #84]	; (806a0 <main+0xd4>)
   8064c:	4798      	blx	r3
   8064e:	e7e7      	b.n	80620 <main+0x54>
   80650:	000804e9 	.word	0x000804e9
   80654:	00080ea9 	.word	0x00080ea9
   80658:	00080d11 	.word	0x00080d11
   8065c:	000807b9 	.word	0x000807b9
   80660:	0008058d 	.word	0x0008058d
   80664:	00080c4d 	.word	0x00080c4d
   80668:	00143555 	.word	0x00143555
   8066c:	00080161 	.word	0x00080161
   80670:	400e1a50 	.word	0x400e1a50
   80674:	00080cd9 	.word	0x00080cd9
   80678:	0008089d 	.word	0x0008089d
   8067c:	3f666666 	.word	0x3f666666
   80680:	3b449ba6 	.word	0x3b449ba6
   80684:	000806a5 	.word	0x000806a5
   80688:	00080765 	.word	0x00080765
   8068c:	20000480 	.word	0x20000480
   80690:	00080e11 	.word	0x00080e11
   80694:	00080e7d 	.word	0x00080e7d
   80698:	000805b9 	.word	0x000805b9
   8069c:	00080cf9 	.word	0x00080cf9
   806a0:	00080251 	.word	0x00080251

000806a4 <init_motor_controller_parameters>:
*/

#include "motor_controller.h"

void init_motor_controller_parameters(float K_i, float K_p, float K_d){
	reg_parameters.Ki = K_i;
   806a4:	4b06      	ldr	r3, [pc, #24]	; (806c0 <init_motor_controller_parameters+0x1c>)
   806a6:	6018      	str	r0, [r3, #0]
	reg_parameters.Kp = K_p;
   806a8:	6059      	str	r1, [r3, #4]
	reg_parameters.Kd = K_d;
   806aa:	609a      	str	r2, [r3, #8]
	
	reg_parameters.T = 0.01;
   806ac:	4a05      	ldr	r2, [pc, #20]	; (806c4 <init_motor_controller_parameters+0x20>)
   806ae:	60da      	str	r2, [r3, #12]
	
	reg_parameters.error_sum = 0;
   806b0:	2200      	movs	r2, #0
   806b2:	611a      	str	r2, [r3, #16]
	reg_parameters.current_error = 0;
   806b4:	2200      	movs	r2, #0
   806b6:	615a      	str	r2, [r3, #20]
	reg_parameters.previous_error = 0;
   806b8:	619a      	str	r2, [r3, #24]
	reg_parameters.motor_input = 0;
   806ba:	61da      	str	r2, [r3, #28]
   806bc:	4770      	bx	lr
   806be:	bf00      	nop
   806c0:	2000045c 	.word	0x2000045c
   806c4:	3c23d70a 	.word	0x3c23d70a

000806c8 <motor_controller_update>:
	
}

void motor_controller_update(){
   806c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//Reference and actual position
	int real_postion = motor_read_counter();
   806ca:	4b1b      	ldr	r3, [pc, #108]	; (80738 <motor_controller_update+0x70>)
   806cc:	4798      	blx	r3
	
	// Scaling the value to fit within [0,255]
	if(real_postion > 20000){
		real_postion = 0;
	}
	real_postion = (-255.0/17000.0)*real_postion + 255;
   806ce:	f644 6320 	movw	r3, #20000	; 0x4e20
   806d2:	4298      	cmp	r0, r3
   806d4:	bfc8      	it	gt
   806d6:	2000      	movgt	r0, #0
   806d8:	4b18      	ldr	r3, [pc, #96]	; (8073c <motor_controller_update+0x74>)
   806da:	4798      	blx	r3
   806dc:	a312      	add	r3, pc, #72	; (adr r3, 80728 <motor_controller_update+0x60>)
   806de:	e9d3 2300 	ldrd	r2, r3, [r3]
   806e2:	4c17      	ldr	r4, [pc, #92]	; (80740 <motor_controller_update+0x78>)
   806e4:	47a0      	blx	r4
   806e6:	a312      	add	r3, pc, #72	; (adr r3, 80730 <motor_controller_update+0x68>)
   806e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   806ec:	4c15      	ldr	r4, [pc, #84]	; (80744 <motor_controller_update+0x7c>)
   806ee:	47a0      	blx	r4
	
	int reference_position = received_joystick_data.sliderRight;
   806f0:	4b15      	ldr	r3, [pc, #84]	; (80748 <motor_controller_update+0x80>)
   806f2:	7a9d      	ldrb	r5, [r3, #10]
	real_postion = (-255.0/17000.0)*real_postion + 255;
   806f4:	4b15      	ldr	r3, [pc, #84]	; (8074c <motor_controller_update+0x84>)
   806f6:	4798      	blx	r3
	
	//Error and the sum of all errors
	reg_parameters.current_error = reference_position - real_postion;
   806f8:	1a2d      	subs	r5, r5, r0
   806fa:	4c15      	ldr	r4, [pc, #84]	; (80750 <motor_controller_update+0x88>)
   806fc:	6165      	str	r5, [r4, #20]
	
	//Calculate the motor input
	reg_parameters.motor_input =  reg_parameters.Kp * reg_parameters.current_error + reg_parameters.T * reg_parameters.Ki * reg_parameters.error_sum; // (Used for integral effect)
   806fe:	6927      	ldr	r7, [r4, #16]
   80700:	4e14      	ldr	r6, [pc, #80]	; (80754 <motor_controller_update+0x8c>)
   80702:	6821      	ldr	r1, [r4, #0]
   80704:	68e0      	ldr	r0, [r4, #12]
   80706:	47b0      	blx	r6
   80708:	4639      	mov	r1, r7
   8070a:	47b0      	blx	r6
   8070c:	4607      	mov	r7, r0
   8070e:	4628      	mov	r0, r5
   80710:	4b11      	ldr	r3, [pc, #68]	; (80758 <motor_controller_update+0x90>)
   80712:	4798      	blx	r3
   80714:	6861      	ldr	r1, [r4, #4]
   80716:	47b0      	blx	r6
   80718:	4601      	mov	r1, r0
   8071a:	4638      	mov	r0, r7
   8071c:	4b0f      	ldr	r3, [pc, #60]	; (8075c <motor_controller_update+0x94>)
   8071e:	4798      	blx	r3
   80720:	4b0f      	ldr	r3, [pc, #60]	; (80760 <motor_controller_update+0x98>)
   80722:	4798      	blx	r3
   80724:	61e0      	str	r0, [r4, #28]
   80726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80728:	eb851eb8 	.word	0xeb851eb8
   8072c:	bf8eb851 	.word	0xbf8eb851
   80730:	00000000 	.word	0x00000000
   80734:	406fe000 	.word	0x406fe000
   80738:	000808dd 	.word	0x000808dd
   8073c:	00081241 	.word	0x00081241
   80740:	0008130d 	.word	0x0008130d
   80744:	00080fa9 	.word	0x00080fa9
   80748:	20000480 	.word	0x20000480
   8074c:	00081841 	.word	0x00081841
   80750:	2000045c 	.word	0x2000045c
   80754:	00081b4d 	.word	0x00081b4d
   80758:	00081aa5 	.word	0x00081aa5
   8075c:	0008193d 	.word	0x0008193d
   80760:	00081ed9 	.word	0x00081ed9

00080764 <motor_controller_set_input>:
}

void motor_controller_set_input(){
   80764:	b538      	push	{r3, r4, r5, lr}

	if(reg_parameters.motor_input < 0){
   80766:	4b0f      	ldr	r3, [pc, #60]	; (807a4 <motor_controller_set_input+0x40>)
   80768:	69db      	ldr	r3, [r3, #28]
   8076a:	2b00      	cmp	r3, #0
   8076c:	db11      	blt.n	80792 <motor_controller_set_input+0x2e>
		motor_select_direction(MOTOR_RIGHT);
		motor_set_input(-reg_parameters.motor_input);
		
	}
	else{
		motor_select_direction(MOTOR_LEFT);
   8076e:	2001      	movs	r0, #1
   80770:	4b0d      	ldr	r3, [pc, #52]	; (807a8 <motor_controller_set_input+0x44>)
   80772:	4798      	blx	r3
		motor_set_input(reg_parameters.motor_input);
   80774:	4b0b      	ldr	r3, [pc, #44]	; (807a4 <motor_controller_set_input+0x40>)
   80776:	69d8      	ldr	r0, [r3, #28]
   80778:	4b0c      	ldr	r3, [pc, #48]	; (807ac <motor_controller_set_input+0x48>)
   8077a:	4798      	blx	r3
	}
	
	reg_parameters.previous_error = reg_parameters.current_error;
   8077c:	4c09      	ldr	r4, [pc, #36]	; (807a4 <motor_controller_set_input+0x40>)
   8077e:	6960      	ldr	r0, [r4, #20]
   80780:	61a0      	str	r0, [r4, #24]
	reg_parameters.error_sum += reg_parameters.current_error;
   80782:	6925      	ldr	r5, [r4, #16]
   80784:	4b0a      	ldr	r3, [pc, #40]	; (807b0 <motor_controller_set_input+0x4c>)
   80786:	4798      	blx	r3
   80788:	4629      	mov	r1, r5
   8078a:	4b0a      	ldr	r3, [pc, #40]	; (807b4 <motor_controller_set_input+0x50>)
   8078c:	4798      	blx	r3
   8078e:	6120      	str	r0, [r4, #16]
   80790:	bd38      	pop	{r3, r4, r5, pc}
		motor_select_direction(MOTOR_RIGHT);
   80792:	2000      	movs	r0, #0
   80794:	4b04      	ldr	r3, [pc, #16]	; (807a8 <motor_controller_set_input+0x44>)
   80796:	4798      	blx	r3
		motor_set_input(-reg_parameters.motor_input);
   80798:	4b02      	ldr	r3, [pc, #8]	; (807a4 <motor_controller_set_input+0x40>)
   8079a:	69d8      	ldr	r0, [r3, #28]
   8079c:	4240      	negs	r0, r0
   8079e:	4b03      	ldr	r3, [pc, #12]	; (807ac <motor_controller_set_input+0x48>)
   807a0:	4798      	blx	r3
   807a2:	e7eb      	b.n	8077c <motor_controller_set_input+0x18>
   807a4:	2000045c 	.word	0x2000045c
   807a8:	00080859 	.word	0x00080859
   807ac:	00080821 	.word	0x00080821
   807b0:	00081aa5 	.word	0x00081aa5
   807b4:	0008193d 	.word	0x0008193d

000807b8 <motor_init_DAC>:
#include "motor_interface.h"


void motor_init_DAC(){
	// Set clock for DACC peripheral
	REG_PMC_PCER1 |= (1<<6);
   807b8:	4a14      	ldr	r2, [pc, #80]	; (8080c <motor_init_DAC+0x54>)
   807ba:	6813      	ldr	r3, [r2, #0]
   807bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   807c0:	6013      	str	r3, [r2, #0]
	
	//Set DACC MODE REGISTER, free running mode
	REG_DACC_MR = 0x05012000;
   807c2:	4a13      	ldr	r2, [pc, #76]	; (80810 <motor_init_DAC+0x58>)
   807c4:	4b13      	ldr	r3, [pc, #76]	; (80814 <motor_init_DAC+0x5c>)
   807c6:	601a      	str	r2, [r3, #0]
	
	//Set DAC channel to channel 1
	REG_DACC_CHER = 0b10;
   807c8:	2202      	movs	r2, #2
   807ca:	330c      	adds	r3, #12
   807cc:	601a      	str	r2, [r3, #0]
	
	//Enable pmc for port C and port D
	PMC->PMC_PCER0 |= (1 << ID_PIOC);
   807ce:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
   807d2:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
   807d6:	691a      	ldr	r2, [r3, #16]
   807d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   807dc:	611a      	str	r2, [r3, #16]
	PMC->PMC_PCER0 |= (1 << ID_PIOC);
   807de:	691a      	ldr	r2, [r3, #16]
   807e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   807e4:	611a      	str	r2, [r3, #16]
	
	//Enable output on port D's pins: 0, 1, 2, 9, 10
	REG_PIOD_PER |= 0b11000000111; //Enable IO 
   807e6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
   807ea:	681a      	ldr	r2, [r3, #0]
   807ec:	f240 6107 	movw	r1, #1543	; 0x607
   807f0:	430a      	orrs	r2, r1
   807f2:	601a      	str	r2, [r3, #0]
	REG_PIOD_OER |= 0b11000000111; //Enable output
   807f4:	4a08      	ldr	r2, [pc, #32]	; (80818 <motor_init_DAC+0x60>)
   807f6:	6813      	ldr	r3, [r2, #0]
   807f8:	430b      	orrs	r3, r1
   807fa:	6013      	str	r3, [r2, #0]
	
	//Enable input on port C's pins: 0-7
	REG_PIOC_PER |= 0b11111111;
   807fc:	f5a2 7204 	sub.w	r2, r2, #528	; 0x210
   80800:	6813      	ldr	r3, [r2, #0]
   80802:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   80806:	6013      	str	r3, [r2, #0]
   80808:	4770      	bx	lr
   8080a:	bf00      	nop
   8080c:	400e0700 	.word	0x400e0700
   80810:	05012000 	.word	0x05012000
   80814:	400c8004 	.word	0x400c8004
   80818:	400e1410 	.word	0x400e1410
   8081c:	00000000 	.word	0x00000000

00080820 <motor_set_input>:
	
}

void motor_set_input(int input){
   80820:	b510      	push	{r4, lr}
	int register_value = (4095.0/255.0)* input; // 4095 for motor resolution (12 bits), and 255 for max slider value.
   80822:	4b09      	ldr	r3, [pc, #36]	; (80848 <motor_set_input+0x28>)
   80824:	4798      	blx	r3
   80826:	a306      	add	r3, pc, #24	; (adr r3, 80840 <motor_set_input+0x20>)
   80828:	e9d3 2300 	ldrd	r2, r3, [r3]
   8082c:	4c07      	ldr	r4, [pc, #28]	; (8084c <motor_set_input+0x2c>)
   8082e:	47a0      	blx	r4
   80830:	4b07      	ldr	r3, [pc, #28]	; (80850 <motor_set_input+0x30>)
   80832:	4798      	blx	r3
	
	REG_DACC_CDR = register_value;
   80834:	4b07      	ldr	r3, [pc, #28]	; (80854 <motor_set_input+0x34>)
   80836:	6018      	str	r0, [r3, #0]
   80838:	bd10      	pop	{r4, pc}
   8083a:	bf00      	nop
   8083c:	f3af 8000 	nop.w
   80840:	0f0f0f0f 	.word	0x0f0f0f0f
   80844:	40300f0f 	.word	0x40300f0f
   80848:	00081241 	.word	0x00081241
   8084c:	0008130d 	.word	0x0008130d
   80850:	00081841 	.word	0x00081841
   80854:	400c8020 	.word	0x400c8020

00080858 <motor_select_direction>:
}

void motor_select_direction(MOTOR_DIRECTION direction){

	if(direction == MOTOR_LEFT){
   80858:	2801      	cmp	r0, #1
   8085a:	d005      	beq.n	80868 <motor_select_direction+0x10>
		REG_PIOD_SODR =  (1<<10); 
	}
	else if (direction == MOTOR_RIGHT){
   8085c:	b918      	cbnz	r0, 80866 <motor_select_direction+0xe>
		REG_PIOD_CODR = (1<<10); 
   8085e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   80862:	4b04      	ldr	r3, [pc, #16]	; (80874 <motor_select_direction+0x1c>)
   80864:	601a      	str	r2, [r3, #0]
   80866:	4770      	bx	lr
		REG_PIOD_SODR =  (1<<10); 
   80868:	f44f 6280 	mov.w	r2, #1024	; 0x400
   8086c:	4b02      	ldr	r3, [pc, #8]	; (80878 <motor_select_direction+0x20>)
   8086e:	601a      	str	r2, [r3, #0]
   80870:	4770      	bx	lr
   80872:	bf00      	nop
   80874:	400e1434 	.word	0x400e1434
   80878:	400e1430 	.word	0x400e1430

0008087c <motor_reset_counter>:
	motor_reset_counter();
}

void motor_reset_counter(void){
	//Reset pin low
	REG_PIOD_CODR = (1 << 1);
   8087c:	2202      	movs	r2, #2
   8087e:	4b05      	ldr	r3, [pc, #20]	; (80894 <motor_reset_counter+0x18>)
   80880:	601a      	str	r2, [r3, #0]
   80882:	f44f 73c8 	mov.w	r3, #400	; 0x190
	
	//Delay
	for(int i = 0; i < 400; i++);
   80886:	3b01      	subs	r3, #1
   80888:	d1fd      	bne.n	80886 <motor_reset_counter+0xa>
	
	//Reset pin high
	REG_PIOD_SODR = (1 << 1);
   8088a:	2202      	movs	r2, #2
   8088c:	4b02      	ldr	r3, [pc, #8]	; (80898 <motor_reset_counter+0x1c>)
   8088e:	601a      	str	r2, [r3, #0]
   80890:	4770      	bx	lr
   80892:	bf00      	nop
   80894:	400e1434 	.word	0x400e1434
   80898:	400e1430 	.word	0x400e1430

0008089c <motor_enable>:
void motor_enable(void){
   8089c:	b508      	push	{r3, lr}
	REG_PIOD_SODR |= (1<<9); //Set PD9 high	
   8089e:	4a04      	ldr	r2, [pc, #16]	; (808b0 <motor_enable+0x14>)
   808a0:	6813      	ldr	r3, [r2, #0]
   808a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   808a6:	6013      	str	r3, [r2, #0]
	motor_reset_counter();
   808a8:	4b02      	ldr	r3, [pc, #8]	; (808b4 <motor_enable+0x18>)
   808aa:	4798      	blx	r3
   808ac:	bd08      	pop	{r3, pc}
   808ae:	bf00      	nop
   808b0:	400e1430 	.word	0x400e1430
   808b4:	0008087d 	.word	0x0008087d

000808b8 <motor_activate_counter_output>:
	
}

void motor_activate_counter_output(uint8_t on){
	
	if(on){
   808b8:	b928      	cbnz	r0, 808c6 <motor_activate_counter_output+0xe>
		REG_PIOD_CODR |= (1<<0); //Set PD0 low
	}
	else if(!on){
		REG_PIOD_SODR |=(1<<0);
   808ba:	4a06      	ldr	r2, [pc, #24]	; (808d4 <motor_activate_counter_output+0x1c>)
   808bc:	6813      	ldr	r3, [r2, #0]
   808be:	f043 0301 	orr.w	r3, r3, #1
   808c2:	6013      	str	r3, [r2, #0]
   808c4:	4770      	bx	lr
		REG_PIOD_CODR |= (1<<0); //Set PD0 low
   808c6:	4a04      	ldr	r2, [pc, #16]	; (808d8 <motor_activate_counter_output+0x20>)
   808c8:	6813      	ldr	r3, [r2, #0]
   808ca:	f043 0301 	orr.w	r3, r3, #1
   808ce:	6013      	str	r3, [r2, #0]
   808d0:	4770      	bx	lr
   808d2:	bf00      	nop
   808d4:	400e1430 	.word	0x400e1430
   808d8:	400e1434 	.word	0x400e1434

000808dc <motor_read_counter>:
		REG_PIOD_SODR = (1<<2); //Set PD2 high
	}
}


uint16_t motor_read_counter(){
   808dc:	b500      	push	{lr}
   808de:	b083      	sub	sp, #12
	
	//Enable output for encoder
	motor_activate_counter_output(1);
   808e0:	2001      	movs	r0, #1
   808e2:	4b1b      	ldr	r3, [pc, #108]	; (80950 <motor_read_counter+0x74>)
   808e4:	4798      	blx	r3
		REG_PIOD_CODR = (1<<2); //Set PD2 low
   808e6:	2204      	movs	r2, #4
   808e8:	4b1a      	ldr	r3, [pc, #104]	; (80954 <motor_read_counter+0x78>)
   808ea:	601a      	str	r2, [r3, #0]
   808ec:	f44f 73c8 	mov.w	r3, #400	; 0x190
	
	//Select higher encoder byte
	motor_select_encoder_byte(ENCODER_HIGHER_BYTE);
	
	//DELAY ABOUT 20us
	for(int i = 0; i < 400; i++);
   808f0:	3b01      	subs	r3, #1
   808f2:	d1fd      	bne.n	808f0 <motor_read_counter+0x14>
	
	//Read MSB
	volatile uint16_t most_significant_byte = REG_PIOC_PDSR;
   808f4:	4b18      	ldr	r3, [pc, #96]	; (80958 <motor_read_counter+0x7c>)
   808f6:	681b      	ldr	r3, [r3, #0]
   808f8:	b29b      	uxth	r3, r3
   808fa:	f8ad 3006 	strh.w	r3, [sp, #6]
	most_significant_byte &= 0x000000FF;  //Masking out the uninteresting bits
   808fe:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   80902:	b2db      	uxtb	r3, r3
   80904:	f8ad 3006 	strh.w	r3, [sp, #6]
	most_significant_byte = (most_significant_byte << 8);
   80908:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   8090c:	021b      	lsls	r3, r3, #8
   8090e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   80912:	f8ad 3006 	strh.w	r3, [sp, #6]
		REG_PIOD_SODR = (1<<2); //Set PD2 high
   80916:	2204      	movs	r2, #4
   80918:	4b10      	ldr	r3, [pc, #64]	; (8095c <motor_read_counter+0x80>)
   8091a:	601a      	str	r2, [r3, #0]
   8091c:	f44f 73c8 	mov.w	r3, #400	; 0x190
	
	//Select lower encoder byte
	motor_select_encoder_byte(ENCODER_LOWER_BYTE);
	
	//DELAY ABOUT 20us
	for(int i = 0; i < 400; i++);
   80920:	3b01      	subs	r3, #1
   80922:	d1fd      	bne.n	80920 <motor_read_counter+0x44>

	//Read LSB
	volatile uint16_t least_significant_byte = REG_PIOC_PDSR;
   80924:	4b0c      	ldr	r3, [pc, #48]	; (80958 <motor_read_counter+0x7c>)
   80926:	681b      	ldr	r3, [r3, #0]
   80928:	b29b      	uxth	r3, r3
   8092a:	f8ad 3004 	strh.w	r3, [sp, #4]
	least_significant_byte &= 0x000000FF; //Masking out the uninteresting bits
   8092e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   80932:	b2db      	uxtb	r3, r3
   80934:	f8ad 3004 	strh.w	r3, [sp, #4]

	//Disable output of encoder
	motor_activate_counter_output(0);
   80938:	2000      	movs	r0, #0
   8093a:	4b05      	ldr	r3, [pc, #20]	; (80950 <motor_read_counter+0x74>)
   8093c:	4798      	blx	r3
	
	return most_significant_byte + least_significant_byte;
   8093e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   80942:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   80946:	4418      	add	r0, r3
	
}
   80948:	b280      	uxth	r0, r0
   8094a:	b003      	add	sp, #12
   8094c:	f85d fb04 	ldr.w	pc, [sp], #4
   80950:	000808b9 	.word	0x000808b9
   80954:	400e1434 	.word	0x400e1434
   80958:	400e123c 	.word	0x400e123c
   8095c:	400e1430 	.word	0x400e1430

00080960 <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
   80960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80964:	460d      	mov	r5, r1
	register int pc = 0, padchar = ' ';

	if (width > 0) {
   80966:	1e16      	subs	r6, r2, #0
   80968:	dd48      	ble.n	809fc <prints+0x9c>
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
   8096a:	780a      	ldrb	r2, [r1, #0]
   8096c:	2a00      	cmp	r2, #0
   8096e:	d035      	beq.n	809dc <prints+0x7c>
   80970:	460a      	mov	r2, r1
   80972:	2400      	movs	r4, #0
   80974:	3401      	adds	r4, #1
   80976:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   8097a:	2900      	cmp	r1, #0
   8097c:	d1fa      	bne.n	80974 <prints+0x14>
		if (len >= width) width = 0;
   8097e:	42a6      	cmp	r6, r4
   80980:	dc2d      	bgt.n	809de <prints+0x7e>
   80982:	2400      	movs	r4, #0
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
   80984:	f003 0202 	and.w	r2, r3, #2
   80988:	2a00      	cmp	r2, #0
   8098a:	bf0c      	ite	eq
   8098c:	f04f 0820 	moveq.w	r8, #32
   80990:	f04f 0830 	movne.w	r8, #48	; 0x30
	}
	if (!(pad & PAD_RIGHT)) {
   80994:	f013 0301 	ands.w	r3, r3, #1
   80998:	d123      	bne.n	809e2 <prints+0x82>
		for ( ; width > 0; --width) {
   8099a:	2c00      	cmp	r4, #0
   8099c:	dd28      	ble.n	809f0 <prints+0x90>
   8099e:	4626      	mov	r6, r4
	(void) uart_putchar(c);  //Send characters to uart
   809a0:	fa5f f988 	uxtb.w	r9, r8
   809a4:	4f18      	ldr	r7, [pc, #96]	; (80a08 <prints+0xa8>)
   809a6:	4648      	mov	r0, r9
   809a8:	47b8      	blx	r7
		for ( ; width > 0; --width) {
   809aa:	3e01      	subs	r6, #1
   809ac:	d1fb      	bne.n	809a6 <prints+0x46>
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
   809ae:	7828      	ldrb	r0, [r5, #0]
   809b0:	b188      	cbz	r0, 809d6 <prints+0x76>
	(void) uart_putchar(c);  //Send characters to uart
   809b2:	4f15      	ldr	r7, [pc, #84]	; (80a08 <prints+0xa8>)
   809b4:	47b8      	blx	r7
		printchar (out, *string);
		++pc;
   809b6:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
   809b8:	f815 0f01 	ldrb.w	r0, [r5, #1]!
   809bc:	2800      	cmp	r0, #0
   809be:	d1f9      	bne.n	809b4 <prints+0x54>
	}
	for ( ; width > 0; --width) {
   809c0:	2e00      	cmp	r6, #0
   809c2:	dd08      	ble.n	809d6 <prints+0x76>
   809c4:	4635      	mov	r5, r6
	(void) uart_putchar(c);  //Send characters to uart
   809c6:	fa5f f888 	uxtb.w	r8, r8
   809ca:	4f0f      	ldr	r7, [pc, #60]	; (80a08 <prints+0xa8>)
   809cc:	4640      	mov	r0, r8
   809ce:	47b8      	blx	r7
	for ( ; width > 0; --width) {
   809d0:	3d01      	subs	r5, #1
   809d2:	d1fb      	bne.n	809cc <prints+0x6c>
   809d4:	4434      	add	r4, r6
		printchar (out, padchar);
		++pc;
	}

	return pc;
}
   809d6:	4620      	mov	r0, r4
   809d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		for (ptr = string; *ptr; ++ptr) ++len;
   809dc:	2400      	movs	r4, #0
		else width -= len;
   809de:	1b34      	subs	r4, r6, r4
   809e0:	e7d0      	b.n	80984 <prints+0x24>
   809e2:	4626      	mov	r6, r4
	for ( ; *string ; ++string) {
   809e4:	7828      	ldrb	r0, [r5, #0]
   809e6:	b108      	cbz	r0, 809ec <prints+0x8c>
	register int pc = 0, padchar = ' ';
   809e8:	2400      	movs	r4, #0
   809ea:	e7e2      	b.n	809b2 <prints+0x52>
   809ec:	2400      	movs	r4, #0
   809ee:	e7e7      	b.n	809c0 <prints+0x60>
		for ( ; width > 0; --width) {
   809f0:	4626      	mov	r6, r4
   809f2:	461c      	mov	r4, r3
   809f4:	e7db      	b.n	809ae <prints+0x4e>
	register int pc = 0, padchar = ' ';
   809f6:	f04f 0820 	mov.w	r8, #32
   809fa:	e7d8      	b.n	809ae <prints+0x4e>
	if (!(pad & PAD_RIGHT)) {
   809fc:	f013 0401 	ands.w	r4, r3, #1
   80a00:	d0f9      	beq.n	809f6 <prints+0x96>
	register int pc = 0, padchar = ' ';
   80a02:	f04f 0820 	mov.w	r8, #32
   80a06:	e7ed      	b.n	809e4 <prints+0x84>
   80a08:	00080f11 	.word	0x00080f11

00080a0c <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
   80a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   80a0e:	b085      	sub	sp, #20
   80a10:	4607      	mov	r7, r0
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;

	if (i == 0) {
   80a12:	b381      	cbz	r1, 80a76 <printi+0x6a>
   80a14:	460c      	mov	r4, r1
		print_buf[0] = '0';
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
	}

	if (sg && b == 10 && i < 0) {
   80a16:	b10b      	cbz	r3, 80a1c <printi+0x10>
   80a18:	2a0a      	cmp	r2, #10
   80a1a:	d038      	beq.n	80a8e <printi+0x82>
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
   80a1c:	2300      	movs	r3, #0
   80a1e:	f88d 300f 	strb.w	r3, [sp, #15]

	while (u) {
   80a22:	2600      	movs	r6, #0
   80a24:	2900      	cmp	r1, #0
   80a26:	d046      	beq.n	80ab6 <printi+0xaa>
   80a28:	f10d 050f 	add.w	r5, sp, #15
		t = u % b;
		if( t >= 10 )
			t += letbase - '0' - 10;
   80a2c:	990c      	ldr	r1, [sp, #48]	; 0x30
   80a2e:	393a      	subs	r1, #58	; 0x3a
		t = u % b;
   80a30:	fbb4 f3f2 	udiv	r3, r4, r2
   80a34:	fb02 4313 	mls	r3, r2, r3, r4
		if( t >= 10 )
   80a38:	2b09      	cmp	r3, #9
			t += letbase - '0' - 10;
   80a3a:	bfc8      	it	gt
   80a3c:	185b      	addgt	r3, r3, r1
		*--s = t + '0';
   80a3e:	3330      	adds	r3, #48	; 0x30
   80a40:	f805 3d01 	strb.w	r3, [r5, #-1]!
		u /= b;
   80a44:	fbb4 f4f2 	udiv	r4, r4, r2
	while (u) {
   80a48:	2c00      	cmp	r4, #0
   80a4a:	d1f1      	bne.n	80a30 <printi+0x24>
	}

	if (neg) {
   80a4c:	b156      	cbz	r6, 80a64 <printi+0x58>
		if( width && (pad & PAD_ZERO) ) {
   80a4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80a50:	b11b      	cbz	r3, 80a5a <printi+0x4e>
   80a52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80a54:	f013 0f02 	tst.w	r3, #2
   80a58:	d125      	bne.n	80aa6 <printi+0x9a>
			printchar (out, '-');
			++pc;
			--width;
		}
		else {
			*--s = '-';
   80a5a:	232d      	movs	r3, #45	; 0x2d
   80a5c:	f805 3c01 	strb.w	r3, [r5, #-1]
   80a60:	3d01      	subs	r5, #1
	register int t, neg = 0, pc = 0;
   80a62:	2600      	movs	r6, #0
		}
	}

	return pc + prints (out, s, width, pad);
   80a64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80a66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80a68:	4629      	mov	r1, r5
   80a6a:	4638      	mov	r0, r7
   80a6c:	4c14      	ldr	r4, [pc, #80]	; (80ac0 <printi+0xb4>)
   80a6e:	47a0      	blx	r4
   80a70:	4430      	add	r0, r6
}
   80a72:	b005      	add	sp, #20
   80a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
		print_buf[0] = '0';
   80a76:	2330      	movs	r3, #48	; 0x30
   80a78:	f88d 3004 	strb.w	r3, [sp, #4]
		print_buf[1] = '\0';
   80a7c:	2300      	movs	r3, #0
   80a7e:	f88d 3005 	strb.w	r3, [sp, #5]
		return prints (out, print_buf, width, pad);
   80a82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80a84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80a86:	a901      	add	r1, sp, #4
   80a88:	4c0d      	ldr	r4, [pc, #52]	; (80ac0 <printi+0xb4>)
   80a8a:	47a0      	blx	r4
   80a8c:	e7f1      	b.n	80a72 <printi+0x66>
	if (sg && b == 10 && i < 0) {
   80a8e:	2900      	cmp	r1, #0
   80a90:	dac4      	bge.n	80a1c <printi+0x10>
		u = -i;
   80a92:	424c      	negs	r4, r1
	*s = '\0';
   80a94:	2300      	movs	r3, #0
   80a96:	f88d 300f 	strb.w	r3, [sp, #15]
	s = print_buf + PRINT_BUF_LEN-1;
   80a9a:	f10d 050f 	add.w	r5, sp, #15
	while (u) {
   80a9e:	2c00      	cmp	r4, #0
   80aa0:	d0d5      	beq.n	80a4e <printi+0x42>
		neg = 1;
   80aa2:	2601      	movs	r6, #1
   80aa4:	e7c0      	b.n	80a28 <printi+0x1c>
	(void) uart_putchar(c);  //Send characters to uart
   80aa6:	202d      	movs	r0, #45	; 0x2d
   80aa8:	4b06      	ldr	r3, [pc, #24]	; (80ac4 <printi+0xb8>)
   80aaa:	4798      	blx	r3
			--width;
   80aac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80aae:	3b01      	subs	r3, #1
   80ab0:	930a      	str	r3, [sp, #40]	; 0x28
			++pc;
   80ab2:	2601      	movs	r6, #1
			--width;
   80ab4:	e7d6      	b.n	80a64 <printi+0x58>
	register int t, neg = 0, pc = 0;
   80ab6:	461e      	mov	r6, r3
	s = print_buf + PRINT_BUF_LEN-1;
   80ab8:	f10d 050f 	add.w	r5, sp, #15
   80abc:	e7d2      	b.n	80a64 <printi+0x58>
   80abe:	bf00      	nop
   80ac0:	00080961 	.word	0x00080961
   80ac4:	00080f11 	.word	0x00080f11

00080ac8 <print>:

static int print( char **out, const char *format, va_list args )
{
   80ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80acc:	b087      	sub	sp, #28
   80ace:	4680      	mov	r8, r0
	register int width, pad;
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
   80ad0:	780b      	ldrb	r3, [r1, #0]
   80ad2:	2b00      	cmp	r3, #0
   80ad4:	f000 8094 	beq.w	80c00 <print+0x138>
   80ad8:	468b      	mov	fp, r1
   80ada:	4617      	mov	r7, r2
   80adc:	2500      	movs	r5, #0
	(void) uart_putchar(c);  //Send characters to uart
   80ade:	4e4e      	ldr	r6, [pc, #312]	; (80c18 <print+0x150>)
			}
			if( *format == 'c' ) {
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
				scr[1] = '\0';
				pc += prints (out, scr, width, pad);
   80ae0:	f8df a13c 	ldr.w	sl, [pc, #316]	; 80c20 <print+0x158>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   80ae4:	f8df 913c 	ldr.w	r9, [pc, #316]	; 80c24 <print+0x15c>
   80ae8:	e046      	b.n	80b78 <print+0xb0>
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   80aea:	2200      	movs	r2, #0
   80aec:	e070      	b.n	80bd0 <print+0x108>
				register char *s = (char *)va_arg( args, int );
   80aee:	6839      	ldr	r1, [r7, #0]
   80af0:	3704      	adds	r7, #4
				pc += prints (out, s?s:"(null)", width, pad);
   80af2:	484a      	ldr	r0, [pc, #296]	; (80c1c <print+0x154>)
   80af4:	2900      	cmp	r1, #0
   80af6:	bf08      	it	eq
   80af8:	4601      	moveq	r1, r0
   80afa:	4640      	mov	r0, r8
   80afc:	47d0      	blx	sl
   80afe:	4405      	add	r5, r0
				continue;
   80b00:	e035      	b.n	80b6e <print+0xa6>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
   80b02:	6839      	ldr	r1, [r7, #0]
   80b04:	3704      	adds	r7, #4
   80b06:	2061      	movs	r0, #97	; 0x61
   80b08:	9002      	str	r0, [sp, #8]
   80b0a:	9301      	str	r3, [sp, #4]
   80b0c:	9200      	str	r2, [sp, #0]
   80b0e:	2301      	movs	r3, #1
   80b10:	220a      	movs	r2, #10
   80b12:	4640      	mov	r0, r8
   80b14:	47c8      	blx	r9
   80b16:	4405      	add	r5, r0
				continue;
   80b18:	e029      	b.n	80b6e <print+0xa6>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
   80b1a:	6839      	ldr	r1, [r7, #0]
   80b1c:	3704      	adds	r7, #4
   80b1e:	2061      	movs	r0, #97	; 0x61
   80b20:	9002      	str	r0, [sp, #8]
   80b22:	9301      	str	r3, [sp, #4]
   80b24:	9200      	str	r2, [sp, #0]
   80b26:	2300      	movs	r3, #0
   80b28:	2210      	movs	r2, #16
   80b2a:	4640      	mov	r0, r8
   80b2c:	47c8      	blx	r9
   80b2e:	4405      	add	r5, r0
				continue;
   80b30:	e01d      	b.n	80b6e <print+0xa6>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
   80b32:	6839      	ldr	r1, [r7, #0]
   80b34:	3704      	adds	r7, #4
   80b36:	2041      	movs	r0, #65	; 0x41
   80b38:	9002      	str	r0, [sp, #8]
   80b3a:	9301      	str	r3, [sp, #4]
   80b3c:	9200      	str	r2, [sp, #0]
   80b3e:	2300      	movs	r3, #0
   80b40:	2210      	movs	r2, #16
   80b42:	4640      	mov	r0, r8
   80b44:	47c8      	blx	r9
   80b46:	4405      	add	r5, r0
				continue;
   80b48:	e011      	b.n	80b6e <print+0xa6>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   80b4a:	6839      	ldr	r1, [r7, #0]
   80b4c:	3704      	adds	r7, #4
   80b4e:	2061      	movs	r0, #97	; 0x61
   80b50:	9002      	str	r0, [sp, #8]
   80b52:	9301      	str	r3, [sp, #4]
   80b54:	9200      	str	r2, [sp, #0]
   80b56:	2300      	movs	r3, #0
   80b58:	220a      	movs	r2, #10
   80b5a:	4640      	mov	r0, r8
   80b5c:	47c8      	blx	r9
   80b5e:	4405      	add	r5, r0
				continue;
   80b60:	e005      	b.n	80b6e <print+0xa6>
			++format;
   80b62:	46a3      	mov	fp, r4
	(void) uart_putchar(c);  //Send characters to uart
   80b64:	f89b 0000 	ldrb.w	r0, [fp]
   80b68:	47b0      	blx	r6
			}
		}
		else {
		out:
			printchar (out, *format);
			++pc;
   80b6a:	3501      	adds	r5, #1
   80b6c:	465c      	mov	r4, fp
	for (; *format != 0; ++format) {
   80b6e:	f104 0b01 	add.w	fp, r4, #1
   80b72:	7863      	ldrb	r3, [r4, #1]
   80b74:	2b00      	cmp	r3, #0
   80b76:	d044      	beq.n	80c02 <print+0x13a>
		if (*format == '%') {
   80b78:	2b25      	cmp	r3, #37	; 0x25
   80b7a:	d1f3      	bne.n	80b64 <print+0x9c>
			++format;
   80b7c:	f10b 0401 	add.w	r4, fp, #1
			if (*format == '\0') break;
   80b80:	f89b 3001 	ldrb.w	r3, [fp, #1]
   80b84:	2b00      	cmp	r3, #0
   80b86:	d03c      	beq.n	80c02 <print+0x13a>
			if (*format == '%') goto out;
   80b88:	2b25      	cmp	r3, #37	; 0x25
   80b8a:	d0ea      	beq.n	80b62 <print+0x9a>
			if (*format == '-') {
   80b8c:	2b2d      	cmp	r3, #45	; 0x2d
				++format;
   80b8e:	bf06      	itte	eq
   80b90:	f10b 0402 	addeq.w	r4, fp, #2
				pad = PAD_RIGHT;
   80b94:	2301      	moveq	r3, #1
			width = pad = 0;
   80b96:	2300      	movne	r3, #0
			while (*format == '0') {
   80b98:	7822      	ldrb	r2, [r4, #0]
   80b9a:	2a30      	cmp	r2, #48	; 0x30
   80b9c:	d105      	bne.n	80baa <print+0xe2>
				pad |= PAD_ZERO;
   80b9e:	f043 0302 	orr.w	r3, r3, #2
			while (*format == '0') {
   80ba2:	f814 2f01 	ldrb.w	r2, [r4, #1]!
   80ba6:	2a30      	cmp	r2, #48	; 0x30
   80ba8:	d0f9      	beq.n	80b9e <print+0xd6>
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   80baa:	7821      	ldrb	r1, [r4, #0]
   80bac:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   80bb0:	b2d2      	uxtb	r2, r2
   80bb2:	2a09      	cmp	r2, #9
   80bb4:	d899      	bhi.n	80aea <print+0x22>
   80bb6:	2200      	movs	r2, #0
				width *= 10;
   80bb8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
				width += *format - '0';
   80bbc:	3930      	subs	r1, #48	; 0x30
   80bbe:	eb01 0242 	add.w	r2, r1, r2, lsl #1
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   80bc2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   80bc6:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   80bca:	b2c0      	uxtb	r0, r0
   80bcc:	2809      	cmp	r0, #9
   80bce:	d9f3      	bls.n	80bb8 <print+0xf0>
			if( *format == 's' ) {
   80bd0:	2973      	cmp	r1, #115	; 0x73
   80bd2:	d08c      	beq.n	80aee <print+0x26>
			if( *format == 'd' ) {
   80bd4:	2964      	cmp	r1, #100	; 0x64
   80bd6:	d094      	beq.n	80b02 <print+0x3a>
			if( *format == 'x' ) {
   80bd8:	2978      	cmp	r1, #120	; 0x78
   80bda:	d09e      	beq.n	80b1a <print+0x52>
			if( *format == 'X' ) {
   80bdc:	2958      	cmp	r1, #88	; 0x58
   80bde:	d0a8      	beq.n	80b32 <print+0x6a>
			if( *format == 'u' ) {
   80be0:	2975      	cmp	r1, #117	; 0x75
   80be2:	d0b2      	beq.n	80b4a <print+0x82>
			if( *format == 'c' ) {
   80be4:	2963      	cmp	r1, #99	; 0x63
   80be6:	d1c2      	bne.n	80b6e <print+0xa6>
				scr[0] = (char)va_arg( args, int );
   80be8:	6839      	ldr	r1, [r7, #0]
   80bea:	3704      	adds	r7, #4
   80bec:	f88d 1014 	strb.w	r1, [sp, #20]
				scr[1] = '\0';
   80bf0:	2100      	movs	r1, #0
   80bf2:	f88d 1015 	strb.w	r1, [sp, #21]
				pc += prints (out, scr, width, pad);
   80bf6:	a905      	add	r1, sp, #20
   80bf8:	4640      	mov	r0, r8
   80bfa:	47d0      	blx	sl
   80bfc:	4405      	add	r5, r0
				continue;
   80bfe:	e7b6      	b.n	80b6e <print+0xa6>
	register int pc = 0;
   80c00:	2500      	movs	r5, #0
		}
	}
	if (out) **out = '\0';
   80c02:	f1b8 0f00 	cmp.w	r8, #0
   80c06:	d003      	beq.n	80c10 <print+0x148>
   80c08:	f8d8 3000 	ldr.w	r3, [r8]
   80c0c:	2200      	movs	r2, #0
   80c0e:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
}
   80c10:	4628      	mov	r0, r5
   80c12:	b007      	add	sp, #28
   80c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80c18:	00080f11 	.word	0x00080f11
   80c1c:	00082100 	.word	0x00082100
   80c20:	00080961 	.word	0x00080961
   80c24:	00080a0d 	.word	0x00080a0d

00080c28 <printf>:

int printf(const char *format, ...)
{
   80c28:	b40f      	push	{r0, r1, r2, r3}
   80c2a:	b500      	push	{lr}
   80c2c:	b083      	sub	sp, #12
   80c2e:	aa04      	add	r2, sp, #16
   80c30:	f852 1b04 	ldr.w	r1, [r2], #4
        va_list args;
        
        va_start( args, format );
   80c34:	9201      	str	r2, [sp, #4]
        return print( 0, format, args );
   80c36:	2000      	movs	r0, #0
   80c38:	4b03      	ldr	r3, [pc, #12]	; (80c48 <printf+0x20>)
   80c3a:	4798      	blx	r3
}
   80c3c:	b003      	add	sp, #12
   80c3e:	f85d eb04 	ldr.w	lr, [sp], #4
   80c42:	b004      	add	sp, #16
   80c44:	4770      	bx	lr
   80c46:	bf00      	nop
   80c48:	00080ac9 	.word	0x00080ac9

00080c4c <timer_init>:
static uint32_t counter = 0;
volatile uint16_t status = 0;


void timer_init(void){
    REG_PMC_PCER0 |= (1 << ID_TC0); //enable timer in power controller (1 << ID_PIOB) | 
   80c4c:	4a0b      	ldr	r2, [pc, #44]	; (80c7c <timer_init+0x30>)
   80c4e:	6813      	ldr	r3, [r2, #0]
   80c50:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   80c54:	6013      	str	r3, [r2, #0]
    // HIGHSCORE/DAC Controller TIMING SETUP //    
	
    TC0->TC_CHANNEL[0].TC_IER |= TC_IER_CPCS
   80c56:	4b0a      	ldr	r3, [pc, #40]	; (80c80 <timer_init+0x34>)
   80c58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   80c5a:	f042 0214 	orr.w	r2, r2, #20
   80c5e:	625a      	str	r2, [r3, #36]	; 0x24
                              | TC_IER_CPAS;
    TC0->TC_CHANNEL[0].TC_CCR |= TC_CCR_CLKEN; 
   80c60:	681a      	ldr	r2, [r3, #0]
   80c62:	f042 0201 	orr.w	r2, r2, #1
   80c66:	601a      	str	r2, [r3, #0]
	   
    uint16_t RC_count = 6567; // Ca 100 hz
	
    TC0->TC_CHANNEL[0].TC_RC = RC_count; // Set Compare RC    
   80c68:	f641 12a7 	movw	r2, #6567	; 0x19a7
   80c6c:	61da      	str	r2, [r3, #28]
	    
    TC0->TC_CHANNEL[0].TC_CMR = TC_CMR_TCCLKS_TIMER_CLOCK4  // prescale of 128
   80c6e:	4a05      	ldr	r2, [pc, #20]	; (80c84 <timer_init+0x38>)
   80c70:	605a      	str	r2, [r3, #4]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80c72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   80c76:	4b04      	ldr	r3, [pc, #16]	; (80c88 <timer_init+0x3c>)
   80c78:	601a      	str	r2, [r3, #0]
   80c7a:	4770      	bx	lr
   80c7c:	400e0610 	.word	0x400e0610
   80c80:	40080000 	.word	0x40080000
   80c84:	0004c003 	.word	0x0004c003
   80c88:	e000e100 	.word	0xe000e100

00080c8c <TC0_Handler>:
                               | TC_CMR_WAVSEL_UP_RC        // compare rising edge on RC
                               | TC_CMR_ACPC_SET;           
    NVIC_EnableIRQ(ID_TC0); 
}

void TC0_Handler(void){
   80c8c:	b508      	push	{r3, lr}
    uint16_t status =  TC0->TC_CHANNEL[0].TC_SR;
   80c8e:	4b0d      	ldr	r3, [pc, #52]	; (80cc4 <TC0_Handler+0x38>)
   80c90:	6a1b      	ldr	r3, [r3, #32]
	
	counter++;
   80c92:	490d      	ldr	r1, [pc, #52]	; (80cc8 <TC0_Handler+0x3c>)
   80c94:	680b      	ldr	r3, [r1, #0]
   80c96:	1c5a      	adds	r2, r3, #1
   80c98:	600a      	str	r2, [r1, #0]
	
	if(!(counter % 100)){
   80c9a:	4b0c      	ldr	r3, [pc, #48]	; (80ccc <TC0_Handler+0x40>)
   80c9c:	fba3 1302 	umull	r1, r3, r3, r2
   80ca0:	095b      	lsrs	r3, r3, #5
   80ca2:	2164      	movs	r1, #100	; 0x64
   80ca4:	fb01 2313 	mls	r3, r1, r3, r2
   80ca8:	b91b      	cbnz	r3, 80cb2 <TC0_Handler+0x26>
		count++;
   80caa:	4a07      	ldr	r2, [pc, #28]	; (80cc8 <TC0_Handler+0x3c>)
   80cac:	6853      	ldr	r3, [r2, #4]
   80cae:	3301      	adds	r3, #1
   80cb0:	6053      	str	r3, [r2, #4]
	}
	
	motor_controller_update();
   80cb2:	4b07      	ldr	r3, [pc, #28]	; (80cd0 <TC0_Handler+0x44>)
   80cb4:	4798      	blx	r3
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80cb6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   80cba:	4b06      	ldr	r3, [pc, #24]	; (80cd4 <TC0_Handler+0x48>)
   80cbc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   80cc0:	bd08      	pop	{r3, pc}
   80cc2:	bf00      	nop
   80cc4:	40080000 	.word	0x40080000
   80cc8:	20000450 	.word	0x20000450
   80ccc:	51eb851f 	.word	0x51eb851f
   80cd0:	000806c9 	.word	0x000806c9
   80cd4:	e000e100 	.word	0xe000e100

00080cd8 <SetTimer>:
    NVIC_ClearPendingIRQ(ID_TC0);
}


void SetTimer(uint8_t state){
    if(state == 1){
   80cd8:	2801      	cmp	r0, #1
   80cda:	d004      	beq.n	80ce6 <SetTimer+0xe>
        TC0->TC_CHANNEL[0].TC_CCR |= TC_CCR_SWTRG
                                   | TC_CCR_CLKEN;         
    }
    else if(state == 0) {
   80cdc:	b910      	cbnz	r0, 80ce4 <SetTimer+0xc>
        TC0->TC_CHANNEL[0].TC_CCR = TC_CCR_CLKDIS;         
   80cde:	2202      	movs	r2, #2
   80ce0:	4b04      	ldr	r3, [pc, #16]	; (80cf4 <SetTimer+0x1c>)
   80ce2:	601a      	str	r2, [r3, #0]
   80ce4:	4770      	bx	lr
        TC0->TC_CHANNEL[0].TC_CCR |= TC_CCR_SWTRG
   80ce6:	4a03      	ldr	r2, [pc, #12]	; (80cf4 <SetTimer+0x1c>)
   80ce8:	6813      	ldr	r3, [r2, #0]
   80cea:	f043 0305 	orr.w	r3, r3, #5
   80cee:	6013      	str	r3, [r2, #0]
   80cf0:	4770      	bx	lr
   80cf2:	bf00      	nop
   80cf4:	40080000 	.word	0x40080000

00080cf8 <count_value>:
    }
}

uint32_t count_value(void){
	return count;
}
   80cf8:	4b01      	ldr	r3, [pc, #4]	; (80d00 <count_value+0x8>)
   80cfa:	6858      	ldr	r0, [r3, #4]
   80cfc:	4770      	bx	lr
   80cfe:	bf00      	nop
   80d00:	20000450 	.word	0x20000450

00080d04 <reset_count>:

void reset_count(void){
	count = 0;
   80d04:	2200      	movs	r2, #0
   80d06:	4b01      	ldr	r3, [pc, #4]	; (80d0c <reset_count+0x8>)
   80d08:	605a      	str	r2, [r3, #4]
   80d0a:	4770      	bx	lr
   80d0c:	20000450 	.word	0x20000450

00080d10 <servo_pwm_init>:

#include "servo_ctrl.h"

void servo_pwm_init(void){
		//Initializing pin for solonoid 
		REG_PIOC_PER |= (1 << 28); // set as gpio on pin 23 port C
   80d10:	4b13      	ldr	r3, [pc, #76]	; (80d60 <servo_pwm_init+0x50>)
   80d12:	681a      	ldr	r2, [r3, #0]
   80d14:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   80d18:	601a      	str	r2, [r3, #0]
		REG_PIOC_OER |= (1 << 28); // output enable
   80d1a:	4912      	ldr	r1, [pc, #72]	; (80d64 <servo_pwm_init+0x54>)
   80d1c:	680a      	ldr	r2, [r1, #0]
   80d1e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   80d22:	600a      	str	r2, [r1, #0]
		REG_PIOC_SODR = (1 << 28); // set output data low
   80d24:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80d28:	4a0f      	ldr	r2, [pc, #60]	; (80d68 <servo_pwm_init+0x58>)
   80d2a:	6011      	str	r1, [r2, #0]
	
	
		//First enable PWM clock
		REG_PMC_PCER1 |= (1<<4);
   80d2c:	490f      	ldr	r1, [pc, #60]	; (80d6c <servo_pwm_init+0x5c>)
   80d2e:	680a      	ldr	r2, [r1, #0]
   80d30:	f042 0210 	orr.w	r2, r2, #16
   80d34:	600a      	str	r2, [r1, #0]
		
		//Turn of the PIO conteller for pin PC19. PIN 44 on shield.
		PIOC->PIO_PDR |= PIO_PDR_P19;
   80d36:	685a      	ldr	r2, [r3, #4]
   80d38:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80d3c:	605a      	str	r2, [r3, #4]
		
		//Choose peripheral B for PC19, PWMH5
		PIOC->PIO_ABSR |= PIO_ABSR_P19;
   80d3e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80d40:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80d44:	671a      	str	r2, [r3, #112]	; 0x70
		
		//Set clock frequency for PWM, 2Mhz, CLKA.
		REG_PWM_CLK = 0x002A0000;
   80d46:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
   80d4a:	4b09      	ldr	r3, [pc, #36]	; (80d70 <servo_pwm_init+0x60>)
   80d4c:	601a      	str	r2, [r3, #0]
		
		//Set channel mode
		REG_PWM_CMR5 = 0x0000000C;
   80d4e:	220c      	movs	r2, #12
   80d50:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
   80d54:	601a      	str	r2, [r3, #0]
		
		//Set channel period to 20ms
		REG_PWM_CPRD5 = 0x00009C40;
   80d56:	f649 4240 	movw	r2, #40000	; 0x9c40
   80d5a:	330c      	adds	r3, #12
   80d5c:	601a      	str	r2, [r3, #0]
   80d5e:	4770      	bx	lr
   80d60:	400e1200 	.word	0x400e1200
   80d64:	400e1210 	.word	0x400e1210
   80d68:	400e1230 	.word	0x400e1230
   80d6c:	400e0700 	.word	0x400e0700
   80d70:	40094000 	.word	0x40094000
   80d74:	00000000 	.word	0x00000000

00080d78 <servo_set_pwm>:
}

int servo_set_pwm(float duty_cycle){
   80d78:	b538      	push	{r3, r4, r5, lr}
   80d7a:	4604      	mov	r4, r0
	
	if(duty_cycle < 0.040){
   80d7c:	4b16      	ldr	r3, [pc, #88]	; (80dd8 <servo_set_pwm+0x60>)
   80d7e:	4798      	blx	r3
   80d80:	a313      	add	r3, pc, #76	; (adr r3, 80dd0 <servo_set_pwm+0x58>)
   80d82:	e9d3 2300 	ldrd	r2, r3, [r3]
   80d86:	4d15      	ldr	r5, [pc, #84]	; (80ddc <servo_set_pwm+0x64>)
   80d88:	47a8      	blx	r5
   80d8a:	b9b8      	cbnz	r0, 80dbc <servo_set_pwm+0x44>
		printf("ERROR: duty cycle too low");
		return 1;
	}
	else if(duty_cycle > 110){
   80d8c:	4914      	ldr	r1, [pc, #80]	; (80de0 <servo_set_pwm+0x68>)
   80d8e:	4620      	mov	r0, r4
   80d90:	4b14      	ldr	r3, [pc, #80]	; (80de4 <servo_set_pwm+0x6c>)
   80d92:	4798      	blx	r3
   80d94:	b9b8      	cbnz	r0, 80dc6 <servo_set_pwm+0x4e>
		printf("ERROR: duty cycle too high");
		return 1;
	}
	//Value to be set in duty cycle register
	float CDTY = 2000000*0.02*(1 - duty_cycle); //pwm_clock_frequency*period*(1-duty_cycle)
   80d96:	4621      	mov	r1, r4
   80d98:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
   80d9c:	4b12      	ldr	r3, [pc, #72]	; (80de8 <servo_set_pwm+0x70>)
   80d9e:	4798      	blx	r3
   80da0:	4912      	ldr	r1, [pc, #72]	; (80dec <servo_set_pwm+0x74>)
   80da2:	4b13      	ldr	r3, [pc, #76]	; (80df0 <servo_set_pwm+0x78>)
   80da4:	4798      	blx	r3
	
	//Set channel duty register
	REG_PWM_CDTY5 = CDTY;  
   80da6:	4b13      	ldr	r3, [pc, #76]	; (80df4 <servo_set_pwm+0x7c>)
   80da8:	4798      	blx	r3
   80daa:	4b13      	ldr	r3, [pc, #76]	; (80df8 <servo_set_pwm+0x80>)
   80dac:	6018      	str	r0, [r3, #0]
	
	//Activate PWM signal
	REG_PWM_ENA |= 0x00000020;
   80dae:	4a13      	ldr	r2, [pc, #76]	; (80dfc <servo_set_pwm+0x84>)
   80db0:	6813      	ldr	r3, [r2, #0]
   80db2:	f043 0320 	orr.w	r3, r3, #32
   80db6:	6013      	str	r3, [r2, #0]
	
	return 0;	
   80db8:	2000      	movs	r0, #0
}
   80dba:	bd38      	pop	{r3, r4, r5, pc}
		printf("ERROR: duty cycle too low");
   80dbc:	4810      	ldr	r0, [pc, #64]	; (80e00 <servo_set_pwm+0x88>)
   80dbe:	4b11      	ldr	r3, [pc, #68]	; (80e04 <servo_set_pwm+0x8c>)
   80dc0:	4798      	blx	r3
		return 1;
   80dc2:	2001      	movs	r0, #1
   80dc4:	bd38      	pop	{r3, r4, r5, pc}
		printf("ERROR: duty cycle too high");
   80dc6:	4810      	ldr	r0, [pc, #64]	; (80e08 <servo_set_pwm+0x90>)
   80dc8:	4b0e      	ldr	r3, [pc, #56]	; (80e04 <servo_set_pwm+0x8c>)
   80dca:	4798      	blx	r3
		return 1;
   80dcc:	2001      	movs	r0, #1
   80dce:	bd38      	pop	{r3, r4, r5, pc}
   80dd0:	47ae147b 	.word	0x47ae147b
   80dd4:	3fa47ae1 	.word	0x3fa47ae1
   80dd8:	00081265 	.word	0x00081265
   80ddc:	000817f1 	.word	0x000817f1
   80de0:	42dc0000 	.word	0x42dc0000
   80de4:	00081ec5 	.word	0x00081ec5
   80de8:	00081939 	.word	0x00081939
   80dec:	471c4000 	.word	0x471c4000
   80df0:	00081b4d 	.word	0x00081b4d
   80df4:	00081f25 	.word	0x00081f25
   80df8:	400942a4 	.word	0x400942a4
   80dfc:	40094004 	.word	0x40094004
   80e00:	00082108 	.word	0x00082108
   80e04:	00080c29 	.word	0x00080c29
   80e08:	00082124 	.word	0x00082124
   80e0c:	00000000 	.word	0x00000000

00080e10 <servo_set_angle>:

void servo_set_angle(joystick_data_t data){
   80e10:	b510      	push	{r4, lr}
   80e12:	b084      	sub	sp, #16
   80e14:	ab04      	add	r3, sp, #16
   80e16:	e903 0007 	stmdb	r3, {r0, r1, r2}

	float servo_position = -data.posX;
   80e1a:	9801      	ldr	r0, [sp, #4]
   80e1c:	4240      	negs	r0, r0
   80e1e:	4b0e      	ldr	r3, [pc, #56]	; (80e58 <servo_set_angle+0x48>)
   80e20:	4798      	blx	r3
	
	 //Linearization of joystick position to pulse with
	float pulse_width = 0.006*servo_position + 1.5; 
   80e22:	4b0e      	ldr	r3, [pc, #56]	; (80e5c <servo_set_angle+0x4c>)
   80e24:	4798      	blx	r3
   80e26:	a30a      	add	r3, pc, #40	; (adr r3, 80e50 <servo_set_angle+0x40>)
   80e28:	e9d3 2300 	ldrd	r2, r3, [r3]
   80e2c:	4c0c      	ldr	r4, [pc, #48]	; (80e60 <servo_set_angle+0x50>)
   80e2e:	47a0      	blx	r4
   80e30:	2200      	movs	r2, #0
   80e32:	4b0c      	ldr	r3, [pc, #48]	; (80e64 <servo_set_angle+0x54>)
   80e34:	4c0c      	ldr	r4, [pc, #48]	; (80e68 <servo_set_angle+0x58>)
   80e36:	47a0      	blx	r4
   80e38:	4b0c      	ldr	r3, [pc, #48]	; (80e6c <servo_set_angle+0x5c>)
   80e3a:	4798      	blx	r3
	
	float duty_cycle = pulse_width / 20.0; //20.0 is PWM period.
   80e3c:	490c      	ldr	r1, [pc, #48]	; (80e70 <servo_set_angle+0x60>)
   80e3e:	4b0d      	ldr	r3, [pc, #52]	; (80e74 <servo_set_angle+0x64>)
   80e40:	4798      	blx	r3
	
	servo_set_pwm(duty_cycle);
   80e42:	4b0d      	ldr	r3, [pc, #52]	; (80e78 <servo_set_angle+0x68>)
   80e44:	4798      	blx	r3
}
   80e46:	b004      	add	sp, #16
   80e48:	bd10      	pop	{r4, pc}
   80e4a:	bf00      	nop
   80e4c:	f3af 8000 	nop.w
   80e50:	bc6a7efa 	.word	0xbc6a7efa
   80e54:	3f789374 	.word	0x3f789374
   80e58:	00081aa5 	.word	0x00081aa5
   80e5c:	00081265 	.word	0x00081265
   80e60:	0008130d 	.word	0x0008130d
   80e64:	3ff80000 	.word	0x3ff80000
   80e68:	00080fa9 	.word	0x00080fa9
   80e6c:	00081891 	.word	0x00081891
   80e70:	41a00000 	.word	0x41a00000
   80e74:	00081cb5 	.word	0x00081cb5
   80e78:	00080d79 	.word	0x00080d79

00080e7c <servo_activate_solonoid>:

void servo_activate_solonoid(joystick_data_t data){
   80e7c:	b084      	sub	sp, #16
   80e7e:	ab04      	add	r3, sp, #16
   80e80:	e903 0007 	stmdb	r3, {r0, r1, r2}
	
	if(data.button_pushed){
   80e84:	f89d 300c 	ldrb.w	r3, [sp, #12]
   80e88:	b92b      	cbnz	r3, 80e96 <servo_activate_solonoid+0x1a>
		REG_PIOC_CODR = (1 << 28); // Enable voltage to solonoid
	}
	else{
		REG_PIOC_SODR = (1 << 28); // Set solonoid pin low
   80e8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80e8e:	4b04      	ldr	r3, [pc, #16]	; (80ea0 <servo_activate_solonoid+0x24>)
   80e90:	601a      	str	r2, [r3, #0]
	}
	//for(int i = 0; i < 400; i++); // Delay
	
}
   80e92:	b004      	add	sp, #16
   80e94:	4770      	bx	lr
		REG_PIOC_CODR = (1 << 28); // Enable voltage to solonoid
   80e96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80e9a:	4b02      	ldr	r3, [pc, #8]	; (80ea4 <servo_activate_solonoid+0x28>)
   80e9c:	601a      	str	r2, [r3, #0]
   80e9e:	e7f8      	b.n	80e92 <servo_activate_solonoid+0x16>
   80ea0:	400e1230 	.word	0x400e1230
   80ea4:	400e1234 	.word	0x400e1234

00080ea8 <configure_uart>:
	uint32_t ul_sr;

/*
Initialize UART ring buffer as empty
*/
rx_buffer.head=0;
   80ea8:	4b16      	ldr	r3, [pc, #88]	; (80f04 <configure_uart+0x5c>)
   80eaa:	2200      	movs	r2, #0
   80eac:	701a      	strb	r2, [r3, #0]
rx_buffer.tail=0;
   80eae:	705a      	strb	r2, [r3, #1]
/*
Initialize UART communication
*/
	// Pin configuration
	// Disable interrupts on Uart receive (URXD) and transmit (UTXD) pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80eb0:	4b15      	ldr	r3, [pc, #84]	; (80f08 <configure_uart+0x60>)
   80eb2:	f44f 7140 	mov.w	r1, #768	; 0x300
   80eb6:	6459      	str	r1, [r3, #68]	; 0x44

	// Disable the Parallel IO (PIO) of the URXD and UTXD pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80eb8:	6059      	str	r1, [r3, #4]

	// Read current peripheral AB select register and set the UTXD and URXD pins to 0 (UART is connected as peripheral A)
	ul_sr = PIOA->PIO_ABSR;
   80eba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	PIOA->PIO_ABSR &= ~(PIO_PA8A_URXD | PIO_PA9A_UTXD) & ul_sr;
   80ebc:	6f18      	ldr	r0, [r3, #112]	; 0x70
   80ebe:	4002      	ands	r2, r0
   80ec0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   80ec4:	671a      	str	r2, [r3, #112]	; 0x70

	// Enable pull up resistor on URXD and UTXD pin
	PIOA->PIO_PUER = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80ec6:	6659      	str	r1, [r3, #100]	; 0x64

	// Uart configuration
	
	// Enable the peripheral UART controller in Power Management Controller (PMC)
	PMC->PMC_PCER0 = 1 << ID_UART;
   80ec8:	f44f 7280 	mov.w	r2, #256	; 0x100
   80ecc:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   80ed0:	611a      	str	r2, [r3, #16]

	// Reset and disable receiver and transmitter
	UART->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX | UART_CR_RXDIS | UART_CR_TXDIS;
   80ed2:	f503 7300 	add.w	r3, r3, #512	; 0x200
   80ed6:	21ac      	movs	r1, #172	; 0xac
   80ed8:	6019      	str	r1, [r3, #0]

	// Set the baudrate
	UART->UART_BRGR = 547; // MCK / 16 * x = BaudRate (write x into UART_BRGR)  
   80eda:	f240 2123 	movw	r1, #547	; 0x223
   80ede:	6219      	str	r1, [r3, #32]

	// No parity bits
	UART->UART_MR = UART_MR_PAR_NO | UART_MR_CHMODE_NORMAL;	
   80ee0:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80ee4:	6059      	str	r1, [r3, #4]

	// Disable PDC channel
	UART->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80ee6:	f240 2102 	movw	r1, #514	; 0x202
   80eea:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120

	// Configure interrupts on receive ready and errors
	UART->UART_IDR = 0xFFFFFFFF;
   80eee:	f04f 31ff 	mov.w	r1, #4294967295
   80ef2:	60d9      	str	r1, [r3, #12]
	UART->UART_IER = UART_IER_RXRDY | UART_IER_OVRE | UART_IER_FRAME | UART_IER_PARE;
   80ef4:	21e1      	movs	r1, #225	; 0xe1
   80ef6:	6099      	str	r1, [r3, #8]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80ef8:	4904      	ldr	r1, [pc, #16]	; (80f0c <configure_uart+0x64>)
   80efa:	600a      	str	r2, [r1, #0]

	// Enable UART interrupt in the Nested Vectored Interrupt Controller(NVIC)
	NVIC_EnableIRQ((IRQn_Type) ID_UART);

	// Enable UART receiver and transmitter
	UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80efc:	2250      	movs	r2, #80	; 0x50
   80efe:	601a      	str	r2, [r3, #0]
   80f00:	4770      	bx	lr
   80f02:	bf00      	nop
   80f04:	2000048c 	.word	0x2000048c
   80f08:	400e0e00 	.word	0x400e0e00
   80f0c:	e000e100 	.word	0xe000e100

00080f10 <uart_putchar>:
 * \retval Success(0) or failure(1).
 */
int uart_putchar(const uint8_t c)
{
	// Check if the transmitter is ready
	if((UART->UART_SR & UART_SR_TXRDY) != UART_SR_TXRDY)
   80f10:	4b07      	ldr	r3, [pc, #28]	; (80f30 <uart_putchar+0x20>)
   80f12:	695b      	ldr	r3, [r3, #20]
   80f14:	f013 0f02 	tst.w	r3, #2
   80f18:	d008      	beq.n	80f2c <uart_putchar+0x1c>
	return 1;

	// Send the character
	UART->UART_THR = c;
   80f1a:	4b05      	ldr	r3, [pc, #20]	; (80f30 <uart_putchar+0x20>)
   80f1c:	61d8      	str	r0, [r3, #28]
	while(!((UART->UART_SR) & UART_SR_TXEMPTY)); // Wait for the character to be sent, can implement ring buffer to remove the wait
   80f1e:	461a      	mov	r2, r3
   80f20:	6953      	ldr	r3, [r2, #20]
   80f22:	f413 7f00 	tst.w	r3, #512	; 0x200
   80f26:	d0fb      	beq.n	80f20 <uart_putchar+0x10>
	return 0;
   80f28:	2000      	movs	r0, #0
   80f2a:	4770      	bx	lr
	return 1;
   80f2c:	2001      	movs	r0, #1
}
   80f2e:	4770      	bx	lr
   80f30:	400e0800 	.word	0x400e0800

00080f34 <UART_Handler>:

void UART_Handler(void)
{
   80f34:	b508      	push	{r3, lr}
	uint32_t status = UART->UART_SR;
   80f36:	4b15      	ldr	r3, [pc, #84]	; (80f8c <UART_Handler+0x58>)
   80f38:	695b      	ldr	r3, [r3, #20]
	
	//Reset UART at overflow error and frame error
	if(status & (UART_SR_OVRE | UART_SR_FRAME | UART_SR_PARE))
   80f3a:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   80f3e:	d003      	beq.n	80f48 <UART_Handler+0x14>
	{
		UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN | UART_CR_RSTSTA;
   80f40:	f44f 71a8 	mov.w	r1, #336	; 0x150
   80f44:	4a11      	ldr	r2, [pc, #68]	; (80f8c <UART_Handler+0x58>)
   80f46:	6011      	str	r1, [r2, #0]
	}
	
	//Check if message is ready to be received
	if(status & UART_SR_RXRDY)
   80f48:	f013 0f01 	tst.w	r3, #1
   80f4c:	d012      	beq.n	80f74 <UART_Handler+0x40>
	{
		//Check if receive ring buffer is full and 
		if((rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE == rx_buffer.head)
   80f4e:	4810      	ldr	r0, [pc, #64]	; (80f90 <UART_Handler+0x5c>)
   80f50:	7842      	ldrb	r2, [r0, #1]
   80f52:	1c53      	adds	r3, r2, #1
   80f54:	4259      	negs	r1, r3
   80f56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   80f5a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   80f5e:	bf58      	it	pl
   80f60:	424b      	negpl	r3, r1
   80f62:	7801      	ldrb	r1, [r0, #0]
   80f64:	428b      	cmp	r3, r1
   80f66:	d006      	beq.n	80f76 <UART_Handler+0x42>
		{
			printf("ERR: UART RX buffer is full\n\r");
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
			return;
		}
		rx_buffer.data[rx_buffer.tail] = UART->UART_RHR;
   80f68:	4908      	ldr	r1, [pc, #32]	; (80f8c <UART_Handler+0x58>)
   80f6a:	6988      	ldr	r0, [r1, #24]
   80f6c:	4908      	ldr	r1, [pc, #32]	; (80f90 <UART_Handler+0x5c>)
   80f6e:	440a      	add	r2, r1
   80f70:	7090      	strb	r0, [r2, #2]
		rx_buffer.tail = (rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE;
   80f72:	704b      	strb	r3, [r1, #1]
   80f74:	bd08      	pop	{r3, pc}
			printf("ERR: UART RX buffer is full\n\r");
   80f76:	4807      	ldr	r0, [pc, #28]	; (80f94 <UART_Handler+0x60>)
   80f78:	4b07      	ldr	r3, [pc, #28]	; (80f98 <UART_Handler+0x64>)
   80f7a:	4798      	blx	r3
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
   80f7c:	4b03      	ldr	r3, [pc, #12]	; (80f8c <UART_Handler+0x58>)
   80f7e:	699a      	ldr	r2, [r3, #24]
   80f80:	4b03      	ldr	r3, [pc, #12]	; (80f90 <UART_Handler+0x5c>)
   80f82:	7859      	ldrb	r1, [r3, #1]
   80f84:	440b      	add	r3, r1
   80f86:	709a      	strb	r2, [r3, #2]
			return;
   80f88:	bd08      	pop	{r3, pc}
   80f8a:	bf00      	nop
   80f8c:	400e0800 	.word	0x400e0800
   80f90:	2000048c 	.word	0x2000048c
   80f94:	00082140 	.word	0x00082140
   80f98:	00080c29 	.word	0x00080c29

00080f9c <__aeabi_drsub>:
   80f9c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   80fa0:	e002      	b.n	80fa8 <__adddf3>
   80fa2:	bf00      	nop

00080fa4 <__aeabi_dsub>:
   80fa4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00080fa8 <__adddf3>:
   80fa8:	b530      	push	{r4, r5, lr}
   80faa:	ea4f 0441 	mov.w	r4, r1, lsl #1
   80fae:	ea4f 0543 	mov.w	r5, r3, lsl #1
   80fb2:	ea94 0f05 	teq	r4, r5
   80fb6:	bf08      	it	eq
   80fb8:	ea90 0f02 	teqeq	r0, r2
   80fbc:	bf1f      	itttt	ne
   80fbe:	ea54 0c00 	orrsne.w	ip, r4, r0
   80fc2:	ea55 0c02 	orrsne.w	ip, r5, r2
   80fc6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   80fca:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   80fce:	f000 80e2 	beq.w	81196 <__adddf3+0x1ee>
   80fd2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   80fd6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   80fda:	bfb8      	it	lt
   80fdc:	426d      	neglt	r5, r5
   80fde:	dd0c      	ble.n	80ffa <__adddf3+0x52>
   80fe0:	442c      	add	r4, r5
   80fe2:	ea80 0202 	eor.w	r2, r0, r2
   80fe6:	ea81 0303 	eor.w	r3, r1, r3
   80fea:	ea82 0000 	eor.w	r0, r2, r0
   80fee:	ea83 0101 	eor.w	r1, r3, r1
   80ff2:	ea80 0202 	eor.w	r2, r0, r2
   80ff6:	ea81 0303 	eor.w	r3, r1, r3
   80ffa:	2d36      	cmp	r5, #54	; 0x36
   80ffc:	bf88      	it	hi
   80ffe:	bd30      	pophi	{r4, r5, pc}
   81000:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   81004:	ea4f 3101 	mov.w	r1, r1, lsl #12
   81008:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   8100c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   81010:	d002      	beq.n	81018 <__adddf3+0x70>
   81012:	4240      	negs	r0, r0
   81014:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   81018:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   8101c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   81020:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   81024:	d002      	beq.n	8102c <__adddf3+0x84>
   81026:	4252      	negs	r2, r2
   81028:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8102c:	ea94 0f05 	teq	r4, r5
   81030:	f000 80a7 	beq.w	81182 <__adddf3+0x1da>
   81034:	f1a4 0401 	sub.w	r4, r4, #1
   81038:	f1d5 0e20 	rsbs	lr, r5, #32
   8103c:	db0d      	blt.n	8105a <__adddf3+0xb2>
   8103e:	fa02 fc0e 	lsl.w	ip, r2, lr
   81042:	fa22 f205 	lsr.w	r2, r2, r5
   81046:	1880      	adds	r0, r0, r2
   81048:	f141 0100 	adc.w	r1, r1, #0
   8104c:	fa03 f20e 	lsl.w	r2, r3, lr
   81050:	1880      	adds	r0, r0, r2
   81052:	fa43 f305 	asr.w	r3, r3, r5
   81056:	4159      	adcs	r1, r3
   81058:	e00e      	b.n	81078 <__adddf3+0xd0>
   8105a:	f1a5 0520 	sub.w	r5, r5, #32
   8105e:	f10e 0e20 	add.w	lr, lr, #32
   81062:	2a01      	cmp	r2, #1
   81064:	fa03 fc0e 	lsl.w	ip, r3, lr
   81068:	bf28      	it	cs
   8106a:	f04c 0c02 	orrcs.w	ip, ip, #2
   8106e:	fa43 f305 	asr.w	r3, r3, r5
   81072:	18c0      	adds	r0, r0, r3
   81074:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   81078:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8107c:	d507      	bpl.n	8108e <__adddf3+0xe6>
   8107e:	f04f 0e00 	mov.w	lr, #0
   81082:	f1dc 0c00 	rsbs	ip, ip, #0
   81086:	eb7e 0000 	sbcs.w	r0, lr, r0
   8108a:	eb6e 0101 	sbc.w	r1, lr, r1
   8108e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   81092:	d31b      	bcc.n	810cc <__adddf3+0x124>
   81094:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   81098:	d30c      	bcc.n	810b4 <__adddf3+0x10c>
   8109a:	0849      	lsrs	r1, r1, #1
   8109c:	ea5f 0030 	movs.w	r0, r0, rrx
   810a0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   810a4:	f104 0401 	add.w	r4, r4, #1
   810a8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   810ac:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   810b0:	f080 809a 	bcs.w	811e8 <__adddf3+0x240>
   810b4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   810b8:	bf08      	it	eq
   810ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   810be:	f150 0000 	adcs.w	r0, r0, #0
   810c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   810c6:	ea41 0105 	orr.w	r1, r1, r5
   810ca:	bd30      	pop	{r4, r5, pc}
   810cc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   810d0:	4140      	adcs	r0, r0
   810d2:	eb41 0101 	adc.w	r1, r1, r1
   810d6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   810da:	f1a4 0401 	sub.w	r4, r4, #1
   810de:	d1e9      	bne.n	810b4 <__adddf3+0x10c>
   810e0:	f091 0f00 	teq	r1, #0
   810e4:	bf04      	itt	eq
   810e6:	4601      	moveq	r1, r0
   810e8:	2000      	moveq	r0, #0
   810ea:	fab1 f381 	clz	r3, r1
   810ee:	bf08      	it	eq
   810f0:	3320      	addeq	r3, #32
   810f2:	f1a3 030b 	sub.w	r3, r3, #11
   810f6:	f1b3 0220 	subs.w	r2, r3, #32
   810fa:	da0c      	bge.n	81116 <__adddf3+0x16e>
   810fc:	320c      	adds	r2, #12
   810fe:	dd08      	ble.n	81112 <__adddf3+0x16a>
   81100:	f102 0c14 	add.w	ip, r2, #20
   81104:	f1c2 020c 	rsb	r2, r2, #12
   81108:	fa01 f00c 	lsl.w	r0, r1, ip
   8110c:	fa21 f102 	lsr.w	r1, r1, r2
   81110:	e00c      	b.n	8112c <__adddf3+0x184>
   81112:	f102 0214 	add.w	r2, r2, #20
   81116:	bfd8      	it	le
   81118:	f1c2 0c20 	rsble	ip, r2, #32
   8111c:	fa01 f102 	lsl.w	r1, r1, r2
   81120:	fa20 fc0c 	lsr.w	ip, r0, ip
   81124:	bfdc      	itt	le
   81126:	ea41 010c 	orrle.w	r1, r1, ip
   8112a:	4090      	lslle	r0, r2
   8112c:	1ae4      	subs	r4, r4, r3
   8112e:	bfa2      	ittt	ge
   81130:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   81134:	4329      	orrge	r1, r5
   81136:	bd30      	popge	{r4, r5, pc}
   81138:	ea6f 0404 	mvn.w	r4, r4
   8113c:	3c1f      	subs	r4, #31
   8113e:	da1c      	bge.n	8117a <__adddf3+0x1d2>
   81140:	340c      	adds	r4, #12
   81142:	dc0e      	bgt.n	81162 <__adddf3+0x1ba>
   81144:	f104 0414 	add.w	r4, r4, #20
   81148:	f1c4 0220 	rsb	r2, r4, #32
   8114c:	fa20 f004 	lsr.w	r0, r0, r4
   81150:	fa01 f302 	lsl.w	r3, r1, r2
   81154:	ea40 0003 	orr.w	r0, r0, r3
   81158:	fa21 f304 	lsr.w	r3, r1, r4
   8115c:	ea45 0103 	orr.w	r1, r5, r3
   81160:	bd30      	pop	{r4, r5, pc}
   81162:	f1c4 040c 	rsb	r4, r4, #12
   81166:	f1c4 0220 	rsb	r2, r4, #32
   8116a:	fa20 f002 	lsr.w	r0, r0, r2
   8116e:	fa01 f304 	lsl.w	r3, r1, r4
   81172:	ea40 0003 	orr.w	r0, r0, r3
   81176:	4629      	mov	r1, r5
   81178:	bd30      	pop	{r4, r5, pc}
   8117a:	fa21 f004 	lsr.w	r0, r1, r4
   8117e:	4629      	mov	r1, r5
   81180:	bd30      	pop	{r4, r5, pc}
   81182:	f094 0f00 	teq	r4, #0
   81186:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   8118a:	bf06      	itte	eq
   8118c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   81190:	3401      	addeq	r4, #1
   81192:	3d01      	subne	r5, #1
   81194:	e74e      	b.n	81034 <__adddf3+0x8c>
   81196:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8119a:	bf18      	it	ne
   8119c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   811a0:	d029      	beq.n	811f6 <__adddf3+0x24e>
   811a2:	ea94 0f05 	teq	r4, r5
   811a6:	bf08      	it	eq
   811a8:	ea90 0f02 	teqeq	r0, r2
   811ac:	d005      	beq.n	811ba <__adddf3+0x212>
   811ae:	ea54 0c00 	orrs.w	ip, r4, r0
   811b2:	bf04      	itt	eq
   811b4:	4619      	moveq	r1, r3
   811b6:	4610      	moveq	r0, r2
   811b8:	bd30      	pop	{r4, r5, pc}
   811ba:	ea91 0f03 	teq	r1, r3
   811be:	bf1e      	ittt	ne
   811c0:	2100      	movne	r1, #0
   811c2:	2000      	movne	r0, #0
   811c4:	bd30      	popne	{r4, r5, pc}
   811c6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   811ca:	d105      	bne.n	811d8 <__adddf3+0x230>
   811cc:	0040      	lsls	r0, r0, #1
   811ce:	4149      	adcs	r1, r1
   811d0:	bf28      	it	cs
   811d2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   811d6:	bd30      	pop	{r4, r5, pc}
   811d8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   811dc:	bf3c      	itt	cc
   811de:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   811e2:	bd30      	popcc	{r4, r5, pc}
   811e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   811e8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   811ec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   811f0:	f04f 0000 	mov.w	r0, #0
   811f4:	bd30      	pop	{r4, r5, pc}
   811f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   811fa:	bf1a      	itte	ne
   811fc:	4619      	movne	r1, r3
   811fe:	4610      	movne	r0, r2
   81200:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   81204:	bf1c      	itt	ne
   81206:	460b      	movne	r3, r1
   81208:	4602      	movne	r2, r0
   8120a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8120e:	bf06      	itte	eq
   81210:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   81214:	ea91 0f03 	teqeq	r1, r3
   81218:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   8121c:	bd30      	pop	{r4, r5, pc}
   8121e:	bf00      	nop

00081220 <__aeabi_ui2d>:
   81220:	f090 0f00 	teq	r0, #0
   81224:	bf04      	itt	eq
   81226:	2100      	moveq	r1, #0
   81228:	4770      	bxeq	lr
   8122a:	b530      	push	{r4, r5, lr}
   8122c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81230:	f104 0432 	add.w	r4, r4, #50	; 0x32
   81234:	f04f 0500 	mov.w	r5, #0
   81238:	f04f 0100 	mov.w	r1, #0
   8123c:	e750      	b.n	810e0 <__adddf3+0x138>
   8123e:	bf00      	nop

00081240 <__aeabi_i2d>:
   81240:	f090 0f00 	teq	r0, #0
   81244:	bf04      	itt	eq
   81246:	2100      	moveq	r1, #0
   81248:	4770      	bxeq	lr
   8124a:	b530      	push	{r4, r5, lr}
   8124c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81250:	f104 0432 	add.w	r4, r4, #50	; 0x32
   81254:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   81258:	bf48      	it	mi
   8125a:	4240      	negmi	r0, r0
   8125c:	f04f 0100 	mov.w	r1, #0
   81260:	e73e      	b.n	810e0 <__adddf3+0x138>
   81262:	bf00      	nop

00081264 <__aeabi_f2d>:
   81264:	0042      	lsls	r2, r0, #1
   81266:	ea4f 01e2 	mov.w	r1, r2, asr #3
   8126a:	ea4f 0131 	mov.w	r1, r1, rrx
   8126e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   81272:	bf1f      	itttt	ne
   81274:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   81278:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8127c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   81280:	4770      	bxne	lr
   81282:	f092 0f00 	teq	r2, #0
   81286:	bf14      	ite	ne
   81288:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8128c:	4770      	bxeq	lr
   8128e:	b530      	push	{r4, r5, lr}
   81290:	f44f 7460 	mov.w	r4, #896	; 0x380
   81294:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81298:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8129c:	e720      	b.n	810e0 <__adddf3+0x138>
   8129e:	bf00      	nop

000812a0 <__aeabi_ul2d>:
   812a0:	ea50 0201 	orrs.w	r2, r0, r1
   812a4:	bf08      	it	eq
   812a6:	4770      	bxeq	lr
   812a8:	b530      	push	{r4, r5, lr}
   812aa:	f04f 0500 	mov.w	r5, #0
   812ae:	e00a      	b.n	812c6 <__aeabi_l2d+0x16>

000812b0 <__aeabi_l2d>:
   812b0:	ea50 0201 	orrs.w	r2, r0, r1
   812b4:	bf08      	it	eq
   812b6:	4770      	bxeq	lr
   812b8:	b530      	push	{r4, r5, lr}
   812ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   812be:	d502      	bpl.n	812c6 <__aeabi_l2d+0x16>
   812c0:	4240      	negs	r0, r0
   812c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   812c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   812ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
   812ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   812d2:	f43f aedc 	beq.w	8108e <__adddf3+0xe6>
   812d6:	f04f 0203 	mov.w	r2, #3
   812da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   812de:	bf18      	it	ne
   812e0:	3203      	addne	r2, #3
   812e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   812e6:	bf18      	it	ne
   812e8:	3203      	addne	r2, #3
   812ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   812ee:	f1c2 0320 	rsb	r3, r2, #32
   812f2:	fa00 fc03 	lsl.w	ip, r0, r3
   812f6:	fa20 f002 	lsr.w	r0, r0, r2
   812fa:	fa01 fe03 	lsl.w	lr, r1, r3
   812fe:	ea40 000e 	orr.w	r0, r0, lr
   81302:	fa21 f102 	lsr.w	r1, r1, r2
   81306:	4414      	add	r4, r2
   81308:	e6c1      	b.n	8108e <__adddf3+0xe6>
   8130a:	bf00      	nop

0008130c <__aeabi_dmul>:
   8130c:	b570      	push	{r4, r5, r6, lr}
   8130e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   81312:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   81316:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8131a:	bf1d      	ittte	ne
   8131c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   81320:	ea94 0f0c 	teqne	r4, ip
   81324:	ea95 0f0c 	teqne	r5, ip
   81328:	f000 f8de 	bleq	814e8 <__aeabi_dmul+0x1dc>
   8132c:	442c      	add	r4, r5
   8132e:	ea81 0603 	eor.w	r6, r1, r3
   81332:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   81336:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   8133a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   8133e:	bf18      	it	ne
   81340:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   81344:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81348:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8134c:	d038      	beq.n	813c0 <__aeabi_dmul+0xb4>
   8134e:	fba0 ce02 	umull	ip, lr, r0, r2
   81352:	f04f 0500 	mov.w	r5, #0
   81356:	fbe1 e502 	umlal	lr, r5, r1, r2
   8135a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   8135e:	fbe0 e503 	umlal	lr, r5, r0, r3
   81362:	f04f 0600 	mov.w	r6, #0
   81366:	fbe1 5603 	umlal	r5, r6, r1, r3
   8136a:	f09c 0f00 	teq	ip, #0
   8136e:	bf18      	it	ne
   81370:	f04e 0e01 	orrne.w	lr, lr, #1
   81374:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   81378:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   8137c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   81380:	d204      	bcs.n	8138c <__aeabi_dmul+0x80>
   81382:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   81386:	416d      	adcs	r5, r5
   81388:	eb46 0606 	adc.w	r6, r6, r6
   8138c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   81390:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   81394:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   81398:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   8139c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   813a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   813a4:	bf88      	it	hi
   813a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   813aa:	d81e      	bhi.n	813ea <__aeabi_dmul+0xde>
   813ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   813b0:	bf08      	it	eq
   813b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   813b6:	f150 0000 	adcs.w	r0, r0, #0
   813ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   813be:	bd70      	pop	{r4, r5, r6, pc}
   813c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   813c4:	ea46 0101 	orr.w	r1, r6, r1
   813c8:	ea40 0002 	orr.w	r0, r0, r2
   813cc:	ea81 0103 	eor.w	r1, r1, r3
   813d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   813d4:	bfc2      	ittt	gt
   813d6:	ebd4 050c 	rsbsgt	r5, r4, ip
   813da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   813de:	bd70      	popgt	{r4, r5, r6, pc}
   813e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   813e4:	f04f 0e00 	mov.w	lr, #0
   813e8:	3c01      	subs	r4, #1
   813ea:	f300 80ab 	bgt.w	81544 <__aeabi_dmul+0x238>
   813ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
   813f2:	bfde      	ittt	le
   813f4:	2000      	movle	r0, #0
   813f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   813fa:	bd70      	pople	{r4, r5, r6, pc}
   813fc:	f1c4 0400 	rsb	r4, r4, #0
   81400:	3c20      	subs	r4, #32
   81402:	da35      	bge.n	81470 <__aeabi_dmul+0x164>
   81404:	340c      	adds	r4, #12
   81406:	dc1b      	bgt.n	81440 <__aeabi_dmul+0x134>
   81408:	f104 0414 	add.w	r4, r4, #20
   8140c:	f1c4 0520 	rsb	r5, r4, #32
   81410:	fa00 f305 	lsl.w	r3, r0, r5
   81414:	fa20 f004 	lsr.w	r0, r0, r4
   81418:	fa01 f205 	lsl.w	r2, r1, r5
   8141c:	ea40 0002 	orr.w	r0, r0, r2
   81420:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   81424:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   81428:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8142c:	fa21 f604 	lsr.w	r6, r1, r4
   81430:	eb42 0106 	adc.w	r1, r2, r6
   81434:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81438:	bf08      	it	eq
   8143a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8143e:	bd70      	pop	{r4, r5, r6, pc}
   81440:	f1c4 040c 	rsb	r4, r4, #12
   81444:	f1c4 0520 	rsb	r5, r4, #32
   81448:	fa00 f304 	lsl.w	r3, r0, r4
   8144c:	fa20 f005 	lsr.w	r0, r0, r5
   81450:	fa01 f204 	lsl.w	r2, r1, r4
   81454:	ea40 0002 	orr.w	r0, r0, r2
   81458:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8145c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   81460:	f141 0100 	adc.w	r1, r1, #0
   81464:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81468:	bf08      	it	eq
   8146a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8146e:	bd70      	pop	{r4, r5, r6, pc}
   81470:	f1c4 0520 	rsb	r5, r4, #32
   81474:	fa00 f205 	lsl.w	r2, r0, r5
   81478:	ea4e 0e02 	orr.w	lr, lr, r2
   8147c:	fa20 f304 	lsr.w	r3, r0, r4
   81480:	fa01 f205 	lsl.w	r2, r1, r5
   81484:	ea43 0302 	orr.w	r3, r3, r2
   81488:	fa21 f004 	lsr.w	r0, r1, r4
   8148c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81490:	fa21 f204 	lsr.w	r2, r1, r4
   81494:	ea20 0002 	bic.w	r0, r0, r2
   81498:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   8149c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   814a0:	bf08      	it	eq
   814a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   814a6:	bd70      	pop	{r4, r5, r6, pc}
   814a8:	f094 0f00 	teq	r4, #0
   814ac:	d10f      	bne.n	814ce <__aeabi_dmul+0x1c2>
   814ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   814b2:	0040      	lsls	r0, r0, #1
   814b4:	eb41 0101 	adc.w	r1, r1, r1
   814b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   814bc:	bf08      	it	eq
   814be:	3c01      	subeq	r4, #1
   814c0:	d0f7      	beq.n	814b2 <__aeabi_dmul+0x1a6>
   814c2:	ea41 0106 	orr.w	r1, r1, r6
   814c6:	f095 0f00 	teq	r5, #0
   814ca:	bf18      	it	ne
   814cc:	4770      	bxne	lr
   814ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   814d2:	0052      	lsls	r2, r2, #1
   814d4:	eb43 0303 	adc.w	r3, r3, r3
   814d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   814dc:	bf08      	it	eq
   814de:	3d01      	subeq	r5, #1
   814e0:	d0f7      	beq.n	814d2 <__aeabi_dmul+0x1c6>
   814e2:	ea43 0306 	orr.w	r3, r3, r6
   814e6:	4770      	bx	lr
   814e8:	ea94 0f0c 	teq	r4, ip
   814ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   814f0:	bf18      	it	ne
   814f2:	ea95 0f0c 	teqne	r5, ip
   814f6:	d00c      	beq.n	81512 <__aeabi_dmul+0x206>
   814f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   814fc:	bf18      	it	ne
   814fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   81502:	d1d1      	bne.n	814a8 <__aeabi_dmul+0x19c>
   81504:	ea81 0103 	eor.w	r1, r1, r3
   81508:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8150c:	f04f 0000 	mov.w	r0, #0
   81510:	bd70      	pop	{r4, r5, r6, pc}
   81512:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   81516:	bf06      	itte	eq
   81518:	4610      	moveq	r0, r2
   8151a:	4619      	moveq	r1, r3
   8151c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   81520:	d019      	beq.n	81556 <__aeabi_dmul+0x24a>
   81522:	ea94 0f0c 	teq	r4, ip
   81526:	d102      	bne.n	8152e <__aeabi_dmul+0x222>
   81528:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   8152c:	d113      	bne.n	81556 <__aeabi_dmul+0x24a>
   8152e:	ea95 0f0c 	teq	r5, ip
   81532:	d105      	bne.n	81540 <__aeabi_dmul+0x234>
   81534:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   81538:	bf1c      	itt	ne
   8153a:	4610      	movne	r0, r2
   8153c:	4619      	movne	r1, r3
   8153e:	d10a      	bne.n	81556 <__aeabi_dmul+0x24a>
   81540:	ea81 0103 	eor.w	r1, r1, r3
   81544:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81548:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8154c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   81550:	f04f 0000 	mov.w	r0, #0
   81554:	bd70      	pop	{r4, r5, r6, pc}
   81556:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8155a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8155e:	bd70      	pop	{r4, r5, r6, pc}

00081560 <__aeabi_ddiv>:
   81560:	b570      	push	{r4, r5, r6, lr}
   81562:	f04f 0cff 	mov.w	ip, #255	; 0xff
   81566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8156a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8156e:	bf1d      	ittte	ne
   81570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   81574:	ea94 0f0c 	teqne	r4, ip
   81578:	ea95 0f0c 	teqne	r5, ip
   8157c:	f000 f8a7 	bleq	816ce <__aeabi_ddiv+0x16e>
   81580:	eba4 0405 	sub.w	r4, r4, r5
   81584:	ea81 0e03 	eor.w	lr, r1, r3
   81588:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8158c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   81590:	f000 8088 	beq.w	816a4 <__aeabi_ddiv+0x144>
   81594:	ea4f 3303 	mov.w	r3, r3, lsl #12
   81598:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   8159c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   815a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   815a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   815a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   815ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   815b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   815b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   815b8:	429d      	cmp	r5, r3
   815ba:	bf08      	it	eq
   815bc:	4296      	cmpeq	r6, r2
   815be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   815c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   815c6:	d202      	bcs.n	815ce <__aeabi_ddiv+0x6e>
   815c8:	085b      	lsrs	r3, r3, #1
   815ca:	ea4f 0232 	mov.w	r2, r2, rrx
   815ce:	1ab6      	subs	r6, r6, r2
   815d0:	eb65 0503 	sbc.w	r5, r5, r3
   815d4:	085b      	lsrs	r3, r3, #1
   815d6:	ea4f 0232 	mov.w	r2, r2, rrx
   815da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   815de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   815e2:	ebb6 0e02 	subs.w	lr, r6, r2
   815e6:	eb75 0e03 	sbcs.w	lr, r5, r3
   815ea:	bf22      	ittt	cs
   815ec:	1ab6      	subcs	r6, r6, r2
   815ee:	4675      	movcs	r5, lr
   815f0:	ea40 000c 	orrcs.w	r0, r0, ip
   815f4:	085b      	lsrs	r3, r3, #1
   815f6:	ea4f 0232 	mov.w	r2, r2, rrx
   815fa:	ebb6 0e02 	subs.w	lr, r6, r2
   815fe:	eb75 0e03 	sbcs.w	lr, r5, r3
   81602:	bf22      	ittt	cs
   81604:	1ab6      	subcs	r6, r6, r2
   81606:	4675      	movcs	r5, lr
   81608:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   8160c:	085b      	lsrs	r3, r3, #1
   8160e:	ea4f 0232 	mov.w	r2, r2, rrx
   81612:	ebb6 0e02 	subs.w	lr, r6, r2
   81616:	eb75 0e03 	sbcs.w	lr, r5, r3
   8161a:	bf22      	ittt	cs
   8161c:	1ab6      	subcs	r6, r6, r2
   8161e:	4675      	movcs	r5, lr
   81620:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   81624:	085b      	lsrs	r3, r3, #1
   81626:	ea4f 0232 	mov.w	r2, r2, rrx
   8162a:	ebb6 0e02 	subs.w	lr, r6, r2
   8162e:	eb75 0e03 	sbcs.w	lr, r5, r3
   81632:	bf22      	ittt	cs
   81634:	1ab6      	subcs	r6, r6, r2
   81636:	4675      	movcs	r5, lr
   81638:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   8163c:	ea55 0e06 	orrs.w	lr, r5, r6
   81640:	d018      	beq.n	81674 <__aeabi_ddiv+0x114>
   81642:	ea4f 1505 	mov.w	r5, r5, lsl #4
   81646:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8164a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8164e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   81652:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   81656:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8165a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8165e:	d1c0      	bne.n	815e2 <__aeabi_ddiv+0x82>
   81660:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81664:	d10b      	bne.n	8167e <__aeabi_ddiv+0x11e>
   81666:	ea41 0100 	orr.w	r1, r1, r0
   8166a:	f04f 0000 	mov.w	r0, #0
   8166e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   81672:	e7b6      	b.n	815e2 <__aeabi_ddiv+0x82>
   81674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81678:	bf04      	itt	eq
   8167a:	4301      	orreq	r1, r0
   8167c:	2000      	moveq	r0, #0
   8167e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   81682:	bf88      	it	hi
   81684:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   81688:	f63f aeaf 	bhi.w	813ea <__aeabi_dmul+0xde>
   8168c:	ebb5 0c03 	subs.w	ip, r5, r3
   81690:	bf04      	itt	eq
   81692:	ebb6 0c02 	subseq.w	ip, r6, r2
   81696:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8169a:	f150 0000 	adcs.w	r0, r0, #0
   8169e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   816a2:	bd70      	pop	{r4, r5, r6, pc}
   816a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   816a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   816ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   816b0:	bfc2      	ittt	gt
   816b2:	ebd4 050c 	rsbsgt	r5, r4, ip
   816b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   816ba:	bd70      	popgt	{r4, r5, r6, pc}
   816bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   816c0:	f04f 0e00 	mov.w	lr, #0
   816c4:	3c01      	subs	r4, #1
   816c6:	e690      	b.n	813ea <__aeabi_dmul+0xde>
   816c8:	ea45 0e06 	orr.w	lr, r5, r6
   816cc:	e68d      	b.n	813ea <__aeabi_dmul+0xde>
   816ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   816d2:	ea94 0f0c 	teq	r4, ip
   816d6:	bf08      	it	eq
   816d8:	ea95 0f0c 	teqeq	r5, ip
   816dc:	f43f af3b 	beq.w	81556 <__aeabi_dmul+0x24a>
   816e0:	ea94 0f0c 	teq	r4, ip
   816e4:	d10a      	bne.n	816fc <__aeabi_ddiv+0x19c>
   816e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   816ea:	f47f af34 	bne.w	81556 <__aeabi_dmul+0x24a>
   816ee:	ea95 0f0c 	teq	r5, ip
   816f2:	f47f af25 	bne.w	81540 <__aeabi_dmul+0x234>
   816f6:	4610      	mov	r0, r2
   816f8:	4619      	mov	r1, r3
   816fa:	e72c      	b.n	81556 <__aeabi_dmul+0x24a>
   816fc:	ea95 0f0c 	teq	r5, ip
   81700:	d106      	bne.n	81710 <__aeabi_ddiv+0x1b0>
   81702:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   81706:	f43f aefd 	beq.w	81504 <__aeabi_dmul+0x1f8>
   8170a:	4610      	mov	r0, r2
   8170c:	4619      	mov	r1, r3
   8170e:	e722      	b.n	81556 <__aeabi_dmul+0x24a>
   81710:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   81714:	bf18      	it	ne
   81716:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8171a:	f47f aec5 	bne.w	814a8 <__aeabi_dmul+0x19c>
   8171e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   81722:	f47f af0d 	bne.w	81540 <__aeabi_dmul+0x234>
   81726:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   8172a:	f47f aeeb 	bne.w	81504 <__aeabi_dmul+0x1f8>
   8172e:	e712      	b.n	81556 <__aeabi_dmul+0x24a>

00081730 <__gedf2>:
   81730:	f04f 3cff 	mov.w	ip, #4294967295
   81734:	e006      	b.n	81744 <__cmpdf2+0x4>
   81736:	bf00      	nop

00081738 <__ledf2>:
   81738:	f04f 0c01 	mov.w	ip, #1
   8173c:	e002      	b.n	81744 <__cmpdf2+0x4>
   8173e:	bf00      	nop

00081740 <__cmpdf2>:
   81740:	f04f 0c01 	mov.w	ip, #1
   81744:	f84d cd04 	str.w	ip, [sp, #-4]!
   81748:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8174c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   81750:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   81754:	bf18      	it	ne
   81756:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   8175a:	d01b      	beq.n	81794 <__cmpdf2+0x54>
   8175c:	b001      	add	sp, #4
   8175e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   81762:	bf0c      	ite	eq
   81764:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   81768:	ea91 0f03 	teqne	r1, r3
   8176c:	bf02      	ittt	eq
   8176e:	ea90 0f02 	teqeq	r0, r2
   81772:	2000      	moveq	r0, #0
   81774:	4770      	bxeq	lr
   81776:	f110 0f00 	cmn.w	r0, #0
   8177a:	ea91 0f03 	teq	r1, r3
   8177e:	bf58      	it	pl
   81780:	4299      	cmppl	r1, r3
   81782:	bf08      	it	eq
   81784:	4290      	cmpeq	r0, r2
   81786:	bf2c      	ite	cs
   81788:	17d8      	asrcs	r0, r3, #31
   8178a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   8178e:	f040 0001 	orr.w	r0, r0, #1
   81792:	4770      	bx	lr
   81794:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   81798:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8179c:	d102      	bne.n	817a4 <__cmpdf2+0x64>
   8179e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   817a2:	d107      	bne.n	817b4 <__cmpdf2+0x74>
   817a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   817a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   817ac:	d1d6      	bne.n	8175c <__cmpdf2+0x1c>
   817ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   817b2:	d0d3      	beq.n	8175c <__cmpdf2+0x1c>
   817b4:	f85d 0b04 	ldr.w	r0, [sp], #4
   817b8:	4770      	bx	lr
   817ba:	bf00      	nop

000817bc <__aeabi_cdrcmple>:
   817bc:	4684      	mov	ip, r0
   817be:	4610      	mov	r0, r2
   817c0:	4662      	mov	r2, ip
   817c2:	468c      	mov	ip, r1
   817c4:	4619      	mov	r1, r3
   817c6:	4663      	mov	r3, ip
   817c8:	e000      	b.n	817cc <__aeabi_cdcmpeq>
   817ca:	bf00      	nop

000817cc <__aeabi_cdcmpeq>:
   817cc:	b501      	push	{r0, lr}
   817ce:	f7ff ffb7 	bl	81740 <__cmpdf2>
   817d2:	2800      	cmp	r0, #0
   817d4:	bf48      	it	mi
   817d6:	f110 0f00 	cmnmi.w	r0, #0
   817da:	bd01      	pop	{r0, pc}

000817dc <__aeabi_dcmpeq>:
   817dc:	f84d ed08 	str.w	lr, [sp, #-8]!
   817e0:	f7ff fff4 	bl	817cc <__aeabi_cdcmpeq>
   817e4:	bf0c      	ite	eq
   817e6:	2001      	moveq	r0, #1
   817e8:	2000      	movne	r0, #0
   817ea:	f85d fb08 	ldr.w	pc, [sp], #8
   817ee:	bf00      	nop

000817f0 <__aeabi_dcmplt>:
   817f0:	f84d ed08 	str.w	lr, [sp, #-8]!
   817f4:	f7ff ffea 	bl	817cc <__aeabi_cdcmpeq>
   817f8:	bf34      	ite	cc
   817fa:	2001      	movcc	r0, #1
   817fc:	2000      	movcs	r0, #0
   817fe:	f85d fb08 	ldr.w	pc, [sp], #8
   81802:	bf00      	nop

00081804 <__aeabi_dcmple>:
   81804:	f84d ed08 	str.w	lr, [sp, #-8]!
   81808:	f7ff ffe0 	bl	817cc <__aeabi_cdcmpeq>
   8180c:	bf94      	ite	ls
   8180e:	2001      	movls	r0, #1
   81810:	2000      	movhi	r0, #0
   81812:	f85d fb08 	ldr.w	pc, [sp], #8
   81816:	bf00      	nop

00081818 <__aeabi_dcmpge>:
   81818:	f84d ed08 	str.w	lr, [sp, #-8]!
   8181c:	f7ff ffce 	bl	817bc <__aeabi_cdrcmple>
   81820:	bf94      	ite	ls
   81822:	2001      	movls	r0, #1
   81824:	2000      	movhi	r0, #0
   81826:	f85d fb08 	ldr.w	pc, [sp], #8
   8182a:	bf00      	nop

0008182c <__aeabi_dcmpgt>:
   8182c:	f84d ed08 	str.w	lr, [sp, #-8]!
   81830:	f7ff ffc4 	bl	817bc <__aeabi_cdrcmple>
   81834:	bf34      	ite	cc
   81836:	2001      	movcc	r0, #1
   81838:	2000      	movcs	r0, #0
   8183a:	f85d fb08 	ldr.w	pc, [sp], #8
   8183e:	bf00      	nop

00081840 <__aeabi_d2iz>:
   81840:	ea4f 0241 	mov.w	r2, r1, lsl #1
   81844:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   81848:	d215      	bcs.n	81876 <__aeabi_d2iz+0x36>
   8184a:	d511      	bpl.n	81870 <__aeabi_d2iz+0x30>
   8184c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   81850:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   81854:	d912      	bls.n	8187c <__aeabi_d2iz+0x3c>
   81856:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8185a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8185e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   81862:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   81866:	fa23 f002 	lsr.w	r0, r3, r2
   8186a:	bf18      	it	ne
   8186c:	4240      	negne	r0, r0
   8186e:	4770      	bx	lr
   81870:	f04f 0000 	mov.w	r0, #0
   81874:	4770      	bx	lr
   81876:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8187a:	d105      	bne.n	81888 <__aeabi_d2iz+0x48>
   8187c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   81880:	bf08      	it	eq
   81882:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   81886:	4770      	bx	lr
   81888:	f04f 0000 	mov.w	r0, #0
   8188c:	4770      	bx	lr
   8188e:	bf00      	nop

00081890 <__aeabi_d2f>:
   81890:	ea4f 0241 	mov.w	r2, r1, lsl #1
   81894:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   81898:	bf24      	itt	cs
   8189a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   8189e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   818a2:	d90d      	bls.n	818c0 <__aeabi_d2f+0x30>
   818a4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   818a8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   818ac:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   818b0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   818b4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   818b8:	bf08      	it	eq
   818ba:	f020 0001 	biceq.w	r0, r0, #1
   818be:	4770      	bx	lr
   818c0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   818c4:	d121      	bne.n	8190a <__aeabi_d2f+0x7a>
   818c6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   818ca:	bfbc      	itt	lt
   818cc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   818d0:	4770      	bxlt	lr
   818d2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   818d6:	ea4f 5252 	mov.w	r2, r2, lsr #21
   818da:	f1c2 0218 	rsb	r2, r2, #24
   818de:	f1c2 0c20 	rsb	ip, r2, #32
   818e2:	fa10 f30c 	lsls.w	r3, r0, ip
   818e6:	fa20 f002 	lsr.w	r0, r0, r2
   818ea:	bf18      	it	ne
   818ec:	f040 0001 	orrne.w	r0, r0, #1
   818f0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   818f4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   818f8:	fa03 fc0c 	lsl.w	ip, r3, ip
   818fc:	ea40 000c 	orr.w	r0, r0, ip
   81900:	fa23 f302 	lsr.w	r3, r3, r2
   81904:	ea4f 0343 	mov.w	r3, r3, lsl #1
   81908:	e7cc      	b.n	818a4 <__aeabi_d2f+0x14>
   8190a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   8190e:	d107      	bne.n	81920 <__aeabi_d2f+0x90>
   81910:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   81914:	bf1e      	ittt	ne
   81916:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   8191a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   8191e:	4770      	bxne	lr
   81920:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   81924:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   81928:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8192c:	4770      	bx	lr
   8192e:	bf00      	nop

00081930 <__aeabi_frsub>:
   81930:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   81934:	e002      	b.n	8193c <__addsf3>
   81936:	bf00      	nop

00081938 <__aeabi_fsub>:
   81938:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0008193c <__addsf3>:
   8193c:	0042      	lsls	r2, r0, #1
   8193e:	bf1f      	itttt	ne
   81940:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   81944:	ea92 0f03 	teqne	r2, r3
   81948:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   8194c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   81950:	d06a      	beq.n	81a28 <__addsf3+0xec>
   81952:	ea4f 6212 	mov.w	r2, r2, lsr #24
   81956:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   8195a:	bfc1      	itttt	gt
   8195c:	18d2      	addgt	r2, r2, r3
   8195e:	4041      	eorgt	r1, r0
   81960:	4048      	eorgt	r0, r1
   81962:	4041      	eorgt	r1, r0
   81964:	bfb8      	it	lt
   81966:	425b      	neglt	r3, r3
   81968:	2b19      	cmp	r3, #25
   8196a:	bf88      	it	hi
   8196c:	4770      	bxhi	lr
   8196e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   81972:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81976:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   8197a:	bf18      	it	ne
   8197c:	4240      	negne	r0, r0
   8197e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   81982:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   81986:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   8198a:	bf18      	it	ne
   8198c:	4249      	negne	r1, r1
   8198e:	ea92 0f03 	teq	r2, r3
   81992:	d03f      	beq.n	81a14 <__addsf3+0xd8>
   81994:	f1a2 0201 	sub.w	r2, r2, #1
   81998:	fa41 fc03 	asr.w	ip, r1, r3
   8199c:	eb10 000c 	adds.w	r0, r0, ip
   819a0:	f1c3 0320 	rsb	r3, r3, #32
   819a4:	fa01 f103 	lsl.w	r1, r1, r3
   819a8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   819ac:	d502      	bpl.n	819b4 <__addsf3+0x78>
   819ae:	4249      	negs	r1, r1
   819b0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   819b4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   819b8:	d313      	bcc.n	819e2 <__addsf3+0xa6>
   819ba:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   819be:	d306      	bcc.n	819ce <__addsf3+0x92>
   819c0:	0840      	lsrs	r0, r0, #1
   819c2:	ea4f 0131 	mov.w	r1, r1, rrx
   819c6:	f102 0201 	add.w	r2, r2, #1
   819ca:	2afe      	cmp	r2, #254	; 0xfe
   819cc:	d251      	bcs.n	81a72 <__addsf3+0x136>
   819ce:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   819d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   819d6:	bf08      	it	eq
   819d8:	f020 0001 	biceq.w	r0, r0, #1
   819dc:	ea40 0003 	orr.w	r0, r0, r3
   819e0:	4770      	bx	lr
   819e2:	0049      	lsls	r1, r1, #1
   819e4:	eb40 0000 	adc.w	r0, r0, r0
   819e8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   819ec:	f1a2 0201 	sub.w	r2, r2, #1
   819f0:	d1ed      	bne.n	819ce <__addsf3+0x92>
   819f2:	fab0 fc80 	clz	ip, r0
   819f6:	f1ac 0c08 	sub.w	ip, ip, #8
   819fa:	ebb2 020c 	subs.w	r2, r2, ip
   819fe:	fa00 f00c 	lsl.w	r0, r0, ip
   81a02:	bfaa      	itet	ge
   81a04:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   81a08:	4252      	neglt	r2, r2
   81a0a:	4318      	orrge	r0, r3
   81a0c:	bfbc      	itt	lt
   81a0e:	40d0      	lsrlt	r0, r2
   81a10:	4318      	orrlt	r0, r3
   81a12:	4770      	bx	lr
   81a14:	f092 0f00 	teq	r2, #0
   81a18:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   81a1c:	bf06      	itte	eq
   81a1e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   81a22:	3201      	addeq	r2, #1
   81a24:	3b01      	subne	r3, #1
   81a26:	e7b5      	b.n	81994 <__addsf3+0x58>
   81a28:	ea4f 0341 	mov.w	r3, r1, lsl #1
   81a2c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   81a30:	bf18      	it	ne
   81a32:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   81a36:	d021      	beq.n	81a7c <__addsf3+0x140>
   81a38:	ea92 0f03 	teq	r2, r3
   81a3c:	d004      	beq.n	81a48 <__addsf3+0x10c>
   81a3e:	f092 0f00 	teq	r2, #0
   81a42:	bf08      	it	eq
   81a44:	4608      	moveq	r0, r1
   81a46:	4770      	bx	lr
   81a48:	ea90 0f01 	teq	r0, r1
   81a4c:	bf1c      	itt	ne
   81a4e:	2000      	movne	r0, #0
   81a50:	4770      	bxne	lr
   81a52:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   81a56:	d104      	bne.n	81a62 <__addsf3+0x126>
   81a58:	0040      	lsls	r0, r0, #1
   81a5a:	bf28      	it	cs
   81a5c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   81a60:	4770      	bx	lr
   81a62:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   81a66:	bf3c      	itt	cc
   81a68:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   81a6c:	4770      	bxcc	lr
   81a6e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   81a72:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   81a76:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81a7a:	4770      	bx	lr
   81a7c:	ea7f 6222 	mvns.w	r2, r2, asr #24
   81a80:	bf16      	itet	ne
   81a82:	4608      	movne	r0, r1
   81a84:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   81a88:	4601      	movne	r1, r0
   81a8a:	0242      	lsls	r2, r0, #9
   81a8c:	bf06      	itte	eq
   81a8e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   81a92:	ea90 0f01 	teqeq	r0, r1
   81a96:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   81a9a:	4770      	bx	lr

00081a9c <__aeabi_ui2f>:
   81a9c:	f04f 0300 	mov.w	r3, #0
   81aa0:	e004      	b.n	81aac <__aeabi_i2f+0x8>
   81aa2:	bf00      	nop

00081aa4 <__aeabi_i2f>:
   81aa4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   81aa8:	bf48      	it	mi
   81aaa:	4240      	negmi	r0, r0
   81aac:	ea5f 0c00 	movs.w	ip, r0
   81ab0:	bf08      	it	eq
   81ab2:	4770      	bxeq	lr
   81ab4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   81ab8:	4601      	mov	r1, r0
   81aba:	f04f 0000 	mov.w	r0, #0
   81abe:	e01c      	b.n	81afa <__aeabi_l2f+0x2a>

00081ac0 <__aeabi_ul2f>:
   81ac0:	ea50 0201 	orrs.w	r2, r0, r1
   81ac4:	bf08      	it	eq
   81ac6:	4770      	bxeq	lr
   81ac8:	f04f 0300 	mov.w	r3, #0
   81acc:	e00a      	b.n	81ae4 <__aeabi_l2f+0x14>
   81ace:	bf00      	nop

00081ad0 <__aeabi_l2f>:
   81ad0:	ea50 0201 	orrs.w	r2, r0, r1
   81ad4:	bf08      	it	eq
   81ad6:	4770      	bxeq	lr
   81ad8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   81adc:	d502      	bpl.n	81ae4 <__aeabi_l2f+0x14>
   81ade:	4240      	negs	r0, r0
   81ae0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   81ae4:	ea5f 0c01 	movs.w	ip, r1
   81ae8:	bf02      	ittt	eq
   81aea:	4684      	moveq	ip, r0
   81aec:	4601      	moveq	r1, r0
   81aee:	2000      	moveq	r0, #0
   81af0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   81af4:	bf08      	it	eq
   81af6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   81afa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   81afe:	fabc f28c 	clz	r2, ip
   81b02:	3a08      	subs	r2, #8
   81b04:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   81b08:	db10      	blt.n	81b2c <__aeabi_l2f+0x5c>
   81b0a:	fa01 fc02 	lsl.w	ip, r1, r2
   81b0e:	4463      	add	r3, ip
   81b10:	fa00 fc02 	lsl.w	ip, r0, r2
   81b14:	f1c2 0220 	rsb	r2, r2, #32
   81b18:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   81b1c:	fa20 f202 	lsr.w	r2, r0, r2
   81b20:	eb43 0002 	adc.w	r0, r3, r2
   81b24:	bf08      	it	eq
   81b26:	f020 0001 	biceq.w	r0, r0, #1
   81b2a:	4770      	bx	lr
   81b2c:	f102 0220 	add.w	r2, r2, #32
   81b30:	fa01 fc02 	lsl.w	ip, r1, r2
   81b34:	f1c2 0220 	rsb	r2, r2, #32
   81b38:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   81b3c:	fa21 f202 	lsr.w	r2, r1, r2
   81b40:	eb43 0002 	adc.w	r0, r3, r2
   81b44:	bf08      	it	eq
   81b46:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   81b4a:	4770      	bx	lr

00081b4c <__aeabi_fmul>:
   81b4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
   81b50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   81b54:	bf1e      	ittt	ne
   81b56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   81b5a:	ea92 0f0c 	teqne	r2, ip
   81b5e:	ea93 0f0c 	teqne	r3, ip
   81b62:	d06f      	beq.n	81c44 <__aeabi_fmul+0xf8>
   81b64:	441a      	add	r2, r3
   81b66:	ea80 0c01 	eor.w	ip, r0, r1
   81b6a:	0240      	lsls	r0, r0, #9
   81b6c:	bf18      	it	ne
   81b6e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   81b72:	d01e      	beq.n	81bb2 <__aeabi_fmul+0x66>
   81b74:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   81b78:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   81b7c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   81b80:	fba0 3101 	umull	r3, r1, r0, r1
   81b84:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   81b88:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   81b8c:	bf3e      	ittt	cc
   81b8e:	0049      	lslcc	r1, r1, #1
   81b90:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   81b94:	005b      	lslcc	r3, r3, #1
   81b96:	ea40 0001 	orr.w	r0, r0, r1
   81b9a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   81b9e:	2afd      	cmp	r2, #253	; 0xfd
   81ba0:	d81d      	bhi.n	81bde <__aeabi_fmul+0x92>
   81ba2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   81ba6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   81baa:	bf08      	it	eq
   81bac:	f020 0001 	biceq.w	r0, r0, #1
   81bb0:	4770      	bx	lr
   81bb2:	f090 0f00 	teq	r0, #0
   81bb6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   81bba:	bf08      	it	eq
   81bbc:	0249      	lsleq	r1, r1, #9
   81bbe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   81bc2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   81bc6:	3a7f      	subs	r2, #127	; 0x7f
   81bc8:	bfc2      	ittt	gt
   81bca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   81bce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   81bd2:	4770      	bxgt	lr
   81bd4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81bd8:	f04f 0300 	mov.w	r3, #0
   81bdc:	3a01      	subs	r2, #1
   81bde:	dc5d      	bgt.n	81c9c <__aeabi_fmul+0x150>
   81be0:	f112 0f19 	cmn.w	r2, #25
   81be4:	bfdc      	itt	le
   81be6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   81bea:	4770      	bxle	lr
   81bec:	f1c2 0200 	rsb	r2, r2, #0
   81bf0:	0041      	lsls	r1, r0, #1
   81bf2:	fa21 f102 	lsr.w	r1, r1, r2
   81bf6:	f1c2 0220 	rsb	r2, r2, #32
   81bfa:	fa00 fc02 	lsl.w	ip, r0, r2
   81bfe:	ea5f 0031 	movs.w	r0, r1, rrx
   81c02:	f140 0000 	adc.w	r0, r0, #0
   81c06:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   81c0a:	bf08      	it	eq
   81c0c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   81c10:	4770      	bx	lr
   81c12:	f092 0f00 	teq	r2, #0
   81c16:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   81c1a:	bf02      	ittt	eq
   81c1c:	0040      	lsleq	r0, r0, #1
   81c1e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   81c22:	3a01      	subeq	r2, #1
   81c24:	d0f9      	beq.n	81c1a <__aeabi_fmul+0xce>
   81c26:	ea40 000c 	orr.w	r0, r0, ip
   81c2a:	f093 0f00 	teq	r3, #0
   81c2e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   81c32:	bf02      	ittt	eq
   81c34:	0049      	lsleq	r1, r1, #1
   81c36:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   81c3a:	3b01      	subeq	r3, #1
   81c3c:	d0f9      	beq.n	81c32 <__aeabi_fmul+0xe6>
   81c3e:	ea41 010c 	orr.w	r1, r1, ip
   81c42:	e78f      	b.n	81b64 <__aeabi_fmul+0x18>
   81c44:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   81c48:	ea92 0f0c 	teq	r2, ip
   81c4c:	bf18      	it	ne
   81c4e:	ea93 0f0c 	teqne	r3, ip
   81c52:	d00a      	beq.n	81c6a <__aeabi_fmul+0x11e>
   81c54:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   81c58:	bf18      	it	ne
   81c5a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   81c5e:	d1d8      	bne.n	81c12 <__aeabi_fmul+0xc6>
   81c60:	ea80 0001 	eor.w	r0, r0, r1
   81c64:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   81c68:	4770      	bx	lr
   81c6a:	f090 0f00 	teq	r0, #0
   81c6e:	bf17      	itett	ne
   81c70:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   81c74:	4608      	moveq	r0, r1
   81c76:	f091 0f00 	teqne	r1, #0
   81c7a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   81c7e:	d014      	beq.n	81caa <__aeabi_fmul+0x15e>
   81c80:	ea92 0f0c 	teq	r2, ip
   81c84:	d101      	bne.n	81c8a <__aeabi_fmul+0x13e>
   81c86:	0242      	lsls	r2, r0, #9
   81c88:	d10f      	bne.n	81caa <__aeabi_fmul+0x15e>
   81c8a:	ea93 0f0c 	teq	r3, ip
   81c8e:	d103      	bne.n	81c98 <__aeabi_fmul+0x14c>
   81c90:	024b      	lsls	r3, r1, #9
   81c92:	bf18      	it	ne
   81c94:	4608      	movne	r0, r1
   81c96:	d108      	bne.n	81caa <__aeabi_fmul+0x15e>
   81c98:	ea80 0001 	eor.w	r0, r0, r1
   81c9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   81ca0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   81ca4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81ca8:	4770      	bx	lr
   81caa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   81cae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   81cb2:	4770      	bx	lr

00081cb4 <__aeabi_fdiv>:
   81cb4:	f04f 0cff 	mov.w	ip, #255	; 0xff
   81cb8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   81cbc:	bf1e      	ittt	ne
   81cbe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   81cc2:	ea92 0f0c 	teqne	r2, ip
   81cc6:	ea93 0f0c 	teqne	r3, ip
   81cca:	d069      	beq.n	81da0 <__aeabi_fdiv+0xec>
   81ccc:	eba2 0203 	sub.w	r2, r2, r3
   81cd0:	ea80 0c01 	eor.w	ip, r0, r1
   81cd4:	0249      	lsls	r1, r1, #9
   81cd6:	ea4f 2040 	mov.w	r0, r0, lsl #9
   81cda:	d037      	beq.n	81d4c <__aeabi_fdiv+0x98>
   81cdc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   81ce0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   81ce4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   81ce8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   81cec:	428b      	cmp	r3, r1
   81cee:	bf38      	it	cc
   81cf0:	005b      	lslcc	r3, r3, #1
   81cf2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   81cf6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   81cfa:	428b      	cmp	r3, r1
   81cfc:	bf24      	itt	cs
   81cfe:	1a5b      	subcs	r3, r3, r1
   81d00:	ea40 000c 	orrcs.w	r0, r0, ip
   81d04:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   81d08:	bf24      	itt	cs
   81d0a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   81d0e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   81d12:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   81d16:	bf24      	itt	cs
   81d18:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   81d1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   81d20:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   81d24:	bf24      	itt	cs
   81d26:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   81d2a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   81d2e:	011b      	lsls	r3, r3, #4
   81d30:	bf18      	it	ne
   81d32:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   81d36:	d1e0      	bne.n	81cfa <__aeabi_fdiv+0x46>
   81d38:	2afd      	cmp	r2, #253	; 0xfd
   81d3a:	f63f af50 	bhi.w	81bde <__aeabi_fmul+0x92>
   81d3e:	428b      	cmp	r3, r1
   81d40:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   81d44:	bf08      	it	eq
   81d46:	f020 0001 	biceq.w	r0, r0, #1
   81d4a:	4770      	bx	lr
   81d4c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   81d50:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   81d54:	327f      	adds	r2, #127	; 0x7f
   81d56:	bfc2      	ittt	gt
   81d58:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   81d5c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   81d60:	4770      	bxgt	lr
   81d62:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81d66:	f04f 0300 	mov.w	r3, #0
   81d6a:	3a01      	subs	r2, #1
   81d6c:	e737      	b.n	81bde <__aeabi_fmul+0x92>
   81d6e:	f092 0f00 	teq	r2, #0
   81d72:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   81d76:	bf02      	ittt	eq
   81d78:	0040      	lsleq	r0, r0, #1
   81d7a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   81d7e:	3a01      	subeq	r2, #1
   81d80:	d0f9      	beq.n	81d76 <__aeabi_fdiv+0xc2>
   81d82:	ea40 000c 	orr.w	r0, r0, ip
   81d86:	f093 0f00 	teq	r3, #0
   81d8a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   81d8e:	bf02      	ittt	eq
   81d90:	0049      	lsleq	r1, r1, #1
   81d92:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   81d96:	3b01      	subeq	r3, #1
   81d98:	d0f9      	beq.n	81d8e <__aeabi_fdiv+0xda>
   81d9a:	ea41 010c 	orr.w	r1, r1, ip
   81d9e:	e795      	b.n	81ccc <__aeabi_fdiv+0x18>
   81da0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   81da4:	ea92 0f0c 	teq	r2, ip
   81da8:	d108      	bne.n	81dbc <__aeabi_fdiv+0x108>
   81daa:	0242      	lsls	r2, r0, #9
   81dac:	f47f af7d 	bne.w	81caa <__aeabi_fmul+0x15e>
   81db0:	ea93 0f0c 	teq	r3, ip
   81db4:	f47f af70 	bne.w	81c98 <__aeabi_fmul+0x14c>
   81db8:	4608      	mov	r0, r1
   81dba:	e776      	b.n	81caa <__aeabi_fmul+0x15e>
   81dbc:	ea93 0f0c 	teq	r3, ip
   81dc0:	d104      	bne.n	81dcc <__aeabi_fdiv+0x118>
   81dc2:	024b      	lsls	r3, r1, #9
   81dc4:	f43f af4c 	beq.w	81c60 <__aeabi_fmul+0x114>
   81dc8:	4608      	mov	r0, r1
   81dca:	e76e      	b.n	81caa <__aeabi_fmul+0x15e>
   81dcc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   81dd0:	bf18      	it	ne
   81dd2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   81dd6:	d1ca      	bne.n	81d6e <__aeabi_fdiv+0xba>
   81dd8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   81ddc:	f47f af5c 	bne.w	81c98 <__aeabi_fmul+0x14c>
   81de0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   81de4:	f47f af3c 	bne.w	81c60 <__aeabi_fmul+0x114>
   81de8:	e75f      	b.n	81caa <__aeabi_fmul+0x15e>
   81dea:	bf00      	nop

00081dec <__gesf2>:
   81dec:	f04f 3cff 	mov.w	ip, #4294967295
   81df0:	e006      	b.n	81e00 <__cmpsf2+0x4>
   81df2:	bf00      	nop

00081df4 <__lesf2>:
   81df4:	f04f 0c01 	mov.w	ip, #1
   81df8:	e002      	b.n	81e00 <__cmpsf2+0x4>
   81dfa:	bf00      	nop

00081dfc <__cmpsf2>:
   81dfc:	f04f 0c01 	mov.w	ip, #1
   81e00:	f84d cd04 	str.w	ip, [sp, #-4]!
   81e04:	ea4f 0240 	mov.w	r2, r0, lsl #1
   81e08:	ea4f 0341 	mov.w	r3, r1, lsl #1
   81e0c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   81e10:	bf18      	it	ne
   81e12:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   81e16:	d011      	beq.n	81e3c <__cmpsf2+0x40>
   81e18:	b001      	add	sp, #4
   81e1a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   81e1e:	bf18      	it	ne
   81e20:	ea90 0f01 	teqne	r0, r1
   81e24:	bf58      	it	pl
   81e26:	ebb2 0003 	subspl.w	r0, r2, r3
   81e2a:	bf88      	it	hi
   81e2c:	17c8      	asrhi	r0, r1, #31
   81e2e:	bf38      	it	cc
   81e30:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   81e34:	bf18      	it	ne
   81e36:	f040 0001 	orrne.w	r0, r0, #1
   81e3a:	4770      	bx	lr
   81e3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   81e40:	d102      	bne.n	81e48 <__cmpsf2+0x4c>
   81e42:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   81e46:	d105      	bne.n	81e54 <__cmpsf2+0x58>
   81e48:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   81e4c:	d1e4      	bne.n	81e18 <__cmpsf2+0x1c>
   81e4e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   81e52:	d0e1      	beq.n	81e18 <__cmpsf2+0x1c>
   81e54:	f85d 0b04 	ldr.w	r0, [sp], #4
   81e58:	4770      	bx	lr
   81e5a:	bf00      	nop

00081e5c <__aeabi_cfrcmple>:
   81e5c:	4684      	mov	ip, r0
   81e5e:	4608      	mov	r0, r1
   81e60:	4661      	mov	r1, ip
   81e62:	e7ff      	b.n	81e64 <__aeabi_cfcmpeq>

00081e64 <__aeabi_cfcmpeq>:
   81e64:	b50f      	push	{r0, r1, r2, r3, lr}
   81e66:	f7ff ffc9 	bl	81dfc <__cmpsf2>
   81e6a:	2800      	cmp	r0, #0
   81e6c:	bf48      	it	mi
   81e6e:	f110 0f00 	cmnmi.w	r0, #0
   81e72:	bd0f      	pop	{r0, r1, r2, r3, pc}

00081e74 <__aeabi_fcmpeq>:
   81e74:	f84d ed08 	str.w	lr, [sp, #-8]!
   81e78:	f7ff fff4 	bl	81e64 <__aeabi_cfcmpeq>
   81e7c:	bf0c      	ite	eq
   81e7e:	2001      	moveq	r0, #1
   81e80:	2000      	movne	r0, #0
   81e82:	f85d fb08 	ldr.w	pc, [sp], #8
   81e86:	bf00      	nop

00081e88 <__aeabi_fcmplt>:
   81e88:	f84d ed08 	str.w	lr, [sp, #-8]!
   81e8c:	f7ff ffea 	bl	81e64 <__aeabi_cfcmpeq>
   81e90:	bf34      	ite	cc
   81e92:	2001      	movcc	r0, #1
   81e94:	2000      	movcs	r0, #0
   81e96:	f85d fb08 	ldr.w	pc, [sp], #8
   81e9a:	bf00      	nop

00081e9c <__aeabi_fcmple>:
   81e9c:	f84d ed08 	str.w	lr, [sp, #-8]!
   81ea0:	f7ff ffe0 	bl	81e64 <__aeabi_cfcmpeq>
   81ea4:	bf94      	ite	ls
   81ea6:	2001      	movls	r0, #1
   81ea8:	2000      	movhi	r0, #0
   81eaa:	f85d fb08 	ldr.w	pc, [sp], #8
   81eae:	bf00      	nop

00081eb0 <__aeabi_fcmpge>:
   81eb0:	f84d ed08 	str.w	lr, [sp, #-8]!
   81eb4:	f7ff ffd2 	bl	81e5c <__aeabi_cfrcmple>
   81eb8:	bf94      	ite	ls
   81eba:	2001      	movls	r0, #1
   81ebc:	2000      	movhi	r0, #0
   81ebe:	f85d fb08 	ldr.w	pc, [sp], #8
   81ec2:	bf00      	nop

00081ec4 <__aeabi_fcmpgt>:
   81ec4:	f84d ed08 	str.w	lr, [sp, #-8]!
   81ec8:	f7ff ffc8 	bl	81e5c <__aeabi_cfrcmple>
   81ecc:	bf34      	ite	cc
   81ece:	2001      	movcc	r0, #1
   81ed0:	2000      	movcs	r0, #0
   81ed2:	f85d fb08 	ldr.w	pc, [sp], #8
   81ed6:	bf00      	nop

00081ed8 <__aeabi_f2iz>:
   81ed8:	ea4f 0240 	mov.w	r2, r0, lsl #1
   81edc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   81ee0:	d30f      	bcc.n	81f02 <__aeabi_f2iz+0x2a>
   81ee2:	f04f 039e 	mov.w	r3, #158	; 0x9e
   81ee6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   81eea:	d90d      	bls.n	81f08 <__aeabi_f2iz+0x30>
   81eec:	ea4f 2300 	mov.w	r3, r0, lsl #8
   81ef0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   81ef4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   81ef8:	fa23 f002 	lsr.w	r0, r3, r2
   81efc:	bf18      	it	ne
   81efe:	4240      	negne	r0, r0
   81f00:	4770      	bx	lr
   81f02:	f04f 0000 	mov.w	r0, #0
   81f06:	4770      	bx	lr
   81f08:	f112 0f61 	cmn.w	r2, #97	; 0x61
   81f0c:	d101      	bne.n	81f12 <__aeabi_f2iz+0x3a>
   81f0e:	0242      	lsls	r2, r0, #9
   81f10:	d105      	bne.n	81f1e <__aeabi_f2iz+0x46>
   81f12:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   81f16:	bf08      	it	eq
   81f18:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   81f1c:	4770      	bx	lr
   81f1e:	f04f 0000 	mov.w	r0, #0
   81f22:	4770      	bx	lr

00081f24 <__aeabi_f2uiz>:
   81f24:	0042      	lsls	r2, r0, #1
   81f26:	d20e      	bcs.n	81f46 <__aeabi_f2uiz+0x22>
   81f28:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   81f2c:	d30b      	bcc.n	81f46 <__aeabi_f2uiz+0x22>
   81f2e:	f04f 039e 	mov.w	r3, #158	; 0x9e
   81f32:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   81f36:	d409      	bmi.n	81f4c <__aeabi_f2uiz+0x28>
   81f38:	ea4f 2300 	mov.w	r3, r0, lsl #8
   81f3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   81f40:	fa23 f002 	lsr.w	r0, r3, r2
   81f44:	4770      	bx	lr
   81f46:	f04f 0000 	mov.w	r0, #0
   81f4a:	4770      	bx	lr
   81f4c:	f112 0f61 	cmn.w	r2, #97	; 0x61
   81f50:	d101      	bne.n	81f56 <__aeabi_f2uiz+0x32>
   81f52:	0242      	lsls	r2, r0, #9
   81f54:	d102      	bne.n	81f5c <__aeabi_f2uiz+0x38>
   81f56:	f04f 30ff 	mov.w	r0, #4294967295
   81f5a:	4770      	bx	lr
   81f5c:	f04f 0000 	mov.w	r0, #0
   81f60:	4770      	bx	lr
   81f62:	bf00      	nop

00081f64 <__libc_init_array>:
   81f64:	b570      	push	{r4, r5, r6, lr}
   81f66:	4e0f      	ldr	r6, [pc, #60]	; (81fa4 <__libc_init_array+0x40>)
   81f68:	4d0f      	ldr	r5, [pc, #60]	; (81fa8 <__libc_init_array+0x44>)
   81f6a:	1b76      	subs	r6, r6, r5
   81f6c:	10b6      	asrs	r6, r6, #2
   81f6e:	bf18      	it	ne
   81f70:	2400      	movne	r4, #0
   81f72:	d005      	beq.n	81f80 <__libc_init_array+0x1c>
   81f74:	3401      	adds	r4, #1
   81f76:	f855 3b04 	ldr.w	r3, [r5], #4
   81f7a:	4798      	blx	r3
   81f7c:	42a6      	cmp	r6, r4
   81f7e:	d1f9      	bne.n	81f74 <__libc_init_array+0x10>
   81f80:	4e0a      	ldr	r6, [pc, #40]	; (81fac <__libc_init_array+0x48>)
   81f82:	4d0b      	ldr	r5, [pc, #44]	; (81fb0 <__libc_init_array+0x4c>)
   81f84:	f000 f8ee 	bl	82164 <_init>
   81f88:	1b76      	subs	r6, r6, r5
   81f8a:	10b6      	asrs	r6, r6, #2
   81f8c:	bf18      	it	ne
   81f8e:	2400      	movne	r4, #0
   81f90:	d006      	beq.n	81fa0 <__libc_init_array+0x3c>
   81f92:	3401      	adds	r4, #1
   81f94:	f855 3b04 	ldr.w	r3, [r5], #4
   81f98:	4798      	blx	r3
   81f9a:	42a6      	cmp	r6, r4
   81f9c:	d1f9      	bne.n	81f92 <__libc_init_array+0x2e>
   81f9e:	bd70      	pop	{r4, r5, r6, pc}
   81fa0:	bd70      	pop	{r4, r5, r6, pc}
   81fa2:	bf00      	nop
   81fa4:	00082170 	.word	0x00082170
   81fa8:	00082170 	.word	0x00082170
   81fac:	00082178 	.word	0x00082178
   81fb0:	00082170 	.word	0x00082170

00081fb4 <register_fini>:
   81fb4:	4b02      	ldr	r3, [pc, #8]	; (81fc0 <register_fini+0xc>)
   81fb6:	b113      	cbz	r3, 81fbe <register_fini+0xa>
   81fb8:	4802      	ldr	r0, [pc, #8]	; (81fc4 <register_fini+0x10>)
   81fba:	f000 b805 	b.w	81fc8 <atexit>
   81fbe:	4770      	bx	lr
   81fc0:	00000000 	.word	0x00000000
   81fc4:	00081fd5 	.word	0x00081fd5

00081fc8 <atexit>:
   81fc8:	2300      	movs	r3, #0
   81fca:	4601      	mov	r1, r0
   81fcc:	461a      	mov	r2, r3
   81fce:	4618      	mov	r0, r3
   81fd0:	f000 b81e 	b.w	82010 <__register_exitproc>

00081fd4 <__libc_fini_array>:
   81fd4:	b538      	push	{r3, r4, r5, lr}
   81fd6:	4c0a      	ldr	r4, [pc, #40]	; (82000 <__libc_fini_array+0x2c>)
   81fd8:	4d0a      	ldr	r5, [pc, #40]	; (82004 <__libc_fini_array+0x30>)
   81fda:	1b64      	subs	r4, r4, r5
   81fdc:	10a4      	asrs	r4, r4, #2
   81fde:	d00a      	beq.n	81ff6 <__libc_fini_array+0x22>
   81fe0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   81fe4:	3b01      	subs	r3, #1
   81fe6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   81fea:	3c01      	subs	r4, #1
   81fec:	f855 3904 	ldr.w	r3, [r5], #-4
   81ff0:	4798      	blx	r3
   81ff2:	2c00      	cmp	r4, #0
   81ff4:	d1f9      	bne.n	81fea <__libc_fini_array+0x16>
   81ff6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   81ffa:	f000 b8bd 	b.w	82178 <_fini>
   81ffe:	bf00      	nop
   82000:	00082188 	.word	0x00082188
   82004:	00082184 	.word	0x00082184

00082008 <__retarget_lock_acquire_recursive>:
   82008:	4770      	bx	lr
   8200a:	bf00      	nop

0008200c <__retarget_lock_release_recursive>:
   8200c:	4770      	bx	lr
   8200e:	bf00      	nop

00082010 <__register_exitproc>:
   82010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   82014:	4d2c      	ldr	r5, [pc, #176]	; (820c8 <__register_exitproc+0xb8>)
   82016:	4606      	mov	r6, r0
   82018:	6828      	ldr	r0, [r5, #0]
   8201a:	4698      	mov	r8, r3
   8201c:	460f      	mov	r7, r1
   8201e:	4691      	mov	r9, r2
   82020:	f7ff fff2 	bl	82008 <__retarget_lock_acquire_recursive>
   82024:	4b29      	ldr	r3, [pc, #164]	; (820cc <__register_exitproc+0xbc>)
   82026:	681c      	ldr	r4, [r3, #0]
   82028:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   8202c:	2b00      	cmp	r3, #0
   8202e:	d03e      	beq.n	820ae <__register_exitproc+0x9e>
   82030:	685a      	ldr	r2, [r3, #4]
   82032:	2a1f      	cmp	r2, #31
   82034:	dc1c      	bgt.n	82070 <__register_exitproc+0x60>
   82036:	f102 0e01 	add.w	lr, r2, #1
   8203a:	b176      	cbz	r6, 8205a <__register_exitproc+0x4a>
   8203c:	2101      	movs	r1, #1
   8203e:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   82042:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   82046:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   8204a:	4091      	lsls	r1, r2
   8204c:	4308      	orrs	r0, r1
   8204e:	2e02      	cmp	r6, #2
   82050:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   82054:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   82058:	d023      	beq.n	820a2 <__register_exitproc+0x92>
   8205a:	3202      	adds	r2, #2
   8205c:	f8c3 e004 	str.w	lr, [r3, #4]
   82060:	6828      	ldr	r0, [r5, #0]
   82062:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   82066:	f7ff ffd1 	bl	8200c <__retarget_lock_release_recursive>
   8206a:	2000      	movs	r0, #0
   8206c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   82070:	4b17      	ldr	r3, [pc, #92]	; (820d0 <__register_exitproc+0xc0>)
   82072:	b30b      	cbz	r3, 820b8 <__register_exitproc+0xa8>
   82074:	f44f 70c8 	mov.w	r0, #400	; 0x190
   82078:	f3af 8000 	nop.w
   8207c:	4603      	mov	r3, r0
   8207e:	b1d8      	cbz	r0, 820b8 <__register_exitproc+0xa8>
   82080:	2000      	movs	r0, #0
   82082:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   82086:	f04f 0e01 	mov.w	lr, #1
   8208a:	6058      	str	r0, [r3, #4]
   8208c:	6019      	str	r1, [r3, #0]
   8208e:	4602      	mov	r2, r0
   82090:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   82094:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   82098:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   8209c:	2e00      	cmp	r6, #0
   8209e:	d0dc      	beq.n	8205a <__register_exitproc+0x4a>
   820a0:	e7cc      	b.n	8203c <__register_exitproc+0x2c>
   820a2:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   820a6:	4301      	orrs	r1, r0
   820a8:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   820ac:	e7d5      	b.n	8205a <__register_exitproc+0x4a>
   820ae:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   820b2:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   820b6:	e7bb      	b.n	82030 <__register_exitproc+0x20>
   820b8:	6828      	ldr	r0, [r5, #0]
   820ba:	f7ff ffa7 	bl	8200c <__retarget_lock_release_recursive>
   820be:	f04f 30ff 	mov.w	r0, #4294967295
   820c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   820c6:	bf00      	nop
   820c8:	20000430 	.word	0x20000430
   820cc:	00082160 	.word	0x00082160
   820d0:	00000000 	.word	0x00000000
   820d4:	304e4143 	.word	0x304e4143
   820d8:	73656d20 	.word	0x73656d20
   820dc:	65676173 	.word	0x65676173
   820e0:	72726120 	.word	0x72726120
   820e4:	64657669 	.word	0x64657669
   820e8:	206e6920 	.word	0x206e6920
   820ec:	2d6e6f6e 	.word	0x2d6e6f6e
   820f0:	64657375 	.word	0x64657375
   820f4:	69616d20 	.word	0x69616d20
   820f8:	786f626c 	.word	0x786f626c
   820fc:	00000d0a 	.word	0x00000d0a
   82100:	6c756e28 	.word	0x6c756e28
   82104:	0000296c 	.word	0x0000296c
   82108:	4f525245 	.word	0x4f525245
   8210c:	64203a52 	.word	0x64203a52
   82110:	20797475 	.word	0x20797475
   82114:	6c637963 	.word	0x6c637963
   82118:	6f742065 	.word	0x6f742065
   8211c:	6f6c206f 	.word	0x6f6c206f
   82120:	00000077 	.word	0x00000077
   82124:	4f525245 	.word	0x4f525245
   82128:	64203a52 	.word	0x64203a52
   8212c:	20797475 	.word	0x20797475
   82130:	6c637963 	.word	0x6c637963
   82134:	6f742065 	.word	0x6f742065
   82138:	6968206f 	.word	0x6968206f
   8213c:	00006867 	.word	0x00006867
   82140:	3a525245 	.word	0x3a525245
   82144:	52415520 	.word	0x52415520
   82148:	58522054 	.word	0x58522054
   8214c:	66756220 	.word	0x66756220
   82150:	20726566 	.word	0x20726566
   82154:	66207369 	.word	0x66207369
   82158:	0a6c6c75 	.word	0x0a6c6c75
   8215c:	0000000d 	.word	0x0000000d

00082160 <_global_impure_ptr>:
   82160:	20000008                                ... 

00082164 <_init>:
   82164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82166:	bf00      	nop
   82168:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8216a:	bc08      	pop	{r3}
   8216c:	469e      	mov	lr, r3
   8216e:	4770      	bx	lr

00082170 <__init_array_start>:
   82170:	00081fb5 	.word	0x00081fb5

00082174 <__frame_dummy_init_array_entry>:
   82174:	00080119                                ....

00082178 <_fini>:
   82178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8217a:	bf00      	nop
   8217c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8217e:	bc08      	pop	{r3}
   82180:	469e      	mov	lr, r3
   82182:	4770      	bx	lr

00082184 <__fini_array_start>:
   82184:	000800f5 	.word	0x000800f5
