
Node2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d28  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  00080d28  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000098  20000434  0008115c  00020434  2**2
                  ALLOC
  3 .stack        00000404  200004cc  000811f4  00020434  2**0
                  ALLOC
  4 .heap         00000200  200008d0  000815f8  00020434  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002045d  2**0
                  CONTENTS, READONLY
  7 .debug_info   00006788  00000000  00000000  000204b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000151b  00000000  00000000  00026c3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000139c  00000000  00000000  00028159  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000248  00000000  00000000  000294f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001e0  00000000  00000000  0002973d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000131c9  00000000  00000000  0002991d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000051ca  00000000  00000000  0003cae6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00055423  00000000  00000000  00041cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000063c  00000000  00000000  000970d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	d0 08 00 20 75 03 08 00 71 03 08 00 71 03 08 00     ... u...q...q...
   80010:	71 03 08 00 71 03 08 00 71 03 08 00 00 00 00 00     q...q...q.......
	...
   8002c:	71 03 08 00 71 03 08 00 00 00 00 00 71 03 08 00     q...q.......q...
   8003c:	71 03 08 00 71 03 08 00 71 03 08 00 71 03 08 00     q...q...q...q...
   8004c:	71 03 08 00 71 03 08 00 71 03 08 00 71 03 08 00     q...q...q...q...
   8005c:	71 03 08 00 7d 0a 08 00 71 03 08 00 00 00 00 00     q...}...q.......
   8006c:	71 03 08 00 71 03 08 00 71 03 08 00 71 03 08 00     q...q...q...q...
	...
   80084:	71 03 08 00 71 03 08 00 71 03 08 00 71 03 08 00     q...q...q...q...
   80094:	71 03 08 00 71 03 08 00 71 03 08 00 71 03 08 00     q...q...q...q...
   800a4:	00 00 00 00 71 03 08 00 29 09 08 00 71 03 08 00     ....q...)...q...
   800b4:	71 03 08 00 71 03 08 00 71 03 08 00 71 03 08 00     q...q...q...q...
   800c4:	71 03 08 00 71 03 08 00 71 03 08 00 71 03 08 00     q...q...q...q...
   800d4:	71 03 08 00 71 03 08 00 71 03 08 00 71 03 08 00     q...q...q...q...
   800e4:	71 03 08 00 71 03 08 00 d5 02 08 00 71 03 08 00     q...q.......q...

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000434 	.word	0x20000434
   80110:	00000000 	.word	0x00000000
   80114:	00080d28 	.word	0x00080d28

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00080d28 	.word	0x00080d28
   80154:	20000438 	.word	0x20000438
   80158:	00080d28 	.word	0x00080d28
   8015c:	00000000 	.word	0x00000000

00080160 <can_init>:
   80160:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   80164:	1855      	adds	r5, r2, r1
   80166:	2908      	cmp	r1, #8
   80168:	bf98      	it	ls
   8016a:	2a08      	cmpls	r2, #8
   8016c:	d864      	bhi.n	80238 <can_init+0xd8>
   8016e:	460e      	mov	r6, r1
   80170:	2d08      	cmp	r5, #8
   80172:	dc61      	bgt.n	80238 <can_init+0xd8>
   80174:	4a32      	ldr	r2, [pc, #200]	; (80240 <can_init+0xe0>)
   80176:	6813      	ldr	r3, [r2, #0]
   80178:	f023 0301 	bic.w	r3, r3, #1
   8017c:	6013      	str	r3, [r2, #0]
   8017e:	6913      	ldr	r3, [r2, #16]
   80180:	4b30      	ldr	r3, [pc, #192]	; (80244 <can_init+0xe4>)
   80182:	f44f 7440 	mov.w	r4, #768	; 0x300
   80186:	645c      	str	r4, [r3, #68]	; 0x44
   80188:	6f1c      	ldr	r4, [r3, #112]	; 0x70
   8018a:	f024 0403 	bic.w	r4, r4, #3
   8018e:	671c      	str	r4, [r3, #112]	; 0x70
   80190:	2403      	movs	r4, #3
   80192:	605c      	str	r4, [r3, #4]
   80194:	665c      	str	r4, [r3, #100]	; 0x64
   80196:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   8019a:	4c2b      	ldr	r4, [pc, #172]	; (80248 <can_init+0xe8>)
   8019c:	f8c3 410c 	str.w	r4, [r3, #268]	; 0x10c
   801a0:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   801a4:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
   801a8:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
   801ac:	6150      	str	r0, [r2, #20]
   801ae:	42a9      	cmp	r1, r5
   801b0:	dc40      	bgt.n	80234 <can_init+0xd4>
   801b2:	460a      	mov	r2, r1
   801b4:	2400      	movs	r4, #0
   801b6:	46a1      	mov	r9, r4
   801b8:	f8df 8084 	ldr.w	r8, [pc, #132]	; 80240 <can_init+0xe0>
   801bc:	f04f 5c00 	mov.w	ip, #536870912	; 0x20000000
   801c0:	f04f 7e80 	mov.w	lr, #16777216	; 0x1000000
   801c4:	2701      	movs	r7, #1
   801c6:	0153      	lsls	r3, r2, #5
   801c8:	f103 2040 	add.w	r0, r3, #1073758208	; 0x40004000
   801cc:	f500 2030 	add.w	r0, r0, #720896	; 0xb0000
   801d0:	f8c0 9204 	str.w	r9, [r0, #516]	; 0x204
   801d4:	4443      	add	r3, r8
   801d6:	f8c3 c208 	str.w	ip, [r3, #520]	; 0x208
   801da:	f8c0 e200 	str.w	lr, [r0, #512]	; 0x200
   801de:	f8d3 021c 	ldr.w	r0, [r3, #540]	; 0x21c
   801e2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   801e6:	f8c3 021c 	str.w	r0, [r3, #540]	; 0x21c
   801ea:	fa07 f302 	lsl.w	r3, r7, r2
   801ee:	431c      	orrs	r4, r3
   801f0:	3201      	adds	r2, #1
   801f2:	4295      	cmp	r5, r2
   801f4:	dae7      	bge.n	801c6 <can_init+0x66>
   801f6:	b181      	cbz	r1, 8021a <can_init+0xba>
   801f8:	2300      	movs	r3, #0
   801fa:	4911      	ldr	r1, [pc, #68]	; (80240 <can_init+0xe0>)
   801fc:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
   80200:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
   80204:	eb01 1243 	add.w	r2, r1, r3, lsl #5
   80208:	f8c2 5208 	str.w	r5, [r2, #520]	; 0x208
   8020c:	f103 0210 	add.w	r2, r3, #16
   80210:	0152      	lsls	r2, r2, #5
   80212:	5088      	str	r0, [r1, r2]
   80214:	3301      	adds	r3, #1
   80216:	429e      	cmp	r6, r3
   80218:	d1f4      	bne.n	80204 <can_init+0xa4>
   8021a:	4b09      	ldr	r3, [pc, #36]	; (80240 <can_init+0xe0>)
   8021c:	605c      	str	r4, [r3, #4]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   8021e:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80222:	4a0a      	ldr	r2, [pc, #40]	; (8024c <can_init+0xec>)
   80224:	6051      	str	r1, [r2, #4]
   80226:	681a      	ldr	r2, [r3, #0]
   80228:	f042 0201 	orr.w	r2, r2, #1
   8022c:	601a      	str	r2, [r3, #0]
   8022e:	2000      	movs	r0, #0
   80230:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   80234:	2400      	movs	r4, #0
   80236:	e7de      	b.n	801f6 <can_init+0x96>
   80238:	2001      	movs	r0, #1
   8023a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8023e:	bf00      	nop
   80240:	400b4000 	.word	0x400b4000
   80244:	400e0e00 	.word	0x400e0e00
   80248:	1000102b 	.word	0x1000102b
   8024c:	e000e100 	.word	0xe000e100

00080250 <can_receive>:
   80250:	014b      	lsls	r3, r1, #5
   80252:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   80256:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   8025a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   8025e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   80262:	d033      	beq.n	802cc <can_receive+0x7c>
   80264:	b430      	push	{r4, r5}
   80266:	014b      	lsls	r3, r1, #5
   80268:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   8026c:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   80270:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
   80274:	f8d3 4218 	ldr.w	r4, [r3, #536]	; 0x218
   80278:	f8d3 5208 	ldr.w	r5, [r3, #520]	; 0x208
   8027c:	f3c5 458a 	ubfx	r5, r5, #18, #11
   80280:	8005      	strh	r5, [r0, #0]
   80282:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   80286:	f3c3 4303 	ubfx	r3, r3, #16, #4
   8028a:	7083      	strb	r3, [r0, #2]
   8028c:	461d      	mov	r5, r3
   8028e:	b15b      	cbz	r3, 802a8 <can_receive+0x58>
   80290:	3003      	adds	r0, #3
   80292:	2300      	movs	r3, #0
   80294:	2b03      	cmp	r3, #3
   80296:	bfd9      	ittee	le
   80298:	7002      	strble	r2, [r0, #0]
   8029a:	0a12      	lsrle	r2, r2, #8
   8029c:	7004      	strbgt	r4, [r0, #0]
   8029e:	0a24      	lsrgt	r4, r4, #8
   802a0:	3301      	adds	r3, #1
   802a2:	3001      	adds	r0, #1
   802a4:	42ab      	cmp	r3, r5
   802a6:	d1f5      	bne.n	80294 <can_receive+0x44>
   802a8:	4b09      	ldr	r3, [pc, #36]	; (802d0 <can_receive+0x80>)
   802aa:	f101 0210 	add.w	r2, r1, #16
   802ae:	0152      	lsls	r2, r2, #5
   802b0:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   802b4:	5098      	str	r0, [r3, r2]
   802b6:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   802ba:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
   802be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   802c2:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
   802c6:	2000      	movs	r0, #0
   802c8:	bc30      	pop	{r4, r5}
   802ca:	4770      	bx	lr
   802cc:	2001      	movs	r0, #1
   802ce:	4770      	bx	lr
   802d0:	400b4000 	.word	0x400b4000

000802d4 <CAN0_Handler>:
 * \param void
 *
 * \retval 
 */
void CAN0_Handler( void )
{
   802d4:	b510      	push	{r4, lr}
   802d6:	b084      	sub	sp, #16
	if(DEBUG_INTERRUPT)printf("CAN0 interrupt\n\r");
	char can_sr = CAN0->CAN_SR; 
   802d8:	4b1f      	ldr	r3, [pc, #124]	; (80358 <CAN0_Handler+0x84>)
   802da:	691c      	ldr	r4, [r3, #16]
	
	//RX interrupt
	if(can_sr & (CAN_SR_MB1 | CAN_SR_MB2) )//Only mailbox 1 and 2 specified for receiving
   802dc:	f014 0f06 	tst.w	r4, #6
   802e0:	d023      	beq.n	8032a <CAN0_Handler+0x56>
	{
		CAN_MESSAGE message;
		if(can_sr & CAN_SR_MB1)  //Mailbox 1 event
   802e2:	f014 0f02 	tst.w	r4, #2
   802e6:	d12d      	bne.n	80344 <CAN0_Handler+0x70>
		{
			can_receive(&message, 1);

		}
		else if(can_sr & CAN_SR_MB2) //Mailbox 2 event
   802e8:	f014 0f04 	tst.w	r4, #4
   802ec:	d02f      	beq.n	8034e <CAN0_Handler+0x7a>
		
		{
			can_receive(&message, 2);
   802ee:	2102      	movs	r1, #2
   802f0:	a801      	add	r0, sp, #4
   802f2:	4b1a      	ldr	r3, [pc, #104]	; (8035c <CAN0_Handler+0x88>)
   802f4:	4798      	blx	r3
			printf("CAN0 message arrived in non-used mailbox\n\r");
		}

		if(DEBUG_INTERRUPT)printf("message id: %d\n\r", message.id);
		if(DEBUG_INTERRUPT)printf("message data length: %d\n\r", message.data_length);
		for (int i = 0; i < message.data_length; i++)
   802f6:	f89d 2006 	ldrb.w	r2, [sp, #6]
   802fa:	b11a      	cbz	r2, 80304 <CAN0_Handler+0x30>
   802fc:	2300      	movs	r3, #0
   802fe:	3301      	adds	r3, #1
   80300:	4293      	cmp	r3, r2
   80302:	d1fc      	bne.n	802fe <CAN0_Handler+0x2a>
			if(DEBUG_INTERRUPT)printf("%d ", message.data[i]);
		}
		if(DEBUG_INTERRUPT)printf("\n\r");
        
        //Fetching joystick data
        received_joystick_data.posX = (message.data[0]) - 128;
   80304:	4b16      	ldr	r3, [pc, #88]	; (80360 <CAN0_Handler+0x8c>)
   80306:	f89d 2007 	ldrb.w	r2, [sp, #7]
   8030a:	3a80      	subs	r2, #128	; 0x80
   8030c:	601a      	str	r2, [r3, #0]
        received_joystick_data.posY = (message.data[1]) - 128;  
   8030e:	f89d 2008 	ldrb.w	r2, [sp, #8]
   80312:	3a80      	subs	r2, #128	; 0x80
   80314:	605a      	str	r2, [r3, #4]
        received_joystick_data.button_pushed = (message.data[2]) % 2;     
   80316:	f89d 2009 	ldrb.w	r2, [sp, #9]
   8031a:	f002 0101 	and.w	r1, r2, #1
   8031e:	7219      	strb	r1, [r3, #8]
        received_joystick_data.joystick_direction = (message.data[2] >> 1);
   80320:	0852      	lsrs	r2, r2, #1
   80322:	725a      	strb	r2, [r3, #9]
		received_joystick_data.sliderRight = (message.data[3]);
   80324:	f89d 200a 	ldrb.w	r2, [sp, #10]
   80328:	729a      	strb	r2, [r3, #10]
		
		//printf("SliderY: %d\n\r", message.data[3]);
	}
	
	if(can_sr & CAN_SR_MB0)
   8032a:	f014 0f01 	tst.w	r4, #1
   8032e:	d002      	beq.n	80336 <CAN0_Handler+0x62>
	{
		if(DEBUG_INTERRUPT) printf("CAN0 MB0 ready to send \n\r");
		
	//Disable interrupt
		CAN0->CAN_IDR = CAN_IER_MB0;
   80330:	2201      	movs	r2, #1
   80332:	4b09      	ldr	r3, [pc, #36]	; (80358 <CAN0_Handler+0x84>)
   80334:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80336:	f44f 6200 	mov.w	r2, #2048	; 0x800
   8033a:	4b0a      	ldr	r3, [pc, #40]	; (80364 <CAN0_Handler+0x90>)
   8033c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ClearPendingIRQ(ID_CAN0);
	//sei();*/


    
}
   80340:	b004      	add	sp, #16
   80342:	bd10      	pop	{r4, pc}
			can_receive(&message, 1);
   80344:	2101      	movs	r1, #1
   80346:	a801      	add	r0, sp, #4
   80348:	4b04      	ldr	r3, [pc, #16]	; (8035c <CAN0_Handler+0x88>)
   8034a:	4798      	blx	r3
   8034c:	e7d3      	b.n	802f6 <CAN0_Handler+0x22>
			printf("CAN0 message arrived in non-used mailbox\n\r");
   8034e:	4806      	ldr	r0, [pc, #24]	; (80368 <CAN0_Handler+0x94>)
   80350:	4b06      	ldr	r3, [pc, #24]	; (8036c <CAN0_Handler+0x98>)
   80352:	4798      	blx	r3
   80354:	e7cf      	b.n	802f6 <CAN0_Handler+0x22>
   80356:	bf00      	nop
   80358:	400b4000 	.word	0x400b4000
   8035c:	00080251 	.word	0x00080251
   80360:	20000458 	.word	0x20000458
   80364:	e000e100 	.word	0xe000e100
   80368:	00080c54 	.word	0x00080c54
   8036c:	000808c1 	.word	0x000808c1

00080370 <Dummy_Handler>:
   80370:	e7fe      	b.n	80370 <Dummy_Handler>
	...

00080374 <Reset_Handler>:
   80374:	b508      	push	{r3, lr}
   80376:	4b18      	ldr	r3, [pc, #96]	; (803d8 <Reset_Handler+0x64>)
   80378:	4a18      	ldr	r2, [pc, #96]	; (803dc <Reset_Handler+0x68>)
   8037a:	429a      	cmp	r2, r3
   8037c:	d010      	beq.n	803a0 <Reset_Handler+0x2c>
   8037e:	4b18      	ldr	r3, [pc, #96]	; (803e0 <Reset_Handler+0x6c>)
   80380:	4a15      	ldr	r2, [pc, #84]	; (803d8 <Reset_Handler+0x64>)
   80382:	429a      	cmp	r2, r3
   80384:	d20c      	bcs.n	803a0 <Reset_Handler+0x2c>
   80386:	3b01      	subs	r3, #1
   80388:	1a9b      	subs	r3, r3, r2
   8038a:	f023 0303 	bic.w	r3, r3, #3
   8038e:	3304      	adds	r3, #4
   80390:	4413      	add	r3, r2
   80392:	4912      	ldr	r1, [pc, #72]	; (803dc <Reset_Handler+0x68>)
   80394:	f851 0b04 	ldr.w	r0, [r1], #4
   80398:	f842 0b04 	str.w	r0, [r2], #4
   8039c:	429a      	cmp	r2, r3
   8039e:	d1f9      	bne.n	80394 <Reset_Handler+0x20>
   803a0:	4b10      	ldr	r3, [pc, #64]	; (803e4 <Reset_Handler+0x70>)
   803a2:	4a11      	ldr	r2, [pc, #68]	; (803e8 <Reset_Handler+0x74>)
   803a4:	429a      	cmp	r2, r3
   803a6:	d20a      	bcs.n	803be <Reset_Handler+0x4a>
   803a8:	3b01      	subs	r3, #1
   803aa:	1a9b      	subs	r3, r3, r2
   803ac:	f023 0303 	bic.w	r3, r3, #3
   803b0:	3304      	adds	r3, #4
   803b2:	4413      	add	r3, r2
   803b4:	2100      	movs	r1, #0
   803b6:	f842 1b04 	str.w	r1, [r2], #4
   803ba:	4293      	cmp	r3, r2
   803bc:	d1fb      	bne.n	803b6 <Reset_Handler+0x42>
   803be:	4b0b      	ldr	r3, [pc, #44]	; (803ec <Reset_Handler+0x78>)
   803c0:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   803c4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   803c8:	4a09      	ldr	r2, [pc, #36]	; (803f0 <Reset_Handler+0x7c>)
   803ca:	6093      	str	r3, [r2, #8]
   803cc:	4b09      	ldr	r3, [pc, #36]	; (803f4 <Reset_Handler+0x80>)
   803ce:	4798      	blx	r3
   803d0:	4b09      	ldr	r3, [pc, #36]	; (803f8 <Reset_Handler+0x84>)
   803d2:	4798      	blx	r3
   803d4:	e7fe      	b.n	803d4 <Reset_Handler+0x60>
   803d6:	bf00      	nop
   803d8:	20000000 	.word	0x20000000
   803dc:	00080d28 	.word	0x00080d28
   803e0:	20000434 	.word	0x20000434
   803e4:	200004cc 	.word	0x200004cc
   803e8:	20000434 	.word	0x20000434
   803ec:	00080000 	.word	0x00080000
   803f0:	e000ed00 	.word	0xe000ed00
   803f4:	00080ae5 	.word	0x00080ae5
   803f8:	000804cd 	.word	0x000804cd

000803fc <SystemInit>:
   803fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
   80400:	4a20      	ldr	r2, [pc, #128]	; (80484 <SystemInit+0x88>)
   80402:	6013      	str	r3, [r2, #0]
   80404:	f502 7200 	add.w	r2, r2, #512	; 0x200
   80408:	6013      	str	r3, [r2, #0]
   8040a:	4b1f      	ldr	r3, [pc, #124]	; (80488 <SystemInit+0x8c>)
   8040c:	6a1b      	ldr	r3, [r3, #32]
   8040e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80412:	d107      	bne.n	80424 <SystemInit+0x28>
   80414:	4a1d      	ldr	r2, [pc, #116]	; (8048c <SystemInit+0x90>)
   80416:	4b1c      	ldr	r3, [pc, #112]	; (80488 <SystemInit+0x8c>)
   80418:	621a      	str	r2, [r3, #32]
   8041a:	461a      	mov	r2, r3
   8041c:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8041e:	f013 0f01 	tst.w	r3, #1
   80422:	d0fb      	beq.n	8041c <SystemInit+0x20>
   80424:	4a1a      	ldr	r2, [pc, #104]	; (80490 <SystemInit+0x94>)
   80426:	4b18      	ldr	r3, [pc, #96]	; (80488 <SystemInit+0x8c>)
   80428:	621a      	str	r2, [r3, #32]
   8042a:	461a      	mov	r2, r3
   8042c:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8042e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   80432:	d0fb      	beq.n	8042c <SystemInit+0x30>
   80434:	4a14      	ldr	r2, [pc, #80]	; (80488 <SystemInit+0x8c>)
   80436:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80438:	f023 0303 	bic.w	r3, r3, #3
   8043c:	f043 0301 	orr.w	r3, r3, #1
   80440:	6313      	str	r3, [r2, #48]	; 0x30
   80442:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80444:	f013 0f08 	tst.w	r3, #8
   80448:	d0fb      	beq.n	80442 <SystemInit+0x46>
   8044a:	4a12      	ldr	r2, [pc, #72]	; (80494 <SystemInit+0x98>)
   8044c:	4b0e      	ldr	r3, [pc, #56]	; (80488 <SystemInit+0x8c>)
   8044e:	629a      	str	r2, [r3, #40]	; 0x28
   80450:	461a      	mov	r2, r3
   80452:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80454:	f013 0f02 	tst.w	r3, #2
   80458:	d0fb      	beq.n	80452 <SystemInit+0x56>
   8045a:	2211      	movs	r2, #17
   8045c:	4b0a      	ldr	r3, [pc, #40]	; (80488 <SystemInit+0x8c>)
   8045e:	631a      	str	r2, [r3, #48]	; 0x30
   80460:	461a      	mov	r2, r3
   80462:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80464:	f013 0f08 	tst.w	r3, #8
   80468:	d0fb      	beq.n	80462 <SystemInit+0x66>
   8046a:	2212      	movs	r2, #18
   8046c:	4b06      	ldr	r3, [pc, #24]	; (80488 <SystemInit+0x8c>)
   8046e:	631a      	str	r2, [r3, #48]	; 0x30
   80470:	461a      	mov	r2, r3
   80472:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80474:	f013 0f08 	tst.w	r3, #8
   80478:	d0fb      	beq.n	80472 <SystemInit+0x76>
   8047a:	4a07      	ldr	r2, [pc, #28]	; (80498 <SystemInit+0x9c>)
   8047c:	4b07      	ldr	r3, [pc, #28]	; (8049c <SystemInit+0xa0>)
   8047e:	601a      	str	r2, [r3, #0]
   80480:	4770      	bx	lr
   80482:	bf00      	nop
   80484:	400e0a00 	.word	0x400e0a00
   80488:	400e0600 	.word	0x400e0600
   8048c:	00370809 	.word	0x00370809
   80490:	01370809 	.word	0x01370809
   80494:	200d3f01 	.word	0x200d3f01
   80498:	0501bd00 	.word	0x0501bd00
   8049c:	20000000 	.word	0x20000000

000804a0 <IR_init>:
   804a0:	4a09      	ldr	r2, [pc, #36]	; (804c8 <IR_init+0x28>)
   804a2:	6813      	ldr	r3, [r2, #0]
   804a4:	f043 0320 	orr.w	r3, r3, #32
   804a8:	6013      	str	r3, [r2, #0]
   804aa:	f5a2 3201 	sub.w	r2, r2, #132096	; 0x20400
   804ae:	f5a2 723f 	sub.w	r2, r2, #764	; 0x2fc
   804b2:	6813      	ldr	r3, [r2, #0]
   804b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   804b8:	6013      	str	r3, [r2, #0]
   804ba:	320c      	adds	r2, #12
   804bc:	6813      	ldr	r3, [r2, #0]
   804be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   804c2:	6013      	str	r3, [r2, #0]
   804c4:	4770      	bx	lr
   804c6:	bf00      	nop
   804c8:	400e0700 	.word	0x400e0700

000804cc <main>:
#include "Timer.h"

#define F_CPU 84E6 //84Mhz

int main(void)
{
   804cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   804ce:	b083      	sub	sp, #12
    /* Initialize the SAM system */
    SystemInit();
   804d0:	4b13      	ldr	r3, [pc, #76]	; (80520 <main+0x54>)
   804d2:	4798      	blx	r3
    configure_uart();
   804d4:	4b13      	ldr	r3, [pc, #76]	; (80524 <main+0x58>)
   804d6:	4798      	blx	r3
	servo_pwm_init();
   804d8:	4b13      	ldr	r3, [pc, #76]	; (80528 <main+0x5c>)
   804da:	4798      	blx	r3
	motor_init_DAC();   
   804dc:	4b13      	ldr	r3, [pc, #76]	; (8052c <main+0x60>)
   804de:	4798      	blx	r3
    IR_init();
   804e0:	4b13      	ldr	r3, [pc, #76]	; (80530 <main+0x64>)
   804e2:	4798      	blx	r3
    timer_init();
   804e4:	4b13      	ldr	r3, [pc, #76]	; (80534 <main+0x68>)
   804e6:	4798      	blx	r3
    
    //init can config     
    uint32_t can_msk = 0x00143555;
    uint8_t can_status = can_init(can_msk, 1, 1);
   804e8:	2201      	movs	r2, #1
   804ea:	4611      	mov	r1, r2
   804ec:	4812      	ldr	r0, [pc, #72]	; (80538 <main+0x6c>)
   804ee:	4b13      	ldr	r3, [pc, #76]	; (8053c <main+0x70>)
   804f0:	4798      	blx	r3
    
    WDT->WDT_MR = WDT_MR_WDDIS; // Dissable watchdog      
   804f2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   804f6:	4b12      	ldr	r3, [pc, #72]	; (80540 <main+0x74>)
   804f8:	605a      	str	r2, [r3, #4]
    test_message.data_length = 3;
	
	//	servo_set_pwm_test();
    
    //SetTimer(1);  
    motor_enable();
   804fa:	4b12      	ldr	r3, [pc, #72]	; (80544 <main+0x78>)
   804fc:	4798      	blx	r3
		//counter_value = motor_read_counter();
		
		//printf("Counter Value: %d\n\r", counter_value);
		

		servo_activate_solonoid(received_joystick_data);
   804fe:	4c12      	ldr	r4, [pc, #72]	; (80548 <main+0x7c>)
   80500:	4f12      	ldr	r7, [pc, #72]	; (8054c <main+0x80>)


       printf("X = %d Y = %d, joybutton = %d, joydirection = %d, SliderY = %d \n\r", received_joystick_data.posX, received_joystick_data.posY, received_joystick_data.button_pushed, received_joystick_data.joystick_direction, received_joystick_data.sliderRight);
   80502:	4e13      	ldr	r6, [pc, #76]	; (80550 <main+0x84>)
		servo_activate_solonoid(received_joystick_data);
   80504:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   80508:	47b8      	blx	r7
       printf("X = %d Y = %d, joybutton = %d, joydirection = %d, SliderY = %d \n\r", received_joystick_data.posX, received_joystick_data.posY, received_joystick_data.button_pushed, received_joystick_data.joystick_direction, received_joystick_data.sliderRight);
   8050a:	7a23      	ldrb	r3, [r4, #8]
   8050c:	7aa2      	ldrb	r2, [r4, #10]
   8050e:	9201      	str	r2, [sp, #4]
   80510:	7a62      	ldrb	r2, [r4, #9]
   80512:	9200      	str	r2, [sp, #0]
   80514:	6862      	ldr	r2, [r4, #4]
   80516:	6821      	ldr	r1, [r4, #0]
   80518:	4630      	mov	r0, r6
   8051a:	4d0e      	ldr	r5, [pc, #56]	; (80554 <main+0x88>)
   8051c:	47a8      	blx	r5
   8051e:	e7f1      	b.n	80504 <main+0x38>
   80520:	000803fd 	.word	0x000803fd
   80524:	000809f1 	.word	0x000809f1
   80528:	00080961 	.word	0x00080961
   8052c:	00080559 	.word	0x00080559
   80530:	000804a1 	.word	0x000804a1
   80534:	000808e5 	.word	0x000808e5
   80538:	00143555 	.word	0x00143555
   8053c:	00080161 	.word	0x00080161
   80540:	400e1a50 	.word	0x400e1a50
   80544:	000805dd 	.word	0x000805dd
   80548:	20000458 	.word	0x20000458
   8054c:	000809c5 	.word	0x000809c5
   80550:	00080c80 	.word	0x00080c80
   80554:	000808c1 	.word	0x000808c1

00080558 <motor_init_DAC>:
#include "motor_interface.h"


void motor_init_DAC(){
	// Set clock for DACC peripheral
	REG_PMC_PCER1 |= (1<<6);
   80558:	4a14      	ldr	r2, [pc, #80]	; (805ac <motor_init_DAC+0x54>)
   8055a:	6813      	ldr	r3, [r2, #0]
   8055c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   80560:	6013      	str	r3, [r2, #0]
	
	//Set DACC MODE REGISTER, free running mode
	REG_DACC_MR = 0x05012000; //0x050012000
   80562:	4a13      	ldr	r2, [pc, #76]	; (805b0 <motor_init_DAC+0x58>)
   80564:	4b13      	ldr	r3, [pc, #76]	; (805b4 <motor_init_DAC+0x5c>)
   80566:	601a      	str	r2, [r3, #0]
	
	//Set DAC channel to channel 1
	REG_DACC_CHER = 0b10;
   80568:	2202      	movs	r2, #2
   8056a:	330c      	adds	r3, #12
   8056c:	601a      	str	r2, [r3, #0]
	
	//Enable pmc for port C and port D
	PMC->PMC_PCER0 |= (1 << ID_PIOC);
   8056e:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
   80572:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
   80576:	691a      	ldr	r2, [r3, #16]
   80578:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8057c:	611a      	str	r2, [r3, #16]
	PMC->PMC_PCER0 |= (1 << ID_PIOC);
   8057e:	691a      	ldr	r2, [r3, #16]
   80580:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   80584:	611a      	str	r2, [r3, #16]
	
	//Enable output on port D's pins: 0, 1, 2, 9, 10
	REG_PIOD_PER |= 0b11000000111; //Enable IO 
   80586:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
   8058a:	681a      	ldr	r2, [r3, #0]
   8058c:	f240 6107 	movw	r1, #1543	; 0x607
   80590:	430a      	orrs	r2, r1
   80592:	601a      	str	r2, [r3, #0]
	REG_PIOD_OER |= 0b11000000111; //Enable output
   80594:	4a08      	ldr	r2, [pc, #32]	; (805b8 <motor_init_DAC+0x60>)
   80596:	6813      	ldr	r3, [r2, #0]
   80598:	430b      	orrs	r3, r1
   8059a:	6013      	str	r3, [r2, #0]
	
	//Enable input on port C's pins: 0-7
	REG_PIOC_PER |= 0b11111111;
   8059c:	f5a2 7204 	sub.w	r2, r2, #528	; 0x210
   805a0:	6813      	ldr	r3, [r2, #0]
   805a2:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   805a6:	6013      	str	r3, [r2, #0]
   805a8:	4770      	bx	lr
   805aa:	bf00      	nop
   805ac:	400e0700 	.word	0x400e0700
   805b0:	05012000 	.word	0x05012000
   805b4:	400c8004 	.word	0x400c8004
   805b8:	400e1410 	.word	0x400e1410

000805bc <motor_reset_counter>:
	motor_reset_counter();
}

void motor_reset_counter(void){
	//Reset pin low
	REG_PIOD_CODR = (1 << 1);
   805bc:	2202      	movs	r2, #2
   805be:	4b05      	ldr	r3, [pc, #20]	; (805d4 <motor_reset_counter+0x18>)
   805c0:	601a      	str	r2, [r3, #0]
   805c2:	f44f 73c8 	mov.w	r3, #400	; 0x190
	
	//Delay
	
	for(int i = 0; i < 400; i++);
   805c6:	3b01      	subs	r3, #1
   805c8:	d1fd      	bne.n	805c6 <motor_reset_counter+0xa>
	
	//Reset pin high
	REG_PIOD_SODR = (1 << 1);
   805ca:	2202      	movs	r2, #2
   805cc:	4b02      	ldr	r3, [pc, #8]	; (805d8 <motor_reset_counter+0x1c>)
   805ce:	601a      	str	r2, [r3, #0]
   805d0:	4770      	bx	lr
   805d2:	bf00      	nop
   805d4:	400e1434 	.word	0x400e1434
   805d8:	400e1430 	.word	0x400e1430

000805dc <motor_enable>:
void motor_enable(void){
   805dc:	b508      	push	{r3, lr}
	REG_PIOD_SODR |= (1<<9); //Set PD9 high	
   805de:	4a04      	ldr	r2, [pc, #16]	; (805f0 <motor_enable+0x14>)
   805e0:	6813      	ldr	r3, [r2, #0]
   805e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   805e6:	6013      	str	r3, [r2, #0]
	motor_reset_counter();
   805e8:	4b02      	ldr	r3, [pc, #8]	; (805f4 <motor_enable+0x18>)
   805ea:	4798      	blx	r3
   805ec:	bd08      	pop	{r3, pc}
   805ee:	bf00      	nop
   805f0:	400e1430 	.word	0x400e1430
   805f4:	000805bd 	.word	0x000805bd

000805f8 <prints>:
   805f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   805fc:	460d      	mov	r5, r1
   805fe:	1e16      	subs	r6, r2, #0
   80600:	dd48      	ble.n	80694 <prints+0x9c>
   80602:	780a      	ldrb	r2, [r1, #0]
   80604:	2a00      	cmp	r2, #0
   80606:	d035      	beq.n	80674 <prints+0x7c>
   80608:	460a      	mov	r2, r1
   8060a:	2400      	movs	r4, #0
   8060c:	3401      	adds	r4, #1
   8060e:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   80612:	2900      	cmp	r1, #0
   80614:	d1fa      	bne.n	8060c <prints+0x14>
   80616:	42a6      	cmp	r6, r4
   80618:	dc2d      	bgt.n	80676 <prints+0x7e>
   8061a:	2400      	movs	r4, #0
   8061c:	f003 0202 	and.w	r2, r3, #2
   80620:	2a00      	cmp	r2, #0
   80622:	bf0c      	ite	eq
   80624:	f04f 0820 	moveq.w	r8, #32
   80628:	f04f 0830 	movne.w	r8, #48	; 0x30
   8062c:	f013 0301 	ands.w	r3, r3, #1
   80630:	d123      	bne.n	8067a <prints+0x82>
   80632:	2c00      	cmp	r4, #0
   80634:	dd28      	ble.n	80688 <prints+0x90>
   80636:	4626      	mov	r6, r4
   80638:	fa5f f988 	uxtb.w	r9, r8
   8063c:	4f18      	ldr	r7, [pc, #96]	; (806a0 <prints+0xa8>)
   8063e:	4648      	mov	r0, r9
   80640:	47b8      	blx	r7
   80642:	3e01      	subs	r6, #1
   80644:	d1fb      	bne.n	8063e <prints+0x46>
   80646:	7828      	ldrb	r0, [r5, #0]
   80648:	b188      	cbz	r0, 8066e <prints+0x76>
   8064a:	4f15      	ldr	r7, [pc, #84]	; (806a0 <prints+0xa8>)
   8064c:	47b8      	blx	r7
   8064e:	3401      	adds	r4, #1
   80650:	f815 0f01 	ldrb.w	r0, [r5, #1]!
   80654:	2800      	cmp	r0, #0
   80656:	d1f9      	bne.n	8064c <prints+0x54>
   80658:	2e00      	cmp	r6, #0
   8065a:	dd08      	ble.n	8066e <prints+0x76>
   8065c:	4635      	mov	r5, r6
   8065e:	fa5f f888 	uxtb.w	r8, r8
   80662:	4f0f      	ldr	r7, [pc, #60]	; (806a0 <prints+0xa8>)
   80664:	4640      	mov	r0, r8
   80666:	47b8      	blx	r7
   80668:	3d01      	subs	r5, #1
   8066a:	d1fb      	bne.n	80664 <prints+0x6c>
   8066c:	4434      	add	r4, r6
   8066e:	4620      	mov	r0, r4
   80670:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80674:	2400      	movs	r4, #0
   80676:	1b34      	subs	r4, r6, r4
   80678:	e7d0      	b.n	8061c <prints+0x24>
   8067a:	4626      	mov	r6, r4
   8067c:	7828      	ldrb	r0, [r5, #0]
   8067e:	b108      	cbz	r0, 80684 <prints+0x8c>
   80680:	2400      	movs	r4, #0
   80682:	e7e2      	b.n	8064a <prints+0x52>
   80684:	2400      	movs	r4, #0
   80686:	e7e7      	b.n	80658 <prints+0x60>
   80688:	4626      	mov	r6, r4
   8068a:	461c      	mov	r4, r3
   8068c:	e7db      	b.n	80646 <prints+0x4e>
   8068e:	f04f 0820 	mov.w	r8, #32
   80692:	e7d8      	b.n	80646 <prints+0x4e>
   80694:	f013 0401 	ands.w	r4, r3, #1
   80698:	d0f9      	beq.n	8068e <prints+0x96>
   8069a:	f04f 0820 	mov.w	r8, #32
   8069e:	e7ed      	b.n	8067c <prints+0x84>
   806a0:	00080a59 	.word	0x00080a59

000806a4 <printi>:
   806a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   806a6:	b085      	sub	sp, #20
   806a8:	4607      	mov	r7, r0
   806aa:	b381      	cbz	r1, 8070e <printi+0x6a>
   806ac:	460c      	mov	r4, r1
   806ae:	b10b      	cbz	r3, 806b4 <printi+0x10>
   806b0:	2a0a      	cmp	r2, #10
   806b2:	d038      	beq.n	80726 <printi+0x82>
   806b4:	2300      	movs	r3, #0
   806b6:	f88d 300f 	strb.w	r3, [sp, #15]
   806ba:	2600      	movs	r6, #0
   806bc:	2900      	cmp	r1, #0
   806be:	d046      	beq.n	8074e <printi+0xaa>
   806c0:	f10d 050f 	add.w	r5, sp, #15
   806c4:	990c      	ldr	r1, [sp, #48]	; 0x30
   806c6:	393a      	subs	r1, #58	; 0x3a
   806c8:	fbb4 f3f2 	udiv	r3, r4, r2
   806cc:	fb02 4313 	mls	r3, r2, r3, r4
   806d0:	2b09      	cmp	r3, #9
   806d2:	bfc8      	it	gt
   806d4:	185b      	addgt	r3, r3, r1
   806d6:	3330      	adds	r3, #48	; 0x30
   806d8:	f805 3d01 	strb.w	r3, [r5, #-1]!
   806dc:	fbb4 f4f2 	udiv	r4, r4, r2
   806e0:	2c00      	cmp	r4, #0
   806e2:	d1f1      	bne.n	806c8 <printi+0x24>
   806e4:	b156      	cbz	r6, 806fc <printi+0x58>
   806e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   806e8:	b11b      	cbz	r3, 806f2 <printi+0x4e>
   806ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   806ec:	f013 0f02 	tst.w	r3, #2
   806f0:	d125      	bne.n	8073e <printi+0x9a>
   806f2:	232d      	movs	r3, #45	; 0x2d
   806f4:	f805 3c01 	strb.w	r3, [r5, #-1]
   806f8:	3d01      	subs	r5, #1
   806fa:	2600      	movs	r6, #0
   806fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   806fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80700:	4629      	mov	r1, r5
   80702:	4638      	mov	r0, r7
   80704:	4c14      	ldr	r4, [pc, #80]	; (80758 <printi+0xb4>)
   80706:	47a0      	blx	r4
   80708:	4430      	add	r0, r6
   8070a:	b005      	add	sp, #20
   8070c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8070e:	2330      	movs	r3, #48	; 0x30
   80710:	f88d 3004 	strb.w	r3, [sp, #4]
   80714:	2300      	movs	r3, #0
   80716:	f88d 3005 	strb.w	r3, [sp, #5]
   8071a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8071c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8071e:	a901      	add	r1, sp, #4
   80720:	4c0d      	ldr	r4, [pc, #52]	; (80758 <printi+0xb4>)
   80722:	47a0      	blx	r4
   80724:	e7f1      	b.n	8070a <printi+0x66>
   80726:	2900      	cmp	r1, #0
   80728:	dac4      	bge.n	806b4 <printi+0x10>
   8072a:	424c      	negs	r4, r1
   8072c:	2300      	movs	r3, #0
   8072e:	f88d 300f 	strb.w	r3, [sp, #15]
   80732:	f10d 050f 	add.w	r5, sp, #15
   80736:	2c00      	cmp	r4, #0
   80738:	d0d5      	beq.n	806e6 <printi+0x42>
   8073a:	2601      	movs	r6, #1
   8073c:	e7c0      	b.n	806c0 <printi+0x1c>
   8073e:	202d      	movs	r0, #45	; 0x2d
   80740:	4b06      	ldr	r3, [pc, #24]	; (8075c <printi+0xb8>)
   80742:	4798      	blx	r3
   80744:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80746:	3b01      	subs	r3, #1
   80748:	930a      	str	r3, [sp, #40]	; 0x28
   8074a:	2601      	movs	r6, #1
   8074c:	e7d6      	b.n	806fc <printi+0x58>
   8074e:	461e      	mov	r6, r3
   80750:	f10d 050f 	add.w	r5, sp, #15
   80754:	e7d2      	b.n	806fc <printi+0x58>
   80756:	bf00      	nop
   80758:	000805f9 	.word	0x000805f9
   8075c:	00080a59 	.word	0x00080a59

00080760 <print>:
   80760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80764:	b087      	sub	sp, #28
   80766:	4680      	mov	r8, r0
   80768:	780b      	ldrb	r3, [r1, #0]
   8076a:	2b00      	cmp	r3, #0
   8076c:	f000 8094 	beq.w	80898 <print+0x138>
   80770:	468b      	mov	fp, r1
   80772:	4617      	mov	r7, r2
   80774:	2500      	movs	r5, #0
   80776:	4e4e      	ldr	r6, [pc, #312]	; (808b0 <print+0x150>)
   80778:	f8df a13c 	ldr.w	sl, [pc, #316]	; 808b8 <print+0x158>
   8077c:	f8df 913c 	ldr.w	r9, [pc, #316]	; 808bc <print+0x15c>
   80780:	e046      	b.n	80810 <print+0xb0>
   80782:	2200      	movs	r2, #0
   80784:	e070      	b.n	80868 <print+0x108>
   80786:	6839      	ldr	r1, [r7, #0]
   80788:	3704      	adds	r7, #4
   8078a:	484a      	ldr	r0, [pc, #296]	; (808b4 <print+0x154>)
   8078c:	2900      	cmp	r1, #0
   8078e:	bf08      	it	eq
   80790:	4601      	moveq	r1, r0
   80792:	4640      	mov	r0, r8
   80794:	47d0      	blx	sl
   80796:	4405      	add	r5, r0
   80798:	e035      	b.n	80806 <print+0xa6>
   8079a:	6839      	ldr	r1, [r7, #0]
   8079c:	3704      	adds	r7, #4
   8079e:	2061      	movs	r0, #97	; 0x61
   807a0:	9002      	str	r0, [sp, #8]
   807a2:	9301      	str	r3, [sp, #4]
   807a4:	9200      	str	r2, [sp, #0]
   807a6:	2301      	movs	r3, #1
   807a8:	220a      	movs	r2, #10
   807aa:	4640      	mov	r0, r8
   807ac:	47c8      	blx	r9
   807ae:	4405      	add	r5, r0
   807b0:	e029      	b.n	80806 <print+0xa6>
   807b2:	6839      	ldr	r1, [r7, #0]
   807b4:	3704      	adds	r7, #4
   807b6:	2061      	movs	r0, #97	; 0x61
   807b8:	9002      	str	r0, [sp, #8]
   807ba:	9301      	str	r3, [sp, #4]
   807bc:	9200      	str	r2, [sp, #0]
   807be:	2300      	movs	r3, #0
   807c0:	2210      	movs	r2, #16
   807c2:	4640      	mov	r0, r8
   807c4:	47c8      	blx	r9
   807c6:	4405      	add	r5, r0
   807c8:	e01d      	b.n	80806 <print+0xa6>
   807ca:	6839      	ldr	r1, [r7, #0]
   807cc:	3704      	adds	r7, #4
   807ce:	2041      	movs	r0, #65	; 0x41
   807d0:	9002      	str	r0, [sp, #8]
   807d2:	9301      	str	r3, [sp, #4]
   807d4:	9200      	str	r2, [sp, #0]
   807d6:	2300      	movs	r3, #0
   807d8:	2210      	movs	r2, #16
   807da:	4640      	mov	r0, r8
   807dc:	47c8      	blx	r9
   807de:	4405      	add	r5, r0
   807e0:	e011      	b.n	80806 <print+0xa6>
   807e2:	6839      	ldr	r1, [r7, #0]
   807e4:	3704      	adds	r7, #4
   807e6:	2061      	movs	r0, #97	; 0x61
   807e8:	9002      	str	r0, [sp, #8]
   807ea:	9301      	str	r3, [sp, #4]
   807ec:	9200      	str	r2, [sp, #0]
   807ee:	2300      	movs	r3, #0
   807f0:	220a      	movs	r2, #10
   807f2:	4640      	mov	r0, r8
   807f4:	47c8      	blx	r9
   807f6:	4405      	add	r5, r0
   807f8:	e005      	b.n	80806 <print+0xa6>
   807fa:	46a3      	mov	fp, r4
   807fc:	f89b 0000 	ldrb.w	r0, [fp]
   80800:	47b0      	blx	r6
   80802:	3501      	adds	r5, #1
   80804:	465c      	mov	r4, fp
   80806:	f104 0b01 	add.w	fp, r4, #1
   8080a:	7863      	ldrb	r3, [r4, #1]
   8080c:	2b00      	cmp	r3, #0
   8080e:	d044      	beq.n	8089a <print+0x13a>
   80810:	2b25      	cmp	r3, #37	; 0x25
   80812:	d1f3      	bne.n	807fc <print+0x9c>
   80814:	f10b 0401 	add.w	r4, fp, #1
   80818:	f89b 3001 	ldrb.w	r3, [fp, #1]
   8081c:	2b00      	cmp	r3, #0
   8081e:	d03c      	beq.n	8089a <print+0x13a>
   80820:	2b25      	cmp	r3, #37	; 0x25
   80822:	d0ea      	beq.n	807fa <print+0x9a>
   80824:	2b2d      	cmp	r3, #45	; 0x2d
   80826:	bf06      	itte	eq
   80828:	f10b 0402 	addeq.w	r4, fp, #2
   8082c:	2301      	moveq	r3, #1
   8082e:	2300      	movne	r3, #0
   80830:	7822      	ldrb	r2, [r4, #0]
   80832:	2a30      	cmp	r2, #48	; 0x30
   80834:	d105      	bne.n	80842 <print+0xe2>
   80836:	f043 0302 	orr.w	r3, r3, #2
   8083a:	f814 2f01 	ldrb.w	r2, [r4, #1]!
   8083e:	2a30      	cmp	r2, #48	; 0x30
   80840:	d0f9      	beq.n	80836 <print+0xd6>
   80842:	7821      	ldrb	r1, [r4, #0]
   80844:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   80848:	b2d2      	uxtb	r2, r2
   8084a:	2a09      	cmp	r2, #9
   8084c:	d899      	bhi.n	80782 <print+0x22>
   8084e:	2200      	movs	r2, #0
   80850:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   80854:	3930      	subs	r1, #48	; 0x30
   80856:	eb01 0242 	add.w	r2, r1, r2, lsl #1
   8085a:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   8085e:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   80862:	b2c0      	uxtb	r0, r0
   80864:	2809      	cmp	r0, #9
   80866:	d9f3      	bls.n	80850 <print+0xf0>
   80868:	2973      	cmp	r1, #115	; 0x73
   8086a:	d08c      	beq.n	80786 <print+0x26>
   8086c:	2964      	cmp	r1, #100	; 0x64
   8086e:	d094      	beq.n	8079a <print+0x3a>
   80870:	2978      	cmp	r1, #120	; 0x78
   80872:	d09e      	beq.n	807b2 <print+0x52>
   80874:	2958      	cmp	r1, #88	; 0x58
   80876:	d0a8      	beq.n	807ca <print+0x6a>
   80878:	2975      	cmp	r1, #117	; 0x75
   8087a:	d0b2      	beq.n	807e2 <print+0x82>
   8087c:	2963      	cmp	r1, #99	; 0x63
   8087e:	d1c2      	bne.n	80806 <print+0xa6>
   80880:	6839      	ldr	r1, [r7, #0]
   80882:	3704      	adds	r7, #4
   80884:	f88d 1014 	strb.w	r1, [sp, #20]
   80888:	2100      	movs	r1, #0
   8088a:	f88d 1015 	strb.w	r1, [sp, #21]
   8088e:	a905      	add	r1, sp, #20
   80890:	4640      	mov	r0, r8
   80892:	47d0      	blx	sl
   80894:	4405      	add	r5, r0
   80896:	e7b6      	b.n	80806 <print+0xa6>
   80898:	2500      	movs	r5, #0
   8089a:	f1b8 0f00 	cmp.w	r8, #0
   8089e:	d003      	beq.n	808a8 <print+0x148>
   808a0:	f8d8 3000 	ldr.w	r3, [r8]
   808a4:	2200      	movs	r2, #0
   808a6:	701a      	strb	r2, [r3, #0]
   808a8:	4628      	mov	r0, r5
   808aa:	b007      	add	sp, #28
   808ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   808b0:	00080a59 	.word	0x00080a59
   808b4:	00080cc4 	.word	0x00080cc4
   808b8:	000805f9 	.word	0x000805f9
   808bc:	000806a5 	.word	0x000806a5

000808c0 <printf>:
   808c0:	b40f      	push	{r0, r1, r2, r3}
   808c2:	b500      	push	{lr}
   808c4:	b083      	sub	sp, #12
   808c6:	aa04      	add	r2, sp, #16
   808c8:	f852 1b04 	ldr.w	r1, [r2], #4
   808cc:	9201      	str	r2, [sp, #4]
   808ce:	2000      	movs	r0, #0
   808d0:	4b03      	ldr	r3, [pc, #12]	; (808e0 <printf+0x20>)
   808d2:	4798      	blx	r3
   808d4:	b003      	add	sp, #12
   808d6:	f85d eb04 	ldr.w	lr, [sp], #4
   808da:	b004      	add	sp, #16
   808dc:	4770      	bx	lr
   808de:	bf00      	nop
   808e0:	00080761 	.word	0x00080761

000808e4 <timer_init>:
volatile uint32_t highscore = 0;
volatile uint16_t status = 0;


uint32_t timer_init(void){
    REG_PMC_PCER0 |= (1 << ID_PIOB) | (1 << ID_TC0); //enable timer in power controller
   808e4:	4a0c      	ldr	r2, [pc, #48]	; (80918 <timer_init+0x34>)
   808e6:	6813      	ldr	r3, [r2, #0]
   808e8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   808ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   808f0:	6013      	str	r3, [r2, #0]

    // HIGHSCORE TIMING SETUP //    
    TC0->TC_CHANNEL[0].TC_IER |= TC_IER_CPCS
   808f2:	4b0a      	ldr	r3, [pc, #40]	; (8091c <timer_init+0x38>)
   808f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   808f6:	f042 0214 	orr.w	r2, r2, #20
   808fa:	625a      	str	r2, [r3, #36]	; 0x24
                              | TC_IER_CPAS;
    TC0->TC_CHANNEL[0].TC_CCR |= TC_CCR_CLKEN;    
   808fc:	681a      	ldr	r2, [r3, #0]
   808fe:	f042 0201 	orr.w	r2, r2, #1
   80902:	601a      	str	r2, [r3, #0]
    uint16_t RC_count = 39400; // to have ish 1000 points per min (~16,67Hz)
    TC0->TC_CHANNEL[0].TC_RC = RC_count; // Set Compare RA        
   80904:	f649 12e8 	movw	r2, #39400	; 0x99e8
   80908:	61da      	str	r2, [r3, #28]
    TC0->TC_CHANNEL[0].TC_CMR = TC_CMR_TCCLKS_TIMER_CLOCK4  // prescale of 128
   8090a:	4a05      	ldr	r2, [pc, #20]	; (80920 <timer_init+0x3c>)
   8090c:	605a      	str	r2, [r3, #4]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   8090e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   80912:	4b04      	ldr	r3, [pc, #16]	; (80924 <timer_init+0x40>)
   80914:	601a      	str	r2, [r3, #0]
                               | TC_CMR_WAVE                // waveform mode
                               | TC_CMR_WAVSEL_UP_RC        // compare rising edge on RC
                               | TC_CMR_ACPC_SET;           //     
    NVIC_EnableIRQ(ID_TC0); 
}
   80916:	4770      	bx	lr
   80918:	400e0610 	.word	0x400e0610
   8091c:	40080000 	.word	0x40080000
   80920:	0004c003 	.word	0x0004c003
   80924:	e000e100 	.word	0xe000e100

00080928 <TC0_Handler>:
void TC0_Handler(void){
   80928:	b508      	push	{r3, lr}
    uint16_t status =  TC0->TC_CHANNEL[0].TC_SR;
   8092a:	4b08      	ldr	r3, [pc, #32]	; (8094c <TC0_Handler+0x24>)
   8092c:	6a1b      	ldr	r3, [r3, #32]
    //if(TC0->TC_CHANNEL[0].TC_SR == TC_SR_COVFS){
    highscore++;
   8092e:	4b08      	ldr	r3, [pc, #32]	; (80950 <TC0_Handler+0x28>)
   80930:	681a      	ldr	r2, [r3, #0]
   80932:	3201      	adds	r2, #1
   80934:	601a      	str	r2, [r3, #0]
    //}
    //if (!(highscore %1000)) {
    printf("highscore is: %d \n\r", highscore);   
   80936:	6819      	ldr	r1, [r3, #0]
   80938:	4806      	ldr	r0, [pc, #24]	; (80954 <TC0_Handler+0x2c>)
   8093a:	4b07      	ldr	r3, [pc, #28]	; (80958 <TC0_Handler+0x30>)
   8093c:	4798      	blx	r3
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   8093e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   80942:	4b06      	ldr	r3, [pc, #24]	; (8095c <TC0_Handler+0x34>)
   80944:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   80948:	bd08      	pop	{r3, pc}
   8094a:	bf00      	nop
   8094c:	40080000 	.word	0x40080000
   80950:	20000450 	.word	0x20000450
   80954:	00080ccc 	.word	0x00080ccc
   80958:	000808c1 	.word	0x000808c1
   8095c:	e000e100 	.word	0xe000e100

00080960 <servo_pwm_init>:

#include "servo_ctrl.h"

void servo_pwm_init(void){
		//Initializing pin for solonoid 
		REG_PIOC_PER |= (1 << 28); // set as gpio on pin 23 port C
   80960:	4b13      	ldr	r3, [pc, #76]	; (809b0 <servo_pwm_init+0x50>)
   80962:	681a      	ldr	r2, [r3, #0]
   80964:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   80968:	601a      	str	r2, [r3, #0]
		REG_PIOC_OER |= (1 << 28); // output enable
   8096a:	4912      	ldr	r1, [pc, #72]	; (809b4 <servo_pwm_init+0x54>)
   8096c:	680a      	ldr	r2, [r1, #0]
   8096e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   80972:	600a      	str	r2, [r1, #0]
		REG_PIOC_CODR = (1 << 28); // set output data low
   80974:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80978:	4a0f      	ldr	r2, [pc, #60]	; (809b8 <servo_pwm_init+0x58>)
   8097a:	6011      	str	r1, [r2, #0]
	
	
		//First enable PWM clock
		REG_PMC_PCER1 |= (1<<4);
   8097c:	490f      	ldr	r1, [pc, #60]	; (809bc <servo_pwm_init+0x5c>)
   8097e:	680a      	ldr	r2, [r1, #0]
   80980:	f042 0210 	orr.w	r2, r2, #16
   80984:	600a      	str	r2, [r1, #0]
		
		//Turn of the PIO conteller for pin PC19. PIN 44 on shield.
		PIOC->PIO_PDR |= PIO_PDR_P19;
   80986:	685a      	ldr	r2, [r3, #4]
   80988:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   8098c:	605a      	str	r2, [r3, #4]
		
		//Choose peripheral B for PC19, PWMH5
		PIOC->PIO_ABSR |= PIO_ABSR_P19;
   8098e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80990:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80994:	671a      	str	r2, [r3, #112]	; 0x70
		
		//Set clock frequency for PWM, 2Mhz, CLKA.
		REG_PWM_CLK = 0x002A0000;
   80996:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
   8099a:	4b09      	ldr	r3, [pc, #36]	; (809c0 <servo_pwm_init+0x60>)
   8099c:	601a      	str	r2, [r3, #0]
		
		//Set channel mode
		REG_PWM_CMR5 = 0x0000000C;
   8099e:	220c      	movs	r2, #12
   809a0:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
   809a4:	601a      	str	r2, [r3, #0]
		
		//Set channel period to 20ms
		REG_PWM_CPRD5 = 0x00009C40;
   809a6:	f649 4240 	movw	r2, #40000	; 0x9c40
   809aa:	330c      	adds	r3, #12
   809ac:	601a      	str	r2, [r3, #0]
   809ae:	4770      	bx	lr
   809b0:	400e1200 	.word	0x400e1200
   809b4:	400e1210 	.word	0x400e1210
   809b8:	400e1234 	.word	0x400e1234
   809bc:	400e0700 	.word	0x400e0700
   809c0:	40094000 	.word	0x40094000

000809c4 <servo_activate_solonoid>:
	float duty_cycle = pulse_width / 20.0; //20.0 is PWM period.
	
	servo_set_pwm(duty_cycle);
}

void servo_activate_solonoid(joystick_data_t data){
   809c4:	b084      	sub	sp, #16
   809c6:	ab04      	add	r3, sp, #16
   809c8:	e903 0007 	stmdb	r3, {r0, r1, r2}
	
	if(data.button_pushed){
   809cc:	f89d 300c 	ldrb.w	r3, [sp, #12]
   809d0:	b92b      	cbnz	r3, 809de <servo_activate_solonoid+0x1a>
		REG_PIOC_SODR = (1 << 28); // Enable voltage to solonoid
	}
	else{
		REG_PIOC_CODR = (1 << 28); // Set solonoid pin low
   809d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   809d6:	4b04      	ldr	r3, [pc, #16]	; (809e8 <servo_activate_solonoid+0x24>)
   809d8:	601a      	str	r2, [r3, #0]
	}
	//for(int i = 0; i < 400; i++); // Delay
	
}
   809da:	b004      	add	sp, #16
   809dc:	4770      	bx	lr
		REG_PIOC_SODR = (1 << 28); // Enable voltage to solonoid
   809de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   809e2:	4b02      	ldr	r3, [pc, #8]	; (809ec <servo_activate_solonoid+0x28>)
   809e4:	601a      	str	r2, [r3, #0]
   809e6:	e7f8      	b.n	809da <servo_activate_solonoid+0x16>
   809e8:	400e1234 	.word	0x400e1234
   809ec:	400e1230 	.word	0x400e1230

000809f0 <configure_uart>:
   809f0:	4b16      	ldr	r3, [pc, #88]	; (80a4c <configure_uart+0x5c>)
   809f2:	2200      	movs	r2, #0
   809f4:	701a      	strb	r2, [r3, #0]
   809f6:	705a      	strb	r2, [r3, #1]
   809f8:	4b15      	ldr	r3, [pc, #84]	; (80a50 <configure_uart+0x60>)
   809fa:	f44f 7140 	mov.w	r1, #768	; 0x300
   809fe:	6459      	str	r1, [r3, #68]	; 0x44
   80a00:	6059      	str	r1, [r3, #4]
   80a02:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80a04:	6f18      	ldr	r0, [r3, #112]	; 0x70
   80a06:	4002      	ands	r2, r0
   80a08:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   80a0c:	671a      	str	r2, [r3, #112]	; 0x70
   80a0e:	6659      	str	r1, [r3, #100]	; 0x64
   80a10:	f44f 7280 	mov.w	r2, #256	; 0x100
   80a14:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   80a18:	611a      	str	r2, [r3, #16]
   80a1a:	f503 7300 	add.w	r3, r3, #512	; 0x200
   80a1e:	21ac      	movs	r1, #172	; 0xac
   80a20:	6019      	str	r1, [r3, #0]
   80a22:	f240 2123 	movw	r1, #547	; 0x223
   80a26:	6219      	str	r1, [r3, #32]
   80a28:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80a2c:	6059      	str	r1, [r3, #4]
   80a2e:	f240 2102 	movw	r1, #514	; 0x202
   80a32:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   80a36:	f04f 31ff 	mov.w	r1, #4294967295
   80a3a:	60d9      	str	r1, [r3, #12]
   80a3c:	21e1      	movs	r1, #225	; 0xe1
   80a3e:	6099      	str	r1, [r3, #8]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80a40:	4904      	ldr	r1, [pc, #16]	; (80a54 <configure_uart+0x64>)
   80a42:	600a      	str	r2, [r1, #0]
   80a44:	2250      	movs	r2, #80	; 0x50
   80a46:	601a      	str	r2, [r3, #0]
   80a48:	4770      	bx	lr
   80a4a:	bf00      	nop
   80a4c:	20000464 	.word	0x20000464
   80a50:	400e0e00 	.word	0x400e0e00
   80a54:	e000e100 	.word	0xe000e100

00080a58 <uart_putchar>:
   80a58:	4b07      	ldr	r3, [pc, #28]	; (80a78 <uart_putchar+0x20>)
   80a5a:	695b      	ldr	r3, [r3, #20]
   80a5c:	f013 0f02 	tst.w	r3, #2
   80a60:	d008      	beq.n	80a74 <uart_putchar+0x1c>
   80a62:	4b05      	ldr	r3, [pc, #20]	; (80a78 <uart_putchar+0x20>)
   80a64:	61d8      	str	r0, [r3, #28]
   80a66:	461a      	mov	r2, r3
   80a68:	6953      	ldr	r3, [r2, #20]
   80a6a:	f413 7f00 	tst.w	r3, #512	; 0x200
   80a6e:	d0fb      	beq.n	80a68 <uart_putchar+0x10>
   80a70:	2000      	movs	r0, #0
   80a72:	4770      	bx	lr
   80a74:	2001      	movs	r0, #1
   80a76:	4770      	bx	lr
   80a78:	400e0800 	.word	0x400e0800

00080a7c <UART_Handler>:
   80a7c:	b508      	push	{r3, lr}
   80a7e:	4b15      	ldr	r3, [pc, #84]	; (80ad4 <UART_Handler+0x58>)
   80a80:	695b      	ldr	r3, [r3, #20]
   80a82:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   80a86:	d003      	beq.n	80a90 <UART_Handler+0x14>
   80a88:	f44f 71a8 	mov.w	r1, #336	; 0x150
   80a8c:	4a11      	ldr	r2, [pc, #68]	; (80ad4 <UART_Handler+0x58>)
   80a8e:	6011      	str	r1, [r2, #0]
   80a90:	f013 0f01 	tst.w	r3, #1
   80a94:	d012      	beq.n	80abc <UART_Handler+0x40>
   80a96:	4810      	ldr	r0, [pc, #64]	; (80ad8 <UART_Handler+0x5c>)
   80a98:	7842      	ldrb	r2, [r0, #1]
   80a9a:	1c53      	adds	r3, r2, #1
   80a9c:	4259      	negs	r1, r3
   80a9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   80aa2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   80aa6:	bf58      	it	pl
   80aa8:	424b      	negpl	r3, r1
   80aaa:	7801      	ldrb	r1, [r0, #0]
   80aac:	428b      	cmp	r3, r1
   80aae:	d006      	beq.n	80abe <UART_Handler+0x42>
   80ab0:	4908      	ldr	r1, [pc, #32]	; (80ad4 <UART_Handler+0x58>)
   80ab2:	6988      	ldr	r0, [r1, #24]
   80ab4:	4908      	ldr	r1, [pc, #32]	; (80ad8 <UART_Handler+0x5c>)
   80ab6:	440a      	add	r2, r1
   80ab8:	7090      	strb	r0, [r2, #2]
   80aba:	704b      	strb	r3, [r1, #1]
   80abc:	bd08      	pop	{r3, pc}
   80abe:	4807      	ldr	r0, [pc, #28]	; (80adc <UART_Handler+0x60>)
   80ac0:	4b07      	ldr	r3, [pc, #28]	; (80ae0 <UART_Handler+0x64>)
   80ac2:	4798      	blx	r3
   80ac4:	4b03      	ldr	r3, [pc, #12]	; (80ad4 <UART_Handler+0x58>)
   80ac6:	699a      	ldr	r2, [r3, #24]
   80ac8:	4b03      	ldr	r3, [pc, #12]	; (80ad8 <UART_Handler+0x5c>)
   80aca:	7859      	ldrb	r1, [r3, #1]
   80acc:	440b      	add	r3, r1
   80ace:	709a      	strb	r2, [r3, #2]
   80ad0:	bd08      	pop	{r3, pc}
   80ad2:	bf00      	nop
   80ad4:	400e0800 	.word	0x400e0800
   80ad8:	20000464 	.word	0x20000464
   80adc:	00080ce0 	.word	0x00080ce0
   80ae0:	000808c1 	.word	0x000808c1

00080ae4 <__libc_init_array>:
   80ae4:	b570      	push	{r4, r5, r6, lr}
   80ae6:	4e0f      	ldr	r6, [pc, #60]	; (80b24 <__libc_init_array+0x40>)
   80ae8:	4d0f      	ldr	r5, [pc, #60]	; (80b28 <__libc_init_array+0x44>)
   80aea:	1b76      	subs	r6, r6, r5
   80aec:	10b6      	asrs	r6, r6, #2
   80aee:	bf18      	it	ne
   80af0:	2400      	movne	r4, #0
   80af2:	d005      	beq.n	80b00 <__libc_init_array+0x1c>
   80af4:	3401      	adds	r4, #1
   80af6:	f855 3b04 	ldr.w	r3, [r5], #4
   80afa:	4798      	blx	r3
   80afc:	42a6      	cmp	r6, r4
   80afe:	d1f9      	bne.n	80af4 <__libc_init_array+0x10>
   80b00:	4e0a      	ldr	r6, [pc, #40]	; (80b2c <__libc_init_array+0x48>)
   80b02:	4d0b      	ldr	r5, [pc, #44]	; (80b30 <__libc_init_array+0x4c>)
   80b04:	f000 f8fe 	bl	80d04 <_init>
   80b08:	1b76      	subs	r6, r6, r5
   80b0a:	10b6      	asrs	r6, r6, #2
   80b0c:	bf18      	it	ne
   80b0e:	2400      	movne	r4, #0
   80b10:	d006      	beq.n	80b20 <__libc_init_array+0x3c>
   80b12:	3401      	adds	r4, #1
   80b14:	f855 3b04 	ldr.w	r3, [r5], #4
   80b18:	4798      	blx	r3
   80b1a:	42a6      	cmp	r6, r4
   80b1c:	d1f9      	bne.n	80b12 <__libc_init_array+0x2e>
   80b1e:	bd70      	pop	{r4, r5, r6, pc}
   80b20:	bd70      	pop	{r4, r5, r6, pc}
   80b22:	bf00      	nop
   80b24:	00080d10 	.word	0x00080d10
   80b28:	00080d10 	.word	0x00080d10
   80b2c:	00080d18 	.word	0x00080d18
   80b30:	00080d10 	.word	0x00080d10

00080b34 <register_fini>:
   80b34:	4b02      	ldr	r3, [pc, #8]	; (80b40 <register_fini+0xc>)
   80b36:	b113      	cbz	r3, 80b3e <register_fini+0xa>
   80b38:	4802      	ldr	r0, [pc, #8]	; (80b44 <register_fini+0x10>)
   80b3a:	f000 b805 	b.w	80b48 <atexit>
   80b3e:	4770      	bx	lr
   80b40:	00000000 	.word	0x00000000
   80b44:	00080b55 	.word	0x00080b55

00080b48 <atexit>:
   80b48:	2300      	movs	r3, #0
   80b4a:	4601      	mov	r1, r0
   80b4c:	461a      	mov	r2, r3
   80b4e:	4618      	mov	r0, r3
   80b50:	f000 b81e 	b.w	80b90 <__register_exitproc>

00080b54 <__libc_fini_array>:
   80b54:	b538      	push	{r3, r4, r5, lr}
   80b56:	4c0a      	ldr	r4, [pc, #40]	; (80b80 <__libc_fini_array+0x2c>)
   80b58:	4d0a      	ldr	r5, [pc, #40]	; (80b84 <__libc_fini_array+0x30>)
   80b5a:	1b64      	subs	r4, r4, r5
   80b5c:	10a4      	asrs	r4, r4, #2
   80b5e:	d00a      	beq.n	80b76 <__libc_fini_array+0x22>
   80b60:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   80b64:	3b01      	subs	r3, #1
   80b66:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   80b6a:	3c01      	subs	r4, #1
   80b6c:	f855 3904 	ldr.w	r3, [r5], #-4
   80b70:	4798      	blx	r3
   80b72:	2c00      	cmp	r4, #0
   80b74:	d1f9      	bne.n	80b6a <__libc_fini_array+0x16>
   80b76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   80b7a:	f000 b8cd 	b.w	80d18 <_fini>
   80b7e:	bf00      	nop
   80b80:	00080d28 	.word	0x00080d28
   80b84:	00080d24 	.word	0x00080d24

00080b88 <__retarget_lock_acquire_recursive>:
   80b88:	4770      	bx	lr
   80b8a:	bf00      	nop

00080b8c <__retarget_lock_release_recursive>:
   80b8c:	4770      	bx	lr
   80b8e:	bf00      	nop

00080b90 <__register_exitproc>:
   80b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80b94:	4d2c      	ldr	r5, [pc, #176]	; (80c48 <__register_exitproc+0xb8>)
   80b96:	4606      	mov	r6, r0
   80b98:	6828      	ldr	r0, [r5, #0]
   80b9a:	4698      	mov	r8, r3
   80b9c:	460f      	mov	r7, r1
   80b9e:	4691      	mov	r9, r2
   80ba0:	f7ff fff2 	bl	80b88 <__retarget_lock_acquire_recursive>
   80ba4:	4b29      	ldr	r3, [pc, #164]	; (80c4c <__register_exitproc+0xbc>)
   80ba6:	681c      	ldr	r4, [r3, #0]
   80ba8:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   80bac:	2b00      	cmp	r3, #0
   80bae:	d03e      	beq.n	80c2e <__register_exitproc+0x9e>
   80bb0:	685a      	ldr	r2, [r3, #4]
   80bb2:	2a1f      	cmp	r2, #31
   80bb4:	dc1c      	bgt.n	80bf0 <__register_exitproc+0x60>
   80bb6:	f102 0e01 	add.w	lr, r2, #1
   80bba:	b176      	cbz	r6, 80bda <__register_exitproc+0x4a>
   80bbc:	2101      	movs	r1, #1
   80bbe:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   80bc2:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   80bc6:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   80bca:	4091      	lsls	r1, r2
   80bcc:	4308      	orrs	r0, r1
   80bce:	2e02      	cmp	r6, #2
   80bd0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80bd4:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   80bd8:	d023      	beq.n	80c22 <__register_exitproc+0x92>
   80bda:	3202      	adds	r2, #2
   80bdc:	f8c3 e004 	str.w	lr, [r3, #4]
   80be0:	6828      	ldr	r0, [r5, #0]
   80be2:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   80be6:	f7ff ffd1 	bl	80b8c <__retarget_lock_release_recursive>
   80bea:	2000      	movs	r0, #0
   80bec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80bf0:	4b17      	ldr	r3, [pc, #92]	; (80c50 <__register_exitproc+0xc0>)
   80bf2:	b30b      	cbz	r3, 80c38 <__register_exitproc+0xa8>
   80bf4:	f44f 70c8 	mov.w	r0, #400	; 0x190
   80bf8:	f3af 8000 	nop.w
   80bfc:	4603      	mov	r3, r0
   80bfe:	b1d8      	cbz	r0, 80c38 <__register_exitproc+0xa8>
   80c00:	2000      	movs	r0, #0
   80c02:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   80c06:	f04f 0e01 	mov.w	lr, #1
   80c0a:	6058      	str	r0, [r3, #4]
   80c0c:	6019      	str	r1, [r3, #0]
   80c0e:	4602      	mov	r2, r0
   80c10:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80c14:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80c18:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   80c1c:	2e00      	cmp	r6, #0
   80c1e:	d0dc      	beq.n	80bda <__register_exitproc+0x4a>
   80c20:	e7cc      	b.n	80bbc <__register_exitproc+0x2c>
   80c22:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   80c26:	4301      	orrs	r1, r0
   80c28:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   80c2c:	e7d5      	b.n	80bda <__register_exitproc+0x4a>
   80c2e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   80c32:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80c36:	e7bb      	b.n	80bb0 <__register_exitproc+0x20>
   80c38:	6828      	ldr	r0, [r5, #0]
   80c3a:	f7ff ffa7 	bl	80b8c <__retarget_lock_release_recursive>
   80c3e:	f04f 30ff 	mov.w	r0, #4294967295
   80c42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80c46:	bf00      	nop
   80c48:	20000430 	.word	0x20000430
   80c4c:	00080d00 	.word	0x00080d00
   80c50:	00000000 	.word	0x00000000
   80c54:	304e4143 	.word	0x304e4143
   80c58:	73656d20 	.word	0x73656d20
   80c5c:	65676173 	.word	0x65676173
   80c60:	72726120 	.word	0x72726120
   80c64:	64657669 	.word	0x64657669
   80c68:	206e6920 	.word	0x206e6920
   80c6c:	2d6e6f6e 	.word	0x2d6e6f6e
   80c70:	64657375 	.word	0x64657375
   80c74:	69616d20 	.word	0x69616d20
   80c78:	786f626c 	.word	0x786f626c
   80c7c:	00000d0a 	.word	0x00000d0a
   80c80:	203d2058 	.word	0x203d2058
   80c84:	59206425 	.word	0x59206425
   80c88:	25203d20 	.word	0x25203d20
   80c8c:	6a202c64 	.word	0x6a202c64
   80c90:	7562796f 	.word	0x7562796f
   80c94:	6e6f7474 	.word	0x6e6f7474
   80c98:	25203d20 	.word	0x25203d20
   80c9c:	6a202c64 	.word	0x6a202c64
   80ca0:	6964796f 	.word	0x6964796f
   80ca4:	74636572 	.word	0x74636572
   80ca8:	206e6f69 	.word	0x206e6f69
   80cac:	6425203d 	.word	0x6425203d
   80cb0:	6c53202c 	.word	0x6c53202c
   80cb4:	72656469 	.word	0x72656469
   80cb8:	203d2059 	.word	0x203d2059
   80cbc:	0a206425 	.word	0x0a206425
   80cc0:	0000000d 	.word	0x0000000d
   80cc4:	6c756e28 	.word	0x6c756e28
   80cc8:	0000296c 	.word	0x0000296c
   80ccc:	68676968 	.word	0x68676968
   80cd0:	726f6373 	.word	0x726f6373
   80cd4:	73692065 	.word	0x73692065
   80cd8:	6425203a 	.word	0x6425203a
   80cdc:	000d0a20 	.word	0x000d0a20
   80ce0:	3a525245 	.word	0x3a525245
   80ce4:	52415520 	.word	0x52415520
   80ce8:	58522054 	.word	0x58522054
   80cec:	66756220 	.word	0x66756220
   80cf0:	20726566 	.word	0x20726566
   80cf4:	66207369 	.word	0x66207369
   80cf8:	0a6c6c75 	.word	0x0a6c6c75
   80cfc:	0000000d 	.word	0x0000000d

00080d00 <_global_impure_ptr>:
   80d00:	20000008                                ... 

00080d04 <_init>:
   80d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80d06:	bf00      	nop
   80d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80d0a:	bc08      	pop	{r3}
   80d0c:	469e      	mov	lr, r3
   80d0e:	4770      	bx	lr

00080d10 <__init_array_start>:
   80d10:	00080b35 	.word	0x00080b35

00080d14 <__frame_dummy_init_array_entry>:
   80d14:	00080119                                ....

00080d18 <_fini>:
   80d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80d1a:	bf00      	nop
   80d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80d1e:	bc08      	pop	{r3}
   80d20:	469e      	mov	lr, r3
   80d22:	4770      	bx	lr

00080d24 <__fini_array_start>:
   80d24:	000800f5 	.word	0x000800f5
