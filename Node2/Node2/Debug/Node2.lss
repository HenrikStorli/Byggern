
Node2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001594  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  00081594  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000009c  20000434  000819c8  00020434  2**2
                  ALLOC
  3 .stack        00000400  200004d0  00081a64  00020434  2**0
                  ALLOC
  4 .heap         00000200  200008d0  00081e64  00020434  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002045d  2**0
                  CONTENTS, READONLY
  7 .debug_info   00006f15  00000000  00000000  000204b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000163c  00000000  00000000  000273cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000141a  00000000  00000000  00028a07  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000258  00000000  00000000  00029e21  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001f0  00000000  00000000  0002a079  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001333b  00000000  00000000  0002a269  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005348  00000000  00000000  0003d5a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0005540a  00000000  00000000  000428ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000824  00000000  00000000  00097cf8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	d0 08 00 20 75 03 08 00 71 03 08 00 71 03 08 00     ... u...q...q...
   80010:	71 03 08 00 71 03 08 00 71 03 08 00 00 00 00 00     q...q...q.......
	...
   8002c:	71 03 08 00 71 03 08 00 00 00 00 00 71 03 08 00     q...q.......q...
   8003c:	71 03 08 00 71 03 08 00 71 03 08 00 71 03 08 00     q...q...q...q...
   8004c:	71 03 08 00 71 03 08 00 71 03 08 00 71 03 08 00     q...q...q...q...
   8005c:	71 03 08 00 5d 0a 08 00 71 03 08 00 00 00 00 00     q...]...q.......
   8006c:	71 03 08 00 71 03 08 00 71 03 08 00 71 03 08 00     q...q...q...q...
	...
   80084:	71 03 08 00 71 03 08 00 71 03 08 00 71 03 08 00     q...q...q...q...
   80094:	71 03 08 00 71 03 08 00 71 03 08 00 71 03 08 00     q...q...q...q...
   800a4:	00 00 00 00 71 03 08 00 e1 08 08 00 19 09 08 00     ....q...........
   800b4:	71 03 08 00 71 03 08 00 71 03 08 00 71 03 08 00     q...q...q...q...
   800c4:	71 03 08 00 71 03 08 00 71 03 08 00 71 03 08 00     q...q...q...q...
   800d4:	71 03 08 00 71 03 08 00 71 03 08 00 71 03 08 00     q...q...q...q...
   800e4:	71 03 08 00 71 03 08 00 d5 02 08 00 71 03 08 00     q...q.......q...

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000434 	.word	0x20000434
   80110:	00000000 	.word	0x00000000
   80114:	00081594 	.word	0x00081594

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00081594 	.word	0x00081594
   80154:	20000438 	.word	0x20000438
   80158:	00081594 	.word	0x00081594
   8015c:	00000000 	.word	0x00000000

00080160 <can_init>:
 * \retval Success(0) or failure(1)
 */


uint8_t can_init(uint32_t can_br, uint8_t num_tx_mb, uint8_t num_rx_mb)
{
   80160:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	
	//Make sure num_rx_mb and num_tx_mb is valid
	if(num_rx_mb > 8 | num_tx_mb > 8 | num_rx_mb + num_tx_mb > 8)
   80164:	1855      	adds	r5, r2, r1
   80166:	2908      	cmp	r1, #8
   80168:	bf98      	it	ls
   8016a:	2a08      	cmpls	r2, #8
   8016c:	d864      	bhi.n	80238 <can_init+0xd8>
   8016e:	460e      	mov	r6, r1
   80170:	2d08      	cmp	r5, #8
   80172:	dc61      	bgt.n	80238 <can_init+0xd8>


	uint32_t ul_status; 
	
	//Disable can
	CAN0->CAN_MR &= ~CAN_MR_CANEN; 
   80174:	4a32      	ldr	r2, [pc, #200]	; (80240 <can_init+0xe0>)
   80176:	6813      	ldr	r3, [r2, #0]
   80178:	f023 0301 	bic.w	r3, r3, #1
   8017c:	6013      	str	r3, [r2, #0]
	//Clear status register on read
	ul_status = CAN0->CAN_SR; 
   8017e:	6913      	ldr	r3, [r2, #16]
	
	
	// Disable interrupts on CANH and CANL pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80180:	4b30      	ldr	r3, [pc, #192]	; (80244 <can_init+0xe4>)
   80182:	f44f 7440 	mov.w	r4, #768	; 0x300
   80186:	645c      	str	r4, [r3, #68]	; 0x44
	
	//Select CAN0 RX and TX in PIOA
	uint32_t ul_sr = PIOA->PIO_ABSR;
   80188:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	PIOA->PIO_ABSR = ~(PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0) & ul_sr;
   8018a:	f024 0403 	bic.w	r4, r4, #3
   8018e:	671c      	str	r4, [r3, #112]	; 0x70
	
	// Disable the Parallel IO (PIO) of the Rx and Tx pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0;
   80190:	2403      	movs	r4, #3
   80192:	605c      	str	r4, [r3, #4]
	
	// Enable pull up on CANH and CANL pin
	PIOA->PIO_PUER = (PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0);
   80194:	665c      	str	r4, [r3, #100]	; 0x64
	
	
	//Enable Clock for CAN0 in PMC
	PMC->PMC_PCR = PMC_PCR_EN | (0 << PMC_PCR_DIV_Pos) | PMC_PCR_CMD | (ID_CAN0 << PMC_PCR_PID_Pos); // DIV = 1(can clk = MCK/2), CMD = 1 (write), PID = 2B (CAN0)
   80196:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   8019a:	4c2b      	ldr	r4, [pc, #172]	; (80248 <can_init+0xe8>)
   8019c:	f8c3 410c 	str.w	r4, [r3, #268]	; 0x10c
	PMC->PMC_PCER1 |= 1 << (ID_CAN0 - 32);
   801a0:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   801a4:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
   801a8:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	
	//Set baudrate, Phase1, phase2 and propagation delay for can bus. Must match on all nodes!
	CAN0->CAN_BR = can_br; 
   801ac:	6150      	str	r0, [r2, #20]
	/****** Start of mailbox configuration ******/

	uint32_t can_ier = 0;

	/* Configure receive mailboxes */
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   801ae:	42a9      	cmp	r1, r5
   801b0:	dc40      	bgt.n	80234 <can_init+0xd4>
   801b2:	460a      	mov	r2, r1
   801b4:	2400      	movs	r4, #0
	{
		CAN0->CAN_MB[n].CAN_MAM = 0; //Accept all messages
   801b6:	46a1      	mov	r9, r4
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   801b8:	f8df 8084 	ldr.w	r8, [pc, #132]	; 80240 <can_init+0xe0>
   801bc:	f04f 5c00 	mov.w	ip, #536870912	; 0x20000000
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_RX);
   801c0:	f04f 7e80 	mov.w	lr, #16777216	; 0x1000000
		CAN0->CAN_MB[n].CAN_MCR |= CAN_MCR_MTCR;

		can_ier |= 1 << n; //Enable interrupt on rx mailbox
   801c4:	2701      	movs	r7, #1
   801c6:	0153      	lsls	r3, r2, #5
   801c8:	f103 2040 	add.w	r0, r3, #1073758208	; 0x40004000
   801cc:	f500 2030 	add.w	r0, r0, #720896	; 0xb0000
		CAN0->CAN_MB[n].CAN_MAM = 0; //Accept all messages
   801d0:	f8c0 9204 	str.w	r9, [r0, #516]	; 0x204
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   801d4:	4443      	add	r3, r8
   801d6:	f8c3 c208 	str.w	ip, [r3, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_RX);
   801da:	f8c0 e200 	str.w	lr, [r0, #512]	; 0x200
		CAN0->CAN_MB[n].CAN_MCR |= CAN_MCR_MTCR;
   801de:	f8d3 021c 	ldr.w	r0, [r3, #540]	; 0x21c
   801e2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   801e6:	f8c3 021c 	str.w	r0, [r3, #540]	; 0x21c
		can_ier |= 1 << n; //Enable interrupt on rx mailbox
   801ea:	fa07 f302 	lsl.w	r3, r7, r2
   801ee:	431c      	orrs	r4, r3
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   801f0:	3201      	adds	r2, #1
   801f2:	4295      	cmp	r5, r2
   801f4:	dae7      	bge.n	801c6 <can_init+0x66>
	}
	
	/*Configure transmit mailboxes */
	for (int n = 0; n < num_tx_mb; n++)
   801f6:	b181      	cbz	r1, 8021a <can_init+0xba>
   801f8:	2300      	movs	r3, #0
	{
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   801fa:	4911      	ldr	r1, [pc, #68]	; (80240 <can_init+0xe0>)
   801fc:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_TX);
   80200:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   80204:	eb01 1243 	add.w	r2, r1, r3, lsl #5
   80208:	f8c2 5208 	str.w	r5, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_TX);
   8020c:	f103 0210 	add.w	r2, r3, #16
   80210:	0152      	lsls	r2, r2, #5
   80212:	5088      	str	r0, [r1, r2]
	for (int n = 0; n < num_tx_mb; n++)
   80214:	3301      	adds	r3, #1
   80216:	429e      	cmp	r6, r3
   80218:	d1f4      	bne.n	80204 <can_init+0xa4>
	}
	
	/****** End of mailbox configuraion ******/

	//Enable interrupt on receive mailboxes
	CAN0->CAN_IER = can_ier;
   8021a:	4b09      	ldr	r3, [pc, #36]	; (80240 <can_init+0xe0>)
   8021c:	605c      	str	r4, [r3, #4]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   8021e:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80222:	4a0a      	ldr	r2, [pc, #40]	; (8024c <can_init+0xec>)
   80224:	6051      	str	r1, [r2, #4]

	//Enable interrupt in NVIC 
	NVIC_EnableIRQ(ID_CAN0);

	//enable CAN
	CAN0->CAN_MR |= CAN_MR_CANEN;
   80226:	681a      	ldr	r2, [r3, #0]
   80228:	f042 0201 	orr.w	r2, r2, #1
   8022c:	601a      	str	r2, [r3, #0]

	return 0;
   8022e:	2000      	movs	r0, #0
   80230:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t can_ier = 0;
   80234:	2400      	movs	r4, #0
   80236:	e7de      	b.n	801f6 <can_init+0x96>
		return 1; //Too many mailboxes is configured
   80238:	2001      	movs	r0, #1
}
   8023a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8023e:	bf00      	nop
   80240:	400b4000 	.word	0x400b4000
   80244:	400e0e00 	.word	0x400e0e00
   80248:	1000102b 	.word	0x1000102b
   8024c:	e000e100 	.word	0xe000e100

00080250 <can_receive>:
 * \retval Success(0) or failure(1)
 */
uint8_t can_receive(CAN_MESSAGE* can_msg, uint8_t rx_mb_id)
{
	//Check that mailbox is ready
	if(CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MRDY)
   80250:	014b      	lsls	r3, r1, #5
   80252:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   80256:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   8025a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   8025e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   80262:	d033      	beq.n	802cc <can_receive+0x7c>
{
   80264:	b430      	push	{r4, r5}
	{
		//Get data from CAN mailbox
		uint32_t data_low = CAN0->CAN_MB[rx_mb_id].CAN_MDL;
   80266:	014b      	lsls	r3, r1, #5
   80268:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   8026c:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   80270:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
		uint32_t data_high = CAN0->CAN_MB[rx_mb_id].CAN_MDH;
   80274:	f8d3 4218 	ldr.w	r4, [r3, #536]	; 0x218
		
		//Get message ID
		can_msg->id = (uint16_t)((CAN0->CAN_MB[rx_mb_id].CAN_MID & CAN_MID_MIDvA_Msk) >> CAN_MID_MIDvA_Pos);
   80278:	f8d3 5208 	ldr.w	r5, [r3, #520]	; 0x208
   8027c:	f3c5 458a 	ubfx	r5, r5, #18, #11
   80280:	8005      	strh	r5, [r0, #0]
		
		//Get data length
		can_msg->data_length = (uint8_t)((CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos);
   80282:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   80286:	f3c3 4303 	ubfx	r3, r3, #16, #4
   8028a:	7083      	strb	r3, [r0, #2]
		
		//Put data in CAN_MESSAGE object
		for(int i = 0; i < can_msg->data_length;i++)
   8028c:	461d      	mov	r5, r3
   8028e:	b15b      	cbz	r3, 802a8 <can_receive+0x58>
   80290:	3003      	adds	r0, #3
   80292:	2300      	movs	r3, #0
		{
			if(i < 4)
   80294:	2b03      	cmp	r3, #3
			{
				can_msg->data[i] = (char)(data_low & 0xff);
   80296:	bfd9      	ittee	le
   80298:	7002      	strble	r2, [r0, #0]
				data_low = data_low >> 8;
   8029a:	0a12      	lsrle	r2, r2, #8
			}
			else
			{
				can_msg->data[i] = (uint8_t)(data_high & 0xff);
   8029c:	7004      	strbgt	r4, [r0, #0]
				data_high = data_high >> 8;
   8029e:	0a24      	lsrgt	r4, r4, #8
		for(int i = 0; i < can_msg->data_length;i++)
   802a0:	3301      	adds	r3, #1
   802a2:	3001      	adds	r0, #1
   802a4:	42ab      	cmp	r3, r5
   802a6:	d1f5      	bne.n	80294 <can_receive+0x44>
			}
		}
		
		//Reset for new receive
		CAN0->CAN_MB[rx_mb_id].CAN_MMR = CAN_MMR_MOT_MB_RX;
   802a8:	4b09      	ldr	r3, [pc, #36]	; (802d0 <can_receive+0x80>)
   802aa:	f101 0210 	add.w	r2, r1, #16
   802ae:	0152      	lsls	r2, r2, #5
   802b0:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   802b4:	5098      	str	r0, [r3, r2]
		CAN0->CAN_MB[rx_mb_id].CAN_MCR |= CAN_MCR_MTCR;
   802b6:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   802ba:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
   802be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   802c2:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
		return 0;
   802c6:	2000      	movs	r0, #0
	}
	else //Mailbox busy
	{
		return 1;
	}
}
   802c8:	bc30      	pop	{r4, r5}
   802ca:	4770      	bx	lr
		return 1;
   802cc:	2001      	movs	r0, #1
   802ce:	4770      	bx	lr
   802d0:	400b4000 	.word	0x400b4000

000802d4 <CAN0_Handler>:
   802d4:	b510      	push	{r4, lr}
   802d6:	b084      	sub	sp, #16
   802d8:	4b1f      	ldr	r3, [pc, #124]	; (80358 <CAN0_Handler+0x84>)
   802da:	691c      	ldr	r4, [r3, #16]
   802dc:	f014 0f06 	tst.w	r4, #6
   802e0:	d023      	beq.n	8032a <CAN0_Handler+0x56>
   802e2:	f014 0f02 	tst.w	r4, #2
   802e6:	d12d      	bne.n	80344 <CAN0_Handler+0x70>
   802e8:	f014 0f04 	tst.w	r4, #4
   802ec:	d02f      	beq.n	8034e <CAN0_Handler+0x7a>
   802ee:	2102      	movs	r1, #2
   802f0:	a801      	add	r0, sp, #4
   802f2:	4b1a      	ldr	r3, [pc, #104]	; (8035c <CAN0_Handler+0x88>)
   802f4:	4798      	blx	r3
   802f6:	f89d 2006 	ldrb.w	r2, [sp, #6]
   802fa:	b11a      	cbz	r2, 80304 <CAN0_Handler+0x30>
   802fc:	2300      	movs	r3, #0
   802fe:	3301      	adds	r3, #1
   80300:	4293      	cmp	r3, r2
   80302:	d1fc      	bne.n	802fe <CAN0_Handler+0x2a>
   80304:	4b16      	ldr	r3, [pc, #88]	; (80360 <CAN0_Handler+0x8c>)
   80306:	f89d 2007 	ldrb.w	r2, [sp, #7]
   8030a:	3a80      	subs	r2, #128	; 0x80
   8030c:	601a      	str	r2, [r3, #0]
   8030e:	f89d 2008 	ldrb.w	r2, [sp, #8]
   80312:	3a80      	subs	r2, #128	; 0x80
   80314:	605a      	str	r2, [r3, #4]
   80316:	f89d 2009 	ldrb.w	r2, [sp, #9]
   8031a:	f002 0101 	and.w	r1, r2, #1
   8031e:	7219      	strb	r1, [r3, #8]
   80320:	0852      	lsrs	r2, r2, #1
   80322:	725a      	strb	r2, [r3, #9]
   80324:	f89d 200a 	ldrb.w	r2, [sp, #10]
   80328:	60da      	str	r2, [r3, #12]
   8032a:	f014 0f01 	tst.w	r4, #1
   8032e:	d002      	beq.n	80336 <CAN0_Handler+0x62>
   80330:	2201      	movs	r2, #1
   80332:	4b09      	ldr	r3, [pc, #36]	; (80358 <CAN0_Handler+0x84>)
   80334:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80336:	f44f 6200 	mov.w	r2, #2048	; 0x800
   8033a:	4b0a      	ldr	r3, [pc, #40]	; (80364 <CAN0_Handler+0x90>)
   8033c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   80340:	b004      	add	sp, #16
   80342:	bd10      	pop	{r4, pc}
   80344:	2101      	movs	r1, #1
   80346:	a801      	add	r0, sp, #4
   80348:	4b04      	ldr	r3, [pc, #16]	; (8035c <CAN0_Handler+0x88>)
   8034a:	4798      	blx	r3
   8034c:	e7d3      	b.n	802f6 <CAN0_Handler+0x22>
   8034e:	4806      	ldr	r0, [pc, #24]	; (80368 <CAN0_Handler+0x94>)
   80350:	4b06      	ldr	r3, [pc, #24]	; (8036c <CAN0_Handler+0x98>)
   80352:	4798      	blx	r3
   80354:	e7cf      	b.n	802f6 <CAN0_Handler+0x22>
   80356:	bf00      	nop
   80358:	400b4000 	.word	0x400b4000
   8035c:	00080251 	.word	0x00080251
   80360:	20000458 	.word	0x20000458
   80364:	e000e100 	.word	0xe000e100
   80368:	000814d8 	.word	0x000814d8
   8036c:	00080859 	.word	0x00080859

00080370 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80370:	e7fe      	b.n	80370 <Dummy_Handler>
	...

00080374 <Reset_Handler>:
{
   80374:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
   80376:	4b18      	ldr	r3, [pc, #96]	; (803d8 <Reset_Handler+0x64>)
   80378:	4a18      	ldr	r2, [pc, #96]	; (803dc <Reset_Handler+0x68>)
   8037a:	429a      	cmp	r2, r3
   8037c:	d010      	beq.n	803a0 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
   8037e:	4b18      	ldr	r3, [pc, #96]	; (803e0 <Reset_Handler+0x6c>)
   80380:	4a15      	ldr	r2, [pc, #84]	; (803d8 <Reset_Handler+0x64>)
   80382:	429a      	cmp	r2, r3
   80384:	d20c      	bcs.n	803a0 <Reset_Handler+0x2c>
   80386:	3b01      	subs	r3, #1
   80388:	1a9b      	subs	r3, r3, r2
   8038a:	f023 0303 	bic.w	r3, r3, #3
   8038e:	3304      	adds	r3, #4
   80390:	4413      	add	r3, r2
   80392:	4912      	ldr	r1, [pc, #72]	; (803dc <Reset_Handler+0x68>)
                        *pDest++ = *pSrc++;
   80394:	f851 0b04 	ldr.w	r0, [r1], #4
   80398:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
   8039c:	429a      	cmp	r2, r3
   8039e:	d1f9      	bne.n	80394 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
   803a0:	4b10      	ldr	r3, [pc, #64]	; (803e4 <Reset_Handler+0x70>)
   803a2:	4a11      	ldr	r2, [pc, #68]	; (803e8 <Reset_Handler+0x74>)
   803a4:	429a      	cmp	r2, r3
   803a6:	d20a      	bcs.n	803be <Reset_Handler+0x4a>
   803a8:	3b01      	subs	r3, #1
   803aa:	1a9b      	subs	r3, r3, r2
   803ac:	f023 0303 	bic.w	r3, r3, #3
   803b0:	3304      	adds	r3, #4
   803b2:	4413      	add	r3, r2
                *pDest++ = 0;
   803b4:	2100      	movs	r1, #0
   803b6:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
   803ba:	4293      	cmp	r3, r2
   803bc:	d1fb      	bne.n	803b6 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   803be:	4b0b      	ldr	r3, [pc, #44]	; (803ec <Reset_Handler+0x78>)
   803c0:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   803c4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   803c8:	4a09      	ldr	r2, [pc, #36]	; (803f0 <Reset_Handler+0x7c>)
   803ca:	6093      	str	r3, [r2, #8]
        __libc_init_array();
   803cc:	4b09      	ldr	r3, [pc, #36]	; (803f4 <Reset_Handler+0x80>)
   803ce:	4798      	blx	r3
        main();
   803d0:	4b09      	ldr	r3, [pc, #36]	; (803f8 <Reset_Handler+0x84>)
   803d2:	4798      	blx	r3
   803d4:	e7fe      	b.n	803d4 <Reset_Handler+0x60>
   803d6:	bf00      	nop
   803d8:	20000000 	.word	0x20000000
   803dc:	00081594 	.word	0x00081594
   803e0:	20000434 	.word	0x20000434
   803e4:	200004d0 	.word	0x200004d0
   803e8:	20000434 	.word	0x20000434
   803ec:	00080000 	.word	0x00080000
   803f0:	e000ed00 	.word	0xe000ed00
   803f4:	00081369 	.word	0x00081369
   803f8:	000804cd 	.word	0x000804cd

000803fc <SystemInit>:
 * Initialize the System and update the SystemFrequency variable.
 */
void SystemInit( void )
{
  /* Set FWS according to SYS_BOARD_MCKR configuration */
  EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   803fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
   80400:	4a20      	ldr	r2, [pc, #128]	; (80484 <SystemInit+0x88>)
   80402:	6013      	str	r3, [r2, #0]
  EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   80404:	f502 7200 	add.w	r2, r2, #512	; 0x200
   80408:	6013      	str	r3, [r2, #0]

  /* Initialize main oscillator */
  if ( !(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) )
   8040a:	4b1f      	ldr	r3, [pc, #124]	; (80488 <SystemInit+0x8c>)
   8040c:	6a1b      	ldr	r3, [r3, #32]
   8040e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80412:	d107      	bne.n	80424 <SystemInit+0x28>
  {
    PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
   80414:	4a1d      	ldr	r2, [pc, #116]	; (8048c <SystemInit+0x90>)
   80416:	4b1c      	ldr	r3, [pc, #112]	; (80488 <SystemInit+0x8c>)
   80418:	621a      	str	r2, [r3, #32]
    while ( !(PMC->PMC_SR & PMC_SR_MOSCXTS) )
   8041a:	461a      	mov	r2, r3
   8041c:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8041e:	f013 0f01 	tst.w	r3, #1
   80422:	d0fb      	beq.n	8041c <SystemInit+0x20>
    {
    }
  }

  /* Switch to 3-20MHz Xtal oscillator */
  PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;
   80424:	4a1a      	ldr	r2, [pc, #104]	; (80490 <SystemInit+0x94>)
   80426:	4b18      	ldr	r3, [pc, #96]	; (80488 <SystemInit+0x8c>)
   80428:	621a      	str	r2, [r3, #32]

  while ( !(PMC->PMC_SR & PMC_SR_MOSCSELS) )
   8042a:	461a      	mov	r2, r3
   8042c:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8042e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   80432:	d0fb      	beq.n	8042c <SystemInit+0x30>
  {
  }
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   80434:	4a14      	ldr	r2, [pc, #80]	; (80488 <SystemInit+0x8c>)
   80436:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80438:	f023 0303 	bic.w	r3, r3, #3
   8043c:	f043 0301 	orr.w	r3, r3, #1
   80440:	6313      	str	r3, [r2, #48]	; 0x30
  while (!(PMC->PMC_SR & PMC_SR_MCKRDY))
   80442:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80444:	f013 0f08 	tst.w	r3, #8
   80448:	d0fb      	beq.n	80442 <SystemInit+0x46>
  {
  }

  /* Initialize PLLA */
  PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
   8044a:	4a12      	ldr	r2, [pc, #72]	; (80494 <SystemInit+0x98>)
   8044c:	4b0e      	ldr	r3, [pc, #56]	; (80488 <SystemInit+0x8c>)
   8044e:	629a      	str	r2, [r3, #40]	; 0x28
  while ( !(PMC->PMC_SR & PMC_SR_LOCKA) )
   80450:	461a      	mov	r2, r3
   80452:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80454:	f013 0f02 	tst.w	r3, #2
   80458:	d0fb      	beq.n	80452 <SystemInit+0x56>
  {
  }

  /* Switch to main clock */
  PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   8045a:	2211      	movs	r2, #17
   8045c:	4b0a      	ldr	r3, [pc, #40]	; (80488 <SystemInit+0x8c>)
   8045e:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   80460:	461a      	mov	r2, r3
   80462:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80464:	f013 0f08 	tst.w	r3, #8
   80468:	d0fb      	beq.n	80462 <SystemInit+0x66>
  {
  }

  /* Switch to PLLA */
  PMC->PMC_MCKR = SYS_BOARD_MCKR;
   8046a:	2212      	movs	r2, #18
   8046c:	4b06      	ldr	r3, [pc, #24]	; (80488 <SystemInit+0x8c>)
   8046e:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   80470:	461a      	mov	r2, r3
   80472:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80474:	f013 0f08 	tst.w	r3, #8
   80478:	d0fb      	beq.n	80472 <SystemInit+0x76>
  {
  }

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
   8047a:	4a07      	ldr	r2, [pc, #28]	; (80498 <SystemInit+0x9c>)
   8047c:	4b07      	ldr	r3, [pc, #28]	; (8049c <SystemInit+0xa0>)
   8047e:	601a      	str	r2, [r3, #0]
   80480:	4770      	bx	lr
   80482:	bf00      	nop
   80484:	400e0a00 	.word	0x400e0a00
   80488:	400e0600 	.word	0x400e0600
   8048c:	00370809 	.word	0x00370809
   80490:	01370809 	.word	0x01370809
   80494:	200d3f01 	.word	0x200d3f01
   80498:	0501bd00 	.word	0x0501bd00
   8049c:	20000000 	.word	0x20000000

000804a0 <IR_init>:
#include "ADC.h"
#include "Timer.h"
#include "printf-stdarg.h"

void IR_init(void){ /* PA16 is A0 https://www.arduino.cc/en/Hacking/PinMappingSAM3X */
    REG_PMC_PCER1 |= (1 << 5);  // enable ADC on ID37 could write ID_ADC?
   804a0:	4a09      	ldr	r2, [pc, #36]	; (804c8 <IR_init+0x28>)
   804a2:	6813      	ldr	r3, [r2, #0]
   804a4:	f043 0320 	orr.w	r3, r3, #32
   804a8:	6013      	str	r3, [r2, #0]
   // REG_PIOA_PDR |= (1 << 16); // Disable as gpio pin 
    REG_ADC_MR |= (1 << 7); // ADC in free run mode
   804aa:	f5a2 3201 	sub.w	r2, r2, #132096	; 0x20400
   804ae:	f5a2 723f 	sub.w	r2, r2, #764	; 0x2fc
   804b2:	6813      	ldr	r3, [r2, #0]
   804b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   804b8:	6013      	str	r3, [r2, #0]
    // PIOA->PIO_PDR|= PIO_PDR_P7;
    REG_ADC_CHER |= ADC_CHER_CH7; //enable as adc channel on AD7 extra func     
   804ba:	320c      	adds	r2, #12
   804bc:	6813      	ldr	r3, [r2, #0]
   804be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   804c2:	6013      	str	r3, [r2, #0]
   804c4:	4770      	bx	lr
   804c6:	bf00      	nop
   804c8:	400e0700 	.word	0x400e0700

000804cc <main>:
#include "Timer.h"

#define F_CPU 84E6 //84Mhz

int main(void)
{
   804cc:	b510      	push	{r4, lr}
    /* Initialize the SAM system */
    SystemInit();
   804ce:	4b0f      	ldr	r3, [pc, #60]	; (8050c <main+0x40>)
   804d0:	4798      	blx	r3
    configure_uart();
   804d2:	4b0f      	ldr	r3, [pc, #60]	; (80510 <main+0x44>)
   804d4:	4798      	blx	r3
	servo_pwm_init();
   804d6:	4b0f      	ldr	r3, [pc, #60]	; (80514 <main+0x48>)
   804d8:	4798      	blx	r3
	motor_init_DAC();   
   804da:	4b0f      	ldr	r3, [pc, #60]	; (80518 <main+0x4c>)
   804dc:	4798      	blx	r3
    IR_init();
   804de:	4b0f      	ldr	r3, [pc, #60]	; (8051c <main+0x50>)
   804e0:	4798      	blx	r3
    timer_init();
   804e2:	4b0f      	ldr	r3, [pc, #60]	; (80520 <main+0x54>)
   804e4:	4798      	blx	r3
    
    //init can config     
    uint32_t can_msk = 0x00143555;
    uint8_t can_status = can_init(can_msk, 1, 1);
   804e6:	2201      	movs	r2, #1
   804e8:	4611      	mov	r1, r2
   804ea:	480e      	ldr	r0, [pc, #56]	; (80524 <main+0x58>)
   804ec:	4b0e      	ldr	r3, [pc, #56]	; (80528 <main+0x5c>)
   804ee:	4798      	blx	r3
    
    WDT->WDT_MR = WDT_MR_WDDIS; // Dissable watchdog      
   804f0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   804f4:	4b0d      	ldr	r3, [pc, #52]	; (8052c <main+0x60>)
   804f6:	605a      	str	r2, [r3, #4]
	
    //SetTimer(1);  
    //motor_enable();
    //GAME_OVER();
    printf("start delay\n\r");
   804f8:	480d      	ldr	r0, [pc, #52]	; (80530 <main+0x64>)
   804fa:	4c0e      	ldr	r4, [pc, #56]	; (80534 <main+0x68>)
   804fc:	47a0      	blx	r4
    delay_2us(168);
   804fe:	20a8      	movs	r0, #168	; 0xa8
   80500:	4b0d      	ldr	r3, [pc, #52]	; (80538 <main+0x6c>)
   80502:	4798      	blx	r3
    printf("end delay\n\r");
   80504:	480d      	ldr	r0, [pc, #52]	; (8053c <main+0x70>)
   80506:	47a0      	blx	r4
   80508:	e7fe      	b.n	80508 <main+0x3c>
   8050a:	bf00      	nop
   8050c:	000803fd 	.word	0x000803fd
   80510:	000809d1 	.word	0x000809d1
   80514:	0008098d 	.word	0x0008098d
   80518:	00080541 	.word	0x00080541
   8051c:	000804a1 	.word	0x000804a1
   80520:	0008087d 	.word	0x0008087d
   80524:	00143555 	.word	0x00143555
   80528:	00080161 	.word	0x00080161
   8052c:	400e1a50 	.word	0x400e1a50
   80530:	00081504 	.word	0x00081504
   80534:	00080859 	.word	0x00080859
   80538:	00080931 	.word	0x00080931
   8053c:	00081514 	.word	0x00081514

00080540 <motor_init_DAC>:
#include "motor_interface.h"


void motor_init_DAC(){
	// Set clock for DACC peripheral
	REG_PMC_PCER1 |= (1<<6);
   80540:	4a0f      	ldr	r2, [pc, #60]	; (80580 <motor_init_DAC+0x40>)
   80542:	6813      	ldr	r3, [r2, #0]
   80544:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   80548:	6013      	str	r3, [r2, #0]
	
	//Set DACC MODE REGISTER, free running mode
	REG_DACC_MR = 0x05012000; //0x050012000
   8054a:	4a0e      	ldr	r2, [pc, #56]	; (80584 <motor_init_DAC+0x44>)
   8054c:	4b0e      	ldr	r3, [pc, #56]	; (80588 <motor_init_DAC+0x48>)
   8054e:	601a      	str	r2, [r3, #0]
	
	//Set DAC channel to channel 1
	REG_DACC_CHER = 0b10;
   80550:	2202      	movs	r2, #2
   80552:	330c      	adds	r3, #12
   80554:	601a      	str	r2, [r3, #0]
	
	//Enable output on port D's pins: 0, 1, 2, 9, 10
	REG_PIOD_PER |= 0b11000000111; //Enable IO 
   80556:	f503 33c9 	add.w	r3, r3, #102912	; 0x19200
   8055a:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
   8055e:	681a      	ldr	r2, [r3, #0]
   80560:	f240 6107 	movw	r1, #1543	; 0x607
   80564:	430a      	orrs	r2, r1
   80566:	601a      	str	r2, [r3, #0]
	REG_PIOD_OER |= 0b11000000111; //Enable output
   80568:	4a08      	ldr	r2, [pc, #32]	; (8058c <motor_init_DAC+0x4c>)
   8056a:	6813      	ldr	r3, [r2, #0]
   8056c:	430b      	orrs	r3, r1
   8056e:	6013      	str	r3, [r2, #0]
	
	//Enable input on port C's pins: 0-7
	REG_PIOC_PER |= 0b11111111;
   80570:	f5a2 7204 	sub.w	r2, r2, #528	; 0x210
   80574:	6813      	ldr	r3, [r2, #0]
   80576:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   8057a:	6013      	str	r3, [r2, #0]
   8057c:	4770      	bx	lr
   8057e:	bf00      	nop
   80580:	400e0700 	.word	0x400e0700
   80584:	05012000 	.word	0x05012000
   80588:	400c8004 	.word	0x400c8004
   8058c:	400e1410 	.word	0x400e1410

00080590 <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
   80590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80594:	460d      	mov	r5, r1
	register int pc = 0, padchar = ' ';

	if (width > 0) {
   80596:	1e16      	subs	r6, r2, #0
   80598:	dd48      	ble.n	8062c <prints+0x9c>
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
   8059a:	780a      	ldrb	r2, [r1, #0]
   8059c:	2a00      	cmp	r2, #0
   8059e:	d035      	beq.n	8060c <prints+0x7c>
   805a0:	460a      	mov	r2, r1
   805a2:	2400      	movs	r4, #0
   805a4:	3401      	adds	r4, #1
   805a6:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   805aa:	2900      	cmp	r1, #0
   805ac:	d1fa      	bne.n	805a4 <prints+0x14>
		if (len >= width) width = 0;
   805ae:	42a6      	cmp	r6, r4
   805b0:	dc2d      	bgt.n	8060e <prints+0x7e>
   805b2:	2400      	movs	r4, #0
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
   805b4:	f003 0202 	and.w	r2, r3, #2
   805b8:	2a00      	cmp	r2, #0
   805ba:	bf0c      	ite	eq
   805bc:	f04f 0820 	moveq.w	r8, #32
   805c0:	f04f 0830 	movne.w	r8, #48	; 0x30
	}
	if (!(pad & PAD_RIGHT)) {
   805c4:	f013 0301 	ands.w	r3, r3, #1
   805c8:	d123      	bne.n	80612 <prints+0x82>
		for ( ; width > 0; --width) {
   805ca:	2c00      	cmp	r4, #0
   805cc:	dd28      	ble.n	80620 <prints+0x90>
   805ce:	4626      	mov	r6, r4
	(void) uart_putchar(c);  //Send characters to uart
   805d0:	fa5f f988 	uxtb.w	r9, r8
   805d4:	4f18      	ldr	r7, [pc, #96]	; (80638 <prints+0xa8>)
   805d6:	4648      	mov	r0, r9
   805d8:	47b8      	blx	r7
		for ( ; width > 0; --width) {
   805da:	3e01      	subs	r6, #1
   805dc:	d1fb      	bne.n	805d6 <prints+0x46>
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
   805de:	7828      	ldrb	r0, [r5, #0]
   805e0:	b188      	cbz	r0, 80606 <prints+0x76>
	(void) uart_putchar(c);  //Send characters to uart
   805e2:	4f15      	ldr	r7, [pc, #84]	; (80638 <prints+0xa8>)
   805e4:	47b8      	blx	r7
		printchar (out, *string);
		++pc;
   805e6:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
   805e8:	f815 0f01 	ldrb.w	r0, [r5, #1]!
   805ec:	2800      	cmp	r0, #0
   805ee:	d1f9      	bne.n	805e4 <prints+0x54>
	}
	for ( ; width > 0; --width) {
   805f0:	2e00      	cmp	r6, #0
   805f2:	dd08      	ble.n	80606 <prints+0x76>
   805f4:	4635      	mov	r5, r6
	(void) uart_putchar(c);  //Send characters to uart
   805f6:	fa5f f888 	uxtb.w	r8, r8
   805fa:	4f0f      	ldr	r7, [pc, #60]	; (80638 <prints+0xa8>)
   805fc:	4640      	mov	r0, r8
   805fe:	47b8      	blx	r7
	for ( ; width > 0; --width) {
   80600:	3d01      	subs	r5, #1
   80602:	d1fb      	bne.n	805fc <prints+0x6c>
   80604:	4434      	add	r4, r6
		printchar (out, padchar);
		++pc;
	}

	return pc;
}
   80606:	4620      	mov	r0, r4
   80608:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		for (ptr = string; *ptr; ++ptr) ++len;
   8060c:	2400      	movs	r4, #0
		else width -= len;
   8060e:	1b34      	subs	r4, r6, r4
   80610:	e7d0      	b.n	805b4 <prints+0x24>
   80612:	4626      	mov	r6, r4
	for ( ; *string ; ++string) {
   80614:	7828      	ldrb	r0, [r5, #0]
   80616:	b108      	cbz	r0, 8061c <prints+0x8c>
	register int pc = 0, padchar = ' ';
   80618:	2400      	movs	r4, #0
   8061a:	e7e2      	b.n	805e2 <prints+0x52>
   8061c:	2400      	movs	r4, #0
   8061e:	e7e7      	b.n	805f0 <prints+0x60>
		for ( ; width > 0; --width) {
   80620:	4626      	mov	r6, r4
   80622:	461c      	mov	r4, r3
   80624:	e7db      	b.n	805de <prints+0x4e>
	register int pc = 0, padchar = ' ';
   80626:	f04f 0820 	mov.w	r8, #32
   8062a:	e7d8      	b.n	805de <prints+0x4e>
	if (!(pad & PAD_RIGHT)) {
   8062c:	f013 0401 	ands.w	r4, r3, #1
   80630:	d0f9      	beq.n	80626 <prints+0x96>
	register int pc = 0, padchar = ' ';
   80632:	f04f 0820 	mov.w	r8, #32
   80636:	e7ed      	b.n	80614 <prints+0x84>
   80638:	00080a39 	.word	0x00080a39

0008063c <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
   8063c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8063e:	b085      	sub	sp, #20
   80640:	4607      	mov	r7, r0
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;

	if (i == 0) {
   80642:	b381      	cbz	r1, 806a6 <printi+0x6a>
   80644:	460c      	mov	r4, r1
		print_buf[0] = '0';
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
	}

	if (sg && b == 10 && i < 0) {
   80646:	b10b      	cbz	r3, 8064c <printi+0x10>
   80648:	2a0a      	cmp	r2, #10
   8064a:	d038      	beq.n	806be <printi+0x82>
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
   8064c:	2300      	movs	r3, #0
   8064e:	f88d 300f 	strb.w	r3, [sp, #15]

	while (u) {
   80652:	2600      	movs	r6, #0
   80654:	2900      	cmp	r1, #0
   80656:	d046      	beq.n	806e6 <printi+0xaa>
   80658:	f10d 050f 	add.w	r5, sp, #15
		t = u % b;
		if( t >= 10 )
			t += letbase - '0' - 10;
   8065c:	990c      	ldr	r1, [sp, #48]	; 0x30
   8065e:	393a      	subs	r1, #58	; 0x3a
		t = u % b;
   80660:	fbb4 f3f2 	udiv	r3, r4, r2
   80664:	fb02 4313 	mls	r3, r2, r3, r4
		if( t >= 10 )
   80668:	2b09      	cmp	r3, #9
			t += letbase - '0' - 10;
   8066a:	bfc8      	it	gt
   8066c:	185b      	addgt	r3, r3, r1
		*--s = t + '0';
   8066e:	3330      	adds	r3, #48	; 0x30
   80670:	f805 3d01 	strb.w	r3, [r5, #-1]!
		u /= b;
   80674:	fbb4 f4f2 	udiv	r4, r4, r2
	while (u) {
   80678:	2c00      	cmp	r4, #0
   8067a:	d1f1      	bne.n	80660 <printi+0x24>
	}

	if (neg) {
   8067c:	b156      	cbz	r6, 80694 <printi+0x58>
		if( width && (pad & PAD_ZERO) ) {
   8067e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80680:	b11b      	cbz	r3, 8068a <printi+0x4e>
   80682:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80684:	f013 0f02 	tst.w	r3, #2
   80688:	d125      	bne.n	806d6 <printi+0x9a>
			printchar (out, '-');
			++pc;
			--width;
		}
		else {
			*--s = '-';
   8068a:	232d      	movs	r3, #45	; 0x2d
   8068c:	f805 3c01 	strb.w	r3, [r5, #-1]
   80690:	3d01      	subs	r5, #1
	register int t, neg = 0, pc = 0;
   80692:	2600      	movs	r6, #0
		}
	}

	return pc + prints (out, s, width, pad);
   80694:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80696:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80698:	4629      	mov	r1, r5
   8069a:	4638      	mov	r0, r7
   8069c:	4c14      	ldr	r4, [pc, #80]	; (806f0 <printi+0xb4>)
   8069e:	47a0      	blx	r4
   806a0:	4430      	add	r0, r6
}
   806a2:	b005      	add	sp, #20
   806a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		print_buf[0] = '0';
   806a6:	2330      	movs	r3, #48	; 0x30
   806a8:	f88d 3004 	strb.w	r3, [sp, #4]
		print_buf[1] = '\0';
   806ac:	2300      	movs	r3, #0
   806ae:	f88d 3005 	strb.w	r3, [sp, #5]
		return prints (out, print_buf, width, pad);
   806b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   806b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   806b6:	a901      	add	r1, sp, #4
   806b8:	4c0d      	ldr	r4, [pc, #52]	; (806f0 <printi+0xb4>)
   806ba:	47a0      	blx	r4
   806bc:	e7f1      	b.n	806a2 <printi+0x66>
	if (sg && b == 10 && i < 0) {
   806be:	2900      	cmp	r1, #0
   806c0:	dac4      	bge.n	8064c <printi+0x10>
		u = -i;
   806c2:	424c      	negs	r4, r1
	*s = '\0';
   806c4:	2300      	movs	r3, #0
   806c6:	f88d 300f 	strb.w	r3, [sp, #15]
	s = print_buf + PRINT_BUF_LEN-1;
   806ca:	f10d 050f 	add.w	r5, sp, #15
	while (u) {
   806ce:	2c00      	cmp	r4, #0
   806d0:	d0d5      	beq.n	8067e <printi+0x42>
		neg = 1;
   806d2:	2601      	movs	r6, #1
   806d4:	e7c0      	b.n	80658 <printi+0x1c>
	(void) uart_putchar(c);  //Send characters to uart
   806d6:	202d      	movs	r0, #45	; 0x2d
   806d8:	4b06      	ldr	r3, [pc, #24]	; (806f4 <printi+0xb8>)
   806da:	4798      	blx	r3
			--width;
   806dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   806de:	3b01      	subs	r3, #1
   806e0:	930a      	str	r3, [sp, #40]	; 0x28
			++pc;
   806e2:	2601      	movs	r6, #1
			--width;
   806e4:	e7d6      	b.n	80694 <printi+0x58>
	register int t, neg = 0, pc = 0;
   806e6:	461e      	mov	r6, r3
	s = print_buf + PRINT_BUF_LEN-1;
   806e8:	f10d 050f 	add.w	r5, sp, #15
   806ec:	e7d2      	b.n	80694 <printi+0x58>
   806ee:	bf00      	nop
   806f0:	00080591 	.word	0x00080591
   806f4:	00080a39 	.word	0x00080a39

000806f8 <print>:

static int print( char **out, const char *format, va_list args )
{
   806f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   806fc:	b087      	sub	sp, #28
   806fe:	4680      	mov	r8, r0
	register int width, pad;
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
   80700:	780b      	ldrb	r3, [r1, #0]
   80702:	2b00      	cmp	r3, #0
   80704:	f000 8094 	beq.w	80830 <print+0x138>
   80708:	468b      	mov	fp, r1
   8070a:	4617      	mov	r7, r2
   8070c:	2500      	movs	r5, #0
	(void) uart_putchar(c);  //Send characters to uart
   8070e:	4e4e      	ldr	r6, [pc, #312]	; (80848 <print+0x150>)
			}
			if( *format == 'c' ) {
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
				scr[1] = '\0';
				pc += prints (out, scr, width, pad);
   80710:	f8df a13c 	ldr.w	sl, [pc, #316]	; 80850 <print+0x158>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   80714:	f8df 913c 	ldr.w	r9, [pc, #316]	; 80854 <print+0x15c>
   80718:	e046      	b.n	807a8 <print+0xb0>
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   8071a:	2200      	movs	r2, #0
   8071c:	e070      	b.n	80800 <print+0x108>
				register char *s = (char *)va_arg( args, int );
   8071e:	6839      	ldr	r1, [r7, #0]
   80720:	3704      	adds	r7, #4
				pc += prints (out, s?s:"(null)", width, pad);
   80722:	484a      	ldr	r0, [pc, #296]	; (8084c <print+0x154>)
   80724:	2900      	cmp	r1, #0
   80726:	bf08      	it	eq
   80728:	4601      	moveq	r1, r0
   8072a:	4640      	mov	r0, r8
   8072c:	47d0      	blx	sl
   8072e:	4405      	add	r5, r0
				continue;
   80730:	e035      	b.n	8079e <print+0xa6>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
   80732:	6839      	ldr	r1, [r7, #0]
   80734:	3704      	adds	r7, #4
   80736:	2061      	movs	r0, #97	; 0x61
   80738:	9002      	str	r0, [sp, #8]
   8073a:	9301      	str	r3, [sp, #4]
   8073c:	9200      	str	r2, [sp, #0]
   8073e:	2301      	movs	r3, #1
   80740:	220a      	movs	r2, #10
   80742:	4640      	mov	r0, r8
   80744:	47c8      	blx	r9
   80746:	4405      	add	r5, r0
				continue;
   80748:	e029      	b.n	8079e <print+0xa6>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
   8074a:	6839      	ldr	r1, [r7, #0]
   8074c:	3704      	adds	r7, #4
   8074e:	2061      	movs	r0, #97	; 0x61
   80750:	9002      	str	r0, [sp, #8]
   80752:	9301      	str	r3, [sp, #4]
   80754:	9200      	str	r2, [sp, #0]
   80756:	2300      	movs	r3, #0
   80758:	2210      	movs	r2, #16
   8075a:	4640      	mov	r0, r8
   8075c:	47c8      	blx	r9
   8075e:	4405      	add	r5, r0
				continue;
   80760:	e01d      	b.n	8079e <print+0xa6>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
   80762:	6839      	ldr	r1, [r7, #0]
   80764:	3704      	adds	r7, #4
   80766:	2041      	movs	r0, #65	; 0x41
   80768:	9002      	str	r0, [sp, #8]
   8076a:	9301      	str	r3, [sp, #4]
   8076c:	9200      	str	r2, [sp, #0]
   8076e:	2300      	movs	r3, #0
   80770:	2210      	movs	r2, #16
   80772:	4640      	mov	r0, r8
   80774:	47c8      	blx	r9
   80776:	4405      	add	r5, r0
				continue;
   80778:	e011      	b.n	8079e <print+0xa6>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   8077a:	6839      	ldr	r1, [r7, #0]
   8077c:	3704      	adds	r7, #4
   8077e:	2061      	movs	r0, #97	; 0x61
   80780:	9002      	str	r0, [sp, #8]
   80782:	9301      	str	r3, [sp, #4]
   80784:	9200      	str	r2, [sp, #0]
   80786:	2300      	movs	r3, #0
   80788:	220a      	movs	r2, #10
   8078a:	4640      	mov	r0, r8
   8078c:	47c8      	blx	r9
   8078e:	4405      	add	r5, r0
				continue;
   80790:	e005      	b.n	8079e <print+0xa6>
			++format;
   80792:	46a3      	mov	fp, r4
	(void) uart_putchar(c);  //Send characters to uart
   80794:	f89b 0000 	ldrb.w	r0, [fp]
   80798:	47b0      	blx	r6
			}
		}
		else {
		out:
			printchar (out, *format);
			++pc;
   8079a:	3501      	adds	r5, #1
   8079c:	465c      	mov	r4, fp
	for (; *format != 0; ++format) {
   8079e:	f104 0b01 	add.w	fp, r4, #1
   807a2:	7863      	ldrb	r3, [r4, #1]
   807a4:	2b00      	cmp	r3, #0
   807a6:	d044      	beq.n	80832 <print+0x13a>
		if (*format == '%') {
   807a8:	2b25      	cmp	r3, #37	; 0x25
   807aa:	d1f3      	bne.n	80794 <print+0x9c>
			++format;
   807ac:	f10b 0401 	add.w	r4, fp, #1
			if (*format == '\0') break;
   807b0:	f89b 3001 	ldrb.w	r3, [fp, #1]
   807b4:	2b00      	cmp	r3, #0
   807b6:	d03c      	beq.n	80832 <print+0x13a>
			if (*format == '%') goto out;
   807b8:	2b25      	cmp	r3, #37	; 0x25
   807ba:	d0ea      	beq.n	80792 <print+0x9a>
			if (*format == '-') {
   807bc:	2b2d      	cmp	r3, #45	; 0x2d
				++format;
   807be:	bf06      	itte	eq
   807c0:	f10b 0402 	addeq.w	r4, fp, #2
				pad = PAD_RIGHT;
   807c4:	2301      	moveq	r3, #1
			width = pad = 0;
   807c6:	2300      	movne	r3, #0
			while (*format == '0') {
   807c8:	7822      	ldrb	r2, [r4, #0]
   807ca:	2a30      	cmp	r2, #48	; 0x30
   807cc:	d105      	bne.n	807da <print+0xe2>
				pad |= PAD_ZERO;
   807ce:	f043 0302 	orr.w	r3, r3, #2
			while (*format == '0') {
   807d2:	f814 2f01 	ldrb.w	r2, [r4, #1]!
   807d6:	2a30      	cmp	r2, #48	; 0x30
   807d8:	d0f9      	beq.n	807ce <print+0xd6>
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   807da:	7821      	ldrb	r1, [r4, #0]
   807dc:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   807e0:	b2d2      	uxtb	r2, r2
   807e2:	2a09      	cmp	r2, #9
   807e4:	d899      	bhi.n	8071a <print+0x22>
   807e6:	2200      	movs	r2, #0
				width *= 10;
   807e8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
				width += *format - '0';
   807ec:	3930      	subs	r1, #48	; 0x30
   807ee:	eb01 0242 	add.w	r2, r1, r2, lsl #1
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   807f2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   807f6:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   807fa:	b2c0      	uxtb	r0, r0
   807fc:	2809      	cmp	r0, #9
   807fe:	d9f3      	bls.n	807e8 <print+0xf0>
			if( *format == 's' ) {
   80800:	2973      	cmp	r1, #115	; 0x73
   80802:	d08c      	beq.n	8071e <print+0x26>
			if( *format == 'd' ) {
   80804:	2964      	cmp	r1, #100	; 0x64
   80806:	d094      	beq.n	80732 <print+0x3a>
			if( *format == 'x' ) {
   80808:	2978      	cmp	r1, #120	; 0x78
   8080a:	d09e      	beq.n	8074a <print+0x52>
			if( *format == 'X' ) {
   8080c:	2958      	cmp	r1, #88	; 0x58
   8080e:	d0a8      	beq.n	80762 <print+0x6a>
			if( *format == 'u' ) {
   80810:	2975      	cmp	r1, #117	; 0x75
   80812:	d0b2      	beq.n	8077a <print+0x82>
			if( *format == 'c' ) {
   80814:	2963      	cmp	r1, #99	; 0x63
   80816:	d1c2      	bne.n	8079e <print+0xa6>
				scr[0] = (char)va_arg( args, int );
   80818:	6839      	ldr	r1, [r7, #0]
   8081a:	3704      	adds	r7, #4
   8081c:	f88d 1014 	strb.w	r1, [sp, #20]
				scr[1] = '\0';
   80820:	2100      	movs	r1, #0
   80822:	f88d 1015 	strb.w	r1, [sp, #21]
				pc += prints (out, scr, width, pad);
   80826:	a905      	add	r1, sp, #20
   80828:	4640      	mov	r0, r8
   8082a:	47d0      	blx	sl
   8082c:	4405      	add	r5, r0
				continue;
   8082e:	e7b6      	b.n	8079e <print+0xa6>
	register int pc = 0;
   80830:	2500      	movs	r5, #0
		}
	}
	if (out) **out = '\0';
   80832:	f1b8 0f00 	cmp.w	r8, #0
   80836:	d003      	beq.n	80840 <print+0x148>
   80838:	f8d8 3000 	ldr.w	r3, [r8]
   8083c:	2200      	movs	r2, #0
   8083e:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
}
   80840:	4628      	mov	r0, r5
   80842:	b007      	add	sp, #28
   80844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80848:	00080a39 	.word	0x00080a39
   8084c:	00081520 	.word	0x00081520
   80850:	00080591 	.word	0x00080591
   80854:	0008063d 	.word	0x0008063d

00080858 <printf>:

int printf(const char *format, ...)
{
   80858:	b40f      	push	{r0, r1, r2, r3}
   8085a:	b500      	push	{lr}
   8085c:	b083      	sub	sp, #12
   8085e:	aa04      	add	r2, sp, #16
   80860:	f852 1b04 	ldr.w	r1, [r2], #4
        va_list args;
        
        va_start( args, format );
   80864:	9201      	str	r2, [sp, #4]
        return print( 0, format, args );
   80866:	2000      	movs	r0, #0
   80868:	4b03      	ldr	r3, [pc, #12]	; (80878 <printf+0x20>)
   8086a:	4798      	blx	r3
}
   8086c:	b003      	add	sp, #12
   8086e:	f85d eb04 	ldr.w	lr, [sp], #4
   80872:	b004      	add	sp, #16
   80874:	4770      	bx	lr
   80876:	bf00      	nop
   80878:	000806f9 	.word	0x000806f9

0008087c <timer_init>:
volatile uint16_t status = 0;

#define F_CPU 84E6
 
uint32_t timer_init(void){
    REG_PMC_PCER0 |= 
   8087c:	4a12      	ldr	r2, [pc, #72]	; (808c8 <timer_init+0x4c>)
   8087e:	6813      	ldr	r3, [r2, #0]
   80880:	f043 53c0 	orr.w	r3, r3, #402653184	; 0x18000000
   80884:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   80888:	6013      	str	r3, [r2, #0]
                   (1 << ID_PIOB)
                  | (1 << ID_TC0)
                  | (1 << ID_TC1); //enable timer in power controller

    // DAC TIMING SETUP //
    TC1->TC_CHANNEL[1].TC_IER |= TC_IER_CPCS
   8088a:	4b10      	ldr	r3, [pc, #64]	; (808cc <timer_init+0x50>)
   8088c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   8088e:	f042 0214 	orr.w	r2, r2, #20
   80892:	665a      	str	r2, [r3, #100]	; 0x64
                              | TC_IER_CPAS;
                              
    //TC1->TC_CHANNEL[1].TC_CCR |= TC_CCR_CLKEN;
    uint16_t RC_count_DAC = 21; // to have 2us intervals
    TC1->TC_CHANNEL[1].TC_RC = RC_count_DAC; // Set Compare RC
   80894:	2215      	movs	r2, #21
   80896:	65da      	str	r2, [r3, #92]	; 0x5c
    TC1->TC_CHANNEL[1].TC_CMR = TC_CMR_TCCLKS_TIMER_CLOCK2  // prescale of 8
   80898:	4a0d      	ldr	r2, [pc, #52]	; (808d0 <timer_init+0x54>)
   8089a:	645a      	str	r2, [r3, #68]	; 0x44
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   8089c:	490d      	ldr	r1, [pc, #52]	; (808d4 <timer_init+0x58>)
   8089e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   808a2:	600b      	str	r3, [r1, #0]
                               | TC_CMR_ACPC_SET;           //
    NVIC_EnableIRQ(ID_TC1); 
       
    // HIGHSCORE TIMING SETUP //    
    
    TC0->TC_CHANNEL[0].TC_IER |= TC_IER_CPCS
   808a4:	4b0c      	ldr	r3, [pc, #48]	; (808d8 <timer_init+0x5c>)
   808a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   808a8:	f042 0214 	orr.w	r2, r2, #20
   808ac:	625a      	str	r2, [r3, #36]	; 0x24
                              | TC_IER_CPAS;
    TC0->TC_CHANNEL[0].TC_CCR |= TC_CCR_CLKEN;    
   808ae:	681a      	ldr	r2, [r3, #0]
   808b0:	f042 0201 	orr.w	r2, r2, #1
   808b4:	601a      	str	r2, [r3, #0]
    uint16_t RC_count = 39400; // to have ish 1000 points per min (~16,67Hz)
    TC0->TC_CHANNEL[0].TC_RC = RC_count; // Set Compare RA        
   808b6:	f649 12e8 	movw	r2, #39400	; 0x99e8
   808ba:	61da      	str	r2, [r3, #28]
    TC0->TC_CHANNEL[0].TC_CMR = TC_CMR_TCCLKS_TIMER_CLOCK4  // prescale of 128
   808bc:	4a07      	ldr	r2, [pc, #28]	; (808dc <timer_init+0x60>)
   808be:	605a      	str	r2, [r3, #4]
   808c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   808c4:	600b      	str	r3, [r1, #0]
                               | TC_CMR_WAVE                // waveform mode
                               | TC_CMR_WAVSEL_UP_RC        // compare rising edge on RC
                               | TC_CMR_ACPC_SET;           //     
    NVIC_EnableIRQ(ID_TC0); 
}
   808c6:	4770      	bx	lr
   808c8:	400e0610 	.word	0x400e0610
   808cc:	40084000 	.word	0x40084000
   808d0:	0004c001 	.word	0x0004c001
   808d4:	e000e100 	.word	0xe000e100
   808d8:	40080000 	.word	0x40080000
   808dc:	0004c003 	.word	0x0004c003

000808e0 <TC0_Handler>:
void TC0_Handler(void){
   808e0:	b508      	push	{r3, lr}
    uint16_t status =  TC0->TC_CHANNEL[0].TC_SR;
   808e2:	4b08      	ldr	r3, [pc, #32]	; (80904 <TC0_Handler+0x24>)
   808e4:	6a1b      	ldr	r3, [r3, #32]
    //if(TC0->TC_CHANNEL[0].TC_SR == TC_SR_COVFS){
    highscore++;
   808e6:	4b08      	ldr	r3, [pc, #32]	; (80908 <TC0_Handler+0x28>)
   808e8:	681a      	ldr	r2, [r3, #0]
   808ea:	3201      	adds	r2, #1
   808ec:	601a      	str	r2, [r3, #0]
    //}
    //if (!(highscore %1000)) {
    printf("highscore is: %d \n\r", highscore);   
   808ee:	6819      	ldr	r1, [r3, #0]
   808f0:	4806      	ldr	r0, [pc, #24]	; (8090c <TC0_Handler+0x2c>)
   808f2:	4b07      	ldr	r3, [pc, #28]	; (80910 <TC0_Handler+0x30>)
   808f4:	4798      	blx	r3
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   808f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   808fa:	4b06      	ldr	r3, [pc, #24]	; (80914 <TC0_Handler+0x34>)
   808fc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   80900:	bd08      	pop	{r3, pc}
   80902:	bf00      	nop
   80904:	40080000 	.word	0x40080000
   80908:	20000450 	.word	0x20000450
   8090c:	00081528 	.word	0x00081528
   80910:	00080859 	.word	0x00080859
   80914:	e000e100 	.word	0xe000e100

00080918 <TC1_Handler>:
    

    NVIC_ClearPendingIRQ(ID_TC0);
}
void TC1_Handler(void){
    uint16_t status = TC1->TC_CHANNEL[1].TC_SR;
   80918:	4b03      	ldr	r3, [pc, #12]	; (80928 <TC1_Handler+0x10>)
   8091a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   8091c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80920:	4b02      	ldr	r3, [pc, #8]	; (8092c <TC1_Handler+0x14>)
   80922:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   80926:	4770      	bx	lr
   80928:	40084000 	.word	0x40084000
   8092c:	e000e100 	.word	0xe000e100

00080930 <delay_2us>:
     
    NVIC_ClearPendingIRQ(ID_TC1);
}
void delay_2us(uint32_t delay){    
   80930:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    for(uint8_t i = 0; i < (F_CPU/8)*delay; i++){
   80934:	4b10      	ldr	r3, [pc, #64]	; (80978 <delay_2us+0x48>)
   80936:	4798      	blx	r3
   80938:	a30d      	add	r3, pc, #52	; (adr r3, 80970 <delay_2us+0x40>)
   8093a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8093e:	4c0f      	ldr	r4, [pc, #60]	; (8097c <delay_2us+0x4c>)
   80940:	47a0      	blx	r4
   80942:	4680      	mov	r8, r0
   80944:	4689      	mov	r9, r1
   80946:	2200      	movs	r2, #0
   80948:	2300      	movs	r3, #0
   8094a:	4c0d      	ldr	r4, [pc, #52]	; (80980 <delay_2us+0x50>)
   8094c:	47a0      	blx	r4
   8094e:	b160      	cbz	r0, 8096a <delay_2us+0x3a>
   80950:	2400      	movs	r4, #0
   80952:	4e0c      	ldr	r6, [pc, #48]	; (80984 <delay_2us+0x54>)
   80954:	4d0c      	ldr	r5, [pc, #48]	; (80988 <delay_2us+0x58>)
        asm("nop");
   80956:	bf00      	nop
    for(uint8_t i = 0; i < (F_CPU/8)*delay; i++){
   80958:	3401      	adds	r4, #1
   8095a:	b2e4      	uxtb	r4, r4
   8095c:	4620      	mov	r0, r4
   8095e:	47b0      	blx	r6
   80960:	4642      	mov	r2, r8
   80962:	464b      	mov	r3, r9
   80964:	47a8      	blx	r5
   80966:	2800      	cmp	r0, #0
   80968:	d1f5      	bne.n	80956 <delay_2us+0x26>
   8096a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   8096e:	bf00      	nop
   80970:	00000000 	.word	0x00000000
   80974:	416406f4 	.word	0x416406f4
   80978:	00080d49 	.word	0x00080d49
   8097c:	00080e35 	.word	0x00080e35
   80980:	00081355 	.word	0x00081355
   80984:	00080d69 	.word	0x00080d69
   80988:	00081319 	.word	0x00081319

0008098c <servo_pwm_init>:
   8098c:	4a0d      	ldr	r2, [pc, #52]	; (809c4 <servo_pwm_init+0x38>)
   8098e:	6813      	ldr	r3, [r2, #0]
   80990:	f043 0310 	orr.w	r3, r3, #16
   80994:	6013      	str	r3, [r2, #0]
   80996:	4b0c      	ldr	r3, [pc, #48]	; (809c8 <servo_pwm_init+0x3c>)
   80998:	685a      	ldr	r2, [r3, #4]
   8099a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   8099e:	605a      	str	r2, [r3, #4]
   809a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   809a2:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   809a6:	671a      	str	r2, [r3, #112]	; 0x70
   809a8:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
   809ac:	4b07      	ldr	r3, [pc, #28]	; (809cc <servo_pwm_init+0x40>)
   809ae:	601a      	str	r2, [r3, #0]
   809b0:	220c      	movs	r2, #12
   809b2:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
   809b6:	601a      	str	r2, [r3, #0]
   809b8:	f649 4240 	movw	r2, #40000	; 0x9c40
   809bc:	330c      	adds	r3, #12
   809be:	601a      	str	r2, [r3, #0]
   809c0:	4770      	bx	lr
   809c2:	bf00      	nop
   809c4:	400e0700 	.word	0x400e0700
   809c8:	400e1200 	.word	0x400e1200
   809cc:	40094000 	.word	0x40094000

000809d0 <configure_uart>:
	uint32_t ul_sr;

/*
Initialize UART ring buffer as empty
*/
rx_buffer.head=0;
   809d0:	4b16      	ldr	r3, [pc, #88]	; (80a2c <configure_uart+0x5c>)
   809d2:	2200      	movs	r2, #0
   809d4:	701a      	strb	r2, [r3, #0]
rx_buffer.tail=0;
   809d6:	705a      	strb	r2, [r3, #1]
/*
Initialize UART communication
*/
	// Pin configuration
	// Disable interrupts on Uart receive (URXD) and transmit (UTXD) pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   809d8:	4b15      	ldr	r3, [pc, #84]	; (80a30 <configure_uart+0x60>)
   809da:	f44f 7140 	mov.w	r1, #768	; 0x300
   809de:	6459      	str	r1, [r3, #68]	; 0x44

	// Disable the Parallel IO (PIO) of the URXD and UTXD pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   809e0:	6059      	str	r1, [r3, #4]

	// Read current peripheral AB select register and set the UTXD and URXD pins to 0 (UART is connected as peripheral A)
	ul_sr = PIOA->PIO_ABSR;
   809e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	PIOA->PIO_ABSR &= ~(PIO_PA8A_URXD | PIO_PA9A_UTXD) & ul_sr;
   809e4:	6f18      	ldr	r0, [r3, #112]	; 0x70
   809e6:	4002      	ands	r2, r0
   809e8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   809ec:	671a      	str	r2, [r3, #112]	; 0x70

	// Enable pull up resistor on URXD and UTXD pin
	PIOA->PIO_PUER = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   809ee:	6659      	str	r1, [r3, #100]	; 0x64

	// Uart configuration
	
	// Enable the peripheral UART controller in Power Management Controller (PMC)
	PMC->PMC_PCER0 = 1 << ID_UART;
   809f0:	f44f 7280 	mov.w	r2, #256	; 0x100
   809f4:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   809f8:	611a      	str	r2, [r3, #16]

	// Reset and disable receiver and transmitter
	UART->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX | UART_CR_RXDIS | UART_CR_TXDIS;
   809fa:	f503 7300 	add.w	r3, r3, #512	; 0x200
   809fe:	21ac      	movs	r1, #172	; 0xac
   80a00:	6019      	str	r1, [r3, #0]

	// Set the baudrate
	UART->UART_BRGR = 547; // MCK / 16 * x = BaudRate (write x into UART_BRGR)  
   80a02:	f240 2123 	movw	r1, #547	; 0x223
   80a06:	6219      	str	r1, [r3, #32]

	// No parity bits
	UART->UART_MR = UART_MR_PAR_NO | UART_MR_CHMODE_NORMAL;	
   80a08:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80a0c:	6059      	str	r1, [r3, #4]

	// Disable PDC channel
	UART->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80a0e:	f240 2102 	movw	r1, #514	; 0x202
   80a12:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120

	// Configure interrupts on receive ready and errors
	UART->UART_IDR = 0xFFFFFFFF;
   80a16:	f04f 31ff 	mov.w	r1, #4294967295
   80a1a:	60d9      	str	r1, [r3, #12]
	UART->UART_IER = UART_IER_RXRDY | UART_IER_OVRE | UART_IER_FRAME | UART_IER_PARE;
   80a1c:	21e1      	movs	r1, #225	; 0xe1
   80a1e:	6099      	str	r1, [r3, #8]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80a20:	4904      	ldr	r1, [pc, #16]	; (80a34 <configure_uart+0x64>)
   80a22:	600a      	str	r2, [r1, #0]

	// Enable UART interrupt in the Nested Vectored Interrupt Controller(NVIC)
	NVIC_EnableIRQ((IRQn_Type) ID_UART);

	// Enable UART receiver and transmitter
	UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80a24:	2250      	movs	r2, #80	; 0x50
   80a26:	601a      	str	r2, [r3, #0]
   80a28:	4770      	bx	lr
   80a2a:	bf00      	nop
   80a2c:	20000468 	.word	0x20000468
   80a30:	400e0e00 	.word	0x400e0e00
   80a34:	e000e100 	.word	0xe000e100

00080a38 <uart_putchar>:
 * \retval Success(0) or failure(1).
 */
int uart_putchar(const uint8_t c)
{
	// Check if the transmitter is ready
	if((UART->UART_SR & UART_SR_TXRDY) != UART_SR_TXRDY)
   80a38:	4b07      	ldr	r3, [pc, #28]	; (80a58 <uart_putchar+0x20>)
   80a3a:	695b      	ldr	r3, [r3, #20]
   80a3c:	f013 0f02 	tst.w	r3, #2
   80a40:	d008      	beq.n	80a54 <uart_putchar+0x1c>
	return 1;

	// Send the character
	UART->UART_THR = c;
   80a42:	4b05      	ldr	r3, [pc, #20]	; (80a58 <uart_putchar+0x20>)
   80a44:	61d8      	str	r0, [r3, #28]
	while(!((UART->UART_SR) & UART_SR_TXEMPTY)); // Wait for the character to be sent, can implement ring buffer to remove the wait
   80a46:	461a      	mov	r2, r3
   80a48:	6953      	ldr	r3, [r2, #20]
   80a4a:	f413 7f00 	tst.w	r3, #512	; 0x200
   80a4e:	d0fb      	beq.n	80a48 <uart_putchar+0x10>
	return 0;
   80a50:	2000      	movs	r0, #0
   80a52:	4770      	bx	lr
	return 1;
   80a54:	2001      	movs	r0, #1
}
   80a56:	4770      	bx	lr
   80a58:	400e0800 	.word	0x400e0800

00080a5c <UART_Handler>:

void UART_Handler(void)
{
   80a5c:	b508      	push	{r3, lr}
	uint32_t status = UART->UART_SR;
   80a5e:	4b15      	ldr	r3, [pc, #84]	; (80ab4 <UART_Handler+0x58>)
   80a60:	695b      	ldr	r3, [r3, #20]
	
	//Reset UART at overflow error and frame error
	if(status & (UART_SR_OVRE | UART_SR_FRAME | UART_SR_PARE))
   80a62:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   80a66:	d003      	beq.n	80a70 <UART_Handler+0x14>
	{
		UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN | UART_CR_RSTSTA;
   80a68:	f44f 71a8 	mov.w	r1, #336	; 0x150
   80a6c:	4a11      	ldr	r2, [pc, #68]	; (80ab4 <UART_Handler+0x58>)
   80a6e:	6011      	str	r1, [r2, #0]
	}
	
	//Check if message is ready to be received
	if(status & UART_SR_RXRDY)
   80a70:	f013 0f01 	tst.w	r3, #1
   80a74:	d012      	beq.n	80a9c <UART_Handler+0x40>
	{
		//Check if receive ring buffer is full and 
		if((rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE == rx_buffer.head)
   80a76:	4810      	ldr	r0, [pc, #64]	; (80ab8 <UART_Handler+0x5c>)
   80a78:	7842      	ldrb	r2, [r0, #1]
   80a7a:	1c53      	adds	r3, r2, #1
   80a7c:	4259      	negs	r1, r3
   80a7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   80a82:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   80a86:	bf58      	it	pl
   80a88:	424b      	negpl	r3, r1
   80a8a:	7801      	ldrb	r1, [r0, #0]
   80a8c:	428b      	cmp	r3, r1
   80a8e:	d006      	beq.n	80a9e <UART_Handler+0x42>
		{
			printf("ERR: UART RX buffer is full\n\r");
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
			return;
		}
		rx_buffer.data[rx_buffer.tail] = UART->UART_RHR;
   80a90:	4908      	ldr	r1, [pc, #32]	; (80ab4 <UART_Handler+0x58>)
   80a92:	6988      	ldr	r0, [r1, #24]
   80a94:	4908      	ldr	r1, [pc, #32]	; (80ab8 <UART_Handler+0x5c>)
   80a96:	440a      	add	r2, r1
   80a98:	7090      	strb	r0, [r2, #2]
		rx_buffer.tail = (rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE;
   80a9a:	704b      	strb	r3, [r1, #1]
   80a9c:	bd08      	pop	{r3, pc}
			printf("ERR: UART RX buffer is full\n\r");
   80a9e:	4807      	ldr	r0, [pc, #28]	; (80abc <UART_Handler+0x60>)
   80aa0:	4b07      	ldr	r3, [pc, #28]	; (80ac0 <UART_Handler+0x64>)
   80aa2:	4798      	blx	r3
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
   80aa4:	4b03      	ldr	r3, [pc, #12]	; (80ab4 <UART_Handler+0x58>)
   80aa6:	699a      	ldr	r2, [r3, #24]
   80aa8:	4b03      	ldr	r3, [pc, #12]	; (80ab8 <UART_Handler+0x5c>)
   80aaa:	7859      	ldrb	r1, [r3, #1]
   80aac:	440b      	add	r3, r1
   80aae:	709a      	strb	r2, [r3, #2]
			return;
   80ab0:	bd08      	pop	{r3, pc}
   80ab2:	bf00      	nop
   80ab4:	400e0800 	.word	0x400e0800
   80ab8:	20000468 	.word	0x20000468
   80abc:	0008154c 	.word	0x0008154c
   80ac0:	00080859 	.word	0x00080859

00080ac4 <__aeabi_drsub>:
   80ac4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   80ac8:	e002      	b.n	80ad0 <__adddf3>
   80aca:	bf00      	nop

00080acc <__aeabi_dsub>:
   80acc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00080ad0 <__adddf3>:
   80ad0:	b530      	push	{r4, r5, lr}
   80ad2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   80ad6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   80ada:	ea94 0f05 	teq	r4, r5
   80ade:	bf08      	it	eq
   80ae0:	ea90 0f02 	teqeq	r0, r2
   80ae4:	bf1f      	itttt	ne
   80ae6:	ea54 0c00 	orrsne.w	ip, r4, r0
   80aea:	ea55 0c02 	orrsne.w	ip, r5, r2
   80aee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   80af2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   80af6:	f000 80e2 	beq.w	80cbe <__adddf3+0x1ee>
   80afa:	ea4f 5454 	mov.w	r4, r4, lsr #21
   80afe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   80b02:	bfb8      	it	lt
   80b04:	426d      	neglt	r5, r5
   80b06:	dd0c      	ble.n	80b22 <__adddf3+0x52>
   80b08:	442c      	add	r4, r5
   80b0a:	ea80 0202 	eor.w	r2, r0, r2
   80b0e:	ea81 0303 	eor.w	r3, r1, r3
   80b12:	ea82 0000 	eor.w	r0, r2, r0
   80b16:	ea83 0101 	eor.w	r1, r3, r1
   80b1a:	ea80 0202 	eor.w	r2, r0, r2
   80b1e:	ea81 0303 	eor.w	r3, r1, r3
   80b22:	2d36      	cmp	r5, #54	; 0x36
   80b24:	bf88      	it	hi
   80b26:	bd30      	pophi	{r4, r5, pc}
   80b28:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   80b2c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   80b30:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   80b34:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   80b38:	d002      	beq.n	80b40 <__adddf3+0x70>
   80b3a:	4240      	negs	r0, r0
   80b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   80b40:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   80b44:	ea4f 3303 	mov.w	r3, r3, lsl #12
   80b48:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   80b4c:	d002      	beq.n	80b54 <__adddf3+0x84>
   80b4e:	4252      	negs	r2, r2
   80b50:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   80b54:	ea94 0f05 	teq	r4, r5
   80b58:	f000 80a7 	beq.w	80caa <__adddf3+0x1da>
   80b5c:	f1a4 0401 	sub.w	r4, r4, #1
   80b60:	f1d5 0e20 	rsbs	lr, r5, #32
   80b64:	db0d      	blt.n	80b82 <__adddf3+0xb2>
   80b66:	fa02 fc0e 	lsl.w	ip, r2, lr
   80b6a:	fa22 f205 	lsr.w	r2, r2, r5
   80b6e:	1880      	adds	r0, r0, r2
   80b70:	f141 0100 	adc.w	r1, r1, #0
   80b74:	fa03 f20e 	lsl.w	r2, r3, lr
   80b78:	1880      	adds	r0, r0, r2
   80b7a:	fa43 f305 	asr.w	r3, r3, r5
   80b7e:	4159      	adcs	r1, r3
   80b80:	e00e      	b.n	80ba0 <__adddf3+0xd0>
   80b82:	f1a5 0520 	sub.w	r5, r5, #32
   80b86:	f10e 0e20 	add.w	lr, lr, #32
   80b8a:	2a01      	cmp	r2, #1
   80b8c:	fa03 fc0e 	lsl.w	ip, r3, lr
   80b90:	bf28      	it	cs
   80b92:	f04c 0c02 	orrcs.w	ip, ip, #2
   80b96:	fa43 f305 	asr.w	r3, r3, r5
   80b9a:	18c0      	adds	r0, r0, r3
   80b9c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   80ba0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   80ba4:	d507      	bpl.n	80bb6 <__adddf3+0xe6>
   80ba6:	f04f 0e00 	mov.w	lr, #0
   80baa:	f1dc 0c00 	rsbs	ip, ip, #0
   80bae:	eb7e 0000 	sbcs.w	r0, lr, r0
   80bb2:	eb6e 0101 	sbc.w	r1, lr, r1
   80bb6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   80bba:	d31b      	bcc.n	80bf4 <__adddf3+0x124>
   80bbc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   80bc0:	d30c      	bcc.n	80bdc <__adddf3+0x10c>
   80bc2:	0849      	lsrs	r1, r1, #1
   80bc4:	ea5f 0030 	movs.w	r0, r0, rrx
   80bc8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   80bcc:	f104 0401 	add.w	r4, r4, #1
   80bd0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   80bd4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   80bd8:	f080 809a 	bcs.w	80d10 <__adddf3+0x240>
   80bdc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   80be0:	bf08      	it	eq
   80be2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   80be6:	f150 0000 	adcs.w	r0, r0, #0
   80bea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   80bee:	ea41 0105 	orr.w	r1, r1, r5
   80bf2:	bd30      	pop	{r4, r5, pc}
   80bf4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   80bf8:	4140      	adcs	r0, r0
   80bfa:	eb41 0101 	adc.w	r1, r1, r1
   80bfe:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   80c02:	f1a4 0401 	sub.w	r4, r4, #1
   80c06:	d1e9      	bne.n	80bdc <__adddf3+0x10c>
   80c08:	f091 0f00 	teq	r1, #0
   80c0c:	bf04      	itt	eq
   80c0e:	4601      	moveq	r1, r0
   80c10:	2000      	moveq	r0, #0
   80c12:	fab1 f381 	clz	r3, r1
   80c16:	bf08      	it	eq
   80c18:	3320      	addeq	r3, #32
   80c1a:	f1a3 030b 	sub.w	r3, r3, #11
   80c1e:	f1b3 0220 	subs.w	r2, r3, #32
   80c22:	da0c      	bge.n	80c3e <__adddf3+0x16e>
   80c24:	320c      	adds	r2, #12
   80c26:	dd08      	ble.n	80c3a <__adddf3+0x16a>
   80c28:	f102 0c14 	add.w	ip, r2, #20
   80c2c:	f1c2 020c 	rsb	r2, r2, #12
   80c30:	fa01 f00c 	lsl.w	r0, r1, ip
   80c34:	fa21 f102 	lsr.w	r1, r1, r2
   80c38:	e00c      	b.n	80c54 <__adddf3+0x184>
   80c3a:	f102 0214 	add.w	r2, r2, #20
   80c3e:	bfd8      	it	le
   80c40:	f1c2 0c20 	rsble	ip, r2, #32
   80c44:	fa01 f102 	lsl.w	r1, r1, r2
   80c48:	fa20 fc0c 	lsr.w	ip, r0, ip
   80c4c:	bfdc      	itt	le
   80c4e:	ea41 010c 	orrle.w	r1, r1, ip
   80c52:	4090      	lslle	r0, r2
   80c54:	1ae4      	subs	r4, r4, r3
   80c56:	bfa2      	ittt	ge
   80c58:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   80c5c:	4329      	orrge	r1, r5
   80c5e:	bd30      	popge	{r4, r5, pc}
   80c60:	ea6f 0404 	mvn.w	r4, r4
   80c64:	3c1f      	subs	r4, #31
   80c66:	da1c      	bge.n	80ca2 <__adddf3+0x1d2>
   80c68:	340c      	adds	r4, #12
   80c6a:	dc0e      	bgt.n	80c8a <__adddf3+0x1ba>
   80c6c:	f104 0414 	add.w	r4, r4, #20
   80c70:	f1c4 0220 	rsb	r2, r4, #32
   80c74:	fa20 f004 	lsr.w	r0, r0, r4
   80c78:	fa01 f302 	lsl.w	r3, r1, r2
   80c7c:	ea40 0003 	orr.w	r0, r0, r3
   80c80:	fa21 f304 	lsr.w	r3, r1, r4
   80c84:	ea45 0103 	orr.w	r1, r5, r3
   80c88:	bd30      	pop	{r4, r5, pc}
   80c8a:	f1c4 040c 	rsb	r4, r4, #12
   80c8e:	f1c4 0220 	rsb	r2, r4, #32
   80c92:	fa20 f002 	lsr.w	r0, r0, r2
   80c96:	fa01 f304 	lsl.w	r3, r1, r4
   80c9a:	ea40 0003 	orr.w	r0, r0, r3
   80c9e:	4629      	mov	r1, r5
   80ca0:	bd30      	pop	{r4, r5, pc}
   80ca2:	fa21 f004 	lsr.w	r0, r1, r4
   80ca6:	4629      	mov	r1, r5
   80ca8:	bd30      	pop	{r4, r5, pc}
   80caa:	f094 0f00 	teq	r4, #0
   80cae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   80cb2:	bf06      	itte	eq
   80cb4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   80cb8:	3401      	addeq	r4, #1
   80cba:	3d01      	subne	r5, #1
   80cbc:	e74e      	b.n	80b5c <__adddf3+0x8c>
   80cbe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   80cc2:	bf18      	it	ne
   80cc4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   80cc8:	d029      	beq.n	80d1e <__adddf3+0x24e>
   80cca:	ea94 0f05 	teq	r4, r5
   80cce:	bf08      	it	eq
   80cd0:	ea90 0f02 	teqeq	r0, r2
   80cd4:	d005      	beq.n	80ce2 <__adddf3+0x212>
   80cd6:	ea54 0c00 	orrs.w	ip, r4, r0
   80cda:	bf04      	itt	eq
   80cdc:	4619      	moveq	r1, r3
   80cde:	4610      	moveq	r0, r2
   80ce0:	bd30      	pop	{r4, r5, pc}
   80ce2:	ea91 0f03 	teq	r1, r3
   80ce6:	bf1e      	ittt	ne
   80ce8:	2100      	movne	r1, #0
   80cea:	2000      	movne	r0, #0
   80cec:	bd30      	popne	{r4, r5, pc}
   80cee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   80cf2:	d105      	bne.n	80d00 <__adddf3+0x230>
   80cf4:	0040      	lsls	r0, r0, #1
   80cf6:	4149      	adcs	r1, r1
   80cf8:	bf28      	it	cs
   80cfa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   80cfe:	bd30      	pop	{r4, r5, pc}
   80d00:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   80d04:	bf3c      	itt	cc
   80d06:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   80d0a:	bd30      	popcc	{r4, r5, pc}
   80d0c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   80d10:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   80d14:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   80d18:	f04f 0000 	mov.w	r0, #0
   80d1c:	bd30      	pop	{r4, r5, pc}
   80d1e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   80d22:	bf1a      	itte	ne
   80d24:	4619      	movne	r1, r3
   80d26:	4610      	movne	r0, r2
   80d28:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   80d2c:	bf1c      	itt	ne
   80d2e:	460b      	movne	r3, r1
   80d30:	4602      	movne	r2, r0
   80d32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   80d36:	bf06      	itte	eq
   80d38:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   80d3c:	ea91 0f03 	teqeq	r1, r3
   80d40:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   80d44:	bd30      	pop	{r4, r5, pc}
   80d46:	bf00      	nop

00080d48 <__aeabi_ui2d>:
   80d48:	f090 0f00 	teq	r0, #0
   80d4c:	bf04      	itt	eq
   80d4e:	2100      	moveq	r1, #0
   80d50:	4770      	bxeq	lr
   80d52:	b530      	push	{r4, r5, lr}
   80d54:	f44f 6480 	mov.w	r4, #1024	; 0x400
   80d58:	f104 0432 	add.w	r4, r4, #50	; 0x32
   80d5c:	f04f 0500 	mov.w	r5, #0
   80d60:	f04f 0100 	mov.w	r1, #0
   80d64:	e750      	b.n	80c08 <__adddf3+0x138>
   80d66:	bf00      	nop

00080d68 <__aeabi_i2d>:
   80d68:	f090 0f00 	teq	r0, #0
   80d6c:	bf04      	itt	eq
   80d6e:	2100      	moveq	r1, #0
   80d70:	4770      	bxeq	lr
   80d72:	b530      	push	{r4, r5, lr}
   80d74:	f44f 6480 	mov.w	r4, #1024	; 0x400
   80d78:	f104 0432 	add.w	r4, r4, #50	; 0x32
   80d7c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   80d80:	bf48      	it	mi
   80d82:	4240      	negmi	r0, r0
   80d84:	f04f 0100 	mov.w	r1, #0
   80d88:	e73e      	b.n	80c08 <__adddf3+0x138>
   80d8a:	bf00      	nop

00080d8c <__aeabi_f2d>:
   80d8c:	0042      	lsls	r2, r0, #1
   80d8e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   80d92:	ea4f 0131 	mov.w	r1, r1, rrx
   80d96:	ea4f 7002 	mov.w	r0, r2, lsl #28
   80d9a:	bf1f      	itttt	ne
   80d9c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   80da0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   80da4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   80da8:	4770      	bxne	lr
   80daa:	f092 0f00 	teq	r2, #0
   80dae:	bf14      	ite	ne
   80db0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   80db4:	4770      	bxeq	lr
   80db6:	b530      	push	{r4, r5, lr}
   80db8:	f44f 7460 	mov.w	r4, #896	; 0x380
   80dbc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   80dc0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   80dc4:	e720      	b.n	80c08 <__adddf3+0x138>
   80dc6:	bf00      	nop

00080dc8 <__aeabi_ul2d>:
   80dc8:	ea50 0201 	orrs.w	r2, r0, r1
   80dcc:	bf08      	it	eq
   80dce:	4770      	bxeq	lr
   80dd0:	b530      	push	{r4, r5, lr}
   80dd2:	f04f 0500 	mov.w	r5, #0
   80dd6:	e00a      	b.n	80dee <__aeabi_l2d+0x16>

00080dd8 <__aeabi_l2d>:
   80dd8:	ea50 0201 	orrs.w	r2, r0, r1
   80ddc:	bf08      	it	eq
   80dde:	4770      	bxeq	lr
   80de0:	b530      	push	{r4, r5, lr}
   80de2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   80de6:	d502      	bpl.n	80dee <__aeabi_l2d+0x16>
   80de8:	4240      	negs	r0, r0
   80dea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   80dee:	f44f 6480 	mov.w	r4, #1024	; 0x400
   80df2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   80df6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   80dfa:	f43f aedc 	beq.w	80bb6 <__adddf3+0xe6>
   80dfe:	f04f 0203 	mov.w	r2, #3
   80e02:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   80e06:	bf18      	it	ne
   80e08:	3203      	addne	r2, #3
   80e0a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   80e0e:	bf18      	it	ne
   80e10:	3203      	addne	r2, #3
   80e12:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   80e16:	f1c2 0320 	rsb	r3, r2, #32
   80e1a:	fa00 fc03 	lsl.w	ip, r0, r3
   80e1e:	fa20 f002 	lsr.w	r0, r0, r2
   80e22:	fa01 fe03 	lsl.w	lr, r1, r3
   80e26:	ea40 000e 	orr.w	r0, r0, lr
   80e2a:	fa21 f102 	lsr.w	r1, r1, r2
   80e2e:	4414      	add	r4, r2
   80e30:	e6c1      	b.n	80bb6 <__adddf3+0xe6>
   80e32:	bf00      	nop

00080e34 <__aeabi_dmul>:
   80e34:	b570      	push	{r4, r5, r6, lr}
   80e36:	f04f 0cff 	mov.w	ip, #255	; 0xff
   80e3a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   80e3e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   80e42:	bf1d      	ittte	ne
   80e44:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   80e48:	ea94 0f0c 	teqne	r4, ip
   80e4c:	ea95 0f0c 	teqne	r5, ip
   80e50:	f000 f8de 	bleq	81010 <__aeabi_dmul+0x1dc>
   80e54:	442c      	add	r4, r5
   80e56:	ea81 0603 	eor.w	r6, r1, r3
   80e5a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   80e5e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   80e62:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   80e66:	bf18      	it	ne
   80e68:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   80e6c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   80e70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   80e74:	d038      	beq.n	80ee8 <__aeabi_dmul+0xb4>
   80e76:	fba0 ce02 	umull	ip, lr, r0, r2
   80e7a:	f04f 0500 	mov.w	r5, #0
   80e7e:	fbe1 e502 	umlal	lr, r5, r1, r2
   80e82:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   80e86:	fbe0 e503 	umlal	lr, r5, r0, r3
   80e8a:	f04f 0600 	mov.w	r6, #0
   80e8e:	fbe1 5603 	umlal	r5, r6, r1, r3
   80e92:	f09c 0f00 	teq	ip, #0
   80e96:	bf18      	it	ne
   80e98:	f04e 0e01 	orrne.w	lr, lr, #1
   80e9c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   80ea0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   80ea4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   80ea8:	d204      	bcs.n	80eb4 <__aeabi_dmul+0x80>
   80eaa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   80eae:	416d      	adcs	r5, r5
   80eb0:	eb46 0606 	adc.w	r6, r6, r6
   80eb4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   80eb8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   80ebc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   80ec0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   80ec4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   80ec8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   80ecc:	bf88      	it	hi
   80ece:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   80ed2:	d81e      	bhi.n	80f12 <__aeabi_dmul+0xde>
   80ed4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   80ed8:	bf08      	it	eq
   80eda:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   80ede:	f150 0000 	adcs.w	r0, r0, #0
   80ee2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   80ee6:	bd70      	pop	{r4, r5, r6, pc}
   80ee8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   80eec:	ea46 0101 	orr.w	r1, r6, r1
   80ef0:	ea40 0002 	orr.w	r0, r0, r2
   80ef4:	ea81 0103 	eor.w	r1, r1, r3
   80ef8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   80efc:	bfc2      	ittt	gt
   80efe:	ebd4 050c 	rsbsgt	r5, r4, ip
   80f02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   80f06:	bd70      	popgt	{r4, r5, r6, pc}
   80f08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   80f0c:	f04f 0e00 	mov.w	lr, #0
   80f10:	3c01      	subs	r4, #1
   80f12:	f300 80ab 	bgt.w	8106c <__aeabi_dmul+0x238>
   80f16:	f114 0f36 	cmn.w	r4, #54	; 0x36
   80f1a:	bfde      	ittt	le
   80f1c:	2000      	movle	r0, #0
   80f1e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   80f22:	bd70      	pople	{r4, r5, r6, pc}
   80f24:	f1c4 0400 	rsb	r4, r4, #0
   80f28:	3c20      	subs	r4, #32
   80f2a:	da35      	bge.n	80f98 <__aeabi_dmul+0x164>
   80f2c:	340c      	adds	r4, #12
   80f2e:	dc1b      	bgt.n	80f68 <__aeabi_dmul+0x134>
   80f30:	f104 0414 	add.w	r4, r4, #20
   80f34:	f1c4 0520 	rsb	r5, r4, #32
   80f38:	fa00 f305 	lsl.w	r3, r0, r5
   80f3c:	fa20 f004 	lsr.w	r0, r0, r4
   80f40:	fa01 f205 	lsl.w	r2, r1, r5
   80f44:	ea40 0002 	orr.w	r0, r0, r2
   80f48:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   80f4c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   80f50:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   80f54:	fa21 f604 	lsr.w	r6, r1, r4
   80f58:	eb42 0106 	adc.w	r1, r2, r6
   80f5c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   80f60:	bf08      	it	eq
   80f62:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   80f66:	bd70      	pop	{r4, r5, r6, pc}
   80f68:	f1c4 040c 	rsb	r4, r4, #12
   80f6c:	f1c4 0520 	rsb	r5, r4, #32
   80f70:	fa00 f304 	lsl.w	r3, r0, r4
   80f74:	fa20 f005 	lsr.w	r0, r0, r5
   80f78:	fa01 f204 	lsl.w	r2, r1, r4
   80f7c:	ea40 0002 	orr.w	r0, r0, r2
   80f80:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   80f84:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   80f88:	f141 0100 	adc.w	r1, r1, #0
   80f8c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   80f90:	bf08      	it	eq
   80f92:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   80f96:	bd70      	pop	{r4, r5, r6, pc}
   80f98:	f1c4 0520 	rsb	r5, r4, #32
   80f9c:	fa00 f205 	lsl.w	r2, r0, r5
   80fa0:	ea4e 0e02 	orr.w	lr, lr, r2
   80fa4:	fa20 f304 	lsr.w	r3, r0, r4
   80fa8:	fa01 f205 	lsl.w	r2, r1, r5
   80fac:	ea43 0302 	orr.w	r3, r3, r2
   80fb0:	fa21 f004 	lsr.w	r0, r1, r4
   80fb4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   80fb8:	fa21 f204 	lsr.w	r2, r1, r4
   80fbc:	ea20 0002 	bic.w	r0, r0, r2
   80fc0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   80fc4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   80fc8:	bf08      	it	eq
   80fca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   80fce:	bd70      	pop	{r4, r5, r6, pc}
   80fd0:	f094 0f00 	teq	r4, #0
   80fd4:	d10f      	bne.n	80ff6 <__aeabi_dmul+0x1c2>
   80fd6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   80fda:	0040      	lsls	r0, r0, #1
   80fdc:	eb41 0101 	adc.w	r1, r1, r1
   80fe0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   80fe4:	bf08      	it	eq
   80fe6:	3c01      	subeq	r4, #1
   80fe8:	d0f7      	beq.n	80fda <__aeabi_dmul+0x1a6>
   80fea:	ea41 0106 	orr.w	r1, r1, r6
   80fee:	f095 0f00 	teq	r5, #0
   80ff2:	bf18      	it	ne
   80ff4:	4770      	bxne	lr
   80ff6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   80ffa:	0052      	lsls	r2, r2, #1
   80ffc:	eb43 0303 	adc.w	r3, r3, r3
   81000:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   81004:	bf08      	it	eq
   81006:	3d01      	subeq	r5, #1
   81008:	d0f7      	beq.n	80ffa <__aeabi_dmul+0x1c6>
   8100a:	ea43 0306 	orr.w	r3, r3, r6
   8100e:	4770      	bx	lr
   81010:	ea94 0f0c 	teq	r4, ip
   81014:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   81018:	bf18      	it	ne
   8101a:	ea95 0f0c 	teqne	r5, ip
   8101e:	d00c      	beq.n	8103a <__aeabi_dmul+0x206>
   81020:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   81024:	bf18      	it	ne
   81026:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8102a:	d1d1      	bne.n	80fd0 <__aeabi_dmul+0x19c>
   8102c:	ea81 0103 	eor.w	r1, r1, r3
   81030:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81034:	f04f 0000 	mov.w	r0, #0
   81038:	bd70      	pop	{r4, r5, r6, pc}
   8103a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8103e:	bf06      	itte	eq
   81040:	4610      	moveq	r0, r2
   81042:	4619      	moveq	r1, r3
   81044:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   81048:	d019      	beq.n	8107e <__aeabi_dmul+0x24a>
   8104a:	ea94 0f0c 	teq	r4, ip
   8104e:	d102      	bne.n	81056 <__aeabi_dmul+0x222>
   81050:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   81054:	d113      	bne.n	8107e <__aeabi_dmul+0x24a>
   81056:	ea95 0f0c 	teq	r5, ip
   8105a:	d105      	bne.n	81068 <__aeabi_dmul+0x234>
   8105c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   81060:	bf1c      	itt	ne
   81062:	4610      	movne	r0, r2
   81064:	4619      	movne	r1, r3
   81066:	d10a      	bne.n	8107e <__aeabi_dmul+0x24a>
   81068:	ea81 0103 	eor.w	r1, r1, r3
   8106c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81070:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   81074:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   81078:	f04f 0000 	mov.w	r0, #0
   8107c:	bd70      	pop	{r4, r5, r6, pc}
   8107e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   81082:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   81086:	bd70      	pop	{r4, r5, r6, pc}

00081088 <__aeabi_ddiv>:
   81088:	b570      	push	{r4, r5, r6, lr}
   8108a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8108e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   81092:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   81096:	bf1d      	ittte	ne
   81098:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8109c:	ea94 0f0c 	teqne	r4, ip
   810a0:	ea95 0f0c 	teqne	r5, ip
   810a4:	f000 f8a7 	bleq	811f6 <__aeabi_ddiv+0x16e>
   810a8:	eba4 0405 	sub.w	r4, r4, r5
   810ac:	ea81 0e03 	eor.w	lr, r1, r3
   810b0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   810b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   810b8:	f000 8088 	beq.w	811cc <__aeabi_ddiv+0x144>
   810bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   810c0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   810c4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   810c8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   810cc:	ea4f 2202 	mov.w	r2, r2, lsl #8
   810d0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   810d4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   810d8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   810dc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   810e0:	429d      	cmp	r5, r3
   810e2:	bf08      	it	eq
   810e4:	4296      	cmpeq	r6, r2
   810e6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   810ea:	f504 7440 	add.w	r4, r4, #768	; 0x300
   810ee:	d202      	bcs.n	810f6 <__aeabi_ddiv+0x6e>
   810f0:	085b      	lsrs	r3, r3, #1
   810f2:	ea4f 0232 	mov.w	r2, r2, rrx
   810f6:	1ab6      	subs	r6, r6, r2
   810f8:	eb65 0503 	sbc.w	r5, r5, r3
   810fc:	085b      	lsrs	r3, r3, #1
   810fe:	ea4f 0232 	mov.w	r2, r2, rrx
   81102:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   81106:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   8110a:	ebb6 0e02 	subs.w	lr, r6, r2
   8110e:	eb75 0e03 	sbcs.w	lr, r5, r3
   81112:	bf22      	ittt	cs
   81114:	1ab6      	subcs	r6, r6, r2
   81116:	4675      	movcs	r5, lr
   81118:	ea40 000c 	orrcs.w	r0, r0, ip
   8111c:	085b      	lsrs	r3, r3, #1
   8111e:	ea4f 0232 	mov.w	r2, r2, rrx
   81122:	ebb6 0e02 	subs.w	lr, r6, r2
   81126:	eb75 0e03 	sbcs.w	lr, r5, r3
   8112a:	bf22      	ittt	cs
   8112c:	1ab6      	subcs	r6, r6, r2
   8112e:	4675      	movcs	r5, lr
   81130:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   81134:	085b      	lsrs	r3, r3, #1
   81136:	ea4f 0232 	mov.w	r2, r2, rrx
   8113a:	ebb6 0e02 	subs.w	lr, r6, r2
   8113e:	eb75 0e03 	sbcs.w	lr, r5, r3
   81142:	bf22      	ittt	cs
   81144:	1ab6      	subcs	r6, r6, r2
   81146:	4675      	movcs	r5, lr
   81148:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   8114c:	085b      	lsrs	r3, r3, #1
   8114e:	ea4f 0232 	mov.w	r2, r2, rrx
   81152:	ebb6 0e02 	subs.w	lr, r6, r2
   81156:	eb75 0e03 	sbcs.w	lr, r5, r3
   8115a:	bf22      	ittt	cs
   8115c:	1ab6      	subcs	r6, r6, r2
   8115e:	4675      	movcs	r5, lr
   81160:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   81164:	ea55 0e06 	orrs.w	lr, r5, r6
   81168:	d018      	beq.n	8119c <__aeabi_ddiv+0x114>
   8116a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   8116e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   81172:	ea4f 1606 	mov.w	r6, r6, lsl #4
   81176:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   8117a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   8117e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   81182:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   81186:	d1c0      	bne.n	8110a <__aeabi_ddiv+0x82>
   81188:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8118c:	d10b      	bne.n	811a6 <__aeabi_ddiv+0x11e>
   8118e:	ea41 0100 	orr.w	r1, r1, r0
   81192:	f04f 0000 	mov.w	r0, #0
   81196:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8119a:	e7b6      	b.n	8110a <__aeabi_ddiv+0x82>
   8119c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   811a0:	bf04      	itt	eq
   811a2:	4301      	orreq	r1, r0
   811a4:	2000      	moveq	r0, #0
   811a6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   811aa:	bf88      	it	hi
   811ac:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   811b0:	f63f aeaf 	bhi.w	80f12 <__aeabi_dmul+0xde>
   811b4:	ebb5 0c03 	subs.w	ip, r5, r3
   811b8:	bf04      	itt	eq
   811ba:	ebb6 0c02 	subseq.w	ip, r6, r2
   811be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   811c2:	f150 0000 	adcs.w	r0, r0, #0
   811c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   811ca:	bd70      	pop	{r4, r5, r6, pc}
   811cc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   811d0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   811d4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   811d8:	bfc2      	ittt	gt
   811da:	ebd4 050c 	rsbsgt	r5, r4, ip
   811de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   811e2:	bd70      	popgt	{r4, r5, r6, pc}
   811e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   811e8:	f04f 0e00 	mov.w	lr, #0
   811ec:	3c01      	subs	r4, #1
   811ee:	e690      	b.n	80f12 <__aeabi_dmul+0xde>
   811f0:	ea45 0e06 	orr.w	lr, r5, r6
   811f4:	e68d      	b.n	80f12 <__aeabi_dmul+0xde>
   811f6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   811fa:	ea94 0f0c 	teq	r4, ip
   811fe:	bf08      	it	eq
   81200:	ea95 0f0c 	teqeq	r5, ip
   81204:	f43f af3b 	beq.w	8107e <__aeabi_dmul+0x24a>
   81208:	ea94 0f0c 	teq	r4, ip
   8120c:	d10a      	bne.n	81224 <__aeabi_ddiv+0x19c>
   8120e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   81212:	f47f af34 	bne.w	8107e <__aeabi_dmul+0x24a>
   81216:	ea95 0f0c 	teq	r5, ip
   8121a:	f47f af25 	bne.w	81068 <__aeabi_dmul+0x234>
   8121e:	4610      	mov	r0, r2
   81220:	4619      	mov	r1, r3
   81222:	e72c      	b.n	8107e <__aeabi_dmul+0x24a>
   81224:	ea95 0f0c 	teq	r5, ip
   81228:	d106      	bne.n	81238 <__aeabi_ddiv+0x1b0>
   8122a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8122e:	f43f aefd 	beq.w	8102c <__aeabi_dmul+0x1f8>
   81232:	4610      	mov	r0, r2
   81234:	4619      	mov	r1, r3
   81236:	e722      	b.n	8107e <__aeabi_dmul+0x24a>
   81238:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8123c:	bf18      	it	ne
   8123e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   81242:	f47f aec5 	bne.w	80fd0 <__aeabi_dmul+0x19c>
   81246:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   8124a:	f47f af0d 	bne.w	81068 <__aeabi_dmul+0x234>
   8124e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   81252:	f47f aeeb 	bne.w	8102c <__aeabi_dmul+0x1f8>
   81256:	e712      	b.n	8107e <__aeabi_dmul+0x24a>

00081258 <__gedf2>:
   81258:	f04f 3cff 	mov.w	ip, #4294967295
   8125c:	e006      	b.n	8126c <__cmpdf2+0x4>
   8125e:	bf00      	nop

00081260 <__ledf2>:
   81260:	f04f 0c01 	mov.w	ip, #1
   81264:	e002      	b.n	8126c <__cmpdf2+0x4>
   81266:	bf00      	nop

00081268 <__cmpdf2>:
   81268:	f04f 0c01 	mov.w	ip, #1
   8126c:	f84d cd04 	str.w	ip, [sp, #-4]!
   81270:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   81274:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   81278:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8127c:	bf18      	it	ne
   8127e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   81282:	d01b      	beq.n	812bc <__cmpdf2+0x54>
   81284:	b001      	add	sp, #4
   81286:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   8128a:	bf0c      	ite	eq
   8128c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   81290:	ea91 0f03 	teqne	r1, r3
   81294:	bf02      	ittt	eq
   81296:	ea90 0f02 	teqeq	r0, r2
   8129a:	2000      	moveq	r0, #0
   8129c:	4770      	bxeq	lr
   8129e:	f110 0f00 	cmn.w	r0, #0
   812a2:	ea91 0f03 	teq	r1, r3
   812a6:	bf58      	it	pl
   812a8:	4299      	cmppl	r1, r3
   812aa:	bf08      	it	eq
   812ac:	4290      	cmpeq	r0, r2
   812ae:	bf2c      	ite	cs
   812b0:	17d8      	asrcs	r0, r3, #31
   812b2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   812b6:	f040 0001 	orr.w	r0, r0, #1
   812ba:	4770      	bx	lr
   812bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   812c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   812c4:	d102      	bne.n	812cc <__cmpdf2+0x64>
   812c6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   812ca:	d107      	bne.n	812dc <__cmpdf2+0x74>
   812cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   812d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   812d4:	d1d6      	bne.n	81284 <__cmpdf2+0x1c>
   812d6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   812da:	d0d3      	beq.n	81284 <__cmpdf2+0x1c>
   812dc:	f85d 0b04 	ldr.w	r0, [sp], #4
   812e0:	4770      	bx	lr
   812e2:	bf00      	nop

000812e4 <__aeabi_cdrcmple>:
   812e4:	4684      	mov	ip, r0
   812e6:	4610      	mov	r0, r2
   812e8:	4662      	mov	r2, ip
   812ea:	468c      	mov	ip, r1
   812ec:	4619      	mov	r1, r3
   812ee:	4663      	mov	r3, ip
   812f0:	e000      	b.n	812f4 <__aeabi_cdcmpeq>
   812f2:	bf00      	nop

000812f4 <__aeabi_cdcmpeq>:
   812f4:	b501      	push	{r0, lr}
   812f6:	f7ff ffb7 	bl	81268 <__cmpdf2>
   812fa:	2800      	cmp	r0, #0
   812fc:	bf48      	it	mi
   812fe:	f110 0f00 	cmnmi.w	r0, #0
   81302:	bd01      	pop	{r0, pc}

00081304 <__aeabi_dcmpeq>:
   81304:	f84d ed08 	str.w	lr, [sp, #-8]!
   81308:	f7ff fff4 	bl	812f4 <__aeabi_cdcmpeq>
   8130c:	bf0c      	ite	eq
   8130e:	2001      	moveq	r0, #1
   81310:	2000      	movne	r0, #0
   81312:	f85d fb08 	ldr.w	pc, [sp], #8
   81316:	bf00      	nop

00081318 <__aeabi_dcmplt>:
   81318:	f84d ed08 	str.w	lr, [sp, #-8]!
   8131c:	f7ff ffea 	bl	812f4 <__aeabi_cdcmpeq>
   81320:	bf34      	ite	cc
   81322:	2001      	movcc	r0, #1
   81324:	2000      	movcs	r0, #0
   81326:	f85d fb08 	ldr.w	pc, [sp], #8
   8132a:	bf00      	nop

0008132c <__aeabi_dcmple>:
   8132c:	f84d ed08 	str.w	lr, [sp, #-8]!
   81330:	f7ff ffe0 	bl	812f4 <__aeabi_cdcmpeq>
   81334:	bf94      	ite	ls
   81336:	2001      	movls	r0, #1
   81338:	2000      	movhi	r0, #0
   8133a:	f85d fb08 	ldr.w	pc, [sp], #8
   8133e:	bf00      	nop

00081340 <__aeabi_dcmpge>:
   81340:	f84d ed08 	str.w	lr, [sp, #-8]!
   81344:	f7ff ffce 	bl	812e4 <__aeabi_cdrcmple>
   81348:	bf94      	ite	ls
   8134a:	2001      	movls	r0, #1
   8134c:	2000      	movhi	r0, #0
   8134e:	f85d fb08 	ldr.w	pc, [sp], #8
   81352:	bf00      	nop

00081354 <__aeabi_dcmpgt>:
   81354:	f84d ed08 	str.w	lr, [sp, #-8]!
   81358:	f7ff ffc4 	bl	812e4 <__aeabi_cdrcmple>
   8135c:	bf34      	ite	cc
   8135e:	2001      	movcc	r0, #1
   81360:	2000      	movcs	r0, #0
   81362:	f85d fb08 	ldr.w	pc, [sp], #8
   81366:	bf00      	nop

00081368 <__libc_init_array>:
   81368:	b570      	push	{r4, r5, r6, lr}
   8136a:	4e0f      	ldr	r6, [pc, #60]	; (813a8 <__libc_init_array+0x40>)
   8136c:	4d0f      	ldr	r5, [pc, #60]	; (813ac <__libc_init_array+0x44>)
   8136e:	1b76      	subs	r6, r6, r5
   81370:	10b6      	asrs	r6, r6, #2
   81372:	bf18      	it	ne
   81374:	2400      	movne	r4, #0
   81376:	d005      	beq.n	81384 <__libc_init_array+0x1c>
   81378:	3401      	adds	r4, #1
   8137a:	f855 3b04 	ldr.w	r3, [r5], #4
   8137e:	4798      	blx	r3
   81380:	42a6      	cmp	r6, r4
   81382:	d1f9      	bne.n	81378 <__libc_init_array+0x10>
   81384:	4e0a      	ldr	r6, [pc, #40]	; (813b0 <__libc_init_array+0x48>)
   81386:	4d0b      	ldr	r5, [pc, #44]	; (813b4 <__libc_init_array+0x4c>)
   81388:	f000 f8f2 	bl	81570 <_init>
   8138c:	1b76      	subs	r6, r6, r5
   8138e:	10b6      	asrs	r6, r6, #2
   81390:	bf18      	it	ne
   81392:	2400      	movne	r4, #0
   81394:	d006      	beq.n	813a4 <__libc_init_array+0x3c>
   81396:	3401      	adds	r4, #1
   81398:	f855 3b04 	ldr.w	r3, [r5], #4
   8139c:	4798      	blx	r3
   8139e:	42a6      	cmp	r6, r4
   813a0:	d1f9      	bne.n	81396 <__libc_init_array+0x2e>
   813a2:	bd70      	pop	{r4, r5, r6, pc}
   813a4:	bd70      	pop	{r4, r5, r6, pc}
   813a6:	bf00      	nop
   813a8:	0008157c 	.word	0x0008157c
   813ac:	0008157c 	.word	0x0008157c
   813b0:	00081584 	.word	0x00081584
   813b4:	0008157c 	.word	0x0008157c

000813b8 <register_fini>:
   813b8:	4b02      	ldr	r3, [pc, #8]	; (813c4 <register_fini+0xc>)
   813ba:	b113      	cbz	r3, 813c2 <register_fini+0xa>
   813bc:	4802      	ldr	r0, [pc, #8]	; (813c8 <register_fini+0x10>)
   813be:	f000 b805 	b.w	813cc <atexit>
   813c2:	4770      	bx	lr
   813c4:	00000000 	.word	0x00000000
   813c8:	000813d9 	.word	0x000813d9

000813cc <atexit>:
   813cc:	2300      	movs	r3, #0
   813ce:	4601      	mov	r1, r0
   813d0:	461a      	mov	r2, r3
   813d2:	4618      	mov	r0, r3
   813d4:	f000 b81e 	b.w	81414 <__register_exitproc>

000813d8 <__libc_fini_array>:
   813d8:	b538      	push	{r3, r4, r5, lr}
   813da:	4c0a      	ldr	r4, [pc, #40]	; (81404 <__libc_fini_array+0x2c>)
   813dc:	4d0a      	ldr	r5, [pc, #40]	; (81408 <__libc_fini_array+0x30>)
   813de:	1b64      	subs	r4, r4, r5
   813e0:	10a4      	asrs	r4, r4, #2
   813e2:	d00a      	beq.n	813fa <__libc_fini_array+0x22>
   813e4:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   813e8:	3b01      	subs	r3, #1
   813ea:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   813ee:	3c01      	subs	r4, #1
   813f0:	f855 3904 	ldr.w	r3, [r5], #-4
   813f4:	4798      	blx	r3
   813f6:	2c00      	cmp	r4, #0
   813f8:	d1f9      	bne.n	813ee <__libc_fini_array+0x16>
   813fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   813fe:	f000 b8c1 	b.w	81584 <_fini>
   81402:	bf00      	nop
   81404:	00081594 	.word	0x00081594
   81408:	00081590 	.word	0x00081590

0008140c <__retarget_lock_acquire_recursive>:
   8140c:	4770      	bx	lr
   8140e:	bf00      	nop

00081410 <__retarget_lock_release_recursive>:
   81410:	4770      	bx	lr
   81412:	bf00      	nop

00081414 <__register_exitproc>:
   81414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   81418:	4d2c      	ldr	r5, [pc, #176]	; (814cc <__register_exitproc+0xb8>)
   8141a:	4606      	mov	r6, r0
   8141c:	6828      	ldr	r0, [r5, #0]
   8141e:	4698      	mov	r8, r3
   81420:	460f      	mov	r7, r1
   81422:	4691      	mov	r9, r2
   81424:	f7ff fff2 	bl	8140c <__retarget_lock_acquire_recursive>
   81428:	4b29      	ldr	r3, [pc, #164]	; (814d0 <__register_exitproc+0xbc>)
   8142a:	681c      	ldr	r4, [r3, #0]
   8142c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   81430:	2b00      	cmp	r3, #0
   81432:	d03e      	beq.n	814b2 <__register_exitproc+0x9e>
   81434:	685a      	ldr	r2, [r3, #4]
   81436:	2a1f      	cmp	r2, #31
   81438:	dc1c      	bgt.n	81474 <__register_exitproc+0x60>
   8143a:	f102 0e01 	add.w	lr, r2, #1
   8143e:	b176      	cbz	r6, 8145e <__register_exitproc+0x4a>
   81440:	2101      	movs	r1, #1
   81442:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   81446:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   8144a:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   8144e:	4091      	lsls	r1, r2
   81450:	4308      	orrs	r0, r1
   81452:	2e02      	cmp	r6, #2
   81454:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   81458:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   8145c:	d023      	beq.n	814a6 <__register_exitproc+0x92>
   8145e:	3202      	adds	r2, #2
   81460:	f8c3 e004 	str.w	lr, [r3, #4]
   81464:	6828      	ldr	r0, [r5, #0]
   81466:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   8146a:	f7ff ffd1 	bl	81410 <__retarget_lock_release_recursive>
   8146e:	2000      	movs	r0, #0
   81470:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81474:	4b17      	ldr	r3, [pc, #92]	; (814d4 <__register_exitproc+0xc0>)
   81476:	b30b      	cbz	r3, 814bc <__register_exitproc+0xa8>
   81478:	f44f 70c8 	mov.w	r0, #400	; 0x190
   8147c:	f3af 8000 	nop.w
   81480:	4603      	mov	r3, r0
   81482:	b1d8      	cbz	r0, 814bc <__register_exitproc+0xa8>
   81484:	2000      	movs	r0, #0
   81486:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   8148a:	f04f 0e01 	mov.w	lr, #1
   8148e:	6058      	str	r0, [r3, #4]
   81490:	6019      	str	r1, [r3, #0]
   81492:	4602      	mov	r2, r0
   81494:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   81498:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   8149c:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   814a0:	2e00      	cmp	r6, #0
   814a2:	d0dc      	beq.n	8145e <__register_exitproc+0x4a>
   814a4:	e7cc      	b.n	81440 <__register_exitproc+0x2c>
   814a6:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   814aa:	4301      	orrs	r1, r0
   814ac:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   814b0:	e7d5      	b.n	8145e <__register_exitproc+0x4a>
   814b2:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   814b6:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   814ba:	e7bb      	b.n	81434 <__register_exitproc+0x20>
   814bc:	6828      	ldr	r0, [r5, #0]
   814be:	f7ff ffa7 	bl	81410 <__retarget_lock_release_recursive>
   814c2:	f04f 30ff 	mov.w	r0, #4294967295
   814c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   814ca:	bf00      	nop
   814cc:	20000430 	.word	0x20000430
   814d0:	0008156c 	.word	0x0008156c
   814d4:	00000000 	.word	0x00000000
   814d8:	304e4143 	.word	0x304e4143
   814dc:	73656d20 	.word	0x73656d20
   814e0:	65676173 	.word	0x65676173
   814e4:	72726120 	.word	0x72726120
   814e8:	64657669 	.word	0x64657669
   814ec:	206e6920 	.word	0x206e6920
   814f0:	2d6e6f6e 	.word	0x2d6e6f6e
   814f4:	64657375 	.word	0x64657375
   814f8:	69616d20 	.word	0x69616d20
   814fc:	786f626c 	.word	0x786f626c
   81500:	00000d0a 	.word	0x00000d0a
   81504:	72617473 	.word	0x72617473
   81508:	65642074 	.word	0x65642074
   8150c:	0a79616c 	.word	0x0a79616c
   81510:	0000000d 	.word	0x0000000d
   81514:	20646e65 	.word	0x20646e65
   81518:	616c6564 	.word	0x616c6564
   8151c:	000d0a79 	.word	0x000d0a79
   81520:	6c756e28 	.word	0x6c756e28
   81524:	0000296c 	.word	0x0000296c
   81528:	68676968 	.word	0x68676968
   8152c:	726f6373 	.word	0x726f6373
   81530:	73692065 	.word	0x73692065
   81534:	6425203a 	.word	0x6425203a
   81538:	000d0a20 	.word	0x000d0a20
   8153c:	656d6147 	.word	0x656d6147
   81540:	65766f20 	.word	0x65766f20
   81544:	0d0a2172 	.word	0x0d0a2172
   81548:	00000000 	.word	0x00000000
   8154c:	3a525245 	.word	0x3a525245
   81550:	52415520 	.word	0x52415520
   81554:	58522054 	.word	0x58522054
   81558:	66756220 	.word	0x66756220
   8155c:	20726566 	.word	0x20726566
   81560:	66207369 	.word	0x66207369
   81564:	0a6c6c75 	.word	0x0a6c6c75
   81568:	0000000d 	.word	0x0000000d

0008156c <_global_impure_ptr>:
   8156c:	20000008                                ... 

00081570 <_init>:
   81570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81572:	bf00      	nop
   81574:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81576:	bc08      	pop	{r3}
   81578:	469e      	mov	lr, r3
   8157a:	4770      	bx	lr

0008157c <__init_array_start>:
   8157c:	000813b9 	.word	0x000813b9

00081580 <__frame_dummy_init_array_entry>:
   81580:	00080119                                ....

00081584 <_fini>:
   81584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81586:	bf00      	nop
   81588:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8158a:	bc08      	pop	{r3}
   8158c:	469e      	mov	lr, r3
   8158e:	4770      	bx	lr

00081590 <__fini_array_start>:
   81590:	000800f5 	.word	0x000800f5
