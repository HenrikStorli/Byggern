
Node2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bac  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  00080bac  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000098  20000434  00080fe0  00020434  2**2
                  ALLOC
  3 .stack        00000404  200004cc  00081078  00020434  2**0
                  ALLOC
  4 .heap         00000200  200008d0  0008147c  00020434  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002045d  2**0
                  CONTENTS, READONLY
  7 .debug_info   000051ea  00000000  00000000  000204b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000106b  00000000  00000000  000256a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000101c  00000000  00000000  0002670b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000001b0  00000000  00000000  00027727  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000168  00000000  00000000  000278d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00012953  00000000  00000000  00027a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00004112  00000000  00000000  0003a392  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000551ac  00000000  00000000  0003e4a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000500  00000000  00000000  00093650  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	d0 08 00 20 6d 03 08 00 69 03 08 00 69 03 08 00     ... m...i...i...
   80010:	69 03 08 00 69 03 08 00 69 03 08 00 00 00 00 00     i...i...i.......
	...
   8002c:	69 03 08 00 69 03 08 00 00 00 00 00 69 03 08 00     i...i.......i...
   8003c:	69 03 08 00 69 03 08 00 69 03 08 00 69 03 08 00     i...i...i...i...
   8004c:	69 03 08 00 69 03 08 00 69 03 08 00 69 03 08 00     i...i...i...i...
   8005c:	69 03 08 00 41 09 08 00 69 03 08 00 00 00 00 00     i...A...i.......
   8006c:	69 03 08 00 69 03 08 00 69 03 08 00 69 03 08 00     i...i...i...i...
	...
   80084:	69 03 08 00 69 03 08 00 69 03 08 00 69 03 08 00     i...i...i...i...
   80094:	69 03 08 00 69 03 08 00 69 03 08 00 69 03 08 00     i...i...i...i...
   800a4:	00 00 00 00 69 03 08 00 41 08 08 00 69 03 08 00     ....i...A...i...
   800b4:	69 03 08 00 69 03 08 00 69 03 08 00 69 03 08 00     i...i...i...i...
   800c4:	69 03 08 00 69 03 08 00 69 03 08 00 69 03 08 00     i...i...i...i...
   800d4:	69 03 08 00 69 03 08 00 69 03 08 00 69 03 08 00     i...i...i...i...
   800e4:	69 03 08 00 69 03 08 00 d5 02 08 00 69 03 08 00     i...i.......i...

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000434 	.word	0x20000434
   80110:	00000000 	.word	0x00000000
   80114:	00080bac 	.word	0x00080bac

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00080bac 	.word	0x00080bac
   80154:	20000438 	.word	0x20000438
   80158:	00080bac 	.word	0x00080bac
   8015c:	00000000 	.word	0x00000000

00080160 <can_init>:
 * \retval Success(0) or failure(1)
 */


uint8_t can_init(uint32_t can_br, uint8_t num_tx_mb, uint8_t num_rx_mb)
{
   80160:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	
	//Make sure num_rx_mb and num_tx_mb is valid
	if(num_rx_mb > 8 | num_tx_mb > 8 | num_rx_mb + num_tx_mb > 8)
   80164:	1855      	adds	r5, r2, r1
   80166:	2908      	cmp	r1, #8
   80168:	bf98      	it	ls
   8016a:	2a08      	cmpls	r2, #8
   8016c:	d864      	bhi.n	80238 <can_init+0xd8>
   8016e:	460e      	mov	r6, r1
   80170:	2d08      	cmp	r5, #8
   80172:	dc61      	bgt.n	80238 <can_init+0xd8>


	uint32_t ul_status; 
	
	//Disable can
	CAN0->CAN_MR &= ~CAN_MR_CANEN; 
   80174:	4a32      	ldr	r2, [pc, #200]	; (80240 <can_init+0xe0>)
   80176:	6813      	ldr	r3, [r2, #0]
   80178:	f023 0301 	bic.w	r3, r3, #1
   8017c:	6013      	str	r3, [r2, #0]
	//Clear status register on read
	ul_status = CAN0->CAN_SR; 
   8017e:	6913      	ldr	r3, [r2, #16]
	
	
	// Disable interrupts on CANH and CANL pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80180:	4b30      	ldr	r3, [pc, #192]	; (80244 <can_init+0xe4>)
   80182:	f44f 7440 	mov.w	r4, #768	; 0x300
   80186:	645c      	str	r4, [r3, #68]	; 0x44
	
	//Select CAN0 RX and TX in PIOA
	uint32_t ul_sr = PIOA->PIO_ABSR;
   80188:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	PIOA->PIO_ABSR = ~(PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0) & ul_sr;
   8018a:	f024 0403 	bic.w	r4, r4, #3
   8018e:	671c      	str	r4, [r3, #112]	; 0x70
	
	// Disable the Parallel IO (PIO) of the Rx and Tx pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0;
   80190:	2403      	movs	r4, #3
   80192:	605c      	str	r4, [r3, #4]
	
	// Enable pull up on CANH and CANL pin
	PIOA->PIO_PUER = (PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0);
   80194:	665c      	str	r4, [r3, #100]	; 0x64
	
	
	//Enable Clock for CAN0 in PMC
	PMC->PMC_PCR = PMC_PCR_EN | (0 << PMC_PCR_DIV_Pos) | PMC_PCR_CMD | (ID_CAN0 << PMC_PCR_PID_Pos); // DIV = 1(can clk = MCK/2), CMD = 1 (write), PID = 2B (CAN0)
   80196:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   8019a:	4c2b      	ldr	r4, [pc, #172]	; (80248 <can_init+0xe8>)
   8019c:	f8c3 410c 	str.w	r4, [r3, #268]	; 0x10c
	PMC->PMC_PCER1 |= 1 << (ID_CAN0 - 32);
   801a0:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   801a4:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
   801a8:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	
	//Set baudrate, Phase1, phase2 and propagation delay for can bus. Must match on all nodes!
	CAN0->CAN_BR = can_br; 
   801ac:	6150      	str	r0, [r2, #20]
	/****** Start of mailbox configuration ******/

	uint32_t can_ier = 0;

	/* Configure receive mailboxes */
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   801ae:	42a9      	cmp	r1, r5
   801b0:	dc40      	bgt.n	80234 <can_init+0xd4>
   801b2:	460a      	mov	r2, r1
   801b4:	2400      	movs	r4, #0
	{
		CAN0->CAN_MB[n].CAN_MAM = 0; //Accept all messages
   801b6:	46a1      	mov	r9, r4
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   801b8:	f8df 8084 	ldr.w	r8, [pc, #132]	; 80240 <can_init+0xe0>
   801bc:	f04f 5c00 	mov.w	ip, #536870912	; 0x20000000
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_RX);
   801c0:	f04f 7e80 	mov.w	lr, #16777216	; 0x1000000
		CAN0->CAN_MB[n].CAN_MCR |= CAN_MCR_MTCR;

		can_ier |= 1 << n; //Enable interrupt on rx mailbox
   801c4:	2701      	movs	r7, #1
   801c6:	0153      	lsls	r3, r2, #5
   801c8:	f103 2040 	add.w	r0, r3, #1073758208	; 0x40004000
   801cc:	f500 2030 	add.w	r0, r0, #720896	; 0xb0000
		CAN0->CAN_MB[n].CAN_MAM = 0; //Accept all messages
   801d0:	f8c0 9204 	str.w	r9, [r0, #516]	; 0x204
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   801d4:	4443      	add	r3, r8
   801d6:	f8c3 c208 	str.w	ip, [r3, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_RX);
   801da:	f8c0 e200 	str.w	lr, [r0, #512]	; 0x200
		CAN0->CAN_MB[n].CAN_MCR |= CAN_MCR_MTCR;
   801de:	f8d3 021c 	ldr.w	r0, [r3, #540]	; 0x21c
   801e2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   801e6:	f8c3 021c 	str.w	r0, [r3, #540]	; 0x21c
		can_ier |= 1 << n; //Enable interrupt on rx mailbox
   801ea:	fa07 f302 	lsl.w	r3, r7, r2
   801ee:	431c      	orrs	r4, r3
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   801f0:	3201      	adds	r2, #1
   801f2:	4295      	cmp	r5, r2
   801f4:	dae7      	bge.n	801c6 <can_init+0x66>
	}
	
	/*Configure transmit mailboxes */
	for (int n = 0; n < num_tx_mb; n++)
   801f6:	b181      	cbz	r1, 8021a <can_init+0xba>
   801f8:	2300      	movs	r3, #0
	{
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   801fa:	4911      	ldr	r1, [pc, #68]	; (80240 <can_init+0xe0>)
   801fc:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_TX);
   80200:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   80204:	eb01 1243 	add.w	r2, r1, r3, lsl #5
   80208:	f8c2 5208 	str.w	r5, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_TX);
   8020c:	f103 0210 	add.w	r2, r3, #16
   80210:	0152      	lsls	r2, r2, #5
   80212:	5088      	str	r0, [r1, r2]
	for (int n = 0; n < num_tx_mb; n++)
   80214:	3301      	adds	r3, #1
   80216:	429e      	cmp	r6, r3
   80218:	d1f4      	bne.n	80204 <can_init+0xa4>
	}
	
	/****** End of mailbox configuraion ******/

	//Enable interrupt on receive mailboxes
	CAN0->CAN_IER = can_ier;
   8021a:	4b09      	ldr	r3, [pc, #36]	; (80240 <can_init+0xe0>)
   8021c:	605c      	str	r4, [r3, #4]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   8021e:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80222:	4a0a      	ldr	r2, [pc, #40]	; (8024c <can_init+0xec>)
   80224:	6051      	str	r1, [r2, #4]

	//Enable interrupt in NVIC 
	NVIC_EnableIRQ(ID_CAN0);

	//enable CAN
	CAN0->CAN_MR |= CAN_MR_CANEN;
   80226:	681a      	ldr	r2, [r3, #0]
   80228:	f042 0201 	orr.w	r2, r2, #1
   8022c:	601a      	str	r2, [r3, #0]

	return 0;
   8022e:	2000      	movs	r0, #0
   80230:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t can_ier = 0;
   80234:	2400      	movs	r4, #0
   80236:	e7de      	b.n	801f6 <can_init+0x96>
		return 1; //Too many mailboxes is configured
   80238:	2001      	movs	r0, #1
}
   8023a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8023e:	bf00      	nop
   80240:	400b4000 	.word	0x400b4000
   80244:	400e0e00 	.word	0x400e0e00
   80248:	1000102b 	.word	0x1000102b
   8024c:	e000e100 	.word	0xe000e100

00080250 <can_receive>:
 * \retval Success(0) or failure(1)
 */
uint8_t can_receive(CAN_MESSAGE* can_msg, uint8_t rx_mb_id)
{
	//Check that mailbox is ready
	if(CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MRDY)
   80250:	014b      	lsls	r3, r1, #5
   80252:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   80256:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   8025a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   8025e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   80262:	d033      	beq.n	802cc <can_receive+0x7c>
{
   80264:	b430      	push	{r4, r5}
	{
		//Get data from CAN mailbox
		uint32_t data_low = CAN0->CAN_MB[rx_mb_id].CAN_MDL;
   80266:	014b      	lsls	r3, r1, #5
   80268:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   8026c:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   80270:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
		uint32_t data_high = CAN0->CAN_MB[rx_mb_id].CAN_MDH;
   80274:	f8d3 4218 	ldr.w	r4, [r3, #536]	; 0x218
		
		//Get message ID
		can_msg->id = (uint16_t)((CAN0->CAN_MB[rx_mb_id].CAN_MID & CAN_MID_MIDvA_Msk) >> CAN_MID_MIDvA_Pos);
   80278:	f8d3 5208 	ldr.w	r5, [r3, #520]	; 0x208
   8027c:	f3c5 458a 	ubfx	r5, r5, #18, #11
   80280:	8005      	strh	r5, [r0, #0]
		
		//Get data length
		can_msg->data_length = (uint8_t)((CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos);
   80282:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   80286:	f3c3 4303 	ubfx	r3, r3, #16, #4
   8028a:	7083      	strb	r3, [r0, #2]
		
		//Put data in CAN_MESSAGE object
		for(int i = 0; i < can_msg->data_length;i++)
   8028c:	461d      	mov	r5, r3
   8028e:	b15b      	cbz	r3, 802a8 <can_receive+0x58>
   80290:	3003      	adds	r0, #3
   80292:	2300      	movs	r3, #0
		{
			if(i < 4)
   80294:	2b03      	cmp	r3, #3
			{
				can_msg->data[i] = (char)(data_low & 0xff);
   80296:	bfd9      	ittee	le
   80298:	7002      	strble	r2, [r0, #0]
				data_low = data_low >> 8;
   8029a:	0a12      	lsrle	r2, r2, #8
			}
			else
			{
				can_msg->data[i] = (uint8_t)(data_high & 0xff);
   8029c:	7004      	strbgt	r4, [r0, #0]
				data_high = data_high >> 8;
   8029e:	0a24      	lsrgt	r4, r4, #8
		for(int i = 0; i < can_msg->data_length;i++)
   802a0:	3301      	adds	r3, #1
   802a2:	3001      	adds	r0, #1
   802a4:	42ab      	cmp	r3, r5
   802a6:	d1f5      	bne.n	80294 <can_receive+0x44>
			}
		}
		
		//Reset for new receive
		CAN0->CAN_MB[rx_mb_id].CAN_MMR = CAN_MMR_MOT_MB_RX;
   802a8:	4b09      	ldr	r3, [pc, #36]	; (802d0 <can_receive+0x80>)
   802aa:	f101 0210 	add.w	r2, r1, #16
   802ae:	0152      	lsls	r2, r2, #5
   802b0:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   802b4:	5098      	str	r0, [r3, r2]
		CAN0->CAN_MB[rx_mb_id].CAN_MCR |= CAN_MCR_MTCR;
   802b6:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   802ba:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
   802be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   802c2:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
		return 0;
   802c6:	2000      	movs	r0, #0
	}
	else //Mailbox busy
	{
		return 1;
	}
}
   802c8:	bc30      	pop	{r4, r5}
   802ca:	4770      	bx	lr
		return 1;
   802cc:	2001      	movs	r0, #1
   802ce:	4770      	bx	lr
   802d0:	400b4000 	.word	0x400b4000

000802d4 <CAN0_Handler>:
 * \param void
 *
 * \retval 
 */
void CAN0_Handler( void )
{
   802d4:	b510      	push	{r4, lr}
   802d6:	b084      	sub	sp, #16
	if(DEBUG_INTERRUPT)printf("CAN0 interrupt\n\r");
	char can_sr = CAN0->CAN_SR; 
   802d8:	4b1d      	ldr	r3, [pc, #116]	; (80350 <CAN0_Handler+0x7c>)
   802da:	691c      	ldr	r4, [r3, #16]
	
	//RX interrupt
	if(can_sr & (CAN_SR_MB1 | CAN_SR_MB2) )//Only mailbox 1 and 2 specified for receiving
   802dc:	f014 0f06 	tst.w	r4, #6
   802e0:	d020      	beq.n	80324 <CAN0_Handler+0x50>
	{
		CAN_MESSAGE message;
		if(can_sr & CAN_SR_MB1)  //Mailbox 1 event
   802e2:	f014 0f02 	tst.w	r4, #2
   802e6:	d12a      	bne.n	8033e <CAN0_Handler+0x6a>
		{
			can_receive(&message, 1);

		}
		else if(can_sr & CAN_SR_MB2) //Mailbox 2 event
   802e8:	f014 0f04 	tst.w	r4, #4
   802ec:	d02c      	beq.n	80348 <CAN0_Handler+0x74>
		
		{
			can_receive(&message, 2);
   802ee:	2102      	movs	r1, #2
   802f0:	a801      	add	r0, sp, #4
   802f2:	4b18      	ldr	r3, [pc, #96]	; (80354 <CAN0_Handler+0x80>)
   802f4:	4798      	blx	r3
			printf("CAN0 message arrived in non-used mailbox\n\r");
		}

		if(DEBUG_INTERRUPT)printf("message id: %d\n\r", message.id);
		if(DEBUG_INTERRUPT)printf("message data length: %d\n\r", message.data_length);
		for (int i = 0; i < message.data_length; i++)
   802f6:	f89d 2006 	ldrb.w	r2, [sp, #6]
   802fa:	b11a      	cbz	r2, 80304 <CAN0_Handler+0x30>
   802fc:	2300      	movs	r3, #0
   802fe:	3301      	adds	r3, #1
   80300:	4293      	cmp	r3, r2
   80302:	d1fc      	bne.n	802fe <CAN0_Handler+0x2a>
			if(DEBUG_INTERRUPT)printf("%d ", message.data[i]);
		}
		if(DEBUG_INTERRUPT)printf("\n\r");
        
        //Fetching joystick data
        received_joystick_data.posX = (message.data[0]) - 128;
   80304:	4b14      	ldr	r3, [pc, #80]	; (80358 <CAN0_Handler+0x84>)
   80306:	f89d 2007 	ldrb.w	r2, [sp, #7]
   8030a:	3a80      	subs	r2, #128	; 0x80
   8030c:	601a      	str	r2, [r3, #0]
        received_joystick_data.posY = (message.data[1]) - 128;  
   8030e:	f89d 2008 	ldrb.w	r2, [sp, #8]
   80312:	3a80      	subs	r2, #128	; 0x80
   80314:	605a      	str	r2, [r3, #4]
        received_joystick_data.button_pushed = (message.data[2]) % 2;     
   80316:	f89d 2009 	ldrb.w	r2, [sp, #9]
   8031a:	f002 0101 	and.w	r1, r2, #1
   8031e:	7219      	strb	r1, [r3, #8]
        received_joystick_data.joystick_direction = (message.data[2] >> 1);
   80320:	0852      	lsrs	r2, r2, #1
   80322:	725a      	strb	r2, [r3, #9]
	}
	
	if(can_sr & CAN_SR_MB0)
   80324:	f014 0f01 	tst.w	r4, #1
   80328:	d002      	beq.n	80330 <CAN0_Handler+0x5c>
	{
		if(DEBUG_INTERRUPT) printf("CAN0 MB0 ready to send \n\r");
		
	//Disable interrupt
		CAN0->CAN_IDR = CAN_IER_MB0;
   8032a:	2201      	movs	r2, #1
   8032c:	4b08      	ldr	r3, [pc, #32]	; (80350 <CAN0_Handler+0x7c>)
   8032e:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80330:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80334:	4b09      	ldr	r3, [pc, #36]	; (8035c <CAN0_Handler+0x88>)
   80336:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ClearPendingIRQ(ID_CAN0);
	//sei();*/


    
}
   8033a:	b004      	add	sp, #16
   8033c:	bd10      	pop	{r4, pc}
			can_receive(&message, 1);
   8033e:	2101      	movs	r1, #1
   80340:	a801      	add	r0, sp, #4
   80342:	4b04      	ldr	r3, [pc, #16]	; (80354 <CAN0_Handler+0x80>)
   80344:	4798      	blx	r3
   80346:	e7d6      	b.n	802f6 <CAN0_Handler+0x22>
			printf("CAN0 message arrived in non-used mailbox\n\r");
   80348:	4805      	ldr	r0, [pc, #20]	; (80360 <CAN0_Handler+0x8c>)
   8034a:	4b06      	ldr	r3, [pc, #24]	; (80364 <CAN0_Handler+0x90>)
   8034c:	4798      	blx	r3
   8034e:	e7d2      	b.n	802f6 <CAN0_Handler+0x22>
   80350:	400b4000 	.word	0x400b4000
   80354:	00080251 	.word	0x00080251
   80358:	20000458 	.word	0x20000458
   8035c:	e000e100 	.word	0xe000e100
   80360:	00080b18 	.word	0x00080b18
   80364:	000807d9 	.word	0x000807d9

00080368 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80368:	e7fe      	b.n	80368 <Dummy_Handler>
	...

0008036c <Reset_Handler>:
{
   8036c:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
   8036e:	4b18      	ldr	r3, [pc, #96]	; (803d0 <Reset_Handler+0x64>)
   80370:	4a18      	ldr	r2, [pc, #96]	; (803d4 <Reset_Handler+0x68>)
   80372:	429a      	cmp	r2, r3
   80374:	d010      	beq.n	80398 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
   80376:	4b18      	ldr	r3, [pc, #96]	; (803d8 <Reset_Handler+0x6c>)
   80378:	4a15      	ldr	r2, [pc, #84]	; (803d0 <Reset_Handler+0x64>)
   8037a:	429a      	cmp	r2, r3
   8037c:	d20c      	bcs.n	80398 <Reset_Handler+0x2c>
   8037e:	3b01      	subs	r3, #1
   80380:	1a9b      	subs	r3, r3, r2
   80382:	f023 0303 	bic.w	r3, r3, #3
   80386:	3304      	adds	r3, #4
   80388:	4413      	add	r3, r2
   8038a:	4912      	ldr	r1, [pc, #72]	; (803d4 <Reset_Handler+0x68>)
                        *pDest++ = *pSrc++;
   8038c:	f851 0b04 	ldr.w	r0, [r1], #4
   80390:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
   80394:	429a      	cmp	r2, r3
   80396:	d1f9      	bne.n	8038c <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
   80398:	4b10      	ldr	r3, [pc, #64]	; (803dc <Reset_Handler+0x70>)
   8039a:	4a11      	ldr	r2, [pc, #68]	; (803e0 <Reset_Handler+0x74>)
   8039c:	429a      	cmp	r2, r3
   8039e:	d20a      	bcs.n	803b6 <Reset_Handler+0x4a>
   803a0:	3b01      	subs	r3, #1
   803a2:	1a9b      	subs	r3, r3, r2
   803a4:	f023 0303 	bic.w	r3, r3, #3
   803a8:	3304      	adds	r3, #4
   803aa:	4413      	add	r3, r2
                *pDest++ = 0;
   803ac:	2100      	movs	r1, #0
   803ae:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
   803b2:	4293      	cmp	r3, r2
   803b4:	d1fb      	bne.n	803ae <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   803b6:	4b0b      	ldr	r3, [pc, #44]	; (803e4 <Reset_Handler+0x78>)
   803b8:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   803bc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   803c0:	4a09      	ldr	r2, [pc, #36]	; (803e8 <Reset_Handler+0x7c>)
   803c2:	6093      	str	r3, [r2, #8]
        __libc_init_array();
   803c4:	4b09      	ldr	r3, [pc, #36]	; (803ec <Reset_Handler+0x80>)
   803c6:	4798      	blx	r3
        main();
   803c8:	4b09      	ldr	r3, [pc, #36]	; (803f0 <Reset_Handler+0x84>)
   803ca:	4798      	blx	r3
   803cc:	e7fe      	b.n	803cc <Reset_Handler+0x60>
   803ce:	bf00      	nop
   803d0:	20000000 	.word	0x20000000
   803d4:	00080bac 	.word	0x00080bac
   803d8:	20000434 	.word	0x20000434
   803dc:	200004cc 	.word	0x200004cc
   803e0:	20000434 	.word	0x20000434
   803e4:	00080000 	.word	0x00080000
   803e8:	e000ed00 	.word	0xe000ed00
   803ec:	000809a9 	.word	0x000809a9
   803f0:	000804c5 	.word	0x000804c5

000803f4 <SystemInit>:
 * Initialize the System and update the SystemFrequency variable.
 */
void SystemInit( void )
{
  /* Set FWS according to SYS_BOARD_MCKR configuration */
  EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   803f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
   803f8:	4a20      	ldr	r2, [pc, #128]	; (8047c <SystemInit+0x88>)
   803fa:	6013      	str	r3, [r2, #0]
  EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   803fc:	f502 7200 	add.w	r2, r2, #512	; 0x200
   80400:	6013      	str	r3, [r2, #0]

  /* Initialize main oscillator */
  if ( !(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) )
   80402:	4b1f      	ldr	r3, [pc, #124]	; (80480 <SystemInit+0x8c>)
   80404:	6a1b      	ldr	r3, [r3, #32]
   80406:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   8040a:	d107      	bne.n	8041c <SystemInit+0x28>
  {
    PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
   8040c:	4a1d      	ldr	r2, [pc, #116]	; (80484 <SystemInit+0x90>)
   8040e:	4b1c      	ldr	r3, [pc, #112]	; (80480 <SystemInit+0x8c>)
   80410:	621a      	str	r2, [r3, #32]
    while ( !(PMC->PMC_SR & PMC_SR_MOSCXTS) )
   80412:	461a      	mov	r2, r3
   80414:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80416:	f013 0f01 	tst.w	r3, #1
   8041a:	d0fb      	beq.n	80414 <SystemInit+0x20>
    {
    }
  }

  /* Switch to 3-20MHz Xtal oscillator */
  PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;
   8041c:	4a1a      	ldr	r2, [pc, #104]	; (80488 <SystemInit+0x94>)
   8041e:	4b18      	ldr	r3, [pc, #96]	; (80480 <SystemInit+0x8c>)
   80420:	621a      	str	r2, [r3, #32]

  while ( !(PMC->PMC_SR & PMC_SR_MOSCSELS) )
   80422:	461a      	mov	r2, r3
   80424:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80426:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   8042a:	d0fb      	beq.n	80424 <SystemInit+0x30>
  {
  }
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   8042c:	4a14      	ldr	r2, [pc, #80]	; (80480 <SystemInit+0x8c>)
   8042e:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80430:	f023 0303 	bic.w	r3, r3, #3
   80434:	f043 0301 	orr.w	r3, r3, #1
   80438:	6313      	str	r3, [r2, #48]	; 0x30
  while (!(PMC->PMC_SR & PMC_SR_MCKRDY))
   8043a:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8043c:	f013 0f08 	tst.w	r3, #8
   80440:	d0fb      	beq.n	8043a <SystemInit+0x46>
  {
  }

  /* Initialize PLLA */
  PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
   80442:	4a12      	ldr	r2, [pc, #72]	; (8048c <SystemInit+0x98>)
   80444:	4b0e      	ldr	r3, [pc, #56]	; (80480 <SystemInit+0x8c>)
   80446:	629a      	str	r2, [r3, #40]	; 0x28
  while ( !(PMC->PMC_SR & PMC_SR_LOCKA) )
   80448:	461a      	mov	r2, r3
   8044a:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8044c:	f013 0f02 	tst.w	r3, #2
   80450:	d0fb      	beq.n	8044a <SystemInit+0x56>
  {
  }

  /* Switch to main clock */
  PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   80452:	2211      	movs	r2, #17
   80454:	4b0a      	ldr	r3, [pc, #40]	; (80480 <SystemInit+0x8c>)
   80456:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   80458:	461a      	mov	r2, r3
   8045a:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8045c:	f013 0f08 	tst.w	r3, #8
   80460:	d0fb      	beq.n	8045a <SystemInit+0x66>
  {
  }

  /* Switch to PLLA */
  PMC->PMC_MCKR = SYS_BOARD_MCKR;
   80462:	2212      	movs	r2, #18
   80464:	4b06      	ldr	r3, [pc, #24]	; (80480 <SystemInit+0x8c>)
   80466:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   80468:	461a      	mov	r2, r3
   8046a:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8046c:	f013 0f08 	tst.w	r3, #8
   80470:	d0fb      	beq.n	8046a <SystemInit+0x76>
  {
  }

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
   80472:	4a07      	ldr	r2, [pc, #28]	; (80490 <SystemInit+0x9c>)
   80474:	4b07      	ldr	r3, [pc, #28]	; (80494 <SystemInit+0xa0>)
   80476:	601a      	str	r2, [r3, #0]
   80478:	4770      	bx	lr
   8047a:	bf00      	nop
   8047c:	400e0a00 	.word	0x400e0a00
   80480:	400e0600 	.word	0x400e0600
   80484:	00370809 	.word	0x00370809
   80488:	01370809 	.word	0x01370809
   8048c:	200d3f01 	.word	0x200d3f01
   80490:	0501bd00 	.word	0x0501bd00
   80494:	20000000 	.word	0x20000000

00080498 <IR_init>:
 *  Author: Herbe
 */ 
#include "ADC.h"

void IR_init(void){ /* PA16 is A0 https://www.arduino.cc/en/Hacking/PinMappingSAM3X */
    REG_PMC_PCER1 |= (1 << 5);  // enable ADC on ID37 could write ID_ADC?
   80498:	4a09      	ldr	r2, [pc, #36]	; (804c0 <IR_init+0x28>)
   8049a:	6813      	ldr	r3, [r2, #0]
   8049c:	f043 0320 	orr.w	r3, r3, #32
   804a0:	6013      	str	r3, [r2, #0]
   // REG_PIOA_PDR |= (1 << 16); // Disable as gpio pin 
    REG_ADC_MR |= (1 << 7); // ADC in free run mode
   804a2:	f5a2 3201 	sub.w	r2, r2, #132096	; 0x20400
   804a6:	f5a2 723f 	sub.w	r2, r2, #764	; 0x2fc
   804aa:	6813      	ldr	r3, [r2, #0]
   804ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   804b0:	6013      	str	r3, [r2, #0]
    // PIOA->PIO_PDR|= PIO_PDR_P7;
    REG_ADC_CHER |= ADC_CHER_CH7; //enable as adc channel on AD7 extra func     
   804b2:	320c      	adds	r2, #12
   804b4:	6813      	ldr	r3, [r2, #0]
   804b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   804ba:	6013      	str	r3, [r2, #0]
   804bc:	4770      	bx	lr
   804be:	bf00      	nop
   804c0:	400e0700 	.word	0x400e0700

000804c4 <main>:
#include "Timer.h"

#define F_CPU 84E6

int main(void)
{
   804c4:	b508      	push	{r3, lr}
    /* Initialize the SAM system */
    SystemInit();
   804c6:	4b0a      	ldr	r3, [pc, #40]	; (804f0 <main+0x2c>)
   804c8:	4798      	blx	r3
    configure_uart();
   804ca:	4b0a      	ldr	r3, [pc, #40]	; (804f4 <main+0x30>)
   804cc:	4798      	blx	r3
    IR_init();
   804ce:	4b0a      	ldr	r3, [pc, #40]	; (804f8 <main+0x34>)
   804d0:	4798      	blx	r3
    timer_init();
   804d2:	4b0a      	ldr	r3, [pc, #40]	; (804fc <main+0x38>)
   804d4:	4798      	blx	r3
      //init can config     
    uint32_t can_msk = 0x00143555;
    uint8_t can_status = can_init(can_msk, 1, 1);
   804d6:	2201      	movs	r2, #1
   804d8:	4611      	mov	r1, r2
   804da:	4809      	ldr	r0, [pc, #36]	; (80500 <main+0x3c>)
   804dc:	4b09      	ldr	r3, [pc, #36]	; (80504 <main+0x40>)
   804de:	4798      	blx	r3
    
    WDT->WDT_MR = WDT_MR_WDDIS; // Dissable watchdog      
   804e0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   804e4:	4b08      	ldr	r3, [pc, #32]	; (80508 <main+0x44>)
   804e6:	605a      	str	r2, [r3, #4]
    test_message.data[0] = 'H';
    test_message.data[1] = 'E';
    test_message.data[2] = 'I';
    test_message.data_length = 3;
    
    Start_Timer(1);  
   804e8:	2001      	movs	r0, #1
   804ea:	4b08      	ldr	r3, [pc, #32]	; (8050c <main+0x48>)
   804ec:	4798      	blx	r3
   804ee:	e7fe      	b.n	804ee <main+0x2a>
   804f0:	000803f5 	.word	0x000803f5
   804f4:	000808b5 	.word	0x000808b5
   804f8:	00080499 	.word	0x00080499
   804fc:	000807fd 	.word	0x000807fd
   80500:	00143555 	.word	0x00143555
   80504:	00080161 	.word	0x00080161
   80508:	400e1a50 	.word	0x400e1a50
   8050c:	00080895 	.word	0x00080895

00080510 <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
   80510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80514:	460d      	mov	r5, r1
	register int pc = 0, padchar = ' ';

	if (width > 0) {
   80516:	1e16      	subs	r6, r2, #0
   80518:	dd48      	ble.n	805ac <prints+0x9c>
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
   8051a:	780a      	ldrb	r2, [r1, #0]
   8051c:	2a00      	cmp	r2, #0
   8051e:	d035      	beq.n	8058c <prints+0x7c>
   80520:	460a      	mov	r2, r1
   80522:	2400      	movs	r4, #0
   80524:	3401      	adds	r4, #1
   80526:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   8052a:	2900      	cmp	r1, #0
   8052c:	d1fa      	bne.n	80524 <prints+0x14>
		if (len >= width) width = 0;
   8052e:	42a6      	cmp	r6, r4
   80530:	dc2d      	bgt.n	8058e <prints+0x7e>
   80532:	2400      	movs	r4, #0
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
   80534:	f003 0202 	and.w	r2, r3, #2
   80538:	2a00      	cmp	r2, #0
   8053a:	bf0c      	ite	eq
   8053c:	f04f 0820 	moveq.w	r8, #32
   80540:	f04f 0830 	movne.w	r8, #48	; 0x30
	}
	if (!(pad & PAD_RIGHT)) {
   80544:	f013 0301 	ands.w	r3, r3, #1
   80548:	d123      	bne.n	80592 <prints+0x82>
		for ( ; width > 0; --width) {
   8054a:	2c00      	cmp	r4, #0
   8054c:	dd28      	ble.n	805a0 <prints+0x90>
   8054e:	4626      	mov	r6, r4
	(void) uart_putchar(c);  //Send characters to uart
   80550:	fa5f f988 	uxtb.w	r9, r8
   80554:	4f18      	ldr	r7, [pc, #96]	; (805b8 <prints+0xa8>)
   80556:	4648      	mov	r0, r9
   80558:	47b8      	blx	r7
		for ( ; width > 0; --width) {
   8055a:	3e01      	subs	r6, #1
   8055c:	d1fb      	bne.n	80556 <prints+0x46>
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
   8055e:	7828      	ldrb	r0, [r5, #0]
   80560:	b188      	cbz	r0, 80586 <prints+0x76>
	(void) uart_putchar(c);  //Send characters to uart
   80562:	4f15      	ldr	r7, [pc, #84]	; (805b8 <prints+0xa8>)
   80564:	47b8      	blx	r7
		printchar (out, *string);
		++pc;
   80566:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
   80568:	f815 0f01 	ldrb.w	r0, [r5, #1]!
   8056c:	2800      	cmp	r0, #0
   8056e:	d1f9      	bne.n	80564 <prints+0x54>
	}
	for ( ; width > 0; --width) {
   80570:	2e00      	cmp	r6, #0
   80572:	dd08      	ble.n	80586 <prints+0x76>
   80574:	4635      	mov	r5, r6
	(void) uart_putchar(c);  //Send characters to uart
   80576:	fa5f f888 	uxtb.w	r8, r8
   8057a:	4f0f      	ldr	r7, [pc, #60]	; (805b8 <prints+0xa8>)
   8057c:	4640      	mov	r0, r8
   8057e:	47b8      	blx	r7
	for ( ; width > 0; --width) {
   80580:	3d01      	subs	r5, #1
   80582:	d1fb      	bne.n	8057c <prints+0x6c>
   80584:	4434      	add	r4, r6
		printchar (out, padchar);
		++pc;
	}

	return pc;
}
   80586:	4620      	mov	r0, r4
   80588:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		for (ptr = string; *ptr; ++ptr) ++len;
   8058c:	2400      	movs	r4, #0
		else width -= len;
   8058e:	1b34      	subs	r4, r6, r4
   80590:	e7d0      	b.n	80534 <prints+0x24>
   80592:	4626      	mov	r6, r4
	for ( ; *string ; ++string) {
   80594:	7828      	ldrb	r0, [r5, #0]
   80596:	b108      	cbz	r0, 8059c <prints+0x8c>
	register int pc = 0, padchar = ' ';
   80598:	2400      	movs	r4, #0
   8059a:	e7e2      	b.n	80562 <prints+0x52>
   8059c:	2400      	movs	r4, #0
   8059e:	e7e7      	b.n	80570 <prints+0x60>
		for ( ; width > 0; --width) {
   805a0:	4626      	mov	r6, r4
   805a2:	461c      	mov	r4, r3
   805a4:	e7db      	b.n	8055e <prints+0x4e>
	register int pc = 0, padchar = ' ';
   805a6:	f04f 0820 	mov.w	r8, #32
   805aa:	e7d8      	b.n	8055e <prints+0x4e>
	if (!(pad & PAD_RIGHT)) {
   805ac:	f013 0401 	ands.w	r4, r3, #1
   805b0:	d0f9      	beq.n	805a6 <prints+0x96>
	register int pc = 0, padchar = ' ';
   805b2:	f04f 0820 	mov.w	r8, #32
   805b6:	e7ed      	b.n	80594 <prints+0x84>
   805b8:	0008091d 	.word	0x0008091d

000805bc <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
   805bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   805be:	b085      	sub	sp, #20
   805c0:	4607      	mov	r7, r0
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;

	if (i == 0) {
   805c2:	b381      	cbz	r1, 80626 <printi+0x6a>
   805c4:	460c      	mov	r4, r1
		print_buf[0] = '0';
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
	}

	if (sg && b == 10 && i < 0) {
   805c6:	b10b      	cbz	r3, 805cc <printi+0x10>
   805c8:	2a0a      	cmp	r2, #10
   805ca:	d038      	beq.n	8063e <printi+0x82>
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
   805cc:	2300      	movs	r3, #0
   805ce:	f88d 300f 	strb.w	r3, [sp, #15]

	while (u) {
   805d2:	2600      	movs	r6, #0
   805d4:	2900      	cmp	r1, #0
   805d6:	d046      	beq.n	80666 <printi+0xaa>
   805d8:	f10d 050f 	add.w	r5, sp, #15
		t = u % b;
		if( t >= 10 )
			t += letbase - '0' - 10;
   805dc:	990c      	ldr	r1, [sp, #48]	; 0x30
   805de:	393a      	subs	r1, #58	; 0x3a
		t = u % b;
   805e0:	fbb4 f3f2 	udiv	r3, r4, r2
   805e4:	fb02 4313 	mls	r3, r2, r3, r4
		if( t >= 10 )
   805e8:	2b09      	cmp	r3, #9
			t += letbase - '0' - 10;
   805ea:	bfc8      	it	gt
   805ec:	185b      	addgt	r3, r3, r1
		*--s = t + '0';
   805ee:	3330      	adds	r3, #48	; 0x30
   805f0:	f805 3d01 	strb.w	r3, [r5, #-1]!
		u /= b;
   805f4:	fbb4 f4f2 	udiv	r4, r4, r2
	while (u) {
   805f8:	2c00      	cmp	r4, #0
   805fa:	d1f1      	bne.n	805e0 <printi+0x24>
	}

	if (neg) {
   805fc:	b156      	cbz	r6, 80614 <printi+0x58>
		if( width && (pad & PAD_ZERO) ) {
   805fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80600:	b11b      	cbz	r3, 8060a <printi+0x4e>
   80602:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80604:	f013 0f02 	tst.w	r3, #2
   80608:	d125      	bne.n	80656 <printi+0x9a>
			printchar (out, '-');
			++pc;
			--width;
		}
		else {
			*--s = '-';
   8060a:	232d      	movs	r3, #45	; 0x2d
   8060c:	f805 3c01 	strb.w	r3, [r5, #-1]
   80610:	3d01      	subs	r5, #1
	register int t, neg = 0, pc = 0;
   80612:	2600      	movs	r6, #0
		}
	}

	return pc + prints (out, s, width, pad);
   80614:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80616:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80618:	4629      	mov	r1, r5
   8061a:	4638      	mov	r0, r7
   8061c:	4c14      	ldr	r4, [pc, #80]	; (80670 <printi+0xb4>)
   8061e:	47a0      	blx	r4
   80620:	4430      	add	r0, r6
}
   80622:	b005      	add	sp, #20
   80624:	bdf0      	pop	{r4, r5, r6, r7, pc}
		print_buf[0] = '0';
   80626:	2330      	movs	r3, #48	; 0x30
   80628:	f88d 3004 	strb.w	r3, [sp, #4]
		print_buf[1] = '\0';
   8062c:	2300      	movs	r3, #0
   8062e:	f88d 3005 	strb.w	r3, [sp, #5]
		return prints (out, print_buf, width, pad);
   80632:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80634:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80636:	a901      	add	r1, sp, #4
   80638:	4c0d      	ldr	r4, [pc, #52]	; (80670 <printi+0xb4>)
   8063a:	47a0      	blx	r4
   8063c:	e7f1      	b.n	80622 <printi+0x66>
	if (sg && b == 10 && i < 0) {
   8063e:	2900      	cmp	r1, #0
   80640:	dac4      	bge.n	805cc <printi+0x10>
		u = -i;
   80642:	424c      	negs	r4, r1
	*s = '\0';
   80644:	2300      	movs	r3, #0
   80646:	f88d 300f 	strb.w	r3, [sp, #15]
	s = print_buf + PRINT_BUF_LEN-1;
   8064a:	f10d 050f 	add.w	r5, sp, #15
	while (u) {
   8064e:	2c00      	cmp	r4, #0
   80650:	d0d5      	beq.n	805fe <printi+0x42>
		neg = 1;
   80652:	2601      	movs	r6, #1
   80654:	e7c0      	b.n	805d8 <printi+0x1c>
	(void) uart_putchar(c);  //Send characters to uart
   80656:	202d      	movs	r0, #45	; 0x2d
   80658:	4b06      	ldr	r3, [pc, #24]	; (80674 <printi+0xb8>)
   8065a:	4798      	blx	r3
			--width;
   8065c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8065e:	3b01      	subs	r3, #1
   80660:	930a      	str	r3, [sp, #40]	; 0x28
			++pc;
   80662:	2601      	movs	r6, #1
			--width;
   80664:	e7d6      	b.n	80614 <printi+0x58>
	register int t, neg = 0, pc = 0;
   80666:	461e      	mov	r6, r3
	s = print_buf + PRINT_BUF_LEN-1;
   80668:	f10d 050f 	add.w	r5, sp, #15
   8066c:	e7d2      	b.n	80614 <printi+0x58>
   8066e:	bf00      	nop
   80670:	00080511 	.word	0x00080511
   80674:	0008091d 	.word	0x0008091d

00080678 <print>:

static int print( char **out, const char *format, va_list args )
{
   80678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8067c:	b087      	sub	sp, #28
   8067e:	4680      	mov	r8, r0
	register int width, pad;
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
   80680:	780b      	ldrb	r3, [r1, #0]
   80682:	2b00      	cmp	r3, #0
   80684:	f000 8094 	beq.w	807b0 <print+0x138>
   80688:	468b      	mov	fp, r1
   8068a:	4617      	mov	r7, r2
   8068c:	2500      	movs	r5, #0
	(void) uart_putchar(c);  //Send characters to uart
   8068e:	4e4e      	ldr	r6, [pc, #312]	; (807c8 <print+0x150>)
			}
			if( *format == 'c' ) {
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
				scr[1] = '\0';
				pc += prints (out, scr, width, pad);
   80690:	f8df a13c 	ldr.w	sl, [pc, #316]	; 807d0 <print+0x158>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   80694:	f8df 913c 	ldr.w	r9, [pc, #316]	; 807d4 <print+0x15c>
   80698:	e046      	b.n	80728 <print+0xb0>
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   8069a:	2200      	movs	r2, #0
   8069c:	e070      	b.n	80780 <print+0x108>
				register char *s = (char *)va_arg( args, int );
   8069e:	6839      	ldr	r1, [r7, #0]
   806a0:	3704      	adds	r7, #4
				pc += prints (out, s?s:"(null)", width, pad);
   806a2:	484a      	ldr	r0, [pc, #296]	; (807cc <print+0x154>)
   806a4:	2900      	cmp	r1, #0
   806a6:	bf08      	it	eq
   806a8:	4601      	moveq	r1, r0
   806aa:	4640      	mov	r0, r8
   806ac:	47d0      	blx	sl
   806ae:	4405      	add	r5, r0
				continue;
   806b0:	e035      	b.n	8071e <print+0xa6>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
   806b2:	6839      	ldr	r1, [r7, #0]
   806b4:	3704      	adds	r7, #4
   806b6:	2061      	movs	r0, #97	; 0x61
   806b8:	9002      	str	r0, [sp, #8]
   806ba:	9301      	str	r3, [sp, #4]
   806bc:	9200      	str	r2, [sp, #0]
   806be:	2301      	movs	r3, #1
   806c0:	220a      	movs	r2, #10
   806c2:	4640      	mov	r0, r8
   806c4:	47c8      	blx	r9
   806c6:	4405      	add	r5, r0
				continue;
   806c8:	e029      	b.n	8071e <print+0xa6>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
   806ca:	6839      	ldr	r1, [r7, #0]
   806cc:	3704      	adds	r7, #4
   806ce:	2061      	movs	r0, #97	; 0x61
   806d0:	9002      	str	r0, [sp, #8]
   806d2:	9301      	str	r3, [sp, #4]
   806d4:	9200      	str	r2, [sp, #0]
   806d6:	2300      	movs	r3, #0
   806d8:	2210      	movs	r2, #16
   806da:	4640      	mov	r0, r8
   806dc:	47c8      	blx	r9
   806de:	4405      	add	r5, r0
				continue;
   806e0:	e01d      	b.n	8071e <print+0xa6>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
   806e2:	6839      	ldr	r1, [r7, #0]
   806e4:	3704      	adds	r7, #4
   806e6:	2041      	movs	r0, #65	; 0x41
   806e8:	9002      	str	r0, [sp, #8]
   806ea:	9301      	str	r3, [sp, #4]
   806ec:	9200      	str	r2, [sp, #0]
   806ee:	2300      	movs	r3, #0
   806f0:	2210      	movs	r2, #16
   806f2:	4640      	mov	r0, r8
   806f4:	47c8      	blx	r9
   806f6:	4405      	add	r5, r0
				continue;
   806f8:	e011      	b.n	8071e <print+0xa6>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   806fa:	6839      	ldr	r1, [r7, #0]
   806fc:	3704      	adds	r7, #4
   806fe:	2061      	movs	r0, #97	; 0x61
   80700:	9002      	str	r0, [sp, #8]
   80702:	9301      	str	r3, [sp, #4]
   80704:	9200      	str	r2, [sp, #0]
   80706:	2300      	movs	r3, #0
   80708:	220a      	movs	r2, #10
   8070a:	4640      	mov	r0, r8
   8070c:	47c8      	blx	r9
   8070e:	4405      	add	r5, r0
				continue;
   80710:	e005      	b.n	8071e <print+0xa6>
			++format;
   80712:	46a3      	mov	fp, r4
	(void) uart_putchar(c);  //Send characters to uart
   80714:	f89b 0000 	ldrb.w	r0, [fp]
   80718:	47b0      	blx	r6
			}
		}
		else {
		out:
			printchar (out, *format);
			++pc;
   8071a:	3501      	adds	r5, #1
   8071c:	465c      	mov	r4, fp
	for (; *format != 0; ++format) {
   8071e:	f104 0b01 	add.w	fp, r4, #1
   80722:	7863      	ldrb	r3, [r4, #1]
   80724:	2b00      	cmp	r3, #0
   80726:	d044      	beq.n	807b2 <print+0x13a>
		if (*format == '%') {
   80728:	2b25      	cmp	r3, #37	; 0x25
   8072a:	d1f3      	bne.n	80714 <print+0x9c>
			++format;
   8072c:	f10b 0401 	add.w	r4, fp, #1
			if (*format == '\0') break;
   80730:	f89b 3001 	ldrb.w	r3, [fp, #1]
   80734:	2b00      	cmp	r3, #0
   80736:	d03c      	beq.n	807b2 <print+0x13a>
			if (*format == '%') goto out;
   80738:	2b25      	cmp	r3, #37	; 0x25
   8073a:	d0ea      	beq.n	80712 <print+0x9a>
			if (*format == '-') {
   8073c:	2b2d      	cmp	r3, #45	; 0x2d
				++format;
   8073e:	bf06      	itte	eq
   80740:	f10b 0402 	addeq.w	r4, fp, #2
				pad = PAD_RIGHT;
   80744:	2301      	moveq	r3, #1
			width = pad = 0;
   80746:	2300      	movne	r3, #0
			while (*format == '0') {
   80748:	7822      	ldrb	r2, [r4, #0]
   8074a:	2a30      	cmp	r2, #48	; 0x30
   8074c:	d105      	bne.n	8075a <print+0xe2>
				pad |= PAD_ZERO;
   8074e:	f043 0302 	orr.w	r3, r3, #2
			while (*format == '0') {
   80752:	f814 2f01 	ldrb.w	r2, [r4, #1]!
   80756:	2a30      	cmp	r2, #48	; 0x30
   80758:	d0f9      	beq.n	8074e <print+0xd6>
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   8075a:	7821      	ldrb	r1, [r4, #0]
   8075c:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   80760:	b2d2      	uxtb	r2, r2
   80762:	2a09      	cmp	r2, #9
   80764:	d899      	bhi.n	8069a <print+0x22>
   80766:	2200      	movs	r2, #0
				width *= 10;
   80768:	eb02 0282 	add.w	r2, r2, r2, lsl #2
				width += *format - '0';
   8076c:	3930      	subs	r1, #48	; 0x30
   8076e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   80772:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   80776:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   8077a:	b2c0      	uxtb	r0, r0
   8077c:	2809      	cmp	r0, #9
   8077e:	d9f3      	bls.n	80768 <print+0xf0>
			if( *format == 's' ) {
   80780:	2973      	cmp	r1, #115	; 0x73
   80782:	d08c      	beq.n	8069e <print+0x26>
			if( *format == 'd' ) {
   80784:	2964      	cmp	r1, #100	; 0x64
   80786:	d094      	beq.n	806b2 <print+0x3a>
			if( *format == 'x' ) {
   80788:	2978      	cmp	r1, #120	; 0x78
   8078a:	d09e      	beq.n	806ca <print+0x52>
			if( *format == 'X' ) {
   8078c:	2958      	cmp	r1, #88	; 0x58
   8078e:	d0a8      	beq.n	806e2 <print+0x6a>
			if( *format == 'u' ) {
   80790:	2975      	cmp	r1, #117	; 0x75
   80792:	d0b2      	beq.n	806fa <print+0x82>
			if( *format == 'c' ) {
   80794:	2963      	cmp	r1, #99	; 0x63
   80796:	d1c2      	bne.n	8071e <print+0xa6>
				scr[0] = (char)va_arg( args, int );
   80798:	6839      	ldr	r1, [r7, #0]
   8079a:	3704      	adds	r7, #4
   8079c:	f88d 1014 	strb.w	r1, [sp, #20]
				scr[1] = '\0';
   807a0:	2100      	movs	r1, #0
   807a2:	f88d 1015 	strb.w	r1, [sp, #21]
				pc += prints (out, scr, width, pad);
   807a6:	a905      	add	r1, sp, #20
   807a8:	4640      	mov	r0, r8
   807aa:	47d0      	blx	sl
   807ac:	4405      	add	r5, r0
				continue;
   807ae:	e7b6      	b.n	8071e <print+0xa6>
	register int pc = 0;
   807b0:	2500      	movs	r5, #0
		}
	}
	if (out) **out = '\0';
   807b2:	f1b8 0f00 	cmp.w	r8, #0
   807b6:	d003      	beq.n	807c0 <print+0x148>
   807b8:	f8d8 3000 	ldr.w	r3, [r8]
   807bc:	2200      	movs	r2, #0
   807be:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
}
   807c0:	4628      	mov	r0, r5
   807c2:	b007      	add	sp, #28
   807c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   807c8:	0008091d 	.word	0x0008091d
   807cc:	00080b44 	.word	0x00080b44
   807d0:	00080511 	.word	0x00080511
   807d4:	000805bd 	.word	0x000805bd

000807d8 <printf>:

int printf(const char *format, ...)
{
   807d8:	b40f      	push	{r0, r1, r2, r3}
   807da:	b500      	push	{lr}
   807dc:	b083      	sub	sp, #12
   807de:	aa04      	add	r2, sp, #16
   807e0:	f852 1b04 	ldr.w	r1, [r2], #4
        va_list args;
        
        va_start( args, format );
   807e4:	9201      	str	r2, [sp, #4]
        return print( 0, format, args );
   807e6:	2000      	movs	r0, #0
   807e8:	4b03      	ldr	r3, [pc, #12]	; (807f8 <printf+0x20>)
   807ea:	4798      	blx	r3
}
   807ec:	b003      	add	sp, #12
   807ee:	f85d eb04 	ldr.w	lr, [sp], #4
   807f2:	b004      	add	sp, #16
   807f4:	4770      	bx	lr
   807f6:	bf00      	nop
   807f8:	00080679 	.word	0x00080679

000807fc <timer_init>:

volatile uint32_t highscore = 0;
volatile uint16_t status = 0;

uint32_t timer_init(void){
    REG_PMC_PCER0 |= (1 << ID_PIOB) | (1 << ID_TC0); //enable timer in power controller
   807fc:	4a0c      	ldr	r2, [pc, #48]	; (80830 <timer_init+0x34>)
   807fe:	6813      	ldr	r3, [r2, #0]
   80800:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   80804:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   80808:	6013      	str	r3, [r2, #0]

    // HIGHSCORE TIMING SETUP //    
    TC0->TC_CHANNEL[0].TC_IER |= TC_IER_CPCS
   8080a:	4b0a      	ldr	r3, [pc, #40]	; (80834 <timer_init+0x38>)
   8080c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   8080e:	f042 0214 	orr.w	r2, r2, #20
   80812:	625a      	str	r2, [r3, #36]	; 0x24
                              | TC_IER_CPAS;
    TC0->TC_CHANNEL[0].TC_CCR |= TC_CCR_CLKEN;    
   80814:	681a      	ldr	r2, [r3, #0]
   80816:	f042 0201 	orr.w	r2, r2, #1
   8081a:	601a      	str	r2, [r3, #0]
    uint16_t RC_count = 39400; // to have ish 1000 points per min (16,67Hz)
    TC0->TC_CHANNEL[0].TC_RC = RC_count; // Set Compare RA        
   8081c:	f649 12e8 	movw	r2, #39400	; 0x99e8
   80820:	61da      	str	r2, [r3, #28]
    TC0->TC_CHANNEL[0].TC_CMR = TC_CMR_TCCLKS_TIMER_CLOCK4  // prescale of 128
   80822:	4a05      	ldr	r2, [pc, #20]	; (80838 <timer_init+0x3c>)
   80824:	605a      	str	r2, [r3, #4]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80826:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   8082a:	4b04      	ldr	r3, [pc, #16]	; (8083c <timer_init+0x40>)
   8082c:	601a      	str	r2, [r3, #0]
                               | TC_CMR_WAVE                // waveform mode
                               | TC_CMR_WAVSEL_UP_RC        // compare rising edge on RC
                               | TC_CMR_ACPC_SET;           //     
    NVIC_EnableIRQ(ID_TC0); 
}
   8082e:	4770      	bx	lr
   80830:	400e0610 	.word	0x400e0610
   80834:	40080000 	.word	0x40080000
   80838:	0004c003 	.word	0x0004c003
   8083c:	e000e100 	.word	0xe000e100

00080840 <TC0_Handler>:
void TC0_Handler(void){
   80840:	b508      	push	{r3, lr}
    uint16_t status =  TC0->TC_CHANNEL[0].TC_SR;
   80842:	4b0e      	ldr	r3, [pc, #56]	; (8087c <TC0_Handler+0x3c>)
   80844:	6a1b      	ldr	r3, [r3, #32]
    //if(TC0->TC_CHANNEL[0].TC_SR == TC_SR_COVFS){
    highscore++;
   80846:	4b0e      	ldr	r3, [pc, #56]	; (80880 <TC0_Handler+0x40>)
   80848:	681a      	ldr	r2, [r3, #0]
   8084a:	3201      	adds	r2, #1
   8084c:	601a      	str	r2, [r3, #0]
    //}
    if (!(highscore %1000)) {
   8084e:	681a      	ldr	r2, [r3, #0]
   80850:	4b0c      	ldr	r3, [pc, #48]	; (80884 <TC0_Handler+0x44>)
   80852:	fba3 1302 	umull	r1, r3, r3, r2
   80856:	099b      	lsrs	r3, r3, #6
   80858:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   8085c:	fb01 2313 	mls	r3, r1, r3, r2
   80860:	b12b      	cbz	r3, 8086e <TC0_Handler+0x2e>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80862:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   80866:	4b08      	ldr	r3, [pc, #32]	; (80888 <TC0_Handler+0x48>)
   80868:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   8086c:	bd08      	pop	{r3, pc}
    printf("highscore is: %lui \n\r", highscore);   
   8086e:	4b04      	ldr	r3, [pc, #16]	; (80880 <TC0_Handler+0x40>)
   80870:	6819      	ldr	r1, [r3, #0]
   80872:	4806      	ldr	r0, [pc, #24]	; (8088c <TC0_Handler+0x4c>)
   80874:	4b06      	ldr	r3, [pc, #24]	; (80890 <TC0_Handler+0x50>)
   80876:	4798      	blx	r3
   80878:	e7f3      	b.n	80862 <TC0_Handler+0x22>
   8087a:	bf00      	nop
   8087c:	40080000 	.word	0x40080000
   80880:	20000450 	.word	0x20000450
   80884:	10624dd3 	.word	0x10624dd3
   80888:	e000e100 	.word	0xe000e100
   8088c:	00080b4c 	.word	0x00080b4c
   80890:	000807d9 	.word	0x000807d9

00080894 <Start_Timer>:
//interrupt vect
//nvic


void Start_Timer(uint8_t state){
    if(state == 1){
   80894:	2801      	cmp	r0, #1
   80896:	d004      	beq.n	808a2 <Start_Timer+0xe>
        TC0->TC_CHANNEL[0].TC_CCR |= TC_CCR_SWTRG
                                   | TC_CCR_CLKEN;         
    }
    else if(state == 0) {
   80898:	b910      	cbnz	r0, 808a0 <Start_Timer+0xc>
        TC0->TC_CHANNEL[0].TC_CCR = TC_CCR_CLKDIS;         
   8089a:	2202      	movs	r2, #2
   8089c:	4b04      	ldr	r3, [pc, #16]	; (808b0 <Start_Timer+0x1c>)
   8089e:	601a      	str	r2, [r3, #0]
   808a0:	4770      	bx	lr
        TC0->TC_CHANNEL[0].TC_CCR |= TC_CCR_SWTRG
   808a2:	4a03      	ldr	r2, [pc, #12]	; (808b0 <Start_Timer+0x1c>)
   808a4:	6813      	ldr	r3, [r2, #0]
   808a6:	f043 0305 	orr.w	r3, r3, #5
   808aa:	6013      	str	r3, [r2, #0]
   808ac:	4770      	bx	lr
   808ae:	bf00      	nop
   808b0:	40080000 	.word	0x40080000

000808b4 <configure_uart>:
	uint32_t ul_sr;

/*
Initialize UART ring buffer as empty
*/
rx_buffer.head=0;
   808b4:	4b16      	ldr	r3, [pc, #88]	; (80910 <configure_uart+0x5c>)
   808b6:	2200      	movs	r2, #0
   808b8:	701a      	strb	r2, [r3, #0]
rx_buffer.tail=0;
   808ba:	705a      	strb	r2, [r3, #1]
/*
Initialize UART communication
*/
	// Pin configuration
	// Disable interrupts on Uart receive (URXD) and transmit (UTXD) pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   808bc:	4b15      	ldr	r3, [pc, #84]	; (80914 <configure_uart+0x60>)
   808be:	f44f 7140 	mov.w	r1, #768	; 0x300
   808c2:	6459      	str	r1, [r3, #68]	; 0x44

	// Disable the Parallel IO (PIO) of the URXD and UTXD pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   808c4:	6059      	str	r1, [r3, #4]

	// Read current peripheral AB select register and set the UTXD and URXD pins to 0 (UART is connected as peripheral A)
	ul_sr = PIOA->PIO_ABSR;
   808c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	PIOA->PIO_ABSR &= ~(PIO_PA8A_URXD | PIO_PA9A_UTXD) & ul_sr;
   808c8:	6f18      	ldr	r0, [r3, #112]	; 0x70
   808ca:	4002      	ands	r2, r0
   808cc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   808d0:	671a      	str	r2, [r3, #112]	; 0x70

	// Enable pull up resistor on URXD and UTXD pin
	PIOA->PIO_PUER = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   808d2:	6659      	str	r1, [r3, #100]	; 0x64

	// Uart configuration
	
	// Enable the peripheral UART controller in Power Management Controller (PMC)
	PMC->PMC_PCER0 = 1 << ID_UART;
   808d4:	f44f 7280 	mov.w	r2, #256	; 0x100
   808d8:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   808dc:	611a      	str	r2, [r3, #16]

	// Reset and disable receiver and transmitter
	UART->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX | UART_CR_RXDIS | UART_CR_TXDIS;
   808de:	f503 7300 	add.w	r3, r3, #512	; 0x200
   808e2:	21ac      	movs	r1, #172	; 0xac
   808e4:	6019      	str	r1, [r3, #0]

	// Set the baudrate
	UART->UART_BRGR = 547; // MCK / 16 * x = BaudRate (write x into UART_BRGR)  
   808e6:	f240 2123 	movw	r1, #547	; 0x223
   808ea:	6219      	str	r1, [r3, #32]

	// No parity bits
	UART->UART_MR = UART_MR_PAR_NO | UART_MR_CHMODE_NORMAL;	
   808ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
   808f0:	6059      	str	r1, [r3, #4]

	// Disable PDC channel
	UART->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   808f2:	f240 2102 	movw	r1, #514	; 0x202
   808f6:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120

	// Configure interrupts on receive ready and errors
	UART->UART_IDR = 0xFFFFFFFF;
   808fa:	f04f 31ff 	mov.w	r1, #4294967295
   808fe:	60d9      	str	r1, [r3, #12]
	UART->UART_IER = UART_IER_RXRDY | UART_IER_OVRE | UART_IER_FRAME | UART_IER_PARE;
   80900:	21e1      	movs	r1, #225	; 0xe1
   80902:	6099      	str	r1, [r3, #8]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80904:	4904      	ldr	r1, [pc, #16]	; (80918 <configure_uart+0x64>)
   80906:	600a      	str	r2, [r1, #0]

	// Enable UART interrupt in the Nested Vectored Interrupt Controller(NVIC)
	NVIC_EnableIRQ((IRQn_Type) ID_UART);

	// Enable UART receiver and transmitter
	UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80908:	2250      	movs	r2, #80	; 0x50
   8090a:	601a      	str	r2, [r3, #0]
   8090c:	4770      	bx	lr
   8090e:	bf00      	nop
   80910:	20000464 	.word	0x20000464
   80914:	400e0e00 	.word	0x400e0e00
   80918:	e000e100 	.word	0xe000e100

0008091c <uart_putchar>:
 * \retval Success(0) or failure(1).
 */
int uart_putchar(const uint8_t c)
{
	// Check if the transmitter is ready
	if((UART->UART_SR & UART_SR_TXRDY) != UART_SR_TXRDY)
   8091c:	4b07      	ldr	r3, [pc, #28]	; (8093c <uart_putchar+0x20>)
   8091e:	695b      	ldr	r3, [r3, #20]
   80920:	f013 0f02 	tst.w	r3, #2
   80924:	d008      	beq.n	80938 <uart_putchar+0x1c>
	return 1;

	// Send the character
	UART->UART_THR = c;
   80926:	4b05      	ldr	r3, [pc, #20]	; (8093c <uart_putchar+0x20>)
   80928:	61d8      	str	r0, [r3, #28]
	while(!((UART->UART_SR) & UART_SR_TXEMPTY)); // Wait for the character to be sent, can implement ring buffer to remove the wait
   8092a:	461a      	mov	r2, r3
   8092c:	6953      	ldr	r3, [r2, #20]
   8092e:	f413 7f00 	tst.w	r3, #512	; 0x200
   80932:	d0fb      	beq.n	8092c <uart_putchar+0x10>
	return 0;
   80934:	2000      	movs	r0, #0
   80936:	4770      	bx	lr
	return 1;
   80938:	2001      	movs	r0, #1
}
   8093a:	4770      	bx	lr
   8093c:	400e0800 	.word	0x400e0800

00080940 <UART_Handler>:

void UART_Handler(void)
{
   80940:	b508      	push	{r3, lr}
	uint32_t status = UART->UART_SR;
   80942:	4b15      	ldr	r3, [pc, #84]	; (80998 <UART_Handler+0x58>)
   80944:	695b      	ldr	r3, [r3, #20]
	
	//Reset UART at overflow error and frame error
	if(status & (UART_SR_OVRE | UART_SR_FRAME | UART_SR_PARE))
   80946:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   8094a:	d003      	beq.n	80954 <UART_Handler+0x14>
	{
		UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN | UART_CR_RSTSTA;
   8094c:	f44f 71a8 	mov.w	r1, #336	; 0x150
   80950:	4a11      	ldr	r2, [pc, #68]	; (80998 <UART_Handler+0x58>)
   80952:	6011      	str	r1, [r2, #0]
	}
	
	//Check if message is ready to be received
	if(status & UART_SR_RXRDY)
   80954:	f013 0f01 	tst.w	r3, #1
   80958:	d012      	beq.n	80980 <UART_Handler+0x40>
	{
		//Check if receive ring buffer is full and 
		if((rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE == rx_buffer.head)
   8095a:	4810      	ldr	r0, [pc, #64]	; (8099c <UART_Handler+0x5c>)
   8095c:	7842      	ldrb	r2, [r0, #1]
   8095e:	1c53      	adds	r3, r2, #1
   80960:	4259      	negs	r1, r3
   80962:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   80966:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   8096a:	bf58      	it	pl
   8096c:	424b      	negpl	r3, r1
   8096e:	7801      	ldrb	r1, [r0, #0]
   80970:	428b      	cmp	r3, r1
   80972:	d006      	beq.n	80982 <UART_Handler+0x42>
		{
			printf("ERR: UART RX buffer is full\n\r");
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
			return;
		}
		rx_buffer.data[rx_buffer.tail] = UART->UART_RHR;
   80974:	4908      	ldr	r1, [pc, #32]	; (80998 <UART_Handler+0x58>)
   80976:	6988      	ldr	r0, [r1, #24]
   80978:	4908      	ldr	r1, [pc, #32]	; (8099c <UART_Handler+0x5c>)
   8097a:	440a      	add	r2, r1
   8097c:	7090      	strb	r0, [r2, #2]
		rx_buffer.tail = (rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE;
   8097e:	704b      	strb	r3, [r1, #1]
   80980:	bd08      	pop	{r3, pc}
			printf("ERR: UART RX buffer is full\n\r");
   80982:	4807      	ldr	r0, [pc, #28]	; (809a0 <UART_Handler+0x60>)
   80984:	4b07      	ldr	r3, [pc, #28]	; (809a4 <UART_Handler+0x64>)
   80986:	4798      	blx	r3
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
   80988:	4b03      	ldr	r3, [pc, #12]	; (80998 <UART_Handler+0x58>)
   8098a:	699a      	ldr	r2, [r3, #24]
   8098c:	4b03      	ldr	r3, [pc, #12]	; (8099c <UART_Handler+0x5c>)
   8098e:	7859      	ldrb	r1, [r3, #1]
   80990:	440b      	add	r3, r1
   80992:	709a      	strb	r2, [r3, #2]
			return;
   80994:	bd08      	pop	{r3, pc}
   80996:	bf00      	nop
   80998:	400e0800 	.word	0x400e0800
   8099c:	20000464 	.word	0x20000464
   809a0:	00080b64 	.word	0x00080b64
   809a4:	000807d9 	.word	0x000807d9

000809a8 <__libc_init_array>:
   809a8:	b570      	push	{r4, r5, r6, lr}
   809aa:	4e0f      	ldr	r6, [pc, #60]	; (809e8 <__libc_init_array+0x40>)
   809ac:	4d0f      	ldr	r5, [pc, #60]	; (809ec <__libc_init_array+0x44>)
   809ae:	1b76      	subs	r6, r6, r5
   809b0:	10b6      	asrs	r6, r6, #2
   809b2:	bf18      	it	ne
   809b4:	2400      	movne	r4, #0
   809b6:	d005      	beq.n	809c4 <__libc_init_array+0x1c>
   809b8:	3401      	adds	r4, #1
   809ba:	f855 3b04 	ldr.w	r3, [r5], #4
   809be:	4798      	blx	r3
   809c0:	42a6      	cmp	r6, r4
   809c2:	d1f9      	bne.n	809b8 <__libc_init_array+0x10>
   809c4:	4e0a      	ldr	r6, [pc, #40]	; (809f0 <__libc_init_array+0x48>)
   809c6:	4d0b      	ldr	r5, [pc, #44]	; (809f4 <__libc_init_array+0x4c>)
   809c8:	f000 f8de 	bl	80b88 <_init>
   809cc:	1b76      	subs	r6, r6, r5
   809ce:	10b6      	asrs	r6, r6, #2
   809d0:	bf18      	it	ne
   809d2:	2400      	movne	r4, #0
   809d4:	d006      	beq.n	809e4 <__libc_init_array+0x3c>
   809d6:	3401      	adds	r4, #1
   809d8:	f855 3b04 	ldr.w	r3, [r5], #4
   809dc:	4798      	blx	r3
   809de:	42a6      	cmp	r6, r4
   809e0:	d1f9      	bne.n	809d6 <__libc_init_array+0x2e>
   809e2:	bd70      	pop	{r4, r5, r6, pc}
   809e4:	bd70      	pop	{r4, r5, r6, pc}
   809e6:	bf00      	nop
   809e8:	00080b94 	.word	0x00080b94
   809ec:	00080b94 	.word	0x00080b94
   809f0:	00080b9c 	.word	0x00080b9c
   809f4:	00080b94 	.word	0x00080b94

000809f8 <register_fini>:
   809f8:	4b02      	ldr	r3, [pc, #8]	; (80a04 <register_fini+0xc>)
   809fa:	b113      	cbz	r3, 80a02 <register_fini+0xa>
   809fc:	4802      	ldr	r0, [pc, #8]	; (80a08 <register_fini+0x10>)
   809fe:	f000 b805 	b.w	80a0c <atexit>
   80a02:	4770      	bx	lr
   80a04:	00000000 	.word	0x00000000
   80a08:	00080a19 	.word	0x00080a19

00080a0c <atexit>:
   80a0c:	2300      	movs	r3, #0
   80a0e:	4601      	mov	r1, r0
   80a10:	461a      	mov	r2, r3
   80a12:	4618      	mov	r0, r3
   80a14:	f000 b81e 	b.w	80a54 <__register_exitproc>

00080a18 <__libc_fini_array>:
   80a18:	b538      	push	{r3, r4, r5, lr}
   80a1a:	4c0a      	ldr	r4, [pc, #40]	; (80a44 <__libc_fini_array+0x2c>)
   80a1c:	4d0a      	ldr	r5, [pc, #40]	; (80a48 <__libc_fini_array+0x30>)
   80a1e:	1b64      	subs	r4, r4, r5
   80a20:	10a4      	asrs	r4, r4, #2
   80a22:	d00a      	beq.n	80a3a <__libc_fini_array+0x22>
   80a24:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   80a28:	3b01      	subs	r3, #1
   80a2a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   80a2e:	3c01      	subs	r4, #1
   80a30:	f855 3904 	ldr.w	r3, [r5], #-4
   80a34:	4798      	blx	r3
   80a36:	2c00      	cmp	r4, #0
   80a38:	d1f9      	bne.n	80a2e <__libc_fini_array+0x16>
   80a3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   80a3e:	f000 b8ad 	b.w	80b9c <_fini>
   80a42:	bf00      	nop
   80a44:	00080bac 	.word	0x00080bac
   80a48:	00080ba8 	.word	0x00080ba8

00080a4c <__retarget_lock_acquire_recursive>:
   80a4c:	4770      	bx	lr
   80a4e:	bf00      	nop

00080a50 <__retarget_lock_release_recursive>:
   80a50:	4770      	bx	lr
   80a52:	bf00      	nop

00080a54 <__register_exitproc>:
   80a54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80a58:	4d2c      	ldr	r5, [pc, #176]	; (80b0c <__register_exitproc+0xb8>)
   80a5a:	4606      	mov	r6, r0
   80a5c:	6828      	ldr	r0, [r5, #0]
   80a5e:	4698      	mov	r8, r3
   80a60:	460f      	mov	r7, r1
   80a62:	4691      	mov	r9, r2
   80a64:	f7ff fff2 	bl	80a4c <__retarget_lock_acquire_recursive>
   80a68:	4b29      	ldr	r3, [pc, #164]	; (80b10 <__register_exitproc+0xbc>)
   80a6a:	681c      	ldr	r4, [r3, #0]
   80a6c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   80a70:	2b00      	cmp	r3, #0
   80a72:	d03e      	beq.n	80af2 <__register_exitproc+0x9e>
   80a74:	685a      	ldr	r2, [r3, #4]
   80a76:	2a1f      	cmp	r2, #31
   80a78:	dc1c      	bgt.n	80ab4 <__register_exitproc+0x60>
   80a7a:	f102 0e01 	add.w	lr, r2, #1
   80a7e:	b176      	cbz	r6, 80a9e <__register_exitproc+0x4a>
   80a80:	2101      	movs	r1, #1
   80a82:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   80a86:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   80a8a:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   80a8e:	4091      	lsls	r1, r2
   80a90:	4308      	orrs	r0, r1
   80a92:	2e02      	cmp	r6, #2
   80a94:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80a98:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   80a9c:	d023      	beq.n	80ae6 <__register_exitproc+0x92>
   80a9e:	3202      	adds	r2, #2
   80aa0:	f8c3 e004 	str.w	lr, [r3, #4]
   80aa4:	6828      	ldr	r0, [r5, #0]
   80aa6:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   80aaa:	f7ff ffd1 	bl	80a50 <__retarget_lock_release_recursive>
   80aae:	2000      	movs	r0, #0
   80ab0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80ab4:	4b17      	ldr	r3, [pc, #92]	; (80b14 <__register_exitproc+0xc0>)
   80ab6:	b30b      	cbz	r3, 80afc <__register_exitproc+0xa8>
   80ab8:	f44f 70c8 	mov.w	r0, #400	; 0x190
   80abc:	f3af 8000 	nop.w
   80ac0:	4603      	mov	r3, r0
   80ac2:	b1d8      	cbz	r0, 80afc <__register_exitproc+0xa8>
   80ac4:	2000      	movs	r0, #0
   80ac6:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   80aca:	f04f 0e01 	mov.w	lr, #1
   80ace:	6058      	str	r0, [r3, #4]
   80ad0:	6019      	str	r1, [r3, #0]
   80ad2:	4602      	mov	r2, r0
   80ad4:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80ad8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80adc:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   80ae0:	2e00      	cmp	r6, #0
   80ae2:	d0dc      	beq.n	80a9e <__register_exitproc+0x4a>
   80ae4:	e7cc      	b.n	80a80 <__register_exitproc+0x2c>
   80ae6:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   80aea:	4301      	orrs	r1, r0
   80aec:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   80af0:	e7d5      	b.n	80a9e <__register_exitproc+0x4a>
   80af2:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   80af6:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80afa:	e7bb      	b.n	80a74 <__register_exitproc+0x20>
   80afc:	6828      	ldr	r0, [r5, #0]
   80afe:	f7ff ffa7 	bl	80a50 <__retarget_lock_release_recursive>
   80b02:	f04f 30ff 	mov.w	r0, #4294967295
   80b06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80b0a:	bf00      	nop
   80b0c:	20000430 	.word	0x20000430
   80b10:	00080b84 	.word	0x00080b84
   80b14:	00000000 	.word	0x00000000
   80b18:	304e4143 	.word	0x304e4143
   80b1c:	73656d20 	.word	0x73656d20
   80b20:	65676173 	.word	0x65676173
   80b24:	72726120 	.word	0x72726120
   80b28:	64657669 	.word	0x64657669
   80b2c:	206e6920 	.word	0x206e6920
   80b30:	2d6e6f6e 	.word	0x2d6e6f6e
   80b34:	64657375 	.word	0x64657375
   80b38:	69616d20 	.word	0x69616d20
   80b3c:	786f626c 	.word	0x786f626c
   80b40:	00000d0a 	.word	0x00000d0a
   80b44:	6c756e28 	.word	0x6c756e28
   80b48:	0000296c 	.word	0x0000296c
   80b4c:	68676968 	.word	0x68676968
   80b50:	726f6373 	.word	0x726f6373
   80b54:	73692065 	.word	0x73692065
   80b58:	6c25203a 	.word	0x6c25203a
   80b5c:	0a206975 	.word	0x0a206975
   80b60:	0000000d 	.word	0x0000000d
   80b64:	3a525245 	.word	0x3a525245
   80b68:	52415520 	.word	0x52415520
   80b6c:	58522054 	.word	0x58522054
   80b70:	66756220 	.word	0x66756220
   80b74:	20726566 	.word	0x20726566
   80b78:	66207369 	.word	0x66207369
   80b7c:	0a6c6c75 	.word	0x0a6c6c75
   80b80:	0000000d 	.word	0x0000000d

00080b84 <_global_impure_ptr>:
   80b84:	20000008                                ... 

00080b88 <_init>:
   80b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80b8a:	bf00      	nop
   80b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80b8e:	bc08      	pop	{r3}
   80b90:	469e      	mov	lr, r3
   80b92:	4770      	bx	lr

00080b94 <__init_array_start>:
   80b94:	000809f9 	.word	0x000809f9

00080b98 <__frame_dummy_init_array_entry>:
   80b98:	00080119                                ....

00080b9c <_fini>:
   80b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80b9e:	bf00      	nop
   80ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80ba2:	bc08      	pop	{r3}
   80ba4:	469e      	mov	lr, r3
   80ba6:	4770      	bx	lr

00080ba8 <__fini_array_start>:
   80ba8:	000800f5 	.word	0x000800f5
