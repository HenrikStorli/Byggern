
Node2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001d5c  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  00081d5c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000009c  20000434  00082190  00020434  2**2
                  ALLOC
  3 .stack        00000400  200004d0  0008222c  00020434  2**0
                  ALLOC
  4 .heap         00000200  200008d0  0008262c  00020434  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002045d  2**0
                  CONTENTS, READONLY
  7 .debug_info   000064a3  00000000  00000000  000204b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000148b  00000000  00000000  00026959  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000132e  00000000  00000000  00027de4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000240  00000000  00000000  00029112  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001d8  00000000  00000000  00029352  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000131bf  00000000  00000000  0002952a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005176  00000000  00000000  0003c6e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000553e8  00000000  00000000  0004185f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000990  00000000  00000000  00096c48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	d0 08 00 20 75 03 08 00 71 03 08 00 71 03 08 00     ... u...q...q...
   80010:	71 03 08 00 71 03 08 00 71 03 08 00 00 00 00 00     q...q...q.......
	...
   8002c:	71 03 08 00 71 03 08 00 00 00 00 00 71 03 08 00     q...q.......q...
   8003c:	71 03 08 00 71 03 08 00 71 03 08 00 71 03 08 00     q...q...q...q...
   8004c:	71 03 08 00 71 03 08 00 71 03 08 00 71 03 08 00     q...q...q...q...
   8005c:	71 03 08 00 41 0b 08 00 71 03 08 00 00 00 00 00     q...A...q.......
   8006c:	71 03 08 00 71 03 08 00 71 03 08 00 71 03 08 00     q...q...q...q...
	...
   80084:	71 03 08 00 71 03 08 00 71 03 08 00 71 03 08 00     q...q...q...q...
   80094:	71 03 08 00 71 03 08 00 71 03 08 00 71 03 08 00     q...q...q...q...
   800a4:	00 00 00 00 71 03 08 00 19 09 08 00 71 03 08 00     ....q.......q...
   800b4:	71 03 08 00 71 03 08 00 71 03 08 00 71 03 08 00     q...q...q...q...
   800c4:	71 03 08 00 71 03 08 00 71 03 08 00 71 03 08 00     q...q...q...q...
   800d4:	71 03 08 00 71 03 08 00 71 03 08 00 71 03 08 00     q...q...q...q...
   800e4:	71 03 08 00 71 03 08 00 d5 02 08 00 71 03 08 00     q...q.......q...

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000434 	.word	0x20000434
   80110:	00000000 	.word	0x00000000
   80114:	00081d5c 	.word	0x00081d5c

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00081d5c 	.word	0x00081d5c
   80154:	20000438 	.word	0x20000438
   80158:	00081d5c 	.word	0x00081d5c
   8015c:	00000000 	.word	0x00000000

00080160 <can_init>:
 * \retval Success(0) or failure(1)
 */


uint8_t can_init(uint32_t can_br, uint8_t num_tx_mb, uint8_t num_rx_mb)
{
   80160:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	
	//Make sure num_rx_mb and num_tx_mb is valid
	if(num_rx_mb > 8 | num_tx_mb > 8 | num_rx_mb + num_tx_mb > 8)
   80164:	1855      	adds	r5, r2, r1
   80166:	2908      	cmp	r1, #8
   80168:	bf98      	it	ls
   8016a:	2a08      	cmpls	r2, #8
   8016c:	d864      	bhi.n	80238 <can_init+0xd8>
   8016e:	460e      	mov	r6, r1
   80170:	2d08      	cmp	r5, #8
   80172:	dc61      	bgt.n	80238 <can_init+0xd8>


	uint32_t ul_status; 
	
	//Disable can
	CAN0->CAN_MR &= ~CAN_MR_CANEN; 
   80174:	4a32      	ldr	r2, [pc, #200]	; (80240 <can_init+0xe0>)
   80176:	6813      	ldr	r3, [r2, #0]
   80178:	f023 0301 	bic.w	r3, r3, #1
   8017c:	6013      	str	r3, [r2, #0]
	//Clear status register on read
	ul_status = CAN0->CAN_SR; 
   8017e:	6913      	ldr	r3, [r2, #16]
	
	
	// Disable interrupts on CANH and CANL pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80180:	4b30      	ldr	r3, [pc, #192]	; (80244 <can_init+0xe4>)
   80182:	f44f 7440 	mov.w	r4, #768	; 0x300
   80186:	645c      	str	r4, [r3, #68]	; 0x44
	
	//Select CAN0 RX and TX in PIOA
	uint32_t ul_sr = PIOA->PIO_ABSR;
   80188:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	PIOA->PIO_ABSR = ~(PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0) & ul_sr;
   8018a:	f024 0403 	bic.w	r4, r4, #3
   8018e:	671c      	str	r4, [r3, #112]	; 0x70
	
	// Disable the Parallel IO (PIO) of the Rx and Tx pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0;
   80190:	2403      	movs	r4, #3
   80192:	605c      	str	r4, [r3, #4]
	
	// Enable pull up on CANH and CANL pin
	PIOA->PIO_PUER = (PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0);
   80194:	665c      	str	r4, [r3, #100]	; 0x64
	
	
	//Enable Clock for CAN0 in PMC
	PMC->PMC_PCR = PMC_PCR_EN | (0 << PMC_PCR_DIV_Pos) | PMC_PCR_CMD | (ID_CAN0 << PMC_PCR_PID_Pos); // DIV = 1(can clk = MCK/2), CMD = 1 (write), PID = 2B (CAN0)
   80196:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   8019a:	4c2b      	ldr	r4, [pc, #172]	; (80248 <can_init+0xe8>)
   8019c:	f8c3 410c 	str.w	r4, [r3, #268]	; 0x10c
	PMC->PMC_PCER1 |= 1 << (ID_CAN0 - 32);
   801a0:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   801a4:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
   801a8:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	
	//Set baudrate, Phase1, phase2 and propagation delay for can bus. Must match on all nodes!
	CAN0->CAN_BR = can_br; 
   801ac:	6150      	str	r0, [r2, #20]
	/****** Start of mailbox configuration ******/

	uint32_t can_ier = 0;

	/* Configure receive mailboxes */
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   801ae:	42a9      	cmp	r1, r5
   801b0:	dc40      	bgt.n	80234 <can_init+0xd4>
   801b2:	460a      	mov	r2, r1
   801b4:	2400      	movs	r4, #0
	{
		CAN0->CAN_MB[n].CAN_MAM = 0; //Accept all messages
   801b6:	46a1      	mov	r9, r4
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   801b8:	f8df 8084 	ldr.w	r8, [pc, #132]	; 80240 <can_init+0xe0>
   801bc:	f04f 5c00 	mov.w	ip, #536870912	; 0x20000000
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_RX);
   801c0:	f04f 7e80 	mov.w	lr, #16777216	; 0x1000000
		CAN0->CAN_MB[n].CAN_MCR |= CAN_MCR_MTCR;

		can_ier |= 1 << n; //Enable interrupt on rx mailbox
   801c4:	2701      	movs	r7, #1
   801c6:	0153      	lsls	r3, r2, #5
   801c8:	f103 2040 	add.w	r0, r3, #1073758208	; 0x40004000
   801cc:	f500 2030 	add.w	r0, r0, #720896	; 0xb0000
		CAN0->CAN_MB[n].CAN_MAM = 0; //Accept all messages
   801d0:	f8c0 9204 	str.w	r9, [r0, #516]	; 0x204
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   801d4:	4443      	add	r3, r8
   801d6:	f8c3 c208 	str.w	ip, [r3, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_RX);
   801da:	f8c0 e200 	str.w	lr, [r0, #512]	; 0x200
		CAN0->CAN_MB[n].CAN_MCR |= CAN_MCR_MTCR;
   801de:	f8d3 021c 	ldr.w	r0, [r3, #540]	; 0x21c
   801e2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   801e6:	f8c3 021c 	str.w	r0, [r3, #540]	; 0x21c
		can_ier |= 1 << n; //Enable interrupt on rx mailbox
   801ea:	fa07 f302 	lsl.w	r3, r7, r2
   801ee:	431c      	orrs	r4, r3
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   801f0:	3201      	adds	r2, #1
   801f2:	4295      	cmp	r5, r2
   801f4:	dae7      	bge.n	801c6 <can_init+0x66>
	}
	
	/*Configure transmit mailboxes */
	for (int n = 0; n < num_tx_mb; n++)
   801f6:	b181      	cbz	r1, 8021a <can_init+0xba>
   801f8:	2300      	movs	r3, #0
	{
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   801fa:	4911      	ldr	r1, [pc, #68]	; (80240 <can_init+0xe0>)
   801fc:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_TX);
   80200:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   80204:	eb01 1243 	add.w	r2, r1, r3, lsl #5
   80208:	f8c2 5208 	str.w	r5, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_TX);
   8020c:	f103 0210 	add.w	r2, r3, #16
   80210:	0152      	lsls	r2, r2, #5
   80212:	5088      	str	r0, [r1, r2]
	for (int n = 0; n < num_tx_mb; n++)
   80214:	3301      	adds	r3, #1
   80216:	429e      	cmp	r6, r3
   80218:	d1f4      	bne.n	80204 <can_init+0xa4>
	}
	
	/****** End of mailbox configuraion ******/

	//Enable interrupt on receive mailboxes
	CAN0->CAN_IER = can_ier;
   8021a:	4b09      	ldr	r3, [pc, #36]	; (80240 <can_init+0xe0>)
   8021c:	605c      	str	r4, [r3, #4]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   8021e:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80222:	4a0a      	ldr	r2, [pc, #40]	; (8024c <can_init+0xec>)
   80224:	6051      	str	r1, [r2, #4]

	//Enable interrupt in NVIC 
	NVIC_EnableIRQ(ID_CAN0);

	//enable CAN
	CAN0->CAN_MR |= CAN_MR_CANEN;
   80226:	681a      	ldr	r2, [r3, #0]
   80228:	f042 0201 	orr.w	r2, r2, #1
   8022c:	601a      	str	r2, [r3, #0]

	return 0;
   8022e:	2000      	movs	r0, #0
   80230:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t can_ier = 0;
   80234:	2400      	movs	r4, #0
   80236:	e7de      	b.n	801f6 <can_init+0x96>
		return 1; //Too many mailboxes is configured
   80238:	2001      	movs	r0, #1
}
   8023a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8023e:	bf00      	nop
   80240:	400b4000 	.word	0x400b4000
   80244:	400e0e00 	.word	0x400e0e00
   80248:	1000102b 	.word	0x1000102b
   8024c:	e000e100 	.word	0xe000e100

00080250 <can_receive>:
 * \retval Success(0) or failure(1)
 */
uint8_t can_receive(CAN_MESSAGE* can_msg, uint8_t rx_mb_id)
{
	//Check that mailbox is ready
	if(CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MRDY)
   80250:	014b      	lsls	r3, r1, #5
   80252:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   80256:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   8025a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   8025e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   80262:	d033      	beq.n	802cc <can_receive+0x7c>
{
   80264:	b430      	push	{r4, r5}
	{
		//Get data from CAN mailbox
		uint32_t data_low = CAN0->CAN_MB[rx_mb_id].CAN_MDL;
   80266:	014b      	lsls	r3, r1, #5
   80268:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   8026c:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   80270:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
		uint32_t data_high = CAN0->CAN_MB[rx_mb_id].CAN_MDH;
   80274:	f8d3 4218 	ldr.w	r4, [r3, #536]	; 0x218
		
		//Get message ID
		can_msg->id = (uint16_t)((CAN0->CAN_MB[rx_mb_id].CAN_MID & CAN_MID_MIDvA_Msk) >> CAN_MID_MIDvA_Pos);
   80278:	f8d3 5208 	ldr.w	r5, [r3, #520]	; 0x208
   8027c:	f3c5 458a 	ubfx	r5, r5, #18, #11
   80280:	8005      	strh	r5, [r0, #0]
		
		//Get data length
		can_msg->data_length = (uint8_t)((CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos);
   80282:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   80286:	f3c3 4303 	ubfx	r3, r3, #16, #4
   8028a:	7083      	strb	r3, [r0, #2]
		
		//Put data in CAN_MESSAGE object
		for(int i = 0; i < can_msg->data_length;i++)
   8028c:	461d      	mov	r5, r3
   8028e:	b15b      	cbz	r3, 802a8 <can_receive+0x58>
   80290:	3003      	adds	r0, #3
   80292:	2300      	movs	r3, #0
		{
			if(i < 4)
   80294:	2b03      	cmp	r3, #3
			{
				can_msg->data[i] = (char)(data_low & 0xff);
   80296:	bfd9      	ittee	le
   80298:	7002      	strble	r2, [r0, #0]
				data_low = data_low >> 8;
   8029a:	0a12      	lsrle	r2, r2, #8
			}
			else
			{
				can_msg->data[i] = (uint8_t)(data_high & 0xff);
   8029c:	7004      	strbgt	r4, [r0, #0]
				data_high = data_high >> 8;
   8029e:	0a24      	lsrgt	r4, r4, #8
		for(int i = 0; i < can_msg->data_length;i++)
   802a0:	3301      	adds	r3, #1
   802a2:	3001      	adds	r0, #1
   802a4:	42ab      	cmp	r3, r5
   802a6:	d1f5      	bne.n	80294 <can_receive+0x44>
			}
		}
		
		//Reset for new receive
		CAN0->CAN_MB[rx_mb_id].CAN_MMR = CAN_MMR_MOT_MB_RX;
   802a8:	4b09      	ldr	r3, [pc, #36]	; (802d0 <can_receive+0x80>)
   802aa:	f101 0210 	add.w	r2, r1, #16
   802ae:	0152      	lsls	r2, r2, #5
   802b0:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   802b4:	5098      	str	r0, [r3, r2]
		CAN0->CAN_MB[rx_mb_id].CAN_MCR |= CAN_MCR_MTCR;
   802b6:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   802ba:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
   802be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   802c2:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
		return 0;
   802c6:	2000      	movs	r0, #0
	}
	else //Mailbox busy
	{
		return 1;
	}
}
   802c8:	bc30      	pop	{r4, r5}
   802ca:	4770      	bx	lr
		return 1;
   802cc:	2001      	movs	r0, #1
   802ce:	4770      	bx	lr
   802d0:	400b4000 	.word	0x400b4000

000802d4 <CAN0_Handler>:
   802d4:	b510      	push	{r4, lr}
   802d6:	b084      	sub	sp, #16
   802d8:	4b1f      	ldr	r3, [pc, #124]	; (80358 <CAN0_Handler+0x84>)
   802da:	691c      	ldr	r4, [r3, #16]
   802dc:	f014 0f06 	tst.w	r4, #6
   802e0:	d023      	beq.n	8032a <CAN0_Handler+0x56>
   802e2:	f014 0f02 	tst.w	r4, #2
   802e6:	d12d      	bne.n	80344 <CAN0_Handler+0x70>
   802e8:	f014 0f04 	tst.w	r4, #4
   802ec:	d02f      	beq.n	8034e <CAN0_Handler+0x7a>
   802ee:	2102      	movs	r1, #2
   802f0:	a801      	add	r0, sp, #4
   802f2:	4b1a      	ldr	r3, [pc, #104]	; (8035c <CAN0_Handler+0x88>)
   802f4:	4798      	blx	r3
   802f6:	f89d 2006 	ldrb.w	r2, [sp, #6]
   802fa:	b11a      	cbz	r2, 80304 <CAN0_Handler+0x30>
   802fc:	2300      	movs	r3, #0
   802fe:	3301      	adds	r3, #1
   80300:	4293      	cmp	r3, r2
   80302:	d1fc      	bne.n	802fe <CAN0_Handler+0x2a>
   80304:	4b16      	ldr	r3, [pc, #88]	; (80360 <CAN0_Handler+0x8c>)
   80306:	f89d 2007 	ldrb.w	r2, [sp, #7]
   8030a:	3a80      	subs	r2, #128	; 0x80
   8030c:	601a      	str	r2, [r3, #0]
   8030e:	f89d 2008 	ldrb.w	r2, [sp, #8]
   80312:	3a80      	subs	r2, #128	; 0x80
   80314:	605a      	str	r2, [r3, #4]
   80316:	f89d 2009 	ldrb.w	r2, [sp, #9]
   8031a:	f002 0101 	and.w	r1, r2, #1
   8031e:	7219      	strb	r1, [r3, #8]
   80320:	0852      	lsrs	r2, r2, #1
   80322:	725a      	strb	r2, [r3, #9]
   80324:	f89d 200a 	ldrb.w	r2, [sp, #10]
   80328:	60da      	str	r2, [r3, #12]
   8032a:	f014 0f01 	tst.w	r4, #1
   8032e:	d002      	beq.n	80336 <CAN0_Handler+0x62>
   80330:	2201      	movs	r2, #1
   80332:	4b09      	ldr	r3, [pc, #36]	; (80358 <CAN0_Handler+0x84>)
   80334:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80336:	f44f 6200 	mov.w	r2, #2048	; 0x800
   8033a:	4b0a      	ldr	r3, [pc, #40]	; (80364 <CAN0_Handler+0x90>)
   8033c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   80340:	b004      	add	sp, #16
   80342:	bd10      	pop	{r4, pc}
   80344:	2101      	movs	r1, #1
   80346:	a801      	add	r0, sp, #4
   80348:	4b04      	ldr	r3, [pc, #16]	; (8035c <CAN0_Handler+0x88>)
   8034a:	4798      	blx	r3
   8034c:	e7d3      	b.n	802f6 <CAN0_Handler+0x22>
   8034e:	4806      	ldr	r0, [pc, #24]	; (80368 <CAN0_Handler+0x94>)
   80350:	4b06      	ldr	r3, [pc, #24]	; (8036c <CAN0_Handler+0x98>)
   80352:	4798      	blx	r3
   80354:	e7cf      	b.n	802f6 <CAN0_Handler+0x22>
   80356:	bf00      	nop
   80358:	400b4000 	.word	0x400b4000
   8035c:	00080251 	.word	0x00080251
   80360:	20000458 	.word	0x20000458
   80364:	e000e100 	.word	0xe000e100
   80368:	00081c94 	.word	0x00081c94
   8036c:	000808b1 	.word	0x000808b1

00080370 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80370:	e7fe      	b.n	80370 <Dummy_Handler>
	...

00080374 <Reset_Handler>:
{
   80374:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
   80376:	4b18      	ldr	r3, [pc, #96]	; (803d8 <Reset_Handler+0x64>)
   80378:	4a18      	ldr	r2, [pc, #96]	; (803dc <Reset_Handler+0x68>)
   8037a:	429a      	cmp	r2, r3
   8037c:	d010      	beq.n	803a0 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
   8037e:	4b18      	ldr	r3, [pc, #96]	; (803e0 <Reset_Handler+0x6c>)
   80380:	4a15      	ldr	r2, [pc, #84]	; (803d8 <Reset_Handler+0x64>)
   80382:	429a      	cmp	r2, r3
   80384:	d20c      	bcs.n	803a0 <Reset_Handler+0x2c>
   80386:	3b01      	subs	r3, #1
   80388:	1a9b      	subs	r3, r3, r2
   8038a:	f023 0303 	bic.w	r3, r3, #3
   8038e:	3304      	adds	r3, #4
   80390:	4413      	add	r3, r2
   80392:	4912      	ldr	r1, [pc, #72]	; (803dc <Reset_Handler+0x68>)
                        *pDest++ = *pSrc++;
   80394:	f851 0b04 	ldr.w	r0, [r1], #4
   80398:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
   8039c:	429a      	cmp	r2, r3
   8039e:	d1f9      	bne.n	80394 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
   803a0:	4b10      	ldr	r3, [pc, #64]	; (803e4 <Reset_Handler+0x70>)
   803a2:	4a11      	ldr	r2, [pc, #68]	; (803e8 <Reset_Handler+0x74>)
   803a4:	429a      	cmp	r2, r3
   803a6:	d20a      	bcs.n	803be <Reset_Handler+0x4a>
   803a8:	3b01      	subs	r3, #1
   803aa:	1a9b      	subs	r3, r3, r2
   803ac:	f023 0303 	bic.w	r3, r3, #3
   803b0:	3304      	adds	r3, #4
   803b2:	4413      	add	r3, r2
                *pDest++ = 0;
   803b4:	2100      	movs	r1, #0
   803b6:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
   803ba:	4293      	cmp	r3, r2
   803bc:	d1fb      	bne.n	803b6 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   803be:	4b0b      	ldr	r3, [pc, #44]	; (803ec <Reset_Handler+0x78>)
   803c0:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   803c4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   803c8:	4a09      	ldr	r2, [pc, #36]	; (803f0 <Reset_Handler+0x7c>)
   803ca:	6093      	str	r3, [r2, #8]
        __libc_init_array();
   803cc:	4b09      	ldr	r3, [pc, #36]	; (803f4 <Reset_Handler+0x80>)
   803ce:	4798      	blx	r3
        main();
   803d0:	4b09      	ldr	r3, [pc, #36]	; (803f8 <Reset_Handler+0x84>)
   803d2:	4798      	blx	r3
   803d4:	e7fe      	b.n	803d4 <Reset_Handler+0x60>
   803d6:	bf00      	nop
   803d8:	20000000 	.word	0x20000000
   803dc:	00081d5c 	.word	0x00081d5c
   803e0:	20000434 	.word	0x20000434
   803e4:	200004d0 	.word	0x200004d0
   803e8:	20000434 	.word	0x20000434
   803ec:	00080000 	.word	0x00080000
   803f0:	e000ed00 	.word	0xe000ed00
   803f4:	00081b25 	.word	0x00081b25
   803f8:	000804cd 	.word	0x000804cd

000803fc <SystemInit>:
 * Initialize the System and update the SystemFrequency variable.
 */
void SystemInit( void )
{
  /* Set FWS according to SYS_BOARD_MCKR configuration */
  EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   803fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
   80400:	4a20      	ldr	r2, [pc, #128]	; (80484 <SystemInit+0x88>)
   80402:	6013      	str	r3, [r2, #0]
  EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   80404:	f502 7200 	add.w	r2, r2, #512	; 0x200
   80408:	6013      	str	r3, [r2, #0]

  /* Initialize main oscillator */
  if ( !(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) )
   8040a:	4b1f      	ldr	r3, [pc, #124]	; (80488 <SystemInit+0x8c>)
   8040c:	6a1b      	ldr	r3, [r3, #32]
   8040e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80412:	d107      	bne.n	80424 <SystemInit+0x28>
  {
    PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
   80414:	4a1d      	ldr	r2, [pc, #116]	; (8048c <SystemInit+0x90>)
   80416:	4b1c      	ldr	r3, [pc, #112]	; (80488 <SystemInit+0x8c>)
   80418:	621a      	str	r2, [r3, #32]
    while ( !(PMC->PMC_SR & PMC_SR_MOSCXTS) )
   8041a:	461a      	mov	r2, r3
   8041c:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8041e:	f013 0f01 	tst.w	r3, #1
   80422:	d0fb      	beq.n	8041c <SystemInit+0x20>
    {
    }
  }

  /* Switch to 3-20MHz Xtal oscillator */
  PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;
   80424:	4a1a      	ldr	r2, [pc, #104]	; (80490 <SystemInit+0x94>)
   80426:	4b18      	ldr	r3, [pc, #96]	; (80488 <SystemInit+0x8c>)
   80428:	621a      	str	r2, [r3, #32]

  while ( !(PMC->PMC_SR & PMC_SR_MOSCSELS) )
   8042a:	461a      	mov	r2, r3
   8042c:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8042e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   80432:	d0fb      	beq.n	8042c <SystemInit+0x30>
  {
  }
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   80434:	4a14      	ldr	r2, [pc, #80]	; (80488 <SystemInit+0x8c>)
   80436:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80438:	f023 0303 	bic.w	r3, r3, #3
   8043c:	f043 0301 	orr.w	r3, r3, #1
   80440:	6313      	str	r3, [r2, #48]	; 0x30
  while (!(PMC->PMC_SR & PMC_SR_MCKRDY))
   80442:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80444:	f013 0f08 	tst.w	r3, #8
   80448:	d0fb      	beq.n	80442 <SystemInit+0x46>
  {
  }

  /* Initialize PLLA */
  PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
   8044a:	4a12      	ldr	r2, [pc, #72]	; (80494 <SystemInit+0x98>)
   8044c:	4b0e      	ldr	r3, [pc, #56]	; (80488 <SystemInit+0x8c>)
   8044e:	629a      	str	r2, [r3, #40]	; 0x28
  while ( !(PMC->PMC_SR & PMC_SR_LOCKA) )
   80450:	461a      	mov	r2, r3
   80452:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80454:	f013 0f02 	tst.w	r3, #2
   80458:	d0fb      	beq.n	80452 <SystemInit+0x56>
  {
  }

  /* Switch to main clock */
  PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   8045a:	2211      	movs	r2, #17
   8045c:	4b0a      	ldr	r3, [pc, #40]	; (80488 <SystemInit+0x8c>)
   8045e:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   80460:	461a      	mov	r2, r3
   80462:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80464:	f013 0f08 	tst.w	r3, #8
   80468:	d0fb      	beq.n	80462 <SystemInit+0x66>
  {
  }

  /* Switch to PLLA */
  PMC->PMC_MCKR = SYS_BOARD_MCKR;
   8046a:	2212      	movs	r2, #18
   8046c:	4b06      	ldr	r3, [pc, #24]	; (80488 <SystemInit+0x8c>)
   8046e:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   80470:	461a      	mov	r2, r3
   80472:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80474:	f013 0f08 	tst.w	r3, #8
   80478:	d0fb      	beq.n	80472 <SystemInit+0x76>
  {
  }

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
   8047a:	4a07      	ldr	r2, [pc, #28]	; (80498 <SystemInit+0x9c>)
   8047c:	4b07      	ldr	r3, [pc, #28]	; (8049c <SystemInit+0xa0>)
   8047e:	601a      	str	r2, [r3, #0]
   80480:	4770      	bx	lr
   80482:	bf00      	nop
   80484:	400e0a00 	.word	0x400e0a00
   80488:	400e0600 	.word	0x400e0600
   8048c:	00370809 	.word	0x00370809
   80490:	01370809 	.word	0x01370809
   80494:	200d3f01 	.word	0x200d3f01
   80498:	0501bd00 	.word	0x0501bd00
   8049c:	20000000 	.word	0x20000000

000804a0 <IR_init>:
 *  Author: Herbe
 */ 
#include "ADC.h"

void IR_init(void){ /* PA16 is A0 https://www.arduino.cc/en/Hacking/PinMappingSAM3X */
    REG_PMC_PCER1 |= (1 << 5);  // enable ADC on ID37 could write ID_ADC?
   804a0:	4a09      	ldr	r2, [pc, #36]	; (804c8 <IR_init+0x28>)
   804a2:	6813      	ldr	r3, [r2, #0]
   804a4:	f043 0320 	orr.w	r3, r3, #32
   804a8:	6013      	str	r3, [r2, #0]
   // REG_PIOA_PDR |= (1 << 16); // Disable as gpio pin 
    REG_ADC_MR |= (1 << 7); // ADC in free run mode
   804aa:	f5a2 3201 	sub.w	r2, r2, #132096	; 0x20400
   804ae:	f5a2 723f 	sub.w	r2, r2, #764	; 0x2fc
   804b2:	6813      	ldr	r3, [r2, #0]
   804b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   804b8:	6013      	str	r3, [r2, #0]
    // PIOA->PIO_PDR|= PIO_PDR_P7;
    REG_ADC_CHER |= ADC_CHER_CH7; //enable as adc channel on AD7 extra func     
   804ba:	320c      	adds	r2, #12
   804bc:	6813      	ldr	r3, [r2, #0]
   804be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   804c2:	6013      	str	r3, [r2, #0]
   804c4:	4770      	bx	lr
   804c6:	bf00      	nop
   804c8:	400e0700 	.word	0x400e0700

000804cc <main>:
#include "Timer.h"

#define F_CPU 84E6 //84Mhz

int main(void)
{
   804cc:	b570      	push	{r4, r5, r6, lr}
    /* Initialize the SAM system */
    SystemInit();
   804ce:	4b11      	ldr	r3, [pc, #68]	; (80514 <main+0x48>)
   804d0:	4798      	blx	r3
    configure_uart();
   804d2:	4b11      	ldr	r3, [pc, #68]	; (80518 <main+0x4c>)
   804d4:	4798      	blx	r3
	servo_pwm_init();
   804d6:	4b11      	ldr	r3, [pc, #68]	; (8051c <main+0x50>)
   804d8:	4798      	blx	r3
	motor_init_DAC();   
   804da:	4b11      	ldr	r3, [pc, #68]	; (80520 <main+0x54>)
   804dc:	4798      	blx	r3
    IR_init();
   804de:	4b11      	ldr	r3, [pc, #68]	; (80524 <main+0x58>)
   804e0:	4798      	blx	r3
    timer_init();
   804e2:	4b11      	ldr	r3, [pc, #68]	; (80528 <main+0x5c>)
   804e4:	4798      	blx	r3
    
    //init can config     
    uint32_t can_msk = 0x00143555;
    uint8_t can_status = can_init(can_msk, 1, 1);
   804e6:	2201      	movs	r2, #1
   804e8:	4611      	mov	r1, r2
   804ea:	4810      	ldr	r0, [pc, #64]	; (8052c <main+0x60>)
   804ec:	4b10      	ldr	r3, [pc, #64]	; (80530 <main+0x64>)
   804ee:	4798      	blx	r3
    
    WDT->WDT_MR = WDT_MR_WDDIS; // Dissable watchdog      
   804f0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   804f4:	4b0f      	ldr	r3, [pc, #60]	; (80534 <main+0x68>)
   804f6:	605a      	str	r2, [r3, #4]
    test_message.data[2] = 'I';
    test_message.data_length = 3;
	
	//	servo_set_pwm_test();
    
    SetTimer(1);  
   804f8:	2001      	movs	r0, #1
   804fa:	4b0f      	ldr	r3, [pc, #60]	; (80538 <main+0x6c>)
   804fc:	4798      	blx	r3
    motor_enable();
   804fe:	4b0f      	ldr	r3, [pc, #60]	; (8053c <main+0x70>)
   80500:	4798      	blx	r3
    while (1) 
    {
		motor_set_input(received_joystick_data.sliderRight);
   80502:	4c0f      	ldr	r4, [pc, #60]	; (80540 <main+0x74>)
   80504:	4e0f      	ldr	r6, [pc, #60]	; (80544 <main+0x78>)
		servo_set_angle(received_joystick_data);
   80506:	4d10      	ldr	r5, [pc, #64]	; (80548 <main+0x7c>)
		motor_set_input(received_joystick_data.sliderRight);
   80508:	7aa0      	ldrb	r0, [r4, #10]
   8050a:	47b0      	blx	r6
		servo_set_angle(received_joystick_data);
   8050c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   80510:	47a8      	blx	r5
   80512:	e7f9      	b.n	80508 <main+0x3c>
   80514:	000803fd 	.word	0x000803fd
   80518:	00080ab5 	.word	0x00080ab5
   8051c:	00080971 	.word	0x00080971
   80520:	0008054d 	.word	0x0008054d
   80524:	000804a1 	.word	0x000804a1
   80528:	000808d5 	.word	0x000808d5
   8052c:	00143555 	.word	0x00143555
   80530:	00080161 	.word	0x00080161
   80534:	400e1a50 	.word	0x400e1a50
   80538:	00080951 	.word	0x00080951
   8053c:	000805d9 	.word	0x000805d9
   80540:	20000458 	.word	0x20000458
   80544:	000805a1 	.word	0x000805a1
   80548:	00080a51 	.word	0x00080a51

0008054c <motor_init_DAC>:
#include "motor_interface.h"


void motor_init_DAC(){
	// Set clock for DACC peripheral
	REG_PMC_PCER1 |= (1<<6);
   8054c:	4a0f      	ldr	r2, [pc, #60]	; (8058c <motor_init_DAC+0x40>)
   8054e:	6813      	ldr	r3, [r2, #0]
   80550:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   80554:	6013      	str	r3, [r2, #0]
	
	//Set DACC MODE REGISTER, free running mode
	REG_DACC_MR = 0x05012000; //0x050012000
   80556:	4a0e      	ldr	r2, [pc, #56]	; (80590 <motor_init_DAC+0x44>)
   80558:	4b0e      	ldr	r3, [pc, #56]	; (80594 <motor_init_DAC+0x48>)
   8055a:	601a      	str	r2, [r3, #0]
	
	//Set DAC channel to channel 1
	REG_DACC_CHER = 0b10;
   8055c:	2202      	movs	r2, #2
   8055e:	330c      	adds	r3, #12
   80560:	601a      	str	r2, [r3, #0]
	
	//Enable output on port D's pins: 0, 1, 2, 9, 10
	REG_PIOD_PER |= 0b11000000111; //Enable IO 
   80562:	f503 33c9 	add.w	r3, r3, #102912	; 0x19200
   80566:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
   8056a:	681a      	ldr	r2, [r3, #0]
   8056c:	f240 6107 	movw	r1, #1543	; 0x607
   80570:	430a      	orrs	r2, r1
   80572:	601a      	str	r2, [r3, #0]
	REG_PIOD_OER |= 0b11000000111; //Enable output
   80574:	4a08      	ldr	r2, [pc, #32]	; (80598 <motor_init_DAC+0x4c>)
   80576:	6813      	ldr	r3, [r2, #0]
   80578:	430b      	orrs	r3, r1
   8057a:	6013      	str	r3, [r2, #0]
	
	//Enable input on port C's pins: 0-7
	REG_PIOC_PER |= 0b11111111;
   8057c:	f5a2 7204 	sub.w	r2, r2, #528	; 0x210
   80580:	6813      	ldr	r3, [r2, #0]
   80582:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   80586:	6013      	str	r3, [r2, #0]
   80588:	4770      	bx	lr
   8058a:	bf00      	nop
   8058c:	400e0700 	.word	0x400e0700
   80590:	05012000 	.word	0x05012000
   80594:	400c8004 	.word	0x400c8004
   80598:	400e1410 	.word	0x400e1410
   8059c:	00000000 	.word	0x00000000

000805a0 <motor_set_input>:
	
}

void motor_set_input(int input){
   805a0:	b510      	push	{r4, lr}
	int register_value = (4095.0/255.0)* input; // 4095 for motor reselution (12 bits), and 255 for max slider value.
   805a2:	4b09      	ldr	r3, [pc, #36]	; (805c8 <motor_set_input+0x28>)
   805a4:	4798      	blx	r3
   805a6:	a306      	add	r3, pc, #24	; (adr r3, 805c0 <motor_set_input+0x20>)
   805a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   805ac:	4c07      	ldr	r4, [pc, #28]	; (805cc <motor_set_input+0x2c>)
   805ae:	47a0      	blx	r4
   805b0:	4b07      	ldr	r3, [pc, #28]	; (805d0 <motor_set_input+0x30>)
   805b2:	4798      	blx	r3
	
	REG_DACC_CDR = register_value;
   805b4:	4b07      	ldr	r3, [pc, #28]	; (805d4 <motor_set_input+0x34>)
   805b6:	6018      	str	r0, [r3, #0]
   805b8:	bd10      	pop	{r4, pc}
   805ba:	bf00      	nop
   805bc:	f3af 8000 	nop.w
   805c0:	0f0f0f0f 	.word	0x0f0f0f0f
   805c4:	40300f0f 	.word	0x40300f0f
   805c8:	00080e4d 	.word	0x00080e4d
   805cc:	00080f19 	.word	0x00080f19
   805d0:	0008144d 	.word	0x0008144d
   805d4:	400c8020 	.word	0x400c8020

000805d8 <motor_enable>:
}


void motor_enable(void){
	
	REG_PIOD_SODR |= (1<<9); //Set PD9 high	
   805d8:	4a02      	ldr	r2, [pc, #8]	; (805e4 <motor_enable+0xc>)
   805da:	6813      	ldr	r3, [r2, #0]
   805dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   805e0:	6013      	str	r3, [r2, #0]
   805e2:	4770      	bx	lr
   805e4:	400e1430 	.word	0x400e1430

000805e8 <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
   805e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   805ec:	460d      	mov	r5, r1
	register int pc = 0, padchar = ' ';

	if (width > 0) {
   805ee:	1e16      	subs	r6, r2, #0
   805f0:	dd48      	ble.n	80684 <prints+0x9c>
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
   805f2:	780a      	ldrb	r2, [r1, #0]
   805f4:	2a00      	cmp	r2, #0
   805f6:	d035      	beq.n	80664 <prints+0x7c>
   805f8:	460a      	mov	r2, r1
   805fa:	2400      	movs	r4, #0
   805fc:	3401      	adds	r4, #1
   805fe:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   80602:	2900      	cmp	r1, #0
   80604:	d1fa      	bne.n	805fc <prints+0x14>
		if (len >= width) width = 0;
   80606:	42a6      	cmp	r6, r4
   80608:	dc2d      	bgt.n	80666 <prints+0x7e>
   8060a:	2400      	movs	r4, #0
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
   8060c:	f003 0202 	and.w	r2, r3, #2
   80610:	2a00      	cmp	r2, #0
   80612:	bf0c      	ite	eq
   80614:	f04f 0820 	moveq.w	r8, #32
   80618:	f04f 0830 	movne.w	r8, #48	; 0x30
	}
	if (!(pad & PAD_RIGHT)) {
   8061c:	f013 0301 	ands.w	r3, r3, #1
   80620:	d123      	bne.n	8066a <prints+0x82>
		for ( ; width > 0; --width) {
   80622:	2c00      	cmp	r4, #0
   80624:	dd28      	ble.n	80678 <prints+0x90>
   80626:	4626      	mov	r6, r4
	(void) uart_putchar(c);  //Send characters to uart
   80628:	fa5f f988 	uxtb.w	r9, r8
   8062c:	4f18      	ldr	r7, [pc, #96]	; (80690 <prints+0xa8>)
   8062e:	4648      	mov	r0, r9
   80630:	47b8      	blx	r7
		for ( ; width > 0; --width) {
   80632:	3e01      	subs	r6, #1
   80634:	d1fb      	bne.n	8062e <prints+0x46>
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
   80636:	7828      	ldrb	r0, [r5, #0]
   80638:	b188      	cbz	r0, 8065e <prints+0x76>
	(void) uart_putchar(c);  //Send characters to uart
   8063a:	4f15      	ldr	r7, [pc, #84]	; (80690 <prints+0xa8>)
   8063c:	47b8      	blx	r7
		printchar (out, *string);
		++pc;
   8063e:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
   80640:	f815 0f01 	ldrb.w	r0, [r5, #1]!
   80644:	2800      	cmp	r0, #0
   80646:	d1f9      	bne.n	8063c <prints+0x54>
	}
	for ( ; width > 0; --width) {
   80648:	2e00      	cmp	r6, #0
   8064a:	dd08      	ble.n	8065e <prints+0x76>
   8064c:	4635      	mov	r5, r6
	(void) uart_putchar(c);  //Send characters to uart
   8064e:	fa5f f888 	uxtb.w	r8, r8
   80652:	4f0f      	ldr	r7, [pc, #60]	; (80690 <prints+0xa8>)
   80654:	4640      	mov	r0, r8
   80656:	47b8      	blx	r7
	for ( ; width > 0; --width) {
   80658:	3d01      	subs	r5, #1
   8065a:	d1fb      	bne.n	80654 <prints+0x6c>
   8065c:	4434      	add	r4, r6
		printchar (out, padchar);
		++pc;
	}

	return pc;
}
   8065e:	4620      	mov	r0, r4
   80660:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		for (ptr = string; *ptr; ++ptr) ++len;
   80664:	2400      	movs	r4, #0
		else width -= len;
   80666:	1b34      	subs	r4, r6, r4
   80668:	e7d0      	b.n	8060c <prints+0x24>
   8066a:	4626      	mov	r6, r4
	for ( ; *string ; ++string) {
   8066c:	7828      	ldrb	r0, [r5, #0]
   8066e:	b108      	cbz	r0, 80674 <prints+0x8c>
	register int pc = 0, padchar = ' ';
   80670:	2400      	movs	r4, #0
   80672:	e7e2      	b.n	8063a <prints+0x52>
   80674:	2400      	movs	r4, #0
   80676:	e7e7      	b.n	80648 <prints+0x60>
		for ( ; width > 0; --width) {
   80678:	4626      	mov	r6, r4
   8067a:	461c      	mov	r4, r3
   8067c:	e7db      	b.n	80636 <prints+0x4e>
	register int pc = 0, padchar = ' ';
   8067e:	f04f 0820 	mov.w	r8, #32
   80682:	e7d8      	b.n	80636 <prints+0x4e>
	if (!(pad & PAD_RIGHT)) {
   80684:	f013 0401 	ands.w	r4, r3, #1
   80688:	d0f9      	beq.n	8067e <prints+0x96>
	register int pc = 0, padchar = ' ';
   8068a:	f04f 0820 	mov.w	r8, #32
   8068e:	e7ed      	b.n	8066c <prints+0x84>
   80690:	00080b1d 	.word	0x00080b1d

00080694 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
   80694:	b5f0      	push	{r4, r5, r6, r7, lr}
   80696:	b085      	sub	sp, #20
   80698:	4607      	mov	r7, r0
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;

	if (i == 0) {
   8069a:	b381      	cbz	r1, 806fe <printi+0x6a>
   8069c:	460c      	mov	r4, r1
		print_buf[0] = '0';
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
	}

	if (sg && b == 10 && i < 0) {
   8069e:	b10b      	cbz	r3, 806a4 <printi+0x10>
   806a0:	2a0a      	cmp	r2, #10
   806a2:	d038      	beq.n	80716 <printi+0x82>
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
   806a4:	2300      	movs	r3, #0
   806a6:	f88d 300f 	strb.w	r3, [sp, #15]

	while (u) {
   806aa:	2600      	movs	r6, #0
   806ac:	2900      	cmp	r1, #0
   806ae:	d046      	beq.n	8073e <printi+0xaa>
   806b0:	f10d 050f 	add.w	r5, sp, #15
		t = u % b;
		if( t >= 10 )
			t += letbase - '0' - 10;
   806b4:	990c      	ldr	r1, [sp, #48]	; 0x30
   806b6:	393a      	subs	r1, #58	; 0x3a
		t = u % b;
   806b8:	fbb4 f3f2 	udiv	r3, r4, r2
   806bc:	fb02 4313 	mls	r3, r2, r3, r4
		if( t >= 10 )
   806c0:	2b09      	cmp	r3, #9
			t += letbase - '0' - 10;
   806c2:	bfc8      	it	gt
   806c4:	185b      	addgt	r3, r3, r1
		*--s = t + '0';
   806c6:	3330      	adds	r3, #48	; 0x30
   806c8:	f805 3d01 	strb.w	r3, [r5, #-1]!
		u /= b;
   806cc:	fbb4 f4f2 	udiv	r4, r4, r2
	while (u) {
   806d0:	2c00      	cmp	r4, #0
   806d2:	d1f1      	bne.n	806b8 <printi+0x24>
	}

	if (neg) {
   806d4:	b156      	cbz	r6, 806ec <printi+0x58>
		if( width && (pad & PAD_ZERO) ) {
   806d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   806d8:	b11b      	cbz	r3, 806e2 <printi+0x4e>
   806da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   806dc:	f013 0f02 	tst.w	r3, #2
   806e0:	d125      	bne.n	8072e <printi+0x9a>
			printchar (out, '-');
			++pc;
			--width;
		}
		else {
			*--s = '-';
   806e2:	232d      	movs	r3, #45	; 0x2d
   806e4:	f805 3c01 	strb.w	r3, [r5, #-1]
   806e8:	3d01      	subs	r5, #1
	register int t, neg = 0, pc = 0;
   806ea:	2600      	movs	r6, #0
		}
	}

	return pc + prints (out, s, width, pad);
   806ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   806ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   806f0:	4629      	mov	r1, r5
   806f2:	4638      	mov	r0, r7
   806f4:	4c14      	ldr	r4, [pc, #80]	; (80748 <printi+0xb4>)
   806f6:	47a0      	blx	r4
   806f8:	4430      	add	r0, r6
}
   806fa:	b005      	add	sp, #20
   806fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		print_buf[0] = '0';
   806fe:	2330      	movs	r3, #48	; 0x30
   80700:	f88d 3004 	strb.w	r3, [sp, #4]
		print_buf[1] = '\0';
   80704:	2300      	movs	r3, #0
   80706:	f88d 3005 	strb.w	r3, [sp, #5]
		return prints (out, print_buf, width, pad);
   8070a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8070c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8070e:	a901      	add	r1, sp, #4
   80710:	4c0d      	ldr	r4, [pc, #52]	; (80748 <printi+0xb4>)
   80712:	47a0      	blx	r4
   80714:	e7f1      	b.n	806fa <printi+0x66>
	if (sg && b == 10 && i < 0) {
   80716:	2900      	cmp	r1, #0
   80718:	dac4      	bge.n	806a4 <printi+0x10>
		u = -i;
   8071a:	424c      	negs	r4, r1
	*s = '\0';
   8071c:	2300      	movs	r3, #0
   8071e:	f88d 300f 	strb.w	r3, [sp, #15]
	s = print_buf + PRINT_BUF_LEN-1;
   80722:	f10d 050f 	add.w	r5, sp, #15
	while (u) {
   80726:	2c00      	cmp	r4, #0
   80728:	d0d5      	beq.n	806d6 <printi+0x42>
		neg = 1;
   8072a:	2601      	movs	r6, #1
   8072c:	e7c0      	b.n	806b0 <printi+0x1c>
	(void) uart_putchar(c);  //Send characters to uart
   8072e:	202d      	movs	r0, #45	; 0x2d
   80730:	4b06      	ldr	r3, [pc, #24]	; (8074c <printi+0xb8>)
   80732:	4798      	blx	r3
			--width;
   80734:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80736:	3b01      	subs	r3, #1
   80738:	930a      	str	r3, [sp, #40]	; 0x28
			++pc;
   8073a:	2601      	movs	r6, #1
			--width;
   8073c:	e7d6      	b.n	806ec <printi+0x58>
	register int t, neg = 0, pc = 0;
   8073e:	461e      	mov	r6, r3
	s = print_buf + PRINT_BUF_LEN-1;
   80740:	f10d 050f 	add.w	r5, sp, #15
   80744:	e7d2      	b.n	806ec <printi+0x58>
   80746:	bf00      	nop
   80748:	000805e9 	.word	0x000805e9
   8074c:	00080b1d 	.word	0x00080b1d

00080750 <print>:

static int print( char **out, const char *format, va_list args )
{
   80750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80754:	b087      	sub	sp, #28
   80756:	4680      	mov	r8, r0
	register int width, pad;
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
   80758:	780b      	ldrb	r3, [r1, #0]
   8075a:	2b00      	cmp	r3, #0
   8075c:	f000 8094 	beq.w	80888 <print+0x138>
   80760:	468b      	mov	fp, r1
   80762:	4617      	mov	r7, r2
   80764:	2500      	movs	r5, #0
	(void) uart_putchar(c);  //Send characters to uart
   80766:	4e4e      	ldr	r6, [pc, #312]	; (808a0 <print+0x150>)
			}
			if( *format == 'c' ) {
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
				scr[1] = '\0';
				pc += prints (out, scr, width, pad);
   80768:	f8df a13c 	ldr.w	sl, [pc, #316]	; 808a8 <print+0x158>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   8076c:	f8df 913c 	ldr.w	r9, [pc, #316]	; 808ac <print+0x15c>
   80770:	e046      	b.n	80800 <print+0xb0>
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   80772:	2200      	movs	r2, #0
   80774:	e070      	b.n	80858 <print+0x108>
				register char *s = (char *)va_arg( args, int );
   80776:	6839      	ldr	r1, [r7, #0]
   80778:	3704      	adds	r7, #4
				pc += prints (out, s?s:"(null)", width, pad);
   8077a:	484a      	ldr	r0, [pc, #296]	; (808a4 <print+0x154>)
   8077c:	2900      	cmp	r1, #0
   8077e:	bf08      	it	eq
   80780:	4601      	moveq	r1, r0
   80782:	4640      	mov	r0, r8
   80784:	47d0      	blx	sl
   80786:	4405      	add	r5, r0
				continue;
   80788:	e035      	b.n	807f6 <print+0xa6>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
   8078a:	6839      	ldr	r1, [r7, #0]
   8078c:	3704      	adds	r7, #4
   8078e:	2061      	movs	r0, #97	; 0x61
   80790:	9002      	str	r0, [sp, #8]
   80792:	9301      	str	r3, [sp, #4]
   80794:	9200      	str	r2, [sp, #0]
   80796:	2301      	movs	r3, #1
   80798:	220a      	movs	r2, #10
   8079a:	4640      	mov	r0, r8
   8079c:	47c8      	blx	r9
   8079e:	4405      	add	r5, r0
				continue;
   807a0:	e029      	b.n	807f6 <print+0xa6>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
   807a2:	6839      	ldr	r1, [r7, #0]
   807a4:	3704      	adds	r7, #4
   807a6:	2061      	movs	r0, #97	; 0x61
   807a8:	9002      	str	r0, [sp, #8]
   807aa:	9301      	str	r3, [sp, #4]
   807ac:	9200      	str	r2, [sp, #0]
   807ae:	2300      	movs	r3, #0
   807b0:	2210      	movs	r2, #16
   807b2:	4640      	mov	r0, r8
   807b4:	47c8      	blx	r9
   807b6:	4405      	add	r5, r0
				continue;
   807b8:	e01d      	b.n	807f6 <print+0xa6>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
   807ba:	6839      	ldr	r1, [r7, #0]
   807bc:	3704      	adds	r7, #4
   807be:	2041      	movs	r0, #65	; 0x41
   807c0:	9002      	str	r0, [sp, #8]
   807c2:	9301      	str	r3, [sp, #4]
   807c4:	9200      	str	r2, [sp, #0]
   807c6:	2300      	movs	r3, #0
   807c8:	2210      	movs	r2, #16
   807ca:	4640      	mov	r0, r8
   807cc:	47c8      	blx	r9
   807ce:	4405      	add	r5, r0
				continue;
   807d0:	e011      	b.n	807f6 <print+0xa6>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   807d2:	6839      	ldr	r1, [r7, #0]
   807d4:	3704      	adds	r7, #4
   807d6:	2061      	movs	r0, #97	; 0x61
   807d8:	9002      	str	r0, [sp, #8]
   807da:	9301      	str	r3, [sp, #4]
   807dc:	9200      	str	r2, [sp, #0]
   807de:	2300      	movs	r3, #0
   807e0:	220a      	movs	r2, #10
   807e2:	4640      	mov	r0, r8
   807e4:	47c8      	blx	r9
   807e6:	4405      	add	r5, r0
				continue;
   807e8:	e005      	b.n	807f6 <print+0xa6>
			++format;
   807ea:	46a3      	mov	fp, r4
	(void) uart_putchar(c);  //Send characters to uart
   807ec:	f89b 0000 	ldrb.w	r0, [fp]
   807f0:	47b0      	blx	r6
			}
		}
		else {
		out:
			printchar (out, *format);
			++pc;
   807f2:	3501      	adds	r5, #1
   807f4:	465c      	mov	r4, fp
	for (; *format != 0; ++format) {
   807f6:	f104 0b01 	add.w	fp, r4, #1
   807fa:	7863      	ldrb	r3, [r4, #1]
   807fc:	2b00      	cmp	r3, #0
   807fe:	d044      	beq.n	8088a <print+0x13a>
		if (*format == '%') {
   80800:	2b25      	cmp	r3, #37	; 0x25
   80802:	d1f3      	bne.n	807ec <print+0x9c>
			++format;
   80804:	f10b 0401 	add.w	r4, fp, #1
			if (*format == '\0') break;
   80808:	f89b 3001 	ldrb.w	r3, [fp, #1]
   8080c:	2b00      	cmp	r3, #0
   8080e:	d03c      	beq.n	8088a <print+0x13a>
			if (*format == '%') goto out;
   80810:	2b25      	cmp	r3, #37	; 0x25
   80812:	d0ea      	beq.n	807ea <print+0x9a>
			if (*format == '-') {
   80814:	2b2d      	cmp	r3, #45	; 0x2d
				++format;
   80816:	bf06      	itte	eq
   80818:	f10b 0402 	addeq.w	r4, fp, #2
				pad = PAD_RIGHT;
   8081c:	2301      	moveq	r3, #1
			width = pad = 0;
   8081e:	2300      	movne	r3, #0
			while (*format == '0') {
   80820:	7822      	ldrb	r2, [r4, #0]
   80822:	2a30      	cmp	r2, #48	; 0x30
   80824:	d105      	bne.n	80832 <print+0xe2>
				pad |= PAD_ZERO;
   80826:	f043 0302 	orr.w	r3, r3, #2
			while (*format == '0') {
   8082a:	f814 2f01 	ldrb.w	r2, [r4, #1]!
   8082e:	2a30      	cmp	r2, #48	; 0x30
   80830:	d0f9      	beq.n	80826 <print+0xd6>
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   80832:	7821      	ldrb	r1, [r4, #0]
   80834:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   80838:	b2d2      	uxtb	r2, r2
   8083a:	2a09      	cmp	r2, #9
   8083c:	d899      	bhi.n	80772 <print+0x22>
   8083e:	2200      	movs	r2, #0
				width *= 10;
   80840:	eb02 0282 	add.w	r2, r2, r2, lsl #2
				width += *format - '0';
   80844:	3930      	subs	r1, #48	; 0x30
   80846:	eb01 0242 	add.w	r2, r1, r2, lsl #1
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   8084a:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   8084e:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   80852:	b2c0      	uxtb	r0, r0
   80854:	2809      	cmp	r0, #9
   80856:	d9f3      	bls.n	80840 <print+0xf0>
			if( *format == 's' ) {
   80858:	2973      	cmp	r1, #115	; 0x73
   8085a:	d08c      	beq.n	80776 <print+0x26>
			if( *format == 'd' ) {
   8085c:	2964      	cmp	r1, #100	; 0x64
   8085e:	d094      	beq.n	8078a <print+0x3a>
			if( *format == 'x' ) {
   80860:	2978      	cmp	r1, #120	; 0x78
   80862:	d09e      	beq.n	807a2 <print+0x52>
			if( *format == 'X' ) {
   80864:	2958      	cmp	r1, #88	; 0x58
   80866:	d0a8      	beq.n	807ba <print+0x6a>
			if( *format == 'u' ) {
   80868:	2975      	cmp	r1, #117	; 0x75
   8086a:	d0b2      	beq.n	807d2 <print+0x82>
			if( *format == 'c' ) {
   8086c:	2963      	cmp	r1, #99	; 0x63
   8086e:	d1c2      	bne.n	807f6 <print+0xa6>
				scr[0] = (char)va_arg( args, int );
   80870:	6839      	ldr	r1, [r7, #0]
   80872:	3704      	adds	r7, #4
   80874:	f88d 1014 	strb.w	r1, [sp, #20]
				scr[1] = '\0';
   80878:	2100      	movs	r1, #0
   8087a:	f88d 1015 	strb.w	r1, [sp, #21]
				pc += prints (out, scr, width, pad);
   8087e:	a905      	add	r1, sp, #20
   80880:	4640      	mov	r0, r8
   80882:	47d0      	blx	sl
   80884:	4405      	add	r5, r0
				continue;
   80886:	e7b6      	b.n	807f6 <print+0xa6>
	register int pc = 0;
   80888:	2500      	movs	r5, #0
		}
	}
	if (out) **out = '\0';
   8088a:	f1b8 0f00 	cmp.w	r8, #0
   8088e:	d003      	beq.n	80898 <print+0x148>
   80890:	f8d8 3000 	ldr.w	r3, [r8]
   80894:	2200      	movs	r2, #0
   80896:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
}
   80898:	4628      	mov	r0, r5
   8089a:	b007      	add	sp, #28
   8089c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   808a0:	00080b1d 	.word	0x00080b1d
   808a4:	00081cc0 	.word	0x00081cc0
   808a8:	000805e9 	.word	0x000805e9
   808ac:	00080695 	.word	0x00080695

000808b0 <printf>:

int printf(const char *format, ...)
{
   808b0:	b40f      	push	{r0, r1, r2, r3}
   808b2:	b500      	push	{lr}
   808b4:	b083      	sub	sp, #12
   808b6:	aa04      	add	r2, sp, #16
   808b8:	f852 1b04 	ldr.w	r1, [r2], #4
        va_list args;
        
        va_start( args, format );
   808bc:	9201      	str	r2, [sp, #4]
        return print( 0, format, args );
   808be:	2000      	movs	r0, #0
   808c0:	4b03      	ldr	r3, [pc, #12]	; (808d0 <printf+0x20>)
   808c2:	4798      	blx	r3
}
   808c4:	b003      	add	sp, #12
   808c6:	f85d eb04 	ldr.w	lr, [sp], #4
   808ca:	b004      	add	sp, #16
   808cc:	4770      	bx	lr
   808ce:	bf00      	nop
   808d0:	00080751 	.word	0x00080751

000808d4 <timer_init>:

volatile uint32_t highscore = 0;
volatile uint16_t status = 0;

uint32_t timer_init(void){
    REG_PMC_PCER0 |= (1 << ID_PIOB) | (1 << ID_TC0); //enable timer in power controller
   808d4:	4a0c      	ldr	r2, [pc, #48]	; (80908 <timer_init+0x34>)
   808d6:	6813      	ldr	r3, [r2, #0]
   808d8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   808dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   808e0:	6013      	str	r3, [r2, #0]

    // HIGHSCORE TIMING SETUP //    
    TC0->TC_CHANNEL[0].TC_IER |= TC_IER_CPCS
   808e2:	4b0a      	ldr	r3, [pc, #40]	; (8090c <timer_init+0x38>)
   808e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   808e6:	f042 0214 	orr.w	r2, r2, #20
   808ea:	625a      	str	r2, [r3, #36]	; 0x24
                              | TC_IER_CPAS;
    TC0->TC_CHANNEL[0].TC_CCR |= TC_CCR_CLKEN;    
   808ec:	681a      	ldr	r2, [r3, #0]
   808ee:	f042 0201 	orr.w	r2, r2, #1
   808f2:	601a      	str	r2, [r3, #0]
    uint16_t RC_count = 39400; // to have ish 1000 points per min (~16,67Hz)
    TC0->TC_CHANNEL[0].TC_RC = RC_count; // Set Compare RA        
   808f4:	f649 12e8 	movw	r2, #39400	; 0x99e8
   808f8:	61da      	str	r2, [r3, #28]
    TC0->TC_CHANNEL[0].TC_CMR = TC_CMR_TCCLKS_TIMER_CLOCK4  // prescale of 128
   808fa:	4a05      	ldr	r2, [pc, #20]	; (80910 <timer_init+0x3c>)
   808fc:	605a      	str	r2, [r3, #4]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   808fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   80902:	4b04      	ldr	r3, [pc, #16]	; (80914 <timer_init+0x40>)
   80904:	601a      	str	r2, [r3, #0]
                               | TC_CMR_WAVE                // waveform mode
                               | TC_CMR_WAVSEL_UP_RC        // compare rising edge on RC
                               | TC_CMR_ACPC_SET;           //     
    NVIC_EnableIRQ(ID_TC0); 
}
   80906:	4770      	bx	lr
   80908:	400e0610 	.word	0x400e0610
   8090c:	40080000 	.word	0x40080000
   80910:	0004c003 	.word	0x0004c003
   80914:	e000e100 	.word	0xe000e100

00080918 <TC0_Handler>:
void TC0_Handler(void){
   80918:	b508      	push	{r3, lr}
    uint16_t status =  TC0->TC_CHANNEL[0].TC_SR;
   8091a:	4b08      	ldr	r3, [pc, #32]	; (8093c <TC0_Handler+0x24>)
   8091c:	6a1b      	ldr	r3, [r3, #32]
    //if(TC0->TC_CHANNEL[0].TC_SR == TC_SR_COVFS){
    highscore++;
   8091e:	4b08      	ldr	r3, [pc, #32]	; (80940 <TC0_Handler+0x28>)
   80920:	681a      	ldr	r2, [r3, #0]
   80922:	3201      	adds	r2, #1
   80924:	601a      	str	r2, [r3, #0]
    //}
    //if (!(highscore %1000)) {
    printf("highscore is: %d \n\r", highscore);   
   80926:	6819      	ldr	r1, [r3, #0]
   80928:	4806      	ldr	r0, [pc, #24]	; (80944 <TC0_Handler+0x2c>)
   8092a:	4b07      	ldr	r3, [pc, #28]	; (80948 <TC0_Handler+0x30>)
   8092c:	4798      	blx	r3
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   8092e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   80932:	4b06      	ldr	r3, [pc, #24]	; (8094c <TC0_Handler+0x34>)
   80934:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   80938:	bd08      	pop	{r3, pc}
   8093a:	bf00      	nop
   8093c:	40080000 	.word	0x40080000
   80940:	20000450 	.word	0x20000450
   80944:	00081cc8 	.word	0x00081cc8
   80948:	000808b1 	.word	0x000808b1
   8094c:	e000e100 	.word	0xe000e100

00080950 <SetTimer>:
//  score.data_length = 4;
//  score.id = 0;
//}

void SetTimer(uint8_t state){
    if(state == 1){
   80950:	2801      	cmp	r0, #1
   80952:	d004      	beq.n	8095e <SetTimer+0xe>
        TC0->TC_CHANNEL[0].TC_CCR |= TC_CCR_SWTRG
                                   | TC_CCR_CLKEN;         
    }
    else if(state == 0) {
   80954:	b910      	cbnz	r0, 8095c <SetTimer+0xc>
        TC0->TC_CHANNEL[0].TC_CCR = TC_CCR_CLKDIS;         
   80956:	2202      	movs	r2, #2
   80958:	4b04      	ldr	r3, [pc, #16]	; (8096c <SetTimer+0x1c>)
   8095a:	601a      	str	r2, [r3, #0]
   8095c:	4770      	bx	lr
        TC0->TC_CHANNEL[0].TC_CCR |= TC_CCR_SWTRG
   8095e:	4a03      	ldr	r2, [pc, #12]	; (8096c <SetTimer+0x1c>)
   80960:	6813      	ldr	r3, [r2, #0]
   80962:	f043 0305 	orr.w	r3, r3, #5
   80966:	6013      	str	r3, [r2, #0]
   80968:	4770      	bx	lr
   8096a:	bf00      	nop
   8096c:	40080000 	.word	0x40080000

00080970 <servo_pwm_init>:
   80970:	4a0d      	ldr	r2, [pc, #52]	; (809a8 <servo_pwm_init+0x38>)
   80972:	6813      	ldr	r3, [r2, #0]
   80974:	f043 0310 	orr.w	r3, r3, #16
   80978:	6013      	str	r3, [r2, #0]
   8097a:	4b0c      	ldr	r3, [pc, #48]	; (809ac <servo_pwm_init+0x3c>)
   8097c:	685a      	ldr	r2, [r3, #4]
   8097e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80982:	605a      	str	r2, [r3, #4]
   80984:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80986:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   8098a:	671a      	str	r2, [r3, #112]	; 0x70
   8098c:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
   80990:	4b07      	ldr	r3, [pc, #28]	; (809b0 <servo_pwm_init+0x40>)
   80992:	601a      	str	r2, [r3, #0]
   80994:	220c      	movs	r2, #12
   80996:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
   8099a:	601a      	str	r2, [r3, #0]
   8099c:	f649 4240 	movw	r2, #40000	; 0x9c40
   809a0:	330c      	adds	r3, #12
   809a2:	601a      	str	r2, [r3, #0]
   809a4:	4770      	bx	lr
   809a6:	bf00      	nop
   809a8:	400e0700 	.word	0x400e0700
   809ac:	400e1200 	.word	0x400e1200
   809b0:	40094000 	.word	0x40094000
   809b4:	00000000 	.word	0x00000000

000809b8 <servo_set_pwm>:
   809b8:	b538      	push	{r3, r4, r5, lr}
   809ba:	4604      	mov	r4, r0
   809bc:	4b16      	ldr	r3, [pc, #88]	; (80a18 <servo_set_pwm+0x60>)
   809be:	4798      	blx	r3
   809c0:	a313      	add	r3, pc, #76	; (adr r3, 80a10 <servo_set_pwm+0x58>)
   809c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   809c6:	4d15      	ldr	r5, [pc, #84]	; (80a1c <servo_set_pwm+0x64>)
   809c8:	47a8      	blx	r5
   809ca:	b9b8      	cbnz	r0, 809fc <servo_set_pwm+0x44>
   809cc:	4914      	ldr	r1, [pc, #80]	; (80a20 <servo_set_pwm+0x68>)
   809ce:	4620      	mov	r0, r4
   809d0:	4b14      	ldr	r3, [pc, #80]	; (80a24 <servo_set_pwm+0x6c>)
   809d2:	4798      	blx	r3
   809d4:	b9b8      	cbnz	r0, 80a06 <servo_set_pwm+0x4e>
   809d6:	4621      	mov	r1, r4
   809d8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
   809dc:	4b12      	ldr	r3, [pc, #72]	; (80a28 <servo_set_pwm+0x70>)
   809de:	4798      	blx	r3
   809e0:	4912      	ldr	r1, [pc, #72]	; (80a2c <servo_set_pwm+0x74>)
   809e2:	4b13      	ldr	r3, [pc, #76]	; (80a30 <servo_set_pwm+0x78>)
   809e4:	4798      	blx	r3
   809e6:	4b13      	ldr	r3, [pc, #76]	; (80a34 <servo_set_pwm+0x7c>)
   809e8:	4798      	blx	r3
   809ea:	4b13      	ldr	r3, [pc, #76]	; (80a38 <servo_set_pwm+0x80>)
   809ec:	6018      	str	r0, [r3, #0]
   809ee:	4a13      	ldr	r2, [pc, #76]	; (80a3c <servo_set_pwm+0x84>)
   809f0:	6813      	ldr	r3, [r2, #0]
   809f2:	f043 0320 	orr.w	r3, r3, #32
   809f6:	6013      	str	r3, [r2, #0]
   809f8:	2000      	movs	r0, #0
   809fa:	bd38      	pop	{r3, r4, r5, pc}
   809fc:	4810      	ldr	r0, [pc, #64]	; (80a40 <servo_set_pwm+0x88>)
   809fe:	4b11      	ldr	r3, [pc, #68]	; (80a44 <servo_set_pwm+0x8c>)
   80a00:	4798      	blx	r3
   80a02:	2001      	movs	r0, #1
   80a04:	bd38      	pop	{r3, r4, r5, pc}
   80a06:	4810      	ldr	r0, [pc, #64]	; (80a48 <servo_set_pwm+0x90>)
   80a08:	4b0e      	ldr	r3, [pc, #56]	; (80a44 <servo_set_pwm+0x8c>)
   80a0a:	4798      	blx	r3
   80a0c:	2001      	movs	r0, #1
   80a0e:	bd38      	pop	{r3, r4, r5, pc}
   80a10:	47ae147b 	.word	0x47ae147b
   80a14:	3fa47ae1 	.word	0x3fa47ae1
   80a18:	00080e71 	.word	0x00080e71
   80a1c:	000813fd 	.word	0x000813fd
   80a20:	42dc0000 	.word	0x42dc0000
   80a24:	00081ad1 	.word	0x00081ad1
   80a28:	00081545 	.word	0x00081545
   80a2c:	471c4000 	.word	0x471c4000
   80a30:	00081759 	.word	0x00081759
   80a34:	00081ae5 	.word	0x00081ae5
   80a38:	400942a4 	.word	0x400942a4
   80a3c:	40094004 	.word	0x40094004
   80a40:	00081cdc 	.word	0x00081cdc
   80a44:	000808b1 	.word	0x000808b1
   80a48:	00081cf8 	.word	0x00081cf8
   80a4c:	00000000 	.word	0x00000000

00080a50 <servo_set_angle>:
   80a50:	b510      	push	{r4, lr}
   80a52:	b084      	sub	sp, #16
   80a54:	ac04      	add	r4, sp, #16
   80a56:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
   80a5a:	9800      	ldr	r0, [sp, #0]
   80a5c:	4b0c      	ldr	r3, [pc, #48]	; (80a90 <servo_set_angle+0x40>)
   80a5e:	4798      	blx	r3
   80a60:	4b0c      	ldr	r3, [pc, #48]	; (80a94 <servo_set_angle+0x44>)
   80a62:	4798      	blx	r3
   80a64:	a308      	add	r3, pc, #32	; (adr r3, 80a88 <servo_set_angle+0x38>)
   80a66:	e9d3 2300 	ldrd	r2, r3, [r3]
   80a6a:	4c0b      	ldr	r4, [pc, #44]	; (80a98 <servo_set_angle+0x48>)
   80a6c:	47a0      	blx	r4
   80a6e:	2200      	movs	r2, #0
   80a70:	4b0a      	ldr	r3, [pc, #40]	; (80a9c <servo_set_angle+0x4c>)
   80a72:	4c0b      	ldr	r4, [pc, #44]	; (80aa0 <servo_set_angle+0x50>)
   80a74:	47a0      	blx	r4
   80a76:	4b0b      	ldr	r3, [pc, #44]	; (80aa4 <servo_set_angle+0x54>)
   80a78:	4798      	blx	r3
   80a7a:	490b      	ldr	r1, [pc, #44]	; (80aa8 <servo_set_angle+0x58>)
   80a7c:	4b0b      	ldr	r3, [pc, #44]	; (80aac <servo_set_angle+0x5c>)
   80a7e:	4798      	blx	r3
   80a80:	4b0b      	ldr	r3, [pc, #44]	; (80ab0 <servo_set_angle+0x60>)
   80a82:	4798      	blx	r3
   80a84:	b004      	add	sp, #16
   80a86:	bd10      	pop	{r4, pc}
   80a88:	bc6a7efa 	.word	0xbc6a7efa
   80a8c:	3f789374 	.word	0x3f789374
   80a90:	000816b1 	.word	0x000816b1
   80a94:	00080e71 	.word	0x00080e71
   80a98:	00080f19 	.word	0x00080f19
   80a9c:	3ff80000 	.word	0x3ff80000
   80aa0:	00080bb5 	.word	0x00080bb5
   80aa4:	0008149d 	.word	0x0008149d
   80aa8:	41a00000 	.word	0x41a00000
   80aac:	000818c1 	.word	0x000818c1
   80ab0:	000809b9 	.word	0x000809b9

00080ab4 <configure_uart>:
	uint32_t ul_sr;

/*
Initialize UART ring buffer as empty
*/
rx_buffer.head=0;
   80ab4:	4b16      	ldr	r3, [pc, #88]	; (80b10 <configure_uart+0x5c>)
   80ab6:	2200      	movs	r2, #0
   80ab8:	701a      	strb	r2, [r3, #0]
rx_buffer.tail=0;
   80aba:	705a      	strb	r2, [r3, #1]
/*
Initialize UART communication
*/
	// Pin configuration
	// Disable interrupts on Uart receive (URXD) and transmit (UTXD) pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80abc:	4b15      	ldr	r3, [pc, #84]	; (80b14 <configure_uart+0x60>)
   80abe:	f44f 7140 	mov.w	r1, #768	; 0x300
   80ac2:	6459      	str	r1, [r3, #68]	; 0x44

	// Disable the Parallel IO (PIO) of the URXD and UTXD pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80ac4:	6059      	str	r1, [r3, #4]

	// Read current peripheral AB select register and set the UTXD and URXD pins to 0 (UART is connected as peripheral A)
	ul_sr = PIOA->PIO_ABSR;
   80ac6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	PIOA->PIO_ABSR &= ~(PIO_PA8A_URXD | PIO_PA9A_UTXD) & ul_sr;
   80ac8:	6f18      	ldr	r0, [r3, #112]	; 0x70
   80aca:	4002      	ands	r2, r0
   80acc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   80ad0:	671a      	str	r2, [r3, #112]	; 0x70

	// Enable pull up resistor on URXD and UTXD pin
	PIOA->PIO_PUER = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80ad2:	6659      	str	r1, [r3, #100]	; 0x64

	// Uart configuration
	
	// Enable the peripheral UART controller in Power Management Controller (PMC)
	PMC->PMC_PCER0 = 1 << ID_UART;
   80ad4:	f44f 7280 	mov.w	r2, #256	; 0x100
   80ad8:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   80adc:	611a      	str	r2, [r3, #16]

	// Reset and disable receiver and transmitter
	UART->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX | UART_CR_RXDIS | UART_CR_TXDIS;
   80ade:	f503 7300 	add.w	r3, r3, #512	; 0x200
   80ae2:	21ac      	movs	r1, #172	; 0xac
   80ae4:	6019      	str	r1, [r3, #0]

	// Set the baudrate
	UART->UART_BRGR = 547; // MCK / 16 * x = BaudRate (write x into UART_BRGR)  
   80ae6:	f240 2123 	movw	r1, #547	; 0x223
   80aea:	6219      	str	r1, [r3, #32]

	// No parity bits
	UART->UART_MR = UART_MR_PAR_NO | UART_MR_CHMODE_NORMAL;	
   80aec:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80af0:	6059      	str	r1, [r3, #4]

	// Disable PDC channel
	UART->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80af2:	f240 2102 	movw	r1, #514	; 0x202
   80af6:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120

	// Configure interrupts on receive ready and errors
	UART->UART_IDR = 0xFFFFFFFF;
   80afa:	f04f 31ff 	mov.w	r1, #4294967295
   80afe:	60d9      	str	r1, [r3, #12]
	UART->UART_IER = UART_IER_RXRDY | UART_IER_OVRE | UART_IER_FRAME | UART_IER_PARE;
   80b00:	21e1      	movs	r1, #225	; 0xe1
   80b02:	6099      	str	r1, [r3, #8]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80b04:	4904      	ldr	r1, [pc, #16]	; (80b18 <configure_uart+0x64>)
   80b06:	600a      	str	r2, [r1, #0]

	// Enable UART interrupt in the Nested Vectored Interrupt Controller(NVIC)
	NVIC_EnableIRQ((IRQn_Type) ID_UART);

	// Enable UART receiver and transmitter
	UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80b08:	2250      	movs	r2, #80	; 0x50
   80b0a:	601a      	str	r2, [r3, #0]
   80b0c:	4770      	bx	lr
   80b0e:	bf00      	nop
   80b10:	20000468 	.word	0x20000468
   80b14:	400e0e00 	.word	0x400e0e00
   80b18:	e000e100 	.word	0xe000e100

00080b1c <uart_putchar>:
 * \retval Success(0) or failure(1).
 */
int uart_putchar(const uint8_t c)
{
	// Check if the transmitter is ready
	if((UART->UART_SR & UART_SR_TXRDY) != UART_SR_TXRDY)
   80b1c:	4b07      	ldr	r3, [pc, #28]	; (80b3c <uart_putchar+0x20>)
   80b1e:	695b      	ldr	r3, [r3, #20]
   80b20:	f013 0f02 	tst.w	r3, #2
   80b24:	d008      	beq.n	80b38 <uart_putchar+0x1c>
	return 1;

	// Send the character
	UART->UART_THR = c;
   80b26:	4b05      	ldr	r3, [pc, #20]	; (80b3c <uart_putchar+0x20>)
   80b28:	61d8      	str	r0, [r3, #28]
	while(!((UART->UART_SR) & UART_SR_TXEMPTY)); // Wait for the character to be sent, can implement ring buffer to remove the wait
   80b2a:	461a      	mov	r2, r3
   80b2c:	6953      	ldr	r3, [r2, #20]
   80b2e:	f413 7f00 	tst.w	r3, #512	; 0x200
   80b32:	d0fb      	beq.n	80b2c <uart_putchar+0x10>
	return 0;
   80b34:	2000      	movs	r0, #0
   80b36:	4770      	bx	lr
	return 1;
   80b38:	2001      	movs	r0, #1
}
   80b3a:	4770      	bx	lr
   80b3c:	400e0800 	.word	0x400e0800

00080b40 <UART_Handler>:

void UART_Handler(void)
{
   80b40:	b508      	push	{r3, lr}
	uint32_t status = UART->UART_SR;
   80b42:	4b15      	ldr	r3, [pc, #84]	; (80b98 <UART_Handler+0x58>)
   80b44:	695b      	ldr	r3, [r3, #20]
	
	//Reset UART at overflow error and frame error
	if(status & (UART_SR_OVRE | UART_SR_FRAME | UART_SR_PARE))
   80b46:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   80b4a:	d003      	beq.n	80b54 <UART_Handler+0x14>
	{
		UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN | UART_CR_RSTSTA;
   80b4c:	f44f 71a8 	mov.w	r1, #336	; 0x150
   80b50:	4a11      	ldr	r2, [pc, #68]	; (80b98 <UART_Handler+0x58>)
   80b52:	6011      	str	r1, [r2, #0]
	}
	
	//Check if message is ready to be received
	if(status & UART_SR_RXRDY)
   80b54:	f013 0f01 	tst.w	r3, #1
   80b58:	d012      	beq.n	80b80 <UART_Handler+0x40>
	{
		//Check if receive ring buffer is full and 
		if((rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE == rx_buffer.head)
   80b5a:	4810      	ldr	r0, [pc, #64]	; (80b9c <UART_Handler+0x5c>)
   80b5c:	7842      	ldrb	r2, [r0, #1]
   80b5e:	1c53      	adds	r3, r2, #1
   80b60:	4259      	negs	r1, r3
   80b62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   80b66:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   80b6a:	bf58      	it	pl
   80b6c:	424b      	negpl	r3, r1
   80b6e:	7801      	ldrb	r1, [r0, #0]
   80b70:	428b      	cmp	r3, r1
   80b72:	d006      	beq.n	80b82 <UART_Handler+0x42>
		{
			printf("ERR: UART RX buffer is full\n\r");
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
			return;
		}
		rx_buffer.data[rx_buffer.tail] = UART->UART_RHR;
   80b74:	4908      	ldr	r1, [pc, #32]	; (80b98 <UART_Handler+0x58>)
   80b76:	6988      	ldr	r0, [r1, #24]
   80b78:	4908      	ldr	r1, [pc, #32]	; (80b9c <UART_Handler+0x5c>)
   80b7a:	440a      	add	r2, r1
   80b7c:	7090      	strb	r0, [r2, #2]
		rx_buffer.tail = (rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE;
   80b7e:	704b      	strb	r3, [r1, #1]
   80b80:	bd08      	pop	{r3, pc}
			printf("ERR: UART RX buffer is full\n\r");
   80b82:	4807      	ldr	r0, [pc, #28]	; (80ba0 <UART_Handler+0x60>)
   80b84:	4b07      	ldr	r3, [pc, #28]	; (80ba4 <UART_Handler+0x64>)
   80b86:	4798      	blx	r3
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
   80b88:	4b03      	ldr	r3, [pc, #12]	; (80b98 <UART_Handler+0x58>)
   80b8a:	699a      	ldr	r2, [r3, #24]
   80b8c:	4b03      	ldr	r3, [pc, #12]	; (80b9c <UART_Handler+0x5c>)
   80b8e:	7859      	ldrb	r1, [r3, #1]
   80b90:	440b      	add	r3, r1
   80b92:	709a      	strb	r2, [r3, #2]
			return;
   80b94:	bd08      	pop	{r3, pc}
   80b96:	bf00      	nop
   80b98:	400e0800 	.word	0x400e0800
   80b9c:	20000468 	.word	0x20000468
   80ba0:	00081d14 	.word	0x00081d14
   80ba4:	000808b1 	.word	0x000808b1

00080ba8 <__aeabi_drsub>:
   80ba8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   80bac:	e002      	b.n	80bb4 <__adddf3>
   80bae:	bf00      	nop

00080bb0 <__aeabi_dsub>:
   80bb0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00080bb4 <__adddf3>:
   80bb4:	b530      	push	{r4, r5, lr}
   80bb6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   80bba:	ea4f 0543 	mov.w	r5, r3, lsl #1
   80bbe:	ea94 0f05 	teq	r4, r5
   80bc2:	bf08      	it	eq
   80bc4:	ea90 0f02 	teqeq	r0, r2
   80bc8:	bf1f      	itttt	ne
   80bca:	ea54 0c00 	orrsne.w	ip, r4, r0
   80bce:	ea55 0c02 	orrsne.w	ip, r5, r2
   80bd2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   80bd6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   80bda:	f000 80e2 	beq.w	80da2 <__adddf3+0x1ee>
   80bde:	ea4f 5454 	mov.w	r4, r4, lsr #21
   80be2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   80be6:	bfb8      	it	lt
   80be8:	426d      	neglt	r5, r5
   80bea:	dd0c      	ble.n	80c06 <__adddf3+0x52>
   80bec:	442c      	add	r4, r5
   80bee:	ea80 0202 	eor.w	r2, r0, r2
   80bf2:	ea81 0303 	eor.w	r3, r1, r3
   80bf6:	ea82 0000 	eor.w	r0, r2, r0
   80bfa:	ea83 0101 	eor.w	r1, r3, r1
   80bfe:	ea80 0202 	eor.w	r2, r0, r2
   80c02:	ea81 0303 	eor.w	r3, r1, r3
   80c06:	2d36      	cmp	r5, #54	; 0x36
   80c08:	bf88      	it	hi
   80c0a:	bd30      	pophi	{r4, r5, pc}
   80c0c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   80c10:	ea4f 3101 	mov.w	r1, r1, lsl #12
   80c14:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   80c18:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   80c1c:	d002      	beq.n	80c24 <__adddf3+0x70>
   80c1e:	4240      	negs	r0, r0
   80c20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   80c24:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   80c28:	ea4f 3303 	mov.w	r3, r3, lsl #12
   80c2c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   80c30:	d002      	beq.n	80c38 <__adddf3+0x84>
   80c32:	4252      	negs	r2, r2
   80c34:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   80c38:	ea94 0f05 	teq	r4, r5
   80c3c:	f000 80a7 	beq.w	80d8e <__adddf3+0x1da>
   80c40:	f1a4 0401 	sub.w	r4, r4, #1
   80c44:	f1d5 0e20 	rsbs	lr, r5, #32
   80c48:	db0d      	blt.n	80c66 <__adddf3+0xb2>
   80c4a:	fa02 fc0e 	lsl.w	ip, r2, lr
   80c4e:	fa22 f205 	lsr.w	r2, r2, r5
   80c52:	1880      	adds	r0, r0, r2
   80c54:	f141 0100 	adc.w	r1, r1, #0
   80c58:	fa03 f20e 	lsl.w	r2, r3, lr
   80c5c:	1880      	adds	r0, r0, r2
   80c5e:	fa43 f305 	asr.w	r3, r3, r5
   80c62:	4159      	adcs	r1, r3
   80c64:	e00e      	b.n	80c84 <__adddf3+0xd0>
   80c66:	f1a5 0520 	sub.w	r5, r5, #32
   80c6a:	f10e 0e20 	add.w	lr, lr, #32
   80c6e:	2a01      	cmp	r2, #1
   80c70:	fa03 fc0e 	lsl.w	ip, r3, lr
   80c74:	bf28      	it	cs
   80c76:	f04c 0c02 	orrcs.w	ip, ip, #2
   80c7a:	fa43 f305 	asr.w	r3, r3, r5
   80c7e:	18c0      	adds	r0, r0, r3
   80c80:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   80c84:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   80c88:	d507      	bpl.n	80c9a <__adddf3+0xe6>
   80c8a:	f04f 0e00 	mov.w	lr, #0
   80c8e:	f1dc 0c00 	rsbs	ip, ip, #0
   80c92:	eb7e 0000 	sbcs.w	r0, lr, r0
   80c96:	eb6e 0101 	sbc.w	r1, lr, r1
   80c9a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   80c9e:	d31b      	bcc.n	80cd8 <__adddf3+0x124>
   80ca0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   80ca4:	d30c      	bcc.n	80cc0 <__adddf3+0x10c>
   80ca6:	0849      	lsrs	r1, r1, #1
   80ca8:	ea5f 0030 	movs.w	r0, r0, rrx
   80cac:	ea4f 0c3c 	mov.w	ip, ip, rrx
   80cb0:	f104 0401 	add.w	r4, r4, #1
   80cb4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   80cb8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   80cbc:	f080 809a 	bcs.w	80df4 <__adddf3+0x240>
   80cc0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   80cc4:	bf08      	it	eq
   80cc6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   80cca:	f150 0000 	adcs.w	r0, r0, #0
   80cce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   80cd2:	ea41 0105 	orr.w	r1, r1, r5
   80cd6:	bd30      	pop	{r4, r5, pc}
   80cd8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   80cdc:	4140      	adcs	r0, r0
   80cde:	eb41 0101 	adc.w	r1, r1, r1
   80ce2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   80ce6:	f1a4 0401 	sub.w	r4, r4, #1
   80cea:	d1e9      	bne.n	80cc0 <__adddf3+0x10c>
   80cec:	f091 0f00 	teq	r1, #0
   80cf0:	bf04      	itt	eq
   80cf2:	4601      	moveq	r1, r0
   80cf4:	2000      	moveq	r0, #0
   80cf6:	fab1 f381 	clz	r3, r1
   80cfa:	bf08      	it	eq
   80cfc:	3320      	addeq	r3, #32
   80cfe:	f1a3 030b 	sub.w	r3, r3, #11
   80d02:	f1b3 0220 	subs.w	r2, r3, #32
   80d06:	da0c      	bge.n	80d22 <__adddf3+0x16e>
   80d08:	320c      	adds	r2, #12
   80d0a:	dd08      	ble.n	80d1e <__adddf3+0x16a>
   80d0c:	f102 0c14 	add.w	ip, r2, #20
   80d10:	f1c2 020c 	rsb	r2, r2, #12
   80d14:	fa01 f00c 	lsl.w	r0, r1, ip
   80d18:	fa21 f102 	lsr.w	r1, r1, r2
   80d1c:	e00c      	b.n	80d38 <__adddf3+0x184>
   80d1e:	f102 0214 	add.w	r2, r2, #20
   80d22:	bfd8      	it	le
   80d24:	f1c2 0c20 	rsble	ip, r2, #32
   80d28:	fa01 f102 	lsl.w	r1, r1, r2
   80d2c:	fa20 fc0c 	lsr.w	ip, r0, ip
   80d30:	bfdc      	itt	le
   80d32:	ea41 010c 	orrle.w	r1, r1, ip
   80d36:	4090      	lslle	r0, r2
   80d38:	1ae4      	subs	r4, r4, r3
   80d3a:	bfa2      	ittt	ge
   80d3c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   80d40:	4329      	orrge	r1, r5
   80d42:	bd30      	popge	{r4, r5, pc}
   80d44:	ea6f 0404 	mvn.w	r4, r4
   80d48:	3c1f      	subs	r4, #31
   80d4a:	da1c      	bge.n	80d86 <__adddf3+0x1d2>
   80d4c:	340c      	adds	r4, #12
   80d4e:	dc0e      	bgt.n	80d6e <__adddf3+0x1ba>
   80d50:	f104 0414 	add.w	r4, r4, #20
   80d54:	f1c4 0220 	rsb	r2, r4, #32
   80d58:	fa20 f004 	lsr.w	r0, r0, r4
   80d5c:	fa01 f302 	lsl.w	r3, r1, r2
   80d60:	ea40 0003 	orr.w	r0, r0, r3
   80d64:	fa21 f304 	lsr.w	r3, r1, r4
   80d68:	ea45 0103 	orr.w	r1, r5, r3
   80d6c:	bd30      	pop	{r4, r5, pc}
   80d6e:	f1c4 040c 	rsb	r4, r4, #12
   80d72:	f1c4 0220 	rsb	r2, r4, #32
   80d76:	fa20 f002 	lsr.w	r0, r0, r2
   80d7a:	fa01 f304 	lsl.w	r3, r1, r4
   80d7e:	ea40 0003 	orr.w	r0, r0, r3
   80d82:	4629      	mov	r1, r5
   80d84:	bd30      	pop	{r4, r5, pc}
   80d86:	fa21 f004 	lsr.w	r0, r1, r4
   80d8a:	4629      	mov	r1, r5
   80d8c:	bd30      	pop	{r4, r5, pc}
   80d8e:	f094 0f00 	teq	r4, #0
   80d92:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   80d96:	bf06      	itte	eq
   80d98:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   80d9c:	3401      	addeq	r4, #1
   80d9e:	3d01      	subne	r5, #1
   80da0:	e74e      	b.n	80c40 <__adddf3+0x8c>
   80da2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   80da6:	bf18      	it	ne
   80da8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   80dac:	d029      	beq.n	80e02 <__adddf3+0x24e>
   80dae:	ea94 0f05 	teq	r4, r5
   80db2:	bf08      	it	eq
   80db4:	ea90 0f02 	teqeq	r0, r2
   80db8:	d005      	beq.n	80dc6 <__adddf3+0x212>
   80dba:	ea54 0c00 	orrs.w	ip, r4, r0
   80dbe:	bf04      	itt	eq
   80dc0:	4619      	moveq	r1, r3
   80dc2:	4610      	moveq	r0, r2
   80dc4:	bd30      	pop	{r4, r5, pc}
   80dc6:	ea91 0f03 	teq	r1, r3
   80dca:	bf1e      	ittt	ne
   80dcc:	2100      	movne	r1, #0
   80dce:	2000      	movne	r0, #0
   80dd0:	bd30      	popne	{r4, r5, pc}
   80dd2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   80dd6:	d105      	bne.n	80de4 <__adddf3+0x230>
   80dd8:	0040      	lsls	r0, r0, #1
   80dda:	4149      	adcs	r1, r1
   80ddc:	bf28      	it	cs
   80dde:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   80de2:	bd30      	pop	{r4, r5, pc}
   80de4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   80de8:	bf3c      	itt	cc
   80dea:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   80dee:	bd30      	popcc	{r4, r5, pc}
   80df0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   80df4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   80df8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   80dfc:	f04f 0000 	mov.w	r0, #0
   80e00:	bd30      	pop	{r4, r5, pc}
   80e02:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   80e06:	bf1a      	itte	ne
   80e08:	4619      	movne	r1, r3
   80e0a:	4610      	movne	r0, r2
   80e0c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   80e10:	bf1c      	itt	ne
   80e12:	460b      	movne	r3, r1
   80e14:	4602      	movne	r2, r0
   80e16:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   80e1a:	bf06      	itte	eq
   80e1c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   80e20:	ea91 0f03 	teqeq	r1, r3
   80e24:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   80e28:	bd30      	pop	{r4, r5, pc}
   80e2a:	bf00      	nop

00080e2c <__aeabi_ui2d>:
   80e2c:	f090 0f00 	teq	r0, #0
   80e30:	bf04      	itt	eq
   80e32:	2100      	moveq	r1, #0
   80e34:	4770      	bxeq	lr
   80e36:	b530      	push	{r4, r5, lr}
   80e38:	f44f 6480 	mov.w	r4, #1024	; 0x400
   80e3c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   80e40:	f04f 0500 	mov.w	r5, #0
   80e44:	f04f 0100 	mov.w	r1, #0
   80e48:	e750      	b.n	80cec <__adddf3+0x138>
   80e4a:	bf00      	nop

00080e4c <__aeabi_i2d>:
   80e4c:	f090 0f00 	teq	r0, #0
   80e50:	bf04      	itt	eq
   80e52:	2100      	moveq	r1, #0
   80e54:	4770      	bxeq	lr
   80e56:	b530      	push	{r4, r5, lr}
   80e58:	f44f 6480 	mov.w	r4, #1024	; 0x400
   80e5c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   80e60:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   80e64:	bf48      	it	mi
   80e66:	4240      	negmi	r0, r0
   80e68:	f04f 0100 	mov.w	r1, #0
   80e6c:	e73e      	b.n	80cec <__adddf3+0x138>
   80e6e:	bf00      	nop

00080e70 <__aeabi_f2d>:
   80e70:	0042      	lsls	r2, r0, #1
   80e72:	ea4f 01e2 	mov.w	r1, r2, asr #3
   80e76:	ea4f 0131 	mov.w	r1, r1, rrx
   80e7a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   80e7e:	bf1f      	itttt	ne
   80e80:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   80e84:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   80e88:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   80e8c:	4770      	bxne	lr
   80e8e:	f092 0f00 	teq	r2, #0
   80e92:	bf14      	ite	ne
   80e94:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   80e98:	4770      	bxeq	lr
   80e9a:	b530      	push	{r4, r5, lr}
   80e9c:	f44f 7460 	mov.w	r4, #896	; 0x380
   80ea0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   80ea4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   80ea8:	e720      	b.n	80cec <__adddf3+0x138>
   80eaa:	bf00      	nop

00080eac <__aeabi_ul2d>:
   80eac:	ea50 0201 	orrs.w	r2, r0, r1
   80eb0:	bf08      	it	eq
   80eb2:	4770      	bxeq	lr
   80eb4:	b530      	push	{r4, r5, lr}
   80eb6:	f04f 0500 	mov.w	r5, #0
   80eba:	e00a      	b.n	80ed2 <__aeabi_l2d+0x16>

00080ebc <__aeabi_l2d>:
   80ebc:	ea50 0201 	orrs.w	r2, r0, r1
   80ec0:	bf08      	it	eq
   80ec2:	4770      	bxeq	lr
   80ec4:	b530      	push	{r4, r5, lr}
   80ec6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   80eca:	d502      	bpl.n	80ed2 <__aeabi_l2d+0x16>
   80ecc:	4240      	negs	r0, r0
   80ece:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   80ed2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   80ed6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   80eda:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   80ede:	f43f aedc 	beq.w	80c9a <__adddf3+0xe6>
   80ee2:	f04f 0203 	mov.w	r2, #3
   80ee6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   80eea:	bf18      	it	ne
   80eec:	3203      	addne	r2, #3
   80eee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   80ef2:	bf18      	it	ne
   80ef4:	3203      	addne	r2, #3
   80ef6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   80efa:	f1c2 0320 	rsb	r3, r2, #32
   80efe:	fa00 fc03 	lsl.w	ip, r0, r3
   80f02:	fa20 f002 	lsr.w	r0, r0, r2
   80f06:	fa01 fe03 	lsl.w	lr, r1, r3
   80f0a:	ea40 000e 	orr.w	r0, r0, lr
   80f0e:	fa21 f102 	lsr.w	r1, r1, r2
   80f12:	4414      	add	r4, r2
   80f14:	e6c1      	b.n	80c9a <__adddf3+0xe6>
   80f16:	bf00      	nop

00080f18 <__aeabi_dmul>:
   80f18:	b570      	push	{r4, r5, r6, lr}
   80f1a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   80f1e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   80f22:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   80f26:	bf1d      	ittte	ne
   80f28:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   80f2c:	ea94 0f0c 	teqne	r4, ip
   80f30:	ea95 0f0c 	teqne	r5, ip
   80f34:	f000 f8de 	bleq	810f4 <__aeabi_dmul+0x1dc>
   80f38:	442c      	add	r4, r5
   80f3a:	ea81 0603 	eor.w	r6, r1, r3
   80f3e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   80f42:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   80f46:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   80f4a:	bf18      	it	ne
   80f4c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   80f50:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   80f54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   80f58:	d038      	beq.n	80fcc <__aeabi_dmul+0xb4>
   80f5a:	fba0 ce02 	umull	ip, lr, r0, r2
   80f5e:	f04f 0500 	mov.w	r5, #0
   80f62:	fbe1 e502 	umlal	lr, r5, r1, r2
   80f66:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   80f6a:	fbe0 e503 	umlal	lr, r5, r0, r3
   80f6e:	f04f 0600 	mov.w	r6, #0
   80f72:	fbe1 5603 	umlal	r5, r6, r1, r3
   80f76:	f09c 0f00 	teq	ip, #0
   80f7a:	bf18      	it	ne
   80f7c:	f04e 0e01 	orrne.w	lr, lr, #1
   80f80:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   80f84:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   80f88:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   80f8c:	d204      	bcs.n	80f98 <__aeabi_dmul+0x80>
   80f8e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   80f92:	416d      	adcs	r5, r5
   80f94:	eb46 0606 	adc.w	r6, r6, r6
   80f98:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   80f9c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   80fa0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   80fa4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   80fa8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   80fac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   80fb0:	bf88      	it	hi
   80fb2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   80fb6:	d81e      	bhi.n	80ff6 <__aeabi_dmul+0xde>
   80fb8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   80fbc:	bf08      	it	eq
   80fbe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   80fc2:	f150 0000 	adcs.w	r0, r0, #0
   80fc6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   80fca:	bd70      	pop	{r4, r5, r6, pc}
   80fcc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   80fd0:	ea46 0101 	orr.w	r1, r6, r1
   80fd4:	ea40 0002 	orr.w	r0, r0, r2
   80fd8:	ea81 0103 	eor.w	r1, r1, r3
   80fdc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   80fe0:	bfc2      	ittt	gt
   80fe2:	ebd4 050c 	rsbsgt	r5, r4, ip
   80fe6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   80fea:	bd70      	popgt	{r4, r5, r6, pc}
   80fec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   80ff0:	f04f 0e00 	mov.w	lr, #0
   80ff4:	3c01      	subs	r4, #1
   80ff6:	f300 80ab 	bgt.w	81150 <__aeabi_dmul+0x238>
   80ffa:	f114 0f36 	cmn.w	r4, #54	; 0x36
   80ffe:	bfde      	ittt	le
   81000:	2000      	movle	r0, #0
   81002:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   81006:	bd70      	pople	{r4, r5, r6, pc}
   81008:	f1c4 0400 	rsb	r4, r4, #0
   8100c:	3c20      	subs	r4, #32
   8100e:	da35      	bge.n	8107c <__aeabi_dmul+0x164>
   81010:	340c      	adds	r4, #12
   81012:	dc1b      	bgt.n	8104c <__aeabi_dmul+0x134>
   81014:	f104 0414 	add.w	r4, r4, #20
   81018:	f1c4 0520 	rsb	r5, r4, #32
   8101c:	fa00 f305 	lsl.w	r3, r0, r5
   81020:	fa20 f004 	lsr.w	r0, r0, r4
   81024:	fa01 f205 	lsl.w	r2, r1, r5
   81028:	ea40 0002 	orr.w	r0, r0, r2
   8102c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   81030:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   81034:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   81038:	fa21 f604 	lsr.w	r6, r1, r4
   8103c:	eb42 0106 	adc.w	r1, r2, r6
   81040:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81044:	bf08      	it	eq
   81046:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8104a:	bd70      	pop	{r4, r5, r6, pc}
   8104c:	f1c4 040c 	rsb	r4, r4, #12
   81050:	f1c4 0520 	rsb	r5, r4, #32
   81054:	fa00 f304 	lsl.w	r3, r0, r4
   81058:	fa20 f005 	lsr.w	r0, r0, r5
   8105c:	fa01 f204 	lsl.w	r2, r1, r4
   81060:	ea40 0002 	orr.w	r0, r0, r2
   81064:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81068:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8106c:	f141 0100 	adc.w	r1, r1, #0
   81070:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81074:	bf08      	it	eq
   81076:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8107a:	bd70      	pop	{r4, r5, r6, pc}
   8107c:	f1c4 0520 	rsb	r5, r4, #32
   81080:	fa00 f205 	lsl.w	r2, r0, r5
   81084:	ea4e 0e02 	orr.w	lr, lr, r2
   81088:	fa20 f304 	lsr.w	r3, r0, r4
   8108c:	fa01 f205 	lsl.w	r2, r1, r5
   81090:	ea43 0302 	orr.w	r3, r3, r2
   81094:	fa21 f004 	lsr.w	r0, r1, r4
   81098:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8109c:	fa21 f204 	lsr.w	r2, r1, r4
   810a0:	ea20 0002 	bic.w	r0, r0, r2
   810a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   810a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   810ac:	bf08      	it	eq
   810ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   810b2:	bd70      	pop	{r4, r5, r6, pc}
   810b4:	f094 0f00 	teq	r4, #0
   810b8:	d10f      	bne.n	810da <__aeabi_dmul+0x1c2>
   810ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   810be:	0040      	lsls	r0, r0, #1
   810c0:	eb41 0101 	adc.w	r1, r1, r1
   810c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   810c8:	bf08      	it	eq
   810ca:	3c01      	subeq	r4, #1
   810cc:	d0f7      	beq.n	810be <__aeabi_dmul+0x1a6>
   810ce:	ea41 0106 	orr.w	r1, r1, r6
   810d2:	f095 0f00 	teq	r5, #0
   810d6:	bf18      	it	ne
   810d8:	4770      	bxne	lr
   810da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   810de:	0052      	lsls	r2, r2, #1
   810e0:	eb43 0303 	adc.w	r3, r3, r3
   810e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   810e8:	bf08      	it	eq
   810ea:	3d01      	subeq	r5, #1
   810ec:	d0f7      	beq.n	810de <__aeabi_dmul+0x1c6>
   810ee:	ea43 0306 	orr.w	r3, r3, r6
   810f2:	4770      	bx	lr
   810f4:	ea94 0f0c 	teq	r4, ip
   810f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   810fc:	bf18      	it	ne
   810fe:	ea95 0f0c 	teqne	r5, ip
   81102:	d00c      	beq.n	8111e <__aeabi_dmul+0x206>
   81104:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   81108:	bf18      	it	ne
   8110a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8110e:	d1d1      	bne.n	810b4 <__aeabi_dmul+0x19c>
   81110:	ea81 0103 	eor.w	r1, r1, r3
   81114:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81118:	f04f 0000 	mov.w	r0, #0
   8111c:	bd70      	pop	{r4, r5, r6, pc}
   8111e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   81122:	bf06      	itte	eq
   81124:	4610      	moveq	r0, r2
   81126:	4619      	moveq	r1, r3
   81128:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8112c:	d019      	beq.n	81162 <__aeabi_dmul+0x24a>
   8112e:	ea94 0f0c 	teq	r4, ip
   81132:	d102      	bne.n	8113a <__aeabi_dmul+0x222>
   81134:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   81138:	d113      	bne.n	81162 <__aeabi_dmul+0x24a>
   8113a:	ea95 0f0c 	teq	r5, ip
   8113e:	d105      	bne.n	8114c <__aeabi_dmul+0x234>
   81140:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   81144:	bf1c      	itt	ne
   81146:	4610      	movne	r0, r2
   81148:	4619      	movne	r1, r3
   8114a:	d10a      	bne.n	81162 <__aeabi_dmul+0x24a>
   8114c:	ea81 0103 	eor.w	r1, r1, r3
   81150:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81154:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   81158:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8115c:	f04f 0000 	mov.w	r0, #0
   81160:	bd70      	pop	{r4, r5, r6, pc}
   81162:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   81166:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8116a:	bd70      	pop	{r4, r5, r6, pc}

0008116c <__aeabi_ddiv>:
   8116c:	b570      	push	{r4, r5, r6, lr}
   8116e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   81172:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   81176:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8117a:	bf1d      	ittte	ne
   8117c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   81180:	ea94 0f0c 	teqne	r4, ip
   81184:	ea95 0f0c 	teqne	r5, ip
   81188:	f000 f8a7 	bleq	812da <__aeabi_ddiv+0x16e>
   8118c:	eba4 0405 	sub.w	r4, r4, r5
   81190:	ea81 0e03 	eor.w	lr, r1, r3
   81194:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   81198:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8119c:	f000 8088 	beq.w	812b0 <__aeabi_ddiv+0x144>
   811a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   811a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   811a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   811ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   811b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   811b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   811b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   811bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
   811c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   811c4:	429d      	cmp	r5, r3
   811c6:	bf08      	it	eq
   811c8:	4296      	cmpeq	r6, r2
   811ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   811ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
   811d2:	d202      	bcs.n	811da <__aeabi_ddiv+0x6e>
   811d4:	085b      	lsrs	r3, r3, #1
   811d6:	ea4f 0232 	mov.w	r2, r2, rrx
   811da:	1ab6      	subs	r6, r6, r2
   811dc:	eb65 0503 	sbc.w	r5, r5, r3
   811e0:	085b      	lsrs	r3, r3, #1
   811e2:	ea4f 0232 	mov.w	r2, r2, rrx
   811e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   811ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   811ee:	ebb6 0e02 	subs.w	lr, r6, r2
   811f2:	eb75 0e03 	sbcs.w	lr, r5, r3
   811f6:	bf22      	ittt	cs
   811f8:	1ab6      	subcs	r6, r6, r2
   811fa:	4675      	movcs	r5, lr
   811fc:	ea40 000c 	orrcs.w	r0, r0, ip
   81200:	085b      	lsrs	r3, r3, #1
   81202:	ea4f 0232 	mov.w	r2, r2, rrx
   81206:	ebb6 0e02 	subs.w	lr, r6, r2
   8120a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8120e:	bf22      	ittt	cs
   81210:	1ab6      	subcs	r6, r6, r2
   81212:	4675      	movcs	r5, lr
   81214:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   81218:	085b      	lsrs	r3, r3, #1
   8121a:	ea4f 0232 	mov.w	r2, r2, rrx
   8121e:	ebb6 0e02 	subs.w	lr, r6, r2
   81222:	eb75 0e03 	sbcs.w	lr, r5, r3
   81226:	bf22      	ittt	cs
   81228:	1ab6      	subcs	r6, r6, r2
   8122a:	4675      	movcs	r5, lr
   8122c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   81230:	085b      	lsrs	r3, r3, #1
   81232:	ea4f 0232 	mov.w	r2, r2, rrx
   81236:	ebb6 0e02 	subs.w	lr, r6, r2
   8123a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8123e:	bf22      	ittt	cs
   81240:	1ab6      	subcs	r6, r6, r2
   81242:	4675      	movcs	r5, lr
   81244:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   81248:	ea55 0e06 	orrs.w	lr, r5, r6
   8124c:	d018      	beq.n	81280 <__aeabi_ddiv+0x114>
   8124e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   81252:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   81256:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8125a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   8125e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   81262:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   81266:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8126a:	d1c0      	bne.n	811ee <__aeabi_ddiv+0x82>
   8126c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81270:	d10b      	bne.n	8128a <__aeabi_ddiv+0x11e>
   81272:	ea41 0100 	orr.w	r1, r1, r0
   81276:	f04f 0000 	mov.w	r0, #0
   8127a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8127e:	e7b6      	b.n	811ee <__aeabi_ddiv+0x82>
   81280:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81284:	bf04      	itt	eq
   81286:	4301      	orreq	r1, r0
   81288:	2000      	moveq	r0, #0
   8128a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8128e:	bf88      	it	hi
   81290:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   81294:	f63f aeaf 	bhi.w	80ff6 <__aeabi_dmul+0xde>
   81298:	ebb5 0c03 	subs.w	ip, r5, r3
   8129c:	bf04      	itt	eq
   8129e:	ebb6 0c02 	subseq.w	ip, r6, r2
   812a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   812a6:	f150 0000 	adcs.w	r0, r0, #0
   812aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   812ae:	bd70      	pop	{r4, r5, r6, pc}
   812b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   812b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   812b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   812bc:	bfc2      	ittt	gt
   812be:	ebd4 050c 	rsbsgt	r5, r4, ip
   812c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   812c6:	bd70      	popgt	{r4, r5, r6, pc}
   812c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   812cc:	f04f 0e00 	mov.w	lr, #0
   812d0:	3c01      	subs	r4, #1
   812d2:	e690      	b.n	80ff6 <__aeabi_dmul+0xde>
   812d4:	ea45 0e06 	orr.w	lr, r5, r6
   812d8:	e68d      	b.n	80ff6 <__aeabi_dmul+0xde>
   812da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   812de:	ea94 0f0c 	teq	r4, ip
   812e2:	bf08      	it	eq
   812e4:	ea95 0f0c 	teqeq	r5, ip
   812e8:	f43f af3b 	beq.w	81162 <__aeabi_dmul+0x24a>
   812ec:	ea94 0f0c 	teq	r4, ip
   812f0:	d10a      	bne.n	81308 <__aeabi_ddiv+0x19c>
   812f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   812f6:	f47f af34 	bne.w	81162 <__aeabi_dmul+0x24a>
   812fa:	ea95 0f0c 	teq	r5, ip
   812fe:	f47f af25 	bne.w	8114c <__aeabi_dmul+0x234>
   81302:	4610      	mov	r0, r2
   81304:	4619      	mov	r1, r3
   81306:	e72c      	b.n	81162 <__aeabi_dmul+0x24a>
   81308:	ea95 0f0c 	teq	r5, ip
   8130c:	d106      	bne.n	8131c <__aeabi_ddiv+0x1b0>
   8130e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   81312:	f43f aefd 	beq.w	81110 <__aeabi_dmul+0x1f8>
   81316:	4610      	mov	r0, r2
   81318:	4619      	mov	r1, r3
   8131a:	e722      	b.n	81162 <__aeabi_dmul+0x24a>
   8131c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   81320:	bf18      	it	ne
   81322:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   81326:	f47f aec5 	bne.w	810b4 <__aeabi_dmul+0x19c>
   8132a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   8132e:	f47f af0d 	bne.w	8114c <__aeabi_dmul+0x234>
   81332:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   81336:	f47f aeeb 	bne.w	81110 <__aeabi_dmul+0x1f8>
   8133a:	e712      	b.n	81162 <__aeabi_dmul+0x24a>

0008133c <__gedf2>:
   8133c:	f04f 3cff 	mov.w	ip, #4294967295
   81340:	e006      	b.n	81350 <__cmpdf2+0x4>
   81342:	bf00      	nop

00081344 <__ledf2>:
   81344:	f04f 0c01 	mov.w	ip, #1
   81348:	e002      	b.n	81350 <__cmpdf2+0x4>
   8134a:	bf00      	nop

0008134c <__cmpdf2>:
   8134c:	f04f 0c01 	mov.w	ip, #1
   81350:	f84d cd04 	str.w	ip, [sp, #-4]!
   81354:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   81358:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8135c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   81360:	bf18      	it	ne
   81362:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   81366:	d01b      	beq.n	813a0 <__cmpdf2+0x54>
   81368:	b001      	add	sp, #4
   8136a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   8136e:	bf0c      	ite	eq
   81370:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   81374:	ea91 0f03 	teqne	r1, r3
   81378:	bf02      	ittt	eq
   8137a:	ea90 0f02 	teqeq	r0, r2
   8137e:	2000      	moveq	r0, #0
   81380:	4770      	bxeq	lr
   81382:	f110 0f00 	cmn.w	r0, #0
   81386:	ea91 0f03 	teq	r1, r3
   8138a:	bf58      	it	pl
   8138c:	4299      	cmppl	r1, r3
   8138e:	bf08      	it	eq
   81390:	4290      	cmpeq	r0, r2
   81392:	bf2c      	ite	cs
   81394:	17d8      	asrcs	r0, r3, #31
   81396:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   8139a:	f040 0001 	orr.w	r0, r0, #1
   8139e:	4770      	bx	lr
   813a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   813a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   813a8:	d102      	bne.n	813b0 <__cmpdf2+0x64>
   813aa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   813ae:	d107      	bne.n	813c0 <__cmpdf2+0x74>
   813b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   813b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   813b8:	d1d6      	bne.n	81368 <__cmpdf2+0x1c>
   813ba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   813be:	d0d3      	beq.n	81368 <__cmpdf2+0x1c>
   813c0:	f85d 0b04 	ldr.w	r0, [sp], #4
   813c4:	4770      	bx	lr
   813c6:	bf00      	nop

000813c8 <__aeabi_cdrcmple>:
   813c8:	4684      	mov	ip, r0
   813ca:	4610      	mov	r0, r2
   813cc:	4662      	mov	r2, ip
   813ce:	468c      	mov	ip, r1
   813d0:	4619      	mov	r1, r3
   813d2:	4663      	mov	r3, ip
   813d4:	e000      	b.n	813d8 <__aeabi_cdcmpeq>
   813d6:	bf00      	nop

000813d8 <__aeabi_cdcmpeq>:
   813d8:	b501      	push	{r0, lr}
   813da:	f7ff ffb7 	bl	8134c <__cmpdf2>
   813de:	2800      	cmp	r0, #0
   813e0:	bf48      	it	mi
   813e2:	f110 0f00 	cmnmi.w	r0, #0
   813e6:	bd01      	pop	{r0, pc}

000813e8 <__aeabi_dcmpeq>:
   813e8:	f84d ed08 	str.w	lr, [sp, #-8]!
   813ec:	f7ff fff4 	bl	813d8 <__aeabi_cdcmpeq>
   813f0:	bf0c      	ite	eq
   813f2:	2001      	moveq	r0, #1
   813f4:	2000      	movne	r0, #0
   813f6:	f85d fb08 	ldr.w	pc, [sp], #8
   813fa:	bf00      	nop

000813fc <__aeabi_dcmplt>:
   813fc:	f84d ed08 	str.w	lr, [sp, #-8]!
   81400:	f7ff ffea 	bl	813d8 <__aeabi_cdcmpeq>
   81404:	bf34      	ite	cc
   81406:	2001      	movcc	r0, #1
   81408:	2000      	movcs	r0, #0
   8140a:	f85d fb08 	ldr.w	pc, [sp], #8
   8140e:	bf00      	nop

00081410 <__aeabi_dcmple>:
   81410:	f84d ed08 	str.w	lr, [sp, #-8]!
   81414:	f7ff ffe0 	bl	813d8 <__aeabi_cdcmpeq>
   81418:	bf94      	ite	ls
   8141a:	2001      	movls	r0, #1
   8141c:	2000      	movhi	r0, #0
   8141e:	f85d fb08 	ldr.w	pc, [sp], #8
   81422:	bf00      	nop

00081424 <__aeabi_dcmpge>:
   81424:	f84d ed08 	str.w	lr, [sp, #-8]!
   81428:	f7ff ffce 	bl	813c8 <__aeabi_cdrcmple>
   8142c:	bf94      	ite	ls
   8142e:	2001      	movls	r0, #1
   81430:	2000      	movhi	r0, #0
   81432:	f85d fb08 	ldr.w	pc, [sp], #8
   81436:	bf00      	nop

00081438 <__aeabi_dcmpgt>:
   81438:	f84d ed08 	str.w	lr, [sp, #-8]!
   8143c:	f7ff ffc4 	bl	813c8 <__aeabi_cdrcmple>
   81440:	bf34      	ite	cc
   81442:	2001      	movcc	r0, #1
   81444:	2000      	movcs	r0, #0
   81446:	f85d fb08 	ldr.w	pc, [sp], #8
   8144a:	bf00      	nop

0008144c <__aeabi_d2iz>:
   8144c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   81450:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   81454:	d215      	bcs.n	81482 <__aeabi_d2iz+0x36>
   81456:	d511      	bpl.n	8147c <__aeabi_d2iz+0x30>
   81458:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   8145c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   81460:	d912      	bls.n	81488 <__aeabi_d2iz+0x3c>
   81462:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   81466:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8146a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8146e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   81472:	fa23 f002 	lsr.w	r0, r3, r2
   81476:	bf18      	it	ne
   81478:	4240      	negne	r0, r0
   8147a:	4770      	bx	lr
   8147c:	f04f 0000 	mov.w	r0, #0
   81480:	4770      	bx	lr
   81482:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   81486:	d105      	bne.n	81494 <__aeabi_d2iz+0x48>
   81488:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   8148c:	bf08      	it	eq
   8148e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   81492:	4770      	bx	lr
   81494:	f04f 0000 	mov.w	r0, #0
   81498:	4770      	bx	lr
   8149a:	bf00      	nop

0008149c <__aeabi_d2f>:
   8149c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   814a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   814a4:	bf24      	itt	cs
   814a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   814aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   814ae:	d90d      	bls.n	814cc <__aeabi_d2f+0x30>
   814b0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   814b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   814b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   814bc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   814c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   814c4:	bf08      	it	eq
   814c6:	f020 0001 	biceq.w	r0, r0, #1
   814ca:	4770      	bx	lr
   814cc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   814d0:	d121      	bne.n	81516 <__aeabi_d2f+0x7a>
   814d2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   814d6:	bfbc      	itt	lt
   814d8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   814dc:	4770      	bxlt	lr
   814de:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   814e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
   814e6:	f1c2 0218 	rsb	r2, r2, #24
   814ea:	f1c2 0c20 	rsb	ip, r2, #32
   814ee:	fa10 f30c 	lsls.w	r3, r0, ip
   814f2:	fa20 f002 	lsr.w	r0, r0, r2
   814f6:	bf18      	it	ne
   814f8:	f040 0001 	orrne.w	r0, r0, #1
   814fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   81500:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   81504:	fa03 fc0c 	lsl.w	ip, r3, ip
   81508:	ea40 000c 	orr.w	r0, r0, ip
   8150c:	fa23 f302 	lsr.w	r3, r3, r2
   81510:	ea4f 0343 	mov.w	r3, r3, lsl #1
   81514:	e7cc      	b.n	814b0 <__aeabi_d2f+0x14>
   81516:	ea7f 5362 	mvns.w	r3, r2, asr #21
   8151a:	d107      	bne.n	8152c <__aeabi_d2f+0x90>
   8151c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   81520:	bf1e      	ittt	ne
   81522:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   81526:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   8152a:	4770      	bxne	lr
   8152c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   81530:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   81534:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81538:	4770      	bx	lr
   8153a:	bf00      	nop

0008153c <__aeabi_frsub>:
   8153c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   81540:	e002      	b.n	81548 <__addsf3>
   81542:	bf00      	nop

00081544 <__aeabi_fsub>:
   81544:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00081548 <__addsf3>:
   81548:	0042      	lsls	r2, r0, #1
   8154a:	bf1f      	itttt	ne
   8154c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   81550:	ea92 0f03 	teqne	r2, r3
   81554:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   81558:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   8155c:	d06a      	beq.n	81634 <__addsf3+0xec>
   8155e:	ea4f 6212 	mov.w	r2, r2, lsr #24
   81562:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   81566:	bfc1      	itttt	gt
   81568:	18d2      	addgt	r2, r2, r3
   8156a:	4041      	eorgt	r1, r0
   8156c:	4048      	eorgt	r0, r1
   8156e:	4041      	eorgt	r1, r0
   81570:	bfb8      	it	lt
   81572:	425b      	neglt	r3, r3
   81574:	2b19      	cmp	r3, #25
   81576:	bf88      	it	hi
   81578:	4770      	bxhi	lr
   8157a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   8157e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81582:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   81586:	bf18      	it	ne
   81588:	4240      	negne	r0, r0
   8158a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8158e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   81592:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   81596:	bf18      	it	ne
   81598:	4249      	negne	r1, r1
   8159a:	ea92 0f03 	teq	r2, r3
   8159e:	d03f      	beq.n	81620 <__addsf3+0xd8>
   815a0:	f1a2 0201 	sub.w	r2, r2, #1
   815a4:	fa41 fc03 	asr.w	ip, r1, r3
   815a8:	eb10 000c 	adds.w	r0, r0, ip
   815ac:	f1c3 0320 	rsb	r3, r3, #32
   815b0:	fa01 f103 	lsl.w	r1, r1, r3
   815b4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   815b8:	d502      	bpl.n	815c0 <__addsf3+0x78>
   815ba:	4249      	negs	r1, r1
   815bc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   815c0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   815c4:	d313      	bcc.n	815ee <__addsf3+0xa6>
   815c6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   815ca:	d306      	bcc.n	815da <__addsf3+0x92>
   815cc:	0840      	lsrs	r0, r0, #1
   815ce:	ea4f 0131 	mov.w	r1, r1, rrx
   815d2:	f102 0201 	add.w	r2, r2, #1
   815d6:	2afe      	cmp	r2, #254	; 0xfe
   815d8:	d251      	bcs.n	8167e <__addsf3+0x136>
   815da:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   815de:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   815e2:	bf08      	it	eq
   815e4:	f020 0001 	biceq.w	r0, r0, #1
   815e8:	ea40 0003 	orr.w	r0, r0, r3
   815ec:	4770      	bx	lr
   815ee:	0049      	lsls	r1, r1, #1
   815f0:	eb40 0000 	adc.w	r0, r0, r0
   815f4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   815f8:	f1a2 0201 	sub.w	r2, r2, #1
   815fc:	d1ed      	bne.n	815da <__addsf3+0x92>
   815fe:	fab0 fc80 	clz	ip, r0
   81602:	f1ac 0c08 	sub.w	ip, ip, #8
   81606:	ebb2 020c 	subs.w	r2, r2, ip
   8160a:	fa00 f00c 	lsl.w	r0, r0, ip
   8160e:	bfaa      	itet	ge
   81610:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   81614:	4252      	neglt	r2, r2
   81616:	4318      	orrge	r0, r3
   81618:	bfbc      	itt	lt
   8161a:	40d0      	lsrlt	r0, r2
   8161c:	4318      	orrlt	r0, r3
   8161e:	4770      	bx	lr
   81620:	f092 0f00 	teq	r2, #0
   81624:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   81628:	bf06      	itte	eq
   8162a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   8162e:	3201      	addeq	r2, #1
   81630:	3b01      	subne	r3, #1
   81632:	e7b5      	b.n	815a0 <__addsf3+0x58>
   81634:	ea4f 0341 	mov.w	r3, r1, lsl #1
   81638:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   8163c:	bf18      	it	ne
   8163e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   81642:	d021      	beq.n	81688 <__addsf3+0x140>
   81644:	ea92 0f03 	teq	r2, r3
   81648:	d004      	beq.n	81654 <__addsf3+0x10c>
   8164a:	f092 0f00 	teq	r2, #0
   8164e:	bf08      	it	eq
   81650:	4608      	moveq	r0, r1
   81652:	4770      	bx	lr
   81654:	ea90 0f01 	teq	r0, r1
   81658:	bf1c      	itt	ne
   8165a:	2000      	movne	r0, #0
   8165c:	4770      	bxne	lr
   8165e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   81662:	d104      	bne.n	8166e <__addsf3+0x126>
   81664:	0040      	lsls	r0, r0, #1
   81666:	bf28      	it	cs
   81668:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   8166c:	4770      	bx	lr
   8166e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   81672:	bf3c      	itt	cc
   81674:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   81678:	4770      	bxcc	lr
   8167a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   8167e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   81682:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81686:	4770      	bx	lr
   81688:	ea7f 6222 	mvns.w	r2, r2, asr #24
   8168c:	bf16      	itet	ne
   8168e:	4608      	movne	r0, r1
   81690:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   81694:	4601      	movne	r1, r0
   81696:	0242      	lsls	r2, r0, #9
   81698:	bf06      	itte	eq
   8169a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   8169e:	ea90 0f01 	teqeq	r0, r1
   816a2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   816a6:	4770      	bx	lr

000816a8 <__aeabi_ui2f>:
   816a8:	f04f 0300 	mov.w	r3, #0
   816ac:	e004      	b.n	816b8 <__aeabi_i2f+0x8>
   816ae:	bf00      	nop

000816b0 <__aeabi_i2f>:
   816b0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   816b4:	bf48      	it	mi
   816b6:	4240      	negmi	r0, r0
   816b8:	ea5f 0c00 	movs.w	ip, r0
   816bc:	bf08      	it	eq
   816be:	4770      	bxeq	lr
   816c0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   816c4:	4601      	mov	r1, r0
   816c6:	f04f 0000 	mov.w	r0, #0
   816ca:	e01c      	b.n	81706 <__aeabi_l2f+0x2a>

000816cc <__aeabi_ul2f>:
   816cc:	ea50 0201 	orrs.w	r2, r0, r1
   816d0:	bf08      	it	eq
   816d2:	4770      	bxeq	lr
   816d4:	f04f 0300 	mov.w	r3, #0
   816d8:	e00a      	b.n	816f0 <__aeabi_l2f+0x14>
   816da:	bf00      	nop

000816dc <__aeabi_l2f>:
   816dc:	ea50 0201 	orrs.w	r2, r0, r1
   816e0:	bf08      	it	eq
   816e2:	4770      	bxeq	lr
   816e4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   816e8:	d502      	bpl.n	816f0 <__aeabi_l2f+0x14>
   816ea:	4240      	negs	r0, r0
   816ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   816f0:	ea5f 0c01 	movs.w	ip, r1
   816f4:	bf02      	ittt	eq
   816f6:	4684      	moveq	ip, r0
   816f8:	4601      	moveq	r1, r0
   816fa:	2000      	moveq	r0, #0
   816fc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   81700:	bf08      	it	eq
   81702:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   81706:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   8170a:	fabc f28c 	clz	r2, ip
   8170e:	3a08      	subs	r2, #8
   81710:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   81714:	db10      	blt.n	81738 <__aeabi_l2f+0x5c>
   81716:	fa01 fc02 	lsl.w	ip, r1, r2
   8171a:	4463      	add	r3, ip
   8171c:	fa00 fc02 	lsl.w	ip, r0, r2
   81720:	f1c2 0220 	rsb	r2, r2, #32
   81724:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   81728:	fa20 f202 	lsr.w	r2, r0, r2
   8172c:	eb43 0002 	adc.w	r0, r3, r2
   81730:	bf08      	it	eq
   81732:	f020 0001 	biceq.w	r0, r0, #1
   81736:	4770      	bx	lr
   81738:	f102 0220 	add.w	r2, r2, #32
   8173c:	fa01 fc02 	lsl.w	ip, r1, r2
   81740:	f1c2 0220 	rsb	r2, r2, #32
   81744:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   81748:	fa21 f202 	lsr.w	r2, r1, r2
   8174c:	eb43 0002 	adc.w	r0, r3, r2
   81750:	bf08      	it	eq
   81752:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   81756:	4770      	bx	lr

00081758 <__aeabi_fmul>:
   81758:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8175c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   81760:	bf1e      	ittt	ne
   81762:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   81766:	ea92 0f0c 	teqne	r2, ip
   8176a:	ea93 0f0c 	teqne	r3, ip
   8176e:	d06f      	beq.n	81850 <__aeabi_fmul+0xf8>
   81770:	441a      	add	r2, r3
   81772:	ea80 0c01 	eor.w	ip, r0, r1
   81776:	0240      	lsls	r0, r0, #9
   81778:	bf18      	it	ne
   8177a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   8177e:	d01e      	beq.n	817be <__aeabi_fmul+0x66>
   81780:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   81784:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   81788:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   8178c:	fba0 3101 	umull	r3, r1, r0, r1
   81790:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   81794:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   81798:	bf3e      	ittt	cc
   8179a:	0049      	lslcc	r1, r1, #1
   8179c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   817a0:	005b      	lslcc	r3, r3, #1
   817a2:	ea40 0001 	orr.w	r0, r0, r1
   817a6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   817aa:	2afd      	cmp	r2, #253	; 0xfd
   817ac:	d81d      	bhi.n	817ea <__aeabi_fmul+0x92>
   817ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   817b2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   817b6:	bf08      	it	eq
   817b8:	f020 0001 	biceq.w	r0, r0, #1
   817bc:	4770      	bx	lr
   817be:	f090 0f00 	teq	r0, #0
   817c2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   817c6:	bf08      	it	eq
   817c8:	0249      	lsleq	r1, r1, #9
   817ca:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   817ce:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   817d2:	3a7f      	subs	r2, #127	; 0x7f
   817d4:	bfc2      	ittt	gt
   817d6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   817da:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   817de:	4770      	bxgt	lr
   817e0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   817e4:	f04f 0300 	mov.w	r3, #0
   817e8:	3a01      	subs	r2, #1
   817ea:	dc5d      	bgt.n	818a8 <__aeabi_fmul+0x150>
   817ec:	f112 0f19 	cmn.w	r2, #25
   817f0:	bfdc      	itt	le
   817f2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   817f6:	4770      	bxle	lr
   817f8:	f1c2 0200 	rsb	r2, r2, #0
   817fc:	0041      	lsls	r1, r0, #1
   817fe:	fa21 f102 	lsr.w	r1, r1, r2
   81802:	f1c2 0220 	rsb	r2, r2, #32
   81806:	fa00 fc02 	lsl.w	ip, r0, r2
   8180a:	ea5f 0031 	movs.w	r0, r1, rrx
   8180e:	f140 0000 	adc.w	r0, r0, #0
   81812:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   81816:	bf08      	it	eq
   81818:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   8181c:	4770      	bx	lr
   8181e:	f092 0f00 	teq	r2, #0
   81822:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   81826:	bf02      	ittt	eq
   81828:	0040      	lsleq	r0, r0, #1
   8182a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   8182e:	3a01      	subeq	r2, #1
   81830:	d0f9      	beq.n	81826 <__aeabi_fmul+0xce>
   81832:	ea40 000c 	orr.w	r0, r0, ip
   81836:	f093 0f00 	teq	r3, #0
   8183a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   8183e:	bf02      	ittt	eq
   81840:	0049      	lsleq	r1, r1, #1
   81842:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   81846:	3b01      	subeq	r3, #1
   81848:	d0f9      	beq.n	8183e <__aeabi_fmul+0xe6>
   8184a:	ea41 010c 	orr.w	r1, r1, ip
   8184e:	e78f      	b.n	81770 <__aeabi_fmul+0x18>
   81850:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   81854:	ea92 0f0c 	teq	r2, ip
   81858:	bf18      	it	ne
   8185a:	ea93 0f0c 	teqne	r3, ip
   8185e:	d00a      	beq.n	81876 <__aeabi_fmul+0x11e>
   81860:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   81864:	bf18      	it	ne
   81866:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   8186a:	d1d8      	bne.n	8181e <__aeabi_fmul+0xc6>
   8186c:	ea80 0001 	eor.w	r0, r0, r1
   81870:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   81874:	4770      	bx	lr
   81876:	f090 0f00 	teq	r0, #0
   8187a:	bf17      	itett	ne
   8187c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   81880:	4608      	moveq	r0, r1
   81882:	f091 0f00 	teqne	r1, #0
   81886:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   8188a:	d014      	beq.n	818b6 <__aeabi_fmul+0x15e>
   8188c:	ea92 0f0c 	teq	r2, ip
   81890:	d101      	bne.n	81896 <__aeabi_fmul+0x13e>
   81892:	0242      	lsls	r2, r0, #9
   81894:	d10f      	bne.n	818b6 <__aeabi_fmul+0x15e>
   81896:	ea93 0f0c 	teq	r3, ip
   8189a:	d103      	bne.n	818a4 <__aeabi_fmul+0x14c>
   8189c:	024b      	lsls	r3, r1, #9
   8189e:	bf18      	it	ne
   818a0:	4608      	movne	r0, r1
   818a2:	d108      	bne.n	818b6 <__aeabi_fmul+0x15e>
   818a4:	ea80 0001 	eor.w	r0, r0, r1
   818a8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   818ac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   818b0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   818b4:	4770      	bx	lr
   818b6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   818ba:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   818be:	4770      	bx	lr

000818c0 <__aeabi_fdiv>:
   818c0:	f04f 0cff 	mov.w	ip, #255	; 0xff
   818c4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   818c8:	bf1e      	ittt	ne
   818ca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   818ce:	ea92 0f0c 	teqne	r2, ip
   818d2:	ea93 0f0c 	teqne	r3, ip
   818d6:	d069      	beq.n	819ac <__aeabi_fdiv+0xec>
   818d8:	eba2 0203 	sub.w	r2, r2, r3
   818dc:	ea80 0c01 	eor.w	ip, r0, r1
   818e0:	0249      	lsls	r1, r1, #9
   818e2:	ea4f 2040 	mov.w	r0, r0, lsl #9
   818e6:	d037      	beq.n	81958 <__aeabi_fdiv+0x98>
   818e8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   818ec:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   818f0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   818f4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   818f8:	428b      	cmp	r3, r1
   818fa:	bf38      	it	cc
   818fc:	005b      	lslcc	r3, r3, #1
   818fe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   81902:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   81906:	428b      	cmp	r3, r1
   81908:	bf24      	itt	cs
   8190a:	1a5b      	subcs	r3, r3, r1
   8190c:	ea40 000c 	orrcs.w	r0, r0, ip
   81910:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   81914:	bf24      	itt	cs
   81916:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   8191a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   8191e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   81922:	bf24      	itt	cs
   81924:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   81928:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   8192c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   81930:	bf24      	itt	cs
   81932:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   81936:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   8193a:	011b      	lsls	r3, r3, #4
   8193c:	bf18      	it	ne
   8193e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   81942:	d1e0      	bne.n	81906 <__aeabi_fdiv+0x46>
   81944:	2afd      	cmp	r2, #253	; 0xfd
   81946:	f63f af50 	bhi.w	817ea <__aeabi_fmul+0x92>
   8194a:	428b      	cmp	r3, r1
   8194c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   81950:	bf08      	it	eq
   81952:	f020 0001 	biceq.w	r0, r0, #1
   81956:	4770      	bx	lr
   81958:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   8195c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   81960:	327f      	adds	r2, #127	; 0x7f
   81962:	bfc2      	ittt	gt
   81964:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   81968:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   8196c:	4770      	bxgt	lr
   8196e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81972:	f04f 0300 	mov.w	r3, #0
   81976:	3a01      	subs	r2, #1
   81978:	e737      	b.n	817ea <__aeabi_fmul+0x92>
   8197a:	f092 0f00 	teq	r2, #0
   8197e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   81982:	bf02      	ittt	eq
   81984:	0040      	lsleq	r0, r0, #1
   81986:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   8198a:	3a01      	subeq	r2, #1
   8198c:	d0f9      	beq.n	81982 <__aeabi_fdiv+0xc2>
   8198e:	ea40 000c 	orr.w	r0, r0, ip
   81992:	f093 0f00 	teq	r3, #0
   81996:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   8199a:	bf02      	ittt	eq
   8199c:	0049      	lsleq	r1, r1, #1
   8199e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   819a2:	3b01      	subeq	r3, #1
   819a4:	d0f9      	beq.n	8199a <__aeabi_fdiv+0xda>
   819a6:	ea41 010c 	orr.w	r1, r1, ip
   819aa:	e795      	b.n	818d8 <__aeabi_fdiv+0x18>
   819ac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   819b0:	ea92 0f0c 	teq	r2, ip
   819b4:	d108      	bne.n	819c8 <__aeabi_fdiv+0x108>
   819b6:	0242      	lsls	r2, r0, #9
   819b8:	f47f af7d 	bne.w	818b6 <__aeabi_fmul+0x15e>
   819bc:	ea93 0f0c 	teq	r3, ip
   819c0:	f47f af70 	bne.w	818a4 <__aeabi_fmul+0x14c>
   819c4:	4608      	mov	r0, r1
   819c6:	e776      	b.n	818b6 <__aeabi_fmul+0x15e>
   819c8:	ea93 0f0c 	teq	r3, ip
   819cc:	d104      	bne.n	819d8 <__aeabi_fdiv+0x118>
   819ce:	024b      	lsls	r3, r1, #9
   819d0:	f43f af4c 	beq.w	8186c <__aeabi_fmul+0x114>
   819d4:	4608      	mov	r0, r1
   819d6:	e76e      	b.n	818b6 <__aeabi_fmul+0x15e>
   819d8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   819dc:	bf18      	it	ne
   819de:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   819e2:	d1ca      	bne.n	8197a <__aeabi_fdiv+0xba>
   819e4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   819e8:	f47f af5c 	bne.w	818a4 <__aeabi_fmul+0x14c>
   819ec:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   819f0:	f47f af3c 	bne.w	8186c <__aeabi_fmul+0x114>
   819f4:	e75f      	b.n	818b6 <__aeabi_fmul+0x15e>
   819f6:	bf00      	nop

000819f8 <__gesf2>:
   819f8:	f04f 3cff 	mov.w	ip, #4294967295
   819fc:	e006      	b.n	81a0c <__cmpsf2+0x4>
   819fe:	bf00      	nop

00081a00 <__lesf2>:
   81a00:	f04f 0c01 	mov.w	ip, #1
   81a04:	e002      	b.n	81a0c <__cmpsf2+0x4>
   81a06:	bf00      	nop

00081a08 <__cmpsf2>:
   81a08:	f04f 0c01 	mov.w	ip, #1
   81a0c:	f84d cd04 	str.w	ip, [sp, #-4]!
   81a10:	ea4f 0240 	mov.w	r2, r0, lsl #1
   81a14:	ea4f 0341 	mov.w	r3, r1, lsl #1
   81a18:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   81a1c:	bf18      	it	ne
   81a1e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   81a22:	d011      	beq.n	81a48 <__cmpsf2+0x40>
   81a24:	b001      	add	sp, #4
   81a26:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   81a2a:	bf18      	it	ne
   81a2c:	ea90 0f01 	teqne	r0, r1
   81a30:	bf58      	it	pl
   81a32:	ebb2 0003 	subspl.w	r0, r2, r3
   81a36:	bf88      	it	hi
   81a38:	17c8      	asrhi	r0, r1, #31
   81a3a:	bf38      	it	cc
   81a3c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   81a40:	bf18      	it	ne
   81a42:	f040 0001 	orrne.w	r0, r0, #1
   81a46:	4770      	bx	lr
   81a48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   81a4c:	d102      	bne.n	81a54 <__cmpsf2+0x4c>
   81a4e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   81a52:	d105      	bne.n	81a60 <__cmpsf2+0x58>
   81a54:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   81a58:	d1e4      	bne.n	81a24 <__cmpsf2+0x1c>
   81a5a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   81a5e:	d0e1      	beq.n	81a24 <__cmpsf2+0x1c>
   81a60:	f85d 0b04 	ldr.w	r0, [sp], #4
   81a64:	4770      	bx	lr
   81a66:	bf00      	nop

00081a68 <__aeabi_cfrcmple>:
   81a68:	4684      	mov	ip, r0
   81a6a:	4608      	mov	r0, r1
   81a6c:	4661      	mov	r1, ip
   81a6e:	e7ff      	b.n	81a70 <__aeabi_cfcmpeq>

00081a70 <__aeabi_cfcmpeq>:
   81a70:	b50f      	push	{r0, r1, r2, r3, lr}
   81a72:	f7ff ffc9 	bl	81a08 <__cmpsf2>
   81a76:	2800      	cmp	r0, #0
   81a78:	bf48      	it	mi
   81a7a:	f110 0f00 	cmnmi.w	r0, #0
   81a7e:	bd0f      	pop	{r0, r1, r2, r3, pc}

00081a80 <__aeabi_fcmpeq>:
   81a80:	f84d ed08 	str.w	lr, [sp, #-8]!
   81a84:	f7ff fff4 	bl	81a70 <__aeabi_cfcmpeq>
   81a88:	bf0c      	ite	eq
   81a8a:	2001      	moveq	r0, #1
   81a8c:	2000      	movne	r0, #0
   81a8e:	f85d fb08 	ldr.w	pc, [sp], #8
   81a92:	bf00      	nop

00081a94 <__aeabi_fcmplt>:
   81a94:	f84d ed08 	str.w	lr, [sp, #-8]!
   81a98:	f7ff ffea 	bl	81a70 <__aeabi_cfcmpeq>
   81a9c:	bf34      	ite	cc
   81a9e:	2001      	movcc	r0, #1
   81aa0:	2000      	movcs	r0, #0
   81aa2:	f85d fb08 	ldr.w	pc, [sp], #8
   81aa6:	bf00      	nop

00081aa8 <__aeabi_fcmple>:
   81aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
   81aac:	f7ff ffe0 	bl	81a70 <__aeabi_cfcmpeq>
   81ab0:	bf94      	ite	ls
   81ab2:	2001      	movls	r0, #1
   81ab4:	2000      	movhi	r0, #0
   81ab6:	f85d fb08 	ldr.w	pc, [sp], #8
   81aba:	bf00      	nop

00081abc <__aeabi_fcmpge>:
   81abc:	f84d ed08 	str.w	lr, [sp, #-8]!
   81ac0:	f7ff ffd2 	bl	81a68 <__aeabi_cfrcmple>
   81ac4:	bf94      	ite	ls
   81ac6:	2001      	movls	r0, #1
   81ac8:	2000      	movhi	r0, #0
   81aca:	f85d fb08 	ldr.w	pc, [sp], #8
   81ace:	bf00      	nop

00081ad0 <__aeabi_fcmpgt>:
   81ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
   81ad4:	f7ff ffc8 	bl	81a68 <__aeabi_cfrcmple>
   81ad8:	bf34      	ite	cc
   81ada:	2001      	movcc	r0, #1
   81adc:	2000      	movcs	r0, #0
   81ade:	f85d fb08 	ldr.w	pc, [sp], #8
   81ae2:	bf00      	nop

00081ae4 <__aeabi_f2uiz>:
   81ae4:	0042      	lsls	r2, r0, #1
   81ae6:	d20e      	bcs.n	81b06 <__aeabi_f2uiz+0x22>
   81ae8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   81aec:	d30b      	bcc.n	81b06 <__aeabi_f2uiz+0x22>
   81aee:	f04f 039e 	mov.w	r3, #158	; 0x9e
   81af2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   81af6:	d409      	bmi.n	81b0c <__aeabi_f2uiz+0x28>
   81af8:	ea4f 2300 	mov.w	r3, r0, lsl #8
   81afc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   81b00:	fa23 f002 	lsr.w	r0, r3, r2
   81b04:	4770      	bx	lr
   81b06:	f04f 0000 	mov.w	r0, #0
   81b0a:	4770      	bx	lr
   81b0c:	f112 0f61 	cmn.w	r2, #97	; 0x61
   81b10:	d101      	bne.n	81b16 <__aeabi_f2uiz+0x32>
   81b12:	0242      	lsls	r2, r0, #9
   81b14:	d102      	bne.n	81b1c <__aeabi_f2uiz+0x38>
   81b16:	f04f 30ff 	mov.w	r0, #4294967295
   81b1a:	4770      	bx	lr
   81b1c:	f04f 0000 	mov.w	r0, #0
   81b20:	4770      	bx	lr
   81b22:	bf00      	nop

00081b24 <__libc_init_array>:
   81b24:	b570      	push	{r4, r5, r6, lr}
   81b26:	4e0f      	ldr	r6, [pc, #60]	; (81b64 <__libc_init_array+0x40>)
   81b28:	4d0f      	ldr	r5, [pc, #60]	; (81b68 <__libc_init_array+0x44>)
   81b2a:	1b76      	subs	r6, r6, r5
   81b2c:	10b6      	asrs	r6, r6, #2
   81b2e:	bf18      	it	ne
   81b30:	2400      	movne	r4, #0
   81b32:	d005      	beq.n	81b40 <__libc_init_array+0x1c>
   81b34:	3401      	adds	r4, #1
   81b36:	f855 3b04 	ldr.w	r3, [r5], #4
   81b3a:	4798      	blx	r3
   81b3c:	42a6      	cmp	r6, r4
   81b3e:	d1f9      	bne.n	81b34 <__libc_init_array+0x10>
   81b40:	4e0a      	ldr	r6, [pc, #40]	; (81b6c <__libc_init_array+0x48>)
   81b42:	4d0b      	ldr	r5, [pc, #44]	; (81b70 <__libc_init_array+0x4c>)
   81b44:	f000 f8f8 	bl	81d38 <_init>
   81b48:	1b76      	subs	r6, r6, r5
   81b4a:	10b6      	asrs	r6, r6, #2
   81b4c:	bf18      	it	ne
   81b4e:	2400      	movne	r4, #0
   81b50:	d006      	beq.n	81b60 <__libc_init_array+0x3c>
   81b52:	3401      	adds	r4, #1
   81b54:	f855 3b04 	ldr.w	r3, [r5], #4
   81b58:	4798      	blx	r3
   81b5a:	42a6      	cmp	r6, r4
   81b5c:	d1f9      	bne.n	81b52 <__libc_init_array+0x2e>
   81b5e:	bd70      	pop	{r4, r5, r6, pc}
   81b60:	bd70      	pop	{r4, r5, r6, pc}
   81b62:	bf00      	nop
   81b64:	00081d44 	.word	0x00081d44
   81b68:	00081d44 	.word	0x00081d44
   81b6c:	00081d4c 	.word	0x00081d4c
   81b70:	00081d44 	.word	0x00081d44

00081b74 <register_fini>:
   81b74:	4b02      	ldr	r3, [pc, #8]	; (81b80 <register_fini+0xc>)
   81b76:	b113      	cbz	r3, 81b7e <register_fini+0xa>
   81b78:	4802      	ldr	r0, [pc, #8]	; (81b84 <register_fini+0x10>)
   81b7a:	f000 b805 	b.w	81b88 <atexit>
   81b7e:	4770      	bx	lr
   81b80:	00000000 	.word	0x00000000
   81b84:	00081b95 	.word	0x00081b95

00081b88 <atexit>:
   81b88:	2300      	movs	r3, #0
   81b8a:	4601      	mov	r1, r0
   81b8c:	461a      	mov	r2, r3
   81b8e:	4618      	mov	r0, r3
   81b90:	f000 b81e 	b.w	81bd0 <__register_exitproc>

00081b94 <__libc_fini_array>:
   81b94:	b538      	push	{r3, r4, r5, lr}
   81b96:	4c0a      	ldr	r4, [pc, #40]	; (81bc0 <__libc_fini_array+0x2c>)
   81b98:	4d0a      	ldr	r5, [pc, #40]	; (81bc4 <__libc_fini_array+0x30>)
   81b9a:	1b64      	subs	r4, r4, r5
   81b9c:	10a4      	asrs	r4, r4, #2
   81b9e:	d00a      	beq.n	81bb6 <__libc_fini_array+0x22>
   81ba0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   81ba4:	3b01      	subs	r3, #1
   81ba6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   81baa:	3c01      	subs	r4, #1
   81bac:	f855 3904 	ldr.w	r3, [r5], #-4
   81bb0:	4798      	blx	r3
   81bb2:	2c00      	cmp	r4, #0
   81bb4:	d1f9      	bne.n	81baa <__libc_fini_array+0x16>
   81bb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   81bba:	f000 b8c7 	b.w	81d4c <_fini>
   81bbe:	bf00      	nop
   81bc0:	00081d5c 	.word	0x00081d5c
   81bc4:	00081d58 	.word	0x00081d58

00081bc8 <__retarget_lock_acquire_recursive>:
   81bc8:	4770      	bx	lr
   81bca:	bf00      	nop

00081bcc <__retarget_lock_release_recursive>:
   81bcc:	4770      	bx	lr
   81bce:	bf00      	nop

00081bd0 <__register_exitproc>:
   81bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   81bd4:	4d2c      	ldr	r5, [pc, #176]	; (81c88 <__register_exitproc+0xb8>)
   81bd6:	4606      	mov	r6, r0
   81bd8:	6828      	ldr	r0, [r5, #0]
   81bda:	4698      	mov	r8, r3
   81bdc:	460f      	mov	r7, r1
   81bde:	4691      	mov	r9, r2
   81be0:	f7ff fff2 	bl	81bc8 <__retarget_lock_acquire_recursive>
   81be4:	4b29      	ldr	r3, [pc, #164]	; (81c8c <__register_exitproc+0xbc>)
   81be6:	681c      	ldr	r4, [r3, #0]
   81be8:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   81bec:	2b00      	cmp	r3, #0
   81bee:	d03e      	beq.n	81c6e <__register_exitproc+0x9e>
   81bf0:	685a      	ldr	r2, [r3, #4]
   81bf2:	2a1f      	cmp	r2, #31
   81bf4:	dc1c      	bgt.n	81c30 <__register_exitproc+0x60>
   81bf6:	f102 0e01 	add.w	lr, r2, #1
   81bfa:	b176      	cbz	r6, 81c1a <__register_exitproc+0x4a>
   81bfc:	2101      	movs	r1, #1
   81bfe:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   81c02:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   81c06:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   81c0a:	4091      	lsls	r1, r2
   81c0c:	4308      	orrs	r0, r1
   81c0e:	2e02      	cmp	r6, #2
   81c10:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   81c14:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   81c18:	d023      	beq.n	81c62 <__register_exitproc+0x92>
   81c1a:	3202      	adds	r2, #2
   81c1c:	f8c3 e004 	str.w	lr, [r3, #4]
   81c20:	6828      	ldr	r0, [r5, #0]
   81c22:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   81c26:	f7ff ffd1 	bl	81bcc <__retarget_lock_release_recursive>
   81c2a:	2000      	movs	r0, #0
   81c2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81c30:	4b17      	ldr	r3, [pc, #92]	; (81c90 <__register_exitproc+0xc0>)
   81c32:	b30b      	cbz	r3, 81c78 <__register_exitproc+0xa8>
   81c34:	f44f 70c8 	mov.w	r0, #400	; 0x190
   81c38:	f3af 8000 	nop.w
   81c3c:	4603      	mov	r3, r0
   81c3e:	b1d8      	cbz	r0, 81c78 <__register_exitproc+0xa8>
   81c40:	2000      	movs	r0, #0
   81c42:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   81c46:	f04f 0e01 	mov.w	lr, #1
   81c4a:	6058      	str	r0, [r3, #4]
   81c4c:	6019      	str	r1, [r3, #0]
   81c4e:	4602      	mov	r2, r0
   81c50:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   81c54:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   81c58:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   81c5c:	2e00      	cmp	r6, #0
   81c5e:	d0dc      	beq.n	81c1a <__register_exitproc+0x4a>
   81c60:	e7cc      	b.n	81bfc <__register_exitproc+0x2c>
   81c62:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   81c66:	4301      	orrs	r1, r0
   81c68:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   81c6c:	e7d5      	b.n	81c1a <__register_exitproc+0x4a>
   81c6e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   81c72:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   81c76:	e7bb      	b.n	81bf0 <__register_exitproc+0x20>
   81c78:	6828      	ldr	r0, [r5, #0]
   81c7a:	f7ff ffa7 	bl	81bcc <__retarget_lock_release_recursive>
   81c7e:	f04f 30ff 	mov.w	r0, #4294967295
   81c82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81c86:	bf00      	nop
   81c88:	20000430 	.word	0x20000430
   81c8c:	00081d34 	.word	0x00081d34
   81c90:	00000000 	.word	0x00000000
   81c94:	304e4143 	.word	0x304e4143
   81c98:	73656d20 	.word	0x73656d20
   81c9c:	65676173 	.word	0x65676173
   81ca0:	72726120 	.word	0x72726120
   81ca4:	64657669 	.word	0x64657669
   81ca8:	206e6920 	.word	0x206e6920
   81cac:	2d6e6f6e 	.word	0x2d6e6f6e
   81cb0:	64657375 	.word	0x64657375
   81cb4:	69616d20 	.word	0x69616d20
   81cb8:	786f626c 	.word	0x786f626c
   81cbc:	00000d0a 	.word	0x00000d0a
   81cc0:	6c756e28 	.word	0x6c756e28
   81cc4:	0000296c 	.word	0x0000296c
   81cc8:	68676968 	.word	0x68676968
   81ccc:	726f6373 	.word	0x726f6373
   81cd0:	73692065 	.word	0x73692065
   81cd4:	6425203a 	.word	0x6425203a
   81cd8:	000d0a20 	.word	0x000d0a20
   81cdc:	4f525245 	.word	0x4f525245
   81ce0:	64203a52 	.word	0x64203a52
   81ce4:	20797475 	.word	0x20797475
   81ce8:	6c637963 	.word	0x6c637963
   81cec:	6f742065 	.word	0x6f742065
   81cf0:	6f6c206f 	.word	0x6f6c206f
   81cf4:	00000077 	.word	0x00000077
   81cf8:	4f525245 	.word	0x4f525245
   81cfc:	64203a52 	.word	0x64203a52
   81d00:	20797475 	.word	0x20797475
   81d04:	6c637963 	.word	0x6c637963
   81d08:	6f742065 	.word	0x6f742065
   81d0c:	6968206f 	.word	0x6968206f
   81d10:	00006867 	.word	0x00006867
   81d14:	3a525245 	.word	0x3a525245
   81d18:	52415520 	.word	0x52415520
   81d1c:	58522054 	.word	0x58522054
   81d20:	66756220 	.word	0x66756220
   81d24:	20726566 	.word	0x20726566
   81d28:	66207369 	.word	0x66207369
   81d2c:	0a6c6c75 	.word	0x0a6c6c75
   81d30:	0000000d 	.word	0x0000000d

00081d34 <_global_impure_ptr>:
   81d34:	20000008                                ... 

00081d38 <_init>:
   81d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81d3a:	bf00      	nop
   81d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81d3e:	bc08      	pop	{r3}
   81d40:	469e      	mov	lr, r3
   81d42:	4770      	bx	lr

00081d44 <__init_array_start>:
   81d44:	00081b75 	.word	0x00081b75

00081d48 <__frame_dummy_init_array_entry>:
   81d48:	00080119                                ....

00081d4c <_fini>:
   81d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81d4e:	bf00      	nop
   81d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81d52:	bc08      	pop	{r3}
   81d54:	469e      	mov	lr, r3
   81d56:	4770      	bx	lr

00081d58 <__fini_array_start>:
   81d58:	000800f5 	.word	0x000800f5
