
TestYolo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000021e  00800100  00002128  000021bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002128  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000096  0080031e  0080031e  000023da  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000023da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002438  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000308  00000000  00000000  00002474  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000036b0  00000000  00000000  0000277c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001517  00000000  00000000  00005e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001944  00000000  00000000  00007343  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000854  00000000  00000000  00008c88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c04  00000000  00000000  000094dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000020c6  00000000  00000000  0000a0e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000288  00000000  00000000  0000c1a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cb 01 	jmp	0x396	; 0x396 <__ctors_end>
       4:	0c 94 3c 02 	jmp	0x478	; 0x478 <__vector_1>
       8:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
       c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      10:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      14:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      18:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      1c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      20:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      24:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      28:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      2c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      30:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      34:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      38:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      3c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      40:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      44:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      48:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      4c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      50:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      54:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      58:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      5c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      60:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      64:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      68:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      6c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      70:	08 4a       	sbci	r16, 0xA8	; 168
      72:	d7 3b       	cpi	r29, 0xB7	; 183
      74:	3b ce       	rjmp	.-906    	; 0xfffffcec <__eeprom_end+0xff7efcec>
      76:	01 6e       	ori	r16, 0xE1	; 225
      78:	84 bc       	out	0x24, r8	; 36
      7a:	bf fd       	.word	0xfdbf	; ????
      7c:	c1 2f       	mov	r28, r17
      7e:	3d 6c       	ori	r19, 0xCD	; 205
      80:	74 31       	cpi	r23, 0x14	; 20
      82:	9a bd       	out	0x2a, r25	; 42
      84:	56 83       	std	Z+6, r21	; 0x06
      86:	3d da       	rcall	.-2950   	; 0xfffff502 <__eeprom_end+0xff7ef502>
      88:	3d 00       	.word	0x003d	; ????
      8a:	c7 7f       	andi	r28, 0xF7	; 247
      8c:	11 be       	out	0x31, r1	; 49
      8e:	d9 e4       	ldi	r29, 0x49	; 73
      90:	bb 4c       	sbci	r27, 0xCB	; 203
      92:	3e 91       	ld	r19, -X
      94:	6b aa       	std	Y+51, r6	; 0x33
      96:	aa be       	out	0x3a, r10	; 58
      98:	00 00       	nop
      9a:	00 80       	ld	r0, Z
      9c:	3f 00       	.word	0x003f	; ????

0000009e <__trampolines_end>:
	...
      a6:	00 06       	cpc	r0, r16
      a8:	5f 5f       	subi	r21, 0xFF	; 255
      aa:	06 00       	.word	0x0006	; ????
      ac:	00 00       	nop
      ae:	00 07       	cpc	r16, r16
      b0:	07 00       	.word	0x0007	; ????
      b2:	07 07       	cpc	r16, r23
      b4:	00 00       	nop
      b6:	14 7f       	andi	r17, 0xF4	; 244
      b8:	7f 14       	cp	r7, r15
      ba:	7f 7f       	andi	r23, 0xFF	; 255
      bc:	14 00       	.word	0x0014	; ????
      be:	24 2e       	mov	r2, r20
      c0:	6b 6b       	ori	r22, 0xBB	; 187
      c2:	3a 12       	cpse	r3, r26
      c4:	00 00       	nop
      c6:	46 66       	ori	r20, 0x66	; 102
      c8:	30 18       	sub	r3, r0
      ca:	0c 66       	ori	r16, 0x6C	; 108
      cc:	62 00       	.word	0x0062	; ????
      ce:	30 7a       	andi	r19, 0xA0	; 160
      d0:	4f 5d       	subi	r20, 0xDF	; 223
      d2:	37 7a       	andi	r19, 0xA7	; 167
      d4:	48 00       	.word	0x0048	; ????
      d6:	04 07       	cpc	r16, r20
      d8:	03 00       	.word	0x0003	; ????
      da:	00 00       	nop
      dc:	00 00       	nop
      de:	00 1c       	adc	r0, r0
      e0:	3e 63       	ori	r19, 0x3E	; 62
      e2:	41 00       	.word	0x0041	; ????
      e4:	00 00       	nop
      e6:	00 41       	sbci	r16, 0x10	; 16
      e8:	63 3e       	cpi	r22, 0xE3	; 227
      ea:	1c 00       	.word	0x001c	; ????
      ec:	00 00       	nop
      ee:	08 2a       	or	r0, r24
      f0:	3e 1c       	adc	r3, r14
      f2:	1c 3e       	cpi	r17, 0xEC	; 236
      f4:	2a 08       	sbc	r2, r10
      f6:	08 08       	sbc	r0, r8
      f8:	3e 3e       	cpi	r19, 0xEE	; 238
      fa:	08 08       	sbc	r0, r8
      fc:	00 00       	nop
      fe:	00 a0       	ldd	r0, Z+32	; 0x20
     100:	e0 60       	ori	r30, 0x00	; 0
     102:	00 00       	nop
     104:	00 00       	nop
     106:	08 08       	sbc	r0, r8
     108:	08 08       	sbc	r0, r8
     10a:	08 08       	sbc	r0, r8
     10c:	00 00       	nop
     10e:	00 00       	nop
     110:	60 60       	ori	r22, 0x00	; 0
     112:	00 00       	nop
     114:	00 00       	nop
     116:	60 30       	cpi	r22, 0x00	; 0
     118:	18 0c       	add	r1, r8
     11a:	06 03       	mulsu	r16, r22
     11c:	01 00       	.word	0x0001	; ????
     11e:	3e 7f       	andi	r19, 0xFE	; 254
     120:	59 4d       	sbci	r21, 0xD9	; 217
     122:	7f 3e       	cpi	r23, 0xEF	; 239
     124:	00 00       	nop
     126:	42 42       	sbci	r20, 0x22	; 34
     128:	7f 7f       	andi	r23, 0xFF	; 255
     12a:	40 40       	sbci	r20, 0x00	; 0
     12c:	00 00       	nop
     12e:	62 73       	andi	r22, 0x32	; 50
     130:	59 49       	sbci	r21, 0x99	; 153
     132:	6f 66       	ori	r22, 0x6F	; 111
     134:	00 00       	nop
     136:	22 63       	ori	r18, 0x32	; 50
     138:	49 49       	sbci	r20, 0x99	; 153
     13a:	7f 36       	cpi	r23, 0x6F	; 111
     13c:	00 00       	nop
     13e:	18 1c       	adc	r1, r8
     140:	16 13       	cpse	r17, r22
     142:	7f 7f       	andi	r23, 0xFF	; 255
     144:	10 00       	.word	0x0010	; ????
     146:	27 67       	ori	r18, 0x77	; 119
     148:	45 45       	sbci	r20, 0x55	; 85
     14a:	7d 39       	cpi	r23, 0x9D	; 157
     14c:	00 00       	nop
     14e:	3c 7e       	andi	r19, 0xEC	; 236
     150:	4b 49       	sbci	r20, 0x9B	; 155
     152:	79 30       	cpi	r23, 0x09	; 9
     154:	00 00       	nop
     156:	03 63       	ori	r16, 0x33	; 51
     158:	71 19       	sub	r23, r1
     15a:	0f 07       	cpc	r16, r31
     15c:	00 00       	nop
     15e:	36 7f       	andi	r19, 0xF6	; 246
     160:	49 49       	sbci	r20, 0x99	; 153
     162:	7f 36       	cpi	r23, 0x6F	; 111
     164:	00 00       	nop
     166:	06 4f       	sbci	r16, 0xF6	; 246
     168:	49 69       	ori	r20, 0x99	; 153
     16a:	3f 1e       	adc	r3, r31
     16c:	00 00       	nop
     16e:	00 00       	nop
     170:	6c 6c       	ori	r22, 0xCC	; 204
     172:	00 00       	nop
     174:	00 00       	nop
     176:	00 a0       	ldd	r0, Z+32	; 0x20
     178:	ec 6c       	ori	r30, 0xCC	; 204
     17a:	00 00       	nop
     17c:	00 00       	nop
     17e:	08 1c       	adc	r0, r8
     180:	36 63       	ori	r19, 0x36	; 54
     182:	41 00       	.word	0x0041	; ????
     184:	00 00       	nop
     186:	14 14       	cp	r1, r4
     188:	14 14       	cp	r1, r4
     18a:	14 14       	cp	r1, r4
     18c:	00 00       	nop
     18e:	00 41       	sbci	r16, 0x10	; 16
     190:	63 36       	cpi	r22, 0x63	; 99
     192:	1c 08       	sbc	r1, r12
     194:	00 00       	nop
     196:	02 03       	mulsu	r16, r18
     198:	51 59       	subi	r21, 0x91	; 145
     19a:	0f 06       	cpc	r0, r31
     19c:	00 00       	nop
     19e:	3e 7f       	andi	r19, 0xFE	; 254
     1a0:	41 5d       	subi	r20, 0xD1	; 209
     1a2:	5d 1f       	adc	r21, r29
     1a4:	1e 00       	.word	0x001e	; ????
     1a6:	7c 7e       	andi	r23, 0xEC	; 236
     1a8:	13 13       	cpse	r17, r19
     1aa:	7e 7c       	andi	r23, 0xCE	; 206
     1ac:	00 00       	nop
     1ae:	41 7f       	andi	r20, 0xF1	; 241
     1b0:	7f 49       	sbci	r23, 0x9F	; 159
     1b2:	49 7f       	andi	r20, 0xF9	; 249
     1b4:	36 00       	.word	0x0036	; ????
     1b6:	1c 3e       	cpi	r17, 0xEC	; 236
     1b8:	63 41       	sbci	r22, 0x13	; 19
     1ba:	41 63       	ori	r20, 0x31	; 49
     1bc:	22 00       	.word	0x0022	; ????
     1be:	41 7f       	andi	r20, 0xF1	; 241
     1c0:	7f 41       	sbci	r23, 0x1F	; 31
     1c2:	63 7f       	andi	r22, 0xF3	; 243
     1c4:	1c 00       	.word	0x001c	; ????
     1c6:	41 7f       	andi	r20, 0xF1	; 241
     1c8:	7f 49       	sbci	r23, 0x9F	; 159
     1ca:	5d 41       	sbci	r21, 0x1D	; 29
     1cc:	63 00       	.word	0x0063	; ????
     1ce:	41 7f       	andi	r20, 0xF1	; 241
     1d0:	7f 49       	sbci	r23, 0x9F	; 159
     1d2:	1d 01       	movw	r2, r26
     1d4:	03 00       	.word	0x0003	; ????
     1d6:	1c 3e       	cpi	r17, 0xEC	; 236
     1d8:	63 41       	sbci	r22, 0x13	; 19
     1da:	51 73       	andi	r21, 0x31	; 49
     1dc:	72 00       	.word	0x0072	; ????
     1de:	7f 7f       	andi	r23, 0xFF	; 255
     1e0:	08 08       	sbc	r0, r8
     1e2:	7f 7f       	andi	r23, 0xFF	; 255
     1e4:	00 00       	nop
     1e6:	00 41       	sbci	r16, 0x10	; 16
     1e8:	7f 7f       	andi	r23, 0xFF	; 255
     1ea:	41 00       	.word	0x0041	; ????
     1ec:	00 00       	nop
     1ee:	30 70       	andi	r19, 0x00	; 0
     1f0:	40 41       	sbci	r20, 0x10	; 16
     1f2:	7f 3f       	cpi	r23, 0xFF	; 255
     1f4:	01 00       	.word	0x0001	; ????
     1f6:	41 7f       	andi	r20, 0xF1	; 241
     1f8:	7f 08       	sbc	r7, r15
     1fa:	1c 77       	andi	r17, 0x7C	; 124
     1fc:	63 00       	.word	0x0063	; ????
     1fe:	41 7f       	andi	r20, 0xF1	; 241
     200:	7f 41       	sbci	r23, 0x1F	; 31
     202:	40 60       	ori	r20, 0x00	; 0
     204:	70 00       	.word	0x0070	; ????
     206:	7f 7f       	andi	r23, 0xFF	; 255
     208:	06 0c       	add	r0, r6
     20a:	06 7f       	andi	r16, 0xF6	; 246
     20c:	7f 00       	.word	0x007f	; ????
     20e:	7f 7f       	andi	r23, 0xFF	; 255
     210:	06 0c       	add	r0, r6
     212:	18 7f       	andi	r17, 0xF8	; 248
     214:	7f 00       	.word	0x007f	; ????
     216:	1c 3e       	cpi	r17, 0xEC	; 236
     218:	63 41       	sbci	r22, 0x13	; 19
     21a:	63 3e       	cpi	r22, 0xE3	; 227
     21c:	1c 00       	.word	0x001c	; ????
     21e:	41 7f       	andi	r20, 0xF1	; 241
     220:	7f 49       	sbci	r23, 0x9F	; 159
     222:	09 0f       	add	r16, r25
     224:	06 00       	.word	0x0006	; ????
     226:	1e 3f       	cpi	r17, 0xFE	; 254
     228:	21 71       	andi	r18, 0x11	; 17
     22a:	7f 5e       	subi	r23, 0xEF	; 239
     22c:	00 00       	nop
     22e:	41 7f       	andi	r20, 0xF1	; 241
     230:	7f 19       	sub	r23, r15
     232:	39 6f       	ori	r19, 0xF9	; 249
     234:	46 00       	.word	0x0046	; ????
     236:	26 67       	ori	r18, 0x76	; 118
     238:	4d 59       	subi	r20, 0x9D	; 157
     23a:	7b 32       	cpi	r23, 0x2B	; 43
     23c:	00 00       	nop
     23e:	03 41       	sbci	r16, 0x13	; 19
     240:	7f 7f       	andi	r23, 0xFF	; 255
     242:	41 03       	mulsu	r20, r17
     244:	00 00       	nop
     246:	7f 7f       	andi	r23, 0xFF	; 255
     248:	40 40       	sbci	r20, 0x00	; 0
     24a:	7f 7f       	andi	r23, 0xFF	; 255
     24c:	00 00       	nop
     24e:	1f 3f       	cpi	r17, 0xFF	; 255
     250:	60 60       	ori	r22, 0x00	; 0
     252:	3f 1f       	adc	r19, r31
     254:	00 00       	nop
     256:	7f 7f       	andi	r23, 0xFF	; 255
     258:	30 18       	sub	r3, r0
     25a:	30 7f       	andi	r19, 0xF0	; 240
     25c:	7f 00       	.word	0x007f	; ????
     25e:	63 77       	andi	r22, 0x73	; 115
     260:	1c 08       	sbc	r1, r12
     262:	1c 77       	andi	r17, 0x7C	; 124
     264:	63 00       	.word	0x0063	; ????
     266:	07 4f       	sbci	r16, 0xF7	; 247
     268:	78 78       	andi	r23, 0x88	; 136
     26a:	4f 07       	cpc	r20, r31
     26c:	00 00       	nop
     26e:	67 73       	andi	r22, 0x37	; 55
     270:	59 4d       	sbci	r21, 0xD9	; 217
     272:	47 63       	ori	r20, 0x37	; 55
     274:	71 00       	.word	0x0071	; ????
     276:	00 7f       	andi	r16, 0xF0	; 240
     278:	7f 41       	sbci	r23, 0x1F	; 31
     27a:	41 00       	.word	0x0041	; ????
     27c:	00 00       	nop
     27e:	01 03       	mulsu	r16, r17
     280:	06 0c       	add	r0, r6
     282:	18 30       	cpi	r17, 0x08	; 8
     284:	60 00       	.word	0x0060	; ????
     286:	00 41       	sbci	r16, 0x10	; 16
     288:	41 7f       	andi	r20, 0xF1	; 241
     28a:	7f 00       	.word	0x007f	; ????
     28c:	00 00       	nop
     28e:	08 0c       	add	r0, r8
     290:	06 03       	mulsu	r16, r22
     292:	06 0c       	add	r0, r6
     294:	08 00       	.word	0x0008	; ????
     296:	80 80       	ld	r8, Z
     298:	80 80       	ld	r8, Z
     29a:	80 80       	ld	r8, Z
     29c:	80 80       	ld	r8, Z
     29e:	00 00       	nop
     2a0:	03 07       	cpc	r16, r19
     2a2:	04 00       	.word	0x0004	; ????
     2a4:	00 00       	nop
     2a6:	20 74       	andi	r18, 0x40	; 64
     2a8:	54 54       	subi	r21, 0x44	; 68
     2aa:	3c 78       	andi	r19, 0x8C	; 140
     2ac:	40 00       	.word	0x0040	; ????
     2ae:	41 3f       	cpi	r20, 0xF1	; 241
     2b0:	7f 44       	sbci	r23, 0x4F	; 79
     2b2:	44 7c       	andi	r20, 0xC4	; 196
     2b4:	38 00       	.word	0x0038	; ????
     2b6:	38 7c       	andi	r19, 0xC8	; 200
     2b8:	44 44       	sbci	r20, 0x44	; 68
     2ba:	6c 28       	or	r6, r12
     2bc:	00 00       	nop
     2be:	30 78       	andi	r19, 0x80	; 128
     2c0:	48 49       	sbci	r20, 0x98	; 152
     2c2:	3f 7f       	andi	r19, 0xFF	; 255
     2c4:	40 00       	.word	0x0040	; ????
     2c6:	38 7c       	andi	r19, 0xC8	; 200
     2c8:	54 54       	subi	r21, 0x44	; 68
     2ca:	5c 18       	sub	r5, r12
     2cc:	00 00       	nop
     2ce:	48 7e       	andi	r20, 0xE8	; 232
     2d0:	7f 49       	sbci	r23, 0x9F	; 159
     2d2:	03 02       	muls	r16, r19
     2d4:	00 00       	nop
     2d6:	98 bc       	out	0x28, r9	; 40
     2d8:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2da:	f8 7c       	andi	r31, 0xC8	; 200
     2dc:	04 00       	.word	0x0004	; ????
     2de:	41 7f       	andi	r20, 0xF1	; 241
     2e0:	7f 08       	sbc	r7, r15
     2e2:	04 7c       	andi	r16, 0xC4	; 196
     2e4:	78 00       	.word	0x0078	; ????
     2e6:	00 44       	sbci	r16, 0x40	; 64
     2e8:	7d 7d       	andi	r23, 0xDD	; 221
     2ea:	40 00       	.word	0x0040	; ????
     2ec:	00 00       	nop
     2ee:	40 c4       	rjmp	.+2176   	; 0xb70 <print_new_game_menu_objects+0x56>
     2f0:	84 fd       	sbrc	r24, 4
     2f2:	7d 00       	.word	0x007d	; ????
     2f4:	00 00       	nop
     2f6:	41 7f       	andi	r20, 0xF1	; 241
     2f8:	7f 10       	cpse	r7, r15
     2fa:	38 6c       	ori	r19, 0xC8	; 200
     2fc:	44 00       	.word	0x0044	; ????
     2fe:	00 41       	sbci	r16, 0x10	; 16
     300:	7f 7f       	andi	r23, 0xFF	; 255
     302:	40 00       	.word	0x0040	; ????
     304:	00 00       	nop
     306:	7c 7c       	andi	r23, 0xCC	; 204
     308:	0c 18       	sub	r0, r12
     30a:	0c 7c       	andi	r16, 0xCC	; 204
     30c:	78 00       	.word	0x0078	; ????
     30e:	7c 7c       	andi	r23, 0xCC	; 204
     310:	04 04       	cpc	r0, r4
     312:	7c 78       	andi	r23, 0x8C	; 140
     314:	00 00       	nop
     316:	38 7c       	andi	r19, 0xC8	; 200
     318:	44 44       	sbci	r20, 0x44	; 68
     31a:	7c 38       	cpi	r23, 0x8C	; 140
     31c:	00 00       	nop
     31e:	84 fc       	sbrc	r8, 4
     320:	f8 a4       	ldd	r15, Y+40	; 0x28
     322:	24 3c       	cpi	r18, 0xC4	; 196
     324:	18 00       	.word	0x0018	; ????
     326:	18 3c       	cpi	r17, 0xC8	; 200
     328:	24 a4       	ldd	r2, Z+44	; 0x2c
     32a:	f8 fc       	.word	0xfcf8	; ????
     32c:	84 00       	.word	0x0084	; ????
     32e:	44 7c       	andi	r20, 0xC4	; 196
     330:	78 44       	sbci	r23, 0x48	; 72
     332:	1c 18       	sub	r1, r12
     334:	00 00       	nop
     336:	48 5c       	subi	r20, 0xC8	; 200
     338:	54 54       	subi	r21, 0x44	; 68
     33a:	74 24       	eor	r7, r4
     33c:	00 00       	nop
     33e:	00 04       	cpc	r0, r0
     340:	3e 7f       	andi	r19, 0xFE	; 254
     342:	44 24       	eor	r4, r4
     344:	00 00       	nop
     346:	3c 7c       	andi	r19, 0xCC	; 204
     348:	40 40       	sbci	r20, 0x00	; 0
     34a:	3c 7c       	andi	r19, 0xCC	; 204
     34c:	40 00       	.word	0x0040	; ????
     34e:	1c 3c       	cpi	r17, 0xCC	; 204
     350:	60 60       	ori	r22, 0x00	; 0
     352:	3c 1c       	adc	r3, r12
     354:	00 00       	nop
     356:	3c 7c       	andi	r19, 0xCC	; 204
     358:	60 30       	cpi	r22, 0x00	; 0
     35a:	60 7c       	andi	r22, 0xC0	; 192
     35c:	3c 00       	.word	0x003c	; ????
     35e:	44 6c       	ori	r20, 0xC4	; 196
     360:	38 10       	cpse	r3, r8
     362:	38 6c       	ori	r19, 0xC8	; 200
     364:	44 00       	.word	0x0044	; ????
     366:	9c bc       	out	0x2c, r9	; 44
     368:	a0 a0       	ldd	r10, Z+32	; 0x20
     36a:	fc 7c       	andi	r31, 0xCC	; 204
     36c:	00 00       	nop
     36e:	4c 64       	ori	r20, 0x4C	; 76
     370:	74 5c       	subi	r23, 0xC4	; 196
     372:	4c 64       	ori	r20, 0x4C	; 76
     374:	00 00       	nop
     376:	08 08       	sbc	r0, r8
     378:	3e 77       	andi	r19, 0x7E	; 126
     37a:	41 41       	sbci	r20, 0x11	; 17
     37c:	00 00       	nop
     37e:	00 00       	nop
     380:	00 77       	andi	r16, 0x70	; 112
     382:	77 00       	.word	0x0077	; ????
     384:	00 00       	nop
     386:	41 41       	sbci	r20, 0x11	; 17
     388:	77 3e       	cpi	r23, 0xE7	; 231
     38a:	08 08       	sbc	r0, r8
     38c:	00 00       	nop
     38e:	02 03       	mulsu	r16, r18
     390:	01 03       	mulsu	r16, r17
     392:	02 03       	mulsu	r16, r18
     394:	01 00       	.word	0x0001	; ????

00000396 <__ctors_end>:
     396:	11 24       	eor	r1, r1
     398:	1f be       	out	0x3f, r1	; 63
     39a:	cf ef       	ldi	r28, 0xFF	; 255
     39c:	d4 e0       	ldi	r29, 0x04	; 4
     39e:	de bf       	out	0x3e, r29	; 62
     3a0:	cd bf       	out	0x3d, r28	; 61

000003a2 <__do_copy_data>:
     3a2:	13 e0       	ldi	r17, 0x03	; 3
     3a4:	a0 e0       	ldi	r26, 0x00	; 0
     3a6:	b1 e0       	ldi	r27, 0x01	; 1
     3a8:	e8 e2       	ldi	r30, 0x28	; 40
     3aa:	f1 e2       	ldi	r31, 0x21	; 33
     3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <__do_copy_data+0x10>
     3ae:	05 90       	lpm	r0, Z+
     3b0:	0d 92       	st	X+, r0
     3b2:	ae 31       	cpi	r26, 0x1E	; 30
     3b4:	b1 07       	cpc	r27, r17
     3b6:	d9 f7       	brne	.-10     	; 0x3ae <__do_copy_data+0xc>

000003b8 <__do_clear_bss>:
     3b8:	23 e0       	ldi	r18, 0x03	; 3
     3ba:	ae e1       	ldi	r26, 0x1E	; 30
     3bc:	b3 e0       	ldi	r27, 0x03	; 3
     3be:	01 c0       	rjmp	.+2      	; 0x3c2 <.do_clear_bss_start>

000003c0 <.do_clear_bss_loop>:
     3c0:	1d 92       	st	X+, r1

000003c2 <.do_clear_bss_start>:
     3c2:	a4 3b       	cpi	r26, 0xB4	; 180
     3c4:	b2 07       	cpc	r27, r18
     3c6:	e1 f7       	brne	.-8      	; 0x3c0 <.do_clear_bss_loop>
     3c8:	0e 94 9b 08 	call	0x1136	; 0x1136 <main>
     3cc:	0c 94 92 10 	jmp	0x2124	; 0x2124 <_exit>

000003d0 <__bad_interrupt>:
     3d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003d4 <ADC_read>:
    uint8_t retreived_value = ext_ram1[adrs];
    if (retreived_value != 0b01010101) {
        printf("ADC error, ext_ram1[%4d] = %02X  \n\r", adrs, retreived_value);
    }
    else{
        printf("ADC success, ext_ram1[%4d] = %02X  \n\r", adrs, retreived_value);
     3d4:	80 68       	ori	r24, 0x80	; 128
     3d6:	e1 e0       	ldi	r30, 0x01	; 1
     3d8:	f4 e1       	ldi	r31, 0x14	; 20
     3da:	80 83       	st	Z, r24
     3dc:	86 ef       	ldi	r24, 0xF6	; 246
     3de:	8a 95       	dec	r24
     3e0:	f1 f7       	brne	.-4      	; 0x3de <ADC_read+0xa>
     3e2:	80 81       	ld	r24, Z
     3e4:	08 95       	ret

000003e6 <ADC_calibrate>:
     3e6:	e1 e0       	ldi	r30, 0x01	; 1
     3e8:	f4 e1       	ldi	r31, 0x14	; 20
     3ea:	20 e8       	ldi	r18, 0x80	; 128
     3ec:	20 83       	st	Z, r18
     3ee:	26 ef       	ldi	r18, 0xF6	; 246
     3f0:	2a 95       	dec	r18
     3f2:	f1 f7       	brne	.-4      	; 0x3f0 <ADC_calibrate+0xa>
     3f4:	20 81       	ld	r18, Z
     3f6:	30 e0       	ldi	r19, 0x00	; 0
     3f8:	dc 01       	movw	r26, r24
     3fa:	2d 93       	st	X+, r18
     3fc:	3c 93       	st	X, r19
     3fe:	21 e8       	ldi	r18, 0x81	; 129
     400:	20 83       	st	Z, r18
     402:	b6 ef       	ldi	r27, 0xF6	; 246
     404:	ba 95       	dec	r27
     406:	f1 f7       	brne	.-4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     408:	20 81       	ld	r18, Z
     40a:	30 e0       	ldi	r19, 0x00	; 0
     40c:	fc 01       	movw	r30, r24
     40e:	33 83       	std	Z+3, r19	; 0x03
     410:	22 83       	std	Z+2, r18	; 0x02
     412:	08 95       	ret

00000414 <ADC_timer_init>:
}


void ADC_timer_init(void) {

    DDRB|=(1<<PB0);  /*set OC0 pin as output*/
     414:	b8 9a       	sbi	0x17, 0	; 23

    TCCR0 |= (1<<WGM01) | (0<<WGM00);
     416:	83 b7       	in	r24, 0x33	; 51
     418:	88 60       	ori	r24, 0x08	; 8
     41a:	83 bf       	out	0x33, r24	; 51
    TCCR0 |= (1<<COM00);
     41c:	83 b7       	in	r24, 0x33	; 51
     41e:	80 61       	ori	r24, 0x10	; 16
     420:	83 bf       	out	0x33, r24	; 51
    TCCR0 |= (1<<CS00);
     422:	83 b7       	in	r24, 0x33	; 51
     424:	81 60       	ori	r24, 0x01	; 1
     426:	83 bf       	out	0x33, r24	; 51

    OCR0 = 0b00000001;
     428:	81 e0       	ldi	r24, 0x01	; 1
     42a:	81 bf       	out	0x31, r24	; 49
     42c:	08 95       	ret

0000042e <CAN_init>:
uint8_t CAN_check_interrupt(){
    if(flag){
        return 1;
    }
	return 0;
}
     42e:	cf 93       	push	r28
     430:	c8 2f       	mov	r28, r24
     432:	f8 94       	cli
     434:	85 b7       	in	r24, 0x35	; 53
     436:	82 60       	ori	r24, 0x02	; 2
     438:	85 bf       	out	0x35, r24	; 53
     43a:	85 b7       	in	r24, 0x35	; 53
     43c:	8e 7f       	andi	r24, 0xFE	; 254
     43e:	85 bf       	out	0x35, r24	; 53
     440:	8b b7       	in	r24, 0x3b	; 59
     442:	80 64       	ori	r24, 0x40	; 64
     444:	8b bf       	out	0x3b, r24	; 59
     446:	78 94       	sei
     448:	80 e8       	ldi	r24, 0x80	; 128
     44a:	0e 94 07 03 	call	0x60e	; 0x60e <mcp_init>
     44e:	63 e0       	ldi	r22, 0x03	; 3
     450:	8b e2       	ldi	r24, 0x2B	; 43
     452:	0e 94 ce 02 	call	0x59c	; 0x59c <mcp_write>
     456:	61 e8       	ldi	r22, 0x81	; 129
     458:	8a e2       	ldi	r24, 0x2A	; 42
     45a:	0e 94 ce 02 	call	0x59c	; 0x59c <mcp_write>
     45e:	6d ea       	ldi	r22, 0xAD	; 173
     460:	89 e2       	ldi	r24, 0x29	; 41
     462:	0e 94 ce 02 	call	0x59c	; 0x59c <mcp_write>
     466:	65 e0       	ldi	r22, 0x05	; 5
     468:	88 e2       	ldi	r24, 0x28	; 40
     46a:	0e 94 ce 02 	call	0x59c	; 0x59c <mcp_write>
     46e:	8c 2f       	mov	r24, r28
     470:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <mcp_set_mode>
     474:	cf 91       	pop	r28
     476:	08 95       	ret

00000478 <__vector_1>:
     478:	1f 92       	push	r1
     47a:	0f 92       	push	r0
     47c:	0f b6       	in	r0, 0x3f	; 63
     47e:	0f 92       	push	r0
     480:	11 24       	eor	r1, r1
     482:	8f 93       	push	r24
     484:	9f 93       	push	r25
     486:	81 e0       	ldi	r24, 0x01	; 1
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	90 93 1f 03 	sts	0x031F, r25	; 0x80031f <__data_end+0x1>
     48e:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <__data_end>
     492:	9f 91       	pop	r25
     494:	8f 91       	pop	r24
     496:	0f 90       	pop	r0
     498:	0f be       	out	0x3f, r0	; 63
     49a:	0f 90       	pop	r0
     49c:	1f 90       	pop	r1
     49e:	18 95       	reti

000004a0 <CAN_message_transmission>:


uint8_t CAN_message_transmission(CAN_message_t* can_message){
     4a0:	0f 93       	push	r16
     4a2:	1f 93       	push	r17
     4a4:	cf 93       	push	r28
     4a6:	df 93       	push	r29
     4a8:	8c 01       	movw	r16, r24

    //Splitting up the identifier into two bytes
    uint8_t identifier_low = ((can_message -> identifier) << 5);
     4aa:	fc 01       	movw	r30, r24
     4ac:	c0 81       	ld	r28, Z
     4ae:	d1 81       	ldd	r29, Z+1	; 0x01
    uint8_t identifier_high = ((can_message -> identifier) >> 3);

    //Writing the identifier
    mcp_write(MCP_TXB0SIDL, identifier_low);
     4b0:	6c 2f       	mov	r22, r28
     4b2:	62 95       	swap	r22
     4b4:	66 0f       	add	r22, r22
     4b6:	60 7e       	andi	r22, 0xE0	; 224
     4b8:	82 e3       	ldi	r24, 0x32	; 50
     4ba:	0e 94 ce 02 	call	0x59c	; 0x59c <mcp_write>
    mcp_write(MCP_TXB0SIDH, identifier_high);
     4be:	be 01       	movw	r22, r28
     4c0:	76 95       	lsr	r23
     4c2:	67 95       	ror	r22
     4c4:	76 95       	lsr	r23
     4c6:	67 95       	ror	r22
     4c8:	76 95       	lsr	r23
     4ca:	67 95       	ror	r22
     4cc:	81 e3       	ldi	r24, 0x31	; 49
     4ce:	0e 94 ce 02 	call	0x59c	; 0x59c <mcp_write>

    //Writing the length of the data message
    mcp_write(MCP_TXB0DLC, can_message -> data_length);
     4d2:	f8 01       	movw	r30, r16
     4d4:	62 81       	ldd	r22, Z+2	; 0x02
     4d6:	85 e3       	ldi	r24, 0x35	; 53
     4d8:	0e 94 ce 02 	call	0x59c	; 0x59c <mcp_write>

    //Writing the data Message
    uint8_t data_byte;
    for(uint8_t i = 0; i < (can_message -> data_length); i++){
     4dc:	f8 01       	movw	r30, r16
     4de:	82 81       	ldd	r24, Z+2	; 0x02
     4e0:	88 23       	and	r24, r24
     4e2:	71 f0       	breq	.+28     	; 0x500 <__stack+0x1>
     4e4:	c0 e0       	ldi	r28, 0x00	; 0
        data_byte = (can_message -> data)[i];
     4e6:	f8 01       	movw	r30, r16
     4e8:	ec 0f       	add	r30, r28
     4ea:	f1 1d       	adc	r31, r1
        mcp_write(MCP_TXB0D0 + i, data_byte);
     4ec:	63 81       	ldd	r22, Z+3	; 0x03
     4ee:	86 e3       	ldi	r24, 0x36	; 54
     4f0:	8c 0f       	add	r24, r28
     4f2:	0e 94 ce 02 	call	0x59c	; 0x59c <mcp_write>
    //Writing the length of the data message
    mcp_write(MCP_TXB0DLC, can_message -> data_length);

    //Writing the data Message
    uint8_t data_byte;
    for(uint8_t i = 0; i < (can_message -> data_length); i++){
     4f6:	cf 5f       	subi	r28, 0xFF	; 255
     4f8:	f8 01       	movw	r30, r16
     4fa:	82 81       	ldd	r24, Z+2	; 0x02
     4fc:	c8 17       	cp	r28, r24
     4fe:	98 f3       	brcs	.-26     	; 0x4e6 <CAN_message_transmission+0x46>
        data_byte = (can_message -> data)[i];
        mcp_write(MCP_TXB0D0 + i, data_byte);
    }

    // Request to send to given buffer
    mcp_request_to_send(0);
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	0e 94 43 03 	call	0x686	; 0x686 <mcp_request_to_send>
}
     506:	df 91       	pop	r29
     508:	cf 91       	pop	r28
     50a:	1f 91       	pop	r17
     50c:	0f 91       	pop	r16
     50e:	08 95       	ret

00000510 <joyStick_Can_Message>:
 *  Author: Herbe
 */ 
#include "CAN_joystick_messages.h"


void joyStick_Can_Message(){
     510:	ef 92       	push	r14
     512:	ff 92       	push	r15
     514:	0f 93       	push	r16
     516:	1f 93       	push	r17
     518:	cf 93       	push	r28
     51a:	df 93       	push	r29
     51c:	cd b7       	in	r28, 0x3d	; 61
     51e:	de b7       	in	r29, 0x3e	; 62
     520:	2b 97       	sbiw	r28, 0x0b	; 11
     522:	0f b6       	in	r0, 0x3f	; 63
     524:	f8 94       	cli
     526:	de bf       	out	0x3e, r29	; 62
     528:	0f be       	out	0x3f, r0	; 63
     52a:	cd bf       	out	0x3d, r28	; 61
	
pos_read(&P_pos); //Reads the current position of the joystick
     52c:	84 ea       	ldi	r24, 0xA4	; 164
     52e:	93 e0       	ldi	r25, 0x03	; 3
     530:	0e 94 d2 06 	call	0xda4	; 0xda4 <pos_read>

uint8_t sendSliderRight = ADC_read(2);  
     534:	82 e0       	ldi	r24, 0x02	; 2
     536:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ADC_read>
     53a:	e8 2e       	mov	r14, r24
uint8_t sendPosX = 128 + P_pos.posX;  //Adding 128 to not have negative a number
     53c:	e4 ea       	ldi	r30, 0xA4	; 164
     53e:	f3 e0       	ldi	r31, 0x03	; 3
     540:	80 81       	ld	r24, Z
     542:	68 94       	set
     544:	ff 24       	eor	r15, r15
     546:	f7 f8       	bld	r15, 7
     548:	f8 0e       	add	r15, r24
uint8_t sendPosY = 128 + P_pos.posY;  //Adding 128 to not have negative a number
     54a:	02 81       	ldd	r16, Z+2	; 0x02
     54c:	00 58       	subi	r16, 0x80	; 128
uint8_t sendJoyButton = usb_button_pushed(JOYSTICK_BUTTON);
     54e:	82 e0       	ldi	r24, 0x02	; 2
     550:	0e 94 87 08 	call	0x110e	; 0x110e <usb_button_pushed>
     554:	18 2f       	mov	r17, r24
uint8_t sendJoyDirection = (joystick_direction()) << 1; //shift right to not disturb rest of message
     556:	0e 94 c1 07 	call	0xf82	; 0xf82 <joystick_direction>

uint8_t sendJoyData = sendJoyDirection + sendJoyButton;  //Combining button-bushed and joystick-direction in one byte.

CAN_message_t joyStickData;
joyStickData.identifier = 0;
     55a:	1a 82       	std	Y+2, r1	; 0x02
     55c:	19 82       	std	Y+1, r1	; 0x01
joyStickData.data[0] = sendPosX;
     55e:	fc 82       	std	Y+4, r15	; 0x04
joyStickData.data[1] = sendPosY;
     560:	0d 83       	std	Y+5, r16	; 0x05
joyStickData.data[2] = sendJoyData;
     562:	88 0f       	add	r24, r24
     564:	18 0f       	add	r17, r24
     566:	1e 83       	std	Y+6, r17	; 0x06
joyStickData.data[3] = sendSliderRight;
     568:	ef 82       	std	Y+7, r14	; 0x07
joyStickData.data_length = 4;
     56a:	84 e0       	ldi	r24, 0x04	; 4
     56c:	8b 83       	std	Y+3, r24	; 0x03

CAN_message_transmission(&joyStickData);
     56e:	ce 01       	movw	r24, r28
     570:	01 96       	adiw	r24, 0x01	; 1
     572:	0e 94 50 02 	call	0x4a0	; 0x4a0 <CAN_message_transmission>
     576:	2b 96       	adiw	r28, 0x0b	; 11
     578:	0f b6       	in	r0, 0x3f	; 63
     57a:	f8 94       	cli
     57c:	de bf       	out	0x3e, r29	; 62
     57e:	0f be       	out	0x3f, r0	; 63
     580:	cd bf       	out	0x3d, r28	; 61
     582:	df 91       	pop	r29
     584:	cf 91       	pop	r28
     586:	1f 91       	pop	r17
     588:	0f 91       	pop	r16
     58a:	ff 90       	pop	r15
     58c:	ef 90       	pop	r14
     58e:	08 95       	ret

00000590 <spi_master_CS>:
    status_value = spi_read();

    spi_master_CS(1);

    return status_value;
}
     590:	81 11       	cpse	r24, r1
     592:	02 c0       	rjmp	.+4      	; 0x598 <spi_master_CS+0x8>
     594:	c4 98       	cbi	0x18, 4	; 24
     596:	08 95       	ret
     598:	c4 9a       	sbi	0x18, 4	; 24
     59a:	08 95       	ret

0000059c <mcp_write>:
     59c:	cf 93       	push	r28
     59e:	df 93       	push	r29
     5a0:	d8 2f       	mov	r29, r24
     5a2:	c6 2f       	mov	r28, r22
     5a4:	80 e0       	ldi	r24, 0x00	; 0
     5a6:	0e 94 c8 02 	call	0x590	; 0x590 <spi_master_CS>
     5aa:	82 e0       	ldi	r24, 0x02	; 2
     5ac:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <spi_write>
     5b0:	8d 2f       	mov	r24, r29
     5b2:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <spi_write>
     5b6:	8c 2f       	mov	r24, r28
     5b8:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <spi_write>
     5bc:	81 e0       	ldi	r24, 0x01	; 1
     5be:	0e 94 c8 02 	call	0x590	; 0x590 <spi_master_CS>
     5c2:	df 91       	pop	r29
     5c4:	cf 91       	pop	r28
     5c6:	08 95       	ret

000005c8 <mcp_set_mode>:
     5c8:	68 2f       	mov	r22, r24
     5ca:	8f e0       	ldi	r24, 0x0F	; 15
     5cc:	0e 94 ce 02 	call	0x59c	; 0x59c <mcp_write>
     5d0:	08 95       	ret

000005d2 <mcp_read>:
     5d2:	cf 93       	push	r28
     5d4:	c8 2f       	mov	r28, r24
     5d6:	80 e0       	ldi	r24, 0x00	; 0
     5d8:	0e 94 c8 02 	call	0x590	; 0x590 <spi_master_CS>
     5dc:	83 e0       	ldi	r24, 0x03	; 3
     5de:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <spi_write>
     5e2:	8c 2f       	mov	r24, r28
     5e4:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <spi_write>
     5e8:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <spi_read>
     5ec:	c8 2f       	mov	r28, r24
     5ee:	81 e0       	ldi	r24, 0x01	; 1
     5f0:	0e 94 c8 02 	call	0x590	; 0x590 <spi_master_CS>
     5f4:	8c 2f       	mov	r24, r28
     5f6:	cf 91       	pop	r28
     5f8:	08 95       	ret

000005fa <mcp_reset>:
     5fa:	80 e0       	ldi	r24, 0x00	; 0
     5fc:	0e 94 c8 02 	call	0x590	; 0x590 <spi_master_CS>
     600:	80 ec       	ldi	r24, 0xC0	; 192
     602:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <spi_write>
     606:	81 e0       	ldi	r24, 0x01	; 1
     608:	0e 94 c8 02 	call	0x590	; 0x590 <spi_master_CS>
     60c:	08 95       	ret

0000060e <mcp_init>:
     60e:	cf 93       	push	r28
     610:	df 93       	push	r29
     612:	d8 2f       	mov	r29, r24
     614:	0e 94 ed 08 	call	0x11da	; 0x11da <spi_init>
     618:	0e 94 fd 02 	call	0x5fa	; 0x5fa <mcp_reset>
     61c:	80 e8       	ldi	r24, 0x80	; 128
     61e:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <mcp_set_mode>
     622:	8f ef       	ldi	r24, 0xFF	; 255
     624:	9f e8       	ldi	r25, 0x8F	; 143
     626:	01 97       	sbiw	r24, 0x01	; 1
     628:	f1 f7       	brne	.-4      	; 0x626 <mcp_init+0x18>
     62a:	00 c0       	rjmp	.+0      	; 0x62c <mcp_init+0x1e>
     62c:	00 00       	nop
     62e:	8e e0       	ldi	r24, 0x0E	; 14
     630:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <mcp_read>
     634:	c8 2f       	mov	r28, r24
     636:	1f 92       	push	r1
     638:	8f 93       	push	r24
     63a:	8a e1       	ldi	r24, 0x1A	; 26
     63c:	91 e0       	ldi	r25, 0x01	; 1
     63e:	9f 93       	push	r25
     640:	8f 93       	push	r24
     642:	0e 94 40 0c 	call	0x1880	; 0x1880 <printf>
     646:	c0 7e       	andi	r28, 0xE0	; 224
     648:	0f 90       	pop	r0
     64a:	0f 90       	pop	r0
     64c:	0f 90       	pop	r0
     64e:	0f 90       	pop	r0
     650:	c0 38       	cpi	r28, 0x80	; 128
     652:	31 f0       	breq	.+12     	; 0x660 <mcp_init+0x52>
     654:	86 e2       	ldi	r24, 0x26	; 38
     656:	91 e0       	ldi	r25, 0x01	; 1
     658:	0e 94 56 0c 	call	0x18ac	; 0x18ac <puts>
     65c:	81 e0       	ldi	r24, 0x01	; 1
     65e:	10 c0       	rjmp	.+32     	; 0x680 <mcp_init+0x72>
     660:	8d 2f       	mov	r24, r29
     662:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <mcp_set_mode>
     666:	8e e0       	ldi	r24, 0x0E	; 14
     668:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <mcp_read>
     66c:	80 7e       	andi	r24, 0xE0	; 224
     66e:	8d 17       	cp	r24, r29
     670:	31 f0       	breq	.+12     	; 0x67e <mcp_init+0x70>
     672:	88 e5       	ldi	r24, 0x58	; 88
     674:	91 e0       	ldi	r25, 0x01	; 1
     676:	0e 94 56 0c 	call	0x18ac	; 0x18ac <puts>
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	01 c0       	rjmp	.+2      	; 0x680 <mcp_init+0x72>
     67e:	80 e0       	ldi	r24, 0x00	; 0
     680:	df 91       	pop	r29
     682:	cf 91       	pop	r28
     684:	08 95       	ret

00000686 <mcp_request_to_send>:

void mcp_request_to_send(uint8_t buffer){
     686:	cf 93       	push	r28
     688:	c8 2f       	mov	r28, r24
    spi_master_CS(0);
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	0e 94 c8 02 	call	0x590	; 0x590 <spi_master_CS>

    switch (buffer) {
     690:	c1 30       	cpi	r28, 0x01	; 1
     692:	41 f0       	breq	.+16     	; 0x6a4 <mcp_request_to_send+0x1e>
     694:	18 f0       	brcs	.+6      	; 0x69c <mcp_request_to_send+0x16>
     696:	c2 30       	cpi	r28, 0x02	; 2
     698:	49 f0       	breq	.+18     	; 0x6ac <mcp_request_to_send+0x26>
     69a:	0c c0       	rjmp	.+24     	; 0x6b4 <mcp_request_to_send+0x2e>
      case 0:
          spi_write(MCP_RTS_TX0);
     69c:	81 e8       	ldi	r24, 0x81	; 129
     69e:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <spi_write>
          break;
     6a2:	0b c0       	rjmp	.+22     	; 0x6ba <mcp_request_to_send+0x34>
      case 1:
          spi_write(MCP_RTS_TX1);
     6a4:	82 e8       	ldi	r24, 0x82	; 130
     6a6:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <spi_write>
          break;
     6aa:	07 c0       	rjmp	.+14     	; 0x6ba <mcp_request_to_send+0x34>
      case 2:
          spi_write(MCP_RTS_TX2);
     6ac:	84 e8       	ldi	r24, 0x84	; 132
     6ae:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <spi_write>
          break;
     6b2:	03 c0       	rjmp	.+6      	; 0x6ba <mcp_request_to_send+0x34>
      default:
        spi_write(MCP_RTS_ALL);
     6b4:	87 e8       	ldi	r24, 0x87	; 135
     6b6:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <spi_write>
    }

    spi_master_CS(1);
     6ba:	81 e0       	ldi	r24, 0x01	; 1
     6bc:	0e 94 c8 02 	call	0x590	; 0x590 <spi_master_CS>
}
     6c0:	cf 91       	pop	r28
     6c2:	08 95       	ret

000006c4 <oled_sel_row>:
    oled_line_down(page);

    for(uint8_t j = 0; j < 128; j++){
        write_data(0b00000000);   // sets bitmask of zero to a line/page
    }
}
     6c4:	80 93 a8 03 	sts	0x03A8, r24	; 0x8003a8 <oled_position>
     6c8:	87 70       	andi	r24, 0x07	; 7
     6ca:	80 55       	subi	r24, 0x50	; 80
     6cc:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     6d0:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     6d4:	80 83       	st	Z, r24
     6d6:	08 95       	ret

000006d8 <oled_sel_col>:
     6d8:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <oled_position+0x1>
     6dc:	98 2f       	mov	r25, r24
     6de:	9f 70       	andi	r25, 0x0F	; 15
     6e0:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     6e4:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     6e8:	90 83       	st	Z, r25
     6ea:	82 95       	swap	r24
     6ec:	8f 70       	andi	r24, 0x0F	; 15
     6ee:	80 5f       	subi	r24, 0xF0	; 240
     6f0:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     6f4:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     6f8:	80 83       	st	Z, r24
     6fa:	08 95       	ret

000006fc <oled_line_down>:
     6fc:	80 55       	subi	r24, 0x50	; 80
     6fe:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     702:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     706:	80 83       	st	Z, r24
     708:	08 95       	ret

0000070a <oled_pos_set>:
     70a:	cf 93       	push	r28
     70c:	c6 2f       	mov	r28, r22
     70e:	0e 94 62 03 	call	0x6c4	; 0x6c4 <oled_sel_row>
     712:	8c 2f       	mov	r24, r28
     714:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <oled_sel_col>
     718:	cf 91       	pop	r28
     71a:	08 95       	ret

0000071c <oled_home>:
     71c:	60 e0       	ldi	r22, 0x00	; 0
     71e:	80 e0       	ldi	r24, 0x00	; 0
     720:	0e 94 85 03 	call	0x70a	; 0x70a <oled_pos_set>
     724:	08 95       	ret

00000726 <oled_clear>:
     726:	1f 93       	push	r17
     728:	cf 93       	push	r28
     72a:	df 93       	push	r29
     72c:	10 e0       	ldi	r17, 0x00	; 0
     72e:	c6 ea       	ldi	r28, 0xA6	; 166
     730:	d0 e0       	ldi	r29, 0x00	; 0
     732:	81 2f       	mov	r24, r17
     734:	0e 94 7e 03 	call	0x6fc	; 0x6fc <oled_line_down>
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	0d c0       	rjmp	.+26     	; 0x756 <oled_clear+0x30>
     73c:	84 91       	lpm	r24, Z
     73e:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <oled_write_data>
     742:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <oled_write_data+0x1>
     746:	8c 93       	st	X, r24
     748:	31 96       	adiw	r30, 0x01	; 1
     74a:	ec 17       	cp	r30, r28
     74c:	fd 07       	cpc	r31, r29
     74e:	b1 f7       	brne	.-20     	; 0x73c <oled_clear+0x16>
     750:	9f 5f       	subi	r25, 0xFF	; 255
     752:	90 38       	cpi	r25, 0x80	; 128
     754:	19 f0       	breq	.+6      	; 0x75c <oled_clear+0x36>
     756:	ee e9       	ldi	r30, 0x9E	; 158
     758:	f0 e0       	ldi	r31, 0x00	; 0
     75a:	f0 cf       	rjmp	.-32     	; 0x73c <oled_clear+0x16>
     75c:	1f 5f       	subi	r17, 0xFF	; 255
     75e:	18 30       	cpi	r17, 0x08	; 8
     760:	41 f7       	brne	.-48     	; 0x732 <oled_clear+0xc>
     762:	0e 94 8e 03 	call	0x71c	; 0x71c <oled_home>
     766:	df 91       	pop	r29
     768:	cf 91       	pop	r28
     76a:	1f 91       	pop	r17
     76c:	08 95       	ret

0000076e <OLED_init>:
     76e:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     772:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     776:	8e ea       	ldi	r24, 0xAE	; 174
     778:	80 83       	st	Z, r24
     77a:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     77e:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     782:	81 ea       	ldi	r24, 0xA1	; 161
     784:	80 83       	st	Z, r24
     786:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     78a:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     78e:	8a ed       	ldi	r24, 0xDA	; 218
     790:	80 83       	st	Z, r24
     792:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     796:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     79a:	82 e1       	ldi	r24, 0x12	; 18
     79c:	80 83       	st	Z, r24
     79e:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     7a2:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     7a6:	88 ec       	ldi	r24, 0xC8	; 200
     7a8:	80 83       	st	Z, r24
     7aa:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     7ae:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     7b2:	88 ea       	ldi	r24, 0xA8	; 168
     7b4:	80 83       	st	Z, r24
     7b6:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     7ba:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     7be:	8f e3       	ldi	r24, 0x3F	; 63
     7c0:	80 83       	st	Z, r24
     7c2:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     7c6:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     7ca:	85 ed       	ldi	r24, 0xD5	; 213
     7cc:	80 83       	st	Z, r24
     7ce:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     7d2:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     7d6:	80 e8       	ldi	r24, 0x80	; 128
     7d8:	80 83       	st	Z, r24
     7da:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     7de:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     7e2:	81 e8       	ldi	r24, 0x81	; 129
     7e4:	80 83       	st	Z, r24
     7e6:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     7ea:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     7ee:	80 e5       	ldi	r24, 0x50	; 80
     7f0:	80 83       	st	Z, r24
     7f2:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     7f6:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     7fa:	89 ed       	ldi	r24, 0xD9	; 217
     7fc:	80 83       	st	Z, r24
     7fe:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     802:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     806:	81 e2       	ldi	r24, 0x21	; 33
     808:	80 83       	st	Z, r24
     80a:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     80e:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     812:	80 e2       	ldi	r24, 0x20	; 32
     814:	80 83       	st	Z, r24
     816:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     81a:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     81e:	82 e0       	ldi	r24, 0x02	; 2
     820:	80 83       	st	Z, r24
     822:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     826:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     82a:	8b ed       	ldi	r24, 0xDB	; 219
     82c:	80 83       	st	Z, r24
     82e:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     832:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     836:	80 e3       	ldi	r24, 0x30	; 48
     838:	80 83       	st	Z, r24
     83a:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     83e:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     842:	8d ea       	ldi	r24, 0xAD	; 173
     844:	80 83       	st	Z, r24
     846:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     84a:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     84e:	10 82       	st	Z, r1
     850:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     854:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     858:	84 ea       	ldi	r24, 0xA4	; 164
     85a:	80 83       	st	Z, r24
     85c:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     860:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     864:	86 ea       	ldi	r24, 0xA6	; 166
     866:	80 83       	st	Z, r24
     868:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     86c:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     870:	8f ea       	ldi	r24, 0xAF	; 175
     872:	80 83       	st	Z, r24
     874:	0e 94 93 03 	call	0x726	; 0x726 <oled_clear>
     878:	0e 94 8e 03 	call	0x71c	; 0x71c <oled_home>
     87c:	08 95       	ret

0000087e <oled_write_character>:

void oled_write_character(uint8_t c){
     87e:	28 2f       	mov	r18, r24
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	f9 01       	movw	r30, r18
     884:	ee 0f       	add	r30, r30
     886:	ff 1f       	adc	r31, r31
     888:	ee 0f       	add	r30, r30
     88a:	ff 1f       	adc	r31, r31
     88c:	ee 0f       	add	r30, r30
     88e:	ff 1f       	adc	r31, r31
     890:	e2 56       	subi	r30, 0x62	; 98
     892:	f0 40       	sbci	r31, 0x00	; 0
     894:	22 0f       	add	r18, r18
     896:	33 1f       	adc	r19, r19
     898:	22 0f       	add	r18, r18
     89a:	33 1f       	adc	r19, r19
     89c:	22 0f       	add	r18, r18
     89e:	33 1f       	adc	r19, r19
     8a0:	2a 55       	subi	r18, 0x5A	; 90
     8a2:	30 40       	sbci	r19, 0x00	; 0
     for(uint8_t i = 0; i < 8; i++){
         write_data(pgm_read_byte( &font8[c-32][i] ) );
     8a4:	94 91       	lpm	r25, Z
    oled_clear();
    oled_home();
}

void write_data(uint8_t data){
    oled_write_data[0] = data;      // @SRAM location
     8a6:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <oled_write_data>
     8aa:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <oled_write_data+0x1>
     8ae:	9c 93       	st	X, r25
     8b0:	31 96       	adiw	r30, 0x01	; 1
        write_data(0b00000000);   // sets bitmask of zero to a line/page
    }
}

void oled_write_character(uint8_t c){
     for(uint8_t i = 0; i < 8; i++){
     8b2:	e2 17       	cp	r30, r18
     8b4:	f3 07       	cpc	r31, r19
     8b6:	b1 f7       	brne	.-20     	; 0x8a4 <oled_write_character+0x26>
         write_data(pgm_read_byte( &font8[c-32][i] ) );
     }
}
     8b8:	08 95       	ret

000008ba <oled_print>:

void oled_print(char* string){
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	cf 93       	push	r28
     8c0:	df 93       	push	r29
    int length = strlen(&string[0]);
     8c2:	fc 01       	movw	r30, r24
     8c4:	01 90       	ld	r0, Z+
     8c6:	00 20       	and	r0, r0
     8c8:	e9 f7       	brne	.-6      	; 0x8c4 <oled_print+0xa>
     8ca:	31 97       	sbiw	r30, 0x01	; 1
     8cc:	e8 1b       	sub	r30, r24
     8ce:	f9 0b       	sbc	r31, r25

    for(int i = 0; i < length; i++ ){
     8d0:	1e 16       	cp	r1, r30
     8d2:	1f 06       	cpc	r1, r31
     8d4:	54 f4       	brge	.+20     	; 0x8ea <oled_print+0x30>
     8d6:	ec 01       	movw	r28, r24
     8d8:	8c 01       	movw	r16, r24
     8da:	0e 0f       	add	r16, r30
     8dc:	1f 1f       	adc	r17, r31

        oled_write_character(string[i]);
     8de:	89 91       	ld	r24, Y+
     8e0:	0e 94 3f 04 	call	0x87e	; 0x87e <oled_write_character>
}

void oled_print(char* string){
    int length = strlen(&string[0]);

    for(int i = 0; i < length; i++ ){
     8e4:	c0 17       	cp	r28, r16
     8e6:	d1 07       	cpc	r29, r17
     8e8:	d1 f7       	brne	.-12     	; 0x8de <oled_print+0x24>

        oled_write_character(string[i]);
    }
}
     8ea:	df 91       	pop	r29
     8ec:	cf 91       	pop	r28
     8ee:	1f 91       	pop	r17
     8f0:	0f 91       	pop	r16
     8f2:	08 95       	ret

000008f4 <oled_print_arrow>:


void oled_print_arrow(uint8_t row, uint8_t col){
    oled_pos_set(row, col);
     8f4:	0e 94 85 03 	call	0x70a	; 0x70a <oled_pos_set>
    oled_clear();
    oled_home();
}

void write_data(uint8_t data){
    oled_write_data[0] = data;      // @SRAM location
     8f8:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <oled_write_data>
     8fc:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <oled_write_data+0x1>
     900:	88 e1       	ldi	r24, 0x18	; 24
     902:	80 83       	st	Z, r24
     904:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <oled_write_data>
     908:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <oled_write_data+0x1>
     90c:	80 83       	st	Z, r24
     90e:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <oled_write_data>
     912:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <oled_write_data+0x1>
     916:	9e e7       	ldi	r25, 0x7E	; 126
     918:	90 83       	st	Z, r25
     91a:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <oled_write_data>
     91e:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <oled_write_data+0x1>
     922:	9c e3       	ldi	r25, 0x3C	; 60
     924:	90 83       	st	Z, r25
     926:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <oled_write_data>
     92a:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <oled_write_data+0x1>
     92e:	80 83       	st	Z, r24
     930:	08 95       	ret

00000932 <play_game>:
    if(child == 0){
        child = current_node->elements_on_screen;
    }

    return child;
}
     932:	83 e9       	ldi	r24, 0x93	; 147
     934:	91 e0       	ldi	r25, 0x01	; 1
     936:	9f 93       	push	r25
     938:	8f 93       	push	r24
     93a:	0e 94 40 0c 	call	0x1880	; 0x1880 <printf>
     93e:	0f 90       	pop	r0
     940:	0f 90       	pop	r0
     942:	0e 94 88 02 	call	0x510	; 0x510 <joyStick_Can_Message>
     946:	fd cf       	rjmp	.-6      	; 0x942 <play_game+0x10>

00000948 <build_node>:
     948:	cf 92       	push	r12
     94a:	df 92       	push	r13
     94c:	ef 92       	push	r14
     94e:	ff 92       	push	r15
     950:	0f 93       	push	r16
     952:	1f 93       	push	r17
     954:	cf 93       	push	r28
     956:	df 93       	push	r29
     958:	ec 01       	movw	r28, r24
     95a:	69 01       	movw	r12, r18
     95c:	79 83       	std	Y+1, r23	; 0x01
     95e:	68 83       	st	Y, r22
     960:	ba 01       	movw	r22, r20
     962:	46 96       	adiw	r24, 0x16	; 22
     964:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <strcpy>
     968:	dd 8a       	std	Y+21, r13	; 0x15
     96a:	cc 8a       	std	Y+20, r12	; 0x14
     96c:	fb 8a       	std	Y+19, r15	; 0x13
     96e:	ea 8a       	std	Y+18, r14	; 0x12
     970:	a0 2f       	mov	r26, r16
     972:	b1 2f       	mov	r27, r17
     974:	fe 01       	movw	r30, r28
     976:	32 96       	adiw	r30, 0x02	; 2
     978:	ce 01       	movw	r24, r28
     97a:	42 96       	adiw	r24, 0x12	; 18
     97c:	2d 91       	ld	r18, X+
     97e:	3d 91       	ld	r19, X+
     980:	21 93       	st	Z+, r18
     982:	31 93       	st	Z+, r19
     984:	e8 17       	cp	r30, r24
     986:	f9 07       	cpc	r31, r25
     988:	c9 f7       	brne	.-14     	; 0x97c <build_node+0x34>
     98a:	df 91       	pop	r29
     98c:	cf 91       	pop	r28
     98e:	1f 91       	pop	r17
     990:	0f 91       	pop	r16
     992:	ff 90       	pop	r15
     994:	ef 90       	pop	r14
     996:	df 90       	pop	r13
     998:	cf 90       	pop	r12
     99a:	08 95       	ret

0000099c <go_up>:
     99c:	dc 01       	movw	r26, r24
     99e:	ed 91       	ld	r30, X+
     9a0:	fc 91       	ld	r31, X
     9a2:	20 81       	ld	r18, Z
     9a4:	31 81       	ldd	r19, Z+1	; 0x01
     9a6:	21 15       	cp	r18, r1
     9a8:	31 05       	cpc	r19, r1
     9aa:	59 f0       	breq	.+22     	; 0x9c2 <go_up+0x26>
     9ac:	fc 01       	movw	r30, r24
     9ae:	31 83       	std	Z+1, r19	; 0x01
     9b0:	20 83       	st	Z, r18
     9b2:	87 ea       	ldi	r24, 0xA7	; 167
     9b4:	91 e0       	ldi	r25, 0x01	; 1
     9b6:	9f 93       	push	r25
     9b8:	8f 93       	push	r24
     9ba:	0e 94 40 0c 	call	0x1880	; 0x1880 <printf>
     9be:	0f 90       	pop	r0
     9c0:	0f 90       	pop	r0
     9c2:	08 95       	ret

000009c4 <go_down>:
     9c4:	fc 01       	movw	r30, r24
     9c6:	a0 81       	ld	r26, Z
     9c8:	b1 81       	ldd	r27, Z+1	; 0x01
     9ca:	fb 01       	movw	r30, r22
     9cc:	ee 0f       	add	r30, r30
     9ce:	ff 1f       	adc	r31, r31
     9d0:	ea 0f       	add	r30, r26
     9d2:	fb 1f       	adc	r31, r27
     9d4:	20 81       	ld	r18, Z
     9d6:	31 81       	ldd	r19, Z+1	; 0x01
     9d8:	21 15       	cp	r18, r1
     9da:	31 05       	cpc	r19, r1
     9dc:	41 f0       	breq	.+16     	; 0x9ee <go_down+0x2a>
     9de:	fc 01       	movw	r30, r24
     9e0:	31 83       	std	Z+1, r19	; 0x01
     9e2:	20 83       	st	Z, r18
     9e4:	8c ea       	ldi	r24, 0xAC	; 172
     9e6:	91 e0       	ldi	r25, 0x01	; 1
     9e8:	0e 94 56 0c 	call	0x18ac	; 0x18ac <puts>
     9ec:	08 95       	ret
     9ee:	54 96       	adiw	r26, 0x14	; 20
     9f0:	ed 91       	ld	r30, X+
     9f2:	fc 91       	ld	r31, X
     9f4:	55 97       	sbiw	r26, 0x15	; 21
     9f6:	30 97       	sbiw	r30, 0x00	; 0
     9f8:	31 f0       	breq	.+12     	; 0xa06 <go_down+0x42>
     9fa:	09 95       	icall
     9fc:	88 eb       	ldi	r24, 0xB8	; 184
     9fe:	91 e0       	ldi	r25, 0x01	; 1
     a00:	0e 94 56 0c 	call	0x18ac	; 0x18ac <puts>
     a04:	08 95       	ret
     a06:	8e ec       	ldi	r24, 0xCE	; 206
     a08:	91 e0       	ldi	r25, 0x01	; 1
     a0a:	0e 94 56 0c 	call	0x18ac	; 0x18ac <puts>
     a0e:	08 95       	ret

00000a10 <wait_for_action>:
     a10:	cf 93       	push	r28
     a12:	8a ed       	ldi	r24, 0xDA	; 218
     a14:	91 e0       	ldi	r25, 0x01	; 1
     a16:	0e 94 56 0c 	call	0x18ac	; 0x18ac <puts>
     a1a:	0e 94 c1 07 	call	0xf82	; 0xf82 <joystick_direction>
     a1e:	84 30       	cpi	r24, 0x04	; 4
     a20:	29 f4       	brne	.+10     	; 0xa2c <wait_for_action+0x1c>
     a22:	82 e0       	ldi	r24, 0x02	; 2
     a24:	0e 94 87 08 	call	0x110e	; 0x110e <usb_button_pushed>
     a28:	88 23       	and	r24, r24
     a2a:	b9 f3       	breq	.-18     	; 0xa1a <wait_for_action+0xa>
     a2c:	0e 94 c1 07 	call	0xf82	; 0xf82 <joystick_direction>
     a30:	c8 2f       	mov	r28, r24
     a32:	82 30       	cpi	r24, 0x02	; 2
     a34:	29 f4       	brne	.+10     	; 0xa40 <wait_for_action+0x30>
     a36:	80 ef       	ldi	r24, 0xF0	; 240
     a38:	91 e0       	ldi	r25, 0x01	; 1
     a3a:	0e 94 56 0c 	call	0x18ac	; 0x18ac <puts>
     a3e:	16 c0       	rjmp	.+44     	; 0xa6c <wait_for_action+0x5c>
     a40:	0e 94 c1 07 	call	0xf82	; 0xf82 <joystick_direction>
     a44:	c8 2f       	mov	r28, r24
     a46:	83 30       	cpi	r24, 0x03	; 3
     a48:	89 f0       	breq	.+34     	; 0xa6c <wait_for_action+0x5c>
     a4a:	0e 94 c1 07 	call	0xf82	; 0xf82 <joystick_direction>
     a4e:	c8 2f       	mov	r28, r24
     a50:	81 30       	cpi	r24, 0x01	; 1
     a52:	61 f0       	breq	.+24     	; 0xa6c <wait_for_action+0x5c>
     a54:	0e 94 c1 07 	call	0xf82	; 0xf82 <joystick_direction>
     a58:	c8 2f       	mov	r28, r24
     a5a:	88 23       	and	r24, r24
     a5c:	39 f0       	breq	.+14     	; 0xa6c <wait_for_action+0x5c>
     a5e:	82 e0       	ldi	r24, 0x02	; 2
     a60:	0e 94 87 08 	call	0x110e	; 0x110e <usb_button_pushed>
     a64:	81 11       	cpse	r24, r1
     a66:	01 c0       	rjmp	.+2      	; 0xa6a <wait_for_action+0x5a>
     a68:	02 c0       	rjmp	.+4      	; 0xa6e <wait_for_action+0x5e>
     a6a:	c5 e0       	ldi	r28, 0x05	; 5
     a6c:	8c 2f       	mov	r24, r28
     a6e:	cf 91       	pop	r28
     a70:	08 95       	ret

00000a72 <wait_for_neutral_joystick_position>:
     a72:	0e 94 c1 07 	call	0xf82	; 0xf82 <joystick_direction>
     a76:	84 30       	cpi	r24, 0x04	; 4
     a78:	e1 f7       	brne	.-8      	; 0xa72 <wait_for_neutral_joystick_position>
     a7a:	08 95       	ret

00000a7c <update_element_down>:

int update_element_down(Node *current_node, int child){

    child++;
     a7c:	6f 5f       	subi	r22, 0xFF	; 255
     a7e:	7f 4f       	sbci	r23, 0xFF	; 255

    if(child == current_node->elements_on_screen + 1){
     a80:	fc 01       	movw	r30, r24
     a82:	82 89       	ldd	r24, Z+18	; 0x12
     a84:	93 89       	ldd	r25, Z+19	; 0x13
     a86:	01 96       	adiw	r24, 0x01	; 1
     a88:	68 17       	cp	r22, r24
     a8a:	79 07       	cpc	r23, r25
     a8c:	11 f4       	brne	.+4      	; 0xa92 <update_element_down+0x16>
        child = 1;
     a8e:	61 e0       	ldi	r22, 0x01	; 1
     a90:	70 e0       	ldi	r23, 0x00	; 0
    }

    return child;
    
}
     a92:	cb 01       	movw	r24, r22
     a94:	08 95       	ret

00000a96 <print_selecting_arrow>:

}


void print_selecting_arrow(int child){
    oled_print_arrow(child - 1, 5);
     a96:	65 e0       	ldi	r22, 0x05	; 5
     a98:	81 50       	subi	r24, 0x01	; 1
     a9a:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <oled_print_arrow>
     a9e:	08 95       	ret

00000aa0 <print_main_menu_objects>:
        wait_for_neutral_joystick_position();
    }
}


void print_main_menu_objects(int child){
     aa0:	0f 93       	push	r16
     aa2:	1f 93       	push	r17
     aa4:	cf 93       	push	r28
     aa6:	df 93       	push	r29
     aa8:	cd b7       	in	r28, 0x3d	; 61
     aaa:	de b7       	in	r29, 0x3e	; 62
     aac:	2b 97       	sbiw	r28, 0x0b	; 11
     aae:	0f b6       	in	r0, 0x3f	; 63
     ab0:	f8 94       	cli
     ab2:	de bf       	out	0x3e, r29	; 62
     ab4:	0f be       	out	0x3f, r0	; 63
     ab6:	cd bf       	out	0x3d, r28	; 61
     ab8:	8c 01       	movw	r16, r24
    char line1[] = "play";
     aba:	85 e0       	ldi	r24, 0x05	; 5
     abc:	e9 ef       	ldi	r30, 0xF9	; 249
     abe:	f1 e0       	ldi	r31, 0x01	; 1
     ac0:	de 01       	movw	r26, r28
     ac2:	11 96       	adiw	r26, 0x01	; 1
     ac4:	01 90       	ld	r0, Z+
     ac6:	0d 92       	st	X+, r0
     ac8:	8a 95       	dec	r24
     aca:	e1 f7       	brne	.-8      	; 0xac4 <print_main_menu_objects+0x24>
    char line2[] = "Score";
     acc:	86 e0       	ldi	r24, 0x06	; 6
     ace:	ee ef       	ldi	r30, 0xFE	; 254
     ad0:	f1 e0       	ldi	r31, 0x01	; 1
     ad2:	de 01       	movw	r26, r28
     ad4:	16 96       	adiw	r26, 0x06	; 6
     ad6:	01 90       	ld	r0, Z+
     ad8:	0d 92       	st	X+, r0
     ada:	8a 95       	dec	r24
     adc:	e1 f7       	brne	.-8      	; 0xad6 <print_main_menu_objects+0x36>

    oled_pos_set(0, 12);
     ade:	6c e0       	ldi	r22, 0x0C	; 12
     ae0:	80 e0       	ldi	r24, 0x00	; 0
     ae2:	0e 94 85 03 	call	0x70a	; 0x70a <oled_pos_set>
    oled_print(&line1);
     ae6:	ce 01       	movw	r24, r28
     ae8:	01 96       	adiw	r24, 0x01	; 1
     aea:	0e 94 5d 04 	call	0x8ba	; 0x8ba <oled_print>

    oled_pos_set(1, 12);
     aee:	6c e0       	ldi	r22, 0x0C	; 12
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	0e 94 85 03 	call	0x70a	; 0x70a <oled_pos_set>
    oled_print(&line2);
     af6:	ce 01       	movw	r24, r28
     af8:	06 96       	adiw	r24, 0x06	; 6
     afa:	0e 94 5d 04 	call	0x8ba	; 0x8ba <oled_print>

    print_selecting_arrow(child);       //Draw the arrow that selects the preferable option.
     afe:	c8 01       	movw	r24, r16
     b00:	0e 94 4b 05 	call	0xa96	; 0xa96 <print_selecting_arrow>
    
}
     b04:	2b 96       	adiw	r28, 0x0b	; 11
     b06:	0f b6       	in	r0, 0x3f	; 63
     b08:	f8 94       	cli
     b0a:	de bf       	out	0x3e, r29	; 62
     b0c:	0f be       	out	0x3f, r0	; 63
     b0e:	cd bf       	out	0x3d, r28	; 61
     b10:	df 91       	pop	r29
     b12:	cf 91       	pop	r28
     b14:	1f 91       	pop	r17
     b16:	0f 91       	pop	r16
     b18:	08 95       	ret

00000b1a <print_new_game_menu_objects>:

void print_new_game_menu_objects(int child){
     b1a:	0f 93       	push	r16
     b1c:	1f 93       	push	r17
     b1e:	cf 93       	push	r28
     b20:	df 93       	push	r29
     b22:	cd b7       	in	r28, 0x3d	; 61
     b24:	de b7       	in	r29, 0x3e	; 62
     b26:	2b 97       	sbiw	r28, 0x0b	; 11
     b28:	0f b6       	in	r0, 0x3f	; 63
     b2a:	f8 94       	cli
     b2c:	de bf       	out	0x3e, r29	; 62
     b2e:	0f be       	out	0x3f, r0	; 63
     b30:	cd bf       	out	0x3d, r28	; 61
     b32:	8c 01       	movw	r16, r24

    char line1[] = "Start game";
     b34:	8b e0       	ldi	r24, 0x0B	; 11
     b36:	e4 e0       	ldi	r30, 0x04	; 4
     b38:	f2 e0       	ldi	r31, 0x02	; 2
     b3a:	de 01       	movw	r26, r28
     b3c:	11 96       	adiw	r26, 0x01	; 1
     b3e:	01 90       	ld	r0, Z+
     b40:	0d 92       	st	X+, r0
     b42:	8a 95       	dec	r24
     b44:	e1 f7       	brne	.-8      	; 0xb3e <print_new_game_menu_objects+0x24>

    oled_pos_set(0, 12);
     b46:	6c e0       	ldi	r22, 0x0C	; 12
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	0e 94 85 03 	call	0x70a	; 0x70a <oled_pos_set>
    oled_print(&line1);
     b4e:	ce 01       	movw	r24, r28
     b50:	01 96       	adiw	r24, 0x01	; 1
     b52:	0e 94 5d 04 	call	0x8ba	; 0x8ba <oled_print>

    print_selecting_arrow(child);
     b56:	c8 01       	movw	r24, r16
     b58:	0e 94 4b 05 	call	0xa96	; 0xa96 <print_selecting_arrow>
}
     b5c:	2b 96       	adiw	r28, 0x0b	; 11
     b5e:	0f b6       	in	r0, 0x3f	; 63
     b60:	f8 94       	cli
     b62:	de bf       	out	0x3e, r29	; 62
     b64:	0f be       	out	0x3f, r0	; 63
     b66:	cd bf       	out	0x3d, r28	; 61
     b68:	df 91       	pop	r29
     b6a:	cf 91       	pop	r28
     b6c:	1f 91       	pop	r17
     b6e:	0f 91       	pop	r16
     b70:	08 95       	ret

00000b72 <print_score_menu_objects>:

void print_score_menu_objects(int child){
     b72:	0f 93       	push	r16
     b74:	1f 93       	push	r17
     b76:	cf 93       	push	r28
     b78:	df 93       	push	r29
     b7a:	cd b7       	in	r28, 0x3d	; 61
     b7c:	de b7       	in	r29, 0x3e	; 62
     b7e:	2a 97       	sbiw	r28, 0x0a	; 10
     b80:	0f b6       	in	r0, 0x3f	; 63
     b82:	f8 94       	cli
     b84:	de bf       	out	0x3e, r29	; 62
     b86:	0f be       	out	0x3f, r0	; 63
     b88:	cd bf       	out	0x3d, r28	; 61
     b8a:	8c 01       	movw	r16, r24

    char line1[] = "Top score";
     b8c:	8a e0       	ldi	r24, 0x0A	; 10
     b8e:	ef e0       	ldi	r30, 0x0F	; 15
     b90:	f2 e0       	ldi	r31, 0x02	; 2
     b92:	de 01       	movw	r26, r28
     b94:	11 96       	adiw	r26, 0x01	; 1
     b96:	01 90       	ld	r0, Z+
     b98:	0d 92       	st	X+, r0
     b9a:	8a 95       	dec	r24
     b9c:	e1 f7       	brne	.-8      	; 0xb96 <print_score_menu_objects+0x24>

    oled_pos_set(0, 12);
     b9e:	6c e0       	ldi	r22, 0x0C	; 12
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	0e 94 85 03 	call	0x70a	; 0x70a <oled_pos_set>
    oled_print(&line1);
     ba6:	ce 01       	movw	r24, r28
     ba8:	01 96       	adiw	r24, 0x01	; 1
     baa:	0e 94 5d 04 	call	0x8ba	; 0x8ba <oled_print>

    print_selecting_arrow(child);
     bae:	c8 01       	movw	r24, r16
     bb0:	0e 94 4b 05 	call	0xa96	; 0xa96 <print_selecting_arrow>

}
     bb4:	2a 96       	adiw	r28, 0x0a	; 10
     bb6:	0f b6       	in	r0, 0x3f	; 63
     bb8:	f8 94       	cli
     bba:	de bf       	out	0x3e, r29	; 62
     bbc:	0f be       	out	0x3f, r0	; 63
     bbe:	cd bf       	out	0x3d, r28	; 61
     bc0:	df 91       	pop	r29
     bc2:	cf 91       	pop	r28
     bc4:	1f 91       	pop	r17
     bc6:	0f 91       	pop	r16
     bc8:	08 95       	ret

00000bca <update_screen>:
}
void wait_for_neutral_joystick_position(){
    while(joystick_direction() != NEUTRAL);
}

void update_screen(Node *current_node, int child){
     bca:	cf 93       	push	r28
     bcc:	df 93       	push	r29
     bce:	eb 01       	movw	r28, r22

    if(((*current_node).name[1]) == 'a'){
     bd0:	fc 01       	movw	r30, r24
     bd2:	87 89       	ldd	r24, Z+23	; 0x17
     bd4:	81 36       	cpi	r24, 0x61	; 97
     bd6:	41 f4       	brne	.+16     	; 0xbe8 <update_screen+0x1e>
        printf("Update  MAIN_MENU screen\t\n");
     bd8:	89 e1       	ldi	r24, 0x19	; 25
     bda:	92 e0       	ldi	r25, 0x02	; 2
     bdc:	0e 94 56 0c 	call	0x18ac	; 0x18ac <puts>
        print_main_menu_objects(child);
     be0:	ce 01       	movw	r24, r28
     be2:	0e 94 50 05 	call	0xaa0	; 0xaa0 <print_main_menu_objects>
     be6:	0f c0       	rjmp	.+30     	; 0xc06 <update_screen+0x3c>
        //Skal oppdatere skjermen som passer til main-menu. I tillegg skal pilen howre over riktg barn.
    }
    else if(((*current_node).name[1]) == 'l'){
     be8:	8c 36       	cpi	r24, 0x6C	; 108
     bea:	41 f4       	brne	.+16     	; 0xbfc <update_screen+0x32>
        printf("Update PLAY menu\t\n");
     bec:	83 e3       	ldi	r24, 0x33	; 51
     bee:	92 e0       	ldi	r25, 0x02	; 2
     bf0:	0e 94 56 0c 	call	0x18ac	; 0x18ac <puts>
        print_new_game_menu_objects(child);
     bf4:	ce 01       	movw	r24, r28
     bf6:	0e 94 8d 05 	call	0xb1a	; 0xb1a <print_new_game_menu_objects>
     bfa:	05 c0       	rjmp	.+10     	; 0xc06 <update_screen+0x3c>
    }
    else if(((*current_node).name[1]) == 'h'){
     bfc:	88 36       	cpi	r24, 0x68	; 104
     bfe:	19 f4       	brne	.+6      	; 0xc06 <update_screen+0x3c>
        print_score_menu_objects(child);
     c00:	cb 01       	movw	r24, r22
     c02:	0e 94 b9 05 	call	0xb72	; 0xb72 <print_score_menu_objects>
    }

}
     c06:	df 91       	pop	r29
     c08:	cf 91       	pop	r28
     c0a:	08 95       	ret

00000c0c <menu>:
    return child;
    
}
//Node Main_menu, Score, Play, Settings, Difficulty, Debugging, *current_node;

void menu(){
     c0c:	cf 93       	push	r28
     c0e:	df 93       	push	r29
     c10:	cd b7       	in	r28, 0x3d	; 61
     c12:	de b7       	in	r29, 0x3e	; 62
     c14:	e0 97       	sbiw	r28, 0x30	; 48
     c16:	0f b6       	in	r0, 0x3f	; 63
     c18:	f8 94       	cli
     c1a:	de bf       	out	0x3e, r29	; 62
     c1c:	0f be       	out	0x3f, r0	; 63
     c1e:	cd bf       	out	0x3d, r28	; 61

    static Node Main_menu, Score, Play, Settings, Difficulty, Debugging, *current_node;

    current_node = &Main_menu; //Startnoden
     c20:	84 e7       	ldi	r24, 0x74	; 116
     c22:	93 e0       	ldi	r25, 0x03	; 3
     c24:	90 93 9f 03 	sts	0x039F, r25	; 0x80039f <current_node.2439+0x1>
     c28:	80 93 9e 03 	sts	0x039E, r24	; 0x80039e <current_node.2439>
    DIRECTION action; //Handling som er gjort på Joysticken
    int child = 1; //Barnet som man "howrer" over på skjermen. Default er øverste barnet.

    //Bygger nodestrukturen
    Node* children1[8] = {&Play, &Score,0 ,0 ,0 ,0 ,0 ,0};
     c2c:	80 e1       	ldi	r24, 0x10	; 16
     c2e:	ea e0       	ldi	r30, 0x0A	; 10
     c30:	f1 e0       	ldi	r31, 0x01	; 1
     c32:	de 01       	movw	r26, r28
     c34:	11 96       	adiw	r26, 0x01	; 1
     c36:	01 90       	ld	r0, Z+
     c38:	0d 92       	st	X+, r0
     c3a:	8a 95       	dec	r24
     c3c:	e1 f7       	brne	.-8      	; 0xc36 <menu+0x2a>
    Node* children2[8] = {0, 0, 0, 0, 0, 0, 0, 0};
     c3e:	80 e1       	ldi	r24, 0x10	; 16
     c40:	5e 01       	movw	r10, r28
     c42:	91 e1       	ldi	r25, 0x11	; 17
     c44:	a9 0e       	add	r10, r25
     c46:	b1 1c       	adc	r11, r1
     c48:	f5 01       	movw	r30, r10
     c4a:	98 2f       	mov	r25, r24
     c4c:	11 92       	st	Z+, r1
     c4e:	9a 95       	dec	r25
     c50:	e9 f7       	brne	.-6      	; 0xc4c <menu+0x40>
    Node* children3[8] = {0, 0, 0, 0, 0, 0, 0, 0};
     c52:	6e 01       	movw	r12, r28
     c54:	e1 e2       	ldi	r30, 0x21	; 33
     c56:	ce 0e       	add	r12, r30
     c58:	d1 1c       	adc	r13, r1
     c5a:	f6 01       	movw	r30, r12
     c5c:	11 92       	st	Z+, r1
     c5e:	8a 95       	dec	r24
     c60:	e9 f7       	brne	.-6      	; 0xc5c <menu+0x50>



    build_node(&Main_menu, NULL, "Main menu", NULL, &children1,2);
     c62:	68 94       	set
     c64:	ee 24       	eor	r14, r14
     c66:	e1 f8       	bld	r14, 1
     c68:	f1 2c       	mov	r15, r1
     c6a:	8e 01       	movw	r16, r28
     c6c:	0f 5f       	subi	r16, 0xFF	; 255
     c6e:	1f 4f       	sbci	r17, 0xFF	; 255
     c70:	20 e0       	ldi	r18, 0x00	; 0
     c72:	30 e0       	ldi	r19, 0x00	; 0
     c74:	45 e4       	ldi	r20, 0x45	; 69
     c76:	52 e0       	ldi	r21, 0x02	; 2
     c78:	60 e0       	ldi	r22, 0x00	; 0
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	84 e7       	ldi	r24, 0x74	; 116
     c7e:	93 e0       	ldi	r25, 0x03	; 3
     c80:	0e 94 a4 04 	call	0x948	; 0x948 <build_node>
    build_node(&Play, &Main_menu, "Play game", play_game, &children2,1);
     c84:	ee 24       	eor	r14, r14
     c86:	e3 94       	inc	r14
     c88:	f1 2c       	mov	r15, r1
     c8a:	85 01       	movw	r16, r10
     c8c:	29 e9       	ldi	r18, 0x99	; 153
     c8e:	34 e0       	ldi	r19, 0x04	; 4
     c90:	4f e4       	ldi	r20, 0x4F	; 79
     c92:	52 e0       	ldi	r21, 0x02	; 2
     c94:	64 e7       	ldi	r22, 0x74	; 116
     c96:	73 e0       	ldi	r23, 0x03	; 3
     c98:	8a e4       	ldi	r24, 0x4A	; 74
     c9a:	93 e0       	ldi	r25, 0x03	; 3
     c9c:	0e 94 a4 04 	call	0x948	; 0x948 <build_node>
    build_node(&Score, &Main_menu, "Show score", NULL, &children3,8);
     ca0:	68 94       	set
     ca2:	ee 24       	eor	r14, r14
     ca4:	e3 f8       	bld	r14, 3
     ca6:	f1 2c       	mov	r15, r1
     ca8:	86 01       	movw	r16, r12
     caa:	20 e0       	ldi	r18, 0x00	; 0
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	49 e5       	ldi	r20, 0x59	; 89
     cb0:	52 e0       	ldi	r21, 0x02	; 2
     cb2:	64 e7       	ldi	r22, 0x74	; 116
     cb4:	73 e0       	ldi	r23, 0x03	; 3
     cb6:	80 e2       	ldi	r24, 0x20	; 32
     cb8:	93 e0       	ldi	r25, 0x03	; 3
     cba:	0e 94 a4 04 	call	0x948	; 0x948 <build_node>

    update_screen(current_node, child);
     cbe:	61 e0       	ldi	r22, 0x01	; 1
     cc0:	70 e0       	ldi	r23, 0x00	; 0
     cc2:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <current_node.2439>
     cc6:	90 91 9f 03 	lds	r25, 0x039F	; 0x80039f <current_node.2439+0x1>
     cca:	0e 94 e5 05 	call	0xbca	; 0xbca <update_screen>

    static Node Main_menu, Score, Play, Settings, Difficulty, Debugging, *current_node;

    current_node = &Main_menu; //Startnoden
    DIRECTION action; //Handling som er gjort på Joysticken
    int child = 1; //Barnet som man "howrer" over på skjermen. Default er øverste barnet.
     cce:	ee 24       	eor	r14, r14
     cd0:	e3 94       	inc	r14
     cd2:	f1 2c       	mov	r15, r1
          default:
              break;
        }

        printf("After switch\t\n");
        printf("Nodenavn %c \t\n",((*current_node).name[0]));
     cd4:	0f 2e       	mov	r0, r31
     cd6:	f3 eb       	ldi	r31, 0xB3	; 179
     cd8:	cf 2e       	mov	r12, r31
     cda:	f2 e0       	ldi	r31, 0x02	; 2
     cdc:	df 2e       	mov	r13, r31
     cde:	f0 2d       	mov	r31, r0
    build_node(&Score, &Main_menu, "Show score", NULL, &children3,8);

    update_screen(current_node, child);

    while(1){
        printf("Før Wait for action\t\n");
     ce0:	84 e6       	ldi	r24, 0x64	; 100
     ce2:	92 e0       	ldi	r25, 0x02	; 2
     ce4:	0e 94 56 0c 	call	0x18ac	; 0x18ac <puts>
        action = wait_for_action();  //Wait for user to move the joystick
     ce8:	0e 94 08 05 	call	0xa10	; 0xa10 <wait_for_action>
     cec:	18 2f       	mov	r17, r24
        printf("Før oled clear\t\n");
     cee:	8a e7       	ldi	r24, 0x7A	; 122
     cf0:	92 e0       	ldi	r25, 0x02	; 2
     cf2:	0e 94 56 0c 	call	0x18ac	; 0x18ac <puts>
        oled_clear();  //Clears the screen.
     cf6:	0e 94 93 03 	call	0x726	; 0x726 <oled_clear>

        printf("Før switch\t\n");
     cfa:	8b e8       	ldi	r24, 0x8B	; 139
     cfc:	92 e0       	ldi	r25, 0x02	; 2
     cfe:	0e 94 56 0c 	call	0x18ac	; 0x18ac <puts>
        switch(action)
     d02:	11 30       	cpi	r17, 0x01	; 1
     d04:	31 f1       	breq	.+76     	; 0xd52 <menu+0x146>
     d06:	c8 f0       	brcs	.+50     	; 0xd3a <menu+0x12e>
     d08:	12 30       	cpi	r17, 0x02	; 2
     d0a:	19 f0       	breq	.+6      	; 0xd12 <menu+0x106>
     d0c:	13 30       	cpi	r17, 0x03	; 3
     d0e:	61 f0       	breq	.+24     	; 0xd28 <menu+0x11c>
     d10:	2c c0       	rjmp	.+88     	; 0xd6a <menu+0x15e>

}

int update_element_up(Node *current_node, int child){

    child--;
     d12:	f1 e0       	ldi	r31, 0x01	; 1
     d14:	ef 1a       	sub	r14, r31
     d16:	f1 08       	sbc	r15, r1

    if(child == 0){
     d18:	41 f5       	brne	.+80     	; 0xd6a <menu+0x15e>
        child = current_node->elements_on_screen;
     d1a:	e0 91 9e 03 	lds	r30, 0x039E	; 0x80039e <current_node.2439>
     d1e:	f0 91 9f 03 	lds	r31, 0x039F	; 0x80039f <current_node.2439+0x1>
     d22:	e2 88       	ldd	r14, Z+18	; 0x12
     d24:	f3 88       	ldd	r15, Z+19	; 0x13
     d26:	21 c0       	rjmp	.+66     	; 0xd6a <menu+0x15e>
          case UP:
                //update_screen(current_node, child);
                child = update_element_up(current_node, child);
              break;
          case DOWN:
                child = update_element_down(current_node, child);
     d28:	b7 01       	movw	r22, r14
     d2a:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <current_node.2439>
     d2e:	90 91 9f 03 	lds	r25, 0x039F	; 0x80039f <current_node.2439+0x1>
     d32:	0e 94 3e 05 	call	0xa7c	; 0xa7c <update_element_down>
     d36:	7c 01       	movw	r14, r24
              break;
     d38:	18 c0       	rjmp	.+48     	; 0xd6a <menu+0x15e>
          case LEFT:
                printf("Left\t\n");
     d3a:	88 e9       	ldi	r24, 0x98	; 152
     d3c:	92 e0       	ldi	r25, 0x02	; 2
     d3e:	0e 94 56 0c 	call	0x18ac	; 0x18ac <puts>
                go_up(&current_node);
     d42:	8e e9       	ldi	r24, 0x9E	; 158
     d44:	93 e0       	ldi	r25, 0x03	; 3
     d46:	0e 94 ce 04 	call	0x99c	; 0x99c <go_up>
                child = 1;
     d4a:	ee 24       	eor	r14, r14
     d4c:	e3 94       	inc	r14
     d4e:	f1 2c       	mov	r15, r1
              break;
     d50:	0c c0       	rjmp	.+24     	; 0xd6a <menu+0x15e>
          case RIGHT:
                printf("RIGHT\t\n");
     d52:	8e e9       	ldi	r24, 0x9E	; 158
     d54:	92 e0       	ldi	r25, 0x02	; 2
     d56:	0e 94 56 0c 	call	0x18ac	; 0x18ac <puts>
                go_down(&current_node, child);
     d5a:	b7 01       	movw	r22, r14
     d5c:	8e e9       	ldi	r24, 0x9E	; 158
     d5e:	93 e0       	ldi	r25, 0x03	; 3
     d60:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <go_down>
                child = 1;
     d64:	ee 24       	eor	r14, r14
     d66:	e3 94       	inc	r14
     d68:	f1 2c       	mov	r15, r1
              break;
          default:
              break;
        }

        printf("After switch\t\n");
     d6a:	85 ea       	ldi	r24, 0xA5	; 165
     d6c:	92 e0       	ldi	r25, 0x02	; 2
     d6e:	0e 94 56 0c 	call	0x18ac	; 0x18ac <puts>
        printf("Nodenavn %c \t\n",((*current_node).name[0]));
     d72:	e0 91 9e 03 	lds	r30, 0x039E	; 0x80039e <current_node.2439>
     d76:	f0 91 9f 03 	lds	r31, 0x039F	; 0x80039f <current_node.2439+0x1>
     d7a:	86 89       	ldd	r24, Z+22	; 0x16
     d7c:	1f 92       	push	r1
     d7e:	8f 93       	push	r24
     d80:	df 92       	push	r13
     d82:	cf 92       	push	r12
     d84:	0e 94 40 0c 	call	0x1880	; 0x1880 <printf>
        update_screen(current_node, child);
     d88:	b7 01       	movw	r22, r14
     d8a:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <current_node.2439>
     d8e:	90 91 9f 03 	lds	r25, 0x039F	; 0x80039f <current_node.2439+0x1>
     d92:	0e 94 e5 05 	call	0xbca	; 0xbca <update_screen>
        wait_for_neutral_joystick_position();
     d96:	0e 94 39 05 	call	0xa72	; 0xa72 <wait_for_neutral_joystick_position>
    }
     d9a:	0f 90       	pop	r0
     d9c:	0f 90       	pop	r0
     d9e:	0f 90       	pop	r0
     da0:	0f 90       	pop	r0
     da2:	9e cf       	rjmp	.-196    	; 0xce0 <menu+0xd4>

00000da4 <pos_read>:
#include <avr/io.h>
#include <stdio.h>
#include "pos_read.h"


void pos_read(position* pos){
     da4:	8f 92       	push	r8
     da6:	9f 92       	push	r9
     da8:	af 92       	push	r10
     daa:	bf 92       	push	r11
     dac:	cf 92       	push	r12
     dae:	df 92       	push	r13
     db0:	ef 92       	push	r14
     db2:	ff 92       	push	r15
     db4:	0f 93       	push	r16
     db6:	1f 93       	push	r17
     db8:	cf 93       	push	r28
     dba:	df 93       	push	r29
     dbc:	7c 01       	movw	r14, r24

    int ADC_Y = ADC_read(0);
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ADC_read>
     dc4:	c8 2f       	mov	r28, r24
     dc6:	d0 e0       	ldi	r29, 0x00	; 0
    int ADC_X = ADC_read(1);
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ADC_read>
     dce:	68 2f       	mov	r22, r24
     dd0:	70 e0       	ldi	r23, 0x00	; 0

    // X read

    if((ADC_X >= (P_cal.center_X - 10)) && (ADC_X <= (P_cal.center_X + 10))){ //Deadspace for joystick
     dd2:	00 91 a0 03 	lds	r16, 0x03A0	; 0x8003a0 <P_cal>
     dd6:	10 91 a1 03 	lds	r17, 0x03A1	; 0x8003a1 <P_cal+0x1>
     dda:	c8 01       	movw	r24, r16
     ddc:	0a 97       	sbiw	r24, 0x0a	; 10
     dde:	68 17       	cp	r22, r24
     de0:	79 07       	cpc	r23, r25
     de2:	0c f4       	brge	.+2      	; 0xde6 <pos_read+0x42>
     de4:	b4 c0       	rjmp	.+360    	; 0xf4e <pos_read+0x1aa>
     de6:	44 96       	adiw	r24, 0x14	; 20
     de8:	86 17       	cp	r24, r22
     dea:	97 07       	cpc	r25, r23
     dec:	0c f0       	brlt	.+2      	; 0xdf0 <pos_read+0x4c>
     dee:	4c c0       	rjmp	.+152    	; 0xe88 <pos_read+0xe4>
        ADC_X = 0;
    }
    else if(ADC_X > (P_cal.center_X + 10)){
        ADC_X = (ADC_X - P_cal.center_X) * 100.0 / (255.0 - P_cal.center_X);  //
     df0:	60 1b       	sub	r22, r16
     df2:	71 0b       	sbc	r23, r17
     df4:	07 2e       	mov	r0, r23
     df6:	00 0c       	add	r0, r0
     df8:	88 0b       	sbc	r24, r24
     dfa:	99 0b       	sbc	r25, r25
     dfc:	0e 94 99 0a 	call	0x1532	; 0x1532 <__floatsisf>
     e00:	20 e0       	ldi	r18, 0x00	; 0
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	48 ec       	ldi	r20, 0xC8	; 200
     e06:	52 e4       	ldi	r21, 0x42	; 66
     e08:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__mulsf3>
     e0c:	4b 01       	movw	r8, r22
     e0e:	5c 01       	movw	r10, r24
     e10:	b8 01       	movw	r22, r16
     e12:	11 0f       	add	r17, r17
     e14:	88 0b       	sbc	r24, r24
     e16:	99 0b       	sbc	r25, r25
     e18:	0e 94 99 0a 	call	0x1532	; 0x1532 <__floatsisf>
     e1c:	9b 01       	movw	r18, r22
     e1e:	ac 01       	movw	r20, r24
     e20:	60 e0       	ldi	r22, 0x00	; 0
     e22:	70 e0       	ldi	r23, 0x00	; 0
     e24:	8f e7       	ldi	r24, 0x7F	; 127
     e26:	93 e4       	ldi	r25, 0x43	; 67
     e28:	0e 94 0b 09 	call	0x1216	; 0x1216 <__subsf3>
     e2c:	9b 01       	movw	r18, r22
     e2e:	ac 01       	movw	r20, r24
     e30:	c5 01       	movw	r24, r10
     e32:	b4 01       	movw	r22, r8
     e34:	0e 94 ef 09 	call	0x13de	; 0x13de <__divsf3>
     e38:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <__fixsfsi>
     e3c:	6b 01       	movw	r12, r22
     e3e:	26 c0       	rjmp	.+76     	; 0xe8c <pos_read+0xe8>
    }

    else if (ADC_X < (P_cal.center_X - 10)){
        ADC_X = (ADC_X / ((float)P_cal.center_X)) * 100 - 100;   // // Scaling when value is larger then center value
     e40:	07 2e       	mov	r0, r23
     e42:	00 0c       	add	r0, r0
     e44:	88 0b       	sbc	r24, r24
     e46:	99 0b       	sbc	r25, r25
     e48:	0e 94 99 0a 	call	0x1532	; 0x1532 <__floatsisf>
     e4c:	4b 01       	movw	r8, r22
     e4e:	5c 01       	movw	r10, r24
     e50:	b8 01       	movw	r22, r16
     e52:	11 0f       	add	r17, r17
     e54:	88 0b       	sbc	r24, r24
     e56:	99 0b       	sbc	r25, r25
     e58:	0e 94 99 0a 	call	0x1532	; 0x1532 <__floatsisf>
     e5c:	9b 01       	movw	r18, r22
     e5e:	ac 01       	movw	r20, r24
     e60:	c5 01       	movw	r24, r10
     e62:	b4 01       	movw	r22, r8
     e64:	0e 94 ef 09 	call	0x13de	; 0x13de <__divsf3>
     e68:	20 e0       	ldi	r18, 0x00	; 0
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	48 ec       	ldi	r20, 0xC8	; 200
     e6e:	52 e4       	ldi	r21, 0x42	; 66
     e70:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__mulsf3>
     e74:	20 e0       	ldi	r18, 0x00	; 0
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	48 ec       	ldi	r20, 0xC8	; 200
     e7a:	52 e4       	ldi	r21, 0x42	; 66
     e7c:	0e 94 0b 09 	call	0x1216	; 0x1216 <__subsf3>
     e80:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <__fixsfsi>
     e84:	6b 01       	movw	r12, r22
     e86:	02 c0       	rjmp	.+4      	; 0xe8c <pos_read+0xe8>
    int ADC_X = ADC_read(1);

    // X read

    if((ADC_X >= (P_cal.center_X - 10)) && (ADC_X <= (P_cal.center_X + 10))){ //Deadspace for joystick
        ADC_X = 0;
     e88:	c1 2c       	mov	r12, r1
     e8a:	d1 2c       	mov	r13, r1
        ADC_X = (ADC_X / ((float)P_cal.center_X)) * 100 - 100;   // // Scaling when value is larger then center value
    }

    // Y read

    if(ADC_Y >= (P_cal.center_Y - 10) && ADC_Y <= (P_cal.center_Y + 10)){  //Deadspace for joystick
     e8c:	00 91 a2 03 	lds	r16, 0x03A2	; 0x8003a2 <P_cal+0x2>
     e90:	10 91 a3 03 	lds	r17, 0x03A3	; 0x8003a3 <P_cal+0x3>
     e94:	c8 01       	movw	r24, r16
     e96:	0a 97       	sbiw	r24, 0x0a	; 10
     e98:	c8 17       	cp	r28, r24
     e9a:	d9 07       	cpc	r29, r25
     e9c:	0c f4       	brge	.+2      	; 0xea0 <pos_read+0xfc>
     e9e:	5e c0       	rjmp	.+188    	; 0xf5c <pos_read+0x1b8>
     ea0:	44 96       	adiw	r24, 0x14	; 20
     ea2:	8c 17       	cp	r24, r28
     ea4:	9d 07       	cpc	r25, r29
     ea6:	0c f0       	brlt	.+2      	; 0xeaa <pos_read+0x106>
     ea8:	4a c0       	rjmp	.+148    	; 0xf3e <pos_read+0x19a>
        ADC_Y = 0;
    }
    else if(ADC_Y > (P_cal.center_Y + 10)){
        ADC_Y = (ADC_Y - (P_cal.center_Y)) * 100.0 / (255.0 - P_cal.center_Y);  // Scaling when value is larger then center value
     eaa:	c0 1b       	sub	r28, r16
     eac:	d1 0b       	sbc	r29, r17
     eae:	be 01       	movw	r22, r28
     eb0:	dd 0f       	add	r29, r29
     eb2:	88 0b       	sbc	r24, r24
     eb4:	99 0b       	sbc	r25, r25
     eb6:	0e 94 99 0a 	call	0x1532	; 0x1532 <__floatsisf>
     eba:	20 e0       	ldi	r18, 0x00	; 0
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	48 ec       	ldi	r20, 0xC8	; 200
     ec0:	52 e4       	ldi	r21, 0x42	; 66
     ec2:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__mulsf3>
     ec6:	4b 01       	movw	r8, r22
     ec8:	5c 01       	movw	r10, r24
     eca:	b8 01       	movw	r22, r16
     ecc:	11 0f       	add	r17, r17
     ece:	88 0b       	sbc	r24, r24
     ed0:	99 0b       	sbc	r25, r25
     ed2:	0e 94 99 0a 	call	0x1532	; 0x1532 <__floatsisf>
     ed6:	9b 01       	movw	r18, r22
     ed8:	ac 01       	movw	r20, r24
     eda:	60 e0       	ldi	r22, 0x00	; 0
     edc:	70 e0       	ldi	r23, 0x00	; 0
     ede:	8f e7       	ldi	r24, 0x7F	; 127
     ee0:	93 e4       	ldi	r25, 0x43	; 67
     ee2:	0e 94 0b 09 	call	0x1216	; 0x1216 <__subsf3>
     ee6:	9b 01       	movw	r18, r22
     ee8:	ac 01       	movw	r20, r24
     eea:	c5 01       	movw	r24, r10
     eec:	b4 01       	movw	r22, r8
     eee:	0e 94 ef 09 	call	0x13de	; 0x13de <__divsf3>
     ef2:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <__fixsfsi>
     ef6:	25 c0       	rjmp	.+74     	; 0xf42 <pos_read+0x19e>
    }

    else if (ADC_Y < (P_cal.center_Y - 10)){
        ADC_Y = (ADC_Y / ((float)P_cal.center_Y)) * 100 - 100;   // Scaling when value is smaller then center value
     ef8:	be 01       	movw	r22, r28
     efa:	dd 0f       	add	r29, r29
     efc:	88 0b       	sbc	r24, r24
     efe:	99 0b       	sbc	r25, r25
     f00:	0e 94 99 0a 	call	0x1532	; 0x1532 <__floatsisf>
     f04:	4b 01       	movw	r8, r22
     f06:	5c 01       	movw	r10, r24
     f08:	b8 01       	movw	r22, r16
     f0a:	11 0f       	add	r17, r17
     f0c:	88 0b       	sbc	r24, r24
     f0e:	99 0b       	sbc	r25, r25
     f10:	0e 94 99 0a 	call	0x1532	; 0x1532 <__floatsisf>
     f14:	9b 01       	movw	r18, r22
     f16:	ac 01       	movw	r20, r24
     f18:	c5 01       	movw	r24, r10
     f1a:	b4 01       	movw	r22, r8
     f1c:	0e 94 ef 09 	call	0x13de	; 0x13de <__divsf3>
     f20:	20 e0       	ldi	r18, 0x00	; 0
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	48 ec       	ldi	r20, 0xC8	; 200
     f26:	52 e4       	ldi	r21, 0x42	; 66
     f28:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__mulsf3>
     f2c:	20 e0       	ldi	r18, 0x00	; 0
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	48 ec       	ldi	r20, 0xC8	; 200
     f32:	52 e4       	ldi	r21, 0x42	; 66
     f34:	0e 94 0b 09 	call	0x1216	; 0x1216 <__subsf3>
     f38:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <__fixsfsi>
     f3c:	02 c0       	rjmp	.+4      	; 0xf42 <pos_read+0x19e>
    }

    // Y read

    if(ADC_Y >= (P_cal.center_Y - 10) && ADC_Y <= (P_cal.center_Y + 10)){  //Deadspace for joystick
        ADC_Y = 0;
     f3e:	60 e0       	ldi	r22, 0x00	; 0
     f40:	70 e0       	ldi	r23, 0x00	; 0

    else if (ADC_Y < (P_cal.center_Y - 10)){
        ADC_Y = (ADC_Y / ((float)P_cal.center_Y)) * 100 - 100;   // Scaling when value is smaller then center value
    }

    pos -> posX = ADC_X;
     f42:	f7 01       	movw	r30, r14
     f44:	d1 82       	std	Z+1, r13	; 0x01
     f46:	c0 82       	st	Z, r12
    pos -> posY = ADC_Y;
     f48:	73 83       	std	Z+3, r23	; 0x03
     f4a:	62 83       	std	Z+2, r22	; 0x02
}
     f4c:	0d c0       	rjmp	.+26     	; 0xf68 <pos_read+0x1c4>
    // X read

    if((ADC_X >= (P_cal.center_X - 10)) && (ADC_X <= (P_cal.center_X + 10))){ //Deadspace for joystick
        ADC_X = 0;
    }
    else if(ADC_X > (P_cal.center_X + 10)){
     f4e:	c8 01       	movw	r24, r16
     f50:	0a 96       	adiw	r24, 0x0a	; 10
     f52:	86 17       	cp	r24, r22
     f54:	97 07       	cpc	r25, r23
     f56:	0c f4       	brge	.+2      	; 0xf5a <pos_read+0x1b6>
     f58:	4b cf       	rjmp	.-362    	; 0xdf0 <pos_read+0x4c>
     f5a:	72 cf       	rjmp	.-284    	; 0xe40 <pos_read+0x9c>
    // Y read

    if(ADC_Y >= (P_cal.center_Y - 10) && ADC_Y <= (P_cal.center_Y + 10)){  //Deadspace for joystick
        ADC_Y = 0;
    }
    else if(ADC_Y > (P_cal.center_Y + 10)){
     f5c:	c8 01       	movw	r24, r16
     f5e:	0a 96       	adiw	r24, 0x0a	; 10
     f60:	8c 17       	cp	r24, r28
     f62:	9d 07       	cpc	r25, r29
     f64:	4c f6       	brge	.-110    	; 0xef8 <pos_read+0x154>
     f66:	a1 cf       	rjmp	.-190    	; 0xeaa <pos_read+0x106>
        ADC_Y = (ADC_Y / ((float)P_cal.center_Y)) * 100 - 100;   // Scaling when value is smaller then center value
    }

    pos -> posX = ADC_X;
    pos -> posY = ADC_Y;
}
     f68:	df 91       	pop	r29
     f6a:	cf 91       	pop	r28
     f6c:	1f 91       	pop	r17
     f6e:	0f 91       	pop	r16
     f70:	ff 90       	pop	r15
     f72:	ef 90       	pop	r14
     f74:	df 90       	pop	r13
     f76:	cf 90       	pop	r12
     f78:	bf 90       	pop	r11
     f7a:	af 90       	pop	r10
     f7c:	9f 90       	pop	r9
     f7e:	8f 90       	pop	r8
     f80:	08 95       	ret

00000f82 <joystick_direction>:

DIRECTION joystick_direction(void){
     f82:	8f 92       	push	r8
     f84:	9f 92       	push	r9
     f86:	af 92       	push	r10
     f88:	bf 92       	push	r11
     f8a:	cf 92       	push	r12
     f8c:	df 92       	push	r13
     f8e:	ef 92       	push	r14
     f90:	ff 92       	push	r15
     f92:	cf 93       	push	r28
     f94:	df 93       	push	r29

    pos_read(&P_pos);
     f96:	84 ea       	ldi	r24, 0xA4	; 164
     f98:	93 e0       	ldi	r25, 0x03	; 3
     f9a:	0e 94 d2 06 	call	0xda4	; 0xda4 <pos_read>

    int angle = atan2(P_pos.posY, P_pos.posX);
     f9e:	e4 ea       	ldi	r30, 0xA4	; 164
     fa0:	f3 e0       	ldi	r31, 0x03	; 3
     fa2:	e0 80       	ld	r14, Z
     fa4:	f1 80       	ldd	r15, Z+1	; 0x01
     fa6:	c2 81       	ldd	r28, Z+2	; 0x02
     fa8:	d3 81       	ldd	r29, Z+3	; 0x03
     faa:	b7 01       	movw	r22, r14
     fac:	0f 2c       	mov	r0, r15
     fae:	00 0c       	add	r0, r0
     fb0:	88 0b       	sbc	r24, r24
     fb2:	99 0b       	sbc	r25, r25
     fb4:	0e 94 99 0a 	call	0x1532	; 0x1532 <__floatsisf>
     fb8:	4b 01       	movw	r8, r22
     fba:	5c 01       	movw	r10, r24
     fbc:	be 01       	movw	r22, r28
     fbe:	0d 2e       	mov	r0, r29
     fc0:	00 0c       	add	r0, r0
     fc2:	88 0b       	sbc	r24, r24
     fc4:	99 0b       	sbc	r25, r25
     fc6:	0e 94 99 0a 	call	0x1532	; 0x1532 <__floatsisf>
     fca:	a5 01       	movw	r20, r10
     fcc:	94 01       	movw	r18, r8
     fce:	0e 94 8b 09 	call	0x1316	; 0x1316 <atan2>

    if(!P_pos.posY & !P_pos.posX){
     fd2:	21 e0       	ldi	r18, 0x01	; 1
     fd4:	cd 2b       	or	r28, r29
     fd6:	09 f0       	breq	.+2      	; 0xfda <joystick_direction+0x58>
     fd8:	20 e0       	ldi	r18, 0x00	; 0
     fda:	22 23       	and	r18, r18
     fdc:	31 f0       	breq	.+12     	; 0xfea <joystick_direction+0x68>
     fde:	21 e0       	ldi	r18, 0x01	; 1
     fe0:	ef 28       	or	r14, r15
     fe2:	09 f0       	breq	.+2      	; 0xfe6 <joystick_direction+0x64>
     fe4:	20 e0       	ldi	r18, 0x00	; 0
     fe6:	21 11       	cpse	r18, r1
     fe8:	79 c0       	rjmp	.+242    	; 0x10dc <joystick_direction+0x15a>
        return NEUTRAL;
    }

    else if(angle >= -PI / 4.0 & angle <= PI/4.0){
     fea:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <__fixsfsi>
     fee:	07 2e       	mov	r0, r23
     ff0:	00 0c       	add	r0, r0
     ff2:	88 0b       	sbc	r24, r24
     ff4:	99 0b       	sbc	r25, r25
     ff6:	0e 94 99 0a 	call	0x1532	; 0x1532 <__floatsisf>
     ffa:	6b 01       	movw	r12, r22
     ffc:	7c 01       	movw	r14, r24
     ffe:	c1 e0       	ldi	r28, 0x01	; 1
    1000:	2b ed       	ldi	r18, 0xDB	; 219
    1002:	3f e0       	ldi	r19, 0x0F	; 15
    1004:	49 e4       	ldi	r20, 0x49	; 73
    1006:	5f eb       	ldi	r21, 0xBF	; 191
    1008:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__gesf2>
    100c:	88 23       	and	r24, r24
    100e:	0c f4       	brge	.+2      	; 0x1012 <joystick_direction+0x90>
    1010:	c0 e0       	ldi	r28, 0x00	; 0
    1012:	cc 23       	and	r28, r28
    1014:	71 f0       	breq	.+28     	; 0x1032 <joystick_direction+0xb0>
    1016:	c1 e0       	ldi	r28, 0x01	; 1
    1018:	2b ed       	ldi	r18, 0xDB	; 219
    101a:	3f e0       	ldi	r19, 0x0F	; 15
    101c:	49 e4       	ldi	r20, 0x49	; 73
    101e:	5f e3       	ldi	r21, 0x3F	; 63
    1020:	c7 01       	movw	r24, r14
    1022:	b6 01       	movw	r22, r12
    1024:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <__cmpsf2>
    1028:	18 16       	cp	r1, r24
    102a:	0c f4       	brge	.+2      	; 0x102e <joystick_direction+0xac>
    102c:	c0 e0       	ldi	r28, 0x00	; 0
    102e:	c1 11       	cpse	r28, r1
    1030:	57 c0       	rjmp	.+174    	; 0x10e0 <joystick_direction+0x15e>
        return RIGHT;
    }

    else if(angle >= -3 * PI/4.0 & angle <= -PI / 4.0){
    1032:	c1 e0       	ldi	r28, 0x01	; 1
    1034:	24 ee       	ldi	r18, 0xE4	; 228
    1036:	3b ec       	ldi	r19, 0xCB	; 203
    1038:	46 e1       	ldi	r20, 0x16	; 22
    103a:	50 ec       	ldi	r21, 0xC0	; 192
    103c:	c7 01       	movw	r24, r14
    103e:	b6 01       	movw	r22, r12
    1040:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__gesf2>
    1044:	88 23       	and	r24, r24
    1046:	0c f4       	brge	.+2      	; 0x104a <joystick_direction+0xc8>
    1048:	c0 e0       	ldi	r28, 0x00	; 0
    104a:	cc 23       	and	r28, r28
    104c:	71 f0       	breq	.+28     	; 0x106a <joystick_direction+0xe8>
    104e:	c1 e0       	ldi	r28, 0x01	; 1
    1050:	2b ed       	ldi	r18, 0xDB	; 219
    1052:	3f e0       	ldi	r19, 0x0F	; 15
    1054:	49 e4       	ldi	r20, 0x49	; 73
    1056:	5f eb       	ldi	r21, 0xBF	; 191
    1058:	c7 01       	movw	r24, r14
    105a:	b6 01       	movw	r22, r12
    105c:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <__cmpsf2>
    1060:	18 16       	cp	r1, r24
    1062:	0c f4       	brge	.+2      	; 0x1066 <joystick_direction+0xe4>
    1064:	c0 e0       	ldi	r28, 0x00	; 0
    1066:	c1 11       	cpse	r28, r1
    1068:	3d c0       	rjmp	.+122    	; 0x10e4 <joystick_direction+0x162>
        return DOWN;
    }

    else if(angle >= 3 * PI/4 | angle <= -3* PI / 4.0){
    106a:	c1 e0       	ldi	r28, 0x01	; 1
    106c:	24 ee       	ldi	r18, 0xE4	; 228
    106e:	3b ec       	ldi	r19, 0xCB	; 203
    1070:	46 e1       	ldi	r20, 0x16	; 22
    1072:	50 e4       	ldi	r21, 0x40	; 64
    1074:	c7 01       	movw	r24, r14
    1076:	b6 01       	movw	r22, r12
    1078:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__gesf2>
    107c:	88 23       	and	r24, r24
    107e:	0c f4       	brge	.+2      	; 0x1082 <joystick_direction+0x100>
    1080:	c0 e0       	ldi	r28, 0x00	; 0
    1082:	c1 11       	cpse	r28, r1
    1084:	31 c0       	rjmp	.+98     	; 0x10e8 <joystick_direction+0x166>
    1086:	c1 e0       	ldi	r28, 0x01	; 1
    1088:	24 ee       	ldi	r18, 0xE4	; 228
    108a:	3b ec       	ldi	r19, 0xCB	; 203
    108c:	46 e1       	ldi	r20, 0x16	; 22
    108e:	50 ec       	ldi	r21, 0xC0	; 192
    1090:	c7 01       	movw	r24, r14
    1092:	b6 01       	movw	r22, r12
    1094:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <__cmpsf2>
    1098:	18 16       	cp	r1, r24
    109a:	0c f4       	brge	.+2      	; 0x109e <joystick_direction+0x11c>
    109c:	c0 e0       	ldi	r28, 0x00	; 0
    109e:	c1 11       	cpse	r28, r1
    10a0:	23 c0       	rjmp	.+70     	; 0x10e8 <joystick_direction+0x166>
        return LEFT;
    }

    else if(angle >= PI / 4 & angle <= 3*PI / 4.0){
    10a2:	c1 e0       	ldi	r28, 0x01	; 1
    10a4:	2b ed       	ldi	r18, 0xDB	; 219
    10a6:	3f e0       	ldi	r19, 0x0F	; 15
    10a8:	49 e4       	ldi	r20, 0x49	; 73
    10aa:	5f e3       	ldi	r21, 0x3F	; 63
    10ac:	c7 01       	movw	r24, r14
    10ae:	b6 01       	movw	r22, r12
    10b0:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__gesf2>
    10b4:	88 23       	and	r24, r24
    10b6:	0c f4       	brge	.+2      	; 0x10ba <joystick_direction+0x138>
    10b8:	c0 e0       	ldi	r28, 0x00	; 0
    10ba:	cc 23       	and	r28, r28
    10bc:	71 f0       	breq	.+28     	; 0x10da <joystick_direction+0x158>
    10be:	c1 e0       	ldi	r28, 0x01	; 1
    10c0:	24 ee       	ldi	r18, 0xE4	; 228
    10c2:	3b ec       	ldi	r19, 0xCB	; 203
    10c4:	46 e1       	ldi	r20, 0x16	; 22
    10c6:	50 e4       	ldi	r21, 0x40	; 64
    10c8:	c7 01       	movw	r24, r14
    10ca:	b6 01       	movw	r22, r12
    10cc:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <__cmpsf2>
    10d0:	18 16       	cp	r1, r24
    10d2:	0c f4       	brge	.+2      	; 0x10d6 <joystick_direction+0x154>
    10d4:	c0 e0       	ldi	r28, 0x00	; 0
    10d6:	c1 11       	cpse	r28, r1
    10d8:	09 c0       	rjmp	.+18     	; 0x10ec <joystick_direction+0x16a>
        return UP;
    }
}
    10da:	09 c0       	rjmp	.+18     	; 0x10ee <joystick_direction+0x16c>
    pos_read(&P_pos);

    int angle = atan2(P_pos.posY, P_pos.posX);

    if(!P_pos.posY & !P_pos.posX){
        return NEUTRAL;
    10dc:	84 e0       	ldi	r24, 0x04	; 4
    10de:	07 c0       	rjmp	.+14     	; 0x10ee <joystick_direction+0x16c>
    }

    else if(angle >= -PI / 4.0 & angle <= PI/4.0){
        return RIGHT;
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	05 c0       	rjmp	.+10     	; 0x10ee <joystick_direction+0x16c>
    }

    else if(angle >= -3 * PI/4.0 & angle <= -PI / 4.0){
        return DOWN;
    10e4:	83 e0       	ldi	r24, 0x03	; 3
    10e6:	03 c0       	rjmp	.+6      	; 0x10ee <joystick_direction+0x16c>
    }

    else if(angle >= 3 * PI/4 | angle <= -3* PI / 4.0){
        return LEFT;
    10e8:	80 e0       	ldi	r24, 0x00	; 0
    10ea:	01 c0       	rjmp	.+2      	; 0x10ee <joystick_direction+0x16c>
    }

    else if(angle >= PI / 4 & angle <= 3*PI / 4.0){
        return UP;
    10ec:	82 e0       	ldi	r24, 0x02	; 2
    }
}
    10ee:	df 91       	pop	r29
    10f0:	cf 91       	pop	r28
    10f2:	ff 90       	pop	r15
    10f4:	ef 90       	pop	r14
    10f6:	df 90       	pop	r13
    10f8:	cf 90       	pop	r12
    10fa:	bf 90       	pop	r11
    10fc:	af 90       	pop	r10
    10fe:	9f 90       	pop	r9
    1100:	8f 90       	pop	r8
    1102:	08 95       	ret

00001104 <pos_readSettings>:

void pos_readSettings(void){
	
	DDRB &= ~(1 << PB1);
    1104:	b9 98       	cbi	0x17, 1	; 23
	DDRD &= ~(1 << PD4);
    1106:	8c 98       	cbi	0x11, 4	; 17
	DDRD &= ~(1 << PD5);
    1108:	8d 98       	cbi	0x11, 5	; 17

	PORTB |= (1 << PB1); // internal pull up enable
    110a:	c1 9a       	sbi	0x18, 1	; 24
    110c:	08 95       	ret

0000110e <usb_button_pushed>:

uint8_t usb_button_pushed(USB_BUTTON BUTTON){

    uint8_t pressed;

    if(BUTTON == LEFT_BUTTON){
    110e:	81 30       	cpi	r24, 0x01	; 1
    1110:	19 f4       	brne	.+6      	; 0x1118 <usb_button_pushed+0xa>
        pressed = (PIND & (1 << PD4) );
    1112:	80 b3       	in	r24, 0x10	; 16
    1114:	80 71       	andi	r24, 0x10	; 16
    1116:	08 95       	ret

		}

    if(BUTTON == RIGHT_BUTTON){
    1118:	81 11       	cpse	r24, r1
    111a:	03 c0       	rjmp	.+6      	; 0x1122 <usb_button_pushed+0x14>
        pressed =  (PIND & (1 << PD5) );
    111c:	80 b3       	in	r24, 0x10	; 16
    111e:	80 72       	andi	r24, 0x20	; 32
    1120:	08 95       	ret
		}

    if(BUTTON == JOYSTICK_BUTTON){
    1122:	82 30       	cpi	r24, 0x02	; 2
    1124:	31 f4       	brne	.+12     	; 0x1132 <usb_button_pushed+0x24>
        pressed =  (PINB & (1 << PB1) );
    1126:	86 b3       	in	r24, 0x16	; 22
        return !pressed;
    1128:	86 95       	lsr	r24
    112a:	81 70       	andi	r24, 0x01	; 1
    112c:	91 e0       	ldi	r25, 0x01	; 1
    112e:	89 27       	eor	r24, r25
    1130:	08 95       	ret
    1132:	80 e0       	ldi	r24, 0x00	; 0
		}

    return pressed;
}
    1134:	08 95       	ret

00001136 <main>:


int main(void)
{
    
    SRAM_init();
    1136:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <SRAM_init>
    ADC_timer_init();
    113a:	0e 94 0a 02 	call	0x414	; 0x414 <ADC_timer_init>
    USART_init();
    113e:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <USART_init>
    fdevopen(USART_send, USART_receive);
    1142:	63 e0       	ldi	r22, 0x03	; 3
    1144:	79 e0       	ldi	r23, 0x09	; 9
    1146:	87 e0       	ldi	r24, 0x07	; 7
    1148:	99 e0       	ldi	r25, 0x09	; 9
    114a:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <fdevopen>
    ADC_calibrate(&P_cal);
    114e:	80 ea       	ldi	r24, 0xA0	; 160
    1150:	93 e0       	ldi	r25, 0x03	; 3
    1152:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <ADC_calibrate>
    OLED_init();
    1156:	0e 94 b7 03 	call	0x76e	; 0x76e <OLED_init>
    pos_readSettings();
    115a:	0e 94 82 08 	call	0x1104	; 0x1104 <pos_readSettings>
    oled_clear();
    115e:	0e 94 93 03 	call	0x726	; 0x726 <oled_clear>
	CAN_init(MODE_NORMAL);
    1162:	80 e0       	ldi	r24, 0x00	; 0
    1164:	0e 94 17 02 	call	0x42e	; 0x42e <CAN_init>
    // char c[] = "derp";
    // oled_pos_set(3, 62);
    // oled_print(&c);
    
	
    menu();
    1168:	0e 94 06 06 	call	0xc0c	; 0xc0c <menu>
    test_message.data[1] = 'E';
    test_message.data[2] = 'I';
    test_message.data_length = 3;
    
    CAN_message_t revieve_message;
    printf("Initiating node 1 \n\r");
    116c:	82 ec       	ldi	r24, 0xC2	; 194
    116e:	92 e0       	ldi	r25, 0x02	; 2
    1170:	9f 93       	push	r25
    1172:	8f 93       	push	r24
    1174:	0e 94 40 0c 	call	0x1880	; 0x1880 <printf>
    1178:	0f 90       	pop	r0
    117a:	0f 90       	pop	r0
        //    char test = spi_read();
        //    printf("test is:  %d \n \r", test);

        
        //printf("Right button pressed: %d , Left button pressed: %d  joy button pressed: %d \r", usb_button_pushed(RIGHT_BUTTON), usb_button_pushed(LEFT_BUTTON), usb_button_pushed(JOYSTICK_BUTTON) );
        printf("Pos X val is %4d , Pos Y is %4d, sliderX is %4d,  sliderY is %4d  \n \r", P_pos.posX, P_pos.posY, sliderX, sliderY);
    117c:	c4 ea       	ldi	r28, 0xA4	; 164
    117e:	d3 e0       	ldi	r29, 0x03	; 3
    1180:	07 ed       	ldi	r16, 0xD7	; 215
    1182:	12 e0       	ldi	r17, 0x02	; 2
       //uint8_t joyButton = usb_button_pushed(JOYSTICK_BUTTON);
       //uint8_t joyDirection = joystick_direction(); 
       //pos_read(&P_pos);
       //printf("X = %d Y = %d, joybutton = %d, joydirection = %d \n\r", P_pos.posX, P_pos.posY, joyButton, joyDirection);
       //printf("Bro");
	   joyStick_Can_Message();
    1184:	0e 94 88 02 	call	0x510	; 0x510 <joyStick_Can_Message>
        
        //printf("Lengden er : %d\n\r Dataen er: %d\n\r ID'en er: %d\n\r", revieve_message.data_length, revieve_message.data[0], revieve_message.data_length);
        
        //pos_read(&P_pos);
        //
        uint8_t sliderX = ADC_read(3);
    1188:	83 e0       	ldi	r24, 0x03	; 3
    118a:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ADC_read>
    118e:	f8 2e       	mov	r15, r24
        uint8_t sliderY = ADC_read(2);
    1190:	82 e0       	ldi	r24, 0x02	; 2
    1192:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ADC_read>
        //    char test = spi_read();
        //    printf("test is:  %d \n \r", test);

        
        //printf("Right button pressed: %d , Left button pressed: %d  joy button pressed: %d \r", usb_button_pushed(RIGHT_BUTTON), usb_button_pushed(LEFT_BUTTON), usb_button_pushed(JOYSTICK_BUTTON) );
        printf("Pos X val is %4d , Pos Y is %4d, sliderX is %4d,  sliderY is %4d  \n \r", P_pos.posX, P_pos.posY, sliderX, sliderY);
    1196:	1f 92       	push	r1
    1198:	8f 93       	push	r24
    119a:	1f 92       	push	r1
    119c:	ff 92       	push	r15
    119e:	8b 81       	ldd	r24, Y+3	; 0x03
    11a0:	8f 93       	push	r24
    11a2:	8a 81       	ldd	r24, Y+2	; 0x02
    11a4:	8f 93       	push	r24
    11a6:	89 81       	ldd	r24, Y+1	; 0x01
    11a8:	8f 93       	push	r24
    11aa:	88 81       	ld	r24, Y
    11ac:	8f 93       	push	r24
    11ae:	1f 93       	push	r17
    11b0:	0f 93       	push	r16
    11b2:	0e 94 40 0c 	call	0x1880	; 0x1880 <printf>
    11b6:	8d b7       	in	r24, 0x3d	; 61
    11b8:	9e b7       	in	r25, 0x3e	; 62
    11ba:	0a 96       	adiw	r24, 0x0a	; 10
    11bc:	0f b6       	in	r0, 0x3f	; 63
    11be:	f8 94       	cli
    11c0:	9e bf       	out	0x3e, r25	; 62
    11c2:	0f be       	out	0x3f, r0	; 63
    11c4:	8d bf       	out	0x3d, r24	; 61
    11c6:	de cf       	rjmp	.-68     	; 0x1184 <main+0x4e>

000011c8 <spi_write>:
#include "spi_driver.h"


void spi_write(char data){

    SPDR = data;
    11c8:	8f b9       	out	0x0f, r24	; 15
    while( !(SPSR & (1<<SPIF)) );
    11ca:	77 9b       	sbis	0x0e, 7	; 14
    11cc:	fe cf       	rjmp	.-4      	; 0x11ca <spi_write+0x2>

}
    11ce:	08 95       	ret

000011d0 <spi_read>:

char spi_read(void){

    spi_write(DUMMY);
    11d0:	86 e5       	ldi	r24, 0x56	; 86
    11d2:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <spi_write>
    //printf("SPI data sent is");
    return SPDR;
    11d6:	8f b1       	in	r24, 0x0f	; 15
}
    11d8:	08 95       	ret

000011da <spi_init>:

void spi_init(void){
    DDR_SPI |= (1 << SCK) | (1 << MOSI) | (1 << SS);
    11da:	87 b3       	in	r24, 0x17	; 23
    11dc:	80 6b       	ori	r24, 0xB0	; 176
    11de:	87 bb       	out	0x17, r24	; 23

    SPCR |= (1 << SPE) | (1 << MSTR) | (1<<SPR0);  // Enable SPI and set as master
    11e0:	8d b1       	in	r24, 0x0d	; 13
    11e2:	81 65       	ori	r24, 0x51	; 81
    11e4:	8d b9       	out	0x0d, r24	; 13
    11e6:	08 95       	ret

000011e8 <SRAM_init>:
 */

#include "SRAM_driver.h"

void SRAM_init(void){
    MCUCR |= (1 << SRE);     //external SRAM enable (mcu control register)
    11e8:	85 b7       	in	r24, 0x35	; 53
    11ea:	80 68       	ori	r24, 0x80	; 128
    11ec:	85 bf       	out	0x35, r24	; 53
    SFIOR |= (1 << XMM2);    //excludes memory occupied by JTAG
    11ee:	80 b7       	in	r24, 0x30	; 48
    11f0:	80 62       	ori	r24, 0x20	; 32
    11f2:	80 bf       	out	0x30, r24	; 48
    11f4:	08 95       	ret

000011f6 <USART_init>:
 */
#include "UART_driver.h"


void USART_init(void){
    UBRR0L = (uint8_t)(BAUD_PRESCALER);
    11f6:	8f e1       	ldi	r24, 0x1F	; 31
    11f8:	89 b9       	out	0x09, r24	; 9
    UBRR0H = (uint8_t)((uint8_t) BAUD_PRESCALER>>8);
    11fa:	10 bc       	out	0x20, r1	; 32
    UCSR0B = (1 << RXEN0)|(1 << TXEN0);
    11fc:	88 e1       	ldi	r24, 0x18	; 24
    11fe:	8a b9       	out	0x0a, r24	; 10
    UCSR0C = (1 << URSEL0)|(1 << USBS0)|(3 << UCSZ00);
    1200:	8e e8       	ldi	r24, 0x8E	; 142
    1202:	80 bd       	out	0x20, r24	; 32
    1204:	08 95       	ret

00001206 <USART_receive>:
}

unsigned char USART_receive(void){
    while(!(UCSR0A & (1 << RXC0)));
    1206:	5f 9b       	sbis	0x0b, 7	; 11
    1208:	fe cf       	rjmp	.-4      	; 0x1206 <USART_receive>
    return UDR0;
    120a:	8c b1       	in	r24, 0x0c	; 12
}
    120c:	08 95       	ret

0000120e <USART_send>:

void USART_send( unsigned char data){
    while(!(UCSR0A & (1 << UDRE0)));
    120e:	5d 9b       	sbis	0x0b, 5	; 11
    1210:	fe cf       	rjmp	.-4      	; 0x120e <USART_send>
    UDR0 = data;
    1212:	8c b9       	out	0x0c, r24	; 12
    1214:	08 95       	ret

00001216 <__subsf3>:
    1216:	50 58       	subi	r21, 0x80	; 128

00001218 <__addsf3>:
    1218:	bb 27       	eor	r27, r27
    121a:	aa 27       	eor	r26, r26
    121c:	0e 94 23 09 	call	0x1246	; 0x1246 <__addsf3x>
    1220:	0c 94 36 0b 	jmp	0x166c	; 0x166c <__fp_round>
    1224:	0e 94 28 0b 	call	0x1650	; 0x1650 <__fp_pscA>
    1228:	38 f0       	brcs	.+14     	; 0x1238 <__addsf3+0x20>
    122a:	0e 94 2f 0b 	call	0x165e	; 0x165e <__fp_pscB>
    122e:	20 f0       	brcs	.+8      	; 0x1238 <__addsf3+0x20>
    1230:	39 f4       	brne	.+14     	; 0x1240 <__addsf3+0x28>
    1232:	9f 3f       	cpi	r25, 0xFF	; 255
    1234:	19 f4       	brne	.+6      	; 0x123c <__addsf3+0x24>
    1236:	26 f4       	brtc	.+8      	; 0x1240 <__addsf3+0x28>
    1238:	0c 94 fe 0a 	jmp	0x15fc	; 0x15fc <__fp_nan>
    123c:	0e f4       	brtc	.+2      	; 0x1240 <__addsf3+0x28>
    123e:	e0 95       	com	r30
    1240:	e7 fb       	bst	r30, 7
    1242:	0c 94 f8 0a 	jmp	0x15f0	; 0x15f0 <__fp_inf>

00001246 <__addsf3x>:
    1246:	e9 2f       	mov	r30, r25
    1248:	0e 94 47 0b 	call	0x168e	; 0x168e <__fp_split3>
    124c:	58 f3       	brcs	.-42     	; 0x1224 <__addsf3+0xc>
    124e:	ba 17       	cp	r27, r26
    1250:	62 07       	cpc	r22, r18
    1252:	73 07       	cpc	r23, r19
    1254:	84 07       	cpc	r24, r20
    1256:	95 07       	cpc	r25, r21
    1258:	20 f0       	brcs	.+8      	; 0x1262 <__addsf3x+0x1c>
    125a:	79 f4       	brne	.+30     	; 0x127a <__addsf3x+0x34>
    125c:	a6 f5       	brtc	.+104    	; 0x12c6 <__addsf3x+0x80>
    125e:	0c 94 69 0b 	jmp	0x16d2	; 0x16d2 <__fp_zero>
    1262:	0e f4       	brtc	.+2      	; 0x1266 <__addsf3x+0x20>
    1264:	e0 95       	com	r30
    1266:	0b 2e       	mov	r0, r27
    1268:	ba 2f       	mov	r27, r26
    126a:	a0 2d       	mov	r26, r0
    126c:	0b 01       	movw	r0, r22
    126e:	b9 01       	movw	r22, r18
    1270:	90 01       	movw	r18, r0
    1272:	0c 01       	movw	r0, r24
    1274:	ca 01       	movw	r24, r20
    1276:	a0 01       	movw	r20, r0
    1278:	11 24       	eor	r1, r1
    127a:	ff 27       	eor	r31, r31
    127c:	59 1b       	sub	r21, r25
    127e:	99 f0       	breq	.+38     	; 0x12a6 <__addsf3x+0x60>
    1280:	59 3f       	cpi	r21, 0xF9	; 249
    1282:	50 f4       	brcc	.+20     	; 0x1298 <__addsf3x+0x52>
    1284:	50 3e       	cpi	r21, 0xE0	; 224
    1286:	68 f1       	brcs	.+90     	; 0x12e2 <__addsf3x+0x9c>
    1288:	1a 16       	cp	r1, r26
    128a:	f0 40       	sbci	r31, 0x00	; 0
    128c:	a2 2f       	mov	r26, r18
    128e:	23 2f       	mov	r18, r19
    1290:	34 2f       	mov	r19, r20
    1292:	44 27       	eor	r20, r20
    1294:	58 5f       	subi	r21, 0xF8	; 248
    1296:	f3 cf       	rjmp	.-26     	; 0x127e <__addsf3x+0x38>
    1298:	46 95       	lsr	r20
    129a:	37 95       	ror	r19
    129c:	27 95       	ror	r18
    129e:	a7 95       	ror	r26
    12a0:	f0 40       	sbci	r31, 0x00	; 0
    12a2:	53 95       	inc	r21
    12a4:	c9 f7       	brne	.-14     	; 0x1298 <__addsf3x+0x52>
    12a6:	7e f4       	brtc	.+30     	; 0x12c6 <__addsf3x+0x80>
    12a8:	1f 16       	cp	r1, r31
    12aa:	ba 0b       	sbc	r27, r26
    12ac:	62 0b       	sbc	r22, r18
    12ae:	73 0b       	sbc	r23, r19
    12b0:	84 0b       	sbc	r24, r20
    12b2:	ba f0       	brmi	.+46     	; 0x12e2 <__addsf3x+0x9c>
    12b4:	91 50       	subi	r25, 0x01	; 1
    12b6:	a1 f0       	breq	.+40     	; 0x12e0 <__addsf3x+0x9a>
    12b8:	ff 0f       	add	r31, r31
    12ba:	bb 1f       	adc	r27, r27
    12bc:	66 1f       	adc	r22, r22
    12be:	77 1f       	adc	r23, r23
    12c0:	88 1f       	adc	r24, r24
    12c2:	c2 f7       	brpl	.-16     	; 0x12b4 <__addsf3x+0x6e>
    12c4:	0e c0       	rjmp	.+28     	; 0x12e2 <__addsf3x+0x9c>
    12c6:	ba 0f       	add	r27, r26
    12c8:	62 1f       	adc	r22, r18
    12ca:	73 1f       	adc	r23, r19
    12cc:	84 1f       	adc	r24, r20
    12ce:	48 f4       	brcc	.+18     	; 0x12e2 <__addsf3x+0x9c>
    12d0:	87 95       	ror	r24
    12d2:	77 95       	ror	r23
    12d4:	67 95       	ror	r22
    12d6:	b7 95       	ror	r27
    12d8:	f7 95       	ror	r31
    12da:	9e 3f       	cpi	r25, 0xFE	; 254
    12dc:	08 f0       	brcs	.+2      	; 0x12e0 <__addsf3x+0x9a>
    12de:	b0 cf       	rjmp	.-160    	; 0x1240 <__addsf3+0x28>
    12e0:	93 95       	inc	r25
    12e2:	88 0f       	add	r24, r24
    12e4:	08 f0       	brcs	.+2      	; 0x12e8 <__addsf3x+0xa2>
    12e6:	99 27       	eor	r25, r25
    12e8:	ee 0f       	add	r30, r30
    12ea:	97 95       	ror	r25
    12ec:	87 95       	ror	r24
    12ee:	08 95       	ret
    12f0:	0e 94 28 0b 	call	0x1650	; 0x1650 <__fp_pscA>
    12f4:	60 f0       	brcs	.+24     	; 0x130e <__addsf3x+0xc8>
    12f6:	80 e8       	ldi	r24, 0x80	; 128
    12f8:	91 e0       	ldi	r25, 0x01	; 1
    12fa:	09 f4       	brne	.+2      	; 0x12fe <__addsf3x+0xb8>
    12fc:	9e ef       	ldi	r25, 0xFE	; 254
    12fe:	0e 94 2f 0b 	call	0x165e	; 0x165e <__fp_pscB>
    1302:	28 f0       	brcs	.+10     	; 0x130e <__addsf3x+0xc8>
    1304:	40 e8       	ldi	r20, 0x80	; 128
    1306:	51 e0       	ldi	r21, 0x01	; 1
    1308:	71 f4       	brne	.+28     	; 0x1326 <atan2+0x10>
    130a:	5e ef       	ldi	r21, 0xFE	; 254
    130c:	0c c0       	rjmp	.+24     	; 0x1326 <atan2+0x10>
    130e:	0c 94 fe 0a 	jmp	0x15fc	; 0x15fc <__fp_nan>
    1312:	0c 94 69 0b 	jmp	0x16d2	; 0x16d2 <__fp_zero>

00001316 <atan2>:
    1316:	e9 2f       	mov	r30, r25
    1318:	e0 78       	andi	r30, 0x80	; 128
    131a:	0e 94 47 0b 	call	0x168e	; 0x168e <__fp_split3>
    131e:	40 f3       	brcs	.-48     	; 0x12f0 <__addsf3x+0xaa>
    1320:	09 2e       	mov	r0, r25
    1322:	05 2a       	or	r0, r21
    1324:	b1 f3       	breq	.-20     	; 0x1312 <__addsf3x+0xcc>
    1326:	26 17       	cp	r18, r22
    1328:	37 07       	cpc	r19, r23
    132a:	48 07       	cpc	r20, r24
    132c:	59 07       	cpc	r21, r25
    132e:	38 f0       	brcs	.+14     	; 0x133e <atan2+0x28>
    1330:	0e 2e       	mov	r0, r30
    1332:	07 f8       	bld	r0, 7
    1334:	e0 25       	eor	r30, r0
    1336:	69 f0       	breq	.+26     	; 0x1352 <atan2+0x3c>
    1338:	e0 25       	eor	r30, r0
    133a:	e0 64       	ori	r30, 0x40	; 64
    133c:	0a c0       	rjmp	.+20     	; 0x1352 <atan2+0x3c>
    133e:	ef 63       	ori	r30, 0x3F	; 63
    1340:	07 f8       	bld	r0, 7
    1342:	00 94       	com	r0
    1344:	07 fa       	bst	r0, 7
    1346:	db 01       	movw	r26, r22
    1348:	b9 01       	movw	r22, r18
    134a:	9d 01       	movw	r18, r26
    134c:	dc 01       	movw	r26, r24
    134e:	ca 01       	movw	r24, r20
    1350:	ad 01       	movw	r20, r26
    1352:	ef 93       	push	r30
    1354:	0e 94 06 0a 	call	0x140c	; 0x140c <__divsf3_pse>
    1358:	0e 94 36 0b 	call	0x166c	; 0x166c <__fp_round>
    135c:	0e 94 bb 09 	call	0x1376	; 0x1376 <atan>
    1360:	5f 91       	pop	r21
    1362:	55 23       	and	r21, r21
    1364:	39 f0       	breq	.+14     	; 0x1374 <atan2+0x5e>
    1366:	2b ed       	ldi	r18, 0xDB	; 219
    1368:	3f e0       	ldi	r19, 0x0F	; 15
    136a:	49 e4       	ldi	r20, 0x49	; 73
    136c:	50 fd       	sbrc	r21, 0
    136e:	49 ec       	ldi	r20, 0xC9	; 201
    1370:	0c 94 0c 09 	jmp	0x1218	; 0x1218 <__addsf3>
    1374:	08 95       	ret

00001376 <atan>:
    1376:	df 93       	push	r29
    1378:	dd 27       	eor	r29, r29
    137a:	b9 2f       	mov	r27, r25
    137c:	bf 77       	andi	r27, 0x7F	; 127
    137e:	40 e8       	ldi	r20, 0x80	; 128
    1380:	5f e3       	ldi	r21, 0x3F	; 63
    1382:	16 16       	cp	r1, r22
    1384:	17 06       	cpc	r1, r23
    1386:	48 07       	cpc	r20, r24
    1388:	5b 07       	cpc	r21, r27
    138a:	18 f4       	brcc	.+6      	; 0x1392 <atan+0x1c>
    138c:	d9 2f       	mov	r29, r25
    138e:	0e 94 75 0b 	call	0x16ea	; 0x16ea <inverse>
    1392:	9f 93       	push	r25
    1394:	8f 93       	push	r24
    1396:	7f 93       	push	r23
    1398:	6f 93       	push	r22
    139a:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <square>
    139e:	e0 e7       	ldi	r30, 0x70	; 112
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	0e 94 01 0b 	call	0x1602	; 0x1602 <__fp_powser>
    13a6:	0e 94 36 0b 	call	0x166c	; 0x166c <__fp_round>
    13aa:	2f 91       	pop	r18
    13ac:	3f 91       	pop	r19
    13ae:	4f 91       	pop	r20
    13b0:	5f 91       	pop	r21
    13b2:	0e 94 90 0b 	call	0x1720	; 0x1720 <__mulsf3x>
    13b6:	dd 23       	and	r29, r29
    13b8:	51 f0       	breq	.+20     	; 0x13ce <atan+0x58>
    13ba:	90 58       	subi	r25, 0x80	; 128
    13bc:	a2 ea       	ldi	r26, 0xA2	; 162
    13be:	2a ed       	ldi	r18, 0xDA	; 218
    13c0:	3f e0       	ldi	r19, 0x0F	; 15
    13c2:	49 ec       	ldi	r20, 0xC9	; 201
    13c4:	5f e3       	ldi	r21, 0x3F	; 63
    13c6:	d0 78       	andi	r29, 0x80	; 128
    13c8:	5d 27       	eor	r21, r29
    13ca:	0e 94 23 09 	call	0x1246	; 0x1246 <__addsf3x>
    13ce:	df 91       	pop	r29
    13d0:	0c 94 36 0b 	jmp	0x166c	; 0x166c <__fp_round>

000013d4 <__cmpsf2>:
    13d4:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <__fp_cmp>
    13d8:	08 f4       	brcc	.+2      	; 0x13dc <__cmpsf2+0x8>
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	08 95       	ret

000013de <__divsf3>:
    13de:	0e 94 03 0a 	call	0x1406	; 0x1406 <__divsf3x>
    13e2:	0c 94 36 0b 	jmp	0x166c	; 0x166c <__fp_round>
    13e6:	0e 94 2f 0b 	call	0x165e	; 0x165e <__fp_pscB>
    13ea:	58 f0       	brcs	.+22     	; 0x1402 <__divsf3+0x24>
    13ec:	0e 94 28 0b 	call	0x1650	; 0x1650 <__fp_pscA>
    13f0:	40 f0       	brcs	.+16     	; 0x1402 <__divsf3+0x24>
    13f2:	29 f4       	brne	.+10     	; 0x13fe <__divsf3+0x20>
    13f4:	5f 3f       	cpi	r21, 0xFF	; 255
    13f6:	29 f0       	breq	.+10     	; 0x1402 <__divsf3+0x24>
    13f8:	0c 94 f8 0a 	jmp	0x15f0	; 0x15f0 <__fp_inf>
    13fc:	51 11       	cpse	r21, r1
    13fe:	0c 94 6a 0b 	jmp	0x16d4	; 0x16d4 <__fp_szero>
    1402:	0c 94 fe 0a 	jmp	0x15fc	; 0x15fc <__fp_nan>

00001406 <__divsf3x>:
    1406:	0e 94 47 0b 	call	0x168e	; 0x168e <__fp_split3>
    140a:	68 f3       	brcs	.-38     	; 0x13e6 <__divsf3+0x8>

0000140c <__divsf3_pse>:
    140c:	99 23       	and	r25, r25
    140e:	b1 f3       	breq	.-20     	; 0x13fc <__divsf3+0x1e>
    1410:	55 23       	and	r21, r21
    1412:	91 f3       	breq	.-28     	; 0x13f8 <__divsf3+0x1a>
    1414:	95 1b       	sub	r25, r21
    1416:	55 0b       	sbc	r21, r21
    1418:	bb 27       	eor	r27, r27
    141a:	aa 27       	eor	r26, r26
    141c:	62 17       	cp	r22, r18
    141e:	73 07       	cpc	r23, r19
    1420:	84 07       	cpc	r24, r20
    1422:	38 f0       	brcs	.+14     	; 0x1432 <__divsf3_pse+0x26>
    1424:	9f 5f       	subi	r25, 0xFF	; 255
    1426:	5f 4f       	sbci	r21, 0xFF	; 255
    1428:	22 0f       	add	r18, r18
    142a:	33 1f       	adc	r19, r19
    142c:	44 1f       	adc	r20, r20
    142e:	aa 1f       	adc	r26, r26
    1430:	a9 f3       	breq	.-22     	; 0x141c <__divsf3_pse+0x10>
    1432:	35 d0       	rcall	.+106    	; 0x149e <__divsf3_pse+0x92>
    1434:	0e 2e       	mov	r0, r30
    1436:	3a f0       	brmi	.+14     	; 0x1446 <__divsf3_pse+0x3a>
    1438:	e0 e8       	ldi	r30, 0x80	; 128
    143a:	32 d0       	rcall	.+100    	; 0x14a0 <__divsf3_pse+0x94>
    143c:	91 50       	subi	r25, 0x01	; 1
    143e:	50 40       	sbci	r21, 0x00	; 0
    1440:	e6 95       	lsr	r30
    1442:	00 1c       	adc	r0, r0
    1444:	ca f7       	brpl	.-14     	; 0x1438 <__divsf3_pse+0x2c>
    1446:	2b d0       	rcall	.+86     	; 0x149e <__divsf3_pse+0x92>
    1448:	fe 2f       	mov	r31, r30
    144a:	29 d0       	rcall	.+82     	; 0x149e <__divsf3_pse+0x92>
    144c:	66 0f       	add	r22, r22
    144e:	77 1f       	adc	r23, r23
    1450:	88 1f       	adc	r24, r24
    1452:	bb 1f       	adc	r27, r27
    1454:	26 17       	cp	r18, r22
    1456:	37 07       	cpc	r19, r23
    1458:	48 07       	cpc	r20, r24
    145a:	ab 07       	cpc	r26, r27
    145c:	b0 e8       	ldi	r27, 0x80	; 128
    145e:	09 f0       	breq	.+2      	; 0x1462 <__divsf3_pse+0x56>
    1460:	bb 0b       	sbc	r27, r27
    1462:	80 2d       	mov	r24, r0
    1464:	bf 01       	movw	r22, r30
    1466:	ff 27       	eor	r31, r31
    1468:	93 58       	subi	r25, 0x83	; 131
    146a:	5f 4f       	sbci	r21, 0xFF	; 255
    146c:	3a f0       	brmi	.+14     	; 0x147c <__divsf3_pse+0x70>
    146e:	9e 3f       	cpi	r25, 0xFE	; 254
    1470:	51 05       	cpc	r21, r1
    1472:	78 f0       	brcs	.+30     	; 0x1492 <__divsf3_pse+0x86>
    1474:	0c 94 f8 0a 	jmp	0x15f0	; 0x15f0 <__fp_inf>
    1478:	0c 94 6a 0b 	jmp	0x16d4	; 0x16d4 <__fp_szero>
    147c:	5f 3f       	cpi	r21, 0xFF	; 255
    147e:	e4 f3       	brlt	.-8      	; 0x1478 <__divsf3_pse+0x6c>
    1480:	98 3e       	cpi	r25, 0xE8	; 232
    1482:	d4 f3       	brlt	.-12     	; 0x1478 <__divsf3_pse+0x6c>
    1484:	86 95       	lsr	r24
    1486:	77 95       	ror	r23
    1488:	67 95       	ror	r22
    148a:	b7 95       	ror	r27
    148c:	f7 95       	ror	r31
    148e:	9f 5f       	subi	r25, 0xFF	; 255
    1490:	c9 f7       	brne	.-14     	; 0x1484 <__divsf3_pse+0x78>
    1492:	88 0f       	add	r24, r24
    1494:	91 1d       	adc	r25, r1
    1496:	96 95       	lsr	r25
    1498:	87 95       	ror	r24
    149a:	97 f9       	bld	r25, 7
    149c:	08 95       	ret
    149e:	e1 e0       	ldi	r30, 0x01	; 1
    14a0:	66 0f       	add	r22, r22
    14a2:	77 1f       	adc	r23, r23
    14a4:	88 1f       	adc	r24, r24
    14a6:	bb 1f       	adc	r27, r27
    14a8:	62 17       	cp	r22, r18
    14aa:	73 07       	cpc	r23, r19
    14ac:	84 07       	cpc	r24, r20
    14ae:	ba 07       	cpc	r27, r26
    14b0:	20 f0       	brcs	.+8      	; 0x14ba <__divsf3_pse+0xae>
    14b2:	62 1b       	sub	r22, r18
    14b4:	73 0b       	sbc	r23, r19
    14b6:	84 0b       	sbc	r24, r20
    14b8:	ba 0b       	sbc	r27, r26
    14ba:	ee 1f       	adc	r30, r30
    14bc:	88 f7       	brcc	.-30     	; 0x14a0 <__divsf3_pse+0x94>
    14be:	e0 95       	com	r30
    14c0:	08 95       	ret

000014c2 <__fixsfsi>:
    14c2:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <__fixunssfsi>
    14c6:	68 94       	set
    14c8:	b1 11       	cpse	r27, r1
    14ca:	0c 94 6a 0b 	jmp	0x16d4	; 0x16d4 <__fp_szero>
    14ce:	08 95       	ret

000014d0 <__fixunssfsi>:
    14d0:	0e 94 4f 0b 	call	0x169e	; 0x169e <__fp_splitA>
    14d4:	88 f0       	brcs	.+34     	; 0x14f8 <__fixunssfsi+0x28>
    14d6:	9f 57       	subi	r25, 0x7F	; 127
    14d8:	98 f0       	brcs	.+38     	; 0x1500 <__fixunssfsi+0x30>
    14da:	b9 2f       	mov	r27, r25
    14dc:	99 27       	eor	r25, r25
    14de:	b7 51       	subi	r27, 0x17	; 23
    14e0:	b0 f0       	brcs	.+44     	; 0x150e <__fixunssfsi+0x3e>
    14e2:	e1 f0       	breq	.+56     	; 0x151c <__fixunssfsi+0x4c>
    14e4:	66 0f       	add	r22, r22
    14e6:	77 1f       	adc	r23, r23
    14e8:	88 1f       	adc	r24, r24
    14ea:	99 1f       	adc	r25, r25
    14ec:	1a f0       	brmi	.+6      	; 0x14f4 <__fixunssfsi+0x24>
    14ee:	ba 95       	dec	r27
    14f0:	c9 f7       	brne	.-14     	; 0x14e4 <__fixunssfsi+0x14>
    14f2:	14 c0       	rjmp	.+40     	; 0x151c <__fixunssfsi+0x4c>
    14f4:	b1 30       	cpi	r27, 0x01	; 1
    14f6:	91 f0       	breq	.+36     	; 0x151c <__fixunssfsi+0x4c>
    14f8:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <__fp_zero>
    14fc:	b1 e0       	ldi	r27, 0x01	; 1
    14fe:	08 95       	ret
    1500:	0c 94 69 0b 	jmp	0x16d2	; 0x16d2 <__fp_zero>
    1504:	67 2f       	mov	r22, r23
    1506:	78 2f       	mov	r23, r24
    1508:	88 27       	eor	r24, r24
    150a:	b8 5f       	subi	r27, 0xF8	; 248
    150c:	39 f0       	breq	.+14     	; 0x151c <__fixunssfsi+0x4c>
    150e:	b9 3f       	cpi	r27, 0xF9	; 249
    1510:	cc f3       	brlt	.-14     	; 0x1504 <__fixunssfsi+0x34>
    1512:	86 95       	lsr	r24
    1514:	77 95       	ror	r23
    1516:	67 95       	ror	r22
    1518:	b3 95       	inc	r27
    151a:	d9 f7       	brne	.-10     	; 0x1512 <__fixunssfsi+0x42>
    151c:	3e f4       	brtc	.+14     	; 0x152c <__fixunssfsi+0x5c>
    151e:	90 95       	com	r25
    1520:	80 95       	com	r24
    1522:	70 95       	com	r23
    1524:	61 95       	neg	r22
    1526:	7f 4f       	sbci	r23, 0xFF	; 255
    1528:	8f 4f       	sbci	r24, 0xFF	; 255
    152a:	9f 4f       	sbci	r25, 0xFF	; 255
    152c:	08 95       	ret

0000152e <__floatunsisf>:
    152e:	e8 94       	clt
    1530:	09 c0       	rjmp	.+18     	; 0x1544 <__floatsisf+0x12>

00001532 <__floatsisf>:
    1532:	97 fb       	bst	r25, 7
    1534:	3e f4       	brtc	.+14     	; 0x1544 <__floatsisf+0x12>
    1536:	90 95       	com	r25
    1538:	80 95       	com	r24
    153a:	70 95       	com	r23
    153c:	61 95       	neg	r22
    153e:	7f 4f       	sbci	r23, 0xFF	; 255
    1540:	8f 4f       	sbci	r24, 0xFF	; 255
    1542:	9f 4f       	sbci	r25, 0xFF	; 255
    1544:	99 23       	and	r25, r25
    1546:	a9 f0       	breq	.+42     	; 0x1572 <__floatsisf+0x40>
    1548:	f9 2f       	mov	r31, r25
    154a:	96 e9       	ldi	r25, 0x96	; 150
    154c:	bb 27       	eor	r27, r27
    154e:	93 95       	inc	r25
    1550:	f6 95       	lsr	r31
    1552:	87 95       	ror	r24
    1554:	77 95       	ror	r23
    1556:	67 95       	ror	r22
    1558:	b7 95       	ror	r27
    155a:	f1 11       	cpse	r31, r1
    155c:	f8 cf       	rjmp	.-16     	; 0x154e <__floatsisf+0x1c>
    155e:	fa f4       	brpl	.+62     	; 0x159e <__floatsisf+0x6c>
    1560:	bb 0f       	add	r27, r27
    1562:	11 f4       	brne	.+4      	; 0x1568 <__floatsisf+0x36>
    1564:	60 ff       	sbrs	r22, 0
    1566:	1b c0       	rjmp	.+54     	; 0x159e <__floatsisf+0x6c>
    1568:	6f 5f       	subi	r22, 0xFF	; 255
    156a:	7f 4f       	sbci	r23, 0xFF	; 255
    156c:	8f 4f       	sbci	r24, 0xFF	; 255
    156e:	9f 4f       	sbci	r25, 0xFF	; 255
    1570:	16 c0       	rjmp	.+44     	; 0x159e <__floatsisf+0x6c>
    1572:	88 23       	and	r24, r24
    1574:	11 f0       	breq	.+4      	; 0x157a <__floatsisf+0x48>
    1576:	96 e9       	ldi	r25, 0x96	; 150
    1578:	11 c0       	rjmp	.+34     	; 0x159c <__floatsisf+0x6a>
    157a:	77 23       	and	r23, r23
    157c:	21 f0       	breq	.+8      	; 0x1586 <__floatsisf+0x54>
    157e:	9e e8       	ldi	r25, 0x8E	; 142
    1580:	87 2f       	mov	r24, r23
    1582:	76 2f       	mov	r23, r22
    1584:	05 c0       	rjmp	.+10     	; 0x1590 <__floatsisf+0x5e>
    1586:	66 23       	and	r22, r22
    1588:	71 f0       	breq	.+28     	; 0x15a6 <__floatsisf+0x74>
    158a:	96 e8       	ldi	r25, 0x86	; 134
    158c:	86 2f       	mov	r24, r22
    158e:	70 e0       	ldi	r23, 0x00	; 0
    1590:	60 e0       	ldi	r22, 0x00	; 0
    1592:	2a f0       	brmi	.+10     	; 0x159e <__floatsisf+0x6c>
    1594:	9a 95       	dec	r25
    1596:	66 0f       	add	r22, r22
    1598:	77 1f       	adc	r23, r23
    159a:	88 1f       	adc	r24, r24
    159c:	da f7       	brpl	.-10     	; 0x1594 <__floatsisf+0x62>
    159e:	88 0f       	add	r24, r24
    15a0:	96 95       	lsr	r25
    15a2:	87 95       	ror	r24
    15a4:	97 f9       	bld	r25, 7
    15a6:	08 95       	ret

000015a8 <__fp_cmp>:
    15a8:	99 0f       	add	r25, r25
    15aa:	00 08       	sbc	r0, r0
    15ac:	55 0f       	add	r21, r21
    15ae:	aa 0b       	sbc	r26, r26
    15b0:	e0 e8       	ldi	r30, 0x80	; 128
    15b2:	fe ef       	ldi	r31, 0xFE	; 254
    15b4:	16 16       	cp	r1, r22
    15b6:	17 06       	cpc	r1, r23
    15b8:	e8 07       	cpc	r30, r24
    15ba:	f9 07       	cpc	r31, r25
    15bc:	c0 f0       	brcs	.+48     	; 0x15ee <__fp_cmp+0x46>
    15be:	12 16       	cp	r1, r18
    15c0:	13 06       	cpc	r1, r19
    15c2:	e4 07       	cpc	r30, r20
    15c4:	f5 07       	cpc	r31, r21
    15c6:	98 f0       	brcs	.+38     	; 0x15ee <__fp_cmp+0x46>
    15c8:	62 1b       	sub	r22, r18
    15ca:	73 0b       	sbc	r23, r19
    15cc:	84 0b       	sbc	r24, r20
    15ce:	95 0b       	sbc	r25, r21
    15d0:	39 f4       	brne	.+14     	; 0x15e0 <__fp_cmp+0x38>
    15d2:	0a 26       	eor	r0, r26
    15d4:	61 f0       	breq	.+24     	; 0x15ee <__fp_cmp+0x46>
    15d6:	23 2b       	or	r18, r19
    15d8:	24 2b       	or	r18, r20
    15da:	25 2b       	or	r18, r21
    15dc:	21 f4       	brne	.+8      	; 0x15e6 <__fp_cmp+0x3e>
    15de:	08 95       	ret
    15e0:	0a 26       	eor	r0, r26
    15e2:	09 f4       	brne	.+2      	; 0x15e6 <__fp_cmp+0x3e>
    15e4:	a1 40       	sbci	r26, 0x01	; 1
    15e6:	a6 95       	lsr	r26
    15e8:	8f ef       	ldi	r24, 0xFF	; 255
    15ea:	81 1d       	adc	r24, r1
    15ec:	81 1d       	adc	r24, r1
    15ee:	08 95       	ret

000015f0 <__fp_inf>:
    15f0:	97 f9       	bld	r25, 7
    15f2:	9f 67       	ori	r25, 0x7F	; 127
    15f4:	80 e8       	ldi	r24, 0x80	; 128
    15f6:	70 e0       	ldi	r23, 0x00	; 0
    15f8:	60 e0       	ldi	r22, 0x00	; 0
    15fa:	08 95       	ret

000015fc <__fp_nan>:
    15fc:	9f ef       	ldi	r25, 0xFF	; 255
    15fe:	80 ec       	ldi	r24, 0xC0	; 192
    1600:	08 95       	ret

00001602 <__fp_powser>:
    1602:	df 93       	push	r29
    1604:	cf 93       	push	r28
    1606:	1f 93       	push	r17
    1608:	0f 93       	push	r16
    160a:	ff 92       	push	r15
    160c:	ef 92       	push	r14
    160e:	df 92       	push	r13
    1610:	7b 01       	movw	r14, r22
    1612:	8c 01       	movw	r16, r24
    1614:	68 94       	set
    1616:	06 c0       	rjmp	.+12     	; 0x1624 <__fp_powser+0x22>
    1618:	da 2e       	mov	r13, r26
    161a:	ef 01       	movw	r28, r30
    161c:	0e 94 90 0b 	call	0x1720	; 0x1720 <__mulsf3x>
    1620:	fe 01       	movw	r30, r28
    1622:	e8 94       	clt
    1624:	a5 91       	lpm	r26, Z+
    1626:	25 91       	lpm	r18, Z+
    1628:	35 91       	lpm	r19, Z+
    162a:	45 91       	lpm	r20, Z+
    162c:	55 91       	lpm	r21, Z+
    162e:	a6 f3       	brts	.-24     	; 0x1618 <__fp_powser+0x16>
    1630:	ef 01       	movw	r28, r30
    1632:	0e 94 23 09 	call	0x1246	; 0x1246 <__addsf3x>
    1636:	fe 01       	movw	r30, r28
    1638:	97 01       	movw	r18, r14
    163a:	a8 01       	movw	r20, r16
    163c:	da 94       	dec	r13
    163e:	69 f7       	brne	.-38     	; 0x161a <__fp_powser+0x18>
    1640:	df 90       	pop	r13
    1642:	ef 90       	pop	r14
    1644:	ff 90       	pop	r15
    1646:	0f 91       	pop	r16
    1648:	1f 91       	pop	r17
    164a:	cf 91       	pop	r28
    164c:	df 91       	pop	r29
    164e:	08 95       	ret

00001650 <__fp_pscA>:
    1650:	00 24       	eor	r0, r0
    1652:	0a 94       	dec	r0
    1654:	16 16       	cp	r1, r22
    1656:	17 06       	cpc	r1, r23
    1658:	18 06       	cpc	r1, r24
    165a:	09 06       	cpc	r0, r25
    165c:	08 95       	ret

0000165e <__fp_pscB>:
    165e:	00 24       	eor	r0, r0
    1660:	0a 94       	dec	r0
    1662:	12 16       	cp	r1, r18
    1664:	13 06       	cpc	r1, r19
    1666:	14 06       	cpc	r1, r20
    1668:	05 06       	cpc	r0, r21
    166a:	08 95       	ret

0000166c <__fp_round>:
    166c:	09 2e       	mov	r0, r25
    166e:	03 94       	inc	r0
    1670:	00 0c       	add	r0, r0
    1672:	11 f4       	brne	.+4      	; 0x1678 <__fp_round+0xc>
    1674:	88 23       	and	r24, r24
    1676:	52 f0       	brmi	.+20     	; 0x168c <__fp_round+0x20>
    1678:	bb 0f       	add	r27, r27
    167a:	40 f4       	brcc	.+16     	; 0x168c <__fp_round+0x20>
    167c:	bf 2b       	or	r27, r31
    167e:	11 f4       	brne	.+4      	; 0x1684 <__fp_round+0x18>
    1680:	60 ff       	sbrs	r22, 0
    1682:	04 c0       	rjmp	.+8      	; 0x168c <__fp_round+0x20>
    1684:	6f 5f       	subi	r22, 0xFF	; 255
    1686:	7f 4f       	sbci	r23, 0xFF	; 255
    1688:	8f 4f       	sbci	r24, 0xFF	; 255
    168a:	9f 4f       	sbci	r25, 0xFF	; 255
    168c:	08 95       	ret

0000168e <__fp_split3>:
    168e:	57 fd       	sbrc	r21, 7
    1690:	90 58       	subi	r25, 0x80	; 128
    1692:	44 0f       	add	r20, r20
    1694:	55 1f       	adc	r21, r21
    1696:	59 f0       	breq	.+22     	; 0x16ae <__fp_splitA+0x10>
    1698:	5f 3f       	cpi	r21, 0xFF	; 255
    169a:	71 f0       	breq	.+28     	; 0x16b8 <__fp_splitA+0x1a>
    169c:	47 95       	ror	r20

0000169e <__fp_splitA>:
    169e:	88 0f       	add	r24, r24
    16a0:	97 fb       	bst	r25, 7
    16a2:	99 1f       	adc	r25, r25
    16a4:	61 f0       	breq	.+24     	; 0x16be <__fp_splitA+0x20>
    16a6:	9f 3f       	cpi	r25, 0xFF	; 255
    16a8:	79 f0       	breq	.+30     	; 0x16c8 <__fp_splitA+0x2a>
    16aa:	87 95       	ror	r24
    16ac:	08 95       	ret
    16ae:	12 16       	cp	r1, r18
    16b0:	13 06       	cpc	r1, r19
    16b2:	14 06       	cpc	r1, r20
    16b4:	55 1f       	adc	r21, r21
    16b6:	f2 cf       	rjmp	.-28     	; 0x169c <__fp_split3+0xe>
    16b8:	46 95       	lsr	r20
    16ba:	f1 df       	rcall	.-30     	; 0x169e <__fp_splitA>
    16bc:	08 c0       	rjmp	.+16     	; 0x16ce <__fp_splitA+0x30>
    16be:	16 16       	cp	r1, r22
    16c0:	17 06       	cpc	r1, r23
    16c2:	18 06       	cpc	r1, r24
    16c4:	99 1f       	adc	r25, r25
    16c6:	f1 cf       	rjmp	.-30     	; 0x16aa <__fp_splitA+0xc>
    16c8:	86 95       	lsr	r24
    16ca:	71 05       	cpc	r23, r1
    16cc:	61 05       	cpc	r22, r1
    16ce:	08 94       	sec
    16d0:	08 95       	ret

000016d2 <__fp_zero>:
    16d2:	e8 94       	clt

000016d4 <__fp_szero>:
    16d4:	bb 27       	eor	r27, r27
    16d6:	66 27       	eor	r22, r22
    16d8:	77 27       	eor	r23, r23
    16da:	cb 01       	movw	r24, r22
    16dc:	97 f9       	bld	r25, 7
    16de:	08 95       	ret

000016e0 <__gesf2>:
    16e0:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <__fp_cmp>
    16e4:	08 f4       	brcc	.+2      	; 0x16e8 <__gesf2+0x8>
    16e6:	8f ef       	ldi	r24, 0xFF	; 255
    16e8:	08 95       	ret

000016ea <inverse>:
    16ea:	9b 01       	movw	r18, r22
    16ec:	ac 01       	movw	r20, r24
    16ee:	60 e0       	ldi	r22, 0x00	; 0
    16f0:	70 e0       	ldi	r23, 0x00	; 0
    16f2:	80 e8       	ldi	r24, 0x80	; 128
    16f4:	9f e3       	ldi	r25, 0x3F	; 63
    16f6:	0c 94 ef 09 	jmp	0x13de	; 0x13de <__divsf3>

000016fa <__mulsf3>:
    16fa:	0e 94 90 0b 	call	0x1720	; 0x1720 <__mulsf3x>
    16fe:	0c 94 36 0b 	jmp	0x166c	; 0x166c <__fp_round>
    1702:	0e 94 28 0b 	call	0x1650	; 0x1650 <__fp_pscA>
    1706:	38 f0       	brcs	.+14     	; 0x1716 <__mulsf3+0x1c>
    1708:	0e 94 2f 0b 	call	0x165e	; 0x165e <__fp_pscB>
    170c:	20 f0       	brcs	.+8      	; 0x1716 <__mulsf3+0x1c>
    170e:	95 23       	and	r25, r21
    1710:	11 f0       	breq	.+4      	; 0x1716 <__mulsf3+0x1c>
    1712:	0c 94 f8 0a 	jmp	0x15f0	; 0x15f0 <__fp_inf>
    1716:	0c 94 fe 0a 	jmp	0x15fc	; 0x15fc <__fp_nan>
    171a:	11 24       	eor	r1, r1
    171c:	0c 94 6a 0b 	jmp	0x16d4	; 0x16d4 <__fp_szero>

00001720 <__mulsf3x>:
    1720:	0e 94 47 0b 	call	0x168e	; 0x168e <__fp_split3>
    1724:	70 f3       	brcs	.-36     	; 0x1702 <__mulsf3+0x8>

00001726 <__mulsf3_pse>:
    1726:	95 9f       	mul	r25, r21
    1728:	c1 f3       	breq	.-16     	; 0x171a <__mulsf3+0x20>
    172a:	95 0f       	add	r25, r21
    172c:	50 e0       	ldi	r21, 0x00	; 0
    172e:	55 1f       	adc	r21, r21
    1730:	62 9f       	mul	r22, r18
    1732:	f0 01       	movw	r30, r0
    1734:	72 9f       	mul	r23, r18
    1736:	bb 27       	eor	r27, r27
    1738:	f0 0d       	add	r31, r0
    173a:	b1 1d       	adc	r27, r1
    173c:	63 9f       	mul	r22, r19
    173e:	aa 27       	eor	r26, r26
    1740:	f0 0d       	add	r31, r0
    1742:	b1 1d       	adc	r27, r1
    1744:	aa 1f       	adc	r26, r26
    1746:	64 9f       	mul	r22, r20
    1748:	66 27       	eor	r22, r22
    174a:	b0 0d       	add	r27, r0
    174c:	a1 1d       	adc	r26, r1
    174e:	66 1f       	adc	r22, r22
    1750:	82 9f       	mul	r24, r18
    1752:	22 27       	eor	r18, r18
    1754:	b0 0d       	add	r27, r0
    1756:	a1 1d       	adc	r26, r1
    1758:	62 1f       	adc	r22, r18
    175a:	73 9f       	mul	r23, r19
    175c:	b0 0d       	add	r27, r0
    175e:	a1 1d       	adc	r26, r1
    1760:	62 1f       	adc	r22, r18
    1762:	83 9f       	mul	r24, r19
    1764:	a0 0d       	add	r26, r0
    1766:	61 1d       	adc	r22, r1
    1768:	22 1f       	adc	r18, r18
    176a:	74 9f       	mul	r23, r20
    176c:	33 27       	eor	r19, r19
    176e:	a0 0d       	add	r26, r0
    1770:	61 1d       	adc	r22, r1
    1772:	23 1f       	adc	r18, r19
    1774:	84 9f       	mul	r24, r20
    1776:	60 0d       	add	r22, r0
    1778:	21 1d       	adc	r18, r1
    177a:	82 2f       	mov	r24, r18
    177c:	76 2f       	mov	r23, r22
    177e:	6a 2f       	mov	r22, r26
    1780:	11 24       	eor	r1, r1
    1782:	9f 57       	subi	r25, 0x7F	; 127
    1784:	50 40       	sbci	r21, 0x00	; 0
    1786:	9a f0       	brmi	.+38     	; 0x17ae <__mulsf3_pse+0x88>
    1788:	f1 f0       	breq	.+60     	; 0x17c6 <__mulsf3_pse+0xa0>
    178a:	88 23       	and	r24, r24
    178c:	4a f0       	brmi	.+18     	; 0x17a0 <__mulsf3_pse+0x7a>
    178e:	ee 0f       	add	r30, r30
    1790:	ff 1f       	adc	r31, r31
    1792:	bb 1f       	adc	r27, r27
    1794:	66 1f       	adc	r22, r22
    1796:	77 1f       	adc	r23, r23
    1798:	88 1f       	adc	r24, r24
    179a:	91 50       	subi	r25, 0x01	; 1
    179c:	50 40       	sbci	r21, 0x00	; 0
    179e:	a9 f7       	brne	.-22     	; 0x178a <__mulsf3_pse+0x64>
    17a0:	9e 3f       	cpi	r25, 0xFE	; 254
    17a2:	51 05       	cpc	r21, r1
    17a4:	80 f0       	brcs	.+32     	; 0x17c6 <__mulsf3_pse+0xa0>
    17a6:	0c 94 f8 0a 	jmp	0x15f0	; 0x15f0 <__fp_inf>
    17aa:	0c 94 6a 0b 	jmp	0x16d4	; 0x16d4 <__fp_szero>
    17ae:	5f 3f       	cpi	r21, 0xFF	; 255
    17b0:	e4 f3       	brlt	.-8      	; 0x17aa <__mulsf3_pse+0x84>
    17b2:	98 3e       	cpi	r25, 0xE8	; 232
    17b4:	d4 f3       	brlt	.-12     	; 0x17aa <__mulsf3_pse+0x84>
    17b6:	86 95       	lsr	r24
    17b8:	77 95       	ror	r23
    17ba:	67 95       	ror	r22
    17bc:	b7 95       	ror	r27
    17be:	f7 95       	ror	r31
    17c0:	e7 95       	ror	r30
    17c2:	9f 5f       	subi	r25, 0xFF	; 255
    17c4:	c1 f7       	brne	.-16     	; 0x17b6 <__mulsf3_pse+0x90>
    17c6:	fe 2b       	or	r31, r30
    17c8:	88 0f       	add	r24, r24
    17ca:	91 1d       	adc	r25, r1
    17cc:	96 95       	lsr	r25
    17ce:	87 95       	ror	r24
    17d0:	97 f9       	bld	r25, 7
    17d2:	08 95       	ret

000017d4 <square>:
    17d4:	9b 01       	movw	r18, r22
    17d6:	ac 01       	movw	r20, r24
    17d8:	0c 94 7d 0b 	jmp	0x16fa	; 0x16fa <__mulsf3>

000017dc <strcpy>:
    17dc:	fb 01       	movw	r30, r22
    17de:	dc 01       	movw	r26, r24
    17e0:	01 90       	ld	r0, Z+
    17e2:	0d 92       	st	X+, r0
    17e4:	00 20       	and	r0, r0
    17e6:	e1 f7       	brne	.-8      	; 0x17e0 <strcpy+0x4>
    17e8:	08 95       	ret

000017ea <fdevopen>:
    17ea:	0f 93       	push	r16
    17ec:	1f 93       	push	r17
    17ee:	cf 93       	push	r28
    17f0:	df 93       	push	r29
    17f2:	00 97       	sbiw	r24, 0x00	; 0
    17f4:	31 f4       	brne	.+12     	; 0x1802 <fdevopen+0x18>
    17f6:	61 15       	cp	r22, r1
    17f8:	71 05       	cpc	r23, r1
    17fa:	19 f4       	brne	.+6      	; 0x1802 <fdevopen+0x18>
    17fc:	80 e0       	ldi	r24, 0x00	; 0
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	3a c0       	rjmp	.+116    	; 0x1876 <fdevopen+0x8c>
    1802:	8b 01       	movw	r16, r22
    1804:	ec 01       	movw	r28, r24
    1806:	6e e0       	ldi	r22, 0x0E	; 14
    1808:	70 e0       	ldi	r23, 0x00	; 0
    180a:	81 e0       	ldi	r24, 0x01	; 1
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	0e 94 67 0e 	call	0x1cce	; 0x1cce <calloc>
    1812:	fc 01       	movw	r30, r24
    1814:	89 2b       	or	r24, r25
    1816:	91 f3       	breq	.-28     	; 0x17fc <fdevopen+0x12>
    1818:	80 e8       	ldi	r24, 0x80	; 128
    181a:	83 83       	std	Z+3, r24	; 0x03
    181c:	01 15       	cp	r16, r1
    181e:	11 05       	cpc	r17, r1
    1820:	71 f0       	breq	.+28     	; 0x183e <fdevopen+0x54>
    1822:	13 87       	std	Z+11, r17	; 0x0b
    1824:	02 87       	std	Z+10, r16	; 0x0a
    1826:	81 e8       	ldi	r24, 0x81	; 129
    1828:	83 83       	std	Z+3, r24	; 0x03
    182a:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <__iob>
    182e:	90 91 ab 03 	lds	r25, 0x03AB	; 0x8003ab <__iob+0x1>
    1832:	89 2b       	or	r24, r25
    1834:	21 f4       	brne	.+8      	; 0x183e <fdevopen+0x54>
    1836:	f0 93 ab 03 	sts	0x03AB, r31	; 0x8003ab <__iob+0x1>
    183a:	e0 93 aa 03 	sts	0x03AA, r30	; 0x8003aa <__iob>
    183e:	20 97       	sbiw	r28, 0x00	; 0
    1840:	c9 f0       	breq	.+50     	; 0x1874 <fdevopen+0x8a>
    1842:	d1 87       	std	Z+9, r29	; 0x09
    1844:	c0 87       	std	Z+8, r28	; 0x08
    1846:	83 81       	ldd	r24, Z+3	; 0x03
    1848:	82 60       	ori	r24, 0x02	; 2
    184a:	83 83       	std	Z+3, r24	; 0x03
    184c:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <__iob+0x2>
    1850:	90 91 ad 03 	lds	r25, 0x03AD	; 0x8003ad <__iob+0x3>
    1854:	89 2b       	or	r24, r25
    1856:	71 f4       	brne	.+28     	; 0x1874 <fdevopen+0x8a>
    1858:	f0 93 ad 03 	sts	0x03AD, r31	; 0x8003ad <__iob+0x3>
    185c:	e0 93 ac 03 	sts	0x03AC, r30	; 0x8003ac <__iob+0x2>
    1860:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <__iob+0x4>
    1864:	90 91 af 03 	lds	r25, 0x03AF	; 0x8003af <__iob+0x5>
    1868:	89 2b       	or	r24, r25
    186a:	21 f4       	brne	.+8      	; 0x1874 <fdevopen+0x8a>
    186c:	f0 93 af 03 	sts	0x03AF, r31	; 0x8003af <__iob+0x5>
    1870:	e0 93 ae 03 	sts	0x03AE, r30	; 0x8003ae <__iob+0x4>
    1874:	cf 01       	movw	r24, r30
    1876:	df 91       	pop	r29
    1878:	cf 91       	pop	r28
    187a:	1f 91       	pop	r17
    187c:	0f 91       	pop	r16
    187e:	08 95       	ret

00001880 <printf>:
    1880:	a0 e0       	ldi	r26, 0x00	; 0
    1882:	b0 e0       	ldi	r27, 0x00	; 0
    1884:	e6 e4       	ldi	r30, 0x46	; 70
    1886:	fc e0       	ldi	r31, 0x0C	; 12
    1888:	0c 94 6b 10 	jmp	0x20d6	; 0x20d6 <__prologue_saves__+0x20>
    188c:	ae 01       	movw	r20, r28
    188e:	4b 5f       	subi	r20, 0xFB	; 251
    1890:	5f 4f       	sbci	r21, 0xFF	; 255
    1892:	fa 01       	movw	r30, r20
    1894:	61 91       	ld	r22, Z+
    1896:	71 91       	ld	r23, Z+
    1898:	af 01       	movw	r20, r30
    189a:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <__iob+0x2>
    189e:	90 91 ad 03 	lds	r25, 0x03AD	; 0x8003ad <__iob+0x3>
    18a2:	0e 94 86 0c 	call	0x190c	; 0x190c <vfprintf>
    18a6:	e2 e0       	ldi	r30, 0x02	; 2
    18a8:	0c 94 87 10 	jmp	0x210e	; 0x210e <__epilogue_restores__+0x20>

000018ac <puts>:
    18ac:	0f 93       	push	r16
    18ae:	1f 93       	push	r17
    18b0:	cf 93       	push	r28
    18b2:	df 93       	push	r29
    18b4:	e0 91 ac 03 	lds	r30, 0x03AC	; 0x8003ac <__iob+0x2>
    18b8:	f0 91 ad 03 	lds	r31, 0x03AD	; 0x8003ad <__iob+0x3>
    18bc:	23 81       	ldd	r18, Z+3	; 0x03
    18be:	21 ff       	sbrs	r18, 1
    18c0:	1b c0       	rjmp	.+54     	; 0x18f8 <puts+0x4c>
    18c2:	8c 01       	movw	r16, r24
    18c4:	d0 e0       	ldi	r29, 0x00	; 0
    18c6:	c0 e0       	ldi	r28, 0x00	; 0
    18c8:	f8 01       	movw	r30, r16
    18ca:	81 91       	ld	r24, Z+
    18cc:	8f 01       	movw	r16, r30
    18ce:	60 91 ac 03 	lds	r22, 0x03AC	; 0x8003ac <__iob+0x2>
    18d2:	70 91 ad 03 	lds	r23, 0x03AD	; 0x8003ad <__iob+0x3>
    18d6:	db 01       	movw	r26, r22
    18d8:	18 96       	adiw	r26, 0x08	; 8
    18da:	ed 91       	ld	r30, X+
    18dc:	fc 91       	ld	r31, X
    18de:	19 97       	sbiw	r26, 0x09	; 9
    18e0:	88 23       	and	r24, r24
    18e2:	31 f0       	breq	.+12     	; 0x18f0 <puts+0x44>
    18e4:	09 95       	icall
    18e6:	89 2b       	or	r24, r25
    18e8:	79 f3       	breq	.-34     	; 0x18c8 <puts+0x1c>
    18ea:	df ef       	ldi	r29, 0xFF	; 255
    18ec:	cf ef       	ldi	r28, 0xFF	; 255
    18ee:	ec cf       	rjmp	.-40     	; 0x18c8 <puts+0x1c>
    18f0:	8a e0       	ldi	r24, 0x0A	; 10
    18f2:	09 95       	icall
    18f4:	89 2b       	or	r24, r25
    18f6:	19 f0       	breq	.+6      	; 0x18fe <puts+0x52>
    18f8:	8f ef       	ldi	r24, 0xFF	; 255
    18fa:	9f ef       	ldi	r25, 0xFF	; 255
    18fc:	02 c0       	rjmp	.+4      	; 0x1902 <puts+0x56>
    18fe:	8d 2f       	mov	r24, r29
    1900:	9c 2f       	mov	r25, r28
    1902:	df 91       	pop	r29
    1904:	cf 91       	pop	r28
    1906:	1f 91       	pop	r17
    1908:	0f 91       	pop	r16
    190a:	08 95       	ret

0000190c <vfprintf>:
    190c:	ab e0       	ldi	r26, 0x0B	; 11
    190e:	b0 e0       	ldi	r27, 0x00	; 0
    1910:	ec e8       	ldi	r30, 0x8C	; 140
    1912:	fc e0       	ldi	r31, 0x0C	; 12
    1914:	0c 94 5b 10 	jmp	0x20b6	; 0x20b6 <__prologue_saves__>
    1918:	6c 01       	movw	r12, r24
    191a:	7b 01       	movw	r14, r22
    191c:	8a 01       	movw	r16, r20
    191e:	fc 01       	movw	r30, r24
    1920:	17 82       	std	Z+7, r1	; 0x07
    1922:	16 82       	std	Z+6, r1	; 0x06
    1924:	83 81       	ldd	r24, Z+3	; 0x03
    1926:	81 ff       	sbrs	r24, 1
    1928:	cc c1       	rjmp	.+920    	; 0x1cc2 <vfprintf+0x3b6>
    192a:	ce 01       	movw	r24, r28
    192c:	01 96       	adiw	r24, 0x01	; 1
    192e:	3c 01       	movw	r6, r24
    1930:	f6 01       	movw	r30, r12
    1932:	93 81       	ldd	r25, Z+3	; 0x03
    1934:	f7 01       	movw	r30, r14
    1936:	93 fd       	sbrc	r25, 3
    1938:	85 91       	lpm	r24, Z+
    193a:	93 ff       	sbrs	r25, 3
    193c:	81 91       	ld	r24, Z+
    193e:	7f 01       	movw	r14, r30
    1940:	88 23       	and	r24, r24
    1942:	09 f4       	brne	.+2      	; 0x1946 <vfprintf+0x3a>
    1944:	ba c1       	rjmp	.+884    	; 0x1cba <vfprintf+0x3ae>
    1946:	85 32       	cpi	r24, 0x25	; 37
    1948:	39 f4       	brne	.+14     	; 0x1958 <vfprintf+0x4c>
    194a:	93 fd       	sbrc	r25, 3
    194c:	85 91       	lpm	r24, Z+
    194e:	93 ff       	sbrs	r25, 3
    1950:	81 91       	ld	r24, Z+
    1952:	7f 01       	movw	r14, r30
    1954:	85 32       	cpi	r24, 0x25	; 37
    1956:	29 f4       	brne	.+10     	; 0x1962 <vfprintf+0x56>
    1958:	b6 01       	movw	r22, r12
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <fputc>
    1960:	e7 cf       	rjmp	.-50     	; 0x1930 <vfprintf+0x24>
    1962:	91 2c       	mov	r9, r1
    1964:	21 2c       	mov	r2, r1
    1966:	31 2c       	mov	r3, r1
    1968:	ff e1       	ldi	r31, 0x1F	; 31
    196a:	f3 15       	cp	r31, r3
    196c:	d8 f0       	brcs	.+54     	; 0x19a4 <vfprintf+0x98>
    196e:	8b 32       	cpi	r24, 0x2B	; 43
    1970:	79 f0       	breq	.+30     	; 0x1990 <vfprintf+0x84>
    1972:	38 f4       	brcc	.+14     	; 0x1982 <vfprintf+0x76>
    1974:	80 32       	cpi	r24, 0x20	; 32
    1976:	79 f0       	breq	.+30     	; 0x1996 <vfprintf+0x8a>
    1978:	83 32       	cpi	r24, 0x23	; 35
    197a:	a1 f4       	brne	.+40     	; 0x19a4 <vfprintf+0x98>
    197c:	23 2d       	mov	r18, r3
    197e:	20 61       	ori	r18, 0x10	; 16
    1980:	1d c0       	rjmp	.+58     	; 0x19bc <vfprintf+0xb0>
    1982:	8d 32       	cpi	r24, 0x2D	; 45
    1984:	61 f0       	breq	.+24     	; 0x199e <vfprintf+0x92>
    1986:	80 33       	cpi	r24, 0x30	; 48
    1988:	69 f4       	brne	.+26     	; 0x19a4 <vfprintf+0x98>
    198a:	23 2d       	mov	r18, r3
    198c:	21 60       	ori	r18, 0x01	; 1
    198e:	16 c0       	rjmp	.+44     	; 0x19bc <vfprintf+0xb0>
    1990:	83 2d       	mov	r24, r3
    1992:	82 60       	ori	r24, 0x02	; 2
    1994:	38 2e       	mov	r3, r24
    1996:	e3 2d       	mov	r30, r3
    1998:	e4 60       	ori	r30, 0x04	; 4
    199a:	3e 2e       	mov	r3, r30
    199c:	2a c0       	rjmp	.+84     	; 0x19f2 <vfprintf+0xe6>
    199e:	f3 2d       	mov	r31, r3
    19a0:	f8 60       	ori	r31, 0x08	; 8
    19a2:	1d c0       	rjmp	.+58     	; 0x19de <vfprintf+0xd2>
    19a4:	37 fc       	sbrc	r3, 7
    19a6:	2d c0       	rjmp	.+90     	; 0x1a02 <vfprintf+0xf6>
    19a8:	20 ed       	ldi	r18, 0xD0	; 208
    19aa:	28 0f       	add	r18, r24
    19ac:	2a 30       	cpi	r18, 0x0A	; 10
    19ae:	40 f0       	brcs	.+16     	; 0x19c0 <vfprintf+0xb4>
    19b0:	8e 32       	cpi	r24, 0x2E	; 46
    19b2:	b9 f4       	brne	.+46     	; 0x19e2 <vfprintf+0xd6>
    19b4:	36 fc       	sbrc	r3, 6
    19b6:	81 c1       	rjmp	.+770    	; 0x1cba <vfprintf+0x3ae>
    19b8:	23 2d       	mov	r18, r3
    19ba:	20 64       	ori	r18, 0x40	; 64
    19bc:	32 2e       	mov	r3, r18
    19be:	19 c0       	rjmp	.+50     	; 0x19f2 <vfprintf+0xe6>
    19c0:	36 fe       	sbrs	r3, 6
    19c2:	06 c0       	rjmp	.+12     	; 0x19d0 <vfprintf+0xc4>
    19c4:	8a e0       	ldi	r24, 0x0A	; 10
    19c6:	98 9e       	mul	r9, r24
    19c8:	20 0d       	add	r18, r0
    19ca:	11 24       	eor	r1, r1
    19cc:	92 2e       	mov	r9, r18
    19ce:	11 c0       	rjmp	.+34     	; 0x19f2 <vfprintf+0xe6>
    19d0:	ea e0       	ldi	r30, 0x0A	; 10
    19d2:	2e 9e       	mul	r2, r30
    19d4:	20 0d       	add	r18, r0
    19d6:	11 24       	eor	r1, r1
    19d8:	22 2e       	mov	r2, r18
    19da:	f3 2d       	mov	r31, r3
    19dc:	f0 62       	ori	r31, 0x20	; 32
    19de:	3f 2e       	mov	r3, r31
    19e0:	08 c0       	rjmp	.+16     	; 0x19f2 <vfprintf+0xe6>
    19e2:	8c 36       	cpi	r24, 0x6C	; 108
    19e4:	21 f4       	brne	.+8      	; 0x19ee <vfprintf+0xe2>
    19e6:	83 2d       	mov	r24, r3
    19e8:	80 68       	ori	r24, 0x80	; 128
    19ea:	38 2e       	mov	r3, r24
    19ec:	02 c0       	rjmp	.+4      	; 0x19f2 <vfprintf+0xe6>
    19ee:	88 36       	cpi	r24, 0x68	; 104
    19f0:	41 f4       	brne	.+16     	; 0x1a02 <vfprintf+0xf6>
    19f2:	f7 01       	movw	r30, r14
    19f4:	93 fd       	sbrc	r25, 3
    19f6:	85 91       	lpm	r24, Z+
    19f8:	93 ff       	sbrs	r25, 3
    19fa:	81 91       	ld	r24, Z+
    19fc:	7f 01       	movw	r14, r30
    19fe:	81 11       	cpse	r24, r1
    1a00:	b3 cf       	rjmp	.-154    	; 0x1968 <vfprintf+0x5c>
    1a02:	98 2f       	mov	r25, r24
    1a04:	9f 7d       	andi	r25, 0xDF	; 223
    1a06:	95 54       	subi	r25, 0x45	; 69
    1a08:	93 30       	cpi	r25, 0x03	; 3
    1a0a:	28 f4       	brcc	.+10     	; 0x1a16 <vfprintf+0x10a>
    1a0c:	0c 5f       	subi	r16, 0xFC	; 252
    1a0e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a10:	9f e3       	ldi	r25, 0x3F	; 63
    1a12:	99 83       	std	Y+1, r25	; 0x01
    1a14:	0d c0       	rjmp	.+26     	; 0x1a30 <vfprintf+0x124>
    1a16:	83 36       	cpi	r24, 0x63	; 99
    1a18:	31 f0       	breq	.+12     	; 0x1a26 <vfprintf+0x11a>
    1a1a:	83 37       	cpi	r24, 0x73	; 115
    1a1c:	71 f0       	breq	.+28     	; 0x1a3a <vfprintf+0x12e>
    1a1e:	83 35       	cpi	r24, 0x53	; 83
    1a20:	09 f0       	breq	.+2      	; 0x1a24 <vfprintf+0x118>
    1a22:	59 c0       	rjmp	.+178    	; 0x1ad6 <vfprintf+0x1ca>
    1a24:	21 c0       	rjmp	.+66     	; 0x1a68 <vfprintf+0x15c>
    1a26:	f8 01       	movw	r30, r16
    1a28:	80 81       	ld	r24, Z
    1a2a:	89 83       	std	Y+1, r24	; 0x01
    1a2c:	0e 5f       	subi	r16, 0xFE	; 254
    1a2e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a30:	88 24       	eor	r8, r8
    1a32:	83 94       	inc	r8
    1a34:	91 2c       	mov	r9, r1
    1a36:	53 01       	movw	r10, r6
    1a38:	13 c0       	rjmp	.+38     	; 0x1a60 <vfprintf+0x154>
    1a3a:	28 01       	movw	r4, r16
    1a3c:	f2 e0       	ldi	r31, 0x02	; 2
    1a3e:	4f 0e       	add	r4, r31
    1a40:	51 1c       	adc	r5, r1
    1a42:	f8 01       	movw	r30, r16
    1a44:	a0 80       	ld	r10, Z
    1a46:	b1 80       	ldd	r11, Z+1	; 0x01
    1a48:	36 fe       	sbrs	r3, 6
    1a4a:	03 c0       	rjmp	.+6      	; 0x1a52 <vfprintf+0x146>
    1a4c:	69 2d       	mov	r22, r9
    1a4e:	70 e0       	ldi	r23, 0x00	; 0
    1a50:	02 c0       	rjmp	.+4      	; 0x1a56 <vfprintf+0x14a>
    1a52:	6f ef       	ldi	r22, 0xFF	; 255
    1a54:	7f ef       	ldi	r23, 0xFF	; 255
    1a56:	c5 01       	movw	r24, r10
    1a58:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <strnlen>
    1a5c:	4c 01       	movw	r8, r24
    1a5e:	82 01       	movw	r16, r4
    1a60:	f3 2d       	mov	r31, r3
    1a62:	ff 77       	andi	r31, 0x7F	; 127
    1a64:	3f 2e       	mov	r3, r31
    1a66:	16 c0       	rjmp	.+44     	; 0x1a94 <vfprintf+0x188>
    1a68:	28 01       	movw	r4, r16
    1a6a:	22 e0       	ldi	r18, 0x02	; 2
    1a6c:	42 0e       	add	r4, r18
    1a6e:	51 1c       	adc	r5, r1
    1a70:	f8 01       	movw	r30, r16
    1a72:	a0 80       	ld	r10, Z
    1a74:	b1 80       	ldd	r11, Z+1	; 0x01
    1a76:	36 fe       	sbrs	r3, 6
    1a78:	03 c0       	rjmp	.+6      	; 0x1a80 <vfprintf+0x174>
    1a7a:	69 2d       	mov	r22, r9
    1a7c:	70 e0       	ldi	r23, 0x00	; 0
    1a7e:	02 c0       	rjmp	.+4      	; 0x1a84 <vfprintf+0x178>
    1a80:	6f ef       	ldi	r22, 0xFF	; 255
    1a82:	7f ef       	ldi	r23, 0xFF	; 255
    1a84:	c5 01       	movw	r24, r10
    1a86:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <strnlen_P>
    1a8a:	4c 01       	movw	r8, r24
    1a8c:	f3 2d       	mov	r31, r3
    1a8e:	f0 68       	ori	r31, 0x80	; 128
    1a90:	3f 2e       	mov	r3, r31
    1a92:	82 01       	movw	r16, r4
    1a94:	33 fc       	sbrc	r3, 3
    1a96:	1b c0       	rjmp	.+54     	; 0x1ace <vfprintf+0x1c2>
    1a98:	82 2d       	mov	r24, r2
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	88 16       	cp	r8, r24
    1a9e:	99 06       	cpc	r9, r25
    1aa0:	b0 f4       	brcc	.+44     	; 0x1ace <vfprintf+0x1c2>
    1aa2:	b6 01       	movw	r22, r12
    1aa4:	80 e2       	ldi	r24, 0x20	; 32
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <fputc>
    1aac:	2a 94       	dec	r2
    1aae:	f4 cf       	rjmp	.-24     	; 0x1a98 <vfprintf+0x18c>
    1ab0:	f5 01       	movw	r30, r10
    1ab2:	37 fc       	sbrc	r3, 7
    1ab4:	85 91       	lpm	r24, Z+
    1ab6:	37 fe       	sbrs	r3, 7
    1ab8:	81 91       	ld	r24, Z+
    1aba:	5f 01       	movw	r10, r30
    1abc:	b6 01       	movw	r22, r12
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <fputc>
    1ac4:	21 10       	cpse	r2, r1
    1ac6:	2a 94       	dec	r2
    1ac8:	21 e0       	ldi	r18, 0x01	; 1
    1aca:	82 1a       	sub	r8, r18
    1acc:	91 08       	sbc	r9, r1
    1ace:	81 14       	cp	r8, r1
    1ad0:	91 04       	cpc	r9, r1
    1ad2:	71 f7       	brne	.-36     	; 0x1ab0 <vfprintf+0x1a4>
    1ad4:	e8 c0       	rjmp	.+464    	; 0x1ca6 <vfprintf+0x39a>
    1ad6:	84 36       	cpi	r24, 0x64	; 100
    1ad8:	11 f0       	breq	.+4      	; 0x1ade <vfprintf+0x1d2>
    1ada:	89 36       	cpi	r24, 0x69	; 105
    1adc:	41 f5       	brne	.+80     	; 0x1b2e <vfprintf+0x222>
    1ade:	f8 01       	movw	r30, r16
    1ae0:	37 fe       	sbrs	r3, 7
    1ae2:	07 c0       	rjmp	.+14     	; 0x1af2 <vfprintf+0x1e6>
    1ae4:	60 81       	ld	r22, Z
    1ae6:	71 81       	ldd	r23, Z+1	; 0x01
    1ae8:	82 81       	ldd	r24, Z+2	; 0x02
    1aea:	93 81       	ldd	r25, Z+3	; 0x03
    1aec:	0c 5f       	subi	r16, 0xFC	; 252
    1aee:	1f 4f       	sbci	r17, 0xFF	; 255
    1af0:	08 c0       	rjmp	.+16     	; 0x1b02 <vfprintf+0x1f6>
    1af2:	60 81       	ld	r22, Z
    1af4:	71 81       	ldd	r23, Z+1	; 0x01
    1af6:	07 2e       	mov	r0, r23
    1af8:	00 0c       	add	r0, r0
    1afa:	88 0b       	sbc	r24, r24
    1afc:	99 0b       	sbc	r25, r25
    1afe:	0e 5f       	subi	r16, 0xFE	; 254
    1b00:	1f 4f       	sbci	r17, 0xFF	; 255
    1b02:	f3 2d       	mov	r31, r3
    1b04:	ff 76       	andi	r31, 0x6F	; 111
    1b06:	3f 2e       	mov	r3, r31
    1b08:	97 ff       	sbrs	r25, 7
    1b0a:	09 c0       	rjmp	.+18     	; 0x1b1e <vfprintf+0x212>
    1b0c:	90 95       	com	r25
    1b0e:	80 95       	com	r24
    1b10:	70 95       	com	r23
    1b12:	61 95       	neg	r22
    1b14:	7f 4f       	sbci	r23, 0xFF	; 255
    1b16:	8f 4f       	sbci	r24, 0xFF	; 255
    1b18:	9f 4f       	sbci	r25, 0xFF	; 255
    1b1a:	f0 68       	ori	r31, 0x80	; 128
    1b1c:	3f 2e       	mov	r3, r31
    1b1e:	2a e0       	ldi	r18, 0x0A	; 10
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	a3 01       	movw	r20, r6
    1b24:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <__ultoa_invert>
    1b28:	88 2e       	mov	r8, r24
    1b2a:	86 18       	sub	r8, r6
    1b2c:	45 c0       	rjmp	.+138    	; 0x1bb8 <vfprintf+0x2ac>
    1b2e:	85 37       	cpi	r24, 0x75	; 117
    1b30:	31 f4       	brne	.+12     	; 0x1b3e <vfprintf+0x232>
    1b32:	23 2d       	mov	r18, r3
    1b34:	2f 7e       	andi	r18, 0xEF	; 239
    1b36:	b2 2e       	mov	r11, r18
    1b38:	2a e0       	ldi	r18, 0x0A	; 10
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	25 c0       	rjmp	.+74     	; 0x1b88 <vfprintf+0x27c>
    1b3e:	93 2d       	mov	r25, r3
    1b40:	99 7f       	andi	r25, 0xF9	; 249
    1b42:	b9 2e       	mov	r11, r25
    1b44:	8f 36       	cpi	r24, 0x6F	; 111
    1b46:	c1 f0       	breq	.+48     	; 0x1b78 <vfprintf+0x26c>
    1b48:	18 f4       	brcc	.+6      	; 0x1b50 <vfprintf+0x244>
    1b4a:	88 35       	cpi	r24, 0x58	; 88
    1b4c:	79 f0       	breq	.+30     	; 0x1b6c <vfprintf+0x260>
    1b4e:	b5 c0       	rjmp	.+362    	; 0x1cba <vfprintf+0x3ae>
    1b50:	80 37       	cpi	r24, 0x70	; 112
    1b52:	19 f0       	breq	.+6      	; 0x1b5a <vfprintf+0x24e>
    1b54:	88 37       	cpi	r24, 0x78	; 120
    1b56:	21 f0       	breq	.+8      	; 0x1b60 <vfprintf+0x254>
    1b58:	b0 c0       	rjmp	.+352    	; 0x1cba <vfprintf+0x3ae>
    1b5a:	e9 2f       	mov	r30, r25
    1b5c:	e0 61       	ori	r30, 0x10	; 16
    1b5e:	be 2e       	mov	r11, r30
    1b60:	b4 fe       	sbrs	r11, 4
    1b62:	0d c0       	rjmp	.+26     	; 0x1b7e <vfprintf+0x272>
    1b64:	fb 2d       	mov	r31, r11
    1b66:	f4 60       	ori	r31, 0x04	; 4
    1b68:	bf 2e       	mov	r11, r31
    1b6a:	09 c0       	rjmp	.+18     	; 0x1b7e <vfprintf+0x272>
    1b6c:	34 fe       	sbrs	r3, 4
    1b6e:	0a c0       	rjmp	.+20     	; 0x1b84 <vfprintf+0x278>
    1b70:	29 2f       	mov	r18, r25
    1b72:	26 60       	ori	r18, 0x06	; 6
    1b74:	b2 2e       	mov	r11, r18
    1b76:	06 c0       	rjmp	.+12     	; 0x1b84 <vfprintf+0x278>
    1b78:	28 e0       	ldi	r18, 0x08	; 8
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	05 c0       	rjmp	.+10     	; 0x1b88 <vfprintf+0x27c>
    1b7e:	20 e1       	ldi	r18, 0x10	; 16
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	02 c0       	rjmp	.+4      	; 0x1b88 <vfprintf+0x27c>
    1b84:	20 e1       	ldi	r18, 0x10	; 16
    1b86:	32 e0       	ldi	r19, 0x02	; 2
    1b88:	f8 01       	movw	r30, r16
    1b8a:	b7 fe       	sbrs	r11, 7
    1b8c:	07 c0       	rjmp	.+14     	; 0x1b9c <vfprintf+0x290>
    1b8e:	60 81       	ld	r22, Z
    1b90:	71 81       	ldd	r23, Z+1	; 0x01
    1b92:	82 81       	ldd	r24, Z+2	; 0x02
    1b94:	93 81       	ldd	r25, Z+3	; 0x03
    1b96:	0c 5f       	subi	r16, 0xFC	; 252
    1b98:	1f 4f       	sbci	r17, 0xFF	; 255
    1b9a:	06 c0       	rjmp	.+12     	; 0x1ba8 <vfprintf+0x29c>
    1b9c:	60 81       	ld	r22, Z
    1b9e:	71 81       	ldd	r23, Z+1	; 0x01
    1ba0:	80 e0       	ldi	r24, 0x00	; 0
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	0e 5f       	subi	r16, 0xFE	; 254
    1ba6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ba8:	a3 01       	movw	r20, r6
    1baa:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <__ultoa_invert>
    1bae:	88 2e       	mov	r8, r24
    1bb0:	86 18       	sub	r8, r6
    1bb2:	fb 2d       	mov	r31, r11
    1bb4:	ff 77       	andi	r31, 0x7F	; 127
    1bb6:	3f 2e       	mov	r3, r31
    1bb8:	36 fe       	sbrs	r3, 6
    1bba:	0d c0       	rjmp	.+26     	; 0x1bd6 <vfprintf+0x2ca>
    1bbc:	23 2d       	mov	r18, r3
    1bbe:	2e 7f       	andi	r18, 0xFE	; 254
    1bc0:	a2 2e       	mov	r10, r18
    1bc2:	89 14       	cp	r8, r9
    1bc4:	58 f4       	brcc	.+22     	; 0x1bdc <vfprintf+0x2d0>
    1bc6:	34 fe       	sbrs	r3, 4
    1bc8:	0b c0       	rjmp	.+22     	; 0x1be0 <vfprintf+0x2d4>
    1bca:	32 fc       	sbrc	r3, 2
    1bcc:	09 c0       	rjmp	.+18     	; 0x1be0 <vfprintf+0x2d4>
    1bce:	83 2d       	mov	r24, r3
    1bd0:	8e 7e       	andi	r24, 0xEE	; 238
    1bd2:	a8 2e       	mov	r10, r24
    1bd4:	05 c0       	rjmp	.+10     	; 0x1be0 <vfprintf+0x2d4>
    1bd6:	b8 2c       	mov	r11, r8
    1bd8:	a3 2c       	mov	r10, r3
    1bda:	03 c0       	rjmp	.+6      	; 0x1be2 <vfprintf+0x2d6>
    1bdc:	b8 2c       	mov	r11, r8
    1bde:	01 c0       	rjmp	.+2      	; 0x1be2 <vfprintf+0x2d6>
    1be0:	b9 2c       	mov	r11, r9
    1be2:	a4 fe       	sbrs	r10, 4
    1be4:	0f c0       	rjmp	.+30     	; 0x1c04 <vfprintf+0x2f8>
    1be6:	fe 01       	movw	r30, r28
    1be8:	e8 0d       	add	r30, r8
    1bea:	f1 1d       	adc	r31, r1
    1bec:	80 81       	ld	r24, Z
    1bee:	80 33       	cpi	r24, 0x30	; 48
    1bf0:	21 f4       	brne	.+8      	; 0x1bfa <vfprintf+0x2ee>
    1bf2:	9a 2d       	mov	r25, r10
    1bf4:	99 7e       	andi	r25, 0xE9	; 233
    1bf6:	a9 2e       	mov	r10, r25
    1bf8:	09 c0       	rjmp	.+18     	; 0x1c0c <vfprintf+0x300>
    1bfa:	a2 fe       	sbrs	r10, 2
    1bfc:	06 c0       	rjmp	.+12     	; 0x1c0a <vfprintf+0x2fe>
    1bfe:	b3 94       	inc	r11
    1c00:	b3 94       	inc	r11
    1c02:	04 c0       	rjmp	.+8      	; 0x1c0c <vfprintf+0x300>
    1c04:	8a 2d       	mov	r24, r10
    1c06:	86 78       	andi	r24, 0x86	; 134
    1c08:	09 f0       	breq	.+2      	; 0x1c0c <vfprintf+0x300>
    1c0a:	b3 94       	inc	r11
    1c0c:	a3 fc       	sbrc	r10, 3
    1c0e:	11 c0       	rjmp	.+34     	; 0x1c32 <vfprintf+0x326>
    1c10:	a0 fe       	sbrs	r10, 0
    1c12:	06 c0       	rjmp	.+12     	; 0x1c20 <vfprintf+0x314>
    1c14:	b2 14       	cp	r11, r2
    1c16:	88 f4       	brcc	.+34     	; 0x1c3a <vfprintf+0x32e>
    1c18:	28 0c       	add	r2, r8
    1c1a:	92 2c       	mov	r9, r2
    1c1c:	9b 18       	sub	r9, r11
    1c1e:	0e c0       	rjmp	.+28     	; 0x1c3c <vfprintf+0x330>
    1c20:	b2 14       	cp	r11, r2
    1c22:	60 f4       	brcc	.+24     	; 0x1c3c <vfprintf+0x330>
    1c24:	b6 01       	movw	r22, r12
    1c26:	80 e2       	ldi	r24, 0x20	; 32
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <fputc>
    1c2e:	b3 94       	inc	r11
    1c30:	f7 cf       	rjmp	.-18     	; 0x1c20 <vfprintf+0x314>
    1c32:	b2 14       	cp	r11, r2
    1c34:	18 f4       	brcc	.+6      	; 0x1c3c <vfprintf+0x330>
    1c36:	2b 18       	sub	r2, r11
    1c38:	02 c0       	rjmp	.+4      	; 0x1c3e <vfprintf+0x332>
    1c3a:	98 2c       	mov	r9, r8
    1c3c:	21 2c       	mov	r2, r1
    1c3e:	a4 fe       	sbrs	r10, 4
    1c40:	10 c0       	rjmp	.+32     	; 0x1c62 <vfprintf+0x356>
    1c42:	b6 01       	movw	r22, r12
    1c44:	80 e3       	ldi	r24, 0x30	; 48
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <fputc>
    1c4c:	a2 fe       	sbrs	r10, 2
    1c4e:	17 c0       	rjmp	.+46     	; 0x1c7e <vfprintf+0x372>
    1c50:	a1 fc       	sbrc	r10, 1
    1c52:	03 c0       	rjmp	.+6      	; 0x1c5a <vfprintf+0x34e>
    1c54:	88 e7       	ldi	r24, 0x78	; 120
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	02 c0       	rjmp	.+4      	; 0x1c5e <vfprintf+0x352>
    1c5a:	88 e5       	ldi	r24, 0x58	; 88
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	b6 01       	movw	r22, r12
    1c60:	0c c0       	rjmp	.+24     	; 0x1c7a <vfprintf+0x36e>
    1c62:	8a 2d       	mov	r24, r10
    1c64:	86 78       	andi	r24, 0x86	; 134
    1c66:	59 f0       	breq	.+22     	; 0x1c7e <vfprintf+0x372>
    1c68:	a1 fe       	sbrs	r10, 1
    1c6a:	02 c0       	rjmp	.+4      	; 0x1c70 <vfprintf+0x364>
    1c6c:	8b e2       	ldi	r24, 0x2B	; 43
    1c6e:	01 c0       	rjmp	.+2      	; 0x1c72 <vfprintf+0x366>
    1c70:	80 e2       	ldi	r24, 0x20	; 32
    1c72:	a7 fc       	sbrc	r10, 7
    1c74:	8d e2       	ldi	r24, 0x2D	; 45
    1c76:	b6 01       	movw	r22, r12
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <fputc>
    1c7e:	89 14       	cp	r8, r9
    1c80:	38 f4       	brcc	.+14     	; 0x1c90 <vfprintf+0x384>
    1c82:	b6 01       	movw	r22, r12
    1c84:	80 e3       	ldi	r24, 0x30	; 48
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <fputc>
    1c8c:	9a 94       	dec	r9
    1c8e:	f7 cf       	rjmp	.-18     	; 0x1c7e <vfprintf+0x372>
    1c90:	8a 94       	dec	r8
    1c92:	f3 01       	movw	r30, r6
    1c94:	e8 0d       	add	r30, r8
    1c96:	f1 1d       	adc	r31, r1
    1c98:	80 81       	ld	r24, Z
    1c9a:	b6 01       	movw	r22, r12
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <fputc>
    1ca2:	81 10       	cpse	r8, r1
    1ca4:	f5 cf       	rjmp	.-22     	; 0x1c90 <vfprintf+0x384>
    1ca6:	22 20       	and	r2, r2
    1ca8:	09 f4       	brne	.+2      	; 0x1cac <vfprintf+0x3a0>
    1caa:	42 ce       	rjmp	.-892    	; 0x1930 <vfprintf+0x24>
    1cac:	b6 01       	movw	r22, r12
    1cae:	80 e2       	ldi	r24, 0x20	; 32
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <fputc>
    1cb6:	2a 94       	dec	r2
    1cb8:	f6 cf       	rjmp	.-20     	; 0x1ca6 <vfprintf+0x39a>
    1cba:	f6 01       	movw	r30, r12
    1cbc:	86 81       	ldd	r24, Z+6	; 0x06
    1cbe:	97 81       	ldd	r25, Z+7	; 0x07
    1cc0:	02 c0       	rjmp	.+4      	; 0x1cc6 <vfprintf+0x3ba>
    1cc2:	8f ef       	ldi	r24, 0xFF	; 255
    1cc4:	9f ef       	ldi	r25, 0xFF	; 255
    1cc6:	2b 96       	adiw	r28, 0x0b	; 11
    1cc8:	e2 e1       	ldi	r30, 0x12	; 18
    1cca:	0c 94 77 10 	jmp	0x20ee	; 0x20ee <__epilogue_restores__>

00001cce <calloc>:
    1cce:	0f 93       	push	r16
    1cd0:	1f 93       	push	r17
    1cd2:	cf 93       	push	r28
    1cd4:	df 93       	push	r29
    1cd6:	86 9f       	mul	r24, r22
    1cd8:	80 01       	movw	r16, r0
    1cda:	87 9f       	mul	r24, r23
    1cdc:	10 0d       	add	r17, r0
    1cde:	96 9f       	mul	r25, r22
    1ce0:	10 0d       	add	r17, r0
    1ce2:	11 24       	eor	r1, r1
    1ce4:	c8 01       	movw	r24, r16
    1ce6:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <malloc>
    1cea:	ec 01       	movw	r28, r24
    1cec:	00 97       	sbiw	r24, 0x00	; 0
    1cee:	29 f0       	breq	.+10     	; 0x1cfa <calloc+0x2c>
    1cf0:	a8 01       	movw	r20, r16
    1cf2:	60 e0       	ldi	r22, 0x00	; 0
    1cf4:	70 e0       	ldi	r23, 0x00	; 0
    1cf6:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <memset>
    1cfa:	ce 01       	movw	r24, r28
    1cfc:	df 91       	pop	r29
    1cfe:	cf 91       	pop	r28
    1d00:	1f 91       	pop	r17
    1d02:	0f 91       	pop	r16
    1d04:	08 95       	ret

00001d06 <malloc>:
    1d06:	0f 93       	push	r16
    1d08:	1f 93       	push	r17
    1d0a:	cf 93       	push	r28
    1d0c:	df 93       	push	r29
    1d0e:	82 30       	cpi	r24, 0x02	; 2
    1d10:	91 05       	cpc	r25, r1
    1d12:	10 f4       	brcc	.+4      	; 0x1d18 <malloc+0x12>
    1d14:	82 e0       	ldi	r24, 0x02	; 2
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	e0 91 b2 03 	lds	r30, 0x03B2	; 0x8003b2 <__flp>
    1d1c:	f0 91 b3 03 	lds	r31, 0x03B3	; 0x8003b3 <__flp+0x1>
    1d20:	20 e0       	ldi	r18, 0x00	; 0
    1d22:	30 e0       	ldi	r19, 0x00	; 0
    1d24:	a0 e0       	ldi	r26, 0x00	; 0
    1d26:	b0 e0       	ldi	r27, 0x00	; 0
    1d28:	30 97       	sbiw	r30, 0x00	; 0
    1d2a:	19 f1       	breq	.+70     	; 0x1d72 <malloc+0x6c>
    1d2c:	40 81       	ld	r20, Z
    1d2e:	51 81       	ldd	r21, Z+1	; 0x01
    1d30:	02 81       	ldd	r16, Z+2	; 0x02
    1d32:	13 81       	ldd	r17, Z+3	; 0x03
    1d34:	48 17       	cp	r20, r24
    1d36:	59 07       	cpc	r21, r25
    1d38:	c8 f0       	brcs	.+50     	; 0x1d6c <malloc+0x66>
    1d3a:	84 17       	cp	r24, r20
    1d3c:	95 07       	cpc	r25, r21
    1d3e:	69 f4       	brne	.+26     	; 0x1d5a <malloc+0x54>
    1d40:	10 97       	sbiw	r26, 0x00	; 0
    1d42:	31 f0       	breq	.+12     	; 0x1d50 <malloc+0x4a>
    1d44:	12 96       	adiw	r26, 0x02	; 2
    1d46:	0c 93       	st	X, r16
    1d48:	12 97       	sbiw	r26, 0x02	; 2
    1d4a:	13 96       	adiw	r26, 0x03	; 3
    1d4c:	1c 93       	st	X, r17
    1d4e:	27 c0       	rjmp	.+78     	; 0x1d9e <malloc+0x98>
    1d50:	00 93 b2 03 	sts	0x03B2, r16	; 0x8003b2 <__flp>
    1d54:	10 93 b3 03 	sts	0x03B3, r17	; 0x8003b3 <__flp+0x1>
    1d58:	22 c0       	rjmp	.+68     	; 0x1d9e <malloc+0x98>
    1d5a:	21 15       	cp	r18, r1
    1d5c:	31 05       	cpc	r19, r1
    1d5e:	19 f0       	breq	.+6      	; 0x1d66 <malloc+0x60>
    1d60:	42 17       	cp	r20, r18
    1d62:	53 07       	cpc	r21, r19
    1d64:	18 f4       	brcc	.+6      	; 0x1d6c <malloc+0x66>
    1d66:	9a 01       	movw	r18, r20
    1d68:	bd 01       	movw	r22, r26
    1d6a:	ef 01       	movw	r28, r30
    1d6c:	df 01       	movw	r26, r30
    1d6e:	f8 01       	movw	r30, r16
    1d70:	db cf       	rjmp	.-74     	; 0x1d28 <malloc+0x22>
    1d72:	21 15       	cp	r18, r1
    1d74:	31 05       	cpc	r19, r1
    1d76:	f9 f0       	breq	.+62     	; 0x1db6 <malloc+0xb0>
    1d78:	28 1b       	sub	r18, r24
    1d7a:	39 0b       	sbc	r19, r25
    1d7c:	24 30       	cpi	r18, 0x04	; 4
    1d7e:	31 05       	cpc	r19, r1
    1d80:	80 f4       	brcc	.+32     	; 0x1da2 <malloc+0x9c>
    1d82:	8a 81       	ldd	r24, Y+2	; 0x02
    1d84:	9b 81       	ldd	r25, Y+3	; 0x03
    1d86:	61 15       	cp	r22, r1
    1d88:	71 05       	cpc	r23, r1
    1d8a:	21 f0       	breq	.+8      	; 0x1d94 <malloc+0x8e>
    1d8c:	fb 01       	movw	r30, r22
    1d8e:	93 83       	std	Z+3, r25	; 0x03
    1d90:	82 83       	std	Z+2, r24	; 0x02
    1d92:	04 c0       	rjmp	.+8      	; 0x1d9c <malloc+0x96>
    1d94:	90 93 b3 03 	sts	0x03B3, r25	; 0x8003b3 <__flp+0x1>
    1d98:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <__flp>
    1d9c:	fe 01       	movw	r30, r28
    1d9e:	32 96       	adiw	r30, 0x02	; 2
    1da0:	44 c0       	rjmp	.+136    	; 0x1e2a <malloc+0x124>
    1da2:	fe 01       	movw	r30, r28
    1da4:	e2 0f       	add	r30, r18
    1da6:	f3 1f       	adc	r31, r19
    1da8:	81 93       	st	Z+, r24
    1daa:	91 93       	st	Z+, r25
    1dac:	22 50       	subi	r18, 0x02	; 2
    1dae:	31 09       	sbc	r19, r1
    1db0:	39 83       	std	Y+1, r19	; 0x01
    1db2:	28 83       	st	Y, r18
    1db4:	3a c0       	rjmp	.+116    	; 0x1e2a <malloc+0x124>
    1db6:	20 91 b0 03 	lds	r18, 0x03B0	; 0x8003b0 <__brkval>
    1dba:	30 91 b1 03 	lds	r19, 0x03B1	; 0x8003b1 <__brkval+0x1>
    1dbe:	23 2b       	or	r18, r19
    1dc0:	41 f4       	brne	.+16     	; 0x1dd2 <malloc+0xcc>
    1dc2:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1dc6:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1dca:	30 93 b1 03 	sts	0x03B1, r19	; 0x8003b1 <__brkval+0x1>
    1dce:	20 93 b0 03 	sts	0x03B0, r18	; 0x8003b0 <__brkval>
    1dd2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1dd6:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1dda:	21 15       	cp	r18, r1
    1ddc:	31 05       	cpc	r19, r1
    1dde:	41 f4       	brne	.+16     	; 0x1df0 <malloc+0xea>
    1de0:	2d b7       	in	r18, 0x3d	; 61
    1de2:	3e b7       	in	r19, 0x3e	; 62
    1de4:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1de8:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1dec:	24 1b       	sub	r18, r20
    1dee:	35 0b       	sbc	r19, r21
    1df0:	e0 91 b0 03 	lds	r30, 0x03B0	; 0x8003b0 <__brkval>
    1df4:	f0 91 b1 03 	lds	r31, 0x03B1	; 0x8003b1 <__brkval+0x1>
    1df8:	e2 17       	cp	r30, r18
    1dfa:	f3 07       	cpc	r31, r19
    1dfc:	a0 f4       	brcc	.+40     	; 0x1e26 <malloc+0x120>
    1dfe:	2e 1b       	sub	r18, r30
    1e00:	3f 0b       	sbc	r19, r31
    1e02:	28 17       	cp	r18, r24
    1e04:	39 07       	cpc	r19, r25
    1e06:	78 f0       	brcs	.+30     	; 0x1e26 <malloc+0x120>
    1e08:	ac 01       	movw	r20, r24
    1e0a:	4e 5f       	subi	r20, 0xFE	; 254
    1e0c:	5f 4f       	sbci	r21, 0xFF	; 255
    1e0e:	24 17       	cp	r18, r20
    1e10:	35 07       	cpc	r19, r21
    1e12:	48 f0       	brcs	.+18     	; 0x1e26 <malloc+0x120>
    1e14:	4e 0f       	add	r20, r30
    1e16:	5f 1f       	adc	r21, r31
    1e18:	50 93 b1 03 	sts	0x03B1, r21	; 0x8003b1 <__brkval+0x1>
    1e1c:	40 93 b0 03 	sts	0x03B0, r20	; 0x8003b0 <__brkval>
    1e20:	81 93       	st	Z+, r24
    1e22:	91 93       	st	Z+, r25
    1e24:	02 c0       	rjmp	.+4      	; 0x1e2a <malloc+0x124>
    1e26:	e0 e0       	ldi	r30, 0x00	; 0
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	cf 01       	movw	r24, r30
    1e2c:	df 91       	pop	r29
    1e2e:	cf 91       	pop	r28
    1e30:	1f 91       	pop	r17
    1e32:	0f 91       	pop	r16
    1e34:	08 95       	ret

00001e36 <free>:
    1e36:	cf 93       	push	r28
    1e38:	df 93       	push	r29
    1e3a:	00 97       	sbiw	r24, 0x00	; 0
    1e3c:	09 f4       	brne	.+2      	; 0x1e40 <free+0xa>
    1e3e:	81 c0       	rjmp	.+258    	; 0x1f42 <free+0x10c>
    1e40:	fc 01       	movw	r30, r24
    1e42:	32 97       	sbiw	r30, 0x02	; 2
    1e44:	13 82       	std	Z+3, r1	; 0x03
    1e46:	12 82       	std	Z+2, r1	; 0x02
    1e48:	a0 91 b2 03 	lds	r26, 0x03B2	; 0x8003b2 <__flp>
    1e4c:	b0 91 b3 03 	lds	r27, 0x03B3	; 0x8003b3 <__flp+0x1>
    1e50:	10 97       	sbiw	r26, 0x00	; 0
    1e52:	81 f4       	brne	.+32     	; 0x1e74 <free+0x3e>
    1e54:	20 81       	ld	r18, Z
    1e56:	31 81       	ldd	r19, Z+1	; 0x01
    1e58:	82 0f       	add	r24, r18
    1e5a:	93 1f       	adc	r25, r19
    1e5c:	20 91 b0 03 	lds	r18, 0x03B0	; 0x8003b0 <__brkval>
    1e60:	30 91 b1 03 	lds	r19, 0x03B1	; 0x8003b1 <__brkval+0x1>
    1e64:	28 17       	cp	r18, r24
    1e66:	39 07       	cpc	r19, r25
    1e68:	51 f5       	brne	.+84     	; 0x1ebe <free+0x88>
    1e6a:	f0 93 b1 03 	sts	0x03B1, r31	; 0x8003b1 <__brkval+0x1>
    1e6e:	e0 93 b0 03 	sts	0x03B0, r30	; 0x8003b0 <__brkval>
    1e72:	67 c0       	rjmp	.+206    	; 0x1f42 <free+0x10c>
    1e74:	ed 01       	movw	r28, r26
    1e76:	20 e0       	ldi	r18, 0x00	; 0
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	ce 17       	cp	r28, r30
    1e7c:	df 07       	cpc	r29, r31
    1e7e:	40 f4       	brcc	.+16     	; 0x1e90 <free+0x5a>
    1e80:	4a 81       	ldd	r20, Y+2	; 0x02
    1e82:	5b 81       	ldd	r21, Y+3	; 0x03
    1e84:	9e 01       	movw	r18, r28
    1e86:	41 15       	cp	r20, r1
    1e88:	51 05       	cpc	r21, r1
    1e8a:	f1 f0       	breq	.+60     	; 0x1ec8 <free+0x92>
    1e8c:	ea 01       	movw	r28, r20
    1e8e:	f5 cf       	rjmp	.-22     	; 0x1e7a <free+0x44>
    1e90:	d3 83       	std	Z+3, r29	; 0x03
    1e92:	c2 83       	std	Z+2, r28	; 0x02
    1e94:	40 81       	ld	r20, Z
    1e96:	51 81       	ldd	r21, Z+1	; 0x01
    1e98:	84 0f       	add	r24, r20
    1e9a:	95 1f       	adc	r25, r21
    1e9c:	c8 17       	cp	r28, r24
    1e9e:	d9 07       	cpc	r29, r25
    1ea0:	59 f4       	brne	.+22     	; 0x1eb8 <free+0x82>
    1ea2:	88 81       	ld	r24, Y
    1ea4:	99 81       	ldd	r25, Y+1	; 0x01
    1ea6:	84 0f       	add	r24, r20
    1ea8:	95 1f       	adc	r25, r21
    1eaa:	02 96       	adiw	r24, 0x02	; 2
    1eac:	91 83       	std	Z+1, r25	; 0x01
    1eae:	80 83       	st	Z, r24
    1eb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb2:	9b 81       	ldd	r25, Y+3	; 0x03
    1eb4:	93 83       	std	Z+3, r25	; 0x03
    1eb6:	82 83       	std	Z+2, r24	; 0x02
    1eb8:	21 15       	cp	r18, r1
    1eba:	31 05       	cpc	r19, r1
    1ebc:	29 f4       	brne	.+10     	; 0x1ec8 <free+0x92>
    1ebe:	f0 93 b3 03 	sts	0x03B3, r31	; 0x8003b3 <__flp+0x1>
    1ec2:	e0 93 b2 03 	sts	0x03B2, r30	; 0x8003b2 <__flp>
    1ec6:	3d c0       	rjmp	.+122    	; 0x1f42 <free+0x10c>
    1ec8:	e9 01       	movw	r28, r18
    1eca:	fb 83       	std	Y+3, r31	; 0x03
    1ecc:	ea 83       	std	Y+2, r30	; 0x02
    1ece:	49 91       	ld	r20, Y+
    1ed0:	59 91       	ld	r21, Y+
    1ed2:	c4 0f       	add	r28, r20
    1ed4:	d5 1f       	adc	r29, r21
    1ed6:	ec 17       	cp	r30, r28
    1ed8:	fd 07       	cpc	r31, r29
    1eda:	61 f4       	brne	.+24     	; 0x1ef4 <free+0xbe>
    1edc:	80 81       	ld	r24, Z
    1ede:	91 81       	ldd	r25, Z+1	; 0x01
    1ee0:	84 0f       	add	r24, r20
    1ee2:	95 1f       	adc	r25, r21
    1ee4:	02 96       	adiw	r24, 0x02	; 2
    1ee6:	e9 01       	movw	r28, r18
    1ee8:	99 83       	std	Y+1, r25	; 0x01
    1eea:	88 83       	st	Y, r24
    1eec:	82 81       	ldd	r24, Z+2	; 0x02
    1eee:	93 81       	ldd	r25, Z+3	; 0x03
    1ef0:	9b 83       	std	Y+3, r25	; 0x03
    1ef2:	8a 83       	std	Y+2, r24	; 0x02
    1ef4:	e0 e0       	ldi	r30, 0x00	; 0
    1ef6:	f0 e0       	ldi	r31, 0x00	; 0
    1ef8:	12 96       	adiw	r26, 0x02	; 2
    1efa:	8d 91       	ld	r24, X+
    1efc:	9c 91       	ld	r25, X
    1efe:	13 97       	sbiw	r26, 0x03	; 3
    1f00:	00 97       	sbiw	r24, 0x00	; 0
    1f02:	19 f0       	breq	.+6      	; 0x1f0a <free+0xd4>
    1f04:	fd 01       	movw	r30, r26
    1f06:	dc 01       	movw	r26, r24
    1f08:	f7 cf       	rjmp	.-18     	; 0x1ef8 <free+0xc2>
    1f0a:	8d 91       	ld	r24, X+
    1f0c:	9c 91       	ld	r25, X
    1f0e:	11 97       	sbiw	r26, 0x01	; 1
    1f10:	9d 01       	movw	r18, r26
    1f12:	2e 5f       	subi	r18, 0xFE	; 254
    1f14:	3f 4f       	sbci	r19, 0xFF	; 255
    1f16:	82 0f       	add	r24, r18
    1f18:	93 1f       	adc	r25, r19
    1f1a:	20 91 b0 03 	lds	r18, 0x03B0	; 0x8003b0 <__brkval>
    1f1e:	30 91 b1 03 	lds	r19, 0x03B1	; 0x8003b1 <__brkval+0x1>
    1f22:	28 17       	cp	r18, r24
    1f24:	39 07       	cpc	r19, r25
    1f26:	69 f4       	brne	.+26     	; 0x1f42 <free+0x10c>
    1f28:	30 97       	sbiw	r30, 0x00	; 0
    1f2a:	29 f4       	brne	.+10     	; 0x1f36 <free+0x100>
    1f2c:	10 92 b3 03 	sts	0x03B3, r1	; 0x8003b3 <__flp+0x1>
    1f30:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <__flp>
    1f34:	02 c0       	rjmp	.+4      	; 0x1f3a <free+0x104>
    1f36:	13 82       	std	Z+3, r1	; 0x03
    1f38:	12 82       	std	Z+2, r1	; 0x02
    1f3a:	b0 93 b1 03 	sts	0x03B1, r27	; 0x8003b1 <__brkval+0x1>
    1f3e:	a0 93 b0 03 	sts	0x03B0, r26	; 0x8003b0 <__brkval>
    1f42:	df 91       	pop	r29
    1f44:	cf 91       	pop	r28
    1f46:	08 95       	ret

00001f48 <strnlen_P>:
    1f48:	fc 01       	movw	r30, r24
    1f4a:	05 90       	lpm	r0, Z+
    1f4c:	61 50       	subi	r22, 0x01	; 1
    1f4e:	70 40       	sbci	r23, 0x00	; 0
    1f50:	01 10       	cpse	r0, r1
    1f52:	d8 f7       	brcc	.-10     	; 0x1f4a <strnlen_P+0x2>
    1f54:	80 95       	com	r24
    1f56:	90 95       	com	r25
    1f58:	8e 0f       	add	r24, r30
    1f5a:	9f 1f       	adc	r25, r31
    1f5c:	08 95       	ret

00001f5e <memset>:
    1f5e:	dc 01       	movw	r26, r24
    1f60:	01 c0       	rjmp	.+2      	; 0x1f64 <memset+0x6>
    1f62:	6d 93       	st	X+, r22
    1f64:	41 50       	subi	r20, 0x01	; 1
    1f66:	50 40       	sbci	r21, 0x00	; 0
    1f68:	e0 f7       	brcc	.-8      	; 0x1f62 <memset+0x4>
    1f6a:	08 95       	ret

00001f6c <strnlen>:
    1f6c:	fc 01       	movw	r30, r24
    1f6e:	61 50       	subi	r22, 0x01	; 1
    1f70:	70 40       	sbci	r23, 0x00	; 0
    1f72:	01 90       	ld	r0, Z+
    1f74:	01 10       	cpse	r0, r1
    1f76:	d8 f7       	brcc	.-10     	; 0x1f6e <strnlen+0x2>
    1f78:	80 95       	com	r24
    1f7a:	90 95       	com	r25
    1f7c:	8e 0f       	add	r24, r30
    1f7e:	9f 1f       	adc	r25, r31
    1f80:	08 95       	ret

00001f82 <fputc>:
    1f82:	0f 93       	push	r16
    1f84:	1f 93       	push	r17
    1f86:	cf 93       	push	r28
    1f88:	df 93       	push	r29
    1f8a:	fb 01       	movw	r30, r22
    1f8c:	23 81       	ldd	r18, Z+3	; 0x03
    1f8e:	21 fd       	sbrc	r18, 1
    1f90:	03 c0       	rjmp	.+6      	; 0x1f98 <fputc+0x16>
    1f92:	8f ef       	ldi	r24, 0xFF	; 255
    1f94:	9f ef       	ldi	r25, 0xFF	; 255
    1f96:	2c c0       	rjmp	.+88     	; 0x1ff0 <fputc+0x6e>
    1f98:	22 ff       	sbrs	r18, 2
    1f9a:	16 c0       	rjmp	.+44     	; 0x1fc8 <fputc+0x46>
    1f9c:	46 81       	ldd	r20, Z+6	; 0x06
    1f9e:	57 81       	ldd	r21, Z+7	; 0x07
    1fa0:	24 81       	ldd	r18, Z+4	; 0x04
    1fa2:	35 81       	ldd	r19, Z+5	; 0x05
    1fa4:	42 17       	cp	r20, r18
    1fa6:	53 07       	cpc	r21, r19
    1fa8:	44 f4       	brge	.+16     	; 0x1fba <fputc+0x38>
    1faa:	a0 81       	ld	r26, Z
    1fac:	b1 81       	ldd	r27, Z+1	; 0x01
    1fae:	9d 01       	movw	r18, r26
    1fb0:	2f 5f       	subi	r18, 0xFF	; 255
    1fb2:	3f 4f       	sbci	r19, 0xFF	; 255
    1fb4:	31 83       	std	Z+1, r19	; 0x01
    1fb6:	20 83       	st	Z, r18
    1fb8:	8c 93       	st	X, r24
    1fba:	26 81       	ldd	r18, Z+6	; 0x06
    1fbc:	37 81       	ldd	r19, Z+7	; 0x07
    1fbe:	2f 5f       	subi	r18, 0xFF	; 255
    1fc0:	3f 4f       	sbci	r19, 0xFF	; 255
    1fc2:	37 83       	std	Z+7, r19	; 0x07
    1fc4:	26 83       	std	Z+6, r18	; 0x06
    1fc6:	14 c0       	rjmp	.+40     	; 0x1ff0 <fputc+0x6e>
    1fc8:	8b 01       	movw	r16, r22
    1fca:	ec 01       	movw	r28, r24
    1fcc:	fb 01       	movw	r30, r22
    1fce:	00 84       	ldd	r0, Z+8	; 0x08
    1fd0:	f1 85       	ldd	r31, Z+9	; 0x09
    1fd2:	e0 2d       	mov	r30, r0
    1fd4:	09 95       	icall
    1fd6:	89 2b       	or	r24, r25
    1fd8:	e1 f6       	brne	.-72     	; 0x1f92 <fputc+0x10>
    1fda:	d8 01       	movw	r26, r16
    1fdc:	16 96       	adiw	r26, 0x06	; 6
    1fde:	8d 91       	ld	r24, X+
    1fe0:	9c 91       	ld	r25, X
    1fe2:	17 97       	sbiw	r26, 0x07	; 7
    1fe4:	01 96       	adiw	r24, 0x01	; 1
    1fe6:	17 96       	adiw	r26, 0x07	; 7
    1fe8:	9c 93       	st	X, r25
    1fea:	8e 93       	st	-X, r24
    1fec:	16 97       	sbiw	r26, 0x06	; 6
    1fee:	ce 01       	movw	r24, r28
    1ff0:	df 91       	pop	r29
    1ff2:	cf 91       	pop	r28
    1ff4:	1f 91       	pop	r17
    1ff6:	0f 91       	pop	r16
    1ff8:	08 95       	ret

00001ffa <__ultoa_invert>:
    1ffa:	fa 01       	movw	r30, r20
    1ffc:	aa 27       	eor	r26, r26
    1ffe:	28 30       	cpi	r18, 0x08	; 8
    2000:	51 f1       	breq	.+84     	; 0x2056 <__ultoa_invert+0x5c>
    2002:	20 31       	cpi	r18, 0x10	; 16
    2004:	81 f1       	breq	.+96     	; 0x2066 <__ultoa_invert+0x6c>
    2006:	e8 94       	clt
    2008:	6f 93       	push	r22
    200a:	6e 7f       	andi	r22, 0xFE	; 254
    200c:	6e 5f       	subi	r22, 0xFE	; 254
    200e:	7f 4f       	sbci	r23, 0xFF	; 255
    2010:	8f 4f       	sbci	r24, 0xFF	; 255
    2012:	9f 4f       	sbci	r25, 0xFF	; 255
    2014:	af 4f       	sbci	r26, 0xFF	; 255
    2016:	b1 e0       	ldi	r27, 0x01	; 1
    2018:	3e d0       	rcall	.+124    	; 0x2096 <__ultoa_invert+0x9c>
    201a:	b4 e0       	ldi	r27, 0x04	; 4
    201c:	3c d0       	rcall	.+120    	; 0x2096 <__ultoa_invert+0x9c>
    201e:	67 0f       	add	r22, r23
    2020:	78 1f       	adc	r23, r24
    2022:	89 1f       	adc	r24, r25
    2024:	9a 1f       	adc	r25, r26
    2026:	a1 1d       	adc	r26, r1
    2028:	68 0f       	add	r22, r24
    202a:	79 1f       	adc	r23, r25
    202c:	8a 1f       	adc	r24, r26
    202e:	91 1d       	adc	r25, r1
    2030:	a1 1d       	adc	r26, r1
    2032:	6a 0f       	add	r22, r26
    2034:	71 1d       	adc	r23, r1
    2036:	81 1d       	adc	r24, r1
    2038:	91 1d       	adc	r25, r1
    203a:	a1 1d       	adc	r26, r1
    203c:	20 d0       	rcall	.+64     	; 0x207e <__ultoa_invert+0x84>
    203e:	09 f4       	brne	.+2      	; 0x2042 <__ultoa_invert+0x48>
    2040:	68 94       	set
    2042:	3f 91       	pop	r19
    2044:	2a e0       	ldi	r18, 0x0A	; 10
    2046:	26 9f       	mul	r18, r22
    2048:	11 24       	eor	r1, r1
    204a:	30 19       	sub	r19, r0
    204c:	30 5d       	subi	r19, 0xD0	; 208
    204e:	31 93       	st	Z+, r19
    2050:	de f6       	brtc	.-74     	; 0x2008 <__ultoa_invert+0xe>
    2052:	cf 01       	movw	r24, r30
    2054:	08 95       	ret
    2056:	46 2f       	mov	r20, r22
    2058:	47 70       	andi	r20, 0x07	; 7
    205a:	40 5d       	subi	r20, 0xD0	; 208
    205c:	41 93       	st	Z+, r20
    205e:	b3 e0       	ldi	r27, 0x03	; 3
    2060:	0f d0       	rcall	.+30     	; 0x2080 <__ultoa_invert+0x86>
    2062:	c9 f7       	brne	.-14     	; 0x2056 <__ultoa_invert+0x5c>
    2064:	f6 cf       	rjmp	.-20     	; 0x2052 <__ultoa_invert+0x58>
    2066:	46 2f       	mov	r20, r22
    2068:	4f 70       	andi	r20, 0x0F	; 15
    206a:	40 5d       	subi	r20, 0xD0	; 208
    206c:	4a 33       	cpi	r20, 0x3A	; 58
    206e:	18 f0       	brcs	.+6      	; 0x2076 <__ultoa_invert+0x7c>
    2070:	49 5d       	subi	r20, 0xD9	; 217
    2072:	31 fd       	sbrc	r19, 1
    2074:	40 52       	subi	r20, 0x20	; 32
    2076:	41 93       	st	Z+, r20
    2078:	02 d0       	rcall	.+4      	; 0x207e <__ultoa_invert+0x84>
    207a:	a9 f7       	brne	.-22     	; 0x2066 <__ultoa_invert+0x6c>
    207c:	ea cf       	rjmp	.-44     	; 0x2052 <__ultoa_invert+0x58>
    207e:	b4 e0       	ldi	r27, 0x04	; 4
    2080:	a6 95       	lsr	r26
    2082:	97 95       	ror	r25
    2084:	87 95       	ror	r24
    2086:	77 95       	ror	r23
    2088:	67 95       	ror	r22
    208a:	ba 95       	dec	r27
    208c:	c9 f7       	brne	.-14     	; 0x2080 <__ultoa_invert+0x86>
    208e:	00 97       	sbiw	r24, 0x00	; 0
    2090:	61 05       	cpc	r22, r1
    2092:	71 05       	cpc	r23, r1
    2094:	08 95       	ret
    2096:	9b 01       	movw	r18, r22
    2098:	ac 01       	movw	r20, r24
    209a:	0a 2e       	mov	r0, r26
    209c:	06 94       	lsr	r0
    209e:	57 95       	ror	r21
    20a0:	47 95       	ror	r20
    20a2:	37 95       	ror	r19
    20a4:	27 95       	ror	r18
    20a6:	ba 95       	dec	r27
    20a8:	c9 f7       	brne	.-14     	; 0x209c <__ultoa_invert+0xa2>
    20aa:	62 0f       	add	r22, r18
    20ac:	73 1f       	adc	r23, r19
    20ae:	84 1f       	adc	r24, r20
    20b0:	95 1f       	adc	r25, r21
    20b2:	a0 1d       	adc	r26, r0
    20b4:	08 95       	ret

000020b6 <__prologue_saves__>:
    20b6:	2f 92       	push	r2
    20b8:	3f 92       	push	r3
    20ba:	4f 92       	push	r4
    20bc:	5f 92       	push	r5
    20be:	6f 92       	push	r6
    20c0:	7f 92       	push	r7
    20c2:	8f 92       	push	r8
    20c4:	9f 92       	push	r9
    20c6:	af 92       	push	r10
    20c8:	bf 92       	push	r11
    20ca:	cf 92       	push	r12
    20cc:	df 92       	push	r13
    20ce:	ef 92       	push	r14
    20d0:	ff 92       	push	r15
    20d2:	0f 93       	push	r16
    20d4:	1f 93       	push	r17
    20d6:	cf 93       	push	r28
    20d8:	df 93       	push	r29
    20da:	cd b7       	in	r28, 0x3d	; 61
    20dc:	de b7       	in	r29, 0x3e	; 62
    20de:	ca 1b       	sub	r28, r26
    20e0:	db 0b       	sbc	r29, r27
    20e2:	0f b6       	in	r0, 0x3f	; 63
    20e4:	f8 94       	cli
    20e6:	de bf       	out	0x3e, r29	; 62
    20e8:	0f be       	out	0x3f, r0	; 63
    20ea:	cd bf       	out	0x3d, r28	; 61
    20ec:	09 94       	ijmp

000020ee <__epilogue_restores__>:
    20ee:	2a 88       	ldd	r2, Y+18	; 0x12
    20f0:	39 88       	ldd	r3, Y+17	; 0x11
    20f2:	48 88       	ldd	r4, Y+16	; 0x10
    20f4:	5f 84       	ldd	r5, Y+15	; 0x0f
    20f6:	6e 84       	ldd	r6, Y+14	; 0x0e
    20f8:	7d 84       	ldd	r7, Y+13	; 0x0d
    20fa:	8c 84       	ldd	r8, Y+12	; 0x0c
    20fc:	9b 84       	ldd	r9, Y+11	; 0x0b
    20fe:	aa 84       	ldd	r10, Y+10	; 0x0a
    2100:	b9 84       	ldd	r11, Y+9	; 0x09
    2102:	c8 84       	ldd	r12, Y+8	; 0x08
    2104:	df 80       	ldd	r13, Y+7	; 0x07
    2106:	ee 80       	ldd	r14, Y+6	; 0x06
    2108:	fd 80       	ldd	r15, Y+5	; 0x05
    210a:	0c 81       	ldd	r16, Y+4	; 0x04
    210c:	1b 81       	ldd	r17, Y+3	; 0x03
    210e:	aa 81       	ldd	r26, Y+2	; 0x02
    2110:	b9 81       	ldd	r27, Y+1	; 0x01
    2112:	ce 0f       	add	r28, r30
    2114:	d1 1d       	adc	r29, r1
    2116:	0f b6       	in	r0, 0x3f	; 63
    2118:	f8 94       	cli
    211a:	de bf       	out	0x3e, r29	; 62
    211c:	0f be       	out	0x3f, r0	; 63
    211e:	cd bf       	out	0x3d, r28	; 61
    2120:	ed 01       	movw	r28, r26
    2122:	08 95       	ret

00002124 <_exit>:
    2124:	f8 94       	cli

00002126 <__stop_program>:
    2126:	ff cf       	rjmp	.-2      	; 0x2126 <__stop_program>
