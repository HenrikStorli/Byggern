
TestYolo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000306  00800100  00002372  00002406  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002372  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000097  00800406  00800406  0000270c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000270c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002768  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000308  00000000  00000000  000027a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003746  00000000  00000000  00002aac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001520  00000000  00000000  000061f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001967  00000000  00000000  00007712  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000858  00000000  00000000  0000907c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c1a  00000000  00000000  000098d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000020f1  00000000  00000000  0000a4ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000288  00000000  00000000  0000c5df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cb 01 	jmp	0x396	; 0x396 <__ctors_end>
       4:	0c 94 3c 02 	jmp	0x478	; 0x478 <__vector_1>
       8:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
       c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      10:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      14:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      18:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      1c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      20:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      24:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      28:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      2c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      30:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      34:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      38:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      3c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      40:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      44:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      48:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      4c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      50:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      54:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      58:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      5c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      60:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      64:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      68:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      6c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      70:	08 4a       	sbci	r16, 0xA8	; 168
      72:	d7 3b       	cpi	r29, 0xB7	; 183
      74:	3b ce       	rjmp	.-906    	; 0xfffffcec <__eeprom_end+0xff7efcec>
      76:	01 6e       	ori	r16, 0xE1	; 225
      78:	84 bc       	out	0x24, r8	; 36
      7a:	bf fd       	.word	0xfdbf	; ????
      7c:	c1 2f       	mov	r28, r17
      7e:	3d 6c       	ori	r19, 0xCD	; 205
      80:	74 31       	cpi	r23, 0x14	; 20
      82:	9a bd       	out	0x2a, r25	; 42
      84:	56 83       	std	Z+6, r21	; 0x06
      86:	3d da       	rcall	.-2950   	; 0xfffff502 <__eeprom_end+0xff7ef502>
      88:	3d 00       	.word	0x003d	; ????
      8a:	c7 7f       	andi	r28, 0xF7	; 247
      8c:	11 be       	out	0x31, r1	; 49
      8e:	d9 e4       	ldi	r29, 0x49	; 73
      90:	bb 4c       	sbci	r27, 0xCB	; 203
      92:	3e 91       	ld	r19, -X
      94:	6b aa       	std	Y+51, r6	; 0x33
      96:	aa be       	out	0x3a, r10	; 58
      98:	00 00       	nop
      9a:	00 80       	ld	r0, Z
      9c:	3f 00       	.word	0x003f	; ????

0000009e <__trampolines_end>:
	...
      a6:	00 06       	cpc	r0, r16
      a8:	5f 5f       	subi	r21, 0xFF	; 255
      aa:	06 00       	.word	0x0006	; ????
      ac:	00 00       	nop
      ae:	00 07       	cpc	r16, r16
      b0:	07 00       	.word	0x0007	; ????
      b2:	07 07       	cpc	r16, r23
      b4:	00 00       	nop
      b6:	14 7f       	andi	r17, 0xF4	; 244
      b8:	7f 14       	cp	r7, r15
      ba:	7f 7f       	andi	r23, 0xFF	; 255
      bc:	14 00       	.word	0x0014	; ????
      be:	24 2e       	mov	r2, r20
      c0:	6b 6b       	ori	r22, 0xBB	; 187
      c2:	3a 12       	cpse	r3, r26
      c4:	00 00       	nop
      c6:	46 66       	ori	r20, 0x66	; 102
      c8:	30 18       	sub	r3, r0
      ca:	0c 66       	ori	r16, 0x6C	; 108
      cc:	62 00       	.word	0x0062	; ????
      ce:	30 7a       	andi	r19, 0xA0	; 160
      d0:	4f 5d       	subi	r20, 0xDF	; 223
      d2:	37 7a       	andi	r19, 0xA7	; 167
      d4:	48 00       	.word	0x0048	; ????
      d6:	04 07       	cpc	r16, r20
      d8:	03 00       	.word	0x0003	; ????
      da:	00 00       	nop
      dc:	00 00       	nop
      de:	00 1c       	adc	r0, r0
      e0:	3e 63       	ori	r19, 0x3E	; 62
      e2:	41 00       	.word	0x0041	; ????
      e4:	00 00       	nop
      e6:	00 41       	sbci	r16, 0x10	; 16
      e8:	63 3e       	cpi	r22, 0xE3	; 227
      ea:	1c 00       	.word	0x001c	; ????
      ec:	00 00       	nop
      ee:	08 2a       	or	r0, r24
      f0:	3e 1c       	adc	r3, r14
      f2:	1c 3e       	cpi	r17, 0xEC	; 236
      f4:	2a 08       	sbc	r2, r10
      f6:	08 08       	sbc	r0, r8
      f8:	3e 3e       	cpi	r19, 0xEE	; 238
      fa:	08 08       	sbc	r0, r8
      fc:	00 00       	nop
      fe:	00 a0       	ldd	r0, Z+32	; 0x20
     100:	e0 60       	ori	r30, 0x00	; 0
     102:	00 00       	nop
     104:	00 00       	nop
     106:	08 08       	sbc	r0, r8
     108:	08 08       	sbc	r0, r8
     10a:	08 08       	sbc	r0, r8
     10c:	00 00       	nop
     10e:	00 00       	nop
     110:	60 60       	ori	r22, 0x00	; 0
     112:	00 00       	nop
     114:	00 00       	nop
     116:	60 30       	cpi	r22, 0x00	; 0
     118:	18 0c       	add	r1, r8
     11a:	06 03       	mulsu	r16, r22
     11c:	01 00       	.word	0x0001	; ????
     11e:	3e 7f       	andi	r19, 0xFE	; 254
     120:	59 4d       	sbci	r21, 0xD9	; 217
     122:	7f 3e       	cpi	r23, 0xEF	; 239
     124:	00 00       	nop
     126:	42 42       	sbci	r20, 0x22	; 34
     128:	7f 7f       	andi	r23, 0xFF	; 255
     12a:	40 40       	sbci	r20, 0x00	; 0
     12c:	00 00       	nop
     12e:	62 73       	andi	r22, 0x32	; 50
     130:	59 49       	sbci	r21, 0x99	; 153
     132:	6f 66       	ori	r22, 0x6F	; 111
     134:	00 00       	nop
     136:	22 63       	ori	r18, 0x32	; 50
     138:	49 49       	sbci	r20, 0x99	; 153
     13a:	7f 36       	cpi	r23, 0x6F	; 111
     13c:	00 00       	nop
     13e:	18 1c       	adc	r1, r8
     140:	16 13       	cpse	r17, r22
     142:	7f 7f       	andi	r23, 0xFF	; 255
     144:	10 00       	.word	0x0010	; ????
     146:	27 67       	ori	r18, 0x77	; 119
     148:	45 45       	sbci	r20, 0x55	; 85
     14a:	7d 39       	cpi	r23, 0x9D	; 157
     14c:	00 00       	nop
     14e:	3c 7e       	andi	r19, 0xEC	; 236
     150:	4b 49       	sbci	r20, 0x9B	; 155
     152:	79 30       	cpi	r23, 0x09	; 9
     154:	00 00       	nop
     156:	03 63       	ori	r16, 0x33	; 51
     158:	71 19       	sub	r23, r1
     15a:	0f 07       	cpc	r16, r31
     15c:	00 00       	nop
     15e:	36 7f       	andi	r19, 0xF6	; 246
     160:	49 49       	sbci	r20, 0x99	; 153
     162:	7f 36       	cpi	r23, 0x6F	; 111
     164:	00 00       	nop
     166:	06 4f       	sbci	r16, 0xF6	; 246
     168:	49 69       	ori	r20, 0x99	; 153
     16a:	3f 1e       	adc	r3, r31
     16c:	00 00       	nop
     16e:	00 00       	nop
     170:	6c 6c       	ori	r22, 0xCC	; 204
     172:	00 00       	nop
     174:	00 00       	nop
     176:	00 a0       	ldd	r0, Z+32	; 0x20
     178:	ec 6c       	ori	r30, 0xCC	; 204
     17a:	00 00       	nop
     17c:	00 00       	nop
     17e:	08 1c       	adc	r0, r8
     180:	36 63       	ori	r19, 0x36	; 54
     182:	41 00       	.word	0x0041	; ????
     184:	00 00       	nop
     186:	14 14       	cp	r1, r4
     188:	14 14       	cp	r1, r4
     18a:	14 14       	cp	r1, r4
     18c:	00 00       	nop
     18e:	00 41       	sbci	r16, 0x10	; 16
     190:	63 36       	cpi	r22, 0x63	; 99
     192:	1c 08       	sbc	r1, r12
     194:	00 00       	nop
     196:	02 03       	mulsu	r16, r18
     198:	51 59       	subi	r21, 0x91	; 145
     19a:	0f 06       	cpc	r0, r31
     19c:	00 00       	nop
     19e:	3e 7f       	andi	r19, 0xFE	; 254
     1a0:	41 5d       	subi	r20, 0xD1	; 209
     1a2:	5d 1f       	adc	r21, r29
     1a4:	1e 00       	.word	0x001e	; ????
     1a6:	7c 7e       	andi	r23, 0xEC	; 236
     1a8:	13 13       	cpse	r17, r19
     1aa:	7e 7c       	andi	r23, 0xCE	; 206
     1ac:	00 00       	nop
     1ae:	41 7f       	andi	r20, 0xF1	; 241
     1b0:	7f 49       	sbci	r23, 0x9F	; 159
     1b2:	49 7f       	andi	r20, 0xF9	; 249
     1b4:	36 00       	.word	0x0036	; ????
     1b6:	1c 3e       	cpi	r17, 0xEC	; 236
     1b8:	63 41       	sbci	r22, 0x13	; 19
     1ba:	41 63       	ori	r20, 0x31	; 49
     1bc:	22 00       	.word	0x0022	; ????
     1be:	41 7f       	andi	r20, 0xF1	; 241
     1c0:	7f 41       	sbci	r23, 0x1F	; 31
     1c2:	63 7f       	andi	r22, 0xF3	; 243
     1c4:	1c 00       	.word	0x001c	; ????
     1c6:	41 7f       	andi	r20, 0xF1	; 241
     1c8:	7f 49       	sbci	r23, 0x9F	; 159
     1ca:	5d 41       	sbci	r21, 0x1D	; 29
     1cc:	63 00       	.word	0x0063	; ????
     1ce:	41 7f       	andi	r20, 0xF1	; 241
     1d0:	7f 49       	sbci	r23, 0x9F	; 159
     1d2:	1d 01       	movw	r2, r26
     1d4:	03 00       	.word	0x0003	; ????
     1d6:	1c 3e       	cpi	r17, 0xEC	; 236
     1d8:	63 41       	sbci	r22, 0x13	; 19
     1da:	51 73       	andi	r21, 0x31	; 49
     1dc:	72 00       	.word	0x0072	; ????
     1de:	7f 7f       	andi	r23, 0xFF	; 255
     1e0:	08 08       	sbc	r0, r8
     1e2:	7f 7f       	andi	r23, 0xFF	; 255
     1e4:	00 00       	nop
     1e6:	00 41       	sbci	r16, 0x10	; 16
     1e8:	7f 7f       	andi	r23, 0xFF	; 255
     1ea:	41 00       	.word	0x0041	; ????
     1ec:	00 00       	nop
     1ee:	30 70       	andi	r19, 0x00	; 0
     1f0:	40 41       	sbci	r20, 0x10	; 16
     1f2:	7f 3f       	cpi	r23, 0xFF	; 255
     1f4:	01 00       	.word	0x0001	; ????
     1f6:	41 7f       	andi	r20, 0xF1	; 241
     1f8:	7f 08       	sbc	r7, r15
     1fa:	1c 77       	andi	r17, 0x7C	; 124
     1fc:	63 00       	.word	0x0063	; ????
     1fe:	41 7f       	andi	r20, 0xF1	; 241
     200:	7f 41       	sbci	r23, 0x1F	; 31
     202:	40 60       	ori	r20, 0x00	; 0
     204:	70 00       	.word	0x0070	; ????
     206:	7f 7f       	andi	r23, 0xFF	; 255
     208:	06 0c       	add	r0, r6
     20a:	06 7f       	andi	r16, 0xF6	; 246
     20c:	7f 00       	.word	0x007f	; ????
     20e:	7f 7f       	andi	r23, 0xFF	; 255
     210:	06 0c       	add	r0, r6
     212:	18 7f       	andi	r17, 0xF8	; 248
     214:	7f 00       	.word	0x007f	; ????
     216:	1c 3e       	cpi	r17, 0xEC	; 236
     218:	63 41       	sbci	r22, 0x13	; 19
     21a:	63 3e       	cpi	r22, 0xE3	; 227
     21c:	1c 00       	.word	0x001c	; ????
     21e:	41 7f       	andi	r20, 0xF1	; 241
     220:	7f 49       	sbci	r23, 0x9F	; 159
     222:	09 0f       	add	r16, r25
     224:	06 00       	.word	0x0006	; ????
     226:	1e 3f       	cpi	r17, 0xFE	; 254
     228:	21 71       	andi	r18, 0x11	; 17
     22a:	7f 5e       	subi	r23, 0xEF	; 239
     22c:	00 00       	nop
     22e:	41 7f       	andi	r20, 0xF1	; 241
     230:	7f 19       	sub	r23, r15
     232:	39 6f       	ori	r19, 0xF9	; 249
     234:	46 00       	.word	0x0046	; ????
     236:	26 67       	ori	r18, 0x76	; 118
     238:	4d 59       	subi	r20, 0x9D	; 157
     23a:	7b 32       	cpi	r23, 0x2B	; 43
     23c:	00 00       	nop
     23e:	03 41       	sbci	r16, 0x13	; 19
     240:	7f 7f       	andi	r23, 0xFF	; 255
     242:	41 03       	mulsu	r20, r17
     244:	00 00       	nop
     246:	7f 7f       	andi	r23, 0xFF	; 255
     248:	40 40       	sbci	r20, 0x00	; 0
     24a:	7f 7f       	andi	r23, 0xFF	; 255
     24c:	00 00       	nop
     24e:	1f 3f       	cpi	r17, 0xFF	; 255
     250:	60 60       	ori	r22, 0x00	; 0
     252:	3f 1f       	adc	r19, r31
     254:	00 00       	nop
     256:	7f 7f       	andi	r23, 0xFF	; 255
     258:	30 18       	sub	r3, r0
     25a:	30 7f       	andi	r19, 0xF0	; 240
     25c:	7f 00       	.word	0x007f	; ????
     25e:	63 77       	andi	r22, 0x73	; 115
     260:	1c 08       	sbc	r1, r12
     262:	1c 77       	andi	r17, 0x7C	; 124
     264:	63 00       	.word	0x0063	; ????
     266:	07 4f       	sbci	r16, 0xF7	; 247
     268:	78 78       	andi	r23, 0x88	; 136
     26a:	4f 07       	cpc	r20, r31
     26c:	00 00       	nop
     26e:	67 73       	andi	r22, 0x37	; 55
     270:	59 4d       	sbci	r21, 0xD9	; 217
     272:	47 63       	ori	r20, 0x37	; 55
     274:	71 00       	.word	0x0071	; ????
     276:	00 7f       	andi	r16, 0xF0	; 240
     278:	7f 41       	sbci	r23, 0x1F	; 31
     27a:	41 00       	.word	0x0041	; ????
     27c:	00 00       	nop
     27e:	01 03       	mulsu	r16, r17
     280:	06 0c       	add	r0, r6
     282:	18 30       	cpi	r17, 0x08	; 8
     284:	60 00       	.word	0x0060	; ????
     286:	00 41       	sbci	r16, 0x10	; 16
     288:	41 7f       	andi	r20, 0xF1	; 241
     28a:	7f 00       	.word	0x007f	; ????
     28c:	00 00       	nop
     28e:	08 0c       	add	r0, r8
     290:	06 03       	mulsu	r16, r22
     292:	06 0c       	add	r0, r6
     294:	08 00       	.word	0x0008	; ????
     296:	80 80       	ld	r8, Z
     298:	80 80       	ld	r8, Z
     29a:	80 80       	ld	r8, Z
     29c:	80 80       	ld	r8, Z
     29e:	00 00       	nop
     2a0:	03 07       	cpc	r16, r19
     2a2:	04 00       	.word	0x0004	; ????
     2a4:	00 00       	nop
     2a6:	20 74       	andi	r18, 0x40	; 64
     2a8:	54 54       	subi	r21, 0x44	; 68
     2aa:	3c 78       	andi	r19, 0x8C	; 140
     2ac:	40 00       	.word	0x0040	; ????
     2ae:	41 3f       	cpi	r20, 0xF1	; 241
     2b0:	7f 44       	sbci	r23, 0x4F	; 79
     2b2:	44 7c       	andi	r20, 0xC4	; 196
     2b4:	38 00       	.word	0x0038	; ????
     2b6:	38 7c       	andi	r19, 0xC8	; 200
     2b8:	44 44       	sbci	r20, 0x44	; 68
     2ba:	6c 28       	or	r6, r12
     2bc:	00 00       	nop
     2be:	30 78       	andi	r19, 0x80	; 128
     2c0:	48 49       	sbci	r20, 0x98	; 152
     2c2:	3f 7f       	andi	r19, 0xFF	; 255
     2c4:	40 00       	.word	0x0040	; ????
     2c6:	38 7c       	andi	r19, 0xC8	; 200
     2c8:	54 54       	subi	r21, 0x44	; 68
     2ca:	5c 18       	sub	r5, r12
     2cc:	00 00       	nop
     2ce:	48 7e       	andi	r20, 0xE8	; 232
     2d0:	7f 49       	sbci	r23, 0x9F	; 159
     2d2:	03 02       	muls	r16, r19
     2d4:	00 00       	nop
     2d6:	98 bc       	out	0x28, r9	; 40
     2d8:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2da:	f8 7c       	andi	r31, 0xC8	; 200
     2dc:	04 00       	.word	0x0004	; ????
     2de:	41 7f       	andi	r20, 0xF1	; 241
     2e0:	7f 08       	sbc	r7, r15
     2e2:	04 7c       	andi	r16, 0xC4	; 196
     2e4:	78 00       	.word	0x0078	; ????
     2e6:	00 44       	sbci	r16, 0x40	; 64
     2e8:	7d 7d       	andi	r23, 0xDD	; 221
     2ea:	40 00       	.word	0x0040	; ????
     2ec:	00 00       	nop
     2ee:	40 c4       	rjmp	.+2176   	; 0xb70 <play_game+0x26>
     2f0:	84 fd       	sbrc	r24, 4
     2f2:	7d 00       	.word	0x007d	; ????
     2f4:	00 00       	nop
     2f6:	41 7f       	andi	r20, 0xF1	; 241
     2f8:	7f 10       	cpse	r7, r15
     2fa:	38 6c       	ori	r19, 0xC8	; 200
     2fc:	44 00       	.word	0x0044	; ????
     2fe:	00 41       	sbci	r16, 0x10	; 16
     300:	7f 7f       	andi	r23, 0xFF	; 255
     302:	40 00       	.word	0x0040	; ????
     304:	00 00       	nop
     306:	7c 7c       	andi	r23, 0xCC	; 204
     308:	0c 18       	sub	r0, r12
     30a:	0c 7c       	andi	r16, 0xCC	; 204
     30c:	78 00       	.word	0x0078	; ????
     30e:	7c 7c       	andi	r23, 0xCC	; 204
     310:	04 04       	cpc	r0, r4
     312:	7c 78       	andi	r23, 0x8C	; 140
     314:	00 00       	nop
     316:	38 7c       	andi	r19, 0xC8	; 200
     318:	44 44       	sbci	r20, 0x44	; 68
     31a:	7c 38       	cpi	r23, 0x8C	; 140
     31c:	00 00       	nop
     31e:	84 fc       	sbrc	r8, 4
     320:	f8 a4       	ldd	r15, Y+40	; 0x28
     322:	24 3c       	cpi	r18, 0xC4	; 196
     324:	18 00       	.word	0x0018	; ????
     326:	18 3c       	cpi	r17, 0xC8	; 200
     328:	24 a4       	ldd	r2, Z+44	; 0x2c
     32a:	f8 fc       	.word	0xfcf8	; ????
     32c:	84 00       	.word	0x0084	; ????
     32e:	44 7c       	andi	r20, 0xC4	; 196
     330:	78 44       	sbci	r23, 0x48	; 72
     332:	1c 18       	sub	r1, r12
     334:	00 00       	nop
     336:	48 5c       	subi	r20, 0xC8	; 200
     338:	54 54       	subi	r21, 0x44	; 68
     33a:	74 24       	eor	r7, r4
     33c:	00 00       	nop
     33e:	00 04       	cpc	r0, r0
     340:	3e 7f       	andi	r19, 0xFE	; 254
     342:	44 24       	eor	r4, r4
     344:	00 00       	nop
     346:	3c 7c       	andi	r19, 0xCC	; 204
     348:	40 40       	sbci	r20, 0x00	; 0
     34a:	3c 7c       	andi	r19, 0xCC	; 204
     34c:	40 00       	.word	0x0040	; ????
     34e:	1c 3c       	cpi	r17, 0xCC	; 204
     350:	60 60       	ori	r22, 0x00	; 0
     352:	3c 1c       	adc	r3, r12
     354:	00 00       	nop
     356:	3c 7c       	andi	r19, 0xCC	; 204
     358:	60 30       	cpi	r22, 0x00	; 0
     35a:	60 7c       	andi	r22, 0xC0	; 192
     35c:	3c 00       	.word	0x003c	; ????
     35e:	44 6c       	ori	r20, 0xC4	; 196
     360:	38 10       	cpse	r3, r8
     362:	38 6c       	ori	r19, 0xC8	; 200
     364:	44 00       	.word	0x0044	; ????
     366:	9c bc       	out	0x2c, r9	; 44
     368:	a0 a0       	ldd	r10, Z+32	; 0x20
     36a:	fc 7c       	andi	r31, 0xCC	; 204
     36c:	00 00       	nop
     36e:	4c 64       	ori	r20, 0x4C	; 76
     370:	74 5c       	subi	r23, 0xC4	; 196
     372:	4c 64       	ori	r20, 0x4C	; 76
     374:	00 00       	nop
     376:	08 08       	sbc	r0, r8
     378:	3e 77       	andi	r19, 0x7E	; 126
     37a:	41 41       	sbci	r20, 0x11	; 17
     37c:	00 00       	nop
     37e:	00 00       	nop
     380:	00 77       	andi	r16, 0x70	; 112
     382:	77 00       	.word	0x0077	; ????
     384:	00 00       	nop
     386:	41 41       	sbci	r20, 0x11	; 17
     388:	77 3e       	cpi	r23, 0xE7	; 231
     38a:	08 08       	sbc	r0, r8
     38c:	00 00       	nop
     38e:	02 03       	mulsu	r16, r18
     390:	01 03       	mulsu	r16, r17
     392:	02 03       	mulsu	r16, r18
     394:	01 00       	.word	0x0001	; ????

00000396 <__ctors_end>:
     396:	11 24       	eor	r1, r1
     398:	1f be       	out	0x3f, r1	; 63
     39a:	cf ef       	ldi	r28, 0xFF	; 255
     39c:	d4 e0       	ldi	r29, 0x04	; 4
     39e:	de bf       	out	0x3e, r29	; 62
     3a0:	cd bf       	out	0x3d, r28	; 61

000003a2 <__do_copy_data>:
     3a2:	14 e0       	ldi	r17, 0x04	; 4
     3a4:	a0 e0       	ldi	r26, 0x00	; 0
     3a6:	b1 e0       	ldi	r27, 0x01	; 1
     3a8:	e2 e7       	ldi	r30, 0x72	; 114
     3aa:	f3 e2       	ldi	r31, 0x23	; 35
     3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <__do_copy_data+0x10>
     3ae:	05 90       	lpm	r0, Z+
     3b0:	0d 92       	st	X+, r0
     3b2:	a6 30       	cpi	r26, 0x06	; 6
     3b4:	b1 07       	cpc	r27, r17
     3b6:	d9 f7       	brne	.-10     	; 0x3ae <__do_copy_data+0xc>

000003b8 <__do_clear_bss>:
     3b8:	24 e0       	ldi	r18, 0x04	; 4
     3ba:	a6 e0       	ldi	r26, 0x06	; 6
     3bc:	b4 e0       	ldi	r27, 0x04	; 4
     3be:	01 c0       	rjmp	.+2      	; 0x3c2 <.do_clear_bss_start>

000003c0 <.do_clear_bss_loop>:
     3c0:	1d 92       	st	X+, r1

000003c2 <.do_clear_bss_start>:
     3c2:	ad 39       	cpi	r26, 0x9D	; 157
     3c4:	b2 07       	cpc	r27, r18
     3c6:	e1 f7       	brne	.-8      	; 0x3c0 <.do_clear_bss_loop>
     3c8:	0e 94 c0 09 	call	0x1380	; 0x1380 <main>
     3cc:	0c 94 b7 11 	jmp	0x236e	; 0x236e <_exit>

000003d0 <__bad_interrupt>:
     3d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003d4 <ADC_read>:
    uint8_t retreived_value = ext_ram1[adrs];
    if (retreived_value != 0b01010101) {
        printf("ADC error, ext_ram1[%4d] = %02X  \n\r", adrs, retreived_value);
    }
    else{
        printf("ADC success, ext_ram1[%4d] = %02X  \n\r", adrs, retreived_value);
     3d4:	80 68       	ori	r24, 0x80	; 128
     3d6:	e1 e0       	ldi	r30, 0x01	; 1
     3d8:	f4 e1       	ldi	r31, 0x14	; 20
     3da:	80 83       	st	Z, r24
     3dc:	86 ef       	ldi	r24, 0xF6	; 246
     3de:	8a 95       	dec	r24
     3e0:	f1 f7       	brne	.-4      	; 0x3de <ADC_read+0xa>
     3e2:	80 81       	ld	r24, Z
     3e4:	08 95       	ret

000003e6 <ADC_calibrate>:
     3e6:	e1 e0       	ldi	r30, 0x01	; 1
     3e8:	f4 e1       	ldi	r31, 0x14	; 20
     3ea:	20 e8       	ldi	r18, 0x80	; 128
     3ec:	20 83       	st	Z, r18
     3ee:	26 ef       	ldi	r18, 0xF6	; 246
     3f0:	2a 95       	dec	r18
     3f2:	f1 f7       	brne	.-4      	; 0x3f0 <ADC_calibrate+0xa>
     3f4:	20 81       	ld	r18, Z
     3f6:	30 e0       	ldi	r19, 0x00	; 0
     3f8:	dc 01       	movw	r26, r24
     3fa:	2d 93       	st	X+, r18
     3fc:	3c 93       	st	X, r19
     3fe:	21 e8       	ldi	r18, 0x81	; 129
     400:	20 83       	st	Z, r18
     402:	b6 ef       	ldi	r27, 0xF6	; 246
     404:	ba 95       	dec	r27
     406:	f1 f7       	brne	.-4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     408:	20 81       	ld	r18, Z
     40a:	30 e0       	ldi	r19, 0x00	; 0
     40c:	fc 01       	movw	r30, r24
     40e:	33 83       	std	Z+3, r19	; 0x03
     410:	22 83       	std	Z+2, r18	; 0x02
     412:	08 95       	ret

00000414 <ADC_timer_init>:
}


void ADC_timer_init(void) {

    DDRB|=(1<<PB0);  /*set OC0 pin as output*/
     414:	b8 9a       	sbi	0x17, 0	; 23

    TCCR0 |= (1<<WGM01) | (0<<WGM00);
     416:	83 b7       	in	r24, 0x33	; 51
     418:	88 60       	ori	r24, 0x08	; 8
     41a:	83 bf       	out	0x33, r24	; 51
    TCCR0 |= (1<<COM00);
     41c:	83 b7       	in	r24, 0x33	; 51
     41e:	80 61       	ori	r24, 0x10	; 16
     420:	83 bf       	out	0x33, r24	; 51
    TCCR0 |= (1<<CS00);
     422:	83 b7       	in	r24, 0x33	; 51
     424:	81 60       	ori	r24, 0x01	; 1
     426:	83 bf       	out	0x33, r24	; 51

    OCR0 = 0b00000001;
     428:	81 e0       	ldi	r24, 0x01	; 1
     42a:	81 bf       	out	0x31, r24	; 49
     42c:	08 95       	ret

0000042e <CAN_init>:
uint8_t CAN_check_interrupt(){
    if(flag){
        return 1;
    }
	return 0;
}
     42e:	cf 93       	push	r28
     430:	c8 2f       	mov	r28, r24
     432:	f8 94       	cli
     434:	85 b7       	in	r24, 0x35	; 53
     436:	82 60       	ori	r24, 0x02	; 2
     438:	85 bf       	out	0x35, r24	; 53
     43a:	85 b7       	in	r24, 0x35	; 53
     43c:	8e 7f       	andi	r24, 0xFE	; 254
     43e:	85 bf       	out	0x35, r24	; 53
     440:	8b b7       	in	r24, 0x3b	; 59
     442:	80 64       	ori	r24, 0x40	; 64
     444:	8b bf       	out	0x3b, r24	; 59
     446:	78 94       	sei
     448:	80 e8       	ldi	r24, 0x80	; 128
     44a:	0e 94 f7 03 	call	0x7ee	; 0x7ee <mcp_init>
     44e:	63 e0       	ldi	r22, 0x03	; 3
     450:	8b e2       	ldi	r24, 0x2B	; 43
     452:	0e 94 be 03 	call	0x77c	; 0x77c <mcp_write>
     456:	61 e8       	ldi	r22, 0x81	; 129
     458:	8a e2       	ldi	r24, 0x2A	; 42
     45a:	0e 94 be 03 	call	0x77c	; 0x77c <mcp_write>
     45e:	6d ea       	ldi	r22, 0xAD	; 173
     460:	89 e2       	ldi	r24, 0x29	; 41
     462:	0e 94 be 03 	call	0x77c	; 0x77c <mcp_write>
     466:	65 e0       	ldi	r22, 0x05	; 5
     468:	88 e2       	ldi	r24, 0x28	; 40
     46a:	0e 94 be 03 	call	0x77c	; 0x77c <mcp_write>
     46e:	8c 2f       	mov	r24, r28
     470:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <mcp_set_mode>
     474:	cf 91       	pop	r28
     476:	08 95       	ret

00000478 <__vector_1>:
     478:	1f 92       	push	r1
     47a:	0f 92       	push	r0
     47c:	0f b6       	in	r0, 0x3f	; 63
     47e:	0f 92       	push	r0
     480:	11 24       	eor	r1, r1
     482:	8f 93       	push	r24
     484:	9f 93       	push	r25
     486:	81 e0       	ldi	r24, 0x01	; 1
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	90 93 07 04 	sts	0x0407, r25	; 0x800407 <__data_end+0x1>
     48e:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__data_end>
     492:	9f 91       	pop	r25
     494:	8f 91       	pop	r24
     496:	0f 90       	pop	r0
     498:	0f be       	out	0x3f, r0	; 63
     49a:	0f 90       	pop	r0
     49c:	1f 90       	pop	r1
     49e:	18 95       	reti

000004a0 <CAN_message_transmission>:


uint8_t CAN_message_transmission(CAN_message_t* can_message){
     4a0:	0f 93       	push	r16
     4a2:	1f 93       	push	r17
     4a4:	cf 93       	push	r28
     4a6:	df 93       	push	r29
     4a8:	8c 01       	movw	r16, r24

    //Splitting up the identifier into two bytes
    uint8_t identifier_low = ((can_message -> identifier) << 5);
     4aa:	fc 01       	movw	r30, r24
     4ac:	c0 81       	ld	r28, Z
     4ae:	d1 81       	ldd	r29, Z+1	; 0x01
    uint8_t identifier_high = ((can_message -> identifier) >> 3);

    //Writing the identifier
    mcp_write(MCP_TXB0SIDL, identifier_low);
     4b0:	6c 2f       	mov	r22, r28
     4b2:	62 95       	swap	r22
     4b4:	66 0f       	add	r22, r22
     4b6:	60 7e       	andi	r22, 0xE0	; 224
     4b8:	82 e3       	ldi	r24, 0x32	; 50
     4ba:	0e 94 be 03 	call	0x77c	; 0x77c <mcp_write>
    mcp_write(MCP_TXB0SIDH, identifier_high);
     4be:	be 01       	movw	r22, r28
     4c0:	76 95       	lsr	r23
     4c2:	67 95       	ror	r22
     4c4:	76 95       	lsr	r23
     4c6:	67 95       	ror	r22
     4c8:	76 95       	lsr	r23
     4ca:	67 95       	ror	r22
     4cc:	81 e3       	ldi	r24, 0x31	; 49
     4ce:	0e 94 be 03 	call	0x77c	; 0x77c <mcp_write>

    //Writing the length of the data message
    mcp_write(MCP_TXB0DLC, can_message -> data_length);
     4d2:	f8 01       	movw	r30, r16
     4d4:	62 81       	ldd	r22, Z+2	; 0x02
     4d6:	85 e3       	ldi	r24, 0x35	; 53
     4d8:	0e 94 be 03 	call	0x77c	; 0x77c <mcp_write>

    //Writing the data Message
    uint8_t data_byte;
    for(uint8_t i = 0; i < (can_message -> data_length); i++){
     4dc:	f8 01       	movw	r30, r16
     4de:	82 81       	ldd	r24, Z+2	; 0x02
     4e0:	88 23       	and	r24, r24
     4e2:	71 f0       	breq	.+28     	; 0x500 <__stack+0x1>
     4e4:	c0 e0       	ldi	r28, 0x00	; 0
        data_byte = (can_message -> data)[i];
     4e6:	f8 01       	movw	r30, r16
     4e8:	ec 0f       	add	r30, r28
     4ea:	f1 1d       	adc	r31, r1
        mcp_write(MCP_TXB0D0 + i, data_byte);
     4ec:	63 81       	ldd	r22, Z+3	; 0x03
     4ee:	86 e3       	ldi	r24, 0x36	; 54
     4f0:	8c 0f       	add	r24, r28
     4f2:	0e 94 be 03 	call	0x77c	; 0x77c <mcp_write>
    //Writing the length of the data message
    mcp_write(MCP_TXB0DLC, can_message -> data_length);

    //Writing the data Message
    uint8_t data_byte;
    for(uint8_t i = 0; i < (can_message -> data_length); i++){
     4f6:	cf 5f       	subi	r28, 0xFF	; 255
     4f8:	f8 01       	movw	r30, r16
     4fa:	82 81       	ldd	r24, Z+2	; 0x02
     4fc:	c8 17       	cp	r28, r24
     4fe:	98 f3       	brcs	.-26     	; 0x4e6 <CAN_message_transmission+0x46>
        data_byte = (can_message -> data)[i];
        mcp_write(MCP_TXB0D0 + i, data_byte);
    }

    // Request to send to given buffer
    mcp_request_to_send(0);
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	0e 94 4f 04 	call	0x89e	; 0x89e <mcp_request_to_send>
}
     506:	df 91       	pop	r29
     508:	cf 91       	pop	r28
     50a:	1f 91       	pop	r17
     50c:	0f 91       	pop	r16
     50e:	08 95       	ret

00000510 <CAN_meessage_reception>:


CAN_message_t CAN_meessage_reception(){
     510:	9f 92       	push	r9
     512:	af 92       	push	r10
     514:	bf 92       	push	r11
     516:	cf 92       	push	r12
     518:	df 92       	push	r13
     51a:	ef 92       	push	r14
     51c:	ff 92       	push	r15
     51e:	0f 93       	push	r16
     520:	1f 93       	push	r17
     522:	cf 93       	push	r28
     524:	df 93       	push	r29
     526:	cd b7       	in	r28, 0x3d	; 61
     528:	de b7       	in	r29, 0x3e	; 62
     52a:	2b 97       	sbiw	r28, 0x0b	; 11
     52c:	0f b6       	in	r0, 0x3f	; 63
     52e:	f8 94       	cli
     530:	de bf       	out	0x3e, r29	; 62
     532:	0f be       	out	0x3f, r0	; 63
     534:	cd bf       	out	0x3d, r28	; 61
     536:	5c 01       	movw	r10, r24

    uint8_t byte_mask = 0xE0; // Mask for lower part of identifier
    uint8_t length_mask = 0x0F; // Mask for message length register

    // Reading the identifier higher byte
    unsigned int identifier_high = mcp_read(MCP_RXB0SIDH);
     538:	81 e6       	ldi	r24, 0x61	; 97
     53a:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <mcp_read>
     53e:	c8 2e       	mov	r12, r24
     540:	d1 2c       	mov	r13, r1
    identifier_high = (identifier_high << 8 );

    // Reading the identifier lower byte
    uint8_t identifier_low = mcp_read(MCP_RXB0SIDL);
     542:	82 e6       	ldi	r24, 0x62	; 98
     544:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <mcp_read>
    identifier_low &= byte_mask;

    message.identifier = identifier_low + identifier_high;
     548:	dc 2c       	mov	r13, r12
     54a:	cc 24       	eor	r12, r12
     54c:	80 7e       	andi	r24, 0xE0	; 224
     54e:	c8 0e       	add	r12, r24
     550:	d1 1c       	adc	r13, r1

    // Reading the message length
    message.data_length = mcp_read(MCP_RXB0DLC)&length_mask;
     552:	85 e6       	ldi	r24, 0x65	; 101
     554:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <mcp_read>
     558:	8f 70       	andi	r24, 0x0F	; 15
     55a:	98 2e       	mov	r9, r24

    // Reading the data in the message
    for(uint8_t i = 0; i < message.data_length; i++){
     55c:	81 f0       	breq	.+32     	; 0x57e <CAN_meessage_reception+0x6e>
     55e:	7e 01       	movw	r14, r28
     560:	84 e0       	ldi	r24, 0x04	; 4
     562:	e8 0e       	add	r14, r24
     564:	f1 1c       	adc	r15, r1
     566:	06 e6       	ldi	r16, 0x66	; 102
     568:	09 0d       	add	r16, r9
     56a:	16 e6       	ldi	r17, 0x66	; 102
        (message.data)[i] = mcp_read(MCP_RXB0DM +i);
     56c:	81 2f       	mov	r24, r17
     56e:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <mcp_read>
     572:	f7 01       	movw	r30, r14
     574:	81 93       	st	Z+, r24
     576:	7f 01       	movw	r14, r30
     578:	1f 5f       	subi	r17, 0xFF	; 255

    // Reading the message length
    message.data_length = mcp_read(MCP_RXB0DLC)&length_mask;

    // Reading the data in the message
    for(uint8_t i = 0; i < message.data_length; i++){
     57a:	10 13       	cpse	r17, r16
     57c:	f7 cf       	rjmp	.-18     	; 0x56c <CAN_meessage_reception+0x5c>
        (message.data)[i] = mcp_read(MCP_RXB0DM +i);
    }
    
    return message;
     57e:	da 82       	std	Y+2, r13	; 0x02
     580:	c9 82       	std	Y+1, r12	; 0x01
     582:	9b 82       	std	Y+3, r9	; 0x03
     584:	8b e0       	ldi	r24, 0x0B	; 11
     586:	fe 01       	movw	r30, r28
     588:	31 96       	adiw	r30, 0x01	; 1
     58a:	d5 01       	movw	r26, r10
     58c:	01 90       	ld	r0, Z+
     58e:	0d 92       	st	X+, r0
     590:	8a 95       	dec	r24
     592:	e1 f7       	brne	.-8      	; 0x58c <CAN_meessage_reception+0x7c>
}
     594:	c5 01       	movw	r24, r10
     596:	2b 96       	adiw	r28, 0x0b	; 11
     598:	0f b6       	in	r0, 0x3f	; 63
     59a:	f8 94       	cli
     59c:	de bf       	out	0x3e, r29	; 62
     59e:	0f be       	out	0x3f, r0	; 63
     5a0:	cd bf       	out	0x3d, r28	; 61
     5a2:	df 91       	pop	r29
     5a4:	cf 91       	pop	r28
     5a6:	1f 91       	pop	r17
     5a8:	0f 91       	pop	r16
     5aa:	ff 90       	pop	r15
     5ac:	ef 90       	pop	r14
     5ae:	df 90       	pop	r13
     5b0:	cf 90       	pop	r12
     5b2:	bf 90       	pop	r11
     5b4:	af 90       	pop	r10
     5b6:	9f 90       	pop	r9
     5b8:	08 95       	ret

000005ba <CAN_meessage_reception2>:

CAN_message_t CAN_meessage_reception2(){
     5ba:	9f 92       	push	r9
     5bc:	af 92       	push	r10
     5be:	bf 92       	push	r11
     5c0:	cf 92       	push	r12
     5c2:	df 92       	push	r13
     5c4:	ef 92       	push	r14
     5c6:	ff 92       	push	r15
     5c8:	0f 93       	push	r16
     5ca:	1f 93       	push	r17
     5cc:	cf 93       	push	r28
     5ce:	df 93       	push	r29
     5d0:	cd b7       	in	r28, 0x3d	; 61
     5d2:	de b7       	in	r29, 0x3e	; 62
     5d4:	2b 97       	sbiw	r28, 0x0b	; 11
     5d6:	0f b6       	in	r0, 0x3f	; 63
     5d8:	f8 94       	cli
     5da:	de bf       	out	0x3e, r29	; 62
     5dc:	0f be       	out	0x3f, r0	; 63
     5de:	cd bf       	out	0x3d, r28	; 61
     5e0:	5c 01       	movw	r10, r24

    uint8_t byte_mask = 0xE0;   // Mask for lower part of identifier
    uint8_t length_mask = 0x0F; // Mask for message length register

    // Reading the identifier higher byte
    unsigned int identifier_high = mcp_read(MCP_RXB1SIDH);
     5e2:	81 e7       	ldi	r24, 0x71	; 113
     5e4:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <mcp_read>
     5e8:	c8 2e       	mov	r12, r24
     5ea:	d1 2c       	mov	r13, r1
    identifier_high = (identifier_high << 8 );

    // Reading the identifier lower byte
    uint8_t identifier_low = mcp_read(MCP_RXB0SIDL + 16);
     5ec:	82 e7       	ldi	r24, 0x72	; 114
     5ee:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <mcp_read>
    identifier_low &= byte_mask;

    message.identifier = identifier_low + identifier_high;
     5f2:	dc 2c       	mov	r13, r12
     5f4:	cc 24       	eor	r12, r12
     5f6:	80 7e       	andi	r24, 0xE0	; 224
     5f8:	c8 0e       	add	r12, r24
     5fa:	d1 1c       	adc	r13, r1

    // Reading the message length
    message.data_length = mcp_read(MCP_RXB0DLC + 16)&length_mask;
     5fc:	85 e7       	ldi	r24, 0x75	; 117
     5fe:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <mcp_read>
     602:	8f 70       	andi	r24, 0x0F	; 15
     604:	98 2e       	mov	r9, r24

    // Reading the data in the message
    for(uint8_t i = 0; i < message.data_length; i++){
     606:	81 f0       	breq	.+32     	; 0x628 <CAN_meessage_reception2+0x6e>
     608:	7e 01       	movw	r14, r28
     60a:	84 e0       	ldi	r24, 0x04	; 4
     60c:	e8 0e       	add	r14, r24
     60e:	f1 1c       	adc	r15, r1
     610:	06 e7       	ldi	r16, 0x76	; 118
     612:	09 0d       	add	r16, r9
     614:	16 e7       	ldi	r17, 0x76	; 118
        (message.data)[i] = mcp_read(MCP_RXB0DM +i + 16);
     616:	81 2f       	mov	r24, r17
     618:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <mcp_read>
     61c:	f7 01       	movw	r30, r14
     61e:	81 93       	st	Z+, r24
     620:	7f 01       	movw	r14, r30
     622:	1f 5f       	subi	r17, 0xFF	; 255

    // Reading the message length
    message.data_length = mcp_read(MCP_RXB0DLC + 16)&length_mask;

    // Reading the data in the message
    for(uint8_t i = 0; i < message.data_length; i++){
     624:	10 13       	cpse	r17, r16
     626:	f7 cf       	rjmp	.-18     	; 0x616 <CAN_meessage_reception2+0x5c>
        (message.data)[i] = mcp_read(MCP_RXB0DM +i + 16);
    }
    
    return message;
     628:	da 82       	std	Y+2, r13	; 0x02
     62a:	c9 82       	std	Y+1, r12	; 0x01
     62c:	9b 82       	std	Y+3, r9	; 0x03
     62e:	8b e0       	ldi	r24, 0x0B	; 11
     630:	fe 01       	movw	r30, r28
     632:	31 96       	adiw	r30, 0x01	; 1
     634:	d5 01       	movw	r26, r10
     636:	01 90       	ld	r0, Z+
     638:	0d 92       	st	X+, r0
     63a:	8a 95       	dec	r24
     63c:	e1 f7       	brne	.-8      	; 0x636 <CAN_meessage_reception2+0x7c>
}
     63e:	c5 01       	movw	r24, r10
     640:	2b 96       	adiw	r28, 0x0b	; 11
     642:	0f b6       	in	r0, 0x3f	; 63
     644:	f8 94       	cli
     646:	de bf       	out	0x3e, r29	; 62
     648:	0f be       	out	0x3f, r0	; 63
     64a:	cd bf       	out	0x3d, r28	; 61
     64c:	df 91       	pop	r29
     64e:	cf 91       	pop	r28
     650:	1f 91       	pop	r17
     652:	0f 91       	pop	r16
     654:	ff 90       	pop	r15
     656:	ef 90       	pop	r14
     658:	df 90       	pop	r13
     65a:	cf 90       	pop	r12
     65c:	bf 90       	pop	r11
     65e:	af 90       	pop	r10
     660:	9f 90       	pop	r9
     662:	08 95       	ret

00000664 <message_handler>:

CAN_message_t message_handler(){
     664:	cf 93       	push	r28
     666:	df 93       	push	r29
     668:	ec 01       	movw	r28, r24
    CAN_message_t message;
    
    // Checks if buffer 1 is full
    if(mcp_read(MCP_CANINTF) && 0x01){
     66a:	8c e2       	ldi	r24, 0x2C	; 44
     66c:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <mcp_read>
     670:	88 23       	and	r24, r24
     672:	d1 f0       	breq	.+52     	; 0x6a8 <message_handler+0x44>
        message = CAN_meessage_reception(); //reads buffer 2 register
     674:	ce 01       	movw	r24, r28
     676:	0e 94 88 02 	call	0x510	; 0x510 <CAN_meessage_reception>
        printf("i reception nr1 \r\n");
     67a:	8a e1       	ldi	r24, 0x1A	; 26
     67c:	91 e0       	ldi	r25, 0x01	; 1
     67e:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <puts>

        mcp_bit_modify(MCP_CANINTF, 1, 0);  // resets can interrupt flag bit for buffer 1
     682:	40 e0       	ldi	r20, 0x00	; 0
     684:	61 e0       	ldi	r22, 0x01	; 1
     686:	8c e2       	ldi	r24, 0x2C	; 44
     688:	0e 94 33 04 	call	0x866	; 0x866 <mcp_bit_modify>
        if(!(mcp_read(MCP_CANINTF) && 2)   ){
     68c:	8c e2       	ldi	r24, 0x2C	; 44
     68e:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <mcp_read>
     692:	81 11       	cpse	r24, r1
     694:	27 c0       	rjmp	.+78     	; 0x6e4 <message_handler+0x80>
            printf("er i if nr1 \r\n");
     696:	8c e2       	ldi	r24, 0x2C	; 44
     698:	91 e0       	ldi	r25, 0x01	; 1
     69a:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <puts>
            flag = 0;
     69e:	10 92 07 04 	sts	0x0407, r1	; 0x800407 <__data_end+0x1>
     6a2:	10 92 06 04 	sts	0x0406, r1	; 0x800406 <__data_end>
     6a6:	1e c0       	rjmp	.+60     	; 0x6e4 <message_handler+0x80>
        }
    }
    
    // Checks if buffer 2 is full
    else if(mcp_read(MCP_CANINTF) && 0x02){
     6a8:	8c e2       	ldi	r24, 0x2C	; 44
     6aa:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <mcp_read>
     6ae:	88 23       	and	r24, r24
     6b0:	c9 f0       	breq	.+50     	; 0x6e4 <message_handler+0x80>
        message = CAN_meessage_reception2();  //reads buffer 2 register
     6b2:	ce 01       	movw	r24, r28
     6b4:	0e 94 dd 02 	call	0x5ba	; 0x5ba <CAN_meessage_reception2>
         printf("i reception nr2 \r\n");
     6b8:	8a e3       	ldi	r24, 0x3A	; 58
     6ba:	91 e0       	ldi	r25, 0x01	; 1
     6bc:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <puts>

        mcp_bit_modify(MCP_CANINTF, 2, 0);    // resets can interrupt flag bit for buffer 2
     6c0:	40 e0       	ldi	r20, 0x00	; 0
     6c2:	62 e0       	ldi	r22, 0x02	; 2
     6c4:	8c e2       	ldi	r24, 0x2C	; 44
     6c6:	0e 94 33 04 	call	0x866	; 0x866 <mcp_bit_modify>
        if(!(mcp_read(MCP_CANINTF) && 1)   ){ 
     6ca:	8c e2       	ldi	r24, 0x2C	; 44
     6cc:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <mcp_read>
     6d0:	81 11       	cpse	r24, r1
     6d2:	08 c0       	rjmp	.+16     	; 0x6e4 <message_handler+0x80>
            printf("er i if nr2 \r\n");
     6d4:	8c e4       	ldi	r24, 0x4C	; 76
     6d6:	91 e0       	ldi	r25, 0x01	; 1
     6d8:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <puts>
            flag = 0; 
     6dc:	10 92 07 04 	sts	0x0407, r1	; 0x800407 <__data_end+0x1>
     6e0:	10 92 06 04 	sts	0x0406, r1	; 0x800406 <__data_end>
        }
    }
    
return message;
}
     6e4:	ce 01       	movw	r24, r28
     6e6:	df 91       	pop	r29
     6e8:	cf 91       	pop	r28
     6ea:	08 95       	ret

000006ec <joyStick_Can_Message>:
 *  Author: Herbe
 */ 
#include "CAN_joystick_messages.h"


void joyStick_Can_Message(){
     6ec:	ef 92       	push	r14
     6ee:	ff 92       	push	r15
     6f0:	0f 93       	push	r16
     6f2:	1f 93       	push	r17
     6f4:	cf 93       	push	r28
     6f6:	df 93       	push	r29
     6f8:	cd b7       	in	r28, 0x3d	; 61
     6fa:	de b7       	in	r29, 0x3e	; 62
     6fc:	2b 97       	sbiw	r28, 0x0b	; 11
     6fe:	0f b6       	in	r0, 0x3f	; 63
     700:	f8 94       	cli
     702:	de bf       	out	0x3e, r29	; 62
     704:	0f be       	out	0x3f, r0	; 63
     706:	cd bf       	out	0x3d, r28	; 61
	
pos_read(&P_pos); //Reads the current position of the joystick
     708:	8c e8       	ldi	r24, 0x8C	; 140
     70a:	94 e0       	ldi	r25, 0x04	; 4
     70c:	0e 94 f7 07 	call	0xfee	; 0xfee <pos_read>

uint8_t sendSliderRight = ADC_read(2);  
     710:	82 e0       	ldi	r24, 0x02	; 2
     712:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ADC_read>
     716:	e8 2e       	mov	r14, r24
uint8_t sendPosX = 128 + P_pos.posX;  //Adding 128 to not have negative a number
     718:	ec e8       	ldi	r30, 0x8C	; 140
     71a:	f4 e0       	ldi	r31, 0x04	; 4
     71c:	80 81       	ld	r24, Z
     71e:	68 94       	set
     720:	ff 24       	eor	r15, r15
     722:	f7 f8       	bld	r15, 7
     724:	f8 0e       	add	r15, r24
uint8_t sendPosY = 128 + P_pos.posY;  //Adding 128 to not have negative a number
     726:	02 81       	ldd	r16, Z+2	; 0x02
     728:	00 58       	subi	r16, 0x80	; 128
uint8_t sendJoyButton = usb_button_pushed(JOYSTICK_BUTTON);
     72a:	82 e0       	ldi	r24, 0x02	; 2
     72c:	0e 94 ac 09 	call	0x1358	; 0x1358 <usb_button_pushed>
     730:	18 2f       	mov	r17, r24
uint8_t sendJoyDirection = (joystick_direction()) << 1; //shift right to not disturb rest of message
     732:	0e 94 e6 08 	call	0x11cc	; 0x11cc <joystick_direction>

uint8_t sendJoyData = sendJoyDirection + sendJoyButton;  //Combining button-bushed and joystick-direction in one byte.

CAN_message_t joyStickData;
joyStickData.identifier = 1;
     736:	21 e0       	ldi	r18, 0x01	; 1
     738:	30 e0       	ldi	r19, 0x00	; 0
     73a:	3a 83       	std	Y+2, r19	; 0x02
     73c:	29 83       	std	Y+1, r18	; 0x01
joyStickData.data[0] = sendPosX;
     73e:	fc 82       	std	Y+4, r15	; 0x04
joyStickData.data[1] = sendPosY;
     740:	0d 83       	std	Y+5, r16	; 0x05
joyStickData.data[2] = sendJoyData;
     742:	88 0f       	add	r24, r24
     744:	18 0f       	add	r17, r24
     746:	1e 83       	std	Y+6, r17	; 0x06
joyStickData.data[3] = sendSliderRight;
     748:	ef 82       	std	Y+7, r14	; 0x07
joyStickData.data_length = 4;
     74a:	84 e0       	ldi	r24, 0x04	; 4
     74c:	8b 83       	std	Y+3, r24	; 0x03

CAN_message_transmission(&joyStickData);
     74e:	ce 01       	movw	r24, r28
     750:	01 96       	adiw	r24, 0x01	; 1
     752:	0e 94 50 02 	call	0x4a0	; 0x4a0 <CAN_message_transmission>
     756:	2b 96       	adiw	r28, 0x0b	; 11
     758:	0f b6       	in	r0, 0x3f	; 63
     75a:	f8 94       	cli
     75c:	de bf       	out	0x3e, r29	; 62
     75e:	0f be       	out	0x3f, r0	; 63
     760:	cd bf       	out	0x3d, r28	; 61
     762:	df 91       	pop	r29
     764:	cf 91       	pop	r28
     766:	1f 91       	pop	r17
     768:	0f 91       	pop	r16
     76a:	ff 90       	pop	r15
     76c:	ef 90       	pop	r14
     76e:	08 95       	ret

00000770 <spi_master_CS>:
    status_value = spi_read();

    spi_master_CS(1);

    return status_value;
}
     770:	81 11       	cpse	r24, r1
     772:	02 c0       	rjmp	.+4      	; 0x778 <spi_master_CS+0x8>
     774:	c4 98       	cbi	0x18, 4	; 24
     776:	08 95       	ret
     778:	c4 9a       	sbi	0x18, 4	; 24
     77a:	08 95       	ret

0000077c <mcp_write>:
     77c:	cf 93       	push	r28
     77e:	df 93       	push	r29
     780:	d8 2f       	mov	r29, r24
     782:	c6 2f       	mov	r28, r22
     784:	80 e0       	ldi	r24, 0x00	; 0
     786:	0e 94 b8 03 	call	0x770	; 0x770 <spi_master_CS>
     78a:	82 e0       	ldi	r24, 0x02	; 2
     78c:	0e 94 09 0a 	call	0x1412	; 0x1412 <spi_write>
     790:	8d 2f       	mov	r24, r29
     792:	0e 94 09 0a 	call	0x1412	; 0x1412 <spi_write>
     796:	8c 2f       	mov	r24, r28
     798:	0e 94 09 0a 	call	0x1412	; 0x1412 <spi_write>
     79c:	81 e0       	ldi	r24, 0x01	; 1
     79e:	0e 94 b8 03 	call	0x770	; 0x770 <spi_master_CS>
     7a2:	df 91       	pop	r29
     7a4:	cf 91       	pop	r28
     7a6:	08 95       	ret

000007a8 <mcp_set_mode>:
     7a8:	68 2f       	mov	r22, r24
     7aa:	8f e0       	ldi	r24, 0x0F	; 15
     7ac:	0e 94 be 03 	call	0x77c	; 0x77c <mcp_write>
     7b0:	08 95       	ret

000007b2 <mcp_read>:
     7b2:	cf 93       	push	r28
     7b4:	c8 2f       	mov	r28, r24
     7b6:	80 e0       	ldi	r24, 0x00	; 0
     7b8:	0e 94 b8 03 	call	0x770	; 0x770 <spi_master_CS>
     7bc:	83 e0       	ldi	r24, 0x03	; 3
     7be:	0e 94 09 0a 	call	0x1412	; 0x1412 <spi_write>
     7c2:	8c 2f       	mov	r24, r28
     7c4:	0e 94 09 0a 	call	0x1412	; 0x1412 <spi_write>
     7c8:	0e 94 0d 0a 	call	0x141a	; 0x141a <spi_read>
     7cc:	c8 2f       	mov	r28, r24
     7ce:	81 e0       	ldi	r24, 0x01	; 1
     7d0:	0e 94 b8 03 	call	0x770	; 0x770 <spi_master_CS>
     7d4:	8c 2f       	mov	r24, r28
     7d6:	cf 91       	pop	r28
     7d8:	08 95       	ret

000007da <mcp_reset>:
     7da:	80 e0       	ldi	r24, 0x00	; 0
     7dc:	0e 94 b8 03 	call	0x770	; 0x770 <spi_master_CS>
     7e0:	80 ec       	ldi	r24, 0xC0	; 192
     7e2:	0e 94 09 0a 	call	0x1412	; 0x1412 <spi_write>
     7e6:	81 e0       	ldi	r24, 0x01	; 1
     7e8:	0e 94 b8 03 	call	0x770	; 0x770 <spi_master_CS>
     7ec:	08 95       	ret

000007ee <mcp_init>:
     7ee:	cf 93       	push	r28
     7f0:	df 93       	push	r29
     7f2:	d8 2f       	mov	r29, r24
     7f4:	0e 94 12 0a 	call	0x1424	; 0x1424 <spi_init>
     7f8:	0e 94 ed 03 	call	0x7da	; 0x7da <mcp_reset>
     7fc:	80 e8       	ldi	r24, 0x80	; 128
     7fe:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <mcp_set_mode>
     802:	8f ef       	ldi	r24, 0xFF	; 255
     804:	9f e8       	ldi	r25, 0x8F	; 143
     806:	01 97       	sbiw	r24, 0x01	; 1
     808:	f1 f7       	brne	.-4      	; 0x806 <mcp_init+0x18>
     80a:	00 c0       	rjmp	.+0      	; 0x80c <mcp_init+0x1e>
     80c:	00 00       	nop
     80e:	8e e0       	ldi	r24, 0x0E	; 14
     810:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <mcp_read>
     814:	c8 2f       	mov	r28, r24
     816:	1f 92       	push	r1
     818:	8f 93       	push	r24
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	92 e0       	ldi	r25, 0x02	; 2
     81e:	9f 93       	push	r25
     820:	8f 93       	push	r24
     822:	0e 94 65 0d 	call	0x1aca	; 0x1aca <printf>
     826:	c0 7e       	andi	r28, 0xE0	; 224
     828:	0f 90       	pop	r0
     82a:	0f 90       	pop	r0
     82c:	0f 90       	pop	r0
     82e:	0f 90       	pop	r0
     830:	c0 38       	cpi	r28, 0x80	; 128
     832:	31 f0       	breq	.+12     	; 0x840 <mcp_init+0x52>
     834:	8f e0       	ldi	r24, 0x0F	; 15
     836:	92 e0       	ldi	r25, 0x02	; 2
     838:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <puts>
     83c:	81 e0       	ldi	r24, 0x01	; 1
     83e:	10 c0       	rjmp	.+32     	; 0x860 <mcp_init+0x72>
     840:	8d 2f       	mov	r24, r29
     842:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <mcp_set_mode>
     846:	8e e0       	ldi	r24, 0x0E	; 14
     848:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <mcp_read>
     84c:	80 7e       	andi	r24, 0xE0	; 224
     84e:	8d 17       	cp	r24, r29
     850:	31 f0       	breq	.+12     	; 0x85e <mcp_init+0x70>
     852:	81 e4       	ldi	r24, 0x41	; 65
     854:	92 e0       	ldi	r25, 0x02	; 2
     856:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <puts>
     85a:	81 e0       	ldi	r24, 0x01	; 1
     85c:	01 c0       	rjmp	.+2      	; 0x860 <mcp_init+0x72>
     85e:	80 e0       	ldi	r24, 0x00	; 0
     860:	df 91       	pop	r29
     862:	cf 91       	pop	r28
     864:	08 95       	ret

00000866 <mcp_bit_modify>:
     866:	1f 93       	push	r17
     868:	cf 93       	push	r28
     86a:	df 93       	push	r29
     86c:	18 2f       	mov	r17, r24
     86e:	d6 2f       	mov	r29, r22
     870:	c4 2f       	mov	r28, r20
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	0e 94 b8 03 	call	0x770	; 0x770 <spi_master_CS>
     878:	85 e0       	ldi	r24, 0x05	; 5
     87a:	0e 94 09 0a 	call	0x1412	; 0x1412 <spi_write>
     87e:	81 2f       	mov	r24, r17
     880:	0e 94 09 0a 	call	0x1412	; 0x1412 <spi_write>
     884:	8d 2f       	mov	r24, r29
     886:	0e 94 09 0a 	call	0x1412	; 0x1412 <spi_write>
     88a:	8c 2f       	mov	r24, r28
     88c:	0e 94 09 0a 	call	0x1412	; 0x1412 <spi_write>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	0e 94 b8 03 	call	0x770	; 0x770 <spi_master_CS>
     896:	df 91       	pop	r29
     898:	cf 91       	pop	r28
     89a:	1f 91       	pop	r17
     89c:	08 95       	ret

0000089e <mcp_request_to_send>:

void mcp_request_to_send(uint8_t buffer){
     89e:	cf 93       	push	r28
     8a0:	c8 2f       	mov	r28, r24
    spi_master_CS(0);
     8a2:	80 e0       	ldi	r24, 0x00	; 0
     8a4:	0e 94 b8 03 	call	0x770	; 0x770 <spi_master_CS>

    switch (buffer) {
     8a8:	c1 30       	cpi	r28, 0x01	; 1
     8aa:	41 f0       	breq	.+16     	; 0x8bc <mcp_request_to_send+0x1e>
     8ac:	18 f0       	brcs	.+6      	; 0x8b4 <mcp_request_to_send+0x16>
     8ae:	c2 30       	cpi	r28, 0x02	; 2
     8b0:	49 f0       	breq	.+18     	; 0x8c4 <mcp_request_to_send+0x26>
     8b2:	0c c0       	rjmp	.+24     	; 0x8cc <mcp_request_to_send+0x2e>
      case 0:
          spi_write(MCP_RTS_TX0);
     8b4:	81 e8       	ldi	r24, 0x81	; 129
     8b6:	0e 94 09 0a 	call	0x1412	; 0x1412 <spi_write>
          break;
     8ba:	0b c0       	rjmp	.+22     	; 0x8d2 <mcp_request_to_send+0x34>
      case 1:
          spi_write(MCP_RTS_TX1);
     8bc:	82 e8       	ldi	r24, 0x82	; 130
     8be:	0e 94 09 0a 	call	0x1412	; 0x1412 <spi_write>
          break;
     8c2:	07 c0       	rjmp	.+14     	; 0x8d2 <mcp_request_to_send+0x34>
      case 2:
          spi_write(MCP_RTS_TX2);
     8c4:	84 e8       	ldi	r24, 0x84	; 132
     8c6:	0e 94 09 0a 	call	0x1412	; 0x1412 <spi_write>
          break;
     8ca:	03 c0       	rjmp	.+6      	; 0x8d2 <mcp_request_to_send+0x34>
      default:
        spi_write(MCP_RTS_ALL);
     8cc:	87 e8       	ldi	r24, 0x87	; 135
     8ce:	0e 94 09 0a 	call	0x1412	; 0x1412 <spi_write>
    }

    spi_master_CS(1);
     8d2:	81 e0       	ldi	r24, 0x01	; 1
     8d4:	0e 94 b8 03 	call	0x770	; 0x770 <spi_master_CS>
}
     8d8:	cf 91       	pop	r28
     8da:	08 95       	ret

000008dc <oled_sel_row>:
    oled_line_down(page);

    for(uint8_t j = 0; j < 128; j++){
        write_data(0b00000000);   // sets bitmask of zero to a line/page
    }
}
     8dc:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <oled_position>
     8e0:	87 70       	andi	r24, 0x07	; 7
     8e2:	80 55       	subi	r24, 0x50	; 80
     8e4:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     8e8:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     8ec:	80 83       	st	Z, r24
     8ee:	08 95       	ret

000008f0 <oled_sel_col>:
     8f0:	80 93 91 04 	sts	0x0491, r24	; 0x800491 <oled_position+0x1>
     8f4:	98 2f       	mov	r25, r24
     8f6:	9f 70       	andi	r25, 0x0F	; 15
     8f8:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     8fc:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     900:	90 83       	st	Z, r25
     902:	82 95       	swap	r24
     904:	8f 70       	andi	r24, 0x0F	; 15
     906:	80 5f       	subi	r24, 0xF0	; 240
     908:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     90c:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     910:	80 83       	st	Z, r24
     912:	08 95       	ret

00000914 <oled_line_down>:
     914:	80 55       	subi	r24, 0x50	; 80
     916:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     91a:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     91e:	80 83       	st	Z, r24
     920:	08 95       	ret

00000922 <oled_pos_set>:
     922:	cf 93       	push	r28
     924:	c6 2f       	mov	r28, r22
     926:	0e 94 6e 04 	call	0x8dc	; 0x8dc <oled_sel_row>
     92a:	8c 2f       	mov	r24, r28
     92c:	0e 94 78 04 	call	0x8f0	; 0x8f0 <oled_sel_col>
     930:	cf 91       	pop	r28
     932:	08 95       	ret

00000934 <oled_home>:
     934:	60 e0       	ldi	r22, 0x00	; 0
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	0e 94 91 04 	call	0x922	; 0x922 <oled_pos_set>
     93c:	08 95       	ret

0000093e <oled_clear>:
     93e:	1f 93       	push	r17
     940:	cf 93       	push	r28
     942:	df 93       	push	r29
     944:	10 e0       	ldi	r17, 0x00	; 0
     946:	c6 ea       	ldi	r28, 0xA6	; 166
     948:	d0 e0       	ldi	r29, 0x00	; 0
     94a:	81 2f       	mov	r24, r17
     94c:	0e 94 8a 04 	call	0x914	; 0x914 <oled_line_down>
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	0d c0       	rjmp	.+26     	; 0x96e <oled_clear+0x30>
     954:	84 91       	lpm	r24, Z
     956:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <oled_write_data>
     95a:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <oled_write_data+0x1>
     95e:	8c 93       	st	X, r24
     960:	31 96       	adiw	r30, 0x01	; 1
     962:	ec 17       	cp	r30, r28
     964:	fd 07       	cpc	r31, r29
     966:	b1 f7       	brne	.-20     	; 0x954 <oled_clear+0x16>
     968:	9f 5f       	subi	r25, 0xFF	; 255
     96a:	90 38       	cpi	r25, 0x80	; 128
     96c:	19 f0       	breq	.+6      	; 0x974 <oled_clear+0x36>
     96e:	ee e9       	ldi	r30, 0x9E	; 158
     970:	f0 e0       	ldi	r31, 0x00	; 0
     972:	f0 cf       	rjmp	.-32     	; 0x954 <oled_clear+0x16>
     974:	1f 5f       	subi	r17, 0xFF	; 255
     976:	18 30       	cpi	r17, 0x08	; 8
     978:	41 f7       	brne	.-48     	; 0x94a <oled_clear+0xc>
     97a:	0e 94 9a 04 	call	0x934	; 0x934 <oled_home>
     97e:	df 91       	pop	r29
     980:	cf 91       	pop	r28
     982:	1f 91       	pop	r17
     984:	08 95       	ret

00000986 <OLED_init>:
     986:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     98a:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     98e:	8e ea       	ldi	r24, 0xAE	; 174
     990:	80 83       	st	Z, r24
     992:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     996:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     99a:	81 ea       	ldi	r24, 0xA1	; 161
     99c:	80 83       	st	Z, r24
     99e:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     9a2:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     9a6:	8a ed       	ldi	r24, 0xDA	; 218
     9a8:	80 83       	st	Z, r24
     9aa:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     9ae:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     9b2:	82 e1       	ldi	r24, 0x12	; 18
     9b4:	80 83       	st	Z, r24
     9b6:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     9ba:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     9be:	88 ec       	ldi	r24, 0xC8	; 200
     9c0:	80 83       	st	Z, r24
     9c2:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     9c6:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     9ca:	88 ea       	ldi	r24, 0xA8	; 168
     9cc:	80 83       	st	Z, r24
     9ce:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     9d2:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     9d6:	8f e3       	ldi	r24, 0x3F	; 63
     9d8:	80 83       	st	Z, r24
     9da:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     9de:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     9e2:	85 ed       	ldi	r24, 0xD5	; 213
     9e4:	80 83       	st	Z, r24
     9e6:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     9ea:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     9ee:	80 e8       	ldi	r24, 0x80	; 128
     9f0:	80 83       	st	Z, r24
     9f2:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     9f6:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     9fa:	81 e8       	ldi	r24, 0x81	; 129
     9fc:	80 83       	st	Z, r24
     9fe:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     a02:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     a06:	80 e5       	ldi	r24, 0x50	; 80
     a08:	80 83       	st	Z, r24
     a0a:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     a0e:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     a12:	89 ed       	ldi	r24, 0xD9	; 217
     a14:	80 83       	st	Z, r24
     a16:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     a1a:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     a1e:	81 e2       	ldi	r24, 0x21	; 33
     a20:	80 83       	st	Z, r24
     a22:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     a26:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     a2a:	80 e2       	ldi	r24, 0x20	; 32
     a2c:	80 83       	st	Z, r24
     a2e:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     a32:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     a36:	82 e0       	ldi	r24, 0x02	; 2
     a38:	80 83       	st	Z, r24
     a3a:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     a3e:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     a42:	8b ed       	ldi	r24, 0xDB	; 219
     a44:	80 83       	st	Z, r24
     a46:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     a4a:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     a4e:	80 e3       	ldi	r24, 0x30	; 48
     a50:	80 83       	st	Z, r24
     a52:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     a56:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     a5a:	8d ea       	ldi	r24, 0xAD	; 173
     a5c:	80 83       	st	Z, r24
     a5e:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     a62:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     a66:	10 82       	st	Z, r1
     a68:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     a6c:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     a70:	84 ea       	ldi	r24, 0xA4	; 164
     a72:	80 83       	st	Z, r24
     a74:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     a78:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     a7c:	86 ea       	ldi	r24, 0xA6	; 166
     a7e:	80 83       	st	Z, r24
     a80:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     a84:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     a88:	8f ea       	ldi	r24, 0xAF	; 175
     a8a:	80 83       	st	Z, r24
     a8c:	0e 94 9f 04 	call	0x93e	; 0x93e <oled_clear>
     a90:	0e 94 9a 04 	call	0x934	; 0x934 <oled_home>
     a94:	08 95       	ret

00000a96 <oled_write_character>:

void oled_write_character(uint8_t c){
     a96:	28 2f       	mov	r18, r24
     a98:	30 e0       	ldi	r19, 0x00	; 0
     a9a:	f9 01       	movw	r30, r18
     a9c:	ee 0f       	add	r30, r30
     a9e:	ff 1f       	adc	r31, r31
     aa0:	ee 0f       	add	r30, r30
     aa2:	ff 1f       	adc	r31, r31
     aa4:	ee 0f       	add	r30, r30
     aa6:	ff 1f       	adc	r31, r31
     aa8:	e2 56       	subi	r30, 0x62	; 98
     aaa:	f0 40       	sbci	r31, 0x00	; 0
     aac:	22 0f       	add	r18, r18
     aae:	33 1f       	adc	r19, r19
     ab0:	22 0f       	add	r18, r18
     ab2:	33 1f       	adc	r19, r19
     ab4:	22 0f       	add	r18, r18
     ab6:	33 1f       	adc	r19, r19
     ab8:	2a 55       	subi	r18, 0x5A	; 90
     aba:	30 40       	sbci	r19, 0x00	; 0
     for(uint8_t i = 0; i < 8; i++){
         write_data(pgm_read_byte( &font8[c-32][i] ) );
     abc:	94 91       	lpm	r25, Z
    oled_clear();
    oled_home();
}

void write_data(uint8_t data){
    oled_write_data[0] = data;      // @SRAM location
     abe:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <oled_write_data>
     ac2:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <oled_write_data+0x1>
     ac6:	9c 93       	st	X, r25
     ac8:	31 96       	adiw	r30, 0x01	; 1
        write_data(0b00000000);   // sets bitmask of zero to a line/page
    }
}

void oled_write_character(uint8_t c){
     for(uint8_t i = 0; i < 8; i++){
     aca:	e2 17       	cp	r30, r18
     acc:	f3 07       	cpc	r31, r19
     ace:	b1 f7       	brne	.-20     	; 0xabc <oled_write_character+0x26>
         write_data(pgm_read_byte( &font8[c-32][i] ) );
     }
}
     ad0:	08 95       	ret

00000ad2 <oled_print>:

void oled_print(char* string){
     ad2:	0f 93       	push	r16
     ad4:	1f 93       	push	r17
     ad6:	cf 93       	push	r28
     ad8:	df 93       	push	r29
    int length = strlen(&string[0]);
     ada:	fc 01       	movw	r30, r24
     adc:	01 90       	ld	r0, Z+
     ade:	00 20       	and	r0, r0
     ae0:	e9 f7       	brne	.-6      	; 0xadc <oled_print+0xa>
     ae2:	31 97       	sbiw	r30, 0x01	; 1
     ae4:	e8 1b       	sub	r30, r24
     ae6:	f9 0b       	sbc	r31, r25

    for(int i = 0; i < length; i++ ){
     ae8:	1e 16       	cp	r1, r30
     aea:	1f 06       	cpc	r1, r31
     aec:	54 f4       	brge	.+20     	; 0xb02 <oled_print+0x30>
     aee:	ec 01       	movw	r28, r24
     af0:	8c 01       	movw	r16, r24
     af2:	0e 0f       	add	r16, r30
     af4:	1f 1f       	adc	r17, r31

        oled_write_character(string[i]);
     af6:	89 91       	ld	r24, Y+
     af8:	0e 94 4b 05 	call	0xa96	; 0xa96 <oled_write_character>
}

void oled_print(char* string){
    int length = strlen(&string[0]);

    for(int i = 0; i < length; i++ ){
     afc:	c0 17       	cp	r28, r16
     afe:	d1 07       	cpc	r29, r17
     b00:	d1 f7       	brne	.-12     	; 0xaf6 <oled_print+0x24>

        oled_write_character(string[i]);
    }
}
     b02:	df 91       	pop	r29
     b04:	cf 91       	pop	r28
     b06:	1f 91       	pop	r17
     b08:	0f 91       	pop	r16
     b0a:	08 95       	ret

00000b0c <oled_print_arrow>:


void oled_print_arrow(uint8_t row, uint8_t col){
    oled_pos_set(row, col);
     b0c:	0e 94 91 04 	call	0x922	; 0x922 <oled_pos_set>
    oled_clear();
    oled_home();
}

void write_data(uint8_t data){
    oled_write_data[0] = data;      // @SRAM location
     b10:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <oled_write_data>
     b14:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <oled_write_data+0x1>
     b18:	88 e1       	ldi	r24, 0x18	; 24
     b1a:	80 83       	st	Z, r24
     b1c:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <oled_write_data>
     b20:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <oled_write_data+0x1>
     b24:	80 83       	st	Z, r24
     b26:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <oled_write_data>
     b2a:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <oled_write_data+0x1>
     b2e:	9e e7       	ldi	r25, 0x7E	; 126
     b30:	90 83       	st	Z, r25
     b32:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <oled_write_data>
     b36:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <oled_write_data+0x1>
     b3a:	9c e3       	ldi	r25, 0x3C	; 60
     b3c:	90 83       	st	Z, r25
     b3e:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <oled_write_data>
     b42:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <oled_write_data+0x1>
     b46:	80 83       	st	Z, r24
     b48:	08 95       	ret

00000b4a <play_game>:
    if(child == 0){
        child = current_node->elements_on_screen;
    }

    return child;
}
     b4a:	cf 93       	push	r28
     b4c:	df 93       	push	r29
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	2b 97       	sbiw	r28, 0x0b	; 11
     b54:	0f b6       	in	r0, 0x3f	; 63
     b56:	f8 94       	cli
     b58:	de bf       	out	0x3e, r29	; 62
     b5a:	0f be       	out	0x3f, r0	; 63
     b5c:	cd bf       	out	0x3d, r28	; 61
     b5e:	8c e7       	ldi	r24, 0x7C	; 124
     b60:	92 e0       	ldi	r25, 0x02	; 2
     b62:	9f 93       	push	r25
     b64:	8f 93       	push	r24
     b66:	0e 94 65 0d 	call	0x1aca	; 0x1aca <printf>
     b6a:	0e 94 76 03 	call	0x6ec	; 0x6ec <joyStick_Can_Message>
     b6e:	ce 01       	movw	r24, r28
     b70:	01 96       	adiw	r24, 0x01	; 1
     b72:	0e 94 32 03 	call	0x664	; 0x664 <message_handler>
     b76:	8d 81       	ldd	r24, Y+5	; 0x05
     b78:	80 93 92 04 	sts	0x0492, r24	; 0x800492 <highscore>
     b7c:	0f 90       	pop	r0
     b7e:	0f 90       	pop	r0
     b80:	2b 96       	adiw	r28, 0x0b	; 11
     b82:	0f b6       	in	r0, 0x3f	; 63
     b84:	f8 94       	cli
     b86:	de bf       	out	0x3e, r29	; 62
     b88:	0f be       	out	0x3f, r0	; 63
     b8a:	cd bf       	out	0x3d, r28	; 61
     b8c:	df 91       	pop	r29
     b8e:	cf 91       	pop	r28
     b90:	08 95       	ret

00000b92 <build_node>:
     b92:	cf 92       	push	r12
     b94:	df 92       	push	r13
     b96:	ef 92       	push	r14
     b98:	ff 92       	push	r15
     b9a:	0f 93       	push	r16
     b9c:	1f 93       	push	r17
     b9e:	cf 93       	push	r28
     ba0:	df 93       	push	r29
     ba2:	ec 01       	movw	r28, r24
     ba4:	69 01       	movw	r12, r18
     ba6:	79 83       	std	Y+1, r23	; 0x01
     ba8:	68 83       	st	Y, r22
     baa:	ba 01       	movw	r22, r20
     bac:	46 96       	adiw	r24, 0x16	; 22
     bae:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <strcpy>
     bb2:	dd 8a       	std	Y+21, r13	; 0x15
     bb4:	cc 8a       	std	Y+20, r12	; 0x14
     bb6:	fb 8a       	std	Y+19, r15	; 0x13
     bb8:	ea 8a       	std	Y+18, r14	; 0x12
     bba:	a0 2f       	mov	r26, r16
     bbc:	b1 2f       	mov	r27, r17
     bbe:	fe 01       	movw	r30, r28
     bc0:	32 96       	adiw	r30, 0x02	; 2
     bc2:	ce 01       	movw	r24, r28
     bc4:	42 96       	adiw	r24, 0x12	; 18
     bc6:	2d 91       	ld	r18, X+
     bc8:	3d 91       	ld	r19, X+
     bca:	21 93       	st	Z+, r18
     bcc:	31 93       	st	Z+, r19
     bce:	e8 17       	cp	r30, r24
     bd0:	f9 07       	cpc	r31, r25
     bd2:	c9 f7       	brne	.-14     	; 0xbc6 <build_node+0x34>
     bd4:	df 91       	pop	r29
     bd6:	cf 91       	pop	r28
     bd8:	1f 91       	pop	r17
     bda:	0f 91       	pop	r16
     bdc:	ff 90       	pop	r15
     bde:	ef 90       	pop	r14
     be0:	df 90       	pop	r13
     be2:	cf 90       	pop	r12
     be4:	08 95       	ret

00000be6 <go_up>:
     be6:	dc 01       	movw	r26, r24
     be8:	ed 91       	ld	r30, X+
     bea:	fc 91       	ld	r31, X
     bec:	20 81       	ld	r18, Z
     bee:	31 81       	ldd	r19, Z+1	; 0x01
     bf0:	21 15       	cp	r18, r1
     bf2:	31 05       	cpc	r19, r1
     bf4:	59 f0       	breq	.+22     	; 0xc0c <go_up+0x26>
     bf6:	fc 01       	movw	r30, r24
     bf8:	31 83       	std	Z+1, r19	; 0x01
     bfa:	20 83       	st	Z, r18
     bfc:	80 e9       	ldi	r24, 0x90	; 144
     bfe:	92 e0       	ldi	r25, 0x02	; 2
     c00:	9f 93       	push	r25
     c02:	8f 93       	push	r24
     c04:	0e 94 65 0d 	call	0x1aca	; 0x1aca <printf>
     c08:	0f 90       	pop	r0
     c0a:	0f 90       	pop	r0
     c0c:	08 95       	ret

00000c0e <go_down>:
     c0e:	fc 01       	movw	r30, r24
     c10:	a0 81       	ld	r26, Z
     c12:	b1 81       	ldd	r27, Z+1	; 0x01
     c14:	fb 01       	movw	r30, r22
     c16:	ee 0f       	add	r30, r30
     c18:	ff 1f       	adc	r31, r31
     c1a:	ea 0f       	add	r30, r26
     c1c:	fb 1f       	adc	r31, r27
     c1e:	20 81       	ld	r18, Z
     c20:	31 81       	ldd	r19, Z+1	; 0x01
     c22:	21 15       	cp	r18, r1
     c24:	31 05       	cpc	r19, r1
     c26:	41 f0       	breq	.+16     	; 0xc38 <go_down+0x2a>
     c28:	fc 01       	movw	r30, r24
     c2a:	31 83       	std	Z+1, r19	; 0x01
     c2c:	20 83       	st	Z, r18
     c2e:	85 e9       	ldi	r24, 0x95	; 149
     c30:	92 e0       	ldi	r25, 0x02	; 2
     c32:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <puts>
     c36:	08 95       	ret
     c38:	54 96       	adiw	r26, 0x14	; 20
     c3a:	ed 91       	ld	r30, X+
     c3c:	fc 91       	ld	r31, X
     c3e:	55 97       	sbiw	r26, 0x15	; 21
     c40:	30 97       	sbiw	r30, 0x00	; 0
     c42:	31 f0       	breq	.+12     	; 0xc50 <go_down+0x42>
     c44:	09 95       	icall
     c46:	81 ea       	ldi	r24, 0xA1	; 161
     c48:	92 e0       	ldi	r25, 0x02	; 2
     c4a:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <puts>
     c4e:	08 95       	ret
     c50:	87 eb       	ldi	r24, 0xB7	; 183
     c52:	92 e0       	ldi	r25, 0x02	; 2
     c54:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <puts>
     c58:	08 95       	ret

00000c5a <wait_for_action>:
     c5a:	cf 93       	push	r28
     c5c:	83 ec       	ldi	r24, 0xC3	; 195
     c5e:	92 e0       	ldi	r25, 0x02	; 2
     c60:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <puts>
     c64:	0e 94 e6 08 	call	0x11cc	; 0x11cc <joystick_direction>
     c68:	84 30       	cpi	r24, 0x04	; 4
     c6a:	29 f4       	brne	.+10     	; 0xc76 <wait_for_action+0x1c>
     c6c:	82 e0       	ldi	r24, 0x02	; 2
     c6e:	0e 94 ac 09 	call	0x1358	; 0x1358 <usb_button_pushed>
     c72:	88 23       	and	r24, r24
     c74:	b9 f3       	breq	.-18     	; 0xc64 <wait_for_action+0xa>
     c76:	0e 94 e6 08 	call	0x11cc	; 0x11cc <joystick_direction>
     c7a:	c8 2f       	mov	r28, r24
     c7c:	82 30       	cpi	r24, 0x02	; 2
     c7e:	29 f4       	brne	.+10     	; 0xc8a <wait_for_action+0x30>
     c80:	89 ed       	ldi	r24, 0xD9	; 217
     c82:	92 e0       	ldi	r25, 0x02	; 2
     c84:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <puts>
     c88:	16 c0       	rjmp	.+44     	; 0xcb6 <wait_for_action+0x5c>
     c8a:	0e 94 e6 08 	call	0x11cc	; 0x11cc <joystick_direction>
     c8e:	c8 2f       	mov	r28, r24
     c90:	83 30       	cpi	r24, 0x03	; 3
     c92:	89 f0       	breq	.+34     	; 0xcb6 <wait_for_action+0x5c>
     c94:	0e 94 e6 08 	call	0x11cc	; 0x11cc <joystick_direction>
     c98:	c8 2f       	mov	r28, r24
     c9a:	81 30       	cpi	r24, 0x01	; 1
     c9c:	61 f0       	breq	.+24     	; 0xcb6 <wait_for_action+0x5c>
     c9e:	0e 94 e6 08 	call	0x11cc	; 0x11cc <joystick_direction>
     ca2:	c8 2f       	mov	r28, r24
     ca4:	88 23       	and	r24, r24
     ca6:	39 f0       	breq	.+14     	; 0xcb6 <wait_for_action+0x5c>
     ca8:	82 e0       	ldi	r24, 0x02	; 2
     caa:	0e 94 ac 09 	call	0x1358	; 0x1358 <usb_button_pushed>
     cae:	81 11       	cpse	r24, r1
     cb0:	01 c0       	rjmp	.+2      	; 0xcb4 <wait_for_action+0x5a>
     cb2:	02 c0       	rjmp	.+4      	; 0xcb8 <wait_for_action+0x5e>
     cb4:	c5 e0       	ldi	r28, 0x05	; 5
     cb6:	8c 2f       	mov	r24, r28
     cb8:	cf 91       	pop	r28
     cba:	08 95       	ret

00000cbc <wait_for_neutral_joystick_position>:
     cbc:	0e 94 e6 08 	call	0x11cc	; 0x11cc <joystick_direction>
     cc0:	84 30       	cpi	r24, 0x04	; 4
     cc2:	e1 f7       	brne	.-8      	; 0xcbc <wait_for_neutral_joystick_position>
     cc4:	08 95       	ret

00000cc6 <update_element_down>:

int update_element_down(Node *current_node, int child){

    child++;
     cc6:	6f 5f       	subi	r22, 0xFF	; 255
     cc8:	7f 4f       	sbci	r23, 0xFF	; 255

    if(child == current_node->elements_on_screen + 1){
     cca:	fc 01       	movw	r30, r24
     ccc:	82 89       	ldd	r24, Z+18	; 0x12
     cce:	93 89       	ldd	r25, Z+19	; 0x13
     cd0:	01 96       	adiw	r24, 0x01	; 1
     cd2:	68 17       	cp	r22, r24
     cd4:	79 07       	cpc	r23, r25
     cd6:	11 f4       	brne	.+4      	; 0xcdc <update_element_down+0x16>
        child = 1;
     cd8:	61 e0       	ldi	r22, 0x01	; 1
     cda:	70 e0       	ldi	r23, 0x00	; 0
    }

    return child;
    
}
     cdc:	cb 01       	movw	r24, r22
     cde:	08 95       	ret

00000ce0 <print_selecting_arrow>:

}


void print_selecting_arrow(int child){
    oled_print_arrow(child - 1, 5);
     ce0:	65 e0       	ldi	r22, 0x05	; 5
     ce2:	81 50       	subi	r24, 0x01	; 1
     ce4:	0e 94 86 05 	call	0xb0c	; 0xb0c <oled_print_arrow>
     ce8:	08 95       	ret

00000cea <print_main_menu_objects>:
        wait_for_neutral_joystick_position();
    }
}


void print_main_menu_objects(int child){
     cea:	0f 93       	push	r16
     cec:	1f 93       	push	r17
     cee:	cf 93       	push	r28
     cf0:	df 93       	push	r29
     cf2:	cd b7       	in	r28, 0x3d	; 61
     cf4:	de b7       	in	r29, 0x3e	; 62
     cf6:	2b 97       	sbiw	r28, 0x0b	; 11
     cf8:	0f b6       	in	r0, 0x3f	; 63
     cfa:	f8 94       	cli
     cfc:	de bf       	out	0x3e, r29	; 62
     cfe:	0f be       	out	0x3f, r0	; 63
     d00:	cd bf       	out	0x3d, r28	; 61
     d02:	8c 01       	movw	r16, r24
    char line1[] = "play";
     d04:	85 e0       	ldi	r24, 0x05	; 5
     d06:	e2 ee       	ldi	r30, 0xE2	; 226
     d08:	f2 e0       	ldi	r31, 0x02	; 2
     d0a:	de 01       	movw	r26, r28
     d0c:	11 96       	adiw	r26, 0x01	; 1
     d0e:	01 90       	ld	r0, Z+
     d10:	0d 92       	st	X+, r0
     d12:	8a 95       	dec	r24
     d14:	e1 f7       	brne	.-8      	; 0xd0e <print_main_menu_objects+0x24>
    char line2[] = "Score";
     d16:	86 e0       	ldi	r24, 0x06	; 6
     d18:	e7 ee       	ldi	r30, 0xE7	; 231
     d1a:	f2 e0       	ldi	r31, 0x02	; 2
     d1c:	de 01       	movw	r26, r28
     d1e:	16 96       	adiw	r26, 0x06	; 6
     d20:	01 90       	ld	r0, Z+
     d22:	0d 92       	st	X+, r0
     d24:	8a 95       	dec	r24
     d26:	e1 f7       	brne	.-8      	; 0xd20 <print_main_menu_objects+0x36>

    oled_pos_set(0, 12);
     d28:	6c e0       	ldi	r22, 0x0C	; 12
     d2a:	80 e0       	ldi	r24, 0x00	; 0
     d2c:	0e 94 91 04 	call	0x922	; 0x922 <oled_pos_set>
    oled_print(&line1);
     d30:	ce 01       	movw	r24, r28
     d32:	01 96       	adiw	r24, 0x01	; 1
     d34:	0e 94 69 05 	call	0xad2	; 0xad2 <oled_print>

    oled_pos_set(1, 12);
     d38:	6c e0       	ldi	r22, 0x0C	; 12
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	0e 94 91 04 	call	0x922	; 0x922 <oled_pos_set>
    oled_print(&line2);
     d40:	ce 01       	movw	r24, r28
     d42:	06 96       	adiw	r24, 0x06	; 6
     d44:	0e 94 69 05 	call	0xad2	; 0xad2 <oled_print>

    print_selecting_arrow(child);       //Draw the arrow that selects the preferable option.
     d48:	c8 01       	movw	r24, r16
     d4a:	0e 94 70 06 	call	0xce0	; 0xce0 <print_selecting_arrow>
    
}
     d4e:	2b 96       	adiw	r28, 0x0b	; 11
     d50:	0f b6       	in	r0, 0x3f	; 63
     d52:	f8 94       	cli
     d54:	de bf       	out	0x3e, r29	; 62
     d56:	0f be       	out	0x3f, r0	; 63
     d58:	cd bf       	out	0x3d, r28	; 61
     d5a:	df 91       	pop	r29
     d5c:	cf 91       	pop	r28
     d5e:	1f 91       	pop	r17
     d60:	0f 91       	pop	r16
     d62:	08 95       	ret

00000d64 <print_new_game_menu_objects>:

void print_new_game_menu_objects(int child){
     d64:	0f 93       	push	r16
     d66:	1f 93       	push	r17
     d68:	cf 93       	push	r28
     d6a:	df 93       	push	r29
     d6c:	cd b7       	in	r28, 0x3d	; 61
     d6e:	de b7       	in	r29, 0x3e	; 62
     d70:	2b 97       	sbiw	r28, 0x0b	; 11
     d72:	0f b6       	in	r0, 0x3f	; 63
     d74:	f8 94       	cli
     d76:	de bf       	out	0x3e, r29	; 62
     d78:	0f be       	out	0x3f, r0	; 63
     d7a:	cd bf       	out	0x3d, r28	; 61
     d7c:	8c 01       	movw	r16, r24

    char line1[] = "Start game";
     d7e:	8b e0       	ldi	r24, 0x0B	; 11
     d80:	ed ee       	ldi	r30, 0xED	; 237
     d82:	f2 e0       	ldi	r31, 0x02	; 2
     d84:	de 01       	movw	r26, r28
     d86:	11 96       	adiw	r26, 0x01	; 1
     d88:	01 90       	ld	r0, Z+
     d8a:	0d 92       	st	X+, r0
     d8c:	8a 95       	dec	r24
     d8e:	e1 f7       	brne	.-8      	; 0xd88 <print_new_game_menu_objects+0x24>

    oled_pos_set(0, 12);
     d90:	6c e0       	ldi	r22, 0x0C	; 12
     d92:	80 e0       	ldi	r24, 0x00	; 0
     d94:	0e 94 91 04 	call	0x922	; 0x922 <oled_pos_set>
    oled_print(&line1);
     d98:	ce 01       	movw	r24, r28
     d9a:	01 96       	adiw	r24, 0x01	; 1
     d9c:	0e 94 69 05 	call	0xad2	; 0xad2 <oled_print>

    print_selecting_arrow(child);
     da0:	c8 01       	movw	r24, r16
     da2:	0e 94 70 06 	call	0xce0	; 0xce0 <print_selecting_arrow>
}
     da6:	2b 96       	adiw	r28, 0x0b	; 11
     da8:	0f b6       	in	r0, 0x3f	; 63
     daa:	f8 94       	cli
     dac:	de bf       	out	0x3e, r29	; 62
     dae:	0f be       	out	0x3f, r0	; 63
     db0:	cd bf       	out	0x3d, r28	; 61
     db2:	df 91       	pop	r29
     db4:	cf 91       	pop	r28
     db6:	1f 91       	pop	r17
     db8:	0f 91       	pop	r16
     dba:	08 95       	ret

00000dbc <print_score_menu_objects>:

void print_score_menu_objects(int child){
     dbc:	0f 93       	push	r16
     dbe:	1f 93       	push	r17
     dc0:	cf 93       	push	r28
     dc2:	df 93       	push	r29
     dc4:	cd b7       	in	r28, 0x3d	; 61
     dc6:	de b7       	in	r29, 0x3e	; 62
     dc8:	2a 97       	sbiw	r28, 0x0a	; 10
     dca:	0f b6       	in	r0, 0x3f	; 63
     dcc:	f8 94       	cli
     dce:	de bf       	out	0x3e, r29	; 62
     dd0:	0f be       	out	0x3f, r0	; 63
     dd2:	cd bf       	out	0x3d, r28	; 61
     dd4:	8c 01       	movw	r16, r24

    char line1[] = "Top score";
     dd6:	8a e0       	ldi	r24, 0x0A	; 10
     dd8:	e8 ef       	ldi	r30, 0xF8	; 248
     dda:	f2 e0       	ldi	r31, 0x02	; 2
     ddc:	de 01       	movw	r26, r28
     dde:	11 96       	adiw	r26, 0x01	; 1
     de0:	01 90       	ld	r0, Z+
     de2:	0d 92       	st	X+, r0
     de4:	8a 95       	dec	r24
     de6:	e1 f7       	brne	.-8      	; 0xde0 <print_score_menu_objects+0x24>

    oled_pos_set(0, 12);
     de8:	6c e0       	ldi	r22, 0x0C	; 12
     dea:	80 e0       	ldi	r24, 0x00	; 0
     dec:	0e 94 91 04 	call	0x922	; 0x922 <oled_pos_set>
    oled_print(&line1);
     df0:	ce 01       	movw	r24, r28
     df2:	01 96       	adiw	r24, 0x01	; 1
     df4:	0e 94 69 05 	call	0xad2	; 0xad2 <oled_print>

    print_selecting_arrow(child);
     df8:	c8 01       	movw	r24, r16
     dfa:	0e 94 70 06 	call	0xce0	; 0xce0 <print_selecting_arrow>

}
     dfe:	2a 96       	adiw	r28, 0x0a	; 10
     e00:	0f b6       	in	r0, 0x3f	; 63
     e02:	f8 94       	cli
     e04:	de bf       	out	0x3e, r29	; 62
     e06:	0f be       	out	0x3f, r0	; 63
     e08:	cd bf       	out	0x3d, r28	; 61
     e0a:	df 91       	pop	r29
     e0c:	cf 91       	pop	r28
     e0e:	1f 91       	pop	r17
     e10:	0f 91       	pop	r16
     e12:	08 95       	ret

00000e14 <update_screen>:
}
void wait_for_neutral_joystick_position(){
    while(joystick_direction() != NEUTRAL);
}

void update_screen(Node *current_node, int child){
     e14:	cf 93       	push	r28
     e16:	df 93       	push	r29
     e18:	eb 01       	movw	r28, r22

    if(((*current_node).name[1]) == 'a'){
     e1a:	fc 01       	movw	r30, r24
     e1c:	87 89       	ldd	r24, Z+23	; 0x17
     e1e:	81 36       	cpi	r24, 0x61	; 97
     e20:	41 f4       	brne	.+16     	; 0xe32 <update_screen+0x1e>
        printf("Update  MAIN_MENU screen\t\n");
     e22:	82 e0       	ldi	r24, 0x02	; 2
     e24:	93 e0       	ldi	r25, 0x03	; 3
     e26:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <puts>
        print_main_menu_objects(child);
     e2a:	ce 01       	movw	r24, r28
     e2c:	0e 94 75 06 	call	0xcea	; 0xcea <print_main_menu_objects>
     e30:	0f c0       	rjmp	.+30     	; 0xe50 <update_screen+0x3c>
        //Skal oppdatere skjermen som passer til main-menu. I tillegg skal pilen howre over riktg barn.
    }
    else if(((*current_node).name[1]) == 'l'){
     e32:	8c 36       	cpi	r24, 0x6C	; 108
     e34:	41 f4       	brne	.+16     	; 0xe46 <update_screen+0x32>
        printf("Update PLAY menu\t\n");
     e36:	8c e1       	ldi	r24, 0x1C	; 28
     e38:	93 e0       	ldi	r25, 0x03	; 3
     e3a:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <puts>
        print_new_game_menu_objects(child);
     e3e:	ce 01       	movw	r24, r28
     e40:	0e 94 b2 06 	call	0xd64	; 0xd64 <print_new_game_menu_objects>
     e44:	05 c0       	rjmp	.+10     	; 0xe50 <update_screen+0x3c>
    }
    else if(((*current_node).name[1]) == 'h'){
     e46:	88 36       	cpi	r24, 0x68	; 104
     e48:	19 f4       	brne	.+6      	; 0xe50 <update_screen+0x3c>
        print_score_menu_objects(child);
     e4a:	cb 01       	movw	r24, r22
     e4c:	0e 94 de 06 	call	0xdbc	; 0xdbc <print_score_menu_objects>
    }

}
     e50:	df 91       	pop	r29
     e52:	cf 91       	pop	r28
     e54:	08 95       	ret

00000e56 <menu>:
    return child;
    
}
//Node Main_menu, Score, Play, Settings, Difficulty, Debugging, *current_node;

void menu(){
     e56:	cf 93       	push	r28
     e58:	df 93       	push	r29
     e5a:	cd b7       	in	r28, 0x3d	; 61
     e5c:	de b7       	in	r29, 0x3e	; 62
     e5e:	e0 97       	sbiw	r28, 0x30	; 48
     e60:	0f b6       	in	r0, 0x3f	; 63
     e62:	f8 94       	cli
     e64:	de bf       	out	0x3e, r29	; 62
     e66:	0f be       	out	0x3f, r0	; 63
     e68:	cd bf       	out	0x3d, r28	; 61

    static Node Main_menu, Score, Play, Settings, Difficulty, Debugging, *current_node;

    current_node = &Main_menu; //Startnoden
     e6a:	8c e5       	ldi	r24, 0x5C	; 92
     e6c:	94 e0       	ldi	r25, 0x04	; 4
     e6e:	90 93 87 04 	sts	0x0487, r25	; 0x800487 <current_node.2440+0x1>
     e72:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <current_node.2440>
    DIRECTION action; //Handling som er gjort på Joysticken
    int child = 1; //Barnet som man "howrer" over på skjermen. Default er øverste barnet.

    //Bygger nodestrukturen
    Node* children1[8] = {&Play, &Score,0 ,0 ,0 ,0 ,0 ,0};
     e76:	80 e1       	ldi	r24, 0x10	; 16
     e78:	ea e0       	ldi	r30, 0x0A	; 10
     e7a:	f1 e0       	ldi	r31, 0x01	; 1
     e7c:	de 01       	movw	r26, r28
     e7e:	11 96       	adiw	r26, 0x01	; 1
     e80:	01 90       	ld	r0, Z+
     e82:	0d 92       	st	X+, r0
     e84:	8a 95       	dec	r24
     e86:	e1 f7       	brne	.-8      	; 0xe80 <menu+0x2a>
    Node* children2[8] = {0, 0, 0, 0, 0, 0, 0, 0};
     e88:	80 e1       	ldi	r24, 0x10	; 16
     e8a:	5e 01       	movw	r10, r28
     e8c:	91 e1       	ldi	r25, 0x11	; 17
     e8e:	a9 0e       	add	r10, r25
     e90:	b1 1c       	adc	r11, r1
     e92:	f5 01       	movw	r30, r10
     e94:	98 2f       	mov	r25, r24
     e96:	11 92       	st	Z+, r1
     e98:	9a 95       	dec	r25
     e9a:	e9 f7       	brne	.-6      	; 0xe96 <menu+0x40>
    Node* children3[8] = {0, 0, 0, 0, 0, 0, 0, 0};
     e9c:	6e 01       	movw	r12, r28
     e9e:	e1 e2       	ldi	r30, 0x21	; 33
     ea0:	ce 0e       	add	r12, r30
     ea2:	d1 1c       	adc	r13, r1
     ea4:	f6 01       	movw	r30, r12
     ea6:	11 92       	st	Z+, r1
     ea8:	8a 95       	dec	r24
     eaa:	e9 f7       	brne	.-6      	; 0xea6 <menu+0x50>



    build_node(&Main_menu, NULL, "Main menu", NULL, &children1,2);
     eac:	68 94       	set
     eae:	ee 24       	eor	r14, r14
     eb0:	e1 f8       	bld	r14, 1
     eb2:	f1 2c       	mov	r15, r1
     eb4:	8e 01       	movw	r16, r28
     eb6:	0f 5f       	subi	r16, 0xFF	; 255
     eb8:	1f 4f       	sbci	r17, 0xFF	; 255
     eba:	20 e0       	ldi	r18, 0x00	; 0
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	4e e2       	ldi	r20, 0x2E	; 46
     ec0:	53 e0       	ldi	r21, 0x03	; 3
     ec2:	60 e0       	ldi	r22, 0x00	; 0
     ec4:	70 e0       	ldi	r23, 0x00	; 0
     ec6:	8c e5       	ldi	r24, 0x5C	; 92
     ec8:	94 e0       	ldi	r25, 0x04	; 4
     eca:	0e 94 c9 05 	call	0xb92	; 0xb92 <build_node>
    build_node(&Play, &Main_menu, "Play game", play_game, &children2,1);
     ece:	ee 24       	eor	r14, r14
     ed0:	e3 94       	inc	r14
     ed2:	f1 2c       	mov	r15, r1
     ed4:	85 01       	movw	r16, r10
     ed6:	25 ea       	ldi	r18, 0xA5	; 165
     ed8:	35 e0       	ldi	r19, 0x05	; 5
     eda:	48 e3       	ldi	r20, 0x38	; 56
     edc:	53 e0       	ldi	r21, 0x03	; 3
     ede:	6c e5       	ldi	r22, 0x5C	; 92
     ee0:	74 e0       	ldi	r23, 0x04	; 4
     ee2:	82 e3       	ldi	r24, 0x32	; 50
     ee4:	94 e0       	ldi	r25, 0x04	; 4
     ee6:	0e 94 c9 05 	call	0xb92	; 0xb92 <build_node>
    build_node(&Score, &Main_menu, "Show score", NULL, &children3,8);
     eea:	68 94       	set
     eec:	ee 24       	eor	r14, r14
     eee:	e3 f8       	bld	r14, 3
     ef0:	f1 2c       	mov	r15, r1
     ef2:	86 01       	movw	r16, r12
     ef4:	20 e0       	ldi	r18, 0x00	; 0
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	42 e4       	ldi	r20, 0x42	; 66
     efa:	53 e0       	ldi	r21, 0x03	; 3
     efc:	6c e5       	ldi	r22, 0x5C	; 92
     efe:	74 e0       	ldi	r23, 0x04	; 4
     f00:	88 e0       	ldi	r24, 0x08	; 8
     f02:	94 e0       	ldi	r25, 0x04	; 4
     f04:	0e 94 c9 05 	call	0xb92	; 0xb92 <build_node>

    update_screen(current_node, child);
     f08:	61 e0       	ldi	r22, 0x01	; 1
     f0a:	70 e0       	ldi	r23, 0x00	; 0
     f0c:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <current_node.2440>
     f10:	90 91 87 04 	lds	r25, 0x0487	; 0x800487 <current_node.2440+0x1>
     f14:	0e 94 0a 07 	call	0xe14	; 0xe14 <update_screen>

    static Node Main_menu, Score, Play, Settings, Difficulty, Debugging, *current_node;

    current_node = &Main_menu; //Startnoden
    DIRECTION action; //Handling som er gjort på Joysticken
    int child = 1; //Barnet som man "howrer" over på skjermen. Default er øverste barnet.
     f18:	ee 24       	eor	r14, r14
     f1a:	e3 94       	inc	r14
     f1c:	f1 2c       	mov	r15, r1
          default:
              break;
        }

        printf("After switch\t\n");
        printf("Nodenavn %c \t\n",((*current_node).name[0]));
     f1e:	0f 2e       	mov	r0, r31
     f20:	fc e9       	ldi	r31, 0x9C	; 156
     f22:	cf 2e       	mov	r12, r31
     f24:	f3 e0       	ldi	r31, 0x03	; 3
     f26:	df 2e       	mov	r13, r31
     f28:	f0 2d       	mov	r31, r0
    build_node(&Score, &Main_menu, "Show score", NULL, &children3,8);

    update_screen(current_node, child);

    while(1){
        printf("Før Wait for action\t\n");
     f2a:	8d e4       	ldi	r24, 0x4D	; 77
     f2c:	93 e0       	ldi	r25, 0x03	; 3
     f2e:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <puts>
        action = wait_for_action();  //Wait for user to move the joystick
     f32:	0e 94 2d 06 	call	0xc5a	; 0xc5a <wait_for_action>
     f36:	18 2f       	mov	r17, r24
        printf("Før oled clear\t\n");
     f38:	83 e6       	ldi	r24, 0x63	; 99
     f3a:	93 e0       	ldi	r25, 0x03	; 3
     f3c:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <puts>
        oled_clear();  //Clears the screen.
     f40:	0e 94 9f 04 	call	0x93e	; 0x93e <oled_clear>

        printf("Før switch\t\n");
     f44:	84 e7       	ldi	r24, 0x74	; 116
     f46:	93 e0       	ldi	r25, 0x03	; 3
     f48:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <puts>
        switch(action)
     f4c:	11 30       	cpi	r17, 0x01	; 1
     f4e:	31 f1       	breq	.+76     	; 0xf9c <menu+0x146>
     f50:	c8 f0       	brcs	.+50     	; 0xf84 <menu+0x12e>
     f52:	12 30       	cpi	r17, 0x02	; 2
     f54:	19 f0       	breq	.+6      	; 0xf5c <menu+0x106>
     f56:	13 30       	cpi	r17, 0x03	; 3
     f58:	61 f0       	breq	.+24     	; 0xf72 <menu+0x11c>
     f5a:	2c c0       	rjmp	.+88     	; 0xfb4 <menu+0x15e>

}

int update_element_up(Node *current_node, int child){

    child--;
     f5c:	f1 e0       	ldi	r31, 0x01	; 1
     f5e:	ef 1a       	sub	r14, r31
     f60:	f1 08       	sbc	r15, r1

    if(child == 0){
     f62:	41 f5       	brne	.+80     	; 0xfb4 <menu+0x15e>
        child = current_node->elements_on_screen;
     f64:	e0 91 86 04 	lds	r30, 0x0486	; 0x800486 <current_node.2440>
     f68:	f0 91 87 04 	lds	r31, 0x0487	; 0x800487 <current_node.2440+0x1>
     f6c:	e2 88       	ldd	r14, Z+18	; 0x12
     f6e:	f3 88       	ldd	r15, Z+19	; 0x13
     f70:	21 c0       	rjmp	.+66     	; 0xfb4 <menu+0x15e>
          case UP:
                //update_screen(current_node, child);
                child = update_element_up(current_node, child);
              break;
          case DOWN:
                child = update_element_down(current_node, child);
     f72:	b7 01       	movw	r22, r14
     f74:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <current_node.2440>
     f78:	90 91 87 04 	lds	r25, 0x0487	; 0x800487 <current_node.2440+0x1>
     f7c:	0e 94 63 06 	call	0xcc6	; 0xcc6 <update_element_down>
     f80:	7c 01       	movw	r14, r24
              break;
     f82:	18 c0       	rjmp	.+48     	; 0xfb4 <menu+0x15e>
          case LEFT:
                printf("Left\t\n");
     f84:	81 e8       	ldi	r24, 0x81	; 129
     f86:	93 e0       	ldi	r25, 0x03	; 3
     f88:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <puts>
                go_up(&current_node);
     f8c:	86 e8       	ldi	r24, 0x86	; 134
     f8e:	94 e0       	ldi	r25, 0x04	; 4
     f90:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <go_up>
                child = 1;
     f94:	ee 24       	eor	r14, r14
     f96:	e3 94       	inc	r14
     f98:	f1 2c       	mov	r15, r1
              break;
     f9a:	0c c0       	rjmp	.+24     	; 0xfb4 <menu+0x15e>
          case RIGHT:
                printf("RIGHT\t\n");
     f9c:	87 e8       	ldi	r24, 0x87	; 135
     f9e:	93 e0       	ldi	r25, 0x03	; 3
     fa0:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <puts>
                go_down(&current_node, child);
     fa4:	b7 01       	movw	r22, r14
     fa6:	86 e8       	ldi	r24, 0x86	; 134
     fa8:	94 e0       	ldi	r25, 0x04	; 4
     faa:	0e 94 07 06 	call	0xc0e	; 0xc0e <go_down>
                child = 1;
     fae:	ee 24       	eor	r14, r14
     fb0:	e3 94       	inc	r14
     fb2:	f1 2c       	mov	r15, r1
              break;
          default:
              break;
        }

        printf("After switch\t\n");
     fb4:	8e e8       	ldi	r24, 0x8E	; 142
     fb6:	93 e0       	ldi	r25, 0x03	; 3
     fb8:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <puts>
        printf("Nodenavn %c \t\n",((*current_node).name[0]));
     fbc:	e0 91 86 04 	lds	r30, 0x0486	; 0x800486 <current_node.2440>
     fc0:	f0 91 87 04 	lds	r31, 0x0487	; 0x800487 <current_node.2440+0x1>
     fc4:	86 89       	ldd	r24, Z+22	; 0x16
     fc6:	1f 92       	push	r1
     fc8:	8f 93       	push	r24
     fca:	df 92       	push	r13
     fcc:	cf 92       	push	r12
     fce:	0e 94 65 0d 	call	0x1aca	; 0x1aca <printf>
        update_screen(current_node, child);
     fd2:	b7 01       	movw	r22, r14
     fd4:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <current_node.2440>
     fd8:	90 91 87 04 	lds	r25, 0x0487	; 0x800487 <current_node.2440+0x1>
     fdc:	0e 94 0a 07 	call	0xe14	; 0xe14 <update_screen>
        wait_for_neutral_joystick_position();
     fe0:	0e 94 5e 06 	call	0xcbc	; 0xcbc <wait_for_neutral_joystick_position>
    }
     fe4:	0f 90       	pop	r0
     fe6:	0f 90       	pop	r0
     fe8:	0f 90       	pop	r0
     fea:	0f 90       	pop	r0
     fec:	9e cf       	rjmp	.-196    	; 0xf2a <menu+0xd4>

00000fee <pos_read>:
#include <avr/io.h>
#include <stdio.h>
#include "pos_read.h"


void pos_read(position* pos){
     fee:	8f 92       	push	r8
     ff0:	9f 92       	push	r9
     ff2:	af 92       	push	r10
     ff4:	bf 92       	push	r11
     ff6:	cf 92       	push	r12
     ff8:	df 92       	push	r13
     ffa:	ef 92       	push	r14
     ffc:	ff 92       	push	r15
     ffe:	0f 93       	push	r16
    1000:	1f 93       	push	r17
    1002:	cf 93       	push	r28
    1004:	df 93       	push	r29
    1006:	7c 01       	movw	r14, r24

    int ADC_Y = ADC_read(0);
    1008:	80 e0       	ldi	r24, 0x00	; 0
    100a:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ADC_read>
    100e:	c8 2f       	mov	r28, r24
    1010:	d0 e0       	ldi	r29, 0x00	; 0
    int ADC_X = ADC_read(1);
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ADC_read>
    1018:	68 2f       	mov	r22, r24
    101a:	70 e0       	ldi	r23, 0x00	; 0

    // X read

    if((ADC_X >= (P_cal.center_X - 10)) && (ADC_X <= (P_cal.center_X + 10))){ //Deadspace for joystick
    101c:	00 91 88 04 	lds	r16, 0x0488	; 0x800488 <P_cal>
    1020:	10 91 89 04 	lds	r17, 0x0489	; 0x800489 <P_cal+0x1>
    1024:	c8 01       	movw	r24, r16
    1026:	0a 97       	sbiw	r24, 0x0a	; 10
    1028:	68 17       	cp	r22, r24
    102a:	79 07       	cpc	r23, r25
    102c:	0c f4       	brge	.+2      	; 0x1030 <pos_read+0x42>
    102e:	b4 c0       	rjmp	.+360    	; 0x1198 <pos_read+0x1aa>
    1030:	44 96       	adiw	r24, 0x14	; 20
    1032:	86 17       	cp	r24, r22
    1034:	97 07       	cpc	r25, r23
    1036:	0c f0       	brlt	.+2      	; 0x103a <pos_read+0x4c>
    1038:	4c c0       	rjmp	.+152    	; 0x10d2 <pos_read+0xe4>
        ADC_X = 0;
    }
    else if(ADC_X > (P_cal.center_X + 10)){
        ADC_X = (ADC_X - P_cal.center_X) * 100.0 / (255.0 - P_cal.center_X);  //
    103a:	60 1b       	sub	r22, r16
    103c:	71 0b       	sbc	r23, r17
    103e:	07 2e       	mov	r0, r23
    1040:	00 0c       	add	r0, r0
    1042:	88 0b       	sbc	r24, r24
    1044:	99 0b       	sbc	r25, r25
    1046:	0e 94 be 0b 	call	0x177c	; 0x177c <__floatsisf>
    104a:	20 e0       	ldi	r18, 0x00	; 0
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	48 ec       	ldi	r20, 0xC8	; 200
    1050:	52 e4       	ldi	r21, 0x42	; 66
    1052:	0e 94 a2 0c 	call	0x1944	; 0x1944 <__mulsf3>
    1056:	4b 01       	movw	r8, r22
    1058:	5c 01       	movw	r10, r24
    105a:	b8 01       	movw	r22, r16
    105c:	11 0f       	add	r17, r17
    105e:	88 0b       	sbc	r24, r24
    1060:	99 0b       	sbc	r25, r25
    1062:	0e 94 be 0b 	call	0x177c	; 0x177c <__floatsisf>
    1066:	9b 01       	movw	r18, r22
    1068:	ac 01       	movw	r20, r24
    106a:	60 e0       	ldi	r22, 0x00	; 0
    106c:	70 e0       	ldi	r23, 0x00	; 0
    106e:	8f e7       	ldi	r24, 0x7F	; 127
    1070:	93 e4       	ldi	r25, 0x43	; 67
    1072:	0e 94 30 0a 	call	0x1460	; 0x1460 <__subsf3>
    1076:	9b 01       	movw	r18, r22
    1078:	ac 01       	movw	r20, r24
    107a:	c5 01       	movw	r24, r10
    107c:	b4 01       	movw	r22, r8
    107e:	0e 94 14 0b 	call	0x1628	; 0x1628 <__divsf3>
    1082:	0e 94 86 0b 	call	0x170c	; 0x170c <__fixsfsi>
    1086:	6b 01       	movw	r12, r22
    1088:	26 c0       	rjmp	.+76     	; 0x10d6 <pos_read+0xe8>
    }

    else if (ADC_X < (P_cal.center_X - 10)){
        ADC_X = (ADC_X / ((float)P_cal.center_X)) * 100 - 100;   // // Scaling when value is larger then center value
    108a:	07 2e       	mov	r0, r23
    108c:	00 0c       	add	r0, r0
    108e:	88 0b       	sbc	r24, r24
    1090:	99 0b       	sbc	r25, r25
    1092:	0e 94 be 0b 	call	0x177c	; 0x177c <__floatsisf>
    1096:	4b 01       	movw	r8, r22
    1098:	5c 01       	movw	r10, r24
    109a:	b8 01       	movw	r22, r16
    109c:	11 0f       	add	r17, r17
    109e:	88 0b       	sbc	r24, r24
    10a0:	99 0b       	sbc	r25, r25
    10a2:	0e 94 be 0b 	call	0x177c	; 0x177c <__floatsisf>
    10a6:	9b 01       	movw	r18, r22
    10a8:	ac 01       	movw	r20, r24
    10aa:	c5 01       	movw	r24, r10
    10ac:	b4 01       	movw	r22, r8
    10ae:	0e 94 14 0b 	call	0x1628	; 0x1628 <__divsf3>
    10b2:	20 e0       	ldi	r18, 0x00	; 0
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	48 ec       	ldi	r20, 0xC8	; 200
    10b8:	52 e4       	ldi	r21, 0x42	; 66
    10ba:	0e 94 a2 0c 	call	0x1944	; 0x1944 <__mulsf3>
    10be:	20 e0       	ldi	r18, 0x00	; 0
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	48 ec       	ldi	r20, 0xC8	; 200
    10c4:	52 e4       	ldi	r21, 0x42	; 66
    10c6:	0e 94 30 0a 	call	0x1460	; 0x1460 <__subsf3>
    10ca:	0e 94 86 0b 	call	0x170c	; 0x170c <__fixsfsi>
    10ce:	6b 01       	movw	r12, r22
    10d0:	02 c0       	rjmp	.+4      	; 0x10d6 <pos_read+0xe8>
    int ADC_X = ADC_read(1);

    // X read

    if((ADC_X >= (P_cal.center_X - 10)) && (ADC_X <= (P_cal.center_X + 10))){ //Deadspace for joystick
        ADC_X = 0;
    10d2:	c1 2c       	mov	r12, r1
    10d4:	d1 2c       	mov	r13, r1
        ADC_X = (ADC_X / ((float)P_cal.center_X)) * 100 - 100;   // // Scaling when value is larger then center value
    }

    // Y read

    if(ADC_Y >= (P_cal.center_Y - 10) && ADC_Y <= (P_cal.center_Y + 10)){  //Deadspace for joystick
    10d6:	00 91 8a 04 	lds	r16, 0x048A	; 0x80048a <P_cal+0x2>
    10da:	10 91 8b 04 	lds	r17, 0x048B	; 0x80048b <P_cal+0x3>
    10de:	c8 01       	movw	r24, r16
    10e0:	0a 97       	sbiw	r24, 0x0a	; 10
    10e2:	c8 17       	cp	r28, r24
    10e4:	d9 07       	cpc	r29, r25
    10e6:	0c f4       	brge	.+2      	; 0x10ea <pos_read+0xfc>
    10e8:	5e c0       	rjmp	.+188    	; 0x11a6 <pos_read+0x1b8>
    10ea:	44 96       	adiw	r24, 0x14	; 20
    10ec:	8c 17       	cp	r24, r28
    10ee:	9d 07       	cpc	r25, r29
    10f0:	0c f0       	brlt	.+2      	; 0x10f4 <pos_read+0x106>
    10f2:	4a c0       	rjmp	.+148    	; 0x1188 <pos_read+0x19a>
        ADC_Y = 0;
    }
    else if(ADC_Y > (P_cal.center_Y + 10)){
        ADC_Y = (ADC_Y - (P_cal.center_Y)) * 100.0 / (255.0 - P_cal.center_Y);  // Scaling when value is larger then center value
    10f4:	c0 1b       	sub	r28, r16
    10f6:	d1 0b       	sbc	r29, r17
    10f8:	be 01       	movw	r22, r28
    10fa:	dd 0f       	add	r29, r29
    10fc:	88 0b       	sbc	r24, r24
    10fe:	99 0b       	sbc	r25, r25
    1100:	0e 94 be 0b 	call	0x177c	; 0x177c <__floatsisf>
    1104:	20 e0       	ldi	r18, 0x00	; 0
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	48 ec       	ldi	r20, 0xC8	; 200
    110a:	52 e4       	ldi	r21, 0x42	; 66
    110c:	0e 94 a2 0c 	call	0x1944	; 0x1944 <__mulsf3>
    1110:	4b 01       	movw	r8, r22
    1112:	5c 01       	movw	r10, r24
    1114:	b8 01       	movw	r22, r16
    1116:	11 0f       	add	r17, r17
    1118:	88 0b       	sbc	r24, r24
    111a:	99 0b       	sbc	r25, r25
    111c:	0e 94 be 0b 	call	0x177c	; 0x177c <__floatsisf>
    1120:	9b 01       	movw	r18, r22
    1122:	ac 01       	movw	r20, r24
    1124:	60 e0       	ldi	r22, 0x00	; 0
    1126:	70 e0       	ldi	r23, 0x00	; 0
    1128:	8f e7       	ldi	r24, 0x7F	; 127
    112a:	93 e4       	ldi	r25, 0x43	; 67
    112c:	0e 94 30 0a 	call	0x1460	; 0x1460 <__subsf3>
    1130:	9b 01       	movw	r18, r22
    1132:	ac 01       	movw	r20, r24
    1134:	c5 01       	movw	r24, r10
    1136:	b4 01       	movw	r22, r8
    1138:	0e 94 14 0b 	call	0x1628	; 0x1628 <__divsf3>
    113c:	0e 94 86 0b 	call	0x170c	; 0x170c <__fixsfsi>
    1140:	25 c0       	rjmp	.+74     	; 0x118c <pos_read+0x19e>
    }

    else if (ADC_Y < (P_cal.center_Y - 10)){
        ADC_Y = (ADC_Y / ((float)P_cal.center_Y)) * 100 - 100;   // Scaling when value is smaller then center value
    1142:	be 01       	movw	r22, r28
    1144:	dd 0f       	add	r29, r29
    1146:	88 0b       	sbc	r24, r24
    1148:	99 0b       	sbc	r25, r25
    114a:	0e 94 be 0b 	call	0x177c	; 0x177c <__floatsisf>
    114e:	4b 01       	movw	r8, r22
    1150:	5c 01       	movw	r10, r24
    1152:	b8 01       	movw	r22, r16
    1154:	11 0f       	add	r17, r17
    1156:	88 0b       	sbc	r24, r24
    1158:	99 0b       	sbc	r25, r25
    115a:	0e 94 be 0b 	call	0x177c	; 0x177c <__floatsisf>
    115e:	9b 01       	movw	r18, r22
    1160:	ac 01       	movw	r20, r24
    1162:	c5 01       	movw	r24, r10
    1164:	b4 01       	movw	r22, r8
    1166:	0e 94 14 0b 	call	0x1628	; 0x1628 <__divsf3>
    116a:	20 e0       	ldi	r18, 0x00	; 0
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	48 ec       	ldi	r20, 0xC8	; 200
    1170:	52 e4       	ldi	r21, 0x42	; 66
    1172:	0e 94 a2 0c 	call	0x1944	; 0x1944 <__mulsf3>
    1176:	20 e0       	ldi	r18, 0x00	; 0
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	48 ec       	ldi	r20, 0xC8	; 200
    117c:	52 e4       	ldi	r21, 0x42	; 66
    117e:	0e 94 30 0a 	call	0x1460	; 0x1460 <__subsf3>
    1182:	0e 94 86 0b 	call	0x170c	; 0x170c <__fixsfsi>
    1186:	02 c0       	rjmp	.+4      	; 0x118c <pos_read+0x19e>
    }

    // Y read

    if(ADC_Y >= (P_cal.center_Y - 10) && ADC_Y <= (P_cal.center_Y + 10)){  //Deadspace for joystick
        ADC_Y = 0;
    1188:	60 e0       	ldi	r22, 0x00	; 0
    118a:	70 e0       	ldi	r23, 0x00	; 0

    else if (ADC_Y < (P_cal.center_Y - 10)){
        ADC_Y = (ADC_Y / ((float)P_cal.center_Y)) * 100 - 100;   // Scaling when value is smaller then center value
    }

    pos -> posX = ADC_X;
    118c:	f7 01       	movw	r30, r14
    118e:	d1 82       	std	Z+1, r13	; 0x01
    1190:	c0 82       	st	Z, r12
    pos -> posY = ADC_Y;
    1192:	73 83       	std	Z+3, r23	; 0x03
    1194:	62 83       	std	Z+2, r22	; 0x02
}
    1196:	0d c0       	rjmp	.+26     	; 0x11b2 <pos_read+0x1c4>
    // X read

    if((ADC_X >= (P_cal.center_X - 10)) && (ADC_X <= (P_cal.center_X + 10))){ //Deadspace for joystick
        ADC_X = 0;
    }
    else if(ADC_X > (P_cal.center_X + 10)){
    1198:	c8 01       	movw	r24, r16
    119a:	0a 96       	adiw	r24, 0x0a	; 10
    119c:	86 17       	cp	r24, r22
    119e:	97 07       	cpc	r25, r23
    11a0:	0c f4       	brge	.+2      	; 0x11a4 <pos_read+0x1b6>
    11a2:	4b cf       	rjmp	.-362    	; 0x103a <pos_read+0x4c>
    11a4:	72 cf       	rjmp	.-284    	; 0x108a <pos_read+0x9c>
    // Y read

    if(ADC_Y >= (P_cal.center_Y - 10) && ADC_Y <= (P_cal.center_Y + 10)){  //Deadspace for joystick
        ADC_Y = 0;
    }
    else if(ADC_Y > (P_cal.center_Y + 10)){
    11a6:	c8 01       	movw	r24, r16
    11a8:	0a 96       	adiw	r24, 0x0a	; 10
    11aa:	8c 17       	cp	r24, r28
    11ac:	9d 07       	cpc	r25, r29
    11ae:	4c f6       	brge	.-110    	; 0x1142 <pos_read+0x154>
    11b0:	a1 cf       	rjmp	.-190    	; 0x10f4 <pos_read+0x106>
        ADC_Y = (ADC_Y / ((float)P_cal.center_Y)) * 100 - 100;   // Scaling when value is smaller then center value
    }

    pos -> posX = ADC_X;
    pos -> posY = ADC_Y;
}
    11b2:	df 91       	pop	r29
    11b4:	cf 91       	pop	r28
    11b6:	1f 91       	pop	r17
    11b8:	0f 91       	pop	r16
    11ba:	ff 90       	pop	r15
    11bc:	ef 90       	pop	r14
    11be:	df 90       	pop	r13
    11c0:	cf 90       	pop	r12
    11c2:	bf 90       	pop	r11
    11c4:	af 90       	pop	r10
    11c6:	9f 90       	pop	r9
    11c8:	8f 90       	pop	r8
    11ca:	08 95       	ret

000011cc <joystick_direction>:

DIRECTION joystick_direction(void){
    11cc:	8f 92       	push	r8
    11ce:	9f 92       	push	r9
    11d0:	af 92       	push	r10
    11d2:	bf 92       	push	r11
    11d4:	cf 92       	push	r12
    11d6:	df 92       	push	r13
    11d8:	ef 92       	push	r14
    11da:	ff 92       	push	r15
    11dc:	cf 93       	push	r28
    11de:	df 93       	push	r29

    pos_read(&P_pos);
    11e0:	8c e8       	ldi	r24, 0x8C	; 140
    11e2:	94 e0       	ldi	r25, 0x04	; 4
    11e4:	0e 94 f7 07 	call	0xfee	; 0xfee <pos_read>

    int angle = atan2(P_pos.posY, P_pos.posX);
    11e8:	ec e8       	ldi	r30, 0x8C	; 140
    11ea:	f4 e0       	ldi	r31, 0x04	; 4
    11ec:	e0 80       	ld	r14, Z
    11ee:	f1 80       	ldd	r15, Z+1	; 0x01
    11f0:	c2 81       	ldd	r28, Z+2	; 0x02
    11f2:	d3 81       	ldd	r29, Z+3	; 0x03
    11f4:	b7 01       	movw	r22, r14
    11f6:	0f 2c       	mov	r0, r15
    11f8:	00 0c       	add	r0, r0
    11fa:	88 0b       	sbc	r24, r24
    11fc:	99 0b       	sbc	r25, r25
    11fe:	0e 94 be 0b 	call	0x177c	; 0x177c <__floatsisf>
    1202:	4b 01       	movw	r8, r22
    1204:	5c 01       	movw	r10, r24
    1206:	be 01       	movw	r22, r28
    1208:	0d 2e       	mov	r0, r29
    120a:	00 0c       	add	r0, r0
    120c:	88 0b       	sbc	r24, r24
    120e:	99 0b       	sbc	r25, r25
    1210:	0e 94 be 0b 	call	0x177c	; 0x177c <__floatsisf>
    1214:	a5 01       	movw	r20, r10
    1216:	94 01       	movw	r18, r8
    1218:	0e 94 b0 0a 	call	0x1560	; 0x1560 <atan2>

    if(!P_pos.posY & !P_pos.posX){
    121c:	21 e0       	ldi	r18, 0x01	; 1
    121e:	cd 2b       	or	r28, r29
    1220:	09 f0       	breq	.+2      	; 0x1224 <joystick_direction+0x58>
    1222:	20 e0       	ldi	r18, 0x00	; 0
    1224:	22 23       	and	r18, r18
    1226:	31 f0       	breq	.+12     	; 0x1234 <joystick_direction+0x68>
    1228:	21 e0       	ldi	r18, 0x01	; 1
    122a:	ef 28       	or	r14, r15
    122c:	09 f0       	breq	.+2      	; 0x1230 <joystick_direction+0x64>
    122e:	20 e0       	ldi	r18, 0x00	; 0
    1230:	21 11       	cpse	r18, r1
    1232:	79 c0       	rjmp	.+242    	; 0x1326 <joystick_direction+0x15a>
        return NEUTRAL;
    }

    else if(angle >= -PI / 4.0 & angle <= PI/4.0){
    1234:	0e 94 86 0b 	call	0x170c	; 0x170c <__fixsfsi>
    1238:	07 2e       	mov	r0, r23
    123a:	00 0c       	add	r0, r0
    123c:	88 0b       	sbc	r24, r24
    123e:	99 0b       	sbc	r25, r25
    1240:	0e 94 be 0b 	call	0x177c	; 0x177c <__floatsisf>
    1244:	6b 01       	movw	r12, r22
    1246:	7c 01       	movw	r14, r24
    1248:	c1 e0       	ldi	r28, 0x01	; 1
    124a:	2b ed       	ldi	r18, 0xDB	; 219
    124c:	3f e0       	ldi	r19, 0x0F	; 15
    124e:	49 e4       	ldi	r20, 0x49	; 73
    1250:	5f eb       	ldi	r21, 0xBF	; 191
    1252:	0e 94 95 0c 	call	0x192a	; 0x192a <__gesf2>
    1256:	88 23       	and	r24, r24
    1258:	0c f4       	brge	.+2      	; 0x125c <joystick_direction+0x90>
    125a:	c0 e0       	ldi	r28, 0x00	; 0
    125c:	cc 23       	and	r28, r28
    125e:	71 f0       	breq	.+28     	; 0x127c <joystick_direction+0xb0>
    1260:	c1 e0       	ldi	r28, 0x01	; 1
    1262:	2b ed       	ldi	r18, 0xDB	; 219
    1264:	3f e0       	ldi	r19, 0x0F	; 15
    1266:	49 e4       	ldi	r20, 0x49	; 73
    1268:	5f e3       	ldi	r21, 0x3F	; 63
    126a:	c7 01       	movw	r24, r14
    126c:	b6 01       	movw	r22, r12
    126e:	0e 94 0f 0b 	call	0x161e	; 0x161e <__cmpsf2>
    1272:	18 16       	cp	r1, r24
    1274:	0c f4       	brge	.+2      	; 0x1278 <joystick_direction+0xac>
    1276:	c0 e0       	ldi	r28, 0x00	; 0
    1278:	c1 11       	cpse	r28, r1
    127a:	57 c0       	rjmp	.+174    	; 0x132a <joystick_direction+0x15e>
        return RIGHT;
    }

    else if(angle >= -3 * PI/4.0 & angle <= -PI / 4.0){
    127c:	c1 e0       	ldi	r28, 0x01	; 1
    127e:	24 ee       	ldi	r18, 0xE4	; 228
    1280:	3b ec       	ldi	r19, 0xCB	; 203
    1282:	46 e1       	ldi	r20, 0x16	; 22
    1284:	50 ec       	ldi	r21, 0xC0	; 192
    1286:	c7 01       	movw	r24, r14
    1288:	b6 01       	movw	r22, r12
    128a:	0e 94 95 0c 	call	0x192a	; 0x192a <__gesf2>
    128e:	88 23       	and	r24, r24
    1290:	0c f4       	brge	.+2      	; 0x1294 <joystick_direction+0xc8>
    1292:	c0 e0       	ldi	r28, 0x00	; 0
    1294:	cc 23       	and	r28, r28
    1296:	71 f0       	breq	.+28     	; 0x12b4 <joystick_direction+0xe8>
    1298:	c1 e0       	ldi	r28, 0x01	; 1
    129a:	2b ed       	ldi	r18, 0xDB	; 219
    129c:	3f e0       	ldi	r19, 0x0F	; 15
    129e:	49 e4       	ldi	r20, 0x49	; 73
    12a0:	5f eb       	ldi	r21, 0xBF	; 191
    12a2:	c7 01       	movw	r24, r14
    12a4:	b6 01       	movw	r22, r12
    12a6:	0e 94 0f 0b 	call	0x161e	; 0x161e <__cmpsf2>
    12aa:	18 16       	cp	r1, r24
    12ac:	0c f4       	brge	.+2      	; 0x12b0 <joystick_direction+0xe4>
    12ae:	c0 e0       	ldi	r28, 0x00	; 0
    12b0:	c1 11       	cpse	r28, r1
    12b2:	3d c0       	rjmp	.+122    	; 0x132e <joystick_direction+0x162>
        return DOWN;
    }

    else if(angle >= 3 * PI/4 | angle <= -3* PI / 4.0){
    12b4:	c1 e0       	ldi	r28, 0x01	; 1
    12b6:	24 ee       	ldi	r18, 0xE4	; 228
    12b8:	3b ec       	ldi	r19, 0xCB	; 203
    12ba:	46 e1       	ldi	r20, 0x16	; 22
    12bc:	50 e4       	ldi	r21, 0x40	; 64
    12be:	c7 01       	movw	r24, r14
    12c0:	b6 01       	movw	r22, r12
    12c2:	0e 94 95 0c 	call	0x192a	; 0x192a <__gesf2>
    12c6:	88 23       	and	r24, r24
    12c8:	0c f4       	brge	.+2      	; 0x12cc <joystick_direction+0x100>
    12ca:	c0 e0       	ldi	r28, 0x00	; 0
    12cc:	c1 11       	cpse	r28, r1
    12ce:	31 c0       	rjmp	.+98     	; 0x1332 <joystick_direction+0x166>
    12d0:	c1 e0       	ldi	r28, 0x01	; 1
    12d2:	24 ee       	ldi	r18, 0xE4	; 228
    12d4:	3b ec       	ldi	r19, 0xCB	; 203
    12d6:	46 e1       	ldi	r20, 0x16	; 22
    12d8:	50 ec       	ldi	r21, 0xC0	; 192
    12da:	c7 01       	movw	r24, r14
    12dc:	b6 01       	movw	r22, r12
    12de:	0e 94 0f 0b 	call	0x161e	; 0x161e <__cmpsf2>
    12e2:	18 16       	cp	r1, r24
    12e4:	0c f4       	brge	.+2      	; 0x12e8 <joystick_direction+0x11c>
    12e6:	c0 e0       	ldi	r28, 0x00	; 0
    12e8:	c1 11       	cpse	r28, r1
    12ea:	23 c0       	rjmp	.+70     	; 0x1332 <joystick_direction+0x166>
        return LEFT;
    }

    else if(angle >= PI / 4 & angle <= 3*PI / 4.0){
    12ec:	c1 e0       	ldi	r28, 0x01	; 1
    12ee:	2b ed       	ldi	r18, 0xDB	; 219
    12f0:	3f e0       	ldi	r19, 0x0F	; 15
    12f2:	49 e4       	ldi	r20, 0x49	; 73
    12f4:	5f e3       	ldi	r21, 0x3F	; 63
    12f6:	c7 01       	movw	r24, r14
    12f8:	b6 01       	movw	r22, r12
    12fa:	0e 94 95 0c 	call	0x192a	; 0x192a <__gesf2>
    12fe:	88 23       	and	r24, r24
    1300:	0c f4       	brge	.+2      	; 0x1304 <joystick_direction+0x138>
    1302:	c0 e0       	ldi	r28, 0x00	; 0
    1304:	cc 23       	and	r28, r28
    1306:	71 f0       	breq	.+28     	; 0x1324 <joystick_direction+0x158>
    1308:	c1 e0       	ldi	r28, 0x01	; 1
    130a:	24 ee       	ldi	r18, 0xE4	; 228
    130c:	3b ec       	ldi	r19, 0xCB	; 203
    130e:	46 e1       	ldi	r20, 0x16	; 22
    1310:	50 e4       	ldi	r21, 0x40	; 64
    1312:	c7 01       	movw	r24, r14
    1314:	b6 01       	movw	r22, r12
    1316:	0e 94 0f 0b 	call	0x161e	; 0x161e <__cmpsf2>
    131a:	18 16       	cp	r1, r24
    131c:	0c f4       	brge	.+2      	; 0x1320 <joystick_direction+0x154>
    131e:	c0 e0       	ldi	r28, 0x00	; 0
    1320:	c1 11       	cpse	r28, r1
    1322:	09 c0       	rjmp	.+18     	; 0x1336 <joystick_direction+0x16a>
        return UP;
    }
}
    1324:	09 c0       	rjmp	.+18     	; 0x1338 <joystick_direction+0x16c>
    pos_read(&P_pos);

    int angle = atan2(P_pos.posY, P_pos.posX);

    if(!P_pos.posY & !P_pos.posX){
        return NEUTRAL;
    1326:	84 e0       	ldi	r24, 0x04	; 4
    1328:	07 c0       	rjmp	.+14     	; 0x1338 <joystick_direction+0x16c>
    }

    else if(angle >= -PI / 4.0 & angle <= PI/4.0){
        return RIGHT;
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	05 c0       	rjmp	.+10     	; 0x1338 <joystick_direction+0x16c>
    }

    else if(angle >= -3 * PI/4.0 & angle <= -PI / 4.0){
        return DOWN;
    132e:	83 e0       	ldi	r24, 0x03	; 3
    1330:	03 c0       	rjmp	.+6      	; 0x1338 <joystick_direction+0x16c>
    }

    else if(angle >= 3 * PI/4 | angle <= -3* PI / 4.0){
        return LEFT;
    1332:	80 e0       	ldi	r24, 0x00	; 0
    1334:	01 c0       	rjmp	.+2      	; 0x1338 <joystick_direction+0x16c>
    }

    else if(angle >= PI / 4 & angle <= 3*PI / 4.0){
        return UP;
    1336:	82 e0       	ldi	r24, 0x02	; 2
    }
}
    1338:	df 91       	pop	r29
    133a:	cf 91       	pop	r28
    133c:	ff 90       	pop	r15
    133e:	ef 90       	pop	r14
    1340:	df 90       	pop	r13
    1342:	cf 90       	pop	r12
    1344:	bf 90       	pop	r11
    1346:	af 90       	pop	r10
    1348:	9f 90       	pop	r9
    134a:	8f 90       	pop	r8
    134c:	08 95       	ret

0000134e <pos_readSettings>:

void pos_readSettings(void){
	
	DDRB &= ~(1 << PB1);
    134e:	b9 98       	cbi	0x17, 1	; 23
	DDRD &= ~(1 << PD4);
    1350:	8c 98       	cbi	0x11, 4	; 17
	DDRD &= ~(1 << PD5);
    1352:	8d 98       	cbi	0x11, 5	; 17

	PORTB |= (1 << PB1); // internal pull up enable
    1354:	c1 9a       	sbi	0x18, 1	; 24
    1356:	08 95       	ret

00001358 <usb_button_pushed>:

uint8_t usb_button_pushed(USB_BUTTON BUTTON){

    uint8_t pressed;

    if(BUTTON == LEFT_BUTTON){
    1358:	81 30       	cpi	r24, 0x01	; 1
    135a:	19 f4       	brne	.+6      	; 0x1362 <usb_button_pushed+0xa>
        pressed = (PIND & (1 << PD4) );
    135c:	80 b3       	in	r24, 0x10	; 16
    135e:	80 71       	andi	r24, 0x10	; 16
    1360:	08 95       	ret

		}

    if(BUTTON == RIGHT_BUTTON){
    1362:	81 11       	cpse	r24, r1
    1364:	03 c0       	rjmp	.+6      	; 0x136c <usb_button_pushed+0x14>
        pressed =  (PIND & (1 << PD5) );
    1366:	80 b3       	in	r24, 0x10	; 16
    1368:	80 72       	andi	r24, 0x20	; 32
    136a:	08 95       	ret
		}

    if(BUTTON == JOYSTICK_BUTTON){
    136c:	82 30       	cpi	r24, 0x02	; 2
    136e:	31 f4       	brne	.+12     	; 0x137c <usb_button_pushed+0x24>
        pressed =  (PINB & (1 << PB1) );
    1370:	86 b3       	in	r24, 0x16	; 22
        return !pressed;
    1372:	86 95       	lsr	r24
    1374:	81 70       	andi	r24, 0x01	; 1
    1376:	91 e0       	ldi	r25, 0x01	; 1
    1378:	89 27       	eor	r24, r25
    137a:	08 95       	ret
    137c:	80 e0       	ldi	r24, 0x00	; 0
		}

    return pressed;
}
    137e:	08 95       	ret

00001380 <main>:


int main(void)
{
    
    SRAM_init();
    1380:	0e 94 19 0a 	call	0x1432	; 0x1432 <SRAM_init>
    ADC_timer_init();
    1384:	0e 94 0a 02 	call	0x414	; 0x414 <ADC_timer_init>
    USART_init();
    1388:	0e 94 20 0a 	call	0x1440	; 0x1440 <USART_init>
    fdevopen(USART_send, USART_receive);
    138c:	68 e2       	ldi	r22, 0x28	; 40
    138e:	7a e0       	ldi	r23, 0x0A	; 10
    1390:	8c e2       	ldi	r24, 0x2C	; 44
    1392:	9a e0       	ldi	r25, 0x0A	; 10
    1394:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <fdevopen>
    ADC_calibrate(&P_cal);
    1398:	88 e8       	ldi	r24, 0x88	; 136
    139a:	94 e0       	ldi	r25, 0x04	; 4
    139c:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <ADC_calibrate>
    OLED_init();
    13a0:	0e 94 c3 04 	call	0x986	; 0x986 <OLED_init>
    pos_readSettings();
    13a4:	0e 94 a7 09 	call	0x134e	; 0x134e <pos_readSettings>
    oled_clear();
    13a8:	0e 94 9f 04 	call	0x93e	; 0x93e <oled_clear>
	CAN_init(MODE_NORMAL);
    13ac:	80 e0       	ldi	r24, 0x00	; 0
    13ae:	0e 94 17 02 	call	0x42e	; 0x42e <CAN_init>
    // char c[] = "derp";
    // oled_pos_set(3, 62);
    // oled_print(&c);
    
	
    menu();
    13b2:	0e 94 2b 07 	call	0xe56	; 0xe56 <menu>
    test_message.data[1] = 'E';
    test_message.data[2] = 'I';
    test_message.data_length = 3;
    
    CAN_message_t revieve_message;
    printf("Initiating node 1 \n\r");
    13b6:	8b ea       	ldi	r24, 0xAB	; 171
    13b8:	93 e0       	ldi	r25, 0x03	; 3
    13ba:	9f 93       	push	r25
    13bc:	8f 93       	push	r24
    13be:	0e 94 65 0d 	call	0x1aca	; 0x1aca <printf>
    13c2:	0f 90       	pop	r0
    13c4:	0f 90       	pop	r0
        //    char test = spi_read();
        //    printf("test is:  %d \n \r", test);

        
        //printf("Right button pressed: %d , Left button pressed: %d  joy button pressed: %d \r", usb_button_pushed(RIGHT_BUTTON), usb_button_pushed(LEFT_BUTTON), usb_button_pushed(JOYSTICK_BUTTON) );
        printf("Pos X val is %4d , Pos Y is %4d, sliderX is %4d,  sliderY is %4d  \n \r", P_pos.posX, P_pos.posY, sliderX, sliderY);
    13c6:	cc e8       	ldi	r28, 0x8C	; 140
    13c8:	d4 e0       	ldi	r29, 0x04	; 4
    13ca:	00 ec       	ldi	r16, 0xC0	; 192
    13cc:	13 e0       	ldi	r17, 0x03	; 3
       //uint8_t joyButton = usb_button_pushed(JOYSTICK_BUTTON);
       //uint8_t joyDirection = joystick_direction(); 
       //pos_read(&P_pos);
       //printf("X = %d Y = %d, joybutton = %d, joydirection = %d \n\r", P_pos.posX, P_pos.posY, joyButton, joyDirection);
       //printf("Bro");
	   joyStick_Can_Message();
    13ce:	0e 94 76 03 	call	0x6ec	; 0x6ec <joyStick_Can_Message>
        
        //printf("Lengden er : %d\n\r Dataen er: %d\n\r ID'en er: %d\n\r", revieve_message.data_length, revieve_message.data[0], revieve_message.data_length);
        
        //pos_read(&P_pos);
        //
        uint8_t sliderX = ADC_read(3);
    13d2:	83 e0       	ldi	r24, 0x03	; 3
    13d4:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ADC_read>
    13d8:	f8 2e       	mov	r15, r24
        uint8_t sliderY = ADC_read(2);
    13da:	82 e0       	ldi	r24, 0x02	; 2
    13dc:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ADC_read>
        //    char test = spi_read();
        //    printf("test is:  %d \n \r", test);

        
        //printf("Right button pressed: %d , Left button pressed: %d  joy button pressed: %d \r", usb_button_pushed(RIGHT_BUTTON), usb_button_pushed(LEFT_BUTTON), usb_button_pushed(JOYSTICK_BUTTON) );
        printf("Pos X val is %4d , Pos Y is %4d, sliderX is %4d,  sliderY is %4d  \n \r", P_pos.posX, P_pos.posY, sliderX, sliderY);
    13e0:	1f 92       	push	r1
    13e2:	8f 93       	push	r24
    13e4:	1f 92       	push	r1
    13e6:	ff 92       	push	r15
    13e8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ea:	8f 93       	push	r24
    13ec:	8a 81       	ldd	r24, Y+2	; 0x02
    13ee:	8f 93       	push	r24
    13f0:	89 81       	ldd	r24, Y+1	; 0x01
    13f2:	8f 93       	push	r24
    13f4:	88 81       	ld	r24, Y
    13f6:	8f 93       	push	r24
    13f8:	1f 93       	push	r17
    13fa:	0f 93       	push	r16
    13fc:	0e 94 65 0d 	call	0x1aca	; 0x1aca <printf>
    1400:	8d b7       	in	r24, 0x3d	; 61
    1402:	9e b7       	in	r25, 0x3e	; 62
    1404:	0a 96       	adiw	r24, 0x0a	; 10
    1406:	0f b6       	in	r0, 0x3f	; 63
    1408:	f8 94       	cli
    140a:	9e bf       	out	0x3e, r25	; 62
    140c:	0f be       	out	0x3f, r0	; 63
    140e:	8d bf       	out	0x3d, r24	; 61
    1410:	de cf       	rjmp	.-68     	; 0x13ce <main+0x4e>

00001412 <spi_write>:
#include "spi_driver.h"


void spi_write(char data){

    SPDR = data;
    1412:	8f b9       	out	0x0f, r24	; 15
    while( !(SPSR & (1<<SPIF)) );
    1414:	77 9b       	sbis	0x0e, 7	; 14
    1416:	fe cf       	rjmp	.-4      	; 0x1414 <spi_write+0x2>

}
    1418:	08 95       	ret

0000141a <spi_read>:

char spi_read(void){

    spi_write(DUMMY);
    141a:	86 e5       	ldi	r24, 0x56	; 86
    141c:	0e 94 09 0a 	call	0x1412	; 0x1412 <spi_write>
    //printf("SPI data sent is");
    return SPDR;
    1420:	8f b1       	in	r24, 0x0f	; 15
}
    1422:	08 95       	ret

00001424 <spi_init>:

void spi_init(void){
    DDR_SPI |= (1 << SCK) | (1 << MOSI) | (1 << SS);
    1424:	87 b3       	in	r24, 0x17	; 23
    1426:	80 6b       	ori	r24, 0xB0	; 176
    1428:	87 bb       	out	0x17, r24	; 23

    SPCR |= (1 << SPE) | (1 << MSTR) | (1<<SPR0);  // Enable SPI and set as master
    142a:	8d b1       	in	r24, 0x0d	; 13
    142c:	81 65       	ori	r24, 0x51	; 81
    142e:	8d b9       	out	0x0d, r24	; 13
    1430:	08 95       	ret

00001432 <SRAM_init>:
 */

#include "SRAM_driver.h"

void SRAM_init(void){
    MCUCR |= (1 << SRE);     //external SRAM enable (mcu control register)
    1432:	85 b7       	in	r24, 0x35	; 53
    1434:	80 68       	ori	r24, 0x80	; 128
    1436:	85 bf       	out	0x35, r24	; 53
    SFIOR |= (1 << XMM2);    //excludes memory occupied by JTAG
    1438:	80 b7       	in	r24, 0x30	; 48
    143a:	80 62       	ori	r24, 0x20	; 32
    143c:	80 bf       	out	0x30, r24	; 48
    143e:	08 95       	ret

00001440 <USART_init>:
 */
#include "UART_driver.h"


void USART_init(void){
    UBRR0L = (uint8_t)(BAUD_PRESCALER);
    1440:	8f e1       	ldi	r24, 0x1F	; 31
    1442:	89 b9       	out	0x09, r24	; 9
    UBRR0H = (uint8_t)((uint8_t) BAUD_PRESCALER>>8);
    1444:	10 bc       	out	0x20, r1	; 32
    UCSR0B = (1 << RXEN0)|(1 << TXEN0);
    1446:	88 e1       	ldi	r24, 0x18	; 24
    1448:	8a b9       	out	0x0a, r24	; 10
    UCSR0C = (1 << URSEL0)|(1 << USBS0)|(3 << UCSZ00);
    144a:	8e e8       	ldi	r24, 0x8E	; 142
    144c:	80 bd       	out	0x20, r24	; 32
    144e:	08 95       	ret

00001450 <USART_receive>:
}

unsigned char USART_receive(void){
    while(!(UCSR0A & (1 << RXC0)));
    1450:	5f 9b       	sbis	0x0b, 7	; 11
    1452:	fe cf       	rjmp	.-4      	; 0x1450 <USART_receive>
    return UDR0;
    1454:	8c b1       	in	r24, 0x0c	; 12
}
    1456:	08 95       	ret

00001458 <USART_send>:

void USART_send( unsigned char data){
    while(!(UCSR0A & (1 << UDRE0)));
    1458:	5d 9b       	sbis	0x0b, 5	; 11
    145a:	fe cf       	rjmp	.-4      	; 0x1458 <USART_send>
    UDR0 = data;
    145c:	8c b9       	out	0x0c, r24	; 12
    145e:	08 95       	ret

00001460 <__subsf3>:
    1460:	50 58       	subi	r21, 0x80	; 128

00001462 <__addsf3>:
    1462:	bb 27       	eor	r27, r27
    1464:	aa 27       	eor	r26, r26
    1466:	0e 94 48 0a 	call	0x1490	; 0x1490 <__addsf3x>
    146a:	0c 94 5b 0c 	jmp	0x18b6	; 0x18b6 <__fp_round>
    146e:	0e 94 4d 0c 	call	0x189a	; 0x189a <__fp_pscA>
    1472:	38 f0       	brcs	.+14     	; 0x1482 <__addsf3+0x20>
    1474:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <__fp_pscB>
    1478:	20 f0       	brcs	.+8      	; 0x1482 <__addsf3+0x20>
    147a:	39 f4       	brne	.+14     	; 0x148a <__addsf3+0x28>
    147c:	9f 3f       	cpi	r25, 0xFF	; 255
    147e:	19 f4       	brne	.+6      	; 0x1486 <__addsf3+0x24>
    1480:	26 f4       	brtc	.+8      	; 0x148a <__addsf3+0x28>
    1482:	0c 94 23 0c 	jmp	0x1846	; 0x1846 <__fp_nan>
    1486:	0e f4       	brtc	.+2      	; 0x148a <__addsf3+0x28>
    1488:	e0 95       	com	r30
    148a:	e7 fb       	bst	r30, 7
    148c:	0c 94 1d 0c 	jmp	0x183a	; 0x183a <__fp_inf>

00001490 <__addsf3x>:
    1490:	e9 2f       	mov	r30, r25
    1492:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <__fp_split3>
    1496:	58 f3       	brcs	.-42     	; 0x146e <__addsf3+0xc>
    1498:	ba 17       	cp	r27, r26
    149a:	62 07       	cpc	r22, r18
    149c:	73 07       	cpc	r23, r19
    149e:	84 07       	cpc	r24, r20
    14a0:	95 07       	cpc	r25, r21
    14a2:	20 f0       	brcs	.+8      	; 0x14ac <__addsf3x+0x1c>
    14a4:	79 f4       	brne	.+30     	; 0x14c4 <__addsf3x+0x34>
    14a6:	a6 f5       	brtc	.+104    	; 0x1510 <__addsf3x+0x80>
    14a8:	0c 94 8e 0c 	jmp	0x191c	; 0x191c <__fp_zero>
    14ac:	0e f4       	brtc	.+2      	; 0x14b0 <__addsf3x+0x20>
    14ae:	e0 95       	com	r30
    14b0:	0b 2e       	mov	r0, r27
    14b2:	ba 2f       	mov	r27, r26
    14b4:	a0 2d       	mov	r26, r0
    14b6:	0b 01       	movw	r0, r22
    14b8:	b9 01       	movw	r22, r18
    14ba:	90 01       	movw	r18, r0
    14bc:	0c 01       	movw	r0, r24
    14be:	ca 01       	movw	r24, r20
    14c0:	a0 01       	movw	r20, r0
    14c2:	11 24       	eor	r1, r1
    14c4:	ff 27       	eor	r31, r31
    14c6:	59 1b       	sub	r21, r25
    14c8:	99 f0       	breq	.+38     	; 0x14f0 <__addsf3x+0x60>
    14ca:	59 3f       	cpi	r21, 0xF9	; 249
    14cc:	50 f4       	brcc	.+20     	; 0x14e2 <__addsf3x+0x52>
    14ce:	50 3e       	cpi	r21, 0xE0	; 224
    14d0:	68 f1       	brcs	.+90     	; 0x152c <__addsf3x+0x9c>
    14d2:	1a 16       	cp	r1, r26
    14d4:	f0 40       	sbci	r31, 0x00	; 0
    14d6:	a2 2f       	mov	r26, r18
    14d8:	23 2f       	mov	r18, r19
    14da:	34 2f       	mov	r19, r20
    14dc:	44 27       	eor	r20, r20
    14de:	58 5f       	subi	r21, 0xF8	; 248
    14e0:	f3 cf       	rjmp	.-26     	; 0x14c8 <__addsf3x+0x38>
    14e2:	46 95       	lsr	r20
    14e4:	37 95       	ror	r19
    14e6:	27 95       	ror	r18
    14e8:	a7 95       	ror	r26
    14ea:	f0 40       	sbci	r31, 0x00	; 0
    14ec:	53 95       	inc	r21
    14ee:	c9 f7       	brne	.-14     	; 0x14e2 <__addsf3x+0x52>
    14f0:	7e f4       	brtc	.+30     	; 0x1510 <__addsf3x+0x80>
    14f2:	1f 16       	cp	r1, r31
    14f4:	ba 0b       	sbc	r27, r26
    14f6:	62 0b       	sbc	r22, r18
    14f8:	73 0b       	sbc	r23, r19
    14fa:	84 0b       	sbc	r24, r20
    14fc:	ba f0       	brmi	.+46     	; 0x152c <__addsf3x+0x9c>
    14fe:	91 50       	subi	r25, 0x01	; 1
    1500:	a1 f0       	breq	.+40     	; 0x152a <__addsf3x+0x9a>
    1502:	ff 0f       	add	r31, r31
    1504:	bb 1f       	adc	r27, r27
    1506:	66 1f       	adc	r22, r22
    1508:	77 1f       	adc	r23, r23
    150a:	88 1f       	adc	r24, r24
    150c:	c2 f7       	brpl	.-16     	; 0x14fe <__addsf3x+0x6e>
    150e:	0e c0       	rjmp	.+28     	; 0x152c <__addsf3x+0x9c>
    1510:	ba 0f       	add	r27, r26
    1512:	62 1f       	adc	r22, r18
    1514:	73 1f       	adc	r23, r19
    1516:	84 1f       	adc	r24, r20
    1518:	48 f4       	brcc	.+18     	; 0x152c <__addsf3x+0x9c>
    151a:	87 95       	ror	r24
    151c:	77 95       	ror	r23
    151e:	67 95       	ror	r22
    1520:	b7 95       	ror	r27
    1522:	f7 95       	ror	r31
    1524:	9e 3f       	cpi	r25, 0xFE	; 254
    1526:	08 f0       	brcs	.+2      	; 0x152a <__addsf3x+0x9a>
    1528:	b0 cf       	rjmp	.-160    	; 0x148a <__addsf3+0x28>
    152a:	93 95       	inc	r25
    152c:	88 0f       	add	r24, r24
    152e:	08 f0       	brcs	.+2      	; 0x1532 <__addsf3x+0xa2>
    1530:	99 27       	eor	r25, r25
    1532:	ee 0f       	add	r30, r30
    1534:	97 95       	ror	r25
    1536:	87 95       	ror	r24
    1538:	08 95       	ret
    153a:	0e 94 4d 0c 	call	0x189a	; 0x189a <__fp_pscA>
    153e:	60 f0       	brcs	.+24     	; 0x1558 <__addsf3x+0xc8>
    1540:	80 e8       	ldi	r24, 0x80	; 128
    1542:	91 e0       	ldi	r25, 0x01	; 1
    1544:	09 f4       	brne	.+2      	; 0x1548 <__addsf3x+0xb8>
    1546:	9e ef       	ldi	r25, 0xFE	; 254
    1548:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <__fp_pscB>
    154c:	28 f0       	brcs	.+10     	; 0x1558 <__addsf3x+0xc8>
    154e:	40 e8       	ldi	r20, 0x80	; 128
    1550:	51 e0       	ldi	r21, 0x01	; 1
    1552:	71 f4       	brne	.+28     	; 0x1570 <atan2+0x10>
    1554:	5e ef       	ldi	r21, 0xFE	; 254
    1556:	0c c0       	rjmp	.+24     	; 0x1570 <atan2+0x10>
    1558:	0c 94 23 0c 	jmp	0x1846	; 0x1846 <__fp_nan>
    155c:	0c 94 8e 0c 	jmp	0x191c	; 0x191c <__fp_zero>

00001560 <atan2>:
    1560:	e9 2f       	mov	r30, r25
    1562:	e0 78       	andi	r30, 0x80	; 128
    1564:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <__fp_split3>
    1568:	40 f3       	brcs	.-48     	; 0x153a <__addsf3x+0xaa>
    156a:	09 2e       	mov	r0, r25
    156c:	05 2a       	or	r0, r21
    156e:	b1 f3       	breq	.-20     	; 0x155c <__addsf3x+0xcc>
    1570:	26 17       	cp	r18, r22
    1572:	37 07       	cpc	r19, r23
    1574:	48 07       	cpc	r20, r24
    1576:	59 07       	cpc	r21, r25
    1578:	38 f0       	brcs	.+14     	; 0x1588 <atan2+0x28>
    157a:	0e 2e       	mov	r0, r30
    157c:	07 f8       	bld	r0, 7
    157e:	e0 25       	eor	r30, r0
    1580:	69 f0       	breq	.+26     	; 0x159c <atan2+0x3c>
    1582:	e0 25       	eor	r30, r0
    1584:	e0 64       	ori	r30, 0x40	; 64
    1586:	0a c0       	rjmp	.+20     	; 0x159c <atan2+0x3c>
    1588:	ef 63       	ori	r30, 0x3F	; 63
    158a:	07 f8       	bld	r0, 7
    158c:	00 94       	com	r0
    158e:	07 fa       	bst	r0, 7
    1590:	db 01       	movw	r26, r22
    1592:	b9 01       	movw	r22, r18
    1594:	9d 01       	movw	r18, r26
    1596:	dc 01       	movw	r26, r24
    1598:	ca 01       	movw	r24, r20
    159a:	ad 01       	movw	r20, r26
    159c:	ef 93       	push	r30
    159e:	0e 94 2b 0b 	call	0x1656	; 0x1656 <__divsf3_pse>
    15a2:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <__fp_round>
    15a6:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <atan>
    15aa:	5f 91       	pop	r21
    15ac:	55 23       	and	r21, r21
    15ae:	39 f0       	breq	.+14     	; 0x15be <atan2+0x5e>
    15b0:	2b ed       	ldi	r18, 0xDB	; 219
    15b2:	3f e0       	ldi	r19, 0x0F	; 15
    15b4:	49 e4       	ldi	r20, 0x49	; 73
    15b6:	50 fd       	sbrc	r21, 0
    15b8:	49 ec       	ldi	r20, 0xC9	; 201
    15ba:	0c 94 31 0a 	jmp	0x1462	; 0x1462 <__addsf3>
    15be:	08 95       	ret

000015c0 <atan>:
    15c0:	df 93       	push	r29
    15c2:	dd 27       	eor	r29, r29
    15c4:	b9 2f       	mov	r27, r25
    15c6:	bf 77       	andi	r27, 0x7F	; 127
    15c8:	40 e8       	ldi	r20, 0x80	; 128
    15ca:	5f e3       	ldi	r21, 0x3F	; 63
    15cc:	16 16       	cp	r1, r22
    15ce:	17 06       	cpc	r1, r23
    15d0:	48 07       	cpc	r20, r24
    15d2:	5b 07       	cpc	r21, r27
    15d4:	18 f4       	brcc	.+6      	; 0x15dc <atan+0x1c>
    15d6:	d9 2f       	mov	r29, r25
    15d8:	0e 94 9a 0c 	call	0x1934	; 0x1934 <inverse>
    15dc:	9f 93       	push	r25
    15de:	8f 93       	push	r24
    15e0:	7f 93       	push	r23
    15e2:	6f 93       	push	r22
    15e4:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <square>
    15e8:	e0 e7       	ldi	r30, 0x70	; 112
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	0e 94 26 0c 	call	0x184c	; 0x184c <__fp_powser>
    15f0:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <__fp_round>
    15f4:	2f 91       	pop	r18
    15f6:	3f 91       	pop	r19
    15f8:	4f 91       	pop	r20
    15fa:	5f 91       	pop	r21
    15fc:	0e 94 b5 0c 	call	0x196a	; 0x196a <__mulsf3x>
    1600:	dd 23       	and	r29, r29
    1602:	51 f0       	breq	.+20     	; 0x1618 <atan+0x58>
    1604:	90 58       	subi	r25, 0x80	; 128
    1606:	a2 ea       	ldi	r26, 0xA2	; 162
    1608:	2a ed       	ldi	r18, 0xDA	; 218
    160a:	3f e0       	ldi	r19, 0x0F	; 15
    160c:	49 ec       	ldi	r20, 0xC9	; 201
    160e:	5f e3       	ldi	r21, 0x3F	; 63
    1610:	d0 78       	andi	r29, 0x80	; 128
    1612:	5d 27       	eor	r21, r29
    1614:	0e 94 48 0a 	call	0x1490	; 0x1490 <__addsf3x>
    1618:	df 91       	pop	r29
    161a:	0c 94 5b 0c 	jmp	0x18b6	; 0x18b6 <__fp_round>

0000161e <__cmpsf2>:
    161e:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <__fp_cmp>
    1622:	08 f4       	brcc	.+2      	; 0x1626 <__cmpsf2+0x8>
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	08 95       	ret

00001628 <__divsf3>:
    1628:	0e 94 28 0b 	call	0x1650	; 0x1650 <__divsf3x>
    162c:	0c 94 5b 0c 	jmp	0x18b6	; 0x18b6 <__fp_round>
    1630:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <__fp_pscB>
    1634:	58 f0       	brcs	.+22     	; 0x164c <__divsf3+0x24>
    1636:	0e 94 4d 0c 	call	0x189a	; 0x189a <__fp_pscA>
    163a:	40 f0       	brcs	.+16     	; 0x164c <__divsf3+0x24>
    163c:	29 f4       	brne	.+10     	; 0x1648 <__divsf3+0x20>
    163e:	5f 3f       	cpi	r21, 0xFF	; 255
    1640:	29 f0       	breq	.+10     	; 0x164c <__divsf3+0x24>
    1642:	0c 94 1d 0c 	jmp	0x183a	; 0x183a <__fp_inf>
    1646:	51 11       	cpse	r21, r1
    1648:	0c 94 8f 0c 	jmp	0x191e	; 0x191e <__fp_szero>
    164c:	0c 94 23 0c 	jmp	0x1846	; 0x1846 <__fp_nan>

00001650 <__divsf3x>:
    1650:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <__fp_split3>
    1654:	68 f3       	brcs	.-38     	; 0x1630 <__divsf3+0x8>

00001656 <__divsf3_pse>:
    1656:	99 23       	and	r25, r25
    1658:	b1 f3       	breq	.-20     	; 0x1646 <__divsf3+0x1e>
    165a:	55 23       	and	r21, r21
    165c:	91 f3       	breq	.-28     	; 0x1642 <__divsf3+0x1a>
    165e:	95 1b       	sub	r25, r21
    1660:	55 0b       	sbc	r21, r21
    1662:	bb 27       	eor	r27, r27
    1664:	aa 27       	eor	r26, r26
    1666:	62 17       	cp	r22, r18
    1668:	73 07       	cpc	r23, r19
    166a:	84 07       	cpc	r24, r20
    166c:	38 f0       	brcs	.+14     	; 0x167c <__divsf3_pse+0x26>
    166e:	9f 5f       	subi	r25, 0xFF	; 255
    1670:	5f 4f       	sbci	r21, 0xFF	; 255
    1672:	22 0f       	add	r18, r18
    1674:	33 1f       	adc	r19, r19
    1676:	44 1f       	adc	r20, r20
    1678:	aa 1f       	adc	r26, r26
    167a:	a9 f3       	breq	.-22     	; 0x1666 <__divsf3_pse+0x10>
    167c:	35 d0       	rcall	.+106    	; 0x16e8 <__divsf3_pse+0x92>
    167e:	0e 2e       	mov	r0, r30
    1680:	3a f0       	brmi	.+14     	; 0x1690 <__divsf3_pse+0x3a>
    1682:	e0 e8       	ldi	r30, 0x80	; 128
    1684:	32 d0       	rcall	.+100    	; 0x16ea <__divsf3_pse+0x94>
    1686:	91 50       	subi	r25, 0x01	; 1
    1688:	50 40       	sbci	r21, 0x00	; 0
    168a:	e6 95       	lsr	r30
    168c:	00 1c       	adc	r0, r0
    168e:	ca f7       	brpl	.-14     	; 0x1682 <__divsf3_pse+0x2c>
    1690:	2b d0       	rcall	.+86     	; 0x16e8 <__divsf3_pse+0x92>
    1692:	fe 2f       	mov	r31, r30
    1694:	29 d0       	rcall	.+82     	; 0x16e8 <__divsf3_pse+0x92>
    1696:	66 0f       	add	r22, r22
    1698:	77 1f       	adc	r23, r23
    169a:	88 1f       	adc	r24, r24
    169c:	bb 1f       	adc	r27, r27
    169e:	26 17       	cp	r18, r22
    16a0:	37 07       	cpc	r19, r23
    16a2:	48 07       	cpc	r20, r24
    16a4:	ab 07       	cpc	r26, r27
    16a6:	b0 e8       	ldi	r27, 0x80	; 128
    16a8:	09 f0       	breq	.+2      	; 0x16ac <__divsf3_pse+0x56>
    16aa:	bb 0b       	sbc	r27, r27
    16ac:	80 2d       	mov	r24, r0
    16ae:	bf 01       	movw	r22, r30
    16b0:	ff 27       	eor	r31, r31
    16b2:	93 58       	subi	r25, 0x83	; 131
    16b4:	5f 4f       	sbci	r21, 0xFF	; 255
    16b6:	3a f0       	brmi	.+14     	; 0x16c6 <__divsf3_pse+0x70>
    16b8:	9e 3f       	cpi	r25, 0xFE	; 254
    16ba:	51 05       	cpc	r21, r1
    16bc:	78 f0       	brcs	.+30     	; 0x16dc <__divsf3_pse+0x86>
    16be:	0c 94 1d 0c 	jmp	0x183a	; 0x183a <__fp_inf>
    16c2:	0c 94 8f 0c 	jmp	0x191e	; 0x191e <__fp_szero>
    16c6:	5f 3f       	cpi	r21, 0xFF	; 255
    16c8:	e4 f3       	brlt	.-8      	; 0x16c2 <__divsf3_pse+0x6c>
    16ca:	98 3e       	cpi	r25, 0xE8	; 232
    16cc:	d4 f3       	brlt	.-12     	; 0x16c2 <__divsf3_pse+0x6c>
    16ce:	86 95       	lsr	r24
    16d0:	77 95       	ror	r23
    16d2:	67 95       	ror	r22
    16d4:	b7 95       	ror	r27
    16d6:	f7 95       	ror	r31
    16d8:	9f 5f       	subi	r25, 0xFF	; 255
    16da:	c9 f7       	brne	.-14     	; 0x16ce <__divsf3_pse+0x78>
    16dc:	88 0f       	add	r24, r24
    16de:	91 1d       	adc	r25, r1
    16e0:	96 95       	lsr	r25
    16e2:	87 95       	ror	r24
    16e4:	97 f9       	bld	r25, 7
    16e6:	08 95       	ret
    16e8:	e1 e0       	ldi	r30, 0x01	; 1
    16ea:	66 0f       	add	r22, r22
    16ec:	77 1f       	adc	r23, r23
    16ee:	88 1f       	adc	r24, r24
    16f0:	bb 1f       	adc	r27, r27
    16f2:	62 17       	cp	r22, r18
    16f4:	73 07       	cpc	r23, r19
    16f6:	84 07       	cpc	r24, r20
    16f8:	ba 07       	cpc	r27, r26
    16fa:	20 f0       	brcs	.+8      	; 0x1704 <__divsf3_pse+0xae>
    16fc:	62 1b       	sub	r22, r18
    16fe:	73 0b       	sbc	r23, r19
    1700:	84 0b       	sbc	r24, r20
    1702:	ba 0b       	sbc	r27, r26
    1704:	ee 1f       	adc	r30, r30
    1706:	88 f7       	brcc	.-30     	; 0x16ea <__divsf3_pse+0x94>
    1708:	e0 95       	com	r30
    170a:	08 95       	ret

0000170c <__fixsfsi>:
    170c:	0e 94 8d 0b 	call	0x171a	; 0x171a <__fixunssfsi>
    1710:	68 94       	set
    1712:	b1 11       	cpse	r27, r1
    1714:	0c 94 8f 0c 	jmp	0x191e	; 0x191e <__fp_szero>
    1718:	08 95       	ret

0000171a <__fixunssfsi>:
    171a:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <__fp_splitA>
    171e:	88 f0       	brcs	.+34     	; 0x1742 <__fixunssfsi+0x28>
    1720:	9f 57       	subi	r25, 0x7F	; 127
    1722:	98 f0       	brcs	.+38     	; 0x174a <__fixunssfsi+0x30>
    1724:	b9 2f       	mov	r27, r25
    1726:	99 27       	eor	r25, r25
    1728:	b7 51       	subi	r27, 0x17	; 23
    172a:	b0 f0       	brcs	.+44     	; 0x1758 <__fixunssfsi+0x3e>
    172c:	e1 f0       	breq	.+56     	; 0x1766 <__fixunssfsi+0x4c>
    172e:	66 0f       	add	r22, r22
    1730:	77 1f       	adc	r23, r23
    1732:	88 1f       	adc	r24, r24
    1734:	99 1f       	adc	r25, r25
    1736:	1a f0       	brmi	.+6      	; 0x173e <__fixunssfsi+0x24>
    1738:	ba 95       	dec	r27
    173a:	c9 f7       	brne	.-14     	; 0x172e <__fixunssfsi+0x14>
    173c:	14 c0       	rjmp	.+40     	; 0x1766 <__fixunssfsi+0x4c>
    173e:	b1 30       	cpi	r27, 0x01	; 1
    1740:	91 f0       	breq	.+36     	; 0x1766 <__fixunssfsi+0x4c>
    1742:	0e 94 8e 0c 	call	0x191c	; 0x191c <__fp_zero>
    1746:	b1 e0       	ldi	r27, 0x01	; 1
    1748:	08 95       	ret
    174a:	0c 94 8e 0c 	jmp	0x191c	; 0x191c <__fp_zero>
    174e:	67 2f       	mov	r22, r23
    1750:	78 2f       	mov	r23, r24
    1752:	88 27       	eor	r24, r24
    1754:	b8 5f       	subi	r27, 0xF8	; 248
    1756:	39 f0       	breq	.+14     	; 0x1766 <__fixunssfsi+0x4c>
    1758:	b9 3f       	cpi	r27, 0xF9	; 249
    175a:	cc f3       	brlt	.-14     	; 0x174e <__fixunssfsi+0x34>
    175c:	86 95       	lsr	r24
    175e:	77 95       	ror	r23
    1760:	67 95       	ror	r22
    1762:	b3 95       	inc	r27
    1764:	d9 f7       	brne	.-10     	; 0x175c <__fixunssfsi+0x42>
    1766:	3e f4       	brtc	.+14     	; 0x1776 <__fixunssfsi+0x5c>
    1768:	90 95       	com	r25
    176a:	80 95       	com	r24
    176c:	70 95       	com	r23
    176e:	61 95       	neg	r22
    1770:	7f 4f       	sbci	r23, 0xFF	; 255
    1772:	8f 4f       	sbci	r24, 0xFF	; 255
    1774:	9f 4f       	sbci	r25, 0xFF	; 255
    1776:	08 95       	ret

00001778 <__floatunsisf>:
    1778:	e8 94       	clt
    177a:	09 c0       	rjmp	.+18     	; 0x178e <__floatsisf+0x12>

0000177c <__floatsisf>:
    177c:	97 fb       	bst	r25, 7
    177e:	3e f4       	brtc	.+14     	; 0x178e <__floatsisf+0x12>
    1780:	90 95       	com	r25
    1782:	80 95       	com	r24
    1784:	70 95       	com	r23
    1786:	61 95       	neg	r22
    1788:	7f 4f       	sbci	r23, 0xFF	; 255
    178a:	8f 4f       	sbci	r24, 0xFF	; 255
    178c:	9f 4f       	sbci	r25, 0xFF	; 255
    178e:	99 23       	and	r25, r25
    1790:	a9 f0       	breq	.+42     	; 0x17bc <__floatsisf+0x40>
    1792:	f9 2f       	mov	r31, r25
    1794:	96 e9       	ldi	r25, 0x96	; 150
    1796:	bb 27       	eor	r27, r27
    1798:	93 95       	inc	r25
    179a:	f6 95       	lsr	r31
    179c:	87 95       	ror	r24
    179e:	77 95       	ror	r23
    17a0:	67 95       	ror	r22
    17a2:	b7 95       	ror	r27
    17a4:	f1 11       	cpse	r31, r1
    17a6:	f8 cf       	rjmp	.-16     	; 0x1798 <__floatsisf+0x1c>
    17a8:	fa f4       	brpl	.+62     	; 0x17e8 <__floatsisf+0x6c>
    17aa:	bb 0f       	add	r27, r27
    17ac:	11 f4       	brne	.+4      	; 0x17b2 <__floatsisf+0x36>
    17ae:	60 ff       	sbrs	r22, 0
    17b0:	1b c0       	rjmp	.+54     	; 0x17e8 <__floatsisf+0x6c>
    17b2:	6f 5f       	subi	r22, 0xFF	; 255
    17b4:	7f 4f       	sbci	r23, 0xFF	; 255
    17b6:	8f 4f       	sbci	r24, 0xFF	; 255
    17b8:	9f 4f       	sbci	r25, 0xFF	; 255
    17ba:	16 c0       	rjmp	.+44     	; 0x17e8 <__floatsisf+0x6c>
    17bc:	88 23       	and	r24, r24
    17be:	11 f0       	breq	.+4      	; 0x17c4 <__floatsisf+0x48>
    17c0:	96 e9       	ldi	r25, 0x96	; 150
    17c2:	11 c0       	rjmp	.+34     	; 0x17e6 <__floatsisf+0x6a>
    17c4:	77 23       	and	r23, r23
    17c6:	21 f0       	breq	.+8      	; 0x17d0 <__floatsisf+0x54>
    17c8:	9e e8       	ldi	r25, 0x8E	; 142
    17ca:	87 2f       	mov	r24, r23
    17cc:	76 2f       	mov	r23, r22
    17ce:	05 c0       	rjmp	.+10     	; 0x17da <__floatsisf+0x5e>
    17d0:	66 23       	and	r22, r22
    17d2:	71 f0       	breq	.+28     	; 0x17f0 <__floatsisf+0x74>
    17d4:	96 e8       	ldi	r25, 0x86	; 134
    17d6:	86 2f       	mov	r24, r22
    17d8:	70 e0       	ldi	r23, 0x00	; 0
    17da:	60 e0       	ldi	r22, 0x00	; 0
    17dc:	2a f0       	brmi	.+10     	; 0x17e8 <__floatsisf+0x6c>
    17de:	9a 95       	dec	r25
    17e0:	66 0f       	add	r22, r22
    17e2:	77 1f       	adc	r23, r23
    17e4:	88 1f       	adc	r24, r24
    17e6:	da f7       	brpl	.-10     	; 0x17de <__floatsisf+0x62>
    17e8:	88 0f       	add	r24, r24
    17ea:	96 95       	lsr	r25
    17ec:	87 95       	ror	r24
    17ee:	97 f9       	bld	r25, 7
    17f0:	08 95       	ret

000017f2 <__fp_cmp>:
    17f2:	99 0f       	add	r25, r25
    17f4:	00 08       	sbc	r0, r0
    17f6:	55 0f       	add	r21, r21
    17f8:	aa 0b       	sbc	r26, r26
    17fa:	e0 e8       	ldi	r30, 0x80	; 128
    17fc:	fe ef       	ldi	r31, 0xFE	; 254
    17fe:	16 16       	cp	r1, r22
    1800:	17 06       	cpc	r1, r23
    1802:	e8 07       	cpc	r30, r24
    1804:	f9 07       	cpc	r31, r25
    1806:	c0 f0       	brcs	.+48     	; 0x1838 <__fp_cmp+0x46>
    1808:	12 16       	cp	r1, r18
    180a:	13 06       	cpc	r1, r19
    180c:	e4 07       	cpc	r30, r20
    180e:	f5 07       	cpc	r31, r21
    1810:	98 f0       	brcs	.+38     	; 0x1838 <__fp_cmp+0x46>
    1812:	62 1b       	sub	r22, r18
    1814:	73 0b       	sbc	r23, r19
    1816:	84 0b       	sbc	r24, r20
    1818:	95 0b       	sbc	r25, r21
    181a:	39 f4       	brne	.+14     	; 0x182a <__fp_cmp+0x38>
    181c:	0a 26       	eor	r0, r26
    181e:	61 f0       	breq	.+24     	; 0x1838 <__fp_cmp+0x46>
    1820:	23 2b       	or	r18, r19
    1822:	24 2b       	or	r18, r20
    1824:	25 2b       	or	r18, r21
    1826:	21 f4       	brne	.+8      	; 0x1830 <__fp_cmp+0x3e>
    1828:	08 95       	ret
    182a:	0a 26       	eor	r0, r26
    182c:	09 f4       	brne	.+2      	; 0x1830 <__fp_cmp+0x3e>
    182e:	a1 40       	sbci	r26, 0x01	; 1
    1830:	a6 95       	lsr	r26
    1832:	8f ef       	ldi	r24, 0xFF	; 255
    1834:	81 1d       	adc	r24, r1
    1836:	81 1d       	adc	r24, r1
    1838:	08 95       	ret

0000183a <__fp_inf>:
    183a:	97 f9       	bld	r25, 7
    183c:	9f 67       	ori	r25, 0x7F	; 127
    183e:	80 e8       	ldi	r24, 0x80	; 128
    1840:	70 e0       	ldi	r23, 0x00	; 0
    1842:	60 e0       	ldi	r22, 0x00	; 0
    1844:	08 95       	ret

00001846 <__fp_nan>:
    1846:	9f ef       	ldi	r25, 0xFF	; 255
    1848:	80 ec       	ldi	r24, 0xC0	; 192
    184a:	08 95       	ret

0000184c <__fp_powser>:
    184c:	df 93       	push	r29
    184e:	cf 93       	push	r28
    1850:	1f 93       	push	r17
    1852:	0f 93       	push	r16
    1854:	ff 92       	push	r15
    1856:	ef 92       	push	r14
    1858:	df 92       	push	r13
    185a:	7b 01       	movw	r14, r22
    185c:	8c 01       	movw	r16, r24
    185e:	68 94       	set
    1860:	06 c0       	rjmp	.+12     	; 0x186e <__fp_powser+0x22>
    1862:	da 2e       	mov	r13, r26
    1864:	ef 01       	movw	r28, r30
    1866:	0e 94 b5 0c 	call	0x196a	; 0x196a <__mulsf3x>
    186a:	fe 01       	movw	r30, r28
    186c:	e8 94       	clt
    186e:	a5 91       	lpm	r26, Z+
    1870:	25 91       	lpm	r18, Z+
    1872:	35 91       	lpm	r19, Z+
    1874:	45 91       	lpm	r20, Z+
    1876:	55 91       	lpm	r21, Z+
    1878:	a6 f3       	brts	.-24     	; 0x1862 <__fp_powser+0x16>
    187a:	ef 01       	movw	r28, r30
    187c:	0e 94 48 0a 	call	0x1490	; 0x1490 <__addsf3x>
    1880:	fe 01       	movw	r30, r28
    1882:	97 01       	movw	r18, r14
    1884:	a8 01       	movw	r20, r16
    1886:	da 94       	dec	r13
    1888:	69 f7       	brne	.-38     	; 0x1864 <__fp_powser+0x18>
    188a:	df 90       	pop	r13
    188c:	ef 90       	pop	r14
    188e:	ff 90       	pop	r15
    1890:	0f 91       	pop	r16
    1892:	1f 91       	pop	r17
    1894:	cf 91       	pop	r28
    1896:	df 91       	pop	r29
    1898:	08 95       	ret

0000189a <__fp_pscA>:
    189a:	00 24       	eor	r0, r0
    189c:	0a 94       	dec	r0
    189e:	16 16       	cp	r1, r22
    18a0:	17 06       	cpc	r1, r23
    18a2:	18 06       	cpc	r1, r24
    18a4:	09 06       	cpc	r0, r25
    18a6:	08 95       	ret

000018a8 <__fp_pscB>:
    18a8:	00 24       	eor	r0, r0
    18aa:	0a 94       	dec	r0
    18ac:	12 16       	cp	r1, r18
    18ae:	13 06       	cpc	r1, r19
    18b0:	14 06       	cpc	r1, r20
    18b2:	05 06       	cpc	r0, r21
    18b4:	08 95       	ret

000018b6 <__fp_round>:
    18b6:	09 2e       	mov	r0, r25
    18b8:	03 94       	inc	r0
    18ba:	00 0c       	add	r0, r0
    18bc:	11 f4       	brne	.+4      	; 0x18c2 <__fp_round+0xc>
    18be:	88 23       	and	r24, r24
    18c0:	52 f0       	brmi	.+20     	; 0x18d6 <__fp_round+0x20>
    18c2:	bb 0f       	add	r27, r27
    18c4:	40 f4       	brcc	.+16     	; 0x18d6 <__fp_round+0x20>
    18c6:	bf 2b       	or	r27, r31
    18c8:	11 f4       	brne	.+4      	; 0x18ce <__fp_round+0x18>
    18ca:	60 ff       	sbrs	r22, 0
    18cc:	04 c0       	rjmp	.+8      	; 0x18d6 <__fp_round+0x20>
    18ce:	6f 5f       	subi	r22, 0xFF	; 255
    18d0:	7f 4f       	sbci	r23, 0xFF	; 255
    18d2:	8f 4f       	sbci	r24, 0xFF	; 255
    18d4:	9f 4f       	sbci	r25, 0xFF	; 255
    18d6:	08 95       	ret

000018d8 <__fp_split3>:
    18d8:	57 fd       	sbrc	r21, 7
    18da:	90 58       	subi	r25, 0x80	; 128
    18dc:	44 0f       	add	r20, r20
    18de:	55 1f       	adc	r21, r21
    18e0:	59 f0       	breq	.+22     	; 0x18f8 <__fp_splitA+0x10>
    18e2:	5f 3f       	cpi	r21, 0xFF	; 255
    18e4:	71 f0       	breq	.+28     	; 0x1902 <__fp_splitA+0x1a>
    18e6:	47 95       	ror	r20

000018e8 <__fp_splitA>:
    18e8:	88 0f       	add	r24, r24
    18ea:	97 fb       	bst	r25, 7
    18ec:	99 1f       	adc	r25, r25
    18ee:	61 f0       	breq	.+24     	; 0x1908 <__fp_splitA+0x20>
    18f0:	9f 3f       	cpi	r25, 0xFF	; 255
    18f2:	79 f0       	breq	.+30     	; 0x1912 <__fp_splitA+0x2a>
    18f4:	87 95       	ror	r24
    18f6:	08 95       	ret
    18f8:	12 16       	cp	r1, r18
    18fa:	13 06       	cpc	r1, r19
    18fc:	14 06       	cpc	r1, r20
    18fe:	55 1f       	adc	r21, r21
    1900:	f2 cf       	rjmp	.-28     	; 0x18e6 <__fp_split3+0xe>
    1902:	46 95       	lsr	r20
    1904:	f1 df       	rcall	.-30     	; 0x18e8 <__fp_splitA>
    1906:	08 c0       	rjmp	.+16     	; 0x1918 <__fp_splitA+0x30>
    1908:	16 16       	cp	r1, r22
    190a:	17 06       	cpc	r1, r23
    190c:	18 06       	cpc	r1, r24
    190e:	99 1f       	adc	r25, r25
    1910:	f1 cf       	rjmp	.-30     	; 0x18f4 <__fp_splitA+0xc>
    1912:	86 95       	lsr	r24
    1914:	71 05       	cpc	r23, r1
    1916:	61 05       	cpc	r22, r1
    1918:	08 94       	sec
    191a:	08 95       	ret

0000191c <__fp_zero>:
    191c:	e8 94       	clt

0000191e <__fp_szero>:
    191e:	bb 27       	eor	r27, r27
    1920:	66 27       	eor	r22, r22
    1922:	77 27       	eor	r23, r23
    1924:	cb 01       	movw	r24, r22
    1926:	97 f9       	bld	r25, 7
    1928:	08 95       	ret

0000192a <__gesf2>:
    192a:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <__fp_cmp>
    192e:	08 f4       	brcc	.+2      	; 0x1932 <__gesf2+0x8>
    1930:	8f ef       	ldi	r24, 0xFF	; 255
    1932:	08 95       	ret

00001934 <inverse>:
    1934:	9b 01       	movw	r18, r22
    1936:	ac 01       	movw	r20, r24
    1938:	60 e0       	ldi	r22, 0x00	; 0
    193a:	70 e0       	ldi	r23, 0x00	; 0
    193c:	80 e8       	ldi	r24, 0x80	; 128
    193e:	9f e3       	ldi	r25, 0x3F	; 63
    1940:	0c 94 14 0b 	jmp	0x1628	; 0x1628 <__divsf3>

00001944 <__mulsf3>:
    1944:	0e 94 b5 0c 	call	0x196a	; 0x196a <__mulsf3x>
    1948:	0c 94 5b 0c 	jmp	0x18b6	; 0x18b6 <__fp_round>
    194c:	0e 94 4d 0c 	call	0x189a	; 0x189a <__fp_pscA>
    1950:	38 f0       	brcs	.+14     	; 0x1960 <__mulsf3+0x1c>
    1952:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <__fp_pscB>
    1956:	20 f0       	brcs	.+8      	; 0x1960 <__mulsf3+0x1c>
    1958:	95 23       	and	r25, r21
    195a:	11 f0       	breq	.+4      	; 0x1960 <__mulsf3+0x1c>
    195c:	0c 94 1d 0c 	jmp	0x183a	; 0x183a <__fp_inf>
    1960:	0c 94 23 0c 	jmp	0x1846	; 0x1846 <__fp_nan>
    1964:	11 24       	eor	r1, r1
    1966:	0c 94 8f 0c 	jmp	0x191e	; 0x191e <__fp_szero>

0000196a <__mulsf3x>:
    196a:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <__fp_split3>
    196e:	70 f3       	brcs	.-36     	; 0x194c <__mulsf3+0x8>

00001970 <__mulsf3_pse>:
    1970:	95 9f       	mul	r25, r21
    1972:	c1 f3       	breq	.-16     	; 0x1964 <__mulsf3+0x20>
    1974:	95 0f       	add	r25, r21
    1976:	50 e0       	ldi	r21, 0x00	; 0
    1978:	55 1f       	adc	r21, r21
    197a:	62 9f       	mul	r22, r18
    197c:	f0 01       	movw	r30, r0
    197e:	72 9f       	mul	r23, r18
    1980:	bb 27       	eor	r27, r27
    1982:	f0 0d       	add	r31, r0
    1984:	b1 1d       	adc	r27, r1
    1986:	63 9f       	mul	r22, r19
    1988:	aa 27       	eor	r26, r26
    198a:	f0 0d       	add	r31, r0
    198c:	b1 1d       	adc	r27, r1
    198e:	aa 1f       	adc	r26, r26
    1990:	64 9f       	mul	r22, r20
    1992:	66 27       	eor	r22, r22
    1994:	b0 0d       	add	r27, r0
    1996:	a1 1d       	adc	r26, r1
    1998:	66 1f       	adc	r22, r22
    199a:	82 9f       	mul	r24, r18
    199c:	22 27       	eor	r18, r18
    199e:	b0 0d       	add	r27, r0
    19a0:	a1 1d       	adc	r26, r1
    19a2:	62 1f       	adc	r22, r18
    19a4:	73 9f       	mul	r23, r19
    19a6:	b0 0d       	add	r27, r0
    19a8:	a1 1d       	adc	r26, r1
    19aa:	62 1f       	adc	r22, r18
    19ac:	83 9f       	mul	r24, r19
    19ae:	a0 0d       	add	r26, r0
    19b0:	61 1d       	adc	r22, r1
    19b2:	22 1f       	adc	r18, r18
    19b4:	74 9f       	mul	r23, r20
    19b6:	33 27       	eor	r19, r19
    19b8:	a0 0d       	add	r26, r0
    19ba:	61 1d       	adc	r22, r1
    19bc:	23 1f       	adc	r18, r19
    19be:	84 9f       	mul	r24, r20
    19c0:	60 0d       	add	r22, r0
    19c2:	21 1d       	adc	r18, r1
    19c4:	82 2f       	mov	r24, r18
    19c6:	76 2f       	mov	r23, r22
    19c8:	6a 2f       	mov	r22, r26
    19ca:	11 24       	eor	r1, r1
    19cc:	9f 57       	subi	r25, 0x7F	; 127
    19ce:	50 40       	sbci	r21, 0x00	; 0
    19d0:	9a f0       	brmi	.+38     	; 0x19f8 <__mulsf3_pse+0x88>
    19d2:	f1 f0       	breq	.+60     	; 0x1a10 <__mulsf3_pse+0xa0>
    19d4:	88 23       	and	r24, r24
    19d6:	4a f0       	brmi	.+18     	; 0x19ea <__mulsf3_pse+0x7a>
    19d8:	ee 0f       	add	r30, r30
    19da:	ff 1f       	adc	r31, r31
    19dc:	bb 1f       	adc	r27, r27
    19de:	66 1f       	adc	r22, r22
    19e0:	77 1f       	adc	r23, r23
    19e2:	88 1f       	adc	r24, r24
    19e4:	91 50       	subi	r25, 0x01	; 1
    19e6:	50 40       	sbci	r21, 0x00	; 0
    19e8:	a9 f7       	brne	.-22     	; 0x19d4 <__mulsf3_pse+0x64>
    19ea:	9e 3f       	cpi	r25, 0xFE	; 254
    19ec:	51 05       	cpc	r21, r1
    19ee:	80 f0       	brcs	.+32     	; 0x1a10 <__mulsf3_pse+0xa0>
    19f0:	0c 94 1d 0c 	jmp	0x183a	; 0x183a <__fp_inf>
    19f4:	0c 94 8f 0c 	jmp	0x191e	; 0x191e <__fp_szero>
    19f8:	5f 3f       	cpi	r21, 0xFF	; 255
    19fa:	e4 f3       	brlt	.-8      	; 0x19f4 <__mulsf3_pse+0x84>
    19fc:	98 3e       	cpi	r25, 0xE8	; 232
    19fe:	d4 f3       	brlt	.-12     	; 0x19f4 <__mulsf3_pse+0x84>
    1a00:	86 95       	lsr	r24
    1a02:	77 95       	ror	r23
    1a04:	67 95       	ror	r22
    1a06:	b7 95       	ror	r27
    1a08:	f7 95       	ror	r31
    1a0a:	e7 95       	ror	r30
    1a0c:	9f 5f       	subi	r25, 0xFF	; 255
    1a0e:	c1 f7       	brne	.-16     	; 0x1a00 <__mulsf3_pse+0x90>
    1a10:	fe 2b       	or	r31, r30
    1a12:	88 0f       	add	r24, r24
    1a14:	91 1d       	adc	r25, r1
    1a16:	96 95       	lsr	r25
    1a18:	87 95       	ror	r24
    1a1a:	97 f9       	bld	r25, 7
    1a1c:	08 95       	ret

00001a1e <square>:
    1a1e:	9b 01       	movw	r18, r22
    1a20:	ac 01       	movw	r20, r24
    1a22:	0c 94 a2 0c 	jmp	0x1944	; 0x1944 <__mulsf3>

00001a26 <strcpy>:
    1a26:	fb 01       	movw	r30, r22
    1a28:	dc 01       	movw	r26, r24
    1a2a:	01 90       	ld	r0, Z+
    1a2c:	0d 92       	st	X+, r0
    1a2e:	00 20       	and	r0, r0
    1a30:	e1 f7       	brne	.-8      	; 0x1a2a <strcpy+0x4>
    1a32:	08 95       	ret

00001a34 <fdevopen>:
    1a34:	0f 93       	push	r16
    1a36:	1f 93       	push	r17
    1a38:	cf 93       	push	r28
    1a3a:	df 93       	push	r29
    1a3c:	00 97       	sbiw	r24, 0x00	; 0
    1a3e:	31 f4       	brne	.+12     	; 0x1a4c <fdevopen+0x18>
    1a40:	61 15       	cp	r22, r1
    1a42:	71 05       	cpc	r23, r1
    1a44:	19 f4       	brne	.+6      	; 0x1a4c <fdevopen+0x18>
    1a46:	80 e0       	ldi	r24, 0x00	; 0
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	3a c0       	rjmp	.+116    	; 0x1ac0 <fdevopen+0x8c>
    1a4c:	8b 01       	movw	r16, r22
    1a4e:	ec 01       	movw	r28, r24
    1a50:	6e e0       	ldi	r22, 0x0E	; 14
    1a52:	70 e0       	ldi	r23, 0x00	; 0
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <calloc>
    1a5c:	fc 01       	movw	r30, r24
    1a5e:	89 2b       	or	r24, r25
    1a60:	91 f3       	breq	.-28     	; 0x1a46 <fdevopen+0x12>
    1a62:	80 e8       	ldi	r24, 0x80	; 128
    1a64:	83 83       	std	Z+3, r24	; 0x03
    1a66:	01 15       	cp	r16, r1
    1a68:	11 05       	cpc	r17, r1
    1a6a:	71 f0       	breq	.+28     	; 0x1a88 <fdevopen+0x54>
    1a6c:	13 87       	std	Z+11, r17	; 0x0b
    1a6e:	02 87       	std	Z+10, r16	; 0x0a
    1a70:	81 e8       	ldi	r24, 0x81	; 129
    1a72:	83 83       	std	Z+3, r24	; 0x03
    1a74:	80 91 93 04 	lds	r24, 0x0493	; 0x800493 <__iob>
    1a78:	90 91 94 04 	lds	r25, 0x0494	; 0x800494 <__iob+0x1>
    1a7c:	89 2b       	or	r24, r25
    1a7e:	21 f4       	brne	.+8      	; 0x1a88 <fdevopen+0x54>
    1a80:	f0 93 94 04 	sts	0x0494, r31	; 0x800494 <__iob+0x1>
    1a84:	e0 93 93 04 	sts	0x0493, r30	; 0x800493 <__iob>
    1a88:	20 97       	sbiw	r28, 0x00	; 0
    1a8a:	c9 f0       	breq	.+50     	; 0x1abe <fdevopen+0x8a>
    1a8c:	d1 87       	std	Z+9, r29	; 0x09
    1a8e:	c0 87       	std	Z+8, r28	; 0x08
    1a90:	83 81       	ldd	r24, Z+3	; 0x03
    1a92:	82 60       	ori	r24, 0x02	; 2
    1a94:	83 83       	std	Z+3, r24	; 0x03
    1a96:	80 91 95 04 	lds	r24, 0x0495	; 0x800495 <__iob+0x2>
    1a9a:	90 91 96 04 	lds	r25, 0x0496	; 0x800496 <__iob+0x3>
    1a9e:	89 2b       	or	r24, r25
    1aa0:	71 f4       	brne	.+28     	; 0x1abe <fdevopen+0x8a>
    1aa2:	f0 93 96 04 	sts	0x0496, r31	; 0x800496 <__iob+0x3>
    1aa6:	e0 93 95 04 	sts	0x0495, r30	; 0x800495 <__iob+0x2>
    1aaa:	80 91 97 04 	lds	r24, 0x0497	; 0x800497 <__iob+0x4>
    1aae:	90 91 98 04 	lds	r25, 0x0498	; 0x800498 <__iob+0x5>
    1ab2:	89 2b       	or	r24, r25
    1ab4:	21 f4       	brne	.+8      	; 0x1abe <fdevopen+0x8a>
    1ab6:	f0 93 98 04 	sts	0x0498, r31	; 0x800498 <__iob+0x5>
    1aba:	e0 93 97 04 	sts	0x0497, r30	; 0x800497 <__iob+0x4>
    1abe:	cf 01       	movw	r24, r30
    1ac0:	df 91       	pop	r29
    1ac2:	cf 91       	pop	r28
    1ac4:	1f 91       	pop	r17
    1ac6:	0f 91       	pop	r16
    1ac8:	08 95       	ret

00001aca <printf>:
    1aca:	a0 e0       	ldi	r26, 0x00	; 0
    1acc:	b0 e0       	ldi	r27, 0x00	; 0
    1ace:	eb e6       	ldi	r30, 0x6B	; 107
    1ad0:	fd e0       	ldi	r31, 0x0D	; 13
    1ad2:	0c 94 90 11 	jmp	0x2320	; 0x2320 <__prologue_saves__+0x20>
    1ad6:	ae 01       	movw	r20, r28
    1ad8:	4b 5f       	subi	r20, 0xFB	; 251
    1ada:	5f 4f       	sbci	r21, 0xFF	; 255
    1adc:	fa 01       	movw	r30, r20
    1ade:	61 91       	ld	r22, Z+
    1ae0:	71 91       	ld	r23, Z+
    1ae2:	af 01       	movw	r20, r30
    1ae4:	80 91 95 04 	lds	r24, 0x0495	; 0x800495 <__iob+0x2>
    1ae8:	90 91 96 04 	lds	r25, 0x0496	; 0x800496 <__iob+0x3>
    1aec:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <vfprintf>
    1af0:	e2 e0       	ldi	r30, 0x02	; 2
    1af2:	0c 94 ac 11 	jmp	0x2358	; 0x2358 <__epilogue_restores__+0x20>

00001af6 <puts>:
    1af6:	0f 93       	push	r16
    1af8:	1f 93       	push	r17
    1afa:	cf 93       	push	r28
    1afc:	df 93       	push	r29
    1afe:	e0 91 95 04 	lds	r30, 0x0495	; 0x800495 <__iob+0x2>
    1b02:	f0 91 96 04 	lds	r31, 0x0496	; 0x800496 <__iob+0x3>
    1b06:	23 81       	ldd	r18, Z+3	; 0x03
    1b08:	21 ff       	sbrs	r18, 1
    1b0a:	1b c0       	rjmp	.+54     	; 0x1b42 <puts+0x4c>
    1b0c:	8c 01       	movw	r16, r24
    1b0e:	d0 e0       	ldi	r29, 0x00	; 0
    1b10:	c0 e0       	ldi	r28, 0x00	; 0
    1b12:	f8 01       	movw	r30, r16
    1b14:	81 91       	ld	r24, Z+
    1b16:	8f 01       	movw	r16, r30
    1b18:	60 91 95 04 	lds	r22, 0x0495	; 0x800495 <__iob+0x2>
    1b1c:	70 91 96 04 	lds	r23, 0x0496	; 0x800496 <__iob+0x3>
    1b20:	db 01       	movw	r26, r22
    1b22:	18 96       	adiw	r26, 0x08	; 8
    1b24:	ed 91       	ld	r30, X+
    1b26:	fc 91       	ld	r31, X
    1b28:	19 97       	sbiw	r26, 0x09	; 9
    1b2a:	88 23       	and	r24, r24
    1b2c:	31 f0       	breq	.+12     	; 0x1b3a <puts+0x44>
    1b2e:	09 95       	icall
    1b30:	89 2b       	or	r24, r25
    1b32:	79 f3       	breq	.-34     	; 0x1b12 <puts+0x1c>
    1b34:	df ef       	ldi	r29, 0xFF	; 255
    1b36:	cf ef       	ldi	r28, 0xFF	; 255
    1b38:	ec cf       	rjmp	.-40     	; 0x1b12 <puts+0x1c>
    1b3a:	8a e0       	ldi	r24, 0x0A	; 10
    1b3c:	09 95       	icall
    1b3e:	89 2b       	or	r24, r25
    1b40:	19 f0       	breq	.+6      	; 0x1b48 <puts+0x52>
    1b42:	8f ef       	ldi	r24, 0xFF	; 255
    1b44:	9f ef       	ldi	r25, 0xFF	; 255
    1b46:	02 c0       	rjmp	.+4      	; 0x1b4c <puts+0x56>
    1b48:	8d 2f       	mov	r24, r29
    1b4a:	9c 2f       	mov	r25, r28
    1b4c:	df 91       	pop	r29
    1b4e:	cf 91       	pop	r28
    1b50:	1f 91       	pop	r17
    1b52:	0f 91       	pop	r16
    1b54:	08 95       	ret

00001b56 <vfprintf>:
    1b56:	ab e0       	ldi	r26, 0x0B	; 11
    1b58:	b0 e0       	ldi	r27, 0x00	; 0
    1b5a:	e1 eb       	ldi	r30, 0xB1	; 177
    1b5c:	fd e0       	ldi	r31, 0x0D	; 13
    1b5e:	0c 94 80 11 	jmp	0x2300	; 0x2300 <__prologue_saves__>
    1b62:	6c 01       	movw	r12, r24
    1b64:	7b 01       	movw	r14, r22
    1b66:	8a 01       	movw	r16, r20
    1b68:	fc 01       	movw	r30, r24
    1b6a:	17 82       	std	Z+7, r1	; 0x07
    1b6c:	16 82       	std	Z+6, r1	; 0x06
    1b6e:	83 81       	ldd	r24, Z+3	; 0x03
    1b70:	81 ff       	sbrs	r24, 1
    1b72:	cc c1       	rjmp	.+920    	; 0x1f0c <vfprintf+0x3b6>
    1b74:	ce 01       	movw	r24, r28
    1b76:	01 96       	adiw	r24, 0x01	; 1
    1b78:	3c 01       	movw	r6, r24
    1b7a:	f6 01       	movw	r30, r12
    1b7c:	93 81       	ldd	r25, Z+3	; 0x03
    1b7e:	f7 01       	movw	r30, r14
    1b80:	93 fd       	sbrc	r25, 3
    1b82:	85 91       	lpm	r24, Z+
    1b84:	93 ff       	sbrs	r25, 3
    1b86:	81 91       	ld	r24, Z+
    1b88:	7f 01       	movw	r14, r30
    1b8a:	88 23       	and	r24, r24
    1b8c:	09 f4       	brne	.+2      	; 0x1b90 <vfprintf+0x3a>
    1b8e:	ba c1       	rjmp	.+884    	; 0x1f04 <vfprintf+0x3ae>
    1b90:	85 32       	cpi	r24, 0x25	; 37
    1b92:	39 f4       	brne	.+14     	; 0x1ba2 <vfprintf+0x4c>
    1b94:	93 fd       	sbrc	r25, 3
    1b96:	85 91       	lpm	r24, Z+
    1b98:	93 ff       	sbrs	r25, 3
    1b9a:	81 91       	ld	r24, Z+
    1b9c:	7f 01       	movw	r14, r30
    1b9e:	85 32       	cpi	r24, 0x25	; 37
    1ba0:	29 f4       	brne	.+10     	; 0x1bac <vfprintf+0x56>
    1ba2:	b6 01       	movw	r22, r12
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	0e 94 e6 10 	call	0x21cc	; 0x21cc <fputc>
    1baa:	e7 cf       	rjmp	.-50     	; 0x1b7a <vfprintf+0x24>
    1bac:	91 2c       	mov	r9, r1
    1bae:	21 2c       	mov	r2, r1
    1bb0:	31 2c       	mov	r3, r1
    1bb2:	ff e1       	ldi	r31, 0x1F	; 31
    1bb4:	f3 15       	cp	r31, r3
    1bb6:	d8 f0       	brcs	.+54     	; 0x1bee <vfprintf+0x98>
    1bb8:	8b 32       	cpi	r24, 0x2B	; 43
    1bba:	79 f0       	breq	.+30     	; 0x1bda <vfprintf+0x84>
    1bbc:	38 f4       	brcc	.+14     	; 0x1bcc <vfprintf+0x76>
    1bbe:	80 32       	cpi	r24, 0x20	; 32
    1bc0:	79 f0       	breq	.+30     	; 0x1be0 <vfprintf+0x8a>
    1bc2:	83 32       	cpi	r24, 0x23	; 35
    1bc4:	a1 f4       	brne	.+40     	; 0x1bee <vfprintf+0x98>
    1bc6:	23 2d       	mov	r18, r3
    1bc8:	20 61       	ori	r18, 0x10	; 16
    1bca:	1d c0       	rjmp	.+58     	; 0x1c06 <vfprintf+0xb0>
    1bcc:	8d 32       	cpi	r24, 0x2D	; 45
    1bce:	61 f0       	breq	.+24     	; 0x1be8 <vfprintf+0x92>
    1bd0:	80 33       	cpi	r24, 0x30	; 48
    1bd2:	69 f4       	brne	.+26     	; 0x1bee <vfprintf+0x98>
    1bd4:	23 2d       	mov	r18, r3
    1bd6:	21 60       	ori	r18, 0x01	; 1
    1bd8:	16 c0       	rjmp	.+44     	; 0x1c06 <vfprintf+0xb0>
    1bda:	83 2d       	mov	r24, r3
    1bdc:	82 60       	ori	r24, 0x02	; 2
    1bde:	38 2e       	mov	r3, r24
    1be0:	e3 2d       	mov	r30, r3
    1be2:	e4 60       	ori	r30, 0x04	; 4
    1be4:	3e 2e       	mov	r3, r30
    1be6:	2a c0       	rjmp	.+84     	; 0x1c3c <vfprintf+0xe6>
    1be8:	f3 2d       	mov	r31, r3
    1bea:	f8 60       	ori	r31, 0x08	; 8
    1bec:	1d c0       	rjmp	.+58     	; 0x1c28 <vfprintf+0xd2>
    1bee:	37 fc       	sbrc	r3, 7
    1bf0:	2d c0       	rjmp	.+90     	; 0x1c4c <vfprintf+0xf6>
    1bf2:	20 ed       	ldi	r18, 0xD0	; 208
    1bf4:	28 0f       	add	r18, r24
    1bf6:	2a 30       	cpi	r18, 0x0A	; 10
    1bf8:	40 f0       	brcs	.+16     	; 0x1c0a <vfprintf+0xb4>
    1bfa:	8e 32       	cpi	r24, 0x2E	; 46
    1bfc:	b9 f4       	brne	.+46     	; 0x1c2c <vfprintf+0xd6>
    1bfe:	36 fc       	sbrc	r3, 6
    1c00:	81 c1       	rjmp	.+770    	; 0x1f04 <vfprintf+0x3ae>
    1c02:	23 2d       	mov	r18, r3
    1c04:	20 64       	ori	r18, 0x40	; 64
    1c06:	32 2e       	mov	r3, r18
    1c08:	19 c0       	rjmp	.+50     	; 0x1c3c <vfprintf+0xe6>
    1c0a:	36 fe       	sbrs	r3, 6
    1c0c:	06 c0       	rjmp	.+12     	; 0x1c1a <vfprintf+0xc4>
    1c0e:	8a e0       	ldi	r24, 0x0A	; 10
    1c10:	98 9e       	mul	r9, r24
    1c12:	20 0d       	add	r18, r0
    1c14:	11 24       	eor	r1, r1
    1c16:	92 2e       	mov	r9, r18
    1c18:	11 c0       	rjmp	.+34     	; 0x1c3c <vfprintf+0xe6>
    1c1a:	ea e0       	ldi	r30, 0x0A	; 10
    1c1c:	2e 9e       	mul	r2, r30
    1c1e:	20 0d       	add	r18, r0
    1c20:	11 24       	eor	r1, r1
    1c22:	22 2e       	mov	r2, r18
    1c24:	f3 2d       	mov	r31, r3
    1c26:	f0 62       	ori	r31, 0x20	; 32
    1c28:	3f 2e       	mov	r3, r31
    1c2a:	08 c0       	rjmp	.+16     	; 0x1c3c <vfprintf+0xe6>
    1c2c:	8c 36       	cpi	r24, 0x6C	; 108
    1c2e:	21 f4       	brne	.+8      	; 0x1c38 <vfprintf+0xe2>
    1c30:	83 2d       	mov	r24, r3
    1c32:	80 68       	ori	r24, 0x80	; 128
    1c34:	38 2e       	mov	r3, r24
    1c36:	02 c0       	rjmp	.+4      	; 0x1c3c <vfprintf+0xe6>
    1c38:	88 36       	cpi	r24, 0x68	; 104
    1c3a:	41 f4       	brne	.+16     	; 0x1c4c <vfprintf+0xf6>
    1c3c:	f7 01       	movw	r30, r14
    1c3e:	93 fd       	sbrc	r25, 3
    1c40:	85 91       	lpm	r24, Z+
    1c42:	93 ff       	sbrs	r25, 3
    1c44:	81 91       	ld	r24, Z+
    1c46:	7f 01       	movw	r14, r30
    1c48:	81 11       	cpse	r24, r1
    1c4a:	b3 cf       	rjmp	.-154    	; 0x1bb2 <vfprintf+0x5c>
    1c4c:	98 2f       	mov	r25, r24
    1c4e:	9f 7d       	andi	r25, 0xDF	; 223
    1c50:	95 54       	subi	r25, 0x45	; 69
    1c52:	93 30       	cpi	r25, 0x03	; 3
    1c54:	28 f4       	brcc	.+10     	; 0x1c60 <vfprintf+0x10a>
    1c56:	0c 5f       	subi	r16, 0xFC	; 252
    1c58:	1f 4f       	sbci	r17, 0xFF	; 255
    1c5a:	9f e3       	ldi	r25, 0x3F	; 63
    1c5c:	99 83       	std	Y+1, r25	; 0x01
    1c5e:	0d c0       	rjmp	.+26     	; 0x1c7a <vfprintf+0x124>
    1c60:	83 36       	cpi	r24, 0x63	; 99
    1c62:	31 f0       	breq	.+12     	; 0x1c70 <vfprintf+0x11a>
    1c64:	83 37       	cpi	r24, 0x73	; 115
    1c66:	71 f0       	breq	.+28     	; 0x1c84 <vfprintf+0x12e>
    1c68:	83 35       	cpi	r24, 0x53	; 83
    1c6a:	09 f0       	breq	.+2      	; 0x1c6e <vfprintf+0x118>
    1c6c:	59 c0       	rjmp	.+178    	; 0x1d20 <vfprintf+0x1ca>
    1c6e:	21 c0       	rjmp	.+66     	; 0x1cb2 <vfprintf+0x15c>
    1c70:	f8 01       	movw	r30, r16
    1c72:	80 81       	ld	r24, Z
    1c74:	89 83       	std	Y+1, r24	; 0x01
    1c76:	0e 5f       	subi	r16, 0xFE	; 254
    1c78:	1f 4f       	sbci	r17, 0xFF	; 255
    1c7a:	88 24       	eor	r8, r8
    1c7c:	83 94       	inc	r8
    1c7e:	91 2c       	mov	r9, r1
    1c80:	53 01       	movw	r10, r6
    1c82:	13 c0       	rjmp	.+38     	; 0x1caa <vfprintf+0x154>
    1c84:	28 01       	movw	r4, r16
    1c86:	f2 e0       	ldi	r31, 0x02	; 2
    1c88:	4f 0e       	add	r4, r31
    1c8a:	51 1c       	adc	r5, r1
    1c8c:	f8 01       	movw	r30, r16
    1c8e:	a0 80       	ld	r10, Z
    1c90:	b1 80       	ldd	r11, Z+1	; 0x01
    1c92:	36 fe       	sbrs	r3, 6
    1c94:	03 c0       	rjmp	.+6      	; 0x1c9c <vfprintf+0x146>
    1c96:	69 2d       	mov	r22, r9
    1c98:	70 e0       	ldi	r23, 0x00	; 0
    1c9a:	02 c0       	rjmp	.+4      	; 0x1ca0 <vfprintf+0x14a>
    1c9c:	6f ef       	ldi	r22, 0xFF	; 255
    1c9e:	7f ef       	ldi	r23, 0xFF	; 255
    1ca0:	c5 01       	movw	r24, r10
    1ca2:	0e 94 db 10 	call	0x21b6	; 0x21b6 <strnlen>
    1ca6:	4c 01       	movw	r8, r24
    1ca8:	82 01       	movw	r16, r4
    1caa:	f3 2d       	mov	r31, r3
    1cac:	ff 77       	andi	r31, 0x7F	; 127
    1cae:	3f 2e       	mov	r3, r31
    1cb0:	16 c0       	rjmp	.+44     	; 0x1cde <vfprintf+0x188>
    1cb2:	28 01       	movw	r4, r16
    1cb4:	22 e0       	ldi	r18, 0x02	; 2
    1cb6:	42 0e       	add	r4, r18
    1cb8:	51 1c       	adc	r5, r1
    1cba:	f8 01       	movw	r30, r16
    1cbc:	a0 80       	ld	r10, Z
    1cbe:	b1 80       	ldd	r11, Z+1	; 0x01
    1cc0:	36 fe       	sbrs	r3, 6
    1cc2:	03 c0       	rjmp	.+6      	; 0x1cca <vfprintf+0x174>
    1cc4:	69 2d       	mov	r22, r9
    1cc6:	70 e0       	ldi	r23, 0x00	; 0
    1cc8:	02 c0       	rjmp	.+4      	; 0x1cce <vfprintf+0x178>
    1cca:	6f ef       	ldi	r22, 0xFF	; 255
    1ccc:	7f ef       	ldi	r23, 0xFF	; 255
    1cce:	c5 01       	movw	r24, r10
    1cd0:	0e 94 c9 10 	call	0x2192	; 0x2192 <strnlen_P>
    1cd4:	4c 01       	movw	r8, r24
    1cd6:	f3 2d       	mov	r31, r3
    1cd8:	f0 68       	ori	r31, 0x80	; 128
    1cda:	3f 2e       	mov	r3, r31
    1cdc:	82 01       	movw	r16, r4
    1cde:	33 fc       	sbrc	r3, 3
    1ce0:	1b c0       	rjmp	.+54     	; 0x1d18 <vfprintf+0x1c2>
    1ce2:	82 2d       	mov	r24, r2
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	88 16       	cp	r8, r24
    1ce8:	99 06       	cpc	r9, r25
    1cea:	b0 f4       	brcc	.+44     	; 0x1d18 <vfprintf+0x1c2>
    1cec:	b6 01       	movw	r22, r12
    1cee:	80 e2       	ldi	r24, 0x20	; 32
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	0e 94 e6 10 	call	0x21cc	; 0x21cc <fputc>
    1cf6:	2a 94       	dec	r2
    1cf8:	f4 cf       	rjmp	.-24     	; 0x1ce2 <vfprintf+0x18c>
    1cfa:	f5 01       	movw	r30, r10
    1cfc:	37 fc       	sbrc	r3, 7
    1cfe:	85 91       	lpm	r24, Z+
    1d00:	37 fe       	sbrs	r3, 7
    1d02:	81 91       	ld	r24, Z+
    1d04:	5f 01       	movw	r10, r30
    1d06:	b6 01       	movw	r22, r12
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	0e 94 e6 10 	call	0x21cc	; 0x21cc <fputc>
    1d0e:	21 10       	cpse	r2, r1
    1d10:	2a 94       	dec	r2
    1d12:	21 e0       	ldi	r18, 0x01	; 1
    1d14:	82 1a       	sub	r8, r18
    1d16:	91 08       	sbc	r9, r1
    1d18:	81 14       	cp	r8, r1
    1d1a:	91 04       	cpc	r9, r1
    1d1c:	71 f7       	brne	.-36     	; 0x1cfa <vfprintf+0x1a4>
    1d1e:	e8 c0       	rjmp	.+464    	; 0x1ef0 <vfprintf+0x39a>
    1d20:	84 36       	cpi	r24, 0x64	; 100
    1d22:	11 f0       	breq	.+4      	; 0x1d28 <vfprintf+0x1d2>
    1d24:	89 36       	cpi	r24, 0x69	; 105
    1d26:	41 f5       	brne	.+80     	; 0x1d78 <vfprintf+0x222>
    1d28:	f8 01       	movw	r30, r16
    1d2a:	37 fe       	sbrs	r3, 7
    1d2c:	07 c0       	rjmp	.+14     	; 0x1d3c <vfprintf+0x1e6>
    1d2e:	60 81       	ld	r22, Z
    1d30:	71 81       	ldd	r23, Z+1	; 0x01
    1d32:	82 81       	ldd	r24, Z+2	; 0x02
    1d34:	93 81       	ldd	r25, Z+3	; 0x03
    1d36:	0c 5f       	subi	r16, 0xFC	; 252
    1d38:	1f 4f       	sbci	r17, 0xFF	; 255
    1d3a:	08 c0       	rjmp	.+16     	; 0x1d4c <vfprintf+0x1f6>
    1d3c:	60 81       	ld	r22, Z
    1d3e:	71 81       	ldd	r23, Z+1	; 0x01
    1d40:	07 2e       	mov	r0, r23
    1d42:	00 0c       	add	r0, r0
    1d44:	88 0b       	sbc	r24, r24
    1d46:	99 0b       	sbc	r25, r25
    1d48:	0e 5f       	subi	r16, 0xFE	; 254
    1d4a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d4c:	f3 2d       	mov	r31, r3
    1d4e:	ff 76       	andi	r31, 0x6F	; 111
    1d50:	3f 2e       	mov	r3, r31
    1d52:	97 ff       	sbrs	r25, 7
    1d54:	09 c0       	rjmp	.+18     	; 0x1d68 <vfprintf+0x212>
    1d56:	90 95       	com	r25
    1d58:	80 95       	com	r24
    1d5a:	70 95       	com	r23
    1d5c:	61 95       	neg	r22
    1d5e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d60:	8f 4f       	sbci	r24, 0xFF	; 255
    1d62:	9f 4f       	sbci	r25, 0xFF	; 255
    1d64:	f0 68       	ori	r31, 0x80	; 128
    1d66:	3f 2e       	mov	r3, r31
    1d68:	2a e0       	ldi	r18, 0x0A	; 10
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	a3 01       	movw	r20, r6
    1d6e:	0e 94 22 11 	call	0x2244	; 0x2244 <__ultoa_invert>
    1d72:	88 2e       	mov	r8, r24
    1d74:	86 18       	sub	r8, r6
    1d76:	45 c0       	rjmp	.+138    	; 0x1e02 <vfprintf+0x2ac>
    1d78:	85 37       	cpi	r24, 0x75	; 117
    1d7a:	31 f4       	brne	.+12     	; 0x1d88 <vfprintf+0x232>
    1d7c:	23 2d       	mov	r18, r3
    1d7e:	2f 7e       	andi	r18, 0xEF	; 239
    1d80:	b2 2e       	mov	r11, r18
    1d82:	2a e0       	ldi	r18, 0x0A	; 10
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	25 c0       	rjmp	.+74     	; 0x1dd2 <vfprintf+0x27c>
    1d88:	93 2d       	mov	r25, r3
    1d8a:	99 7f       	andi	r25, 0xF9	; 249
    1d8c:	b9 2e       	mov	r11, r25
    1d8e:	8f 36       	cpi	r24, 0x6F	; 111
    1d90:	c1 f0       	breq	.+48     	; 0x1dc2 <vfprintf+0x26c>
    1d92:	18 f4       	brcc	.+6      	; 0x1d9a <vfprintf+0x244>
    1d94:	88 35       	cpi	r24, 0x58	; 88
    1d96:	79 f0       	breq	.+30     	; 0x1db6 <vfprintf+0x260>
    1d98:	b5 c0       	rjmp	.+362    	; 0x1f04 <vfprintf+0x3ae>
    1d9a:	80 37       	cpi	r24, 0x70	; 112
    1d9c:	19 f0       	breq	.+6      	; 0x1da4 <vfprintf+0x24e>
    1d9e:	88 37       	cpi	r24, 0x78	; 120
    1da0:	21 f0       	breq	.+8      	; 0x1daa <vfprintf+0x254>
    1da2:	b0 c0       	rjmp	.+352    	; 0x1f04 <vfprintf+0x3ae>
    1da4:	e9 2f       	mov	r30, r25
    1da6:	e0 61       	ori	r30, 0x10	; 16
    1da8:	be 2e       	mov	r11, r30
    1daa:	b4 fe       	sbrs	r11, 4
    1dac:	0d c0       	rjmp	.+26     	; 0x1dc8 <vfprintf+0x272>
    1dae:	fb 2d       	mov	r31, r11
    1db0:	f4 60       	ori	r31, 0x04	; 4
    1db2:	bf 2e       	mov	r11, r31
    1db4:	09 c0       	rjmp	.+18     	; 0x1dc8 <vfprintf+0x272>
    1db6:	34 fe       	sbrs	r3, 4
    1db8:	0a c0       	rjmp	.+20     	; 0x1dce <vfprintf+0x278>
    1dba:	29 2f       	mov	r18, r25
    1dbc:	26 60       	ori	r18, 0x06	; 6
    1dbe:	b2 2e       	mov	r11, r18
    1dc0:	06 c0       	rjmp	.+12     	; 0x1dce <vfprintf+0x278>
    1dc2:	28 e0       	ldi	r18, 0x08	; 8
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	05 c0       	rjmp	.+10     	; 0x1dd2 <vfprintf+0x27c>
    1dc8:	20 e1       	ldi	r18, 0x10	; 16
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	02 c0       	rjmp	.+4      	; 0x1dd2 <vfprintf+0x27c>
    1dce:	20 e1       	ldi	r18, 0x10	; 16
    1dd0:	32 e0       	ldi	r19, 0x02	; 2
    1dd2:	f8 01       	movw	r30, r16
    1dd4:	b7 fe       	sbrs	r11, 7
    1dd6:	07 c0       	rjmp	.+14     	; 0x1de6 <vfprintf+0x290>
    1dd8:	60 81       	ld	r22, Z
    1dda:	71 81       	ldd	r23, Z+1	; 0x01
    1ddc:	82 81       	ldd	r24, Z+2	; 0x02
    1dde:	93 81       	ldd	r25, Z+3	; 0x03
    1de0:	0c 5f       	subi	r16, 0xFC	; 252
    1de2:	1f 4f       	sbci	r17, 0xFF	; 255
    1de4:	06 c0       	rjmp	.+12     	; 0x1df2 <vfprintf+0x29c>
    1de6:	60 81       	ld	r22, Z
    1de8:	71 81       	ldd	r23, Z+1	; 0x01
    1dea:	80 e0       	ldi	r24, 0x00	; 0
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	0e 5f       	subi	r16, 0xFE	; 254
    1df0:	1f 4f       	sbci	r17, 0xFF	; 255
    1df2:	a3 01       	movw	r20, r6
    1df4:	0e 94 22 11 	call	0x2244	; 0x2244 <__ultoa_invert>
    1df8:	88 2e       	mov	r8, r24
    1dfa:	86 18       	sub	r8, r6
    1dfc:	fb 2d       	mov	r31, r11
    1dfe:	ff 77       	andi	r31, 0x7F	; 127
    1e00:	3f 2e       	mov	r3, r31
    1e02:	36 fe       	sbrs	r3, 6
    1e04:	0d c0       	rjmp	.+26     	; 0x1e20 <vfprintf+0x2ca>
    1e06:	23 2d       	mov	r18, r3
    1e08:	2e 7f       	andi	r18, 0xFE	; 254
    1e0a:	a2 2e       	mov	r10, r18
    1e0c:	89 14       	cp	r8, r9
    1e0e:	58 f4       	brcc	.+22     	; 0x1e26 <vfprintf+0x2d0>
    1e10:	34 fe       	sbrs	r3, 4
    1e12:	0b c0       	rjmp	.+22     	; 0x1e2a <vfprintf+0x2d4>
    1e14:	32 fc       	sbrc	r3, 2
    1e16:	09 c0       	rjmp	.+18     	; 0x1e2a <vfprintf+0x2d4>
    1e18:	83 2d       	mov	r24, r3
    1e1a:	8e 7e       	andi	r24, 0xEE	; 238
    1e1c:	a8 2e       	mov	r10, r24
    1e1e:	05 c0       	rjmp	.+10     	; 0x1e2a <vfprintf+0x2d4>
    1e20:	b8 2c       	mov	r11, r8
    1e22:	a3 2c       	mov	r10, r3
    1e24:	03 c0       	rjmp	.+6      	; 0x1e2c <vfprintf+0x2d6>
    1e26:	b8 2c       	mov	r11, r8
    1e28:	01 c0       	rjmp	.+2      	; 0x1e2c <vfprintf+0x2d6>
    1e2a:	b9 2c       	mov	r11, r9
    1e2c:	a4 fe       	sbrs	r10, 4
    1e2e:	0f c0       	rjmp	.+30     	; 0x1e4e <vfprintf+0x2f8>
    1e30:	fe 01       	movw	r30, r28
    1e32:	e8 0d       	add	r30, r8
    1e34:	f1 1d       	adc	r31, r1
    1e36:	80 81       	ld	r24, Z
    1e38:	80 33       	cpi	r24, 0x30	; 48
    1e3a:	21 f4       	brne	.+8      	; 0x1e44 <vfprintf+0x2ee>
    1e3c:	9a 2d       	mov	r25, r10
    1e3e:	99 7e       	andi	r25, 0xE9	; 233
    1e40:	a9 2e       	mov	r10, r25
    1e42:	09 c0       	rjmp	.+18     	; 0x1e56 <vfprintf+0x300>
    1e44:	a2 fe       	sbrs	r10, 2
    1e46:	06 c0       	rjmp	.+12     	; 0x1e54 <vfprintf+0x2fe>
    1e48:	b3 94       	inc	r11
    1e4a:	b3 94       	inc	r11
    1e4c:	04 c0       	rjmp	.+8      	; 0x1e56 <vfprintf+0x300>
    1e4e:	8a 2d       	mov	r24, r10
    1e50:	86 78       	andi	r24, 0x86	; 134
    1e52:	09 f0       	breq	.+2      	; 0x1e56 <vfprintf+0x300>
    1e54:	b3 94       	inc	r11
    1e56:	a3 fc       	sbrc	r10, 3
    1e58:	11 c0       	rjmp	.+34     	; 0x1e7c <vfprintf+0x326>
    1e5a:	a0 fe       	sbrs	r10, 0
    1e5c:	06 c0       	rjmp	.+12     	; 0x1e6a <vfprintf+0x314>
    1e5e:	b2 14       	cp	r11, r2
    1e60:	88 f4       	brcc	.+34     	; 0x1e84 <vfprintf+0x32e>
    1e62:	28 0c       	add	r2, r8
    1e64:	92 2c       	mov	r9, r2
    1e66:	9b 18       	sub	r9, r11
    1e68:	0e c0       	rjmp	.+28     	; 0x1e86 <vfprintf+0x330>
    1e6a:	b2 14       	cp	r11, r2
    1e6c:	60 f4       	brcc	.+24     	; 0x1e86 <vfprintf+0x330>
    1e6e:	b6 01       	movw	r22, r12
    1e70:	80 e2       	ldi	r24, 0x20	; 32
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	0e 94 e6 10 	call	0x21cc	; 0x21cc <fputc>
    1e78:	b3 94       	inc	r11
    1e7a:	f7 cf       	rjmp	.-18     	; 0x1e6a <vfprintf+0x314>
    1e7c:	b2 14       	cp	r11, r2
    1e7e:	18 f4       	brcc	.+6      	; 0x1e86 <vfprintf+0x330>
    1e80:	2b 18       	sub	r2, r11
    1e82:	02 c0       	rjmp	.+4      	; 0x1e88 <vfprintf+0x332>
    1e84:	98 2c       	mov	r9, r8
    1e86:	21 2c       	mov	r2, r1
    1e88:	a4 fe       	sbrs	r10, 4
    1e8a:	10 c0       	rjmp	.+32     	; 0x1eac <vfprintf+0x356>
    1e8c:	b6 01       	movw	r22, r12
    1e8e:	80 e3       	ldi	r24, 0x30	; 48
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	0e 94 e6 10 	call	0x21cc	; 0x21cc <fputc>
    1e96:	a2 fe       	sbrs	r10, 2
    1e98:	17 c0       	rjmp	.+46     	; 0x1ec8 <vfprintf+0x372>
    1e9a:	a1 fc       	sbrc	r10, 1
    1e9c:	03 c0       	rjmp	.+6      	; 0x1ea4 <vfprintf+0x34e>
    1e9e:	88 e7       	ldi	r24, 0x78	; 120
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	02 c0       	rjmp	.+4      	; 0x1ea8 <vfprintf+0x352>
    1ea4:	88 e5       	ldi	r24, 0x58	; 88
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	b6 01       	movw	r22, r12
    1eaa:	0c c0       	rjmp	.+24     	; 0x1ec4 <vfprintf+0x36e>
    1eac:	8a 2d       	mov	r24, r10
    1eae:	86 78       	andi	r24, 0x86	; 134
    1eb0:	59 f0       	breq	.+22     	; 0x1ec8 <vfprintf+0x372>
    1eb2:	a1 fe       	sbrs	r10, 1
    1eb4:	02 c0       	rjmp	.+4      	; 0x1eba <vfprintf+0x364>
    1eb6:	8b e2       	ldi	r24, 0x2B	; 43
    1eb8:	01 c0       	rjmp	.+2      	; 0x1ebc <vfprintf+0x366>
    1eba:	80 e2       	ldi	r24, 0x20	; 32
    1ebc:	a7 fc       	sbrc	r10, 7
    1ebe:	8d e2       	ldi	r24, 0x2D	; 45
    1ec0:	b6 01       	movw	r22, r12
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	0e 94 e6 10 	call	0x21cc	; 0x21cc <fputc>
    1ec8:	89 14       	cp	r8, r9
    1eca:	38 f4       	brcc	.+14     	; 0x1eda <vfprintf+0x384>
    1ecc:	b6 01       	movw	r22, r12
    1ece:	80 e3       	ldi	r24, 0x30	; 48
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	0e 94 e6 10 	call	0x21cc	; 0x21cc <fputc>
    1ed6:	9a 94       	dec	r9
    1ed8:	f7 cf       	rjmp	.-18     	; 0x1ec8 <vfprintf+0x372>
    1eda:	8a 94       	dec	r8
    1edc:	f3 01       	movw	r30, r6
    1ede:	e8 0d       	add	r30, r8
    1ee0:	f1 1d       	adc	r31, r1
    1ee2:	80 81       	ld	r24, Z
    1ee4:	b6 01       	movw	r22, r12
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	0e 94 e6 10 	call	0x21cc	; 0x21cc <fputc>
    1eec:	81 10       	cpse	r8, r1
    1eee:	f5 cf       	rjmp	.-22     	; 0x1eda <vfprintf+0x384>
    1ef0:	22 20       	and	r2, r2
    1ef2:	09 f4       	brne	.+2      	; 0x1ef6 <vfprintf+0x3a0>
    1ef4:	42 ce       	rjmp	.-892    	; 0x1b7a <vfprintf+0x24>
    1ef6:	b6 01       	movw	r22, r12
    1ef8:	80 e2       	ldi	r24, 0x20	; 32
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	0e 94 e6 10 	call	0x21cc	; 0x21cc <fputc>
    1f00:	2a 94       	dec	r2
    1f02:	f6 cf       	rjmp	.-20     	; 0x1ef0 <vfprintf+0x39a>
    1f04:	f6 01       	movw	r30, r12
    1f06:	86 81       	ldd	r24, Z+6	; 0x06
    1f08:	97 81       	ldd	r25, Z+7	; 0x07
    1f0a:	02 c0       	rjmp	.+4      	; 0x1f10 <vfprintf+0x3ba>
    1f0c:	8f ef       	ldi	r24, 0xFF	; 255
    1f0e:	9f ef       	ldi	r25, 0xFF	; 255
    1f10:	2b 96       	adiw	r28, 0x0b	; 11
    1f12:	e2 e1       	ldi	r30, 0x12	; 18
    1f14:	0c 94 9c 11 	jmp	0x2338	; 0x2338 <__epilogue_restores__>

00001f18 <calloc>:
    1f18:	0f 93       	push	r16
    1f1a:	1f 93       	push	r17
    1f1c:	cf 93       	push	r28
    1f1e:	df 93       	push	r29
    1f20:	86 9f       	mul	r24, r22
    1f22:	80 01       	movw	r16, r0
    1f24:	87 9f       	mul	r24, r23
    1f26:	10 0d       	add	r17, r0
    1f28:	96 9f       	mul	r25, r22
    1f2a:	10 0d       	add	r17, r0
    1f2c:	11 24       	eor	r1, r1
    1f2e:	c8 01       	movw	r24, r16
    1f30:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <malloc>
    1f34:	ec 01       	movw	r28, r24
    1f36:	00 97       	sbiw	r24, 0x00	; 0
    1f38:	29 f0       	breq	.+10     	; 0x1f44 <calloc+0x2c>
    1f3a:	a8 01       	movw	r20, r16
    1f3c:	60 e0       	ldi	r22, 0x00	; 0
    1f3e:	70 e0       	ldi	r23, 0x00	; 0
    1f40:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <memset>
    1f44:	ce 01       	movw	r24, r28
    1f46:	df 91       	pop	r29
    1f48:	cf 91       	pop	r28
    1f4a:	1f 91       	pop	r17
    1f4c:	0f 91       	pop	r16
    1f4e:	08 95       	ret

00001f50 <malloc>:
    1f50:	0f 93       	push	r16
    1f52:	1f 93       	push	r17
    1f54:	cf 93       	push	r28
    1f56:	df 93       	push	r29
    1f58:	82 30       	cpi	r24, 0x02	; 2
    1f5a:	91 05       	cpc	r25, r1
    1f5c:	10 f4       	brcc	.+4      	; 0x1f62 <malloc+0x12>
    1f5e:	82 e0       	ldi	r24, 0x02	; 2
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	e0 91 9b 04 	lds	r30, 0x049B	; 0x80049b <__flp>
    1f66:	f0 91 9c 04 	lds	r31, 0x049C	; 0x80049c <__flp+0x1>
    1f6a:	20 e0       	ldi	r18, 0x00	; 0
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	a0 e0       	ldi	r26, 0x00	; 0
    1f70:	b0 e0       	ldi	r27, 0x00	; 0
    1f72:	30 97       	sbiw	r30, 0x00	; 0
    1f74:	19 f1       	breq	.+70     	; 0x1fbc <malloc+0x6c>
    1f76:	40 81       	ld	r20, Z
    1f78:	51 81       	ldd	r21, Z+1	; 0x01
    1f7a:	02 81       	ldd	r16, Z+2	; 0x02
    1f7c:	13 81       	ldd	r17, Z+3	; 0x03
    1f7e:	48 17       	cp	r20, r24
    1f80:	59 07       	cpc	r21, r25
    1f82:	c8 f0       	brcs	.+50     	; 0x1fb6 <malloc+0x66>
    1f84:	84 17       	cp	r24, r20
    1f86:	95 07       	cpc	r25, r21
    1f88:	69 f4       	brne	.+26     	; 0x1fa4 <malloc+0x54>
    1f8a:	10 97       	sbiw	r26, 0x00	; 0
    1f8c:	31 f0       	breq	.+12     	; 0x1f9a <malloc+0x4a>
    1f8e:	12 96       	adiw	r26, 0x02	; 2
    1f90:	0c 93       	st	X, r16
    1f92:	12 97       	sbiw	r26, 0x02	; 2
    1f94:	13 96       	adiw	r26, 0x03	; 3
    1f96:	1c 93       	st	X, r17
    1f98:	27 c0       	rjmp	.+78     	; 0x1fe8 <malloc+0x98>
    1f9a:	00 93 9b 04 	sts	0x049B, r16	; 0x80049b <__flp>
    1f9e:	10 93 9c 04 	sts	0x049C, r17	; 0x80049c <__flp+0x1>
    1fa2:	22 c0       	rjmp	.+68     	; 0x1fe8 <malloc+0x98>
    1fa4:	21 15       	cp	r18, r1
    1fa6:	31 05       	cpc	r19, r1
    1fa8:	19 f0       	breq	.+6      	; 0x1fb0 <malloc+0x60>
    1faa:	42 17       	cp	r20, r18
    1fac:	53 07       	cpc	r21, r19
    1fae:	18 f4       	brcc	.+6      	; 0x1fb6 <malloc+0x66>
    1fb0:	9a 01       	movw	r18, r20
    1fb2:	bd 01       	movw	r22, r26
    1fb4:	ef 01       	movw	r28, r30
    1fb6:	df 01       	movw	r26, r30
    1fb8:	f8 01       	movw	r30, r16
    1fba:	db cf       	rjmp	.-74     	; 0x1f72 <malloc+0x22>
    1fbc:	21 15       	cp	r18, r1
    1fbe:	31 05       	cpc	r19, r1
    1fc0:	f9 f0       	breq	.+62     	; 0x2000 <malloc+0xb0>
    1fc2:	28 1b       	sub	r18, r24
    1fc4:	39 0b       	sbc	r19, r25
    1fc6:	24 30       	cpi	r18, 0x04	; 4
    1fc8:	31 05       	cpc	r19, r1
    1fca:	80 f4       	brcc	.+32     	; 0x1fec <malloc+0x9c>
    1fcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fce:	9b 81       	ldd	r25, Y+3	; 0x03
    1fd0:	61 15       	cp	r22, r1
    1fd2:	71 05       	cpc	r23, r1
    1fd4:	21 f0       	breq	.+8      	; 0x1fde <malloc+0x8e>
    1fd6:	fb 01       	movw	r30, r22
    1fd8:	93 83       	std	Z+3, r25	; 0x03
    1fda:	82 83       	std	Z+2, r24	; 0x02
    1fdc:	04 c0       	rjmp	.+8      	; 0x1fe6 <malloc+0x96>
    1fde:	90 93 9c 04 	sts	0x049C, r25	; 0x80049c <__flp+0x1>
    1fe2:	80 93 9b 04 	sts	0x049B, r24	; 0x80049b <__flp>
    1fe6:	fe 01       	movw	r30, r28
    1fe8:	32 96       	adiw	r30, 0x02	; 2
    1fea:	44 c0       	rjmp	.+136    	; 0x2074 <malloc+0x124>
    1fec:	fe 01       	movw	r30, r28
    1fee:	e2 0f       	add	r30, r18
    1ff0:	f3 1f       	adc	r31, r19
    1ff2:	81 93       	st	Z+, r24
    1ff4:	91 93       	st	Z+, r25
    1ff6:	22 50       	subi	r18, 0x02	; 2
    1ff8:	31 09       	sbc	r19, r1
    1ffa:	39 83       	std	Y+1, r19	; 0x01
    1ffc:	28 83       	st	Y, r18
    1ffe:	3a c0       	rjmp	.+116    	; 0x2074 <malloc+0x124>
    2000:	20 91 99 04 	lds	r18, 0x0499	; 0x800499 <__brkval>
    2004:	30 91 9a 04 	lds	r19, 0x049A	; 0x80049a <__brkval+0x1>
    2008:	23 2b       	or	r18, r19
    200a:	41 f4       	brne	.+16     	; 0x201c <malloc+0xcc>
    200c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    2010:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    2014:	30 93 9a 04 	sts	0x049A, r19	; 0x80049a <__brkval+0x1>
    2018:	20 93 99 04 	sts	0x0499, r18	; 0x800499 <__brkval>
    201c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    2020:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    2024:	21 15       	cp	r18, r1
    2026:	31 05       	cpc	r19, r1
    2028:	41 f4       	brne	.+16     	; 0x203a <malloc+0xea>
    202a:	2d b7       	in	r18, 0x3d	; 61
    202c:	3e b7       	in	r19, 0x3e	; 62
    202e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2032:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    2036:	24 1b       	sub	r18, r20
    2038:	35 0b       	sbc	r19, r21
    203a:	e0 91 99 04 	lds	r30, 0x0499	; 0x800499 <__brkval>
    203e:	f0 91 9a 04 	lds	r31, 0x049A	; 0x80049a <__brkval+0x1>
    2042:	e2 17       	cp	r30, r18
    2044:	f3 07       	cpc	r31, r19
    2046:	a0 f4       	brcc	.+40     	; 0x2070 <malloc+0x120>
    2048:	2e 1b       	sub	r18, r30
    204a:	3f 0b       	sbc	r19, r31
    204c:	28 17       	cp	r18, r24
    204e:	39 07       	cpc	r19, r25
    2050:	78 f0       	brcs	.+30     	; 0x2070 <malloc+0x120>
    2052:	ac 01       	movw	r20, r24
    2054:	4e 5f       	subi	r20, 0xFE	; 254
    2056:	5f 4f       	sbci	r21, 0xFF	; 255
    2058:	24 17       	cp	r18, r20
    205a:	35 07       	cpc	r19, r21
    205c:	48 f0       	brcs	.+18     	; 0x2070 <malloc+0x120>
    205e:	4e 0f       	add	r20, r30
    2060:	5f 1f       	adc	r21, r31
    2062:	50 93 9a 04 	sts	0x049A, r21	; 0x80049a <__brkval+0x1>
    2066:	40 93 99 04 	sts	0x0499, r20	; 0x800499 <__brkval>
    206a:	81 93       	st	Z+, r24
    206c:	91 93       	st	Z+, r25
    206e:	02 c0       	rjmp	.+4      	; 0x2074 <malloc+0x124>
    2070:	e0 e0       	ldi	r30, 0x00	; 0
    2072:	f0 e0       	ldi	r31, 0x00	; 0
    2074:	cf 01       	movw	r24, r30
    2076:	df 91       	pop	r29
    2078:	cf 91       	pop	r28
    207a:	1f 91       	pop	r17
    207c:	0f 91       	pop	r16
    207e:	08 95       	ret

00002080 <free>:
    2080:	cf 93       	push	r28
    2082:	df 93       	push	r29
    2084:	00 97       	sbiw	r24, 0x00	; 0
    2086:	09 f4       	brne	.+2      	; 0x208a <free+0xa>
    2088:	81 c0       	rjmp	.+258    	; 0x218c <free+0x10c>
    208a:	fc 01       	movw	r30, r24
    208c:	32 97       	sbiw	r30, 0x02	; 2
    208e:	13 82       	std	Z+3, r1	; 0x03
    2090:	12 82       	std	Z+2, r1	; 0x02
    2092:	a0 91 9b 04 	lds	r26, 0x049B	; 0x80049b <__flp>
    2096:	b0 91 9c 04 	lds	r27, 0x049C	; 0x80049c <__flp+0x1>
    209a:	10 97       	sbiw	r26, 0x00	; 0
    209c:	81 f4       	brne	.+32     	; 0x20be <free+0x3e>
    209e:	20 81       	ld	r18, Z
    20a0:	31 81       	ldd	r19, Z+1	; 0x01
    20a2:	82 0f       	add	r24, r18
    20a4:	93 1f       	adc	r25, r19
    20a6:	20 91 99 04 	lds	r18, 0x0499	; 0x800499 <__brkval>
    20aa:	30 91 9a 04 	lds	r19, 0x049A	; 0x80049a <__brkval+0x1>
    20ae:	28 17       	cp	r18, r24
    20b0:	39 07       	cpc	r19, r25
    20b2:	51 f5       	brne	.+84     	; 0x2108 <free+0x88>
    20b4:	f0 93 9a 04 	sts	0x049A, r31	; 0x80049a <__brkval+0x1>
    20b8:	e0 93 99 04 	sts	0x0499, r30	; 0x800499 <__brkval>
    20bc:	67 c0       	rjmp	.+206    	; 0x218c <free+0x10c>
    20be:	ed 01       	movw	r28, r26
    20c0:	20 e0       	ldi	r18, 0x00	; 0
    20c2:	30 e0       	ldi	r19, 0x00	; 0
    20c4:	ce 17       	cp	r28, r30
    20c6:	df 07       	cpc	r29, r31
    20c8:	40 f4       	brcc	.+16     	; 0x20da <free+0x5a>
    20ca:	4a 81       	ldd	r20, Y+2	; 0x02
    20cc:	5b 81       	ldd	r21, Y+3	; 0x03
    20ce:	9e 01       	movw	r18, r28
    20d0:	41 15       	cp	r20, r1
    20d2:	51 05       	cpc	r21, r1
    20d4:	f1 f0       	breq	.+60     	; 0x2112 <free+0x92>
    20d6:	ea 01       	movw	r28, r20
    20d8:	f5 cf       	rjmp	.-22     	; 0x20c4 <free+0x44>
    20da:	d3 83       	std	Z+3, r29	; 0x03
    20dc:	c2 83       	std	Z+2, r28	; 0x02
    20de:	40 81       	ld	r20, Z
    20e0:	51 81       	ldd	r21, Z+1	; 0x01
    20e2:	84 0f       	add	r24, r20
    20e4:	95 1f       	adc	r25, r21
    20e6:	c8 17       	cp	r28, r24
    20e8:	d9 07       	cpc	r29, r25
    20ea:	59 f4       	brne	.+22     	; 0x2102 <free+0x82>
    20ec:	88 81       	ld	r24, Y
    20ee:	99 81       	ldd	r25, Y+1	; 0x01
    20f0:	84 0f       	add	r24, r20
    20f2:	95 1f       	adc	r25, r21
    20f4:	02 96       	adiw	r24, 0x02	; 2
    20f6:	91 83       	std	Z+1, r25	; 0x01
    20f8:	80 83       	st	Z, r24
    20fa:	8a 81       	ldd	r24, Y+2	; 0x02
    20fc:	9b 81       	ldd	r25, Y+3	; 0x03
    20fe:	93 83       	std	Z+3, r25	; 0x03
    2100:	82 83       	std	Z+2, r24	; 0x02
    2102:	21 15       	cp	r18, r1
    2104:	31 05       	cpc	r19, r1
    2106:	29 f4       	brne	.+10     	; 0x2112 <free+0x92>
    2108:	f0 93 9c 04 	sts	0x049C, r31	; 0x80049c <__flp+0x1>
    210c:	e0 93 9b 04 	sts	0x049B, r30	; 0x80049b <__flp>
    2110:	3d c0       	rjmp	.+122    	; 0x218c <free+0x10c>
    2112:	e9 01       	movw	r28, r18
    2114:	fb 83       	std	Y+3, r31	; 0x03
    2116:	ea 83       	std	Y+2, r30	; 0x02
    2118:	49 91       	ld	r20, Y+
    211a:	59 91       	ld	r21, Y+
    211c:	c4 0f       	add	r28, r20
    211e:	d5 1f       	adc	r29, r21
    2120:	ec 17       	cp	r30, r28
    2122:	fd 07       	cpc	r31, r29
    2124:	61 f4       	brne	.+24     	; 0x213e <free+0xbe>
    2126:	80 81       	ld	r24, Z
    2128:	91 81       	ldd	r25, Z+1	; 0x01
    212a:	84 0f       	add	r24, r20
    212c:	95 1f       	adc	r25, r21
    212e:	02 96       	adiw	r24, 0x02	; 2
    2130:	e9 01       	movw	r28, r18
    2132:	99 83       	std	Y+1, r25	; 0x01
    2134:	88 83       	st	Y, r24
    2136:	82 81       	ldd	r24, Z+2	; 0x02
    2138:	93 81       	ldd	r25, Z+3	; 0x03
    213a:	9b 83       	std	Y+3, r25	; 0x03
    213c:	8a 83       	std	Y+2, r24	; 0x02
    213e:	e0 e0       	ldi	r30, 0x00	; 0
    2140:	f0 e0       	ldi	r31, 0x00	; 0
    2142:	12 96       	adiw	r26, 0x02	; 2
    2144:	8d 91       	ld	r24, X+
    2146:	9c 91       	ld	r25, X
    2148:	13 97       	sbiw	r26, 0x03	; 3
    214a:	00 97       	sbiw	r24, 0x00	; 0
    214c:	19 f0       	breq	.+6      	; 0x2154 <free+0xd4>
    214e:	fd 01       	movw	r30, r26
    2150:	dc 01       	movw	r26, r24
    2152:	f7 cf       	rjmp	.-18     	; 0x2142 <free+0xc2>
    2154:	8d 91       	ld	r24, X+
    2156:	9c 91       	ld	r25, X
    2158:	11 97       	sbiw	r26, 0x01	; 1
    215a:	9d 01       	movw	r18, r26
    215c:	2e 5f       	subi	r18, 0xFE	; 254
    215e:	3f 4f       	sbci	r19, 0xFF	; 255
    2160:	82 0f       	add	r24, r18
    2162:	93 1f       	adc	r25, r19
    2164:	20 91 99 04 	lds	r18, 0x0499	; 0x800499 <__brkval>
    2168:	30 91 9a 04 	lds	r19, 0x049A	; 0x80049a <__brkval+0x1>
    216c:	28 17       	cp	r18, r24
    216e:	39 07       	cpc	r19, r25
    2170:	69 f4       	brne	.+26     	; 0x218c <free+0x10c>
    2172:	30 97       	sbiw	r30, 0x00	; 0
    2174:	29 f4       	brne	.+10     	; 0x2180 <free+0x100>
    2176:	10 92 9c 04 	sts	0x049C, r1	; 0x80049c <__flp+0x1>
    217a:	10 92 9b 04 	sts	0x049B, r1	; 0x80049b <__flp>
    217e:	02 c0       	rjmp	.+4      	; 0x2184 <free+0x104>
    2180:	13 82       	std	Z+3, r1	; 0x03
    2182:	12 82       	std	Z+2, r1	; 0x02
    2184:	b0 93 9a 04 	sts	0x049A, r27	; 0x80049a <__brkval+0x1>
    2188:	a0 93 99 04 	sts	0x0499, r26	; 0x800499 <__brkval>
    218c:	df 91       	pop	r29
    218e:	cf 91       	pop	r28
    2190:	08 95       	ret

00002192 <strnlen_P>:
    2192:	fc 01       	movw	r30, r24
    2194:	05 90       	lpm	r0, Z+
    2196:	61 50       	subi	r22, 0x01	; 1
    2198:	70 40       	sbci	r23, 0x00	; 0
    219a:	01 10       	cpse	r0, r1
    219c:	d8 f7       	brcc	.-10     	; 0x2194 <strnlen_P+0x2>
    219e:	80 95       	com	r24
    21a0:	90 95       	com	r25
    21a2:	8e 0f       	add	r24, r30
    21a4:	9f 1f       	adc	r25, r31
    21a6:	08 95       	ret

000021a8 <memset>:
    21a8:	dc 01       	movw	r26, r24
    21aa:	01 c0       	rjmp	.+2      	; 0x21ae <memset+0x6>
    21ac:	6d 93       	st	X+, r22
    21ae:	41 50       	subi	r20, 0x01	; 1
    21b0:	50 40       	sbci	r21, 0x00	; 0
    21b2:	e0 f7       	brcc	.-8      	; 0x21ac <memset+0x4>
    21b4:	08 95       	ret

000021b6 <strnlen>:
    21b6:	fc 01       	movw	r30, r24
    21b8:	61 50       	subi	r22, 0x01	; 1
    21ba:	70 40       	sbci	r23, 0x00	; 0
    21bc:	01 90       	ld	r0, Z+
    21be:	01 10       	cpse	r0, r1
    21c0:	d8 f7       	brcc	.-10     	; 0x21b8 <strnlen+0x2>
    21c2:	80 95       	com	r24
    21c4:	90 95       	com	r25
    21c6:	8e 0f       	add	r24, r30
    21c8:	9f 1f       	adc	r25, r31
    21ca:	08 95       	ret

000021cc <fputc>:
    21cc:	0f 93       	push	r16
    21ce:	1f 93       	push	r17
    21d0:	cf 93       	push	r28
    21d2:	df 93       	push	r29
    21d4:	fb 01       	movw	r30, r22
    21d6:	23 81       	ldd	r18, Z+3	; 0x03
    21d8:	21 fd       	sbrc	r18, 1
    21da:	03 c0       	rjmp	.+6      	; 0x21e2 <fputc+0x16>
    21dc:	8f ef       	ldi	r24, 0xFF	; 255
    21de:	9f ef       	ldi	r25, 0xFF	; 255
    21e0:	2c c0       	rjmp	.+88     	; 0x223a <fputc+0x6e>
    21e2:	22 ff       	sbrs	r18, 2
    21e4:	16 c0       	rjmp	.+44     	; 0x2212 <fputc+0x46>
    21e6:	46 81       	ldd	r20, Z+6	; 0x06
    21e8:	57 81       	ldd	r21, Z+7	; 0x07
    21ea:	24 81       	ldd	r18, Z+4	; 0x04
    21ec:	35 81       	ldd	r19, Z+5	; 0x05
    21ee:	42 17       	cp	r20, r18
    21f0:	53 07       	cpc	r21, r19
    21f2:	44 f4       	brge	.+16     	; 0x2204 <fputc+0x38>
    21f4:	a0 81       	ld	r26, Z
    21f6:	b1 81       	ldd	r27, Z+1	; 0x01
    21f8:	9d 01       	movw	r18, r26
    21fa:	2f 5f       	subi	r18, 0xFF	; 255
    21fc:	3f 4f       	sbci	r19, 0xFF	; 255
    21fe:	31 83       	std	Z+1, r19	; 0x01
    2200:	20 83       	st	Z, r18
    2202:	8c 93       	st	X, r24
    2204:	26 81       	ldd	r18, Z+6	; 0x06
    2206:	37 81       	ldd	r19, Z+7	; 0x07
    2208:	2f 5f       	subi	r18, 0xFF	; 255
    220a:	3f 4f       	sbci	r19, 0xFF	; 255
    220c:	37 83       	std	Z+7, r19	; 0x07
    220e:	26 83       	std	Z+6, r18	; 0x06
    2210:	14 c0       	rjmp	.+40     	; 0x223a <fputc+0x6e>
    2212:	8b 01       	movw	r16, r22
    2214:	ec 01       	movw	r28, r24
    2216:	fb 01       	movw	r30, r22
    2218:	00 84       	ldd	r0, Z+8	; 0x08
    221a:	f1 85       	ldd	r31, Z+9	; 0x09
    221c:	e0 2d       	mov	r30, r0
    221e:	09 95       	icall
    2220:	89 2b       	or	r24, r25
    2222:	e1 f6       	brne	.-72     	; 0x21dc <fputc+0x10>
    2224:	d8 01       	movw	r26, r16
    2226:	16 96       	adiw	r26, 0x06	; 6
    2228:	8d 91       	ld	r24, X+
    222a:	9c 91       	ld	r25, X
    222c:	17 97       	sbiw	r26, 0x07	; 7
    222e:	01 96       	adiw	r24, 0x01	; 1
    2230:	17 96       	adiw	r26, 0x07	; 7
    2232:	9c 93       	st	X, r25
    2234:	8e 93       	st	-X, r24
    2236:	16 97       	sbiw	r26, 0x06	; 6
    2238:	ce 01       	movw	r24, r28
    223a:	df 91       	pop	r29
    223c:	cf 91       	pop	r28
    223e:	1f 91       	pop	r17
    2240:	0f 91       	pop	r16
    2242:	08 95       	ret

00002244 <__ultoa_invert>:
    2244:	fa 01       	movw	r30, r20
    2246:	aa 27       	eor	r26, r26
    2248:	28 30       	cpi	r18, 0x08	; 8
    224a:	51 f1       	breq	.+84     	; 0x22a0 <__ultoa_invert+0x5c>
    224c:	20 31       	cpi	r18, 0x10	; 16
    224e:	81 f1       	breq	.+96     	; 0x22b0 <__ultoa_invert+0x6c>
    2250:	e8 94       	clt
    2252:	6f 93       	push	r22
    2254:	6e 7f       	andi	r22, 0xFE	; 254
    2256:	6e 5f       	subi	r22, 0xFE	; 254
    2258:	7f 4f       	sbci	r23, 0xFF	; 255
    225a:	8f 4f       	sbci	r24, 0xFF	; 255
    225c:	9f 4f       	sbci	r25, 0xFF	; 255
    225e:	af 4f       	sbci	r26, 0xFF	; 255
    2260:	b1 e0       	ldi	r27, 0x01	; 1
    2262:	3e d0       	rcall	.+124    	; 0x22e0 <__ultoa_invert+0x9c>
    2264:	b4 e0       	ldi	r27, 0x04	; 4
    2266:	3c d0       	rcall	.+120    	; 0x22e0 <__ultoa_invert+0x9c>
    2268:	67 0f       	add	r22, r23
    226a:	78 1f       	adc	r23, r24
    226c:	89 1f       	adc	r24, r25
    226e:	9a 1f       	adc	r25, r26
    2270:	a1 1d       	adc	r26, r1
    2272:	68 0f       	add	r22, r24
    2274:	79 1f       	adc	r23, r25
    2276:	8a 1f       	adc	r24, r26
    2278:	91 1d       	adc	r25, r1
    227a:	a1 1d       	adc	r26, r1
    227c:	6a 0f       	add	r22, r26
    227e:	71 1d       	adc	r23, r1
    2280:	81 1d       	adc	r24, r1
    2282:	91 1d       	adc	r25, r1
    2284:	a1 1d       	adc	r26, r1
    2286:	20 d0       	rcall	.+64     	; 0x22c8 <__ultoa_invert+0x84>
    2288:	09 f4       	brne	.+2      	; 0x228c <__ultoa_invert+0x48>
    228a:	68 94       	set
    228c:	3f 91       	pop	r19
    228e:	2a e0       	ldi	r18, 0x0A	; 10
    2290:	26 9f       	mul	r18, r22
    2292:	11 24       	eor	r1, r1
    2294:	30 19       	sub	r19, r0
    2296:	30 5d       	subi	r19, 0xD0	; 208
    2298:	31 93       	st	Z+, r19
    229a:	de f6       	brtc	.-74     	; 0x2252 <__ultoa_invert+0xe>
    229c:	cf 01       	movw	r24, r30
    229e:	08 95       	ret
    22a0:	46 2f       	mov	r20, r22
    22a2:	47 70       	andi	r20, 0x07	; 7
    22a4:	40 5d       	subi	r20, 0xD0	; 208
    22a6:	41 93       	st	Z+, r20
    22a8:	b3 e0       	ldi	r27, 0x03	; 3
    22aa:	0f d0       	rcall	.+30     	; 0x22ca <__ultoa_invert+0x86>
    22ac:	c9 f7       	brne	.-14     	; 0x22a0 <__ultoa_invert+0x5c>
    22ae:	f6 cf       	rjmp	.-20     	; 0x229c <__ultoa_invert+0x58>
    22b0:	46 2f       	mov	r20, r22
    22b2:	4f 70       	andi	r20, 0x0F	; 15
    22b4:	40 5d       	subi	r20, 0xD0	; 208
    22b6:	4a 33       	cpi	r20, 0x3A	; 58
    22b8:	18 f0       	brcs	.+6      	; 0x22c0 <__ultoa_invert+0x7c>
    22ba:	49 5d       	subi	r20, 0xD9	; 217
    22bc:	31 fd       	sbrc	r19, 1
    22be:	40 52       	subi	r20, 0x20	; 32
    22c0:	41 93       	st	Z+, r20
    22c2:	02 d0       	rcall	.+4      	; 0x22c8 <__ultoa_invert+0x84>
    22c4:	a9 f7       	brne	.-22     	; 0x22b0 <__ultoa_invert+0x6c>
    22c6:	ea cf       	rjmp	.-44     	; 0x229c <__ultoa_invert+0x58>
    22c8:	b4 e0       	ldi	r27, 0x04	; 4
    22ca:	a6 95       	lsr	r26
    22cc:	97 95       	ror	r25
    22ce:	87 95       	ror	r24
    22d0:	77 95       	ror	r23
    22d2:	67 95       	ror	r22
    22d4:	ba 95       	dec	r27
    22d6:	c9 f7       	brne	.-14     	; 0x22ca <__ultoa_invert+0x86>
    22d8:	00 97       	sbiw	r24, 0x00	; 0
    22da:	61 05       	cpc	r22, r1
    22dc:	71 05       	cpc	r23, r1
    22de:	08 95       	ret
    22e0:	9b 01       	movw	r18, r22
    22e2:	ac 01       	movw	r20, r24
    22e4:	0a 2e       	mov	r0, r26
    22e6:	06 94       	lsr	r0
    22e8:	57 95       	ror	r21
    22ea:	47 95       	ror	r20
    22ec:	37 95       	ror	r19
    22ee:	27 95       	ror	r18
    22f0:	ba 95       	dec	r27
    22f2:	c9 f7       	brne	.-14     	; 0x22e6 <__ultoa_invert+0xa2>
    22f4:	62 0f       	add	r22, r18
    22f6:	73 1f       	adc	r23, r19
    22f8:	84 1f       	adc	r24, r20
    22fa:	95 1f       	adc	r25, r21
    22fc:	a0 1d       	adc	r26, r0
    22fe:	08 95       	ret

00002300 <__prologue_saves__>:
    2300:	2f 92       	push	r2
    2302:	3f 92       	push	r3
    2304:	4f 92       	push	r4
    2306:	5f 92       	push	r5
    2308:	6f 92       	push	r6
    230a:	7f 92       	push	r7
    230c:	8f 92       	push	r8
    230e:	9f 92       	push	r9
    2310:	af 92       	push	r10
    2312:	bf 92       	push	r11
    2314:	cf 92       	push	r12
    2316:	df 92       	push	r13
    2318:	ef 92       	push	r14
    231a:	ff 92       	push	r15
    231c:	0f 93       	push	r16
    231e:	1f 93       	push	r17
    2320:	cf 93       	push	r28
    2322:	df 93       	push	r29
    2324:	cd b7       	in	r28, 0x3d	; 61
    2326:	de b7       	in	r29, 0x3e	; 62
    2328:	ca 1b       	sub	r28, r26
    232a:	db 0b       	sbc	r29, r27
    232c:	0f b6       	in	r0, 0x3f	; 63
    232e:	f8 94       	cli
    2330:	de bf       	out	0x3e, r29	; 62
    2332:	0f be       	out	0x3f, r0	; 63
    2334:	cd bf       	out	0x3d, r28	; 61
    2336:	09 94       	ijmp

00002338 <__epilogue_restores__>:
    2338:	2a 88       	ldd	r2, Y+18	; 0x12
    233a:	39 88       	ldd	r3, Y+17	; 0x11
    233c:	48 88       	ldd	r4, Y+16	; 0x10
    233e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2340:	6e 84       	ldd	r6, Y+14	; 0x0e
    2342:	7d 84       	ldd	r7, Y+13	; 0x0d
    2344:	8c 84       	ldd	r8, Y+12	; 0x0c
    2346:	9b 84       	ldd	r9, Y+11	; 0x0b
    2348:	aa 84       	ldd	r10, Y+10	; 0x0a
    234a:	b9 84       	ldd	r11, Y+9	; 0x09
    234c:	c8 84       	ldd	r12, Y+8	; 0x08
    234e:	df 80       	ldd	r13, Y+7	; 0x07
    2350:	ee 80       	ldd	r14, Y+6	; 0x06
    2352:	fd 80       	ldd	r15, Y+5	; 0x05
    2354:	0c 81       	ldd	r16, Y+4	; 0x04
    2356:	1b 81       	ldd	r17, Y+3	; 0x03
    2358:	aa 81       	ldd	r26, Y+2	; 0x02
    235a:	b9 81       	ldd	r27, Y+1	; 0x01
    235c:	ce 0f       	add	r28, r30
    235e:	d1 1d       	adc	r29, r1
    2360:	0f b6       	in	r0, 0x3f	; 63
    2362:	f8 94       	cli
    2364:	de bf       	out	0x3e, r29	; 62
    2366:	0f be       	out	0x3f, r0	; 63
    2368:	cd bf       	out	0x3d, r28	; 61
    236a:	ed 01       	movw	r28, r26
    236c:	08 95       	ret

0000236e <_exit>:
    236e:	f8 94       	cli

00002370 <__stop_program>:
    2370:	ff cf       	rjmp	.-2      	; 0x2370 <__stop_program>
