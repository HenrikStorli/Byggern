
TestYolo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000156  00800100  00002436  000024ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002436  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000009c  00800256  00800256  00002620  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002620  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000267c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000330  00000000  00000000  000026b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003a0f  00000000  00000000  000029e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000164c  00000000  00000000  000063f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b00  00000000  00000000  00007a43  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000880  00000000  00000000  00009544  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d34  00000000  00000000  00009dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002229  00000000  00000000  0000aaf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a0  00000000  00000000  0000cd21  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cb 01 	jmp	0x396	; 0x396 <__ctors_end>
       4:	0c 94 3c 02 	jmp	0x478	; 0x478 <__vector_1>
       8:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
       c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      10:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      14:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      18:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      1c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      20:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      24:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      28:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      2c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      30:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      34:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      38:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      3c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      40:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      44:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      48:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      4c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      50:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      54:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      58:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      5c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      60:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      64:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      68:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      6c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      70:	08 4a       	sbci	r16, 0xA8	; 168
      72:	d7 3b       	cpi	r29, 0xB7	; 183
      74:	3b ce       	rjmp	.-906    	; 0xfffffcec <__eeprom_end+0xff7efcec>
      76:	01 6e       	ori	r16, 0xE1	; 225
      78:	84 bc       	out	0x24, r8	; 36
      7a:	bf fd       	.word	0xfdbf	; ????
      7c:	c1 2f       	mov	r28, r17
      7e:	3d 6c       	ori	r19, 0xCD	; 205
      80:	74 31       	cpi	r23, 0x14	; 20
      82:	9a bd       	out	0x2a, r25	; 42
      84:	56 83       	std	Z+6, r21	; 0x06
      86:	3d da       	rcall	.-2950   	; 0xfffff502 <__eeprom_end+0xff7ef502>
      88:	3d 00       	.word	0x003d	; ????
      8a:	c7 7f       	andi	r28, 0xF7	; 247
      8c:	11 be       	out	0x31, r1	; 49
      8e:	d9 e4       	ldi	r29, 0x49	; 73
      90:	bb 4c       	sbci	r27, 0xCB	; 203
      92:	3e 91       	ld	r19, -X
      94:	6b aa       	std	Y+51, r6	; 0x33
      96:	aa be       	out	0x3a, r10	; 58
      98:	00 00       	nop
      9a:	00 80       	ld	r0, Z
      9c:	3f 00       	.word	0x003f	; ????

0000009e <__trampolines_end>:
	...
      a6:	00 06       	cpc	r0, r16
      a8:	5f 5f       	subi	r21, 0xFF	; 255
      aa:	06 00       	.word	0x0006	; ????
      ac:	00 00       	nop
      ae:	00 07       	cpc	r16, r16
      b0:	07 00       	.word	0x0007	; ????
      b2:	07 07       	cpc	r16, r23
      b4:	00 00       	nop
      b6:	14 7f       	andi	r17, 0xF4	; 244
      b8:	7f 14       	cp	r7, r15
      ba:	7f 7f       	andi	r23, 0xFF	; 255
      bc:	14 00       	.word	0x0014	; ????
      be:	24 2e       	mov	r2, r20
      c0:	6b 6b       	ori	r22, 0xBB	; 187
      c2:	3a 12       	cpse	r3, r26
      c4:	00 00       	nop
      c6:	46 66       	ori	r20, 0x66	; 102
      c8:	30 18       	sub	r3, r0
      ca:	0c 66       	ori	r16, 0x6C	; 108
      cc:	62 00       	.word	0x0062	; ????
      ce:	30 7a       	andi	r19, 0xA0	; 160
      d0:	4f 5d       	subi	r20, 0xDF	; 223
      d2:	37 7a       	andi	r19, 0xA7	; 167
      d4:	48 00       	.word	0x0048	; ????
      d6:	04 07       	cpc	r16, r20
      d8:	03 00       	.word	0x0003	; ????
      da:	00 00       	nop
      dc:	00 00       	nop
      de:	00 1c       	adc	r0, r0
      e0:	3e 63       	ori	r19, 0x3E	; 62
      e2:	41 00       	.word	0x0041	; ????
      e4:	00 00       	nop
      e6:	00 41       	sbci	r16, 0x10	; 16
      e8:	63 3e       	cpi	r22, 0xE3	; 227
      ea:	1c 00       	.word	0x001c	; ????
      ec:	00 00       	nop
      ee:	08 2a       	or	r0, r24
      f0:	3e 1c       	adc	r3, r14
      f2:	1c 3e       	cpi	r17, 0xEC	; 236
      f4:	2a 08       	sbc	r2, r10
      f6:	08 08       	sbc	r0, r8
      f8:	3e 3e       	cpi	r19, 0xEE	; 238
      fa:	08 08       	sbc	r0, r8
      fc:	00 00       	nop
      fe:	00 a0       	ldd	r0, Z+32	; 0x20
     100:	e0 60       	ori	r30, 0x00	; 0
     102:	00 00       	nop
     104:	00 00       	nop
     106:	08 08       	sbc	r0, r8
     108:	08 08       	sbc	r0, r8
     10a:	08 08       	sbc	r0, r8
     10c:	00 00       	nop
     10e:	00 00       	nop
     110:	60 60       	ori	r22, 0x00	; 0
     112:	00 00       	nop
     114:	00 00       	nop
     116:	60 30       	cpi	r22, 0x00	; 0
     118:	18 0c       	add	r1, r8
     11a:	06 03       	mulsu	r16, r22
     11c:	01 00       	.word	0x0001	; ????
     11e:	3e 7f       	andi	r19, 0xFE	; 254
     120:	59 4d       	sbci	r21, 0xD9	; 217
     122:	7f 3e       	cpi	r23, 0xEF	; 239
     124:	00 00       	nop
     126:	42 42       	sbci	r20, 0x22	; 34
     128:	7f 7f       	andi	r23, 0xFF	; 255
     12a:	40 40       	sbci	r20, 0x00	; 0
     12c:	00 00       	nop
     12e:	62 73       	andi	r22, 0x32	; 50
     130:	59 49       	sbci	r21, 0x99	; 153
     132:	6f 66       	ori	r22, 0x6F	; 111
     134:	00 00       	nop
     136:	22 63       	ori	r18, 0x32	; 50
     138:	49 49       	sbci	r20, 0x99	; 153
     13a:	7f 36       	cpi	r23, 0x6F	; 111
     13c:	00 00       	nop
     13e:	18 1c       	adc	r1, r8
     140:	16 13       	cpse	r17, r22
     142:	7f 7f       	andi	r23, 0xFF	; 255
     144:	10 00       	.word	0x0010	; ????
     146:	27 67       	ori	r18, 0x77	; 119
     148:	45 45       	sbci	r20, 0x55	; 85
     14a:	7d 39       	cpi	r23, 0x9D	; 157
     14c:	00 00       	nop
     14e:	3c 7e       	andi	r19, 0xEC	; 236
     150:	4b 49       	sbci	r20, 0x9B	; 155
     152:	79 30       	cpi	r23, 0x09	; 9
     154:	00 00       	nop
     156:	03 63       	ori	r16, 0x33	; 51
     158:	71 19       	sub	r23, r1
     15a:	0f 07       	cpc	r16, r31
     15c:	00 00       	nop
     15e:	36 7f       	andi	r19, 0xF6	; 246
     160:	49 49       	sbci	r20, 0x99	; 153
     162:	7f 36       	cpi	r23, 0x6F	; 111
     164:	00 00       	nop
     166:	06 4f       	sbci	r16, 0xF6	; 246
     168:	49 69       	ori	r20, 0x99	; 153
     16a:	3f 1e       	adc	r3, r31
     16c:	00 00       	nop
     16e:	00 00       	nop
     170:	6c 6c       	ori	r22, 0xCC	; 204
     172:	00 00       	nop
     174:	00 00       	nop
     176:	00 a0       	ldd	r0, Z+32	; 0x20
     178:	ec 6c       	ori	r30, 0xCC	; 204
     17a:	00 00       	nop
     17c:	00 00       	nop
     17e:	08 1c       	adc	r0, r8
     180:	36 63       	ori	r19, 0x36	; 54
     182:	41 00       	.word	0x0041	; ????
     184:	00 00       	nop
     186:	14 14       	cp	r1, r4
     188:	14 14       	cp	r1, r4
     18a:	14 14       	cp	r1, r4
     18c:	00 00       	nop
     18e:	00 41       	sbci	r16, 0x10	; 16
     190:	63 36       	cpi	r22, 0x63	; 99
     192:	1c 08       	sbc	r1, r12
     194:	00 00       	nop
     196:	02 03       	mulsu	r16, r18
     198:	51 59       	subi	r21, 0x91	; 145
     19a:	0f 06       	cpc	r0, r31
     19c:	00 00       	nop
     19e:	3e 7f       	andi	r19, 0xFE	; 254
     1a0:	41 5d       	subi	r20, 0xD1	; 209
     1a2:	5d 1f       	adc	r21, r29
     1a4:	1e 00       	.word	0x001e	; ????
     1a6:	7c 7e       	andi	r23, 0xEC	; 236
     1a8:	13 13       	cpse	r17, r19
     1aa:	7e 7c       	andi	r23, 0xCE	; 206
     1ac:	00 00       	nop
     1ae:	41 7f       	andi	r20, 0xF1	; 241
     1b0:	7f 49       	sbci	r23, 0x9F	; 159
     1b2:	49 7f       	andi	r20, 0xF9	; 249
     1b4:	36 00       	.word	0x0036	; ????
     1b6:	1c 3e       	cpi	r17, 0xEC	; 236
     1b8:	63 41       	sbci	r22, 0x13	; 19
     1ba:	41 63       	ori	r20, 0x31	; 49
     1bc:	22 00       	.word	0x0022	; ????
     1be:	41 7f       	andi	r20, 0xF1	; 241
     1c0:	7f 41       	sbci	r23, 0x1F	; 31
     1c2:	63 7f       	andi	r22, 0xF3	; 243
     1c4:	1c 00       	.word	0x001c	; ????
     1c6:	41 7f       	andi	r20, 0xF1	; 241
     1c8:	7f 49       	sbci	r23, 0x9F	; 159
     1ca:	5d 41       	sbci	r21, 0x1D	; 29
     1cc:	63 00       	.word	0x0063	; ????
     1ce:	41 7f       	andi	r20, 0xF1	; 241
     1d0:	7f 49       	sbci	r23, 0x9F	; 159
     1d2:	1d 01       	movw	r2, r26
     1d4:	03 00       	.word	0x0003	; ????
     1d6:	1c 3e       	cpi	r17, 0xEC	; 236
     1d8:	63 41       	sbci	r22, 0x13	; 19
     1da:	51 73       	andi	r21, 0x31	; 49
     1dc:	72 00       	.word	0x0072	; ????
     1de:	7f 7f       	andi	r23, 0xFF	; 255
     1e0:	08 08       	sbc	r0, r8
     1e2:	7f 7f       	andi	r23, 0xFF	; 255
     1e4:	00 00       	nop
     1e6:	00 41       	sbci	r16, 0x10	; 16
     1e8:	7f 7f       	andi	r23, 0xFF	; 255
     1ea:	41 00       	.word	0x0041	; ????
     1ec:	00 00       	nop
     1ee:	30 70       	andi	r19, 0x00	; 0
     1f0:	40 41       	sbci	r20, 0x10	; 16
     1f2:	7f 3f       	cpi	r23, 0xFF	; 255
     1f4:	01 00       	.word	0x0001	; ????
     1f6:	41 7f       	andi	r20, 0xF1	; 241
     1f8:	7f 08       	sbc	r7, r15
     1fa:	1c 77       	andi	r17, 0x7C	; 124
     1fc:	63 00       	.word	0x0063	; ????
     1fe:	41 7f       	andi	r20, 0xF1	; 241
     200:	7f 41       	sbci	r23, 0x1F	; 31
     202:	40 60       	ori	r20, 0x00	; 0
     204:	70 00       	.word	0x0070	; ????
     206:	7f 7f       	andi	r23, 0xFF	; 255
     208:	06 0c       	add	r0, r6
     20a:	06 7f       	andi	r16, 0xF6	; 246
     20c:	7f 00       	.word	0x007f	; ????
     20e:	7f 7f       	andi	r23, 0xFF	; 255
     210:	06 0c       	add	r0, r6
     212:	18 7f       	andi	r17, 0xF8	; 248
     214:	7f 00       	.word	0x007f	; ????
     216:	1c 3e       	cpi	r17, 0xEC	; 236
     218:	63 41       	sbci	r22, 0x13	; 19
     21a:	63 3e       	cpi	r22, 0xE3	; 227
     21c:	1c 00       	.word	0x001c	; ????
     21e:	41 7f       	andi	r20, 0xF1	; 241
     220:	7f 49       	sbci	r23, 0x9F	; 159
     222:	09 0f       	add	r16, r25
     224:	06 00       	.word	0x0006	; ????
     226:	1e 3f       	cpi	r17, 0xFE	; 254
     228:	21 71       	andi	r18, 0x11	; 17
     22a:	7f 5e       	subi	r23, 0xEF	; 239
     22c:	00 00       	nop
     22e:	41 7f       	andi	r20, 0xF1	; 241
     230:	7f 19       	sub	r23, r15
     232:	39 6f       	ori	r19, 0xF9	; 249
     234:	46 00       	.word	0x0046	; ????
     236:	26 67       	ori	r18, 0x76	; 118
     238:	4d 59       	subi	r20, 0x9D	; 157
     23a:	7b 32       	cpi	r23, 0x2B	; 43
     23c:	00 00       	nop
     23e:	03 41       	sbci	r16, 0x13	; 19
     240:	7f 7f       	andi	r23, 0xFF	; 255
     242:	41 03       	mulsu	r20, r17
     244:	00 00       	nop
     246:	7f 7f       	andi	r23, 0xFF	; 255
     248:	40 40       	sbci	r20, 0x00	; 0
     24a:	7f 7f       	andi	r23, 0xFF	; 255
     24c:	00 00       	nop
     24e:	1f 3f       	cpi	r17, 0xFF	; 255
     250:	60 60       	ori	r22, 0x00	; 0
     252:	3f 1f       	adc	r19, r31
     254:	00 00       	nop
     256:	7f 7f       	andi	r23, 0xFF	; 255
     258:	30 18       	sub	r3, r0
     25a:	30 7f       	andi	r19, 0xF0	; 240
     25c:	7f 00       	.word	0x007f	; ????
     25e:	63 77       	andi	r22, 0x73	; 115
     260:	1c 08       	sbc	r1, r12
     262:	1c 77       	andi	r17, 0x7C	; 124
     264:	63 00       	.word	0x0063	; ????
     266:	07 4f       	sbci	r16, 0xF7	; 247
     268:	78 78       	andi	r23, 0x88	; 136
     26a:	4f 07       	cpc	r20, r31
     26c:	00 00       	nop
     26e:	67 73       	andi	r22, 0x37	; 55
     270:	59 4d       	sbci	r21, 0xD9	; 217
     272:	47 63       	ori	r20, 0x37	; 55
     274:	71 00       	.word	0x0071	; ????
     276:	00 7f       	andi	r16, 0xF0	; 240
     278:	7f 41       	sbci	r23, 0x1F	; 31
     27a:	41 00       	.word	0x0041	; ????
     27c:	00 00       	nop
     27e:	01 03       	mulsu	r16, r17
     280:	06 0c       	add	r0, r6
     282:	18 30       	cpi	r17, 0x08	; 8
     284:	60 00       	.word	0x0060	; ????
     286:	00 41       	sbci	r16, 0x10	; 16
     288:	41 7f       	andi	r20, 0xF1	; 241
     28a:	7f 00       	.word	0x007f	; ????
     28c:	00 00       	nop
     28e:	08 0c       	add	r0, r8
     290:	06 03       	mulsu	r16, r22
     292:	06 0c       	add	r0, r6
     294:	08 00       	.word	0x0008	; ????
     296:	80 80       	ld	r8, Z
     298:	80 80       	ld	r8, Z
     29a:	80 80       	ld	r8, Z
     29c:	80 80       	ld	r8, Z
     29e:	00 00       	nop
     2a0:	03 07       	cpc	r16, r19
     2a2:	04 00       	.word	0x0004	; ????
     2a4:	00 00       	nop
     2a6:	20 74       	andi	r18, 0x40	; 64
     2a8:	54 54       	subi	r21, 0x44	; 68
     2aa:	3c 78       	andi	r19, 0x8C	; 140
     2ac:	40 00       	.word	0x0040	; ????
     2ae:	41 3f       	cpi	r20, 0xF1	; 241
     2b0:	7f 44       	sbci	r23, 0x4F	; 79
     2b2:	44 7c       	andi	r20, 0xC4	; 196
     2b4:	38 00       	.word	0x0038	; ????
     2b6:	38 7c       	andi	r19, 0xC8	; 200
     2b8:	44 44       	sbci	r20, 0x44	; 68
     2ba:	6c 28       	or	r6, r12
     2bc:	00 00       	nop
     2be:	30 78       	andi	r19, 0x80	; 128
     2c0:	48 49       	sbci	r20, 0x98	; 152
     2c2:	3f 7f       	andi	r19, 0xFF	; 255
     2c4:	40 00       	.word	0x0040	; ????
     2c6:	38 7c       	andi	r19, 0xC8	; 200
     2c8:	54 54       	subi	r21, 0x44	; 68
     2ca:	5c 18       	sub	r5, r12
     2cc:	00 00       	nop
     2ce:	48 7e       	andi	r20, 0xE8	; 232
     2d0:	7f 49       	sbci	r23, 0x9F	; 159
     2d2:	03 02       	muls	r16, r19
     2d4:	00 00       	nop
     2d6:	98 bc       	out	0x28, r9	; 40
     2d8:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2da:	f8 7c       	andi	r31, 0xC8	; 200
     2dc:	04 00       	.word	0x0004	; ????
     2de:	41 7f       	andi	r20, 0xF1	; 241
     2e0:	7f 08       	sbc	r7, r15
     2e2:	04 7c       	andi	r16, 0xC4	; 196
     2e4:	78 00       	.word	0x0078	; ????
     2e6:	00 44       	sbci	r16, 0x40	; 64
     2e8:	7d 7d       	andi	r23, 0xDD	; 221
     2ea:	40 00       	.word	0x0040	; ????
     2ec:	00 00       	nop
     2ee:	40 c4       	rjmp	.+2176   	; 0xb70 <go_down+0x1a>
     2f0:	84 fd       	sbrc	r24, 4
     2f2:	7d 00       	.word	0x007d	; ????
     2f4:	00 00       	nop
     2f6:	41 7f       	andi	r20, 0xF1	; 241
     2f8:	7f 10       	cpse	r7, r15
     2fa:	38 6c       	ori	r19, 0xC8	; 200
     2fc:	44 00       	.word	0x0044	; ????
     2fe:	00 41       	sbci	r16, 0x10	; 16
     300:	7f 7f       	andi	r23, 0xFF	; 255
     302:	40 00       	.word	0x0040	; ????
     304:	00 00       	nop
     306:	7c 7c       	andi	r23, 0xCC	; 204
     308:	0c 18       	sub	r0, r12
     30a:	0c 7c       	andi	r16, 0xCC	; 204
     30c:	78 00       	.word	0x0078	; ????
     30e:	7c 7c       	andi	r23, 0xCC	; 204
     310:	04 04       	cpc	r0, r4
     312:	7c 78       	andi	r23, 0x8C	; 140
     314:	00 00       	nop
     316:	38 7c       	andi	r19, 0xC8	; 200
     318:	44 44       	sbci	r20, 0x44	; 68
     31a:	7c 38       	cpi	r23, 0x8C	; 140
     31c:	00 00       	nop
     31e:	84 fc       	sbrc	r8, 4
     320:	f8 a4       	ldd	r15, Y+40	; 0x28
     322:	24 3c       	cpi	r18, 0xC4	; 196
     324:	18 00       	.word	0x0018	; ????
     326:	18 3c       	cpi	r17, 0xC8	; 200
     328:	24 a4       	ldd	r2, Z+44	; 0x2c
     32a:	f8 fc       	.word	0xfcf8	; ????
     32c:	84 00       	.word	0x0084	; ????
     32e:	44 7c       	andi	r20, 0xC4	; 196
     330:	78 44       	sbci	r23, 0x48	; 72
     332:	1c 18       	sub	r1, r12
     334:	00 00       	nop
     336:	48 5c       	subi	r20, 0xC8	; 200
     338:	54 54       	subi	r21, 0x44	; 68
     33a:	74 24       	eor	r7, r4
     33c:	00 00       	nop
     33e:	00 04       	cpc	r0, r0
     340:	3e 7f       	andi	r19, 0xFE	; 254
     342:	44 24       	eor	r4, r4
     344:	00 00       	nop
     346:	3c 7c       	andi	r19, 0xCC	; 204
     348:	40 40       	sbci	r20, 0x00	; 0
     34a:	3c 7c       	andi	r19, 0xCC	; 204
     34c:	40 00       	.word	0x0040	; ????
     34e:	1c 3c       	cpi	r17, 0xCC	; 204
     350:	60 60       	ori	r22, 0x00	; 0
     352:	3c 1c       	adc	r3, r12
     354:	00 00       	nop
     356:	3c 7c       	andi	r19, 0xCC	; 204
     358:	60 30       	cpi	r22, 0x00	; 0
     35a:	60 7c       	andi	r22, 0xC0	; 192
     35c:	3c 00       	.word	0x003c	; ????
     35e:	44 6c       	ori	r20, 0xC4	; 196
     360:	38 10       	cpse	r3, r8
     362:	38 6c       	ori	r19, 0xC8	; 200
     364:	44 00       	.word	0x0044	; ????
     366:	9c bc       	out	0x2c, r9	; 44
     368:	a0 a0       	ldd	r10, Z+32	; 0x20
     36a:	fc 7c       	andi	r31, 0xCC	; 204
     36c:	00 00       	nop
     36e:	4c 64       	ori	r20, 0x4C	; 76
     370:	74 5c       	subi	r23, 0xC4	; 196
     372:	4c 64       	ori	r20, 0x4C	; 76
     374:	00 00       	nop
     376:	08 08       	sbc	r0, r8
     378:	3e 77       	andi	r19, 0x7E	; 126
     37a:	41 41       	sbci	r20, 0x11	; 17
     37c:	00 00       	nop
     37e:	00 00       	nop
     380:	00 77       	andi	r16, 0x70	; 112
     382:	77 00       	.word	0x0077	; ????
     384:	00 00       	nop
     386:	41 41       	sbci	r20, 0x11	; 17
     388:	77 3e       	cpi	r23, 0xE7	; 231
     38a:	08 08       	sbc	r0, r8
     38c:	00 00       	nop
     38e:	02 03       	mulsu	r16, r18
     390:	01 03       	mulsu	r16, r17
     392:	02 03       	mulsu	r16, r18
     394:	01 00       	.word	0x0001	; ????

00000396 <__ctors_end>:
     396:	11 24       	eor	r1, r1
     398:	1f be       	out	0x3f, r1	; 63
     39a:	cf ef       	ldi	r28, 0xFF	; 255
     39c:	d4 e0       	ldi	r29, 0x04	; 4
     39e:	de bf       	out	0x3e, r29	; 62
     3a0:	cd bf       	out	0x3d, r28	; 61

000003a2 <__do_copy_data>:
     3a2:	12 e0       	ldi	r17, 0x02	; 2
     3a4:	a0 e0       	ldi	r26, 0x00	; 0
     3a6:	b1 e0       	ldi	r27, 0x01	; 1
     3a8:	e6 e3       	ldi	r30, 0x36	; 54
     3aa:	f4 e2       	ldi	r31, 0x24	; 36
     3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <__do_copy_data+0x10>
     3ae:	05 90       	lpm	r0, Z+
     3b0:	0d 92       	st	X+, r0
     3b2:	a6 35       	cpi	r26, 0x56	; 86
     3b4:	b1 07       	cpc	r27, r17
     3b6:	d9 f7       	brne	.-10     	; 0x3ae <__do_copy_data+0xc>

000003b8 <__do_clear_bss>:
     3b8:	22 e0       	ldi	r18, 0x02	; 2
     3ba:	a6 e5       	ldi	r26, 0x56	; 86
     3bc:	b2 e0       	ldi	r27, 0x02	; 2
     3be:	01 c0       	rjmp	.+2      	; 0x3c2 <.do_clear_bss_start>

000003c0 <.do_clear_bss_loop>:
     3c0:	1d 92       	st	X+, r1

000003c2 <.do_clear_bss_start>:
     3c2:	a2 3f       	cpi	r26, 0xF2	; 242
     3c4:	b2 07       	cpc	r27, r18
     3c6:	e1 f7       	brne	.-8      	; 0x3c0 <.do_clear_bss_loop>
     3c8:	0e 94 bd 09 	call	0x137a	; 0x137a <main>
     3cc:	0c 94 19 12 	jmp	0x2432	; 0x2432 <_exit>

000003d0 <__bad_interrupt>:
     3d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003d4 <ADC_read>:
    uint8_t retreived_value = ext_ram1[adrs];
    if (retreived_value != 0b01010101) {
        printf("ADC error, ext_ram1[%4d] = %02X  \n\r", adrs, retreived_value);
    }
    else{
        printf("ADC success, ext_ram1[%4d] = %02X  \n\r", adrs, retreived_value);
     3d4:	80 68       	ori	r24, 0x80	; 128
     3d6:	e1 e0       	ldi	r30, 0x01	; 1
     3d8:	f4 e1       	ldi	r31, 0x14	; 20
     3da:	80 83       	st	Z, r24
     3dc:	86 ef       	ldi	r24, 0xF6	; 246
     3de:	8a 95       	dec	r24
     3e0:	f1 f7       	brne	.-4      	; 0x3de <ADC_read+0xa>
     3e2:	80 81       	ld	r24, Z
     3e4:	08 95       	ret

000003e6 <ADC_calibrate>:
     3e6:	e1 e0       	ldi	r30, 0x01	; 1
     3e8:	f4 e1       	ldi	r31, 0x14	; 20
     3ea:	20 e8       	ldi	r18, 0x80	; 128
     3ec:	20 83       	st	Z, r18
     3ee:	26 ef       	ldi	r18, 0xF6	; 246
     3f0:	2a 95       	dec	r18
     3f2:	f1 f7       	brne	.-4      	; 0x3f0 <ADC_calibrate+0xa>
     3f4:	20 81       	ld	r18, Z
     3f6:	30 e0       	ldi	r19, 0x00	; 0
     3f8:	dc 01       	movw	r26, r24
     3fa:	2d 93       	st	X+, r18
     3fc:	3c 93       	st	X, r19
     3fe:	21 e8       	ldi	r18, 0x81	; 129
     400:	20 83       	st	Z, r18
     402:	b6 ef       	ldi	r27, 0xF6	; 246
     404:	ba 95       	dec	r27
     406:	f1 f7       	brne	.-4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     408:	20 81       	ld	r18, Z
     40a:	30 e0       	ldi	r19, 0x00	; 0
     40c:	fc 01       	movw	r30, r24
     40e:	33 83       	std	Z+3, r19	; 0x03
     410:	22 83       	std	Z+2, r18	; 0x02
     412:	08 95       	ret

00000414 <ADC_timer_init>:
}


void ADC_timer_init(void) {

    DDRB|=(1<<PB0);  /*set OC0 pin as output*/
     414:	b8 9a       	sbi	0x17, 0	; 23

    TCCR0 |= (1<<WGM01) | (0<<WGM00);
     416:	83 b7       	in	r24, 0x33	; 51
     418:	88 60       	ori	r24, 0x08	; 8
     41a:	83 bf       	out	0x33, r24	; 51
    TCCR0 |= (1<<COM00);
     41c:	83 b7       	in	r24, 0x33	; 51
     41e:	80 61       	ori	r24, 0x10	; 16
     420:	83 bf       	out	0x33, r24	; 51
    TCCR0 |= (1<<CS00);
     422:	83 b7       	in	r24, 0x33	; 51
     424:	81 60       	ori	r24, 0x01	; 1
     426:	83 bf       	out	0x33, r24	; 51

    OCR0 = 0b00000001;
     428:	81 e0       	ldi	r24, 0x01	; 1
     42a:	81 bf       	out	0x31, r24	; 49
     42c:	08 95       	ret

0000042e <CAN_init>:
    for(uint8_t i = 0; i < message.data_length; i++){
        (message.data)[i] = mcp_read(MCP_RXB0DM +i + 16);
    }
    
    return message;
}
     42e:	cf 93       	push	r28
     430:	c8 2f       	mov	r28, r24
     432:	f8 94       	cli
     434:	85 b7       	in	r24, 0x35	; 53
     436:	82 60       	ori	r24, 0x02	; 2
     438:	85 bf       	out	0x35, r24	; 53
     43a:	85 b7       	in	r24, 0x35	; 53
     43c:	8e 7f       	andi	r24, 0xFE	; 254
     43e:	85 bf       	out	0x35, r24	; 53
     440:	8b b7       	in	r24, 0x3b	; 59
     442:	80 64       	ori	r24, 0x40	; 64
     444:	8b bf       	out	0x3b, r24	; 59
     446:	78 94       	sei
     448:	80 e8       	ldi	r24, 0x80	; 128
     44a:	0e 94 77 03 	call	0x6ee	; 0x6ee <mcp_init>
     44e:	61 e0       	ldi	r22, 0x01	; 1
     450:	8b e2       	ldi	r24, 0x2B	; 43
     452:	0e 94 3e 03 	call	0x67c	; 0x67c <mcp_write>
     456:	61 e8       	ldi	r22, 0x81	; 129
     458:	8a e2       	ldi	r24, 0x2A	; 42
     45a:	0e 94 3e 03 	call	0x67c	; 0x67c <mcp_write>
     45e:	6d ea       	ldi	r22, 0xAD	; 173
     460:	89 e2       	ldi	r24, 0x29	; 41
     462:	0e 94 3e 03 	call	0x67c	; 0x67c <mcp_write>
     466:	65 e0       	ldi	r22, 0x05	; 5
     468:	88 e2       	ldi	r24, 0x28	; 40
     46a:	0e 94 3e 03 	call	0x67c	; 0x67c <mcp_write>
     46e:	8c 2f       	mov	r24, r28
     470:	0e 94 54 03 	call	0x6a8	; 0x6a8 <mcp_set_mode>
     474:	cf 91       	pop	r28
     476:	08 95       	ret

00000478 <__vector_1>:
     478:	1f 92       	push	r1
     47a:	0f 92       	push	r0
     47c:	0f b6       	in	r0, 0x3f	; 63
     47e:	0f 92       	push	r0
     480:	11 24       	eor	r1, r1
     482:	8f 93       	push	r24
     484:	9f 93       	push	r25
     486:	81 e0       	ldi	r24, 0x01	; 1
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	90 93 57 02 	sts	0x0257, r25	; 0x800257 <__data_end+0x1>
     48e:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <__data_end>
     492:	9f 91       	pop	r25
     494:	8f 91       	pop	r24
     496:	0f 90       	pop	r0
     498:	0f be       	out	0x3f, r0	; 63
     49a:	0f 90       	pop	r0
     49c:	1f 90       	pop	r1
     49e:	18 95       	reti

000004a0 <CAN_message_transmission>:
     4a0:	0f 93       	push	r16
     4a2:	1f 93       	push	r17
     4a4:	cf 93       	push	r28
     4a6:	df 93       	push	r29
     4a8:	8c 01       	movw	r16, r24
     4aa:	fc 01       	movw	r30, r24
     4ac:	c0 81       	ld	r28, Z
     4ae:	d1 81       	ldd	r29, Z+1	; 0x01
     4b0:	6c 2f       	mov	r22, r28
     4b2:	62 95       	swap	r22
     4b4:	66 0f       	add	r22, r22
     4b6:	60 7e       	andi	r22, 0xE0	; 224
     4b8:	82 e3       	ldi	r24, 0x32	; 50
     4ba:	0e 94 3e 03 	call	0x67c	; 0x67c <mcp_write>
     4be:	be 01       	movw	r22, r28
     4c0:	76 95       	lsr	r23
     4c2:	67 95       	ror	r22
     4c4:	76 95       	lsr	r23
     4c6:	67 95       	ror	r22
     4c8:	76 95       	lsr	r23
     4ca:	67 95       	ror	r22
     4cc:	81 e3       	ldi	r24, 0x31	; 49
     4ce:	0e 94 3e 03 	call	0x67c	; 0x67c <mcp_write>
     4d2:	f8 01       	movw	r30, r16
     4d4:	62 81       	ldd	r22, Z+2	; 0x02
     4d6:	85 e3       	ldi	r24, 0x35	; 53
     4d8:	0e 94 3e 03 	call	0x67c	; 0x67c <mcp_write>
     4dc:	f8 01       	movw	r30, r16
     4de:	82 81       	ldd	r24, Z+2	; 0x02
     4e0:	88 23       	and	r24, r24
     4e2:	71 f0       	breq	.+28     	; 0x500 <__stack+0x1>
     4e4:	c0 e0       	ldi	r28, 0x00	; 0
     4e6:	f8 01       	movw	r30, r16
     4e8:	ec 0f       	add	r30, r28
     4ea:	f1 1d       	adc	r31, r1
     4ec:	63 81       	ldd	r22, Z+3	; 0x03
     4ee:	86 e3       	ldi	r24, 0x36	; 54
     4f0:	8c 0f       	add	r24, r28
     4f2:	0e 94 3e 03 	call	0x67c	; 0x67c <mcp_write>
     4f6:	cf 5f       	subi	r28, 0xFF	; 255
     4f8:	f8 01       	movw	r30, r16
     4fa:	82 81       	ldd	r24, Z+2	; 0x02
     4fc:	c8 17       	cp	r28, r24
     4fe:	98 f3       	brcs	.-26     	; 0x4e6 <CAN_message_transmission+0x46>
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	0e 94 c0 03 	call	0x780	; 0x780 <mcp_request_to_send>
     506:	df 91       	pop	r29
     508:	cf 91       	pop	r28
     50a:	1f 91       	pop	r17
     50c:	0f 91       	pop	r16
     50e:	08 95       	ret

00000510 <CAN_meessage_reception>:
     510:	9f 92       	push	r9
     512:	af 92       	push	r10
     514:	bf 92       	push	r11
     516:	cf 92       	push	r12
     518:	df 92       	push	r13
     51a:	ef 92       	push	r14
     51c:	ff 92       	push	r15
     51e:	0f 93       	push	r16
     520:	1f 93       	push	r17
     522:	cf 93       	push	r28
     524:	df 93       	push	r29
     526:	cd b7       	in	r28, 0x3d	; 61
     528:	de b7       	in	r29, 0x3e	; 62
     52a:	2b 97       	sbiw	r28, 0x0b	; 11
     52c:	0f b6       	in	r0, 0x3f	; 63
     52e:	f8 94       	cli
     530:	de bf       	out	0x3e, r29	; 62
     532:	0f be       	out	0x3f, r0	; 63
     534:	cd bf       	out	0x3d, r28	; 61
     536:	5c 01       	movw	r10, r24
     538:	81 e6       	ldi	r24, 0x61	; 97
     53a:	0e 94 59 03 	call	0x6b2	; 0x6b2 <mcp_read>
     53e:	c8 2e       	mov	r12, r24
     540:	d1 2c       	mov	r13, r1
     542:	82 e6       	ldi	r24, 0x62	; 98
     544:	0e 94 59 03 	call	0x6b2	; 0x6b2 <mcp_read>
     548:	dc 2c       	mov	r13, r12
     54a:	cc 24       	eor	r12, r12
     54c:	80 7e       	andi	r24, 0xE0	; 224
     54e:	c8 0e       	add	r12, r24
     550:	d1 1c       	adc	r13, r1
     552:	85 e6       	ldi	r24, 0x65	; 101
     554:	0e 94 59 03 	call	0x6b2	; 0x6b2 <mcp_read>
     558:	8f 70       	andi	r24, 0x0F	; 15
     55a:	98 2e       	mov	r9, r24
     55c:	81 f0       	breq	.+32     	; 0x57e <CAN_meessage_reception+0x6e>
     55e:	7e 01       	movw	r14, r28
     560:	84 e0       	ldi	r24, 0x04	; 4
     562:	e8 0e       	add	r14, r24
     564:	f1 1c       	adc	r15, r1
     566:	06 e6       	ldi	r16, 0x66	; 102
     568:	09 0d       	add	r16, r9
     56a:	16 e6       	ldi	r17, 0x66	; 102
     56c:	81 2f       	mov	r24, r17
     56e:	0e 94 59 03 	call	0x6b2	; 0x6b2 <mcp_read>
     572:	f7 01       	movw	r30, r14
     574:	81 93       	st	Z+, r24
     576:	7f 01       	movw	r14, r30
     578:	1f 5f       	subi	r17, 0xFF	; 255
     57a:	10 13       	cpse	r17, r16
     57c:	f7 cf       	rjmp	.-18     	; 0x56c <CAN_meessage_reception+0x5c>
     57e:	da 82       	std	Y+2, r13	; 0x02
     580:	c9 82       	std	Y+1, r12	; 0x01
     582:	9b 82       	std	Y+3, r9	; 0x03
     584:	8b e0       	ldi	r24, 0x0B	; 11
     586:	fe 01       	movw	r30, r28
     588:	31 96       	adiw	r30, 0x01	; 1
     58a:	d5 01       	movw	r26, r10
     58c:	01 90       	ld	r0, Z+
     58e:	0d 92       	st	X+, r0
     590:	8a 95       	dec	r24
     592:	e1 f7       	brne	.-8      	; 0x58c <CAN_meessage_reception+0x7c>
     594:	c5 01       	movw	r24, r10
     596:	2b 96       	adiw	r28, 0x0b	; 11
     598:	0f b6       	in	r0, 0x3f	; 63
     59a:	f8 94       	cli
     59c:	de bf       	out	0x3e, r29	; 62
     59e:	0f be       	out	0x3f, r0	; 63
     5a0:	cd bf       	out	0x3d, r28	; 61
     5a2:	df 91       	pop	r29
     5a4:	cf 91       	pop	r28
     5a6:	1f 91       	pop	r17
     5a8:	0f 91       	pop	r16
     5aa:	ff 90       	pop	r15
     5ac:	ef 90       	pop	r14
     5ae:	df 90       	pop	r13
     5b0:	cf 90       	pop	r12
     5b2:	bf 90       	pop	r11
     5b4:	af 90       	pop	r10
     5b6:	9f 90       	pop	r9
     5b8:	08 95       	ret

000005ba <message_handler>:

CAN_message_t message_handler(){
     5ba:	cf 93       	push	r28
     5bc:	df 93       	push	r29
     5be:	ec 01       	movw	r28, r24
    CAN_message_t message;
    
	if(flag){
     5c0:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <__data_end>
     5c4:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <__data_end+0x1>
     5c8:	89 2b       	or	r24, r25
     5ca:	61 f0       	breq	.+24     	; 0x5e4 <message_handler+0x2a>
        message = CAN_meessage_reception(); //reads buffer 2 register
     5cc:	ce 01       	movw	r24, r28
     5ce:	0e 94 88 02 	call	0x510	; 0x510 <CAN_meessage_reception>

		flag = 0;
     5d2:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <__data_end+0x1>
     5d6:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <__data_end>
        mcp_bit_modify(MCP_CANINTF, 1, 0);  // resets can interrupt flag bit for buffer 1
     5da:	40 e0       	ldi	r20, 0x00	; 0
     5dc:	61 e0       	ldi	r22, 0x01	; 1
     5de:	8c e2       	ldi	r24, 0x2C	; 44
     5e0:	0e 94 a4 03 	call	0x748	; 0x748 <mcp_bit_modify>

    }
return message;
}
     5e4:	ce 01       	movw	r24, r28
     5e6:	df 91       	pop	r29
     5e8:	cf 91       	pop	r28
     5ea:	08 95       	ret

000005ec <joyStick_Can_Message>:
 *  Author: Herbe
 */ 
#include "CAN_joystick_messages.h"


void joyStick_Can_Message(){
     5ec:	ef 92       	push	r14
     5ee:	ff 92       	push	r15
     5f0:	0f 93       	push	r16
     5f2:	1f 93       	push	r17
     5f4:	cf 93       	push	r28
     5f6:	df 93       	push	r29
     5f8:	cd b7       	in	r28, 0x3d	; 61
     5fa:	de b7       	in	r29, 0x3e	; 62
     5fc:	2b 97       	sbiw	r28, 0x0b	; 11
     5fe:	0f b6       	in	r0, 0x3f	; 63
     600:	f8 94       	cli
     602:	de bf       	out	0x3e, r29	; 62
     604:	0f be       	out	0x3f, r0	; 63
     606:	cd bf       	out	0x3d, r28	; 61
	
pos_read(&P_pos); //Reads the current position of the joystick
     608:	8e ed       	ldi	r24, 0xDE	; 222
     60a:	92 e0       	ldi	r25, 0x02	; 2
     60c:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <pos_read>

uint8_t sendSliderRight = ADC_read(2);  
     610:	82 e0       	ldi	r24, 0x02	; 2
     612:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ADC_read>
     616:	e8 2e       	mov	r14, r24
uint8_t sendPosX = 128 + P_pos.posX;  //Adding 128 to not have negative a number
     618:	ee ed       	ldi	r30, 0xDE	; 222
     61a:	f2 e0       	ldi	r31, 0x02	; 2
     61c:	80 81       	ld	r24, Z
     61e:	68 94       	set
     620:	ff 24       	eor	r15, r15
     622:	f7 f8       	bld	r15, 7
     624:	f8 0e       	add	r15, r24
uint8_t sendPosY = 128 + P_pos.posY;  //Adding 128 to not have negative a number
     626:	02 81       	ldd	r16, Z+2	; 0x02
     628:	00 58       	subi	r16, 0x80	; 128
uint8_t sendJoyButton = usb_button_pushed(JOYSTICK_BUTTON);
     62a:	82 e0       	ldi	r24, 0x02	; 2
     62c:	0e 94 a9 09 	call	0x1352	; 0x1352 <usb_button_pushed>
     630:	18 2f       	mov	r17, r24
uint8_t sendJoyDirection = (joystick_direction()) << 1; //shift right to not disturb rest of message
     632:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <joystick_direction>

uint8_t sendJoyData = sendJoyDirection + sendJoyButton;  //Combining button-bushed and joystick-direction in one byte.

CAN_message_t joyStickData;
joyStickData.identifier = 0b11111111;
     636:	2f ef       	ldi	r18, 0xFF	; 255
     638:	30 e0       	ldi	r19, 0x00	; 0
     63a:	3a 83       	std	Y+2, r19	; 0x02
     63c:	29 83       	std	Y+1, r18	; 0x01
joyStickData.data[0] = sendPosX;
     63e:	fc 82       	std	Y+4, r15	; 0x04
joyStickData.data[1] = sendPosY;
     640:	0d 83       	std	Y+5, r16	; 0x05
joyStickData.data[2] = sendJoyData;
     642:	88 0f       	add	r24, r24
     644:	18 0f       	add	r17, r24
     646:	1e 83       	std	Y+6, r17	; 0x06
joyStickData.data[3] = sendSliderRight;
     648:	ef 82       	std	Y+7, r14	; 0x07
joyStickData.data_length = 4;
     64a:	84 e0       	ldi	r24, 0x04	; 4
     64c:	8b 83       	std	Y+3, r24	; 0x03

CAN_message_transmission(&joyStickData);
     64e:	ce 01       	movw	r24, r28
     650:	01 96       	adiw	r24, 0x01	; 1
     652:	0e 94 50 02 	call	0x4a0	; 0x4a0 <CAN_message_transmission>
     656:	2b 96       	adiw	r28, 0x0b	; 11
     658:	0f b6       	in	r0, 0x3f	; 63
     65a:	f8 94       	cli
     65c:	de bf       	out	0x3e, r29	; 62
     65e:	0f be       	out	0x3f, r0	; 63
     660:	cd bf       	out	0x3d, r28	; 61
     662:	df 91       	pop	r29
     664:	cf 91       	pop	r28
     666:	1f 91       	pop	r17
     668:	0f 91       	pop	r16
     66a:	ff 90       	pop	r15
     66c:	ef 90       	pop	r14
     66e:	08 95       	ret

00000670 <spi_master_CS>:
    status_value = spi_read();

    spi_master_CS(1);

    return status_value;
}
     670:	81 11       	cpse	r24, r1
     672:	02 c0       	rjmp	.+4      	; 0x678 <spi_master_CS+0x8>
     674:	c4 98       	cbi	0x18, 4	; 24
     676:	08 95       	ret
     678:	c4 9a       	sbi	0x18, 4	; 24
     67a:	08 95       	ret

0000067c <mcp_write>:
     67c:	cf 93       	push	r28
     67e:	df 93       	push	r29
     680:	d8 2f       	mov	r29, r24
     682:	c6 2f       	mov	r28, r22
     684:	80 e0       	ldi	r24, 0x00	; 0
     686:	0e 94 38 03 	call	0x670	; 0x670 <spi_master_CS>
     68a:	82 e0       	ldi	r24, 0x02	; 2
     68c:	0e 94 0e 0a 	call	0x141c	; 0x141c <spi_write>
     690:	8d 2f       	mov	r24, r29
     692:	0e 94 0e 0a 	call	0x141c	; 0x141c <spi_write>
     696:	8c 2f       	mov	r24, r28
     698:	0e 94 0e 0a 	call	0x141c	; 0x141c <spi_write>
     69c:	81 e0       	ldi	r24, 0x01	; 1
     69e:	0e 94 38 03 	call	0x670	; 0x670 <spi_master_CS>
     6a2:	df 91       	pop	r29
     6a4:	cf 91       	pop	r28
     6a6:	08 95       	ret

000006a8 <mcp_set_mode>:
     6a8:	68 2f       	mov	r22, r24
     6aa:	8f e0       	ldi	r24, 0x0F	; 15
     6ac:	0e 94 3e 03 	call	0x67c	; 0x67c <mcp_write>
     6b0:	08 95       	ret

000006b2 <mcp_read>:
     6b2:	cf 93       	push	r28
     6b4:	c8 2f       	mov	r28, r24
     6b6:	80 e0       	ldi	r24, 0x00	; 0
     6b8:	0e 94 38 03 	call	0x670	; 0x670 <spi_master_CS>
     6bc:	83 e0       	ldi	r24, 0x03	; 3
     6be:	0e 94 0e 0a 	call	0x141c	; 0x141c <spi_write>
     6c2:	8c 2f       	mov	r24, r28
     6c4:	0e 94 0e 0a 	call	0x141c	; 0x141c <spi_write>
     6c8:	0e 94 12 0a 	call	0x1424	; 0x1424 <spi_read>
     6cc:	c8 2f       	mov	r28, r24
     6ce:	81 e0       	ldi	r24, 0x01	; 1
     6d0:	0e 94 38 03 	call	0x670	; 0x670 <spi_master_CS>
     6d4:	8c 2f       	mov	r24, r28
     6d6:	cf 91       	pop	r28
     6d8:	08 95       	ret

000006da <mcp_reset>:
     6da:	80 e0       	ldi	r24, 0x00	; 0
     6dc:	0e 94 38 03 	call	0x670	; 0x670 <spi_master_CS>
     6e0:	80 ec       	ldi	r24, 0xC0	; 192
     6e2:	0e 94 0e 0a 	call	0x141c	; 0x141c <spi_write>
     6e6:	81 e0       	ldi	r24, 0x01	; 1
     6e8:	0e 94 38 03 	call	0x670	; 0x670 <spi_master_CS>
     6ec:	08 95       	ret

000006ee <mcp_init>:
     6ee:	cf 93       	push	r28
     6f0:	c8 2f       	mov	r28, r24
     6f2:	0e 94 17 0a 	call	0x142e	; 0x142e <spi_init>
     6f6:	0e 94 6d 03 	call	0x6da	; 0x6da <mcp_reset>
     6fa:	80 e8       	ldi	r24, 0x80	; 128
     6fc:	0e 94 54 03 	call	0x6a8	; 0x6a8 <mcp_set_mode>
     700:	8f ef       	ldi	r24, 0xFF	; 255
     702:	9f e8       	ldi	r25, 0x8F	; 143
     704:	01 97       	sbiw	r24, 0x01	; 1
     706:	f1 f7       	brne	.-4      	; 0x704 <mcp_init+0x16>
     708:	00 c0       	rjmp	.+0      	; 0x70a <mcp_init+0x1c>
     70a:	00 00       	nop
     70c:	8e e0       	ldi	r24, 0x0E	; 14
     70e:	0e 94 59 03 	call	0x6b2	; 0x6b2 <mcp_read>
     712:	80 7e       	andi	r24, 0xE0	; 224
     714:	80 38       	cpi	r24, 0x80	; 128
     716:	31 f0       	breq	.+12     	; 0x724 <mcp_init+0x36>
     718:	8a e2       	ldi	r24, 0x2A	; 42
     71a:	91 e0       	ldi	r25, 0x01	; 1
     71c:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <puts>
     720:	81 e0       	ldi	r24, 0x01	; 1
     722:	10 c0       	rjmp	.+32     	; 0x744 <mcp_init+0x56>
     724:	8c 2f       	mov	r24, r28
     726:	0e 94 54 03 	call	0x6a8	; 0x6a8 <mcp_set_mode>
     72a:	8e e0       	ldi	r24, 0x0E	; 14
     72c:	0e 94 59 03 	call	0x6b2	; 0x6b2 <mcp_read>
     730:	80 7e       	andi	r24, 0xE0	; 224
     732:	8c 17       	cp	r24, r28
     734:	31 f0       	breq	.+12     	; 0x742 <mcp_init+0x54>
     736:	8c e5       	ldi	r24, 0x5C	; 92
     738:	91 e0       	ldi	r25, 0x01	; 1
     73a:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <puts>
     73e:	81 e0       	ldi	r24, 0x01	; 1
     740:	01 c0       	rjmp	.+2      	; 0x744 <mcp_init+0x56>
     742:	80 e0       	ldi	r24, 0x00	; 0
     744:	cf 91       	pop	r28
     746:	08 95       	ret

00000748 <mcp_bit_modify>:
     748:	1f 93       	push	r17
     74a:	cf 93       	push	r28
     74c:	df 93       	push	r29
     74e:	18 2f       	mov	r17, r24
     750:	d6 2f       	mov	r29, r22
     752:	c4 2f       	mov	r28, r20
     754:	80 e0       	ldi	r24, 0x00	; 0
     756:	0e 94 38 03 	call	0x670	; 0x670 <spi_master_CS>
     75a:	85 e0       	ldi	r24, 0x05	; 5
     75c:	0e 94 0e 0a 	call	0x141c	; 0x141c <spi_write>
     760:	81 2f       	mov	r24, r17
     762:	0e 94 0e 0a 	call	0x141c	; 0x141c <spi_write>
     766:	8d 2f       	mov	r24, r29
     768:	0e 94 0e 0a 	call	0x141c	; 0x141c <spi_write>
     76c:	8c 2f       	mov	r24, r28
     76e:	0e 94 0e 0a 	call	0x141c	; 0x141c <spi_write>
     772:	81 e0       	ldi	r24, 0x01	; 1
     774:	0e 94 38 03 	call	0x670	; 0x670 <spi_master_CS>
     778:	df 91       	pop	r29
     77a:	cf 91       	pop	r28
     77c:	1f 91       	pop	r17
     77e:	08 95       	ret

00000780 <mcp_request_to_send>:

void mcp_request_to_send(uint8_t buffer){
     780:	cf 93       	push	r28
     782:	c8 2f       	mov	r28, r24
    spi_master_CS(0);
     784:	80 e0       	ldi	r24, 0x00	; 0
     786:	0e 94 38 03 	call	0x670	; 0x670 <spi_master_CS>

    switch (buffer) {
     78a:	c1 30       	cpi	r28, 0x01	; 1
     78c:	41 f0       	breq	.+16     	; 0x79e <mcp_request_to_send+0x1e>
     78e:	18 f0       	brcs	.+6      	; 0x796 <mcp_request_to_send+0x16>
     790:	c2 30       	cpi	r28, 0x02	; 2
     792:	49 f0       	breq	.+18     	; 0x7a6 <mcp_request_to_send+0x26>
     794:	0c c0       	rjmp	.+24     	; 0x7ae <mcp_request_to_send+0x2e>
      case 0:
          spi_write(MCP_RTS_TX0);
     796:	81 e8       	ldi	r24, 0x81	; 129
     798:	0e 94 0e 0a 	call	0x141c	; 0x141c <spi_write>
          break;
     79c:	0b c0       	rjmp	.+22     	; 0x7b4 <mcp_request_to_send+0x34>
      case 1:
          spi_write(MCP_RTS_TX1);
     79e:	82 e8       	ldi	r24, 0x82	; 130
     7a0:	0e 94 0e 0a 	call	0x141c	; 0x141c <spi_write>
          break;
     7a4:	07 c0       	rjmp	.+14     	; 0x7b4 <mcp_request_to_send+0x34>
      case 2:
          spi_write(MCP_RTS_TX2);
     7a6:	84 e8       	ldi	r24, 0x84	; 132
     7a8:	0e 94 0e 0a 	call	0x141c	; 0x141c <spi_write>
          break;
     7ac:	03 c0       	rjmp	.+6      	; 0x7b4 <mcp_request_to_send+0x34>
      default:
        spi_write(MCP_RTS_ALL);
     7ae:	87 e8       	ldi	r24, 0x87	; 135
     7b0:	0e 94 0e 0a 	call	0x141c	; 0x141c <spi_write>
    }

    spi_master_CS(1);
     7b4:	81 e0       	ldi	r24, 0x01	; 1
     7b6:	0e 94 38 03 	call	0x670	; 0x670 <spi_master_CS>
}
     7ba:	cf 91       	pop	r28
     7bc:	08 95       	ret

000007be <InitMusic>:

void InitMusic()
{
	// Configure OC1B pin as output

	DDRE |= (1 << PE2); //OC1B as output
     7be:	32 9a       	sbi	0x06, 2	; 6

	// timer1 configuration (for pWM)
    TCCR1A = (1 << COM1B1);  // Clear OC1A/OC1B on compare match
     7c0:	80 e2       	ldi	r24, 0x20	; 32
     7c2:	8f bd       	out	0x2f, r24	; 47

	
	TCCR1B = (1 << WGM13) 	//mode 8, pWM, phase and Frequency Correct (TOp value is ICR1)
     7c4:	82 e1       	ldi	r24, 0x12	; 18
     7c6:	8e bd       	out	0x2e, r24	; 46
     7c8:	08 95       	ret

000007ca <playMusic>:

/**
	plays music.
*/

void playMusic( int* pMusicNotes, uint8_t tempo, uint8_t scale)	{							 /** paying tempo from 0 to 100. Higher value = slower playback*/
     7ca:	cf 92       	push	r12
     7cc:	df 92       	push	r13
     7ce:	ef 92       	push	r14
     7d0:	ff 92       	push	r15
     7d2:	0f 93       	push	r16
     7d4:	1f 93       	push	r17
     7d6:	cf 93       	push	r28
     7d8:	df 93       	push	r29
     7da:	ec 01       	movw	r28, r24
//	uint16_t size = sizeof(*pMusicNotes);

	int duration;
	int note;
	uint8_t i = 0;
	uint16_t delay = tempo * 10000;
     7dc:	80 e1       	ldi	r24, 0x10	; 16
     7de:	97 e2       	ldi	r25, 0x27	; 39
     7e0:	68 9f       	mul	r22, r24
     7e2:	90 01       	movw	r18, r0
     7e4:	69 9f       	mul	r22, r25
     7e6:	30 0d       	add	r19, r0
     7e8:	11 24       	eor	r1, r1
   
	while( *pMusicNotes )
	{
		*pMusicNotes = scale* (*pMusicNotes);
     7ea:	04 2f       	mov	r16, r20
     7ec:	10 e0       	ldi	r17, 0x00	; 0
		}

		else
		{
			//not a pause, generate tone
			OCR1B = DEFAULT_VOLUME;
     7ee:	0f 2e       	mov	r0, r31
     7f0:	f4 e6       	ldi	r31, 0x64	; 100
     7f2:	cf 2e       	mov	r12, r31
     7f4:	d1 2c       	mov	r13, r1
     7f6:	f0 2d       	mov	r31, r0
			//set frequency
			ICR1H = (note >> 8);
			ICR1L = note;
		}
		//wait duration
		for(i=0;i<32/duration;i++)
     7f8:	68 94       	set
     7fa:	ee 24       	eor	r14, r14
     7fc:	e5 f8       	bld	r14, 5
     7fe:	f1 2c       	mov	r15, r1
	int duration;
	int note;
	uint8_t i = 0;
	uint16_t delay = tempo * 10000;
   
	while( *pMusicNotes )
     800:	2d c0       	rjmp	.+90     	; 0x85c <playMusic+0x92>
	{
		*pMusicNotes = scale* (*pMusicNotes);
     802:	04 9f       	mul	r16, r20
     804:	c0 01       	movw	r24, r0
     806:	05 9f       	mul	r16, r21
     808:	90 0d       	add	r25, r0
     80a:	14 9f       	mul	r17, r20
     80c:	90 0d       	add	r25, r0
     80e:	11 24       	eor	r1, r1
     810:	99 83       	std	Y+1, r25	; 0x01
     812:	88 83       	st	Y, r24
		note = *pMusicNotes;
		pMusicNotes++;

		duration = *pMusicNotes;
     814:	6a 81       	ldd	r22, Y+2	; 0x02
     816:	7b 81       	ldd	r23, Y+3	; 0x03
     818:	24 96       	adiw	r28, 0x04	; 4
		pMusicNotes++;

		if( p == note )
     81a:	81 30       	cpi	r24, 0x01	; 1
     81c:	91 05       	cpc	r25, r1
     81e:	19 f4       	brne	.+6      	; 0x826 <playMusic+0x5c>
		{
			//pause, do not generate any sound
			OCR1B = 0;
     820:	19 bc       	out	0x29, r1	; 41
     822:	18 bc       	out	0x28, r1	; 40
     824:	04 c0       	rjmp	.+8      	; 0x82e <playMusic+0x64>
		}

		else
		{
			//not a pause, generate tone
			OCR1B = DEFAULT_VOLUME;
     826:	d9 bc       	out	0x29, r13	; 41
     828:	c8 bc       	out	0x28, r12	; 40

			//set frequency
			ICR1H = (note >> 8);
     82a:	95 bd       	out	0x25, r25	; 37
			ICR1L = note;
     82c:	84 bd       	out	0x24, r24	; 36
		}
		//wait duration
		for(i=0;i<32/duration;i++)
     82e:	c7 01       	movw	r24, r14
     830:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__divmodhi4>
     834:	16 16       	cp	r1, r22
     836:	17 06       	cpc	r1, r23
     838:	6c f0       	brlt	.+26     	; 0x854 <playMusic+0x8a>
     83a:	10 c0       	rjmp	.+32     	; 0x85c <playMusic+0x92>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     83c:	f9 01       	movw	r30, r18
     83e:	31 97       	sbiw	r30, 0x01	; 1
     840:	f1 f7       	brne	.-4      	; 0x83e <playMusic+0x74>
     842:	01 97       	sbiw	r24, 0x01	; 1
		{
			for(int j = 0; j<5; j++){
     844:	d9 f7       	brne	.-10     	; 0x83c <playMusic+0x72>
			//set frequency
			ICR1H = (note >> 8);
			ICR1L = note;
		}
		//wait duration
		for(i=0;i<32/duration;i++)
     846:	4f 5f       	subi	r20, 0xFF	; 255
     848:	84 2f       	mov	r24, r20
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	86 17       	cp	r24, r22
     84e:	97 07       	cpc	r25, r23
     850:	14 f0       	brlt	.+4      	; 0x856 <playMusic+0x8c>
     852:	04 c0       	rjmp	.+8      	; 0x85c <playMusic+0x92>
     854:	40 e0       	ldi	r20, 0x00	; 0

/**
	plays music.
*/

void playMusic( int* pMusicNotes, uint8_t tempo, uint8_t scale)	{							 /** paying tempo from 0 to 100. Higher value = slower playback*/
     856:	85 e0       	ldi	r24, 0x05	; 5
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	f0 cf       	rjmp	.-32     	; 0x83c <playMusic+0x72>
	int duration;
	int note;
	uint8_t i = 0;
	uint16_t delay = tempo * 10000;
   
	while( *pMusicNotes )
     85c:	48 81       	ld	r20, Y
     85e:	59 81       	ldd	r21, Y+1	; 0x01
     860:	41 15       	cp	r20, r1
     862:	51 05       	cpc	r21, r1
     864:	71 f6       	brne	.-100    	; 0x802 <playMusic+0x38>
		}
	}
	

	//turn off any sound
	OCR1B = 0;
     866:	19 bc       	out	0x29, r1	; 41
     868:	18 bc       	out	0x28, r1	; 40
}
     86a:	df 91       	pop	r29
     86c:	cf 91       	pop	r28
     86e:	1f 91       	pop	r17
     870:	0f 91       	pop	r16
     872:	ff 90       	pop	r15
     874:	ef 90       	pop	r14
     876:	df 90       	pop	r13
     878:	cf 90       	pop	r12
     87a:	08 95       	ret

0000087c <oled_sel_row>:
    oled_line_down(page);

    for(uint8_t j = 0; j < 128; j++){
        write_data(0b00000000);   // sets bitmask of zero to a line/page
    }
}
     87c:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <oled_position>
     880:	87 70       	andi	r24, 0x07	; 7
     882:	80 55       	subi	r24, 0x50	; 80
     884:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     888:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     88c:	80 83       	st	Z, r24
     88e:	08 95       	ret

00000890 <oled_sel_col>:
     890:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <oled_position+0x1>
     894:	98 2f       	mov	r25, r24
     896:	9f 70       	andi	r25, 0x0F	; 15
     898:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     89c:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     8a0:	90 83       	st	Z, r25
     8a2:	82 95       	swap	r24
     8a4:	8f 70       	andi	r24, 0x0F	; 15
     8a6:	80 5f       	subi	r24, 0xF0	; 240
     8a8:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     8ac:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     8b0:	80 83       	st	Z, r24
     8b2:	08 95       	ret

000008b4 <oled_line_down>:
     8b4:	80 55       	subi	r24, 0x50	; 80
     8b6:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     8ba:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     8be:	80 83       	st	Z, r24
     8c0:	08 95       	ret

000008c2 <oled_pos_set>:
     8c2:	cf 93       	push	r28
     8c4:	c6 2f       	mov	r28, r22
     8c6:	0e 94 3e 04 	call	0x87c	; 0x87c <oled_sel_row>
     8ca:	8c 2f       	mov	r24, r28
     8cc:	0e 94 48 04 	call	0x890	; 0x890 <oled_sel_col>
     8d0:	cf 91       	pop	r28
     8d2:	08 95       	ret

000008d4 <oled_home>:
     8d4:	60 e0       	ldi	r22, 0x00	; 0
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	0e 94 61 04 	call	0x8c2	; 0x8c2 <oled_pos_set>
     8dc:	08 95       	ret

000008de <oled_clear>:
     8de:	1f 93       	push	r17
     8e0:	cf 93       	push	r28
     8e2:	df 93       	push	r29
     8e4:	10 e0       	ldi	r17, 0x00	; 0
     8e6:	c6 ea       	ldi	r28, 0xA6	; 166
     8e8:	d0 e0       	ldi	r29, 0x00	; 0
     8ea:	81 2f       	mov	r24, r17
     8ec:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <oled_line_down>
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	0d c0       	rjmp	.+26     	; 0x90e <oled_clear+0x30>
     8f4:	84 91       	lpm	r24, Z
     8f6:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <oled_write_data>
     8fa:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <oled_write_data+0x1>
     8fe:	8c 93       	st	X, r24
     900:	31 96       	adiw	r30, 0x01	; 1
     902:	ec 17       	cp	r30, r28
     904:	fd 07       	cpc	r31, r29
     906:	b1 f7       	brne	.-20     	; 0x8f4 <oled_clear+0x16>
     908:	9f 5f       	subi	r25, 0xFF	; 255
     90a:	90 38       	cpi	r25, 0x80	; 128
     90c:	19 f0       	breq	.+6      	; 0x914 <oled_clear+0x36>
     90e:	ee e9       	ldi	r30, 0x9E	; 158
     910:	f0 e0       	ldi	r31, 0x00	; 0
     912:	f0 cf       	rjmp	.-32     	; 0x8f4 <oled_clear+0x16>
     914:	1f 5f       	subi	r17, 0xFF	; 255
     916:	18 30       	cpi	r17, 0x08	; 8
     918:	41 f7       	brne	.-48     	; 0x8ea <oled_clear+0xc>
     91a:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <oled_home>
     91e:	df 91       	pop	r29
     920:	cf 91       	pop	r28
     922:	1f 91       	pop	r17
     924:	08 95       	ret

00000926 <OLED_init>:
     926:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     92a:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     92e:	8e ea       	ldi	r24, 0xAE	; 174
     930:	80 83       	st	Z, r24
     932:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     936:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     93a:	81 ea       	ldi	r24, 0xA1	; 161
     93c:	80 83       	st	Z, r24
     93e:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     942:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     946:	8a ed       	ldi	r24, 0xDA	; 218
     948:	80 83       	st	Z, r24
     94a:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     94e:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     952:	82 e1       	ldi	r24, 0x12	; 18
     954:	80 83       	st	Z, r24
     956:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     95a:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     95e:	88 ec       	ldi	r24, 0xC8	; 200
     960:	80 83       	st	Z, r24
     962:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     966:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     96a:	88 ea       	ldi	r24, 0xA8	; 168
     96c:	80 83       	st	Z, r24
     96e:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     972:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     976:	8f e3       	ldi	r24, 0x3F	; 63
     978:	80 83       	st	Z, r24
     97a:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     97e:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     982:	85 ed       	ldi	r24, 0xD5	; 213
     984:	80 83       	st	Z, r24
     986:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     98a:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     98e:	80 e8       	ldi	r24, 0x80	; 128
     990:	80 83       	st	Z, r24
     992:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     996:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     99a:	81 e8       	ldi	r24, 0x81	; 129
     99c:	80 83       	st	Z, r24
     99e:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     9a2:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     9a6:	80 e5       	ldi	r24, 0x50	; 80
     9a8:	80 83       	st	Z, r24
     9aa:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     9ae:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     9b2:	89 ed       	ldi	r24, 0xD9	; 217
     9b4:	80 83       	st	Z, r24
     9b6:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     9ba:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     9be:	81 e2       	ldi	r24, 0x21	; 33
     9c0:	80 83       	st	Z, r24
     9c2:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     9c6:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     9ca:	80 e2       	ldi	r24, 0x20	; 32
     9cc:	80 83       	st	Z, r24
     9ce:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     9d2:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     9d6:	82 e0       	ldi	r24, 0x02	; 2
     9d8:	80 83       	st	Z, r24
     9da:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     9de:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     9e2:	8b ed       	ldi	r24, 0xDB	; 219
     9e4:	80 83       	st	Z, r24
     9e6:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     9ea:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     9ee:	80 e3       	ldi	r24, 0x30	; 48
     9f0:	80 83       	st	Z, r24
     9f2:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     9f6:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     9fa:	8d ea       	ldi	r24, 0xAD	; 173
     9fc:	80 83       	st	Z, r24
     9fe:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     a02:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     a06:	10 82       	st	Z, r1
     a08:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     a0c:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     a10:	84 ea       	ldi	r24, 0xA4	; 164
     a12:	80 83       	st	Z, r24
     a14:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     a18:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     a1c:	86 ea       	ldi	r24, 0xA6	; 166
     a1e:	80 83       	st	Z, r24
     a20:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     a24:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     a28:	8f ea       	ldi	r24, 0xAF	; 175
     a2a:	80 83       	st	Z, r24
     a2c:	0e 94 6f 04 	call	0x8de	; 0x8de <oled_clear>
     a30:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <oled_home>
     a34:	08 95       	ret

00000a36 <oled_write_character>:

void oled_write_character(uint8_t c){
     a36:	28 2f       	mov	r18, r24
     a38:	30 e0       	ldi	r19, 0x00	; 0
     a3a:	f9 01       	movw	r30, r18
     a3c:	ee 0f       	add	r30, r30
     a3e:	ff 1f       	adc	r31, r31
     a40:	ee 0f       	add	r30, r30
     a42:	ff 1f       	adc	r31, r31
     a44:	ee 0f       	add	r30, r30
     a46:	ff 1f       	adc	r31, r31
     a48:	e2 56       	subi	r30, 0x62	; 98
     a4a:	f0 40       	sbci	r31, 0x00	; 0
     a4c:	22 0f       	add	r18, r18
     a4e:	33 1f       	adc	r19, r19
     a50:	22 0f       	add	r18, r18
     a52:	33 1f       	adc	r19, r19
     a54:	22 0f       	add	r18, r18
     a56:	33 1f       	adc	r19, r19
     a58:	2a 55       	subi	r18, 0x5A	; 90
     a5a:	30 40       	sbci	r19, 0x00	; 0
     for(uint8_t i = 0; i < 8; i++){
         write_data(pgm_read_byte( &font8[c-32][i] ) );
     a5c:	94 91       	lpm	r25, Z
    oled_clear();
    oled_home();
}

void write_data(uint8_t data){
    oled_write_data[0] = data;      // @SRAM location
     a5e:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <oled_write_data>
     a62:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <oled_write_data+0x1>
     a66:	9c 93       	st	X, r25
     a68:	31 96       	adiw	r30, 0x01	; 1
        write_data(0b00000000);   // sets bitmask of zero to a line/page
    }
}

void oled_write_character(uint8_t c){
     for(uint8_t i = 0; i < 8; i++){
     a6a:	e2 17       	cp	r30, r18
     a6c:	f3 07       	cpc	r31, r19
     a6e:	b1 f7       	brne	.-20     	; 0xa5c <oled_write_character+0x26>
         write_data(pgm_read_byte( &font8[c-32][i] ) );
     }
}
     a70:	08 95       	ret

00000a72 <oled_print>:

void oled_print(char* string){
     a72:	0f 93       	push	r16
     a74:	1f 93       	push	r17
     a76:	cf 93       	push	r28
     a78:	df 93       	push	r29
    int length = strlen(&string[0]);
     a7a:	fc 01       	movw	r30, r24
     a7c:	01 90       	ld	r0, Z+
     a7e:	00 20       	and	r0, r0
     a80:	e9 f7       	brne	.-6      	; 0xa7c <oled_print+0xa>
     a82:	31 97       	sbiw	r30, 0x01	; 1
     a84:	e8 1b       	sub	r30, r24
     a86:	f9 0b       	sbc	r31, r25

    for(int i = 0; i < length; i++ ){
     a88:	1e 16       	cp	r1, r30
     a8a:	1f 06       	cpc	r1, r31
     a8c:	54 f4       	brge	.+20     	; 0xaa2 <oled_print+0x30>
     a8e:	ec 01       	movw	r28, r24
     a90:	8c 01       	movw	r16, r24
     a92:	0e 0f       	add	r16, r30
     a94:	1f 1f       	adc	r17, r31

        oled_write_character(string[i]);
     a96:	89 91       	ld	r24, Y+
     a98:	0e 94 1b 05 	call	0xa36	; 0xa36 <oled_write_character>
}

void oled_print(char* string){
    int length = strlen(&string[0]);

    for(int i = 0; i < length; i++ ){
     a9c:	c0 17       	cp	r28, r16
     a9e:	d1 07       	cpc	r29, r17
     aa0:	d1 f7       	brne	.-12     	; 0xa96 <oled_print+0x24>

        oled_write_character(string[i]);
    }
}
     aa2:	df 91       	pop	r29
     aa4:	cf 91       	pop	r28
     aa6:	1f 91       	pop	r17
     aa8:	0f 91       	pop	r16
     aaa:	08 95       	ret

00000aac <oled_print_arrow>:


void oled_print_arrow(uint8_t row, uint8_t col){
    oled_pos_set(row, col);
     aac:	0e 94 61 04 	call	0x8c2	; 0x8c2 <oled_pos_set>
    oled_clear();
    oled_home();
}

void write_data(uint8_t data){
    oled_write_data[0] = data;      // @SRAM location
     ab0:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <oled_write_data>
     ab4:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <oled_write_data+0x1>
     ab8:	88 e1       	ldi	r24, 0x18	; 24
     aba:	80 83       	st	Z, r24
     abc:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <oled_write_data>
     ac0:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <oled_write_data+0x1>
     ac4:	80 83       	st	Z, r24
     ac6:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <oled_write_data>
     aca:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <oled_write_data+0x1>
     ace:	9e e7       	ldi	r25, 0x7E	; 126
     ad0:	90 83       	st	Z, r25
     ad2:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <oled_write_data>
     ad6:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <oled_write_data+0x1>
     ada:	9c e3       	ldi	r25, 0x3C	; 60
     adc:	90 83       	st	Z, r25
     ade:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <oled_write_data>
     ae2:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <oled_write_data+0x1>
     ae6:	80 83       	st	Z, r24
     ae8:	08 95       	ret

00000aea <build_node>:

    return child;
}

int update_element_down(Node *current_node, int child){

     aea:	cf 92       	push	r12
     aec:	df 92       	push	r13
     aee:	ef 92       	push	r14
     af0:	ff 92       	push	r15
     af2:	0f 93       	push	r16
     af4:	1f 93       	push	r17
     af6:	cf 93       	push	r28
     af8:	df 93       	push	r29
     afa:	ec 01       	movw	r28, r24
     afc:	69 01       	movw	r12, r18
     afe:	79 83       	std	Y+1, r23	; 0x01
     b00:	68 83       	st	Y, r22
     b02:	ba 01       	movw	r22, r20
     b04:	46 96       	adiw	r24, 0x16	; 22
     b06:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <strcpy>
     b0a:	dd 8a       	std	Y+21, r13	; 0x15
     b0c:	cc 8a       	std	Y+20, r12	; 0x14
     b0e:	fb 8a       	std	Y+19, r15	; 0x13
     b10:	ea 8a       	std	Y+18, r14	; 0x12
     b12:	a0 2f       	mov	r26, r16
     b14:	b1 2f       	mov	r27, r17
     b16:	fe 01       	movw	r30, r28
     b18:	32 96       	adiw	r30, 0x02	; 2
     b1a:	ce 01       	movw	r24, r28
     b1c:	42 96       	adiw	r24, 0x12	; 18
     b1e:	2d 91       	ld	r18, X+
     b20:	3d 91       	ld	r19, X+
     b22:	21 93       	st	Z+, r18
     b24:	31 93       	st	Z+, r19
     b26:	e8 17       	cp	r30, r24
     b28:	f9 07       	cpc	r31, r25
     b2a:	c9 f7       	brne	.-14     	; 0xb1e <build_node+0x34>
     b2c:	df 91       	pop	r29
     b2e:	cf 91       	pop	r28
     b30:	1f 91       	pop	r17
     b32:	0f 91       	pop	r16
     b34:	ff 90       	pop	r15
     b36:	ef 90       	pop	r14
     b38:	df 90       	pop	r13
     b3a:	cf 90       	pop	r12
     b3c:	08 95       	ret

00000b3e <go_up>:
     b3e:	dc 01       	movw	r26, r24
     b40:	ed 91       	ld	r30, X+
     b42:	fc 91       	ld	r31, X
     b44:	11 97       	sbiw	r26, 0x01	; 1
     b46:	20 81       	ld	r18, Z
     b48:	31 81       	ldd	r19, Z+1	; 0x01
     b4a:	21 15       	cp	r18, r1
     b4c:	31 05       	cpc	r19, r1
     b4e:	11 f0       	breq	.+4      	; 0xb54 <go_up+0x16>
     b50:	2d 93       	st	X+, r18
     b52:	3c 93       	st	X, r19
     b54:	08 95       	ret

00000b56 <go_down>:
     b56:	fc 01       	movw	r30, r24
     b58:	a0 81       	ld	r26, Z
     b5a:	b1 81       	ldd	r27, Z+1	; 0x01
     b5c:	fb 01       	movw	r30, r22
     b5e:	ee 0f       	add	r30, r30
     b60:	ff 1f       	adc	r31, r31
     b62:	ea 0f       	add	r30, r26
     b64:	fb 1f       	adc	r31, r27
     b66:	20 81       	ld	r18, Z
     b68:	31 81       	ldd	r19, Z+1	; 0x01
     b6a:	21 15       	cp	r18, r1
     b6c:	31 05       	cpc	r19, r1
     b6e:	21 f0       	breq	.+8      	; 0xb78 <go_down+0x22>
     b70:	fc 01       	movw	r30, r24
     b72:	31 83       	std	Z+1, r19	; 0x01
     b74:	20 83       	st	Z, r18
     b76:	08 95       	ret
     b78:	54 96       	adiw	r26, 0x14	; 20
     b7a:	ed 91       	ld	r30, X+
     b7c:	fc 91       	ld	r31, X
     b7e:	55 97       	sbiw	r26, 0x15	; 21
     b80:	30 97       	sbiw	r30, 0x00	; 0
     b82:	09 f0       	breq	.+2      	; 0xb86 <go_down+0x30>
     b84:	09 95       	icall
     b86:	08 95       	ret

00000b88 <wait_for_action>:
     b88:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <joystick_direction>
     b8c:	84 30       	cpi	r24, 0x04	; 4
     b8e:	29 f4       	brne	.+10     	; 0xb9a <wait_for_action+0x12>
     b90:	82 e0       	ldi	r24, 0x02	; 2
     b92:	0e 94 a9 09 	call	0x1352	; 0x1352 <usb_button_pushed>
     b96:	88 23       	and	r24, r24
     b98:	b9 f3       	breq	.-18     	; 0xb88 <wait_for_action>
     b9a:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <joystick_direction>
     b9e:	82 30       	cpi	r24, 0x02	; 2
     ba0:	99 f0       	breq	.+38     	; 0xbc8 <wait_for_action+0x40>
     ba2:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <joystick_direction>
     ba6:	83 30       	cpi	r24, 0x03	; 3
     ba8:	79 f0       	breq	.+30     	; 0xbc8 <wait_for_action+0x40>
     baa:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <joystick_direction>
     bae:	81 30       	cpi	r24, 0x01	; 1
     bb0:	59 f0       	breq	.+22     	; 0xbc8 <wait_for_action+0x40>
     bb2:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <joystick_direction>
     bb6:	88 23       	and	r24, r24
     bb8:	39 f0       	breq	.+14     	; 0xbc8 <wait_for_action+0x40>
     bba:	82 e0       	ldi	r24, 0x02	; 2
     bbc:	0e 94 a9 09 	call	0x1352	; 0x1352 <usb_button_pushed>
     bc0:	81 11       	cpse	r24, r1
     bc2:	01 c0       	rjmp	.+2      	; 0xbc6 <wait_for_action+0x3e>
     bc4:	08 95       	ret
     bc6:	85 e0       	ldi	r24, 0x05	; 5
     bc8:	08 95       	ret

00000bca <wait_for_neutral_joystick_position>:
     bca:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <joystick_direction>
     bce:	84 30       	cpi	r24, 0x04	; 4
     bd0:	e1 f7       	brne	.-8      	; 0xbca <wait_for_neutral_joystick_position>
     bd2:	08 95       	ret

00000bd4 <update_element_down>:
    child++;

    if(child == current_node->elements_on_screen + 1){
        child = 1;
     bd4:	6f 5f       	subi	r22, 0xFF	; 255
     bd6:	7f 4f       	sbci	r23, 0xFF	; 255
    }

     bd8:	fc 01       	movw	r30, r24
     bda:	82 89       	ldd	r24, Z+18	; 0x12
     bdc:	93 89       	ldd	r25, Z+19	; 0x13
     bde:	01 96       	adiw	r24, 0x01	; 1
     be0:	68 17       	cp	r22, r24
     be2:	79 07       	cpc	r23, r25
     be4:	11 f4       	brne	.+4      	; 0xbea <update_element_down+0x16>
    return child;
     be6:	61 e0       	ldi	r22, 0x01	; 1
     be8:	70 e0       	ldi	r23, 0x00	; 0
    
}


void menu(){
     bea:	cb 01       	movw	r24, r22
     bec:	08 95       	ret

00000bee <check_highscore>:
    oled_pos_set(0, 12);
    oled_print(&line1);

    print_selecting_arrow(child);
}

     bee:	20 91 e6 02 	lds	r18, 0x02E6	; 0x8002e6 <_1ST>
     bf2:	30 91 e7 02 	lds	r19, 0x02E7	; 0x8002e7 <_1ST+0x1>
     bf6:	82 17       	cp	r24, r18
     bf8:	93 07       	cpc	r25, r19
     bfa:	8c f0       	brlt	.+34     	; 0xc1e <check_highscore+0x30>
void check_highscore(int highscore){
     bfc:	40 91 e4 02 	lds	r20, 0x02E4	; 0x8002e4 <_2ND>
     c00:	50 91 e5 02 	lds	r21, 0x02E5	; 0x8002e5 <_2ND+0x1>
     c04:	50 93 d9 02 	sts	0x02D9, r21	; 0x8002d9 <_3RD+0x1>
     c08:	40 93 d8 02 	sts	0x02D8, r20	; 0x8002d8 <_3RD>
    if(highscore >= _1ST){   //check if new highscore
     c0c:	30 93 e5 02 	sts	0x02E5, r19	; 0x8002e5 <_2ND+0x1>
     c10:	20 93 e4 02 	sts	0x02E4, r18	; 0x8002e4 <_2ND>
		_3RD = _2ND;
     c14:	90 93 e7 02 	sts	0x02E7, r25	; 0x8002e7 <_1ST+0x1>
     c18:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <_1ST>
     c1c:	08 95       	ret
		_2ND = _1ST;
        _1ST = highscore;
		
     c1e:	20 91 e4 02 	lds	r18, 0x02E4	; 0x8002e4 <_2ND>
     c22:	30 91 e5 02 	lds	r19, 0x02E5	; 0x8002e5 <_2ND+0x1>
     c26:	28 17       	cp	r18, r24
     c28:	39 07       	cpc	r19, r25
     c2a:	4c f4       	brge	.+18     	; 0xc3e <check_highscore+0x50>
    }
     c2c:	30 93 d9 02 	sts	0x02D9, r19	; 0x8002d9 <_3RD+0x1>
     c30:	20 93 d8 02 	sts	0x02D8, r18	; 0x8002d8 <_3RD>
    else if(    (highscore < _1ST) && (highscore > _2ND)    )    {  //check if new second best
     c34:	90 93 e5 02 	sts	0x02E5, r25	; 0x8002e5 <_2ND+0x1>
     c38:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <_2ND>
     c3c:	08 95       	ret
		_3RD = _2ND;
        _2ND = highscore;
     c3e:	82 17       	cp	r24, r18
     c40:	93 07       	cpc	r25, r19
     c42:	5c f4       	brge	.+22     	; 0xc5a <check_highscore+0x6c>
     c44:	20 91 d8 02 	lds	r18, 0x02D8	; 0x8002d8 <_3RD>
     c48:	30 91 d9 02 	lds	r19, 0x02D9	; 0x8002d9 <_3RD+0x1>
     c4c:	28 17       	cp	r18, r24
     c4e:	39 07       	cpc	r19, r25
     c50:	24 f4       	brge	.+8      	; 0xc5a <check_highscore+0x6c>
    }
     c52:	90 93 d9 02 	sts	0x02D9, r25	; 0x8002d9 <_3RD+0x1>
     c56:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <_3RD>
     c5a:	08 95       	ret

00000c5c <play_game>:
void print_difficulty_menu_objects(int child){
	char line1[] = "Easy";
	char line2[] = "Medium";
	char line3[] = "Hard";

	oled_pos_set(0, 12);
     c5c:	cf 93       	push	r28
     c5e:	df 93       	push	r29
     c60:	cd b7       	in	r28, 0x3d	; 61
     c62:	de b7       	in	r29, 0x3e	; 62
     c64:	66 97       	sbiw	r28, 0x16	; 22
     c66:	0f b6       	in	r0, 0x3f	; 63
     c68:	f8 94       	cli
     c6a:	de bf       	out	0x3e, r29	; 62
     c6c:	0f be       	out	0x3f, r0	; 63
     c6e:	cd bf       	out	0x3d, r28	; 61
	oled_print(&line1);

     c70:	ce 01       	movw	r24, r28
     c72:	0c 96       	adiw	r24, 0x0c	; 12
     c74:	0e 94 dd 02 	call	0x5ba	; 0x5ba <message_handler>
	oled_pos_set(1, 12);
     c78:	ce 01       	movw	r24, r28
     c7a:	0c 96       	adiw	r24, 0x0c	; 12
     c7c:	0e 94 dd 02 	call	0x5ba	; 0x5ba <message_handler>
	
	oled_pos_set(2, 12);
	oled_print(&line3);
	
	print_selecting_arrow(child);       //Draw the arrow that selects the preferable option.
	
     c80:	0e 94 f6 02 	call	0x5ec	; 0x5ec <joyStick_Can_Message>
}

     c84:	ce 01       	movw	r24, r28
     c86:	01 96       	adiw	r24, 0x01	; 1
     c88:	0e 94 dd 02 	call	0x5ba	; 0x5ba <message_handler>

void print_selecting_arrow(int child){
     c8c:	8c 81       	ldd	r24, Y+4	; 0x04
     c8e:	8b 3a       	cpi	r24, 0xAB	; 171
     c90:	b9 f7       	brne	.-18     	; 0xc80 <play_game+0x24>
    oled_print_arrow(child - 1, 5);
	
}
     c92:	1f 92       	push	r1
     c94:	8f 93       	push	r24
     c96:	87 e9       	ldi	r24, 0x97	; 151
     c98:	91 e0       	ldi	r25, 0x01	; 1
     c9a:	9f 93       	push	r25
     c9c:	8f 93       	push	r24
     c9e:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <printf>

void play_game(){
	
	// Empties buffer if needed
	message_handler();
	message_handler();
     ca2:	8d 81       	ldd	r24, Y+5	; 0x05
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	0e 94 f7 05 	call	0xbee	; 0xbee <check_highscore>
	
	// Create message that is to be received when game is over
     caa:	0f 90       	pop	r0
     cac:	0f 90       	pop	r0
     cae:	0f 90       	pop	r0
     cb0:	0f 90       	pop	r0
     cb2:	66 96       	adiw	r28, 0x16	; 22
     cb4:	0f b6       	in	r0, 0x3f	; 63
     cb6:	f8 94       	cli
     cb8:	de bf       	out	0x3e, r29	; 62
     cba:	0f be       	out	0x3f, r0	; 63
     cbc:	cd bf       	out	0x3d, r28	; 61
     cbe:	df 91       	pop	r29
     cc0:	cf 91       	pop	r28
     cc2:	08 95       	ret

00000cc4 <print_selecting_arrow>:
    
    print_selecting_arrow(child);

}

void print_difficulty_menu_objects(int child){
     cc4:	65 e0       	ldi	r22, 0x05	; 5
     cc6:	81 50       	subi	r24, 0x01	; 1
     cc8:	0e 94 56 05 	call	0xaac	; 0xaac <oled_print_arrow>
     ccc:	08 95       	ret

00000cce <print_main_menu_objects>:

void print_main_menu_objects(int child){
    char line1[] = "play";
    char line2[] = "Score";
	char line3[] = "Difficulty";

     cce:	0f 93       	push	r16
     cd0:	1f 93       	push	r17
     cd2:	cf 93       	push	r28
     cd4:	df 93       	push	r29
     cd6:	cd b7       	in	r28, 0x3d	; 61
     cd8:	de b7       	in	r29, 0x3e	; 62
     cda:	2b 97       	sbiw	r28, 0x0b	; 11
     cdc:	0f b6       	in	r0, 0x3f	; 63
     cde:	f8 94       	cli
     ce0:	de bf       	out	0x3e, r29	; 62
     ce2:	0f be       	out	0x3f, r0	; 63
     ce4:	cd bf       	out	0x3d, r28	; 61
     ce6:	8c 01       	movw	r16, r24
    oled_pos_set(0, 12);
     ce8:	85 e0       	ldi	r24, 0x05	; 5
     cea:	ea ea       	ldi	r30, 0xAA	; 170
     cec:	f1 e0       	ldi	r31, 0x01	; 1
     cee:	de 01       	movw	r26, r28
     cf0:	11 96       	adiw	r26, 0x01	; 1
     cf2:	01 90       	ld	r0, Z+
     cf4:	0d 92       	st	X+, r0
     cf6:	8a 95       	dec	r24
     cf8:	e1 f7       	brne	.-8      	; 0xcf2 <print_main_menu_objects+0x24>
    oled_print(&line1);
     cfa:	86 e0       	ldi	r24, 0x06	; 6
     cfc:	ef ea       	ldi	r30, 0xAF	; 175
     cfe:	f1 e0       	ldi	r31, 0x01	; 1
     d00:	de 01       	movw	r26, r28
     d02:	16 96       	adiw	r26, 0x06	; 6
     d04:	01 90       	ld	r0, Z+
     d06:	0d 92       	st	X+, r0
     d08:	8a 95       	dec	r24
     d0a:	e1 f7       	brne	.-8      	; 0xd04 <print_main_menu_objects+0x36>

    oled_pos_set(1, 12);
     d0c:	6c e0       	ldi	r22, 0x0C	; 12
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	0e 94 61 04 	call	0x8c2	; 0x8c2 <oled_pos_set>
    oled_print(&line2);
     d14:	ce 01       	movw	r24, r28
     d16:	01 96       	adiw	r24, 0x01	; 1
     d18:	0e 94 39 05 	call	0xa72	; 0xa72 <oled_print>
	
	oled_pos_set(2, 12);
     d1c:	6c e0       	ldi	r22, 0x0C	; 12
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	0e 94 61 04 	call	0x8c2	; 0x8c2 <oled_pos_set>
	oled_print(&line3);
     d24:	ce 01       	movw	r24, r28
     d26:	06 96       	adiw	r24, 0x06	; 6
     d28:	0e 94 39 05 	call	0xa72	; 0xa72 <oled_print>
	
	
     d2c:	c8 01       	movw	r24, r16
     d2e:	0e 94 62 06 	call	0xcc4	; 0xcc4 <print_selecting_arrow>

    print_selecting_arrow(child);       //Draw the arrow that selects the preferable option.
     d32:	2b 96       	adiw	r28, 0x0b	; 11
     d34:	0f b6       	in	r0, 0x3f	; 63
     d36:	f8 94       	cli
     d38:	de bf       	out	0x3e, r29	; 62
     d3a:	0f be       	out	0x3f, r0	; 63
     d3c:	cd bf       	out	0x3d, r28	; 61
     d3e:	df 91       	pop	r29
     d40:	cf 91       	pop	r28
     d42:	1f 91       	pop	r17
     d44:	0f 91       	pop	r16
     d46:	08 95       	ret

00000d48 <print_new_game_menu_objects>:
    
}
     d48:	0f 93       	push	r16
     d4a:	1f 93       	push	r17
     d4c:	cf 93       	push	r28
     d4e:	df 93       	push	r29
     d50:	cd b7       	in	r28, 0x3d	; 61
     d52:	de b7       	in	r29, 0x3e	; 62
     d54:	2b 97       	sbiw	r28, 0x0b	; 11
     d56:	0f b6       	in	r0, 0x3f	; 63
     d58:	f8 94       	cli
     d5a:	de bf       	out	0x3e, r29	; 62
     d5c:	0f be       	out	0x3f, r0	; 63
     d5e:	cd bf       	out	0x3d, r28	; 61
     d60:	8c 01       	movw	r16, r24

void print_new_game_menu_objects(int child){
     d62:	8b e0       	ldi	r24, 0x0B	; 11
     d64:	e5 eb       	ldi	r30, 0xB5	; 181
     d66:	f1 e0       	ldi	r31, 0x01	; 1
     d68:	de 01       	movw	r26, r28
     d6a:	11 96       	adiw	r26, 0x01	; 1
     d6c:	01 90       	ld	r0, Z+
     d6e:	0d 92       	st	X+, r0
     d70:	8a 95       	dec	r24
     d72:	e1 f7       	brne	.-8      	; 0xd6c <print_new_game_menu_objects+0x24>

    char line1[] = "Start game";
     d74:	6c e0       	ldi	r22, 0x0C	; 12
     d76:	80 e0       	ldi	r24, 0x00	; 0
     d78:	0e 94 61 04 	call	0x8c2	; 0x8c2 <oled_pos_set>

     d7c:	ce 01       	movw	r24, r28
     d7e:	01 96       	adiw	r24, 0x01	; 1
     d80:	0e 94 39 05 	call	0xa72	; 0xa72 <oled_print>
    oled_pos_set(0, 12);
    oled_print(&line1);
     d84:	c8 01       	movw	r24, r16
     d86:	0e 94 62 06 	call	0xcc4	; 0xcc4 <print_selecting_arrow>

     d8a:	2b 96       	adiw	r28, 0x0b	; 11
     d8c:	0f b6       	in	r0, 0x3f	; 63
     d8e:	f8 94       	cli
     d90:	de bf       	out	0x3e, r29	; 62
     d92:	0f be       	out	0x3f, r0	; 63
     d94:	cd bf       	out	0x3d, r28	; 61
     d96:	df 91       	pop	r29
     d98:	cf 91       	pop	r28
     d9a:	1f 91       	pop	r17
     d9c:	0f 91       	pop	r16
     d9e:	08 95       	ret

00000da0 <print_score_menu_objects>:
    }
    else if(    (highscore < _2ND) && (highscore > _3RD)    ){ //check if new third best
        _3RD = highscore;
    }
    
}
     da0:	0f 93       	push	r16
     da2:	1f 93       	push	r17
     da4:	cf 93       	push	r28
     da6:	df 93       	push	r29
     da8:	cd b7       	in	r28, 0x3d	; 61
     daa:	de b7       	in	r29, 0x3e	; 62
     dac:	e7 97       	sbiw	r28, 0x37	; 55
     dae:	0f b6       	in	r0, 0x3f	; 63
     db0:	f8 94       	cli
     db2:	de bf       	out	0x3e, r29	; 62
     db4:	0f be       	out	0x3f, r0	; 63
     db6:	cd bf       	out	0x3d, r28	; 61
     db8:	8c 01       	movw	r16, r24

void print_score_menu_objects(int child){
     dba:	8a e0       	ldi	r24, 0x0A	; 10
     dbc:	e2 ed       	ldi	r30, 0xD2	; 210
     dbe:	f1 e0       	ldi	r31, 0x01	; 1
     dc0:	de 01       	movw	r26, r28
     dc2:	11 96       	adiw	r26, 0x01	; 1
     dc4:	01 90       	ld	r0, Z+
     dc6:	0d 92       	st	X+, r0
     dc8:	8a 95       	dec	r24
     dca:	e1 f7       	brne	.-8      	; 0xdc4 <print_score_menu_objects+0x24>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     dcc:	4a e0       	ldi	r20, 0x0A	; 10
     dce:	be 01       	movw	r22, r28
     dd0:	65 5f       	subi	r22, 0xF5	; 245
     dd2:	7f 4f       	sbci	r23, 0xFF	; 255
     dd4:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <_1ST>
     dd8:	90 91 e7 02 	lds	r25, 0x02E7	; 0x8002e7 <_1ST+0x1>
     ddc:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <__itoa_ncheck>
     de0:	4a e0       	ldi	r20, 0x0A	; 10
     de2:	be 01       	movw	r22, r28
     de4:	66 5e       	subi	r22, 0xE6	; 230
     de6:	7f 4f       	sbci	r23, 0xFF	; 255
     de8:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <_2ND>
     dec:	90 91 e5 02 	lds	r25, 0x02E5	; 0x8002e5 <_2ND+0x1>
     df0:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <__itoa_ncheck>
     df4:	4a e0       	ldi	r20, 0x0A	; 10
     df6:	be 01       	movw	r22, r28
     df8:	67 5d       	subi	r22, 0xD7	; 215
     dfa:	7f 4f       	sbci	r23, 0xFF	; 255
     dfc:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <_3RD>
     e00:	90 91 d9 02 	lds	r25, 0x02D9	; 0x8002d9 <_3RD+0x1>
     e04:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <__itoa_ncheck>
char score_string1[15], score_string2[15], score_string3[15];

itoa(_1ST, score_string1, 10);
itoa(_2ND, score_string2, 10);
itoa(_3RD, score_string3, 10);    

     e08:	6c e0       	ldi	r22, 0x0C	; 12
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	0e 94 61 04 	call	0x8c2	; 0x8c2 <oled_pos_set>
    
     e10:	ce 01       	movw	r24, r28
     e12:	01 96       	adiw	r24, 0x01	; 1
     e14:	0e 94 39 05 	call	0xa72	; 0xa72 <oled_print>
    oled_pos_set(0, 12);
    oled_print(&line1);
     e18:	6c e0       	ldi	r22, 0x0C	; 12
     e1a:	82 e0       	ldi	r24, 0x02	; 2
     e1c:	0e 94 61 04 	call	0x8c2	; 0x8c2 <oled_pos_set>

     e20:	80 ec       	ldi	r24, 0xC0	; 192
     e22:	91 e0       	ldi	r25, 0x01	; 1
     e24:	0e 94 39 05 	call	0xa72	; 0xa72 <oled_print>
    oled_pos_set(2, 12);
     e28:	ce 01       	movw	r24, r28
     e2a:	0b 96       	adiw	r24, 0x0b	; 11
     e2c:	0e 94 39 05 	call	0xa72	; 0xa72 <oled_print>
    oled_print("1ST  ");
    oled_print(&score_string1);
     e30:	6c e0       	ldi	r22, 0x0C	; 12
     e32:	84 e0       	ldi	r24, 0x04	; 4
     e34:	0e 94 61 04 	call	0x8c2	; 0x8c2 <oled_pos_set>
    
     e38:	86 ec       	ldi	r24, 0xC6	; 198
     e3a:	91 e0       	ldi	r25, 0x01	; 1
     e3c:	0e 94 39 05 	call	0xa72	; 0xa72 <oled_print>
    oled_pos_set(4, 12);
     e40:	ce 01       	movw	r24, r28
     e42:	4a 96       	adiw	r24, 0x1a	; 26
     e44:	0e 94 39 05 	call	0xa72	; 0xa72 <oled_print>
    oled_print("2ND  ");
    oled_print(&score_string2);
     e48:	6c e0       	ldi	r22, 0x0C	; 12
     e4a:	86 e0       	ldi	r24, 0x06	; 6
     e4c:	0e 94 61 04 	call	0x8c2	; 0x8c2 <oled_pos_set>

     e50:	8c ec       	ldi	r24, 0xCC	; 204
     e52:	91 e0       	ldi	r25, 0x01	; 1
     e54:	0e 94 39 05 	call	0xa72	; 0xa72 <oled_print>
    oled_pos_set(6, 12);
     e58:	ce 01       	movw	r24, r28
     e5a:	89 96       	adiw	r24, 0x29	; 41
     e5c:	0e 94 39 05 	call	0xa72	; 0xa72 <oled_print>
    oled_print("3RD  ");
    oled_print(&score_string3);
     e60:	c8 01       	movw	r24, r16
     e62:	0e 94 62 06 	call	0xcc4	; 0xcc4 <print_selecting_arrow>
    
    print_selecting_arrow(child);
     e66:	e7 96       	adiw	r28, 0x37	; 55
     e68:	0f b6       	in	r0, 0x3f	; 63
     e6a:	f8 94       	cli
     e6c:	de bf       	out	0x3e, r29	; 62
     e6e:	0f be       	out	0x3f, r0	; 63
     e70:	cd bf       	out	0x3d, r28	; 61
     e72:	df 91       	pop	r29
     e74:	cf 91       	pop	r28
     e76:	1f 91       	pop	r17
     e78:	0f 91       	pop	r16
     e7a:	08 95       	ret

00000e7c <update_screen>:
	
	// Checks the second letter in the name of the child node.
    if(((*current_node).name[1]) == 'a'){
        print_main_menu_objects(child);
    }
    else if(((*current_node).name[1]) == 'l'){
     e7c:	fc 01       	movw	r30, r24
     e7e:	87 89       	ldd	r24, Z+23	; 0x17
     e80:	81 36       	cpi	r24, 0x61	; 97
     e82:	21 f4       	brne	.+8      	; 0xe8c <update_screen+0x10>
        print_new_game_menu_objects(child);
    }
     e84:	cb 01       	movw	r24, r22
     e86:	0e 94 67 06 	call	0xcce	; 0xcce <print_main_menu_objects>
     e8a:	08 95       	ret
    else if(((*current_node).name[1]) == 'h'){
        print_score_menu_objects(child);
    }
     e8c:	8c 36       	cpi	r24, 0x6C	; 108
     e8e:	21 f4       	brne	.+8      	; 0xe98 <update_screen+0x1c>
	else if(((*current_node).name[1]) == 'i'){
		print_difficulty_menu_objects(child);
     e90:	cb 01       	movw	r24, r22
     e92:	0e 94 a4 06 	call	0xd48	; 0xd48 <print_new_game_menu_objects>
     e96:	08 95       	ret
	}

     e98:	88 36       	cpi	r24, 0x68	; 104
     e9a:	19 f4       	brne	.+6      	; 0xea2 <update_screen+0x26>
}
     e9c:	cb 01       	movw	r24, r22
     e9e:	0e 94 d0 06 	call	0xda0	; 0xda0 <print_score_menu_objects>
     ea2:	08 95       	ret

00000ea4 <menu>:


void menu(){
    static Node Main_menu, Score, Play, Difficulty, Easy, Medium, Hard, *current_node;

    current_node = &Main_menu; 
     ea4:	cf 93       	push	r28
     ea6:	df 93       	push	r29
     ea8:	cd b7       	in	r28, 0x3d	; 61
     eaa:	de b7       	in	r29, 0x3e	; 62
     eac:	e0 97       	sbiw	r28, 0x30	; 48
     eae:	0f b6       	in	r0, 0x3f	; 63
     eb0:	f8 94       	cli
     eb2:	de bf       	out	0x3e, r29	; 62
     eb4:	0f be       	out	0x3f, r0	; 63
     eb6:	cd bf       	out	0x3d, r28	; 61
    DIRECTION action; // Action from joystick

    // Build node structure
    Node* children1[8] = {&Play, &Score, &Difficulty ,0 ,0 ,0 ,0 ,0};
     eb8:	8c ea       	ldi	r24, 0xAC	; 172
     eba:	92 e0       	ldi	r25, 0x02	; 2
     ebc:	90 93 d7 02 	sts	0x02D7, r25	; 0x8002d7 <current_node.2444+0x1>
     ec0:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <current_node.2444>
    Node* children2[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    Node* children3[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	Node* children4[8] = {&Easy, &Medium, &Hard, 0, 0, 0, 0, 0};
		
		
     ec4:	80 e1       	ldi	r24, 0x10	; 16
     ec6:	ea e1       	ldi	r30, 0x1A	; 26
     ec8:	f1 e0       	ldi	r31, 0x01	; 1
     eca:	de 01       	movw	r26, r28
     ecc:	11 96       	adiw	r26, 0x01	; 1
     ece:	01 90       	ld	r0, Z+
     ed0:	0d 92       	st	X+, r0
     ed2:	8a 95       	dec	r24
     ed4:	e1 f7       	brne	.-8      	; 0xece <menu+0x2a>

     ed6:	80 e1       	ldi	r24, 0x10	; 16
     ed8:	5e 01       	movw	r10, r28
     eda:	91 e1       	ldi	r25, 0x11	; 17
     edc:	a9 0e       	add	r10, r25
     ede:	b1 1c       	adc	r11, r1
     ee0:	f5 01       	movw	r30, r10
     ee2:	98 2f       	mov	r25, r24
     ee4:	11 92       	st	Z+, r1
     ee6:	9a 95       	dec	r25
     ee8:	e9 f7       	brne	.-6      	; 0xee4 <menu+0x40>

     eea:	6e 01       	movw	r12, r28
     eec:	e1 e2       	ldi	r30, 0x21	; 33
     eee:	ce 0e       	add	r12, r30
     ef0:	d1 1c       	adc	r13, r1
     ef2:	f6 01       	movw	r30, r12
     ef4:	11 92       	st	Z+, r1
     ef6:	8a 95       	dec	r24
     ef8:	e9 f7       	brne	.-6      	; 0xef4 <menu+0x50>

    build_node(&Main_menu, NULL, "Main menu", NULL, &children1,3);
    build_node(&Play, &Main_menu, "Play game", play_game, &children2,1);
    build_node(&Score, &Main_menu, "Show score", NULL, &children3,8);
     efa:	68 94       	set
     efc:	ee 24       	eor	r14, r14
     efe:	e1 f8       	bld	r14, 1
     f00:	f1 2c       	mov	r15, r1
     f02:	8e 01       	movw	r16, r28
     f04:	0f 5f       	subi	r16, 0xFF	; 255
     f06:	1f 4f       	sbci	r17, 0xFF	; 255
     f08:	20 e0       	ldi	r18, 0x00	; 0
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	4c ed       	ldi	r20, 0xDC	; 220
     f0e:	51 e0       	ldi	r21, 0x01	; 1
     f10:	60 e0       	ldi	r22, 0x00	; 0
     f12:	70 e0       	ldi	r23, 0x00	; 0
     f14:	8c ea       	ldi	r24, 0xAC	; 172
     f16:	92 e0       	ldi	r25, 0x02	; 2
     f18:	0e 94 75 05 	call	0xaea	; 0xaea <build_node>
	build_node(&Difficulty, &Main_menu, "Difficulty", set_difficulty, &children2, 3);
     f1c:	ee 24       	eor	r14, r14
     f1e:	e3 94       	inc	r14
     f20:	f1 2c       	mov	r15, r1
     f22:	85 01       	movw	r16, r10
     f24:	2e e2       	ldi	r18, 0x2E	; 46
     f26:	36 e0       	ldi	r19, 0x06	; 6
     f28:	46 ee       	ldi	r20, 0xE6	; 230
     f2a:	51 e0       	ldi	r21, 0x01	; 1
     f2c:	6c ea       	ldi	r22, 0xAC	; 172
     f2e:	72 e0       	ldi	r23, 0x02	; 2
     f30:	82 e8       	ldi	r24, 0x82	; 130
     f32:	92 e0       	ldi	r25, 0x02	; 2
     f34:	0e 94 75 05 	call	0xaea	; 0xaea <build_node>
	
     f38:	68 94       	set
     f3a:	ee 24       	eor	r14, r14
     f3c:	e3 f8       	bld	r14, 3
     f3e:	f1 2c       	mov	r15, r1
     f40:	86 01       	movw	r16, r12
     f42:	20 e0       	ldi	r18, 0x00	; 0
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	40 ef       	ldi	r20, 0xF0	; 240
     f48:	51 e0       	ldi	r21, 0x01	; 1
     f4a:	6c ea       	ldi	r22, 0xAC	; 172
     f4c:	72 e0       	ldi	r23, 0x02	; 2
     f4e:	88 e5       	ldi	r24, 0x58	; 88
     f50:	92 e0       	ldi	r25, 0x02	; 2
     f52:	0e 94 75 05 	call	0xaea	; 0xaea <build_node>
    update_screen(current_node, child);

     f56:	61 e0       	ldi	r22, 0x01	; 1
     f58:	70 e0       	ldi	r23, 0x00	; 0
     f5a:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <current_node.2444>
     f5e:	90 91 d7 02 	lds	r25, 0x02D7	; 0x8002d7 <current_node.2444+0x1>
     f62:	0e 94 3e 07 	call	0xe7c	; 0xe7c <update_screen>
    DIRECTION action; // Action from joystick

    // Build node structure
    Node* children1[8] = {&Play, &Score, &Difficulty ,0 ,0 ,0 ,0 ,0};
    Node* children2[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    Node* children3[8] = {0, 0, 0, 0, 0, 0, 0, 0};
     f66:	ee 24       	eor	r14, r14
     f68:	e3 94       	inc	r14
     f6a:	f1 2c       	mov	r15, r1
	
    update_screen(current_node, child);

    while(1){
        action = wait_for_action();  //Wait for user to move the joystick
        oled_clear();  //Clears the screen.
     f6c:	0e 94 c4 05 	call	0xb88	; 0xb88 <wait_for_action>
     f70:	18 2f       	mov	r17, r24

     f72:	0e 94 6f 04 	call	0x8de	; 0x8de <oled_clear>
        switch(action)
        {
     f76:	11 30       	cpi	r17, 0x01	; 1
     f78:	11 f1       	breq	.+68     	; 0xfbe <menu+0x11a>
     f7a:	c8 f0       	brcs	.+50     	; 0xfae <menu+0x10a>
     f7c:	12 30       	cpi	r17, 0x02	; 2
     f7e:	19 f0       	breq	.+6      	; 0xf86 <menu+0xe2>
     f80:	13 30       	cpi	r17, 0x03	; 3
     f82:	61 f0       	breq	.+24     	; 0xf9c <menu+0xf8>
     f84:	24 c0       	rjmp	.+72     	; 0xfce <menu+0x12a>
int update_element_up(Node *current_node, int child){

    child--;

    if(child == 0){
        child = current_node->elements_on_screen;
     f86:	f1 e0       	ldi	r31, 0x01	; 1
     f88:	ef 1a       	sub	r14, r31
     f8a:	f1 08       	sbc	r15, r1
    }

     f8c:	01 f5       	brne	.+64     	; 0xfce <menu+0x12a>
    return child;
     f8e:	e0 91 d6 02 	lds	r30, 0x02D6	; 0x8002d6 <current_node.2444>
     f92:	f0 91 d7 02 	lds	r31, 0x02D7	; 0x8002d7 <current_node.2444+0x1>
     f96:	e2 88       	ldd	r14, Z+18	; 0x12
     f98:	f3 88       	ldd	r15, Z+19	; 0x13
     f9a:	19 c0       	rjmp	.+50     	; 0xfce <menu+0x12a>
                //update_screen(current_node, child);
                child = update_element_up(current_node, child);
              break;
          case DOWN:
                child = update_element_down(current_node, child);
              break;
     f9c:	b7 01       	movw	r22, r14
     f9e:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <current_node.2444>
     fa2:	90 91 d7 02 	lds	r25, 0x02D7	; 0x8002d7 <current_node.2444+0x1>
     fa6:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <update_element_down>
     faa:	7c 01       	movw	r14, r24
          case LEFT:
     fac:	10 c0       	rjmp	.+32     	; 0xfce <menu+0x12a>
                go_up(&current_node);
                child = 1;
     fae:	86 ed       	ldi	r24, 0xD6	; 214
     fb0:	92 e0       	ldi	r25, 0x02	; 2
     fb2:	0e 94 9f 05 	call	0xb3e	; 0xb3e <go_up>
              break;
     fb6:	ee 24       	eor	r14, r14
     fb8:	e3 94       	inc	r14
     fba:	f1 2c       	mov	r15, r1
          case RIGHT:
     fbc:	08 c0       	rjmp	.+16     	; 0xfce <menu+0x12a>
                go_down(&current_node, child);
                child = 1;
     fbe:	b7 01       	movw	r22, r14
     fc0:	86 ed       	ldi	r24, 0xD6	; 214
     fc2:	92 e0       	ldi	r25, 0x02	; 2
     fc4:	0e 94 ab 05 	call	0xb56	; 0xb56 <go_down>
              break;
     fc8:	ee 24       	eor	r14, r14
     fca:	e3 94       	inc	r14
     fcc:	f1 2c       	mov	r15, r1
        }
        update_screen(current_node, child);
        wait_for_neutral_joystick_position();
    }
}

     fce:	b7 01       	movw	r22, r14
     fd0:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <current_node.2444>
     fd4:	90 91 d7 02 	lds	r25, 0x02D7	; 0x8002d7 <current_node.2444+0x1>
     fd8:	0e 94 3e 07 	call	0xe7c	; 0xe7c <update_screen>

     fdc:	0e 94 e5 05 	call	0xbca	; 0xbca <wait_for_neutral_joystick_position>
void print_main_menu_objects(int child){
     fe0:	c5 cf       	rjmp	.-118    	; 0xf6c <menu+0xc8>

00000fe2 <pos_read>:
#include <avr/io.h>
#include <stdio.h>
#include "pos_read.h"


void pos_read(position* pos){
     fe2:	8f 92       	push	r8
     fe4:	9f 92       	push	r9
     fe6:	af 92       	push	r10
     fe8:	bf 92       	push	r11
     fea:	cf 92       	push	r12
     fec:	df 92       	push	r13
     fee:	ef 92       	push	r14
     ff0:	ff 92       	push	r15
     ff2:	0f 93       	push	r16
     ff4:	1f 93       	push	r17
     ff6:	cf 93       	push	r28
     ff8:	df 93       	push	r29
     ffa:	7c 01       	movw	r14, r24

    int ADC_Y = ADC_read(0);
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ADC_read>
    1002:	c8 2f       	mov	r28, r24
    1004:	d0 e0       	ldi	r29, 0x00	; 0
    int ADC_X = ADC_read(1);
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ADC_read>
    100c:	68 2f       	mov	r22, r24
    100e:	70 e0       	ldi	r23, 0x00	; 0

    // X read

    if((ADC_X >= (P_cal.center_X - 20)) && (ADC_X <= (P_cal.center_X + 20))){ //Deadspace for joystick
    1010:	00 91 da 02 	lds	r16, 0x02DA	; 0x8002da <P_cal>
    1014:	10 91 db 02 	lds	r17, 0x02DB	; 0x8002db <P_cal+0x1>
    1018:	c8 01       	movw	r24, r16
    101a:	44 97       	sbiw	r24, 0x14	; 20
    101c:	68 17       	cp	r22, r24
    101e:	79 07       	cpc	r23, r25
    1020:	0c f4       	brge	.+2      	; 0x1024 <pos_read+0x42>
    1022:	b6 c0       	rjmp	.+364    	; 0x1190 <pos_read+0x1ae>
    1024:	88 96       	adiw	r24, 0x28	; 40
    1026:	86 17       	cp	r24, r22
    1028:	97 07       	cpc	r25, r23
    102a:	0c f0       	brlt	.+2      	; 0x102e <pos_read+0x4c>
    102c:	4c c0       	rjmp	.+152    	; 0x10c6 <pos_read+0xe4>
        ADC_X = 0;
    }
    else if(ADC_X > (P_cal.center_X + 20)){
        ADC_X = (ADC_X - P_cal.center_X) * 100.0 / (255.0 - P_cal.center_X);  //
    102e:	60 1b       	sub	r22, r16
    1030:	71 0b       	sbc	r23, r17
    1032:	07 2e       	mov	r0, r23
    1034:	00 0c       	add	r0, r0
    1036:	88 0b       	sbc	r24, r24
    1038:	99 0b       	sbc	r25, r25
    103a:	0e 94 c3 0b 	call	0x1786	; 0x1786 <__floatsisf>
    103e:	20 e0       	ldi	r18, 0x00	; 0
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	48 ec       	ldi	r20, 0xC8	; 200
    1044:	52 e4       	ldi	r21, 0x42	; 66
    1046:	0e 94 a7 0c 	call	0x194e	; 0x194e <__mulsf3>
    104a:	4b 01       	movw	r8, r22
    104c:	5c 01       	movw	r10, r24
    104e:	b8 01       	movw	r22, r16
    1050:	11 0f       	add	r17, r17
    1052:	88 0b       	sbc	r24, r24
    1054:	99 0b       	sbc	r25, r25
    1056:	0e 94 c3 0b 	call	0x1786	; 0x1786 <__floatsisf>
    105a:	9b 01       	movw	r18, r22
    105c:	ac 01       	movw	r20, r24
    105e:	60 e0       	ldi	r22, 0x00	; 0
    1060:	70 e0       	ldi	r23, 0x00	; 0
    1062:	8f e7       	ldi	r24, 0x7F	; 127
    1064:	93 e4       	ldi	r25, 0x43	; 67
    1066:	0e 94 35 0a 	call	0x146a	; 0x146a <__subsf3>
    106a:	9b 01       	movw	r18, r22
    106c:	ac 01       	movw	r20, r24
    106e:	c5 01       	movw	r24, r10
    1070:	b4 01       	movw	r22, r8
    1072:	0e 94 19 0b 	call	0x1632	; 0x1632 <__divsf3>
    1076:	0e 94 8b 0b 	call	0x1716	; 0x1716 <__fixsfsi>
    107a:	6b 01       	movw	r12, r22
    107c:	26 c0       	rjmp	.+76     	; 0x10ca <pos_read+0xe8>
    }

    else if (ADC_X < (P_cal.center_X - 20)){
        ADC_X = (ADC_X / ((float)P_cal.center_X)) * 100 - 100;   // // Scaling when value is larger then center value
    107e:	07 2e       	mov	r0, r23
    1080:	00 0c       	add	r0, r0
    1082:	88 0b       	sbc	r24, r24
    1084:	99 0b       	sbc	r25, r25
    1086:	0e 94 c3 0b 	call	0x1786	; 0x1786 <__floatsisf>
    108a:	4b 01       	movw	r8, r22
    108c:	5c 01       	movw	r10, r24
    108e:	b8 01       	movw	r22, r16
    1090:	11 0f       	add	r17, r17
    1092:	88 0b       	sbc	r24, r24
    1094:	99 0b       	sbc	r25, r25
    1096:	0e 94 c3 0b 	call	0x1786	; 0x1786 <__floatsisf>
    109a:	9b 01       	movw	r18, r22
    109c:	ac 01       	movw	r20, r24
    109e:	c5 01       	movw	r24, r10
    10a0:	b4 01       	movw	r22, r8
    10a2:	0e 94 19 0b 	call	0x1632	; 0x1632 <__divsf3>
    10a6:	20 e0       	ldi	r18, 0x00	; 0
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	48 ec       	ldi	r20, 0xC8	; 200
    10ac:	52 e4       	ldi	r21, 0x42	; 66
    10ae:	0e 94 a7 0c 	call	0x194e	; 0x194e <__mulsf3>
    10b2:	20 e0       	ldi	r18, 0x00	; 0
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	48 ec       	ldi	r20, 0xC8	; 200
    10b8:	52 e4       	ldi	r21, 0x42	; 66
    10ba:	0e 94 35 0a 	call	0x146a	; 0x146a <__subsf3>
    10be:	0e 94 8b 0b 	call	0x1716	; 0x1716 <__fixsfsi>
    10c2:	6b 01       	movw	r12, r22
    10c4:	02 c0       	rjmp	.+4      	; 0x10ca <pos_read+0xe8>
    int ADC_X = ADC_read(1);

    // X read

    if((ADC_X >= (P_cal.center_X - 20)) && (ADC_X <= (P_cal.center_X + 20))){ //Deadspace for joystick
        ADC_X = 0;
    10c6:	c1 2c       	mov	r12, r1
    10c8:	d1 2c       	mov	r13, r1
        ADC_X = (ADC_X / ((float)P_cal.center_X)) * 100 - 100;   // // Scaling when value is larger then center value
    }

    // Y read

    if(ADC_Y >= (P_cal.center_Y - 80) && ADC_Y <= (P_cal.center_Y + 80)){  //Deadspace for joystick
    10ca:	00 91 dc 02 	lds	r16, 0x02DC	; 0x8002dc <P_cal+0x2>
    10ce:	10 91 dd 02 	lds	r17, 0x02DD	; 0x8002dd <P_cal+0x3>
    10d2:	c8 01       	movw	r24, r16
    10d4:	80 55       	subi	r24, 0x50	; 80
    10d6:	91 09       	sbc	r25, r1
    10d8:	c8 17       	cp	r28, r24
    10da:	d9 07       	cpc	r29, r25
    10dc:	0c f4       	brge	.+2      	; 0x10e0 <pos_read+0xfe>
    10de:	5f c0       	rjmp	.+190    	; 0x119e <pos_read+0x1bc>
    10e0:	80 56       	subi	r24, 0x60	; 96
    10e2:	9f 4f       	sbci	r25, 0xFF	; 255
    10e4:	8c 17       	cp	r24, r28
    10e6:	9d 07       	cpc	r25, r29
    10e8:	0c f0       	brlt	.+2      	; 0x10ec <pos_read+0x10a>
    10ea:	4a c0       	rjmp	.+148    	; 0x1180 <pos_read+0x19e>
        ADC_Y = 0;
    }
    else if(ADC_Y > (P_cal.center_Y + 80)){
        ADC_Y = (ADC_Y - (P_cal.center_Y)) * 100.0 / (255.0 - P_cal.center_Y);  // Scaling when value is larger then center value
    10ec:	c0 1b       	sub	r28, r16
    10ee:	d1 0b       	sbc	r29, r17
    10f0:	be 01       	movw	r22, r28
    10f2:	dd 0f       	add	r29, r29
    10f4:	88 0b       	sbc	r24, r24
    10f6:	99 0b       	sbc	r25, r25
    10f8:	0e 94 c3 0b 	call	0x1786	; 0x1786 <__floatsisf>
    10fc:	20 e0       	ldi	r18, 0x00	; 0
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	48 ec       	ldi	r20, 0xC8	; 200
    1102:	52 e4       	ldi	r21, 0x42	; 66
    1104:	0e 94 a7 0c 	call	0x194e	; 0x194e <__mulsf3>
    1108:	4b 01       	movw	r8, r22
    110a:	5c 01       	movw	r10, r24
    110c:	b8 01       	movw	r22, r16
    110e:	11 0f       	add	r17, r17
    1110:	88 0b       	sbc	r24, r24
    1112:	99 0b       	sbc	r25, r25
    1114:	0e 94 c3 0b 	call	0x1786	; 0x1786 <__floatsisf>
    1118:	9b 01       	movw	r18, r22
    111a:	ac 01       	movw	r20, r24
    111c:	60 e0       	ldi	r22, 0x00	; 0
    111e:	70 e0       	ldi	r23, 0x00	; 0
    1120:	8f e7       	ldi	r24, 0x7F	; 127
    1122:	93 e4       	ldi	r25, 0x43	; 67
    1124:	0e 94 35 0a 	call	0x146a	; 0x146a <__subsf3>
    1128:	9b 01       	movw	r18, r22
    112a:	ac 01       	movw	r20, r24
    112c:	c5 01       	movw	r24, r10
    112e:	b4 01       	movw	r22, r8
    1130:	0e 94 19 0b 	call	0x1632	; 0x1632 <__divsf3>
    1134:	0e 94 8b 0b 	call	0x1716	; 0x1716 <__fixsfsi>
    1138:	25 c0       	rjmp	.+74     	; 0x1184 <pos_read+0x1a2>
    }

    else if (ADC_Y < (P_cal.center_Y - 80)){
        ADC_Y = (ADC_Y / ((float)P_cal.center_Y)) * 100 - 100;   // Scaling when value is smaller then center value
    113a:	be 01       	movw	r22, r28
    113c:	dd 0f       	add	r29, r29
    113e:	88 0b       	sbc	r24, r24
    1140:	99 0b       	sbc	r25, r25
    1142:	0e 94 c3 0b 	call	0x1786	; 0x1786 <__floatsisf>
    1146:	4b 01       	movw	r8, r22
    1148:	5c 01       	movw	r10, r24
    114a:	b8 01       	movw	r22, r16
    114c:	11 0f       	add	r17, r17
    114e:	88 0b       	sbc	r24, r24
    1150:	99 0b       	sbc	r25, r25
    1152:	0e 94 c3 0b 	call	0x1786	; 0x1786 <__floatsisf>
    1156:	9b 01       	movw	r18, r22
    1158:	ac 01       	movw	r20, r24
    115a:	c5 01       	movw	r24, r10
    115c:	b4 01       	movw	r22, r8
    115e:	0e 94 19 0b 	call	0x1632	; 0x1632 <__divsf3>
    1162:	20 e0       	ldi	r18, 0x00	; 0
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	48 ec       	ldi	r20, 0xC8	; 200
    1168:	52 e4       	ldi	r21, 0x42	; 66
    116a:	0e 94 a7 0c 	call	0x194e	; 0x194e <__mulsf3>
    116e:	20 e0       	ldi	r18, 0x00	; 0
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	48 ec       	ldi	r20, 0xC8	; 200
    1174:	52 e4       	ldi	r21, 0x42	; 66
    1176:	0e 94 35 0a 	call	0x146a	; 0x146a <__subsf3>
    117a:	0e 94 8b 0b 	call	0x1716	; 0x1716 <__fixsfsi>
    117e:	02 c0       	rjmp	.+4      	; 0x1184 <pos_read+0x1a2>
    }

    // Y read

    if(ADC_Y >= (P_cal.center_Y - 80) && ADC_Y <= (P_cal.center_Y + 80)){  //Deadspace for joystick
        ADC_Y = 0;
    1180:	60 e0       	ldi	r22, 0x00	; 0
    1182:	70 e0       	ldi	r23, 0x00	; 0

    else if (ADC_Y < (P_cal.center_Y - 80)){
        ADC_Y = (ADC_Y / ((float)P_cal.center_Y)) * 100 - 100;   // Scaling when value is smaller then center value
    }

    pos -> posX = ADC_X;
    1184:	f7 01       	movw	r30, r14
    1186:	d1 82       	std	Z+1, r13	; 0x01
    1188:	c0 82       	st	Z, r12
    pos -> posY = ADC_Y;
    118a:	73 83       	std	Z+3, r23	; 0x03
    118c:	62 83       	std	Z+2, r22	; 0x02
}
    118e:	0e c0       	rjmp	.+28     	; 0x11ac <pos_read+0x1ca>
    // X read

    if((ADC_X >= (P_cal.center_X - 20)) && (ADC_X <= (P_cal.center_X + 20))){ //Deadspace for joystick
        ADC_X = 0;
    }
    else if(ADC_X > (P_cal.center_X + 20)){
    1190:	c8 01       	movw	r24, r16
    1192:	44 96       	adiw	r24, 0x14	; 20
    1194:	86 17       	cp	r24, r22
    1196:	97 07       	cpc	r25, r23
    1198:	0c f4       	brge	.+2      	; 0x119c <pos_read+0x1ba>
    119a:	49 cf       	rjmp	.-366    	; 0x102e <pos_read+0x4c>
    119c:	70 cf       	rjmp	.-288    	; 0x107e <pos_read+0x9c>
    // Y read

    if(ADC_Y >= (P_cal.center_Y - 80) && ADC_Y <= (P_cal.center_Y + 80)){  //Deadspace for joystick
        ADC_Y = 0;
    }
    else if(ADC_Y > (P_cal.center_Y + 80)){
    119e:	c8 01       	movw	r24, r16
    11a0:	80 5b       	subi	r24, 0xB0	; 176
    11a2:	9f 4f       	sbci	r25, 0xFF	; 255
    11a4:	8c 17       	cp	r24, r28
    11a6:	9d 07       	cpc	r25, r29
    11a8:	44 f6       	brge	.-112    	; 0x113a <pos_read+0x158>
    11aa:	a0 cf       	rjmp	.-192    	; 0x10ec <pos_read+0x10a>
        ADC_Y = (ADC_Y / ((float)P_cal.center_Y)) * 100 - 100;   // Scaling when value is smaller then center value
    }

    pos -> posX = ADC_X;
    pos -> posY = ADC_Y;
}
    11ac:	df 91       	pop	r29
    11ae:	cf 91       	pop	r28
    11b0:	1f 91       	pop	r17
    11b2:	0f 91       	pop	r16
    11b4:	ff 90       	pop	r15
    11b6:	ef 90       	pop	r14
    11b8:	df 90       	pop	r13
    11ba:	cf 90       	pop	r12
    11bc:	bf 90       	pop	r11
    11be:	af 90       	pop	r10
    11c0:	9f 90       	pop	r9
    11c2:	8f 90       	pop	r8
    11c4:	08 95       	ret

000011c6 <joystick_direction>:

DIRECTION joystick_direction(void){
    11c6:	8f 92       	push	r8
    11c8:	9f 92       	push	r9
    11ca:	af 92       	push	r10
    11cc:	bf 92       	push	r11
    11ce:	cf 92       	push	r12
    11d0:	df 92       	push	r13
    11d2:	ef 92       	push	r14
    11d4:	ff 92       	push	r15
    11d6:	cf 93       	push	r28
    11d8:	df 93       	push	r29

    pos_read(&P_pos);
    11da:	8e ed       	ldi	r24, 0xDE	; 222
    11dc:	92 e0       	ldi	r25, 0x02	; 2
    11de:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <pos_read>

    int angle = atan2(P_pos.posY, P_pos.posX);
    11e2:	ee ed       	ldi	r30, 0xDE	; 222
    11e4:	f2 e0       	ldi	r31, 0x02	; 2
    11e6:	e0 80       	ld	r14, Z
    11e8:	f1 80       	ldd	r15, Z+1	; 0x01
    11ea:	c2 81       	ldd	r28, Z+2	; 0x02
    11ec:	d3 81       	ldd	r29, Z+3	; 0x03
    11ee:	b7 01       	movw	r22, r14
    11f0:	0f 2c       	mov	r0, r15
    11f2:	00 0c       	add	r0, r0
    11f4:	88 0b       	sbc	r24, r24
    11f6:	99 0b       	sbc	r25, r25
    11f8:	0e 94 c3 0b 	call	0x1786	; 0x1786 <__floatsisf>
    11fc:	4b 01       	movw	r8, r22
    11fe:	5c 01       	movw	r10, r24
    1200:	be 01       	movw	r22, r28
    1202:	0d 2e       	mov	r0, r29
    1204:	00 0c       	add	r0, r0
    1206:	88 0b       	sbc	r24, r24
    1208:	99 0b       	sbc	r25, r25
    120a:	0e 94 c3 0b 	call	0x1786	; 0x1786 <__floatsisf>
    120e:	a5 01       	movw	r20, r10
    1210:	94 01       	movw	r18, r8
    1212:	0e 94 b5 0a 	call	0x156a	; 0x156a <atan2>

    if(!P_pos.posY & !P_pos.posX){
    1216:	21 e0       	ldi	r18, 0x01	; 1
    1218:	cd 2b       	or	r28, r29
    121a:	09 f0       	breq	.+2      	; 0x121e <joystick_direction+0x58>
    121c:	20 e0       	ldi	r18, 0x00	; 0
    121e:	22 23       	and	r18, r18
    1220:	31 f0       	breq	.+12     	; 0x122e <joystick_direction+0x68>
    1222:	21 e0       	ldi	r18, 0x01	; 1
    1224:	ef 28       	or	r14, r15
    1226:	09 f0       	breq	.+2      	; 0x122a <joystick_direction+0x64>
    1228:	20 e0       	ldi	r18, 0x00	; 0
    122a:	21 11       	cpse	r18, r1
    122c:	79 c0       	rjmp	.+242    	; 0x1320 <joystick_direction+0x15a>
        return NEUTRAL;
    }

    else if(angle >= -PI / 4.0 & angle <= PI/4.0){
    122e:	0e 94 8b 0b 	call	0x1716	; 0x1716 <__fixsfsi>
    1232:	07 2e       	mov	r0, r23
    1234:	00 0c       	add	r0, r0
    1236:	88 0b       	sbc	r24, r24
    1238:	99 0b       	sbc	r25, r25
    123a:	0e 94 c3 0b 	call	0x1786	; 0x1786 <__floatsisf>
    123e:	6b 01       	movw	r12, r22
    1240:	7c 01       	movw	r14, r24
    1242:	c1 e0       	ldi	r28, 0x01	; 1
    1244:	2b ed       	ldi	r18, 0xDB	; 219
    1246:	3f e0       	ldi	r19, 0x0F	; 15
    1248:	49 e4       	ldi	r20, 0x49	; 73
    124a:	5f eb       	ldi	r21, 0xBF	; 191
    124c:	0e 94 9a 0c 	call	0x1934	; 0x1934 <__gesf2>
    1250:	88 23       	and	r24, r24
    1252:	0c f4       	brge	.+2      	; 0x1256 <joystick_direction+0x90>
    1254:	c0 e0       	ldi	r28, 0x00	; 0
    1256:	cc 23       	and	r28, r28
    1258:	71 f0       	breq	.+28     	; 0x1276 <joystick_direction+0xb0>
    125a:	c1 e0       	ldi	r28, 0x01	; 1
    125c:	2b ed       	ldi	r18, 0xDB	; 219
    125e:	3f e0       	ldi	r19, 0x0F	; 15
    1260:	49 e4       	ldi	r20, 0x49	; 73
    1262:	5f e3       	ldi	r21, 0x3F	; 63
    1264:	c7 01       	movw	r24, r14
    1266:	b6 01       	movw	r22, r12
    1268:	0e 94 14 0b 	call	0x1628	; 0x1628 <__cmpsf2>
    126c:	18 16       	cp	r1, r24
    126e:	0c f4       	brge	.+2      	; 0x1272 <joystick_direction+0xac>
    1270:	c0 e0       	ldi	r28, 0x00	; 0
    1272:	c1 11       	cpse	r28, r1
    1274:	57 c0       	rjmp	.+174    	; 0x1324 <joystick_direction+0x15e>
        return RIGHT;
    }

    else if(angle >= -3 * PI/4.0 & angle <= -PI / 4.0){
    1276:	c1 e0       	ldi	r28, 0x01	; 1
    1278:	24 ee       	ldi	r18, 0xE4	; 228
    127a:	3b ec       	ldi	r19, 0xCB	; 203
    127c:	46 e1       	ldi	r20, 0x16	; 22
    127e:	50 ec       	ldi	r21, 0xC0	; 192
    1280:	c7 01       	movw	r24, r14
    1282:	b6 01       	movw	r22, r12
    1284:	0e 94 9a 0c 	call	0x1934	; 0x1934 <__gesf2>
    1288:	88 23       	and	r24, r24
    128a:	0c f4       	brge	.+2      	; 0x128e <joystick_direction+0xc8>
    128c:	c0 e0       	ldi	r28, 0x00	; 0
    128e:	cc 23       	and	r28, r28
    1290:	71 f0       	breq	.+28     	; 0x12ae <joystick_direction+0xe8>
    1292:	c1 e0       	ldi	r28, 0x01	; 1
    1294:	2b ed       	ldi	r18, 0xDB	; 219
    1296:	3f e0       	ldi	r19, 0x0F	; 15
    1298:	49 e4       	ldi	r20, 0x49	; 73
    129a:	5f eb       	ldi	r21, 0xBF	; 191
    129c:	c7 01       	movw	r24, r14
    129e:	b6 01       	movw	r22, r12
    12a0:	0e 94 14 0b 	call	0x1628	; 0x1628 <__cmpsf2>
    12a4:	18 16       	cp	r1, r24
    12a6:	0c f4       	brge	.+2      	; 0x12aa <joystick_direction+0xe4>
    12a8:	c0 e0       	ldi	r28, 0x00	; 0
    12aa:	c1 11       	cpse	r28, r1
    12ac:	3d c0       	rjmp	.+122    	; 0x1328 <joystick_direction+0x162>
        return DOWN;
    }

    else if(angle >= 3 * PI/4 | angle <= -3* PI / 4.0){
    12ae:	c1 e0       	ldi	r28, 0x01	; 1
    12b0:	24 ee       	ldi	r18, 0xE4	; 228
    12b2:	3b ec       	ldi	r19, 0xCB	; 203
    12b4:	46 e1       	ldi	r20, 0x16	; 22
    12b6:	50 e4       	ldi	r21, 0x40	; 64
    12b8:	c7 01       	movw	r24, r14
    12ba:	b6 01       	movw	r22, r12
    12bc:	0e 94 9a 0c 	call	0x1934	; 0x1934 <__gesf2>
    12c0:	88 23       	and	r24, r24
    12c2:	0c f4       	brge	.+2      	; 0x12c6 <joystick_direction+0x100>
    12c4:	c0 e0       	ldi	r28, 0x00	; 0
    12c6:	c1 11       	cpse	r28, r1
    12c8:	31 c0       	rjmp	.+98     	; 0x132c <joystick_direction+0x166>
    12ca:	c1 e0       	ldi	r28, 0x01	; 1
    12cc:	24 ee       	ldi	r18, 0xE4	; 228
    12ce:	3b ec       	ldi	r19, 0xCB	; 203
    12d0:	46 e1       	ldi	r20, 0x16	; 22
    12d2:	50 ec       	ldi	r21, 0xC0	; 192
    12d4:	c7 01       	movw	r24, r14
    12d6:	b6 01       	movw	r22, r12
    12d8:	0e 94 14 0b 	call	0x1628	; 0x1628 <__cmpsf2>
    12dc:	18 16       	cp	r1, r24
    12de:	0c f4       	brge	.+2      	; 0x12e2 <joystick_direction+0x11c>
    12e0:	c0 e0       	ldi	r28, 0x00	; 0
    12e2:	c1 11       	cpse	r28, r1
    12e4:	23 c0       	rjmp	.+70     	; 0x132c <joystick_direction+0x166>
        return LEFT;
    }

    else if(angle >= PI / 4 & angle <= 3*PI / 4.0){
    12e6:	c1 e0       	ldi	r28, 0x01	; 1
    12e8:	2b ed       	ldi	r18, 0xDB	; 219
    12ea:	3f e0       	ldi	r19, 0x0F	; 15
    12ec:	49 e4       	ldi	r20, 0x49	; 73
    12ee:	5f e3       	ldi	r21, 0x3F	; 63
    12f0:	c7 01       	movw	r24, r14
    12f2:	b6 01       	movw	r22, r12
    12f4:	0e 94 9a 0c 	call	0x1934	; 0x1934 <__gesf2>
    12f8:	88 23       	and	r24, r24
    12fa:	0c f4       	brge	.+2      	; 0x12fe <joystick_direction+0x138>
    12fc:	c0 e0       	ldi	r28, 0x00	; 0
    12fe:	cc 23       	and	r28, r28
    1300:	71 f0       	breq	.+28     	; 0x131e <joystick_direction+0x158>
    1302:	c1 e0       	ldi	r28, 0x01	; 1
    1304:	24 ee       	ldi	r18, 0xE4	; 228
    1306:	3b ec       	ldi	r19, 0xCB	; 203
    1308:	46 e1       	ldi	r20, 0x16	; 22
    130a:	50 e4       	ldi	r21, 0x40	; 64
    130c:	c7 01       	movw	r24, r14
    130e:	b6 01       	movw	r22, r12
    1310:	0e 94 14 0b 	call	0x1628	; 0x1628 <__cmpsf2>
    1314:	18 16       	cp	r1, r24
    1316:	0c f4       	brge	.+2      	; 0x131a <joystick_direction+0x154>
    1318:	c0 e0       	ldi	r28, 0x00	; 0
    131a:	c1 11       	cpse	r28, r1
    131c:	09 c0       	rjmp	.+18     	; 0x1330 <joystick_direction+0x16a>
        return UP;
    }
}
    131e:	09 c0       	rjmp	.+18     	; 0x1332 <joystick_direction+0x16c>
    pos_read(&P_pos);

    int angle = atan2(P_pos.posY, P_pos.posX);

    if(!P_pos.posY & !P_pos.posX){
        return NEUTRAL;
    1320:	84 e0       	ldi	r24, 0x04	; 4
    1322:	07 c0       	rjmp	.+14     	; 0x1332 <joystick_direction+0x16c>
    }

    else if(angle >= -PI / 4.0 & angle <= PI/4.0){
        return RIGHT;
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	05 c0       	rjmp	.+10     	; 0x1332 <joystick_direction+0x16c>
    }

    else if(angle >= -3 * PI/4.0 & angle <= -PI / 4.0){
        return DOWN;
    1328:	83 e0       	ldi	r24, 0x03	; 3
    132a:	03 c0       	rjmp	.+6      	; 0x1332 <joystick_direction+0x16c>
    }

    else if(angle >= 3 * PI/4 | angle <= -3* PI / 4.0){
        return LEFT;
    132c:	80 e0       	ldi	r24, 0x00	; 0
    132e:	01 c0       	rjmp	.+2      	; 0x1332 <joystick_direction+0x16c>
    }

    else if(angle >= PI / 4 & angle <= 3*PI / 4.0){
        return UP;
    1330:	82 e0       	ldi	r24, 0x02	; 2
    }
}
    1332:	df 91       	pop	r29
    1334:	cf 91       	pop	r28
    1336:	ff 90       	pop	r15
    1338:	ef 90       	pop	r14
    133a:	df 90       	pop	r13
    133c:	cf 90       	pop	r12
    133e:	bf 90       	pop	r11
    1340:	af 90       	pop	r10
    1342:	9f 90       	pop	r9
    1344:	8f 90       	pop	r8
    1346:	08 95       	ret

00001348 <pos_readSettings>:

void pos_readSettings(void){
	
	DDRB &= ~(1 << PB1);
    1348:	b9 98       	cbi	0x17, 1	; 23
	DDRD &= ~(1 << PD4);
    134a:	8c 98       	cbi	0x11, 4	; 17
	DDRD &= ~(1 << PD5);
    134c:	8d 98       	cbi	0x11, 5	; 17

	PORTB |= (1 << PB1); // internal pull up enable
    134e:	c1 9a       	sbi	0x18, 1	; 24
    1350:	08 95       	ret

00001352 <usb_button_pushed>:

uint8_t usb_button_pushed(USB_BUTTON BUTTON){

    uint8_t pressed;

    if(BUTTON == LEFT_BUTTON){
    1352:	81 30       	cpi	r24, 0x01	; 1
    1354:	19 f4       	brne	.+6      	; 0x135c <usb_button_pushed+0xa>
        pressed = (PIND & (1 << PD4) );
    1356:	80 b3       	in	r24, 0x10	; 16
    1358:	80 71       	andi	r24, 0x10	; 16
    135a:	08 95       	ret

		}

    if(BUTTON == RIGHT_BUTTON){
    135c:	81 11       	cpse	r24, r1
    135e:	03 c0       	rjmp	.+6      	; 0x1366 <usb_button_pushed+0x14>
        pressed =  (PIND & (1 << PD5) );
    1360:	80 b3       	in	r24, 0x10	; 16
    1362:	80 72       	andi	r24, 0x20	; 32
    1364:	08 95       	ret
		}

    if(BUTTON == JOYSTICK_BUTTON){
    1366:	82 30       	cpi	r24, 0x02	; 2
    1368:	31 f4       	brne	.+12     	; 0x1376 <usb_button_pushed+0x24>
        pressed =  (PINB & (1 << PB1) );
    136a:	86 b3       	in	r24, 0x16	; 22
        return !pressed;
    136c:	86 95       	lsr	r24
    136e:	81 70       	andi	r24, 0x01	; 1
    1370:	91 e0       	ldi	r25, 0x01	; 1
    1372:	89 27       	eor	r24, r25
    1374:	08 95       	ret
    1376:	80 e0       	ldi	r24, 0x00	; 0
		}

    return pressed;
}
    1378:	08 95       	ret

0000137a <main>:



int main(void)
{
    InitMusic();
    137a:	0e 94 df 03 	call	0x7be	; 0x7be <InitMusic>
    //playMusic(starwars, 2, 1);
    //playMusic(Mario_theme, 2, 3);
    playMusic(end_melody2, 1, 2);
    137e:	42 e0       	ldi	r20, 0x02	; 2
    1380:	61 e0       	ldi	r22, 0x01	; 1
    1382:	8a e0       	ldi	r24, 0x0A	; 10
    1384:	91 e0       	ldi	r25, 0x01	; 1
    1386:	0e 94 e5 03 	call	0x7ca	; 0x7ca <playMusic>
    
    SRAM_init();
    138a:	0e 94 1e 0a 	call	0x143c	; 0x143c <SRAM_init>
    ADC_timer_init();
    138e:	0e 94 0a 02 	call	0x414	; 0x414 <ADC_timer_init>
    USART_init();
    1392:	0e 94 25 0a 	call	0x144a	; 0x144a <USART_init>
    fdevopen(USART_send, USART_receive);
    1396:	6d e2       	ldi	r22, 0x2D	; 45
    1398:	7a e0       	ldi	r23, 0x0A	; 10
    139a:	81 e3       	ldi	r24, 0x31	; 49
    139c:	9a e0       	ldi	r25, 0x0A	; 10
    139e:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <fdevopen>
    ADC_calibrate(&P_cal);
    13a2:	8a ed       	ldi	r24, 0xDA	; 218
    13a4:	92 e0       	ldi	r25, 0x02	; 2
    13a6:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <ADC_calibrate>
    OLED_init();
    13aa:	0e 94 93 04 	call	0x926	; 0x926 <OLED_init>
    pos_readSettings();
    13ae:	0e 94 a4 09 	call	0x1348	; 0x1348 <pos_readSettings>
    oled_clear();
    13b2:	0e 94 6f 04 	call	0x8de	; 0x8de <oled_clear>
	CAN_init(MODE_NORMAL);
    13b6:	80 e0       	ldi	r24, 0x00	; 0
    13b8:	0e 94 17 02 	call	0x42e	; 0x42e <CAN_init>
    
    
	
    menu();
    13bc:	0e 94 52 07 	call	0xea4	; 0xea4 <menu>

    printf("Initiating node 1 \n\r");
    13c0:	8b ef       	ldi	r24, 0xFB	; 251
    13c2:	91 e0       	ldi	r25, 0x01	; 1
    13c4:	9f 93       	push	r25
    13c6:	8f 93       	push	r24
    13c8:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <printf>
    13cc:	0f 90       	pop	r0
    13ce:	0f 90       	pop	r0
	   joyStick_Can_Message();
        
        uint8_t sliderX = ADC_read(3);
        uint8_t sliderY = ADC_read(2);
  
        printf("Pos X val is %4d , Pos Y is %4d, sliderX is %4d,  sliderY is %4d  \n \r", P_pos.posX, P_pos.posY, sliderX, sliderY);
    13d0:	ce ed       	ldi	r28, 0xDE	; 222
    13d2:	d2 e0       	ldi	r29, 0x02	; 2
    13d4:	00 e1       	ldi	r16, 0x10	; 16
    13d6:	12 e0       	ldi	r17, 0x02	; 2
    printf("Initiating node 1 \n\r");
    
    //printf("showscore is: %c")
    while (1) {

	   joyStick_Can_Message();
    13d8:	0e 94 f6 02 	call	0x5ec	; 0x5ec <joyStick_Can_Message>
        
        uint8_t sliderX = ADC_read(3);
    13dc:	83 e0       	ldi	r24, 0x03	; 3
    13de:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ADC_read>
    13e2:	f8 2e       	mov	r15, r24
        uint8_t sliderY = ADC_read(2);
    13e4:	82 e0       	ldi	r24, 0x02	; 2
    13e6:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ADC_read>
  
        printf("Pos X val is %4d , Pos Y is %4d, sliderX is %4d,  sliderY is %4d  \n \r", P_pos.posX, P_pos.posY, sliderX, sliderY);
    13ea:	1f 92       	push	r1
    13ec:	8f 93       	push	r24
    13ee:	1f 92       	push	r1
    13f0:	ff 92       	push	r15
    13f2:	8b 81       	ldd	r24, Y+3	; 0x03
    13f4:	8f 93       	push	r24
    13f6:	8a 81       	ldd	r24, Y+2	; 0x02
    13f8:	8f 93       	push	r24
    13fa:	89 81       	ldd	r24, Y+1	; 0x01
    13fc:	8f 93       	push	r24
    13fe:	88 81       	ld	r24, Y
    1400:	8f 93       	push	r24
    1402:	1f 93       	push	r17
    1404:	0f 93       	push	r16
    1406:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <printf>
    140a:	8d b7       	in	r24, 0x3d	; 61
    140c:	9e b7       	in	r25, 0x3e	; 62
    140e:	0a 96       	adiw	r24, 0x0a	; 10
    1410:	0f b6       	in	r0, 0x3f	; 63
    1412:	f8 94       	cli
    1414:	9e bf       	out	0x3e, r25	; 62
    1416:	0f be       	out	0x3f, r0	; 63
    1418:	8d bf       	out	0x3d, r24	; 61
    141a:	de cf       	rjmp	.-68     	; 0x13d8 <main+0x5e>

0000141c <spi_write>:
#include "spi_driver.h"


void spi_write(char data){

    SPDR = data;
    141c:	8f b9       	out	0x0f, r24	; 15
    while( !(SPSR & (1<<SPIF)) );
    141e:	77 9b       	sbis	0x0e, 7	; 14
    1420:	fe cf       	rjmp	.-4      	; 0x141e <spi_write+0x2>

}
    1422:	08 95       	ret

00001424 <spi_read>:

char spi_read(void){

    spi_write(DUMMY);
    1424:	86 e5       	ldi	r24, 0x56	; 86
    1426:	0e 94 0e 0a 	call	0x141c	; 0x141c <spi_write>
    return SPDR;
    142a:	8f b1       	in	r24, 0x0f	; 15
}
    142c:	08 95       	ret

0000142e <spi_init>:

void spi_init(void){
    DDR_SPI |= (1 << SCK) | (1 << MOSI) | (1 << SS);
    142e:	87 b3       	in	r24, 0x17	; 23
    1430:	80 6b       	ori	r24, 0xB0	; 176
    1432:	87 bb       	out	0x17, r24	; 23

    SPCR |= (1 << SPE) | (1 << MSTR) | (1<<SPR0);  // Enable SPI and set as master
    1434:	8d b1       	in	r24, 0x0d	; 13
    1436:	81 65       	ori	r24, 0x51	; 81
    1438:	8d b9       	out	0x0d, r24	; 13
    143a:	08 95       	ret

0000143c <SRAM_init>:
 */

#include "SRAM_driver.h"

void SRAM_init(void){
    MCUCR |= (1 << SRE);     //external SRAM enable (mcu control register)
    143c:	85 b7       	in	r24, 0x35	; 53
    143e:	80 68       	ori	r24, 0x80	; 128
    1440:	85 bf       	out	0x35, r24	; 53
    SFIOR |= (1 << XMM2);    //excludes memory occupied by JTAG
    1442:	80 b7       	in	r24, 0x30	; 48
    1444:	80 62       	ori	r24, 0x20	; 32
    1446:	80 bf       	out	0x30, r24	; 48
    1448:	08 95       	ret

0000144a <USART_init>:
 */
#include "UART_driver.h"


void USART_init(void){
    UBRR0L = (uint8_t)(BAUD_PRESCALER);
    144a:	8f e1       	ldi	r24, 0x1F	; 31
    144c:	89 b9       	out	0x09, r24	; 9
    UBRR0H = (uint8_t)((uint8_t) BAUD_PRESCALER>>8);
    144e:	10 bc       	out	0x20, r1	; 32
    UCSR0B = (1 << RXEN0)|(1 << TXEN0);
    1450:	88 e1       	ldi	r24, 0x18	; 24
    1452:	8a b9       	out	0x0a, r24	; 10
    UCSR0C = (1 << URSEL0)|(1 << USBS0)|(3 << UCSZ00);
    1454:	8e e8       	ldi	r24, 0x8E	; 142
    1456:	80 bd       	out	0x20, r24	; 32
    1458:	08 95       	ret

0000145a <USART_receive>:
}

unsigned char USART_receive(void){
    while(!(UCSR0A & (1 << RXC0)));
    145a:	5f 9b       	sbis	0x0b, 7	; 11
    145c:	fe cf       	rjmp	.-4      	; 0x145a <USART_receive>
    return UDR0;
    145e:	8c b1       	in	r24, 0x0c	; 12
}
    1460:	08 95       	ret

00001462 <USART_send>:

void USART_send( unsigned char data){
    while(!(UCSR0A & (1 << UDRE0)));
    1462:	5d 9b       	sbis	0x0b, 5	; 11
    1464:	fe cf       	rjmp	.-4      	; 0x1462 <USART_send>
    UDR0 = data;
    1466:	8c b9       	out	0x0c, r24	; 12
    1468:	08 95       	ret

0000146a <__subsf3>:
    146a:	50 58       	subi	r21, 0x80	; 128

0000146c <__addsf3>:
    146c:	bb 27       	eor	r27, r27
    146e:	aa 27       	eor	r26, r26
    1470:	0e 94 4d 0a 	call	0x149a	; 0x149a <__addsf3x>
    1474:	0c 94 60 0c 	jmp	0x18c0	; 0x18c0 <__fp_round>
    1478:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <__fp_pscA>
    147c:	38 f0       	brcs	.+14     	; 0x148c <__addsf3+0x20>
    147e:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <__fp_pscB>
    1482:	20 f0       	brcs	.+8      	; 0x148c <__addsf3+0x20>
    1484:	39 f4       	brne	.+14     	; 0x1494 <__addsf3+0x28>
    1486:	9f 3f       	cpi	r25, 0xFF	; 255
    1488:	19 f4       	brne	.+6      	; 0x1490 <__addsf3+0x24>
    148a:	26 f4       	brtc	.+8      	; 0x1494 <__addsf3+0x28>
    148c:	0c 94 28 0c 	jmp	0x1850	; 0x1850 <__fp_nan>
    1490:	0e f4       	brtc	.+2      	; 0x1494 <__addsf3+0x28>
    1492:	e0 95       	com	r30
    1494:	e7 fb       	bst	r30, 7
    1496:	0c 94 22 0c 	jmp	0x1844	; 0x1844 <__fp_inf>

0000149a <__addsf3x>:
    149a:	e9 2f       	mov	r30, r25
    149c:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <__fp_split3>
    14a0:	58 f3       	brcs	.-42     	; 0x1478 <__addsf3+0xc>
    14a2:	ba 17       	cp	r27, r26
    14a4:	62 07       	cpc	r22, r18
    14a6:	73 07       	cpc	r23, r19
    14a8:	84 07       	cpc	r24, r20
    14aa:	95 07       	cpc	r25, r21
    14ac:	20 f0       	brcs	.+8      	; 0x14b6 <__addsf3x+0x1c>
    14ae:	79 f4       	brne	.+30     	; 0x14ce <__addsf3x+0x34>
    14b0:	a6 f5       	brtc	.+104    	; 0x151a <__addsf3x+0x80>
    14b2:	0c 94 93 0c 	jmp	0x1926	; 0x1926 <__fp_zero>
    14b6:	0e f4       	brtc	.+2      	; 0x14ba <__addsf3x+0x20>
    14b8:	e0 95       	com	r30
    14ba:	0b 2e       	mov	r0, r27
    14bc:	ba 2f       	mov	r27, r26
    14be:	a0 2d       	mov	r26, r0
    14c0:	0b 01       	movw	r0, r22
    14c2:	b9 01       	movw	r22, r18
    14c4:	90 01       	movw	r18, r0
    14c6:	0c 01       	movw	r0, r24
    14c8:	ca 01       	movw	r24, r20
    14ca:	a0 01       	movw	r20, r0
    14cc:	11 24       	eor	r1, r1
    14ce:	ff 27       	eor	r31, r31
    14d0:	59 1b       	sub	r21, r25
    14d2:	99 f0       	breq	.+38     	; 0x14fa <__addsf3x+0x60>
    14d4:	59 3f       	cpi	r21, 0xF9	; 249
    14d6:	50 f4       	brcc	.+20     	; 0x14ec <__addsf3x+0x52>
    14d8:	50 3e       	cpi	r21, 0xE0	; 224
    14da:	68 f1       	brcs	.+90     	; 0x1536 <__addsf3x+0x9c>
    14dc:	1a 16       	cp	r1, r26
    14de:	f0 40       	sbci	r31, 0x00	; 0
    14e0:	a2 2f       	mov	r26, r18
    14e2:	23 2f       	mov	r18, r19
    14e4:	34 2f       	mov	r19, r20
    14e6:	44 27       	eor	r20, r20
    14e8:	58 5f       	subi	r21, 0xF8	; 248
    14ea:	f3 cf       	rjmp	.-26     	; 0x14d2 <__addsf3x+0x38>
    14ec:	46 95       	lsr	r20
    14ee:	37 95       	ror	r19
    14f0:	27 95       	ror	r18
    14f2:	a7 95       	ror	r26
    14f4:	f0 40       	sbci	r31, 0x00	; 0
    14f6:	53 95       	inc	r21
    14f8:	c9 f7       	brne	.-14     	; 0x14ec <__addsf3x+0x52>
    14fa:	7e f4       	brtc	.+30     	; 0x151a <__addsf3x+0x80>
    14fc:	1f 16       	cp	r1, r31
    14fe:	ba 0b       	sbc	r27, r26
    1500:	62 0b       	sbc	r22, r18
    1502:	73 0b       	sbc	r23, r19
    1504:	84 0b       	sbc	r24, r20
    1506:	ba f0       	brmi	.+46     	; 0x1536 <__addsf3x+0x9c>
    1508:	91 50       	subi	r25, 0x01	; 1
    150a:	a1 f0       	breq	.+40     	; 0x1534 <__addsf3x+0x9a>
    150c:	ff 0f       	add	r31, r31
    150e:	bb 1f       	adc	r27, r27
    1510:	66 1f       	adc	r22, r22
    1512:	77 1f       	adc	r23, r23
    1514:	88 1f       	adc	r24, r24
    1516:	c2 f7       	brpl	.-16     	; 0x1508 <__addsf3x+0x6e>
    1518:	0e c0       	rjmp	.+28     	; 0x1536 <__addsf3x+0x9c>
    151a:	ba 0f       	add	r27, r26
    151c:	62 1f       	adc	r22, r18
    151e:	73 1f       	adc	r23, r19
    1520:	84 1f       	adc	r24, r20
    1522:	48 f4       	brcc	.+18     	; 0x1536 <__addsf3x+0x9c>
    1524:	87 95       	ror	r24
    1526:	77 95       	ror	r23
    1528:	67 95       	ror	r22
    152a:	b7 95       	ror	r27
    152c:	f7 95       	ror	r31
    152e:	9e 3f       	cpi	r25, 0xFE	; 254
    1530:	08 f0       	brcs	.+2      	; 0x1534 <__addsf3x+0x9a>
    1532:	b0 cf       	rjmp	.-160    	; 0x1494 <__addsf3+0x28>
    1534:	93 95       	inc	r25
    1536:	88 0f       	add	r24, r24
    1538:	08 f0       	brcs	.+2      	; 0x153c <__addsf3x+0xa2>
    153a:	99 27       	eor	r25, r25
    153c:	ee 0f       	add	r30, r30
    153e:	97 95       	ror	r25
    1540:	87 95       	ror	r24
    1542:	08 95       	ret
    1544:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <__fp_pscA>
    1548:	60 f0       	brcs	.+24     	; 0x1562 <__addsf3x+0xc8>
    154a:	80 e8       	ldi	r24, 0x80	; 128
    154c:	91 e0       	ldi	r25, 0x01	; 1
    154e:	09 f4       	brne	.+2      	; 0x1552 <__addsf3x+0xb8>
    1550:	9e ef       	ldi	r25, 0xFE	; 254
    1552:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <__fp_pscB>
    1556:	28 f0       	brcs	.+10     	; 0x1562 <__addsf3x+0xc8>
    1558:	40 e8       	ldi	r20, 0x80	; 128
    155a:	51 e0       	ldi	r21, 0x01	; 1
    155c:	71 f4       	brne	.+28     	; 0x157a <atan2+0x10>
    155e:	5e ef       	ldi	r21, 0xFE	; 254
    1560:	0c c0       	rjmp	.+24     	; 0x157a <atan2+0x10>
    1562:	0c 94 28 0c 	jmp	0x1850	; 0x1850 <__fp_nan>
    1566:	0c 94 93 0c 	jmp	0x1926	; 0x1926 <__fp_zero>

0000156a <atan2>:
    156a:	e9 2f       	mov	r30, r25
    156c:	e0 78       	andi	r30, 0x80	; 128
    156e:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <__fp_split3>
    1572:	40 f3       	brcs	.-48     	; 0x1544 <__addsf3x+0xaa>
    1574:	09 2e       	mov	r0, r25
    1576:	05 2a       	or	r0, r21
    1578:	b1 f3       	breq	.-20     	; 0x1566 <__addsf3x+0xcc>
    157a:	26 17       	cp	r18, r22
    157c:	37 07       	cpc	r19, r23
    157e:	48 07       	cpc	r20, r24
    1580:	59 07       	cpc	r21, r25
    1582:	38 f0       	brcs	.+14     	; 0x1592 <atan2+0x28>
    1584:	0e 2e       	mov	r0, r30
    1586:	07 f8       	bld	r0, 7
    1588:	e0 25       	eor	r30, r0
    158a:	69 f0       	breq	.+26     	; 0x15a6 <atan2+0x3c>
    158c:	e0 25       	eor	r30, r0
    158e:	e0 64       	ori	r30, 0x40	; 64
    1590:	0a c0       	rjmp	.+20     	; 0x15a6 <atan2+0x3c>
    1592:	ef 63       	ori	r30, 0x3F	; 63
    1594:	07 f8       	bld	r0, 7
    1596:	00 94       	com	r0
    1598:	07 fa       	bst	r0, 7
    159a:	db 01       	movw	r26, r22
    159c:	b9 01       	movw	r22, r18
    159e:	9d 01       	movw	r18, r26
    15a0:	dc 01       	movw	r26, r24
    15a2:	ca 01       	movw	r24, r20
    15a4:	ad 01       	movw	r20, r26
    15a6:	ef 93       	push	r30
    15a8:	0e 94 30 0b 	call	0x1660	; 0x1660 <__divsf3_pse>
    15ac:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <__fp_round>
    15b0:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <atan>
    15b4:	5f 91       	pop	r21
    15b6:	55 23       	and	r21, r21
    15b8:	39 f0       	breq	.+14     	; 0x15c8 <atan2+0x5e>
    15ba:	2b ed       	ldi	r18, 0xDB	; 219
    15bc:	3f e0       	ldi	r19, 0x0F	; 15
    15be:	49 e4       	ldi	r20, 0x49	; 73
    15c0:	50 fd       	sbrc	r21, 0
    15c2:	49 ec       	ldi	r20, 0xC9	; 201
    15c4:	0c 94 36 0a 	jmp	0x146c	; 0x146c <__addsf3>
    15c8:	08 95       	ret

000015ca <atan>:
    15ca:	df 93       	push	r29
    15cc:	dd 27       	eor	r29, r29
    15ce:	b9 2f       	mov	r27, r25
    15d0:	bf 77       	andi	r27, 0x7F	; 127
    15d2:	40 e8       	ldi	r20, 0x80	; 128
    15d4:	5f e3       	ldi	r21, 0x3F	; 63
    15d6:	16 16       	cp	r1, r22
    15d8:	17 06       	cpc	r1, r23
    15da:	48 07       	cpc	r20, r24
    15dc:	5b 07       	cpc	r21, r27
    15de:	18 f4       	brcc	.+6      	; 0x15e6 <atan+0x1c>
    15e0:	d9 2f       	mov	r29, r25
    15e2:	0e 94 9f 0c 	call	0x193e	; 0x193e <inverse>
    15e6:	9f 93       	push	r25
    15e8:	8f 93       	push	r24
    15ea:	7f 93       	push	r23
    15ec:	6f 93       	push	r22
    15ee:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <square>
    15f2:	e0 e7       	ldi	r30, 0x70	; 112
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	0e 94 2b 0c 	call	0x1856	; 0x1856 <__fp_powser>
    15fa:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <__fp_round>
    15fe:	2f 91       	pop	r18
    1600:	3f 91       	pop	r19
    1602:	4f 91       	pop	r20
    1604:	5f 91       	pop	r21
    1606:	0e 94 ba 0c 	call	0x1974	; 0x1974 <__mulsf3x>
    160a:	dd 23       	and	r29, r29
    160c:	51 f0       	breq	.+20     	; 0x1622 <atan+0x58>
    160e:	90 58       	subi	r25, 0x80	; 128
    1610:	a2 ea       	ldi	r26, 0xA2	; 162
    1612:	2a ed       	ldi	r18, 0xDA	; 218
    1614:	3f e0       	ldi	r19, 0x0F	; 15
    1616:	49 ec       	ldi	r20, 0xC9	; 201
    1618:	5f e3       	ldi	r21, 0x3F	; 63
    161a:	d0 78       	andi	r29, 0x80	; 128
    161c:	5d 27       	eor	r21, r29
    161e:	0e 94 4d 0a 	call	0x149a	; 0x149a <__addsf3x>
    1622:	df 91       	pop	r29
    1624:	0c 94 60 0c 	jmp	0x18c0	; 0x18c0 <__fp_round>

00001628 <__cmpsf2>:
    1628:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__fp_cmp>
    162c:	08 f4       	brcc	.+2      	; 0x1630 <__cmpsf2+0x8>
    162e:	81 e0       	ldi	r24, 0x01	; 1
    1630:	08 95       	ret

00001632 <__divsf3>:
    1632:	0e 94 2d 0b 	call	0x165a	; 0x165a <__divsf3x>
    1636:	0c 94 60 0c 	jmp	0x18c0	; 0x18c0 <__fp_round>
    163a:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <__fp_pscB>
    163e:	58 f0       	brcs	.+22     	; 0x1656 <__divsf3+0x24>
    1640:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <__fp_pscA>
    1644:	40 f0       	brcs	.+16     	; 0x1656 <__divsf3+0x24>
    1646:	29 f4       	brne	.+10     	; 0x1652 <__divsf3+0x20>
    1648:	5f 3f       	cpi	r21, 0xFF	; 255
    164a:	29 f0       	breq	.+10     	; 0x1656 <__divsf3+0x24>
    164c:	0c 94 22 0c 	jmp	0x1844	; 0x1844 <__fp_inf>
    1650:	51 11       	cpse	r21, r1
    1652:	0c 94 94 0c 	jmp	0x1928	; 0x1928 <__fp_szero>
    1656:	0c 94 28 0c 	jmp	0x1850	; 0x1850 <__fp_nan>

0000165a <__divsf3x>:
    165a:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <__fp_split3>
    165e:	68 f3       	brcs	.-38     	; 0x163a <__divsf3+0x8>

00001660 <__divsf3_pse>:
    1660:	99 23       	and	r25, r25
    1662:	b1 f3       	breq	.-20     	; 0x1650 <__divsf3+0x1e>
    1664:	55 23       	and	r21, r21
    1666:	91 f3       	breq	.-28     	; 0x164c <__divsf3+0x1a>
    1668:	95 1b       	sub	r25, r21
    166a:	55 0b       	sbc	r21, r21
    166c:	bb 27       	eor	r27, r27
    166e:	aa 27       	eor	r26, r26
    1670:	62 17       	cp	r22, r18
    1672:	73 07       	cpc	r23, r19
    1674:	84 07       	cpc	r24, r20
    1676:	38 f0       	brcs	.+14     	; 0x1686 <__divsf3_pse+0x26>
    1678:	9f 5f       	subi	r25, 0xFF	; 255
    167a:	5f 4f       	sbci	r21, 0xFF	; 255
    167c:	22 0f       	add	r18, r18
    167e:	33 1f       	adc	r19, r19
    1680:	44 1f       	adc	r20, r20
    1682:	aa 1f       	adc	r26, r26
    1684:	a9 f3       	breq	.-22     	; 0x1670 <__divsf3_pse+0x10>
    1686:	35 d0       	rcall	.+106    	; 0x16f2 <__divsf3_pse+0x92>
    1688:	0e 2e       	mov	r0, r30
    168a:	3a f0       	brmi	.+14     	; 0x169a <__divsf3_pse+0x3a>
    168c:	e0 e8       	ldi	r30, 0x80	; 128
    168e:	32 d0       	rcall	.+100    	; 0x16f4 <__divsf3_pse+0x94>
    1690:	91 50       	subi	r25, 0x01	; 1
    1692:	50 40       	sbci	r21, 0x00	; 0
    1694:	e6 95       	lsr	r30
    1696:	00 1c       	adc	r0, r0
    1698:	ca f7       	brpl	.-14     	; 0x168c <__divsf3_pse+0x2c>
    169a:	2b d0       	rcall	.+86     	; 0x16f2 <__divsf3_pse+0x92>
    169c:	fe 2f       	mov	r31, r30
    169e:	29 d0       	rcall	.+82     	; 0x16f2 <__divsf3_pse+0x92>
    16a0:	66 0f       	add	r22, r22
    16a2:	77 1f       	adc	r23, r23
    16a4:	88 1f       	adc	r24, r24
    16a6:	bb 1f       	adc	r27, r27
    16a8:	26 17       	cp	r18, r22
    16aa:	37 07       	cpc	r19, r23
    16ac:	48 07       	cpc	r20, r24
    16ae:	ab 07       	cpc	r26, r27
    16b0:	b0 e8       	ldi	r27, 0x80	; 128
    16b2:	09 f0       	breq	.+2      	; 0x16b6 <__divsf3_pse+0x56>
    16b4:	bb 0b       	sbc	r27, r27
    16b6:	80 2d       	mov	r24, r0
    16b8:	bf 01       	movw	r22, r30
    16ba:	ff 27       	eor	r31, r31
    16bc:	93 58       	subi	r25, 0x83	; 131
    16be:	5f 4f       	sbci	r21, 0xFF	; 255
    16c0:	3a f0       	brmi	.+14     	; 0x16d0 <__divsf3_pse+0x70>
    16c2:	9e 3f       	cpi	r25, 0xFE	; 254
    16c4:	51 05       	cpc	r21, r1
    16c6:	78 f0       	brcs	.+30     	; 0x16e6 <__divsf3_pse+0x86>
    16c8:	0c 94 22 0c 	jmp	0x1844	; 0x1844 <__fp_inf>
    16cc:	0c 94 94 0c 	jmp	0x1928	; 0x1928 <__fp_szero>
    16d0:	5f 3f       	cpi	r21, 0xFF	; 255
    16d2:	e4 f3       	brlt	.-8      	; 0x16cc <__divsf3_pse+0x6c>
    16d4:	98 3e       	cpi	r25, 0xE8	; 232
    16d6:	d4 f3       	brlt	.-12     	; 0x16cc <__divsf3_pse+0x6c>
    16d8:	86 95       	lsr	r24
    16da:	77 95       	ror	r23
    16dc:	67 95       	ror	r22
    16de:	b7 95       	ror	r27
    16e0:	f7 95       	ror	r31
    16e2:	9f 5f       	subi	r25, 0xFF	; 255
    16e4:	c9 f7       	brne	.-14     	; 0x16d8 <__divsf3_pse+0x78>
    16e6:	88 0f       	add	r24, r24
    16e8:	91 1d       	adc	r25, r1
    16ea:	96 95       	lsr	r25
    16ec:	87 95       	ror	r24
    16ee:	97 f9       	bld	r25, 7
    16f0:	08 95       	ret
    16f2:	e1 e0       	ldi	r30, 0x01	; 1
    16f4:	66 0f       	add	r22, r22
    16f6:	77 1f       	adc	r23, r23
    16f8:	88 1f       	adc	r24, r24
    16fa:	bb 1f       	adc	r27, r27
    16fc:	62 17       	cp	r22, r18
    16fe:	73 07       	cpc	r23, r19
    1700:	84 07       	cpc	r24, r20
    1702:	ba 07       	cpc	r27, r26
    1704:	20 f0       	brcs	.+8      	; 0x170e <__divsf3_pse+0xae>
    1706:	62 1b       	sub	r22, r18
    1708:	73 0b       	sbc	r23, r19
    170a:	84 0b       	sbc	r24, r20
    170c:	ba 0b       	sbc	r27, r26
    170e:	ee 1f       	adc	r30, r30
    1710:	88 f7       	brcc	.-30     	; 0x16f4 <__divsf3_pse+0x94>
    1712:	e0 95       	com	r30
    1714:	08 95       	ret

00001716 <__fixsfsi>:
    1716:	0e 94 92 0b 	call	0x1724	; 0x1724 <__fixunssfsi>
    171a:	68 94       	set
    171c:	b1 11       	cpse	r27, r1
    171e:	0c 94 94 0c 	jmp	0x1928	; 0x1928 <__fp_szero>
    1722:	08 95       	ret

00001724 <__fixunssfsi>:
    1724:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <__fp_splitA>
    1728:	88 f0       	brcs	.+34     	; 0x174c <__fixunssfsi+0x28>
    172a:	9f 57       	subi	r25, 0x7F	; 127
    172c:	98 f0       	brcs	.+38     	; 0x1754 <__fixunssfsi+0x30>
    172e:	b9 2f       	mov	r27, r25
    1730:	99 27       	eor	r25, r25
    1732:	b7 51       	subi	r27, 0x17	; 23
    1734:	b0 f0       	brcs	.+44     	; 0x1762 <__fixunssfsi+0x3e>
    1736:	e1 f0       	breq	.+56     	; 0x1770 <__fixunssfsi+0x4c>
    1738:	66 0f       	add	r22, r22
    173a:	77 1f       	adc	r23, r23
    173c:	88 1f       	adc	r24, r24
    173e:	99 1f       	adc	r25, r25
    1740:	1a f0       	brmi	.+6      	; 0x1748 <__fixunssfsi+0x24>
    1742:	ba 95       	dec	r27
    1744:	c9 f7       	brne	.-14     	; 0x1738 <__fixunssfsi+0x14>
    1746:	14 c0       	rjmp	.+40     	; 0x1770 <__fixunssfsi+0x4c>
    1748:	b1 30       	cpi	r27, 0x01	; 1
    174a:	91 f0       	breq	.+36     	; 0x1770 <__fixunssfsi+0x4c>
    174c:	0e 94 93 0c 	call	0x1926	; 0x1926 <__fp_zero>
    1750:	b1 e0       	ldi	r27, 0x01	; 1
    1752:	08 95       	ret
    1754:	0c 94 93 0c 	jmp	0x1926	; 0x1926 <__fp_zero>
    1758:	67 2f       	mov	r22, r23
    175a:	78 2f       	mov	r23, r24
    175c:	88 27       	eor	r24, r24
    175e:	b8 5f       	subi	r27, 0xF8	; 248
    1760:	39 f0       	breq	.+14     	; 0x1770 <__fixunssfsi+0x4c>
    1762:	b9 3f       	cpi	r27, 0xF9	; 249
    1764:	cc f3       	brlt	.-14     	; 0x1758 <__fixunssfsi+0x34>
    1766:	86 95       	lsr	r24
    1768:	77 95       	ror	r23
    176a:	67 95       	ror	r22
    176c:	b3 95       	inc	r27
    176e:	d9 f7       	brne	.-10     	; 0x1766 <__fixunssfsi+0x42>
    1770:	3e f4       	brtc	.+14     	; 0x1780 <__fixunssfsi+0x5c>
    1772:	90 95       	com	r25
    1774:	80 95       	com	r24
    1776:	70 95       	com	r23
    1778:	61 95       	neg	r22
    177a:	7f 4f       	sbci	r23, 0xFF	; 255
    177c:	8f 4f       	sbci	r24, 0xFF	; 255
    177e:	9f 4f       	sbci	r25, 0xFF	; 255
    1780:	08 95       	ret

00001782 <__floatunsisf>:
    1782:	e8 94       	clt
    1784:	09 c0       	rjmp	.+18     	; 0x1798 <__floatsisf+0x12>

00001786 <__floatsisf>:
    1786:	97 fb       	bst	r25, 7
    1788:	3e f4       	brtc	.+14     	; 0x1798 <__floatsisf+0x12>
    178a:	90 95       	com	r25
    178c:	80 95       	com	r24
    178e:	70 95       	com	r23
    1790:	61 95       	neg	r22
    1792:	7f 4f       	sbci	r23, 0xFF	; 255
    1794:	8f 4f       	sbci	r24, 0xFF	; 255
    1796:	9f 4f       	sbci	r25, 0xFF	; 255
    1798:	99 23       	and	r25, r25
    179a:	a9 f0       	breq	.+42     	; 0x17c6 <__floatsisf+0x40>
    179c:	f9 2f       	mov	r31, r25
    179e:	96 e9       	ldi	r25, 0x96	; 150
    17a0:	bb 27       	eor	r27, r27
    17a2:	93 95       	inc	r25
    17a4:	f6 95       	lsr	r31
    17a6:	87 95       	ror	r24
    17a8:	77 95       	ror	r23
    17aa:	67 95       	ror	r22
    17ac:	b7 95       	ror	r27
    17ae:	f1 11       	cpse	r31, r1
    17b0:	f8 cf       	rjmp	.-16     	; 0x17a2 <__floatsisf+0x1c>
    17b2:	fa f4       	brpl	.+62     	; 0x17f2 <__floatsisf+0x6c>
    17b4:	bb 0f       	add	r27, r27
    17b6:	11 f4       	brne	.+4      	; 0x17bc <__floatsisf+0x36>
    17b8:	60 ff       	sbrs	r22, 0
    17ba:	1b c0       	rjmp	.+54     	; 0x17f2 <__floatsisf+0x6c>
    17bc:	6f 5f       	subi	r22, 0xFF	; 255
    17be:	7f 4f       	sbci	r23, 0xFF	; 255
    17c0:	8f 4f       	sbci	r24, 0xFF	; 255
    17c2:	9f 4f       	sbci	r25, 0xFF	; 255
    17c4:	16 c0       	rjmp	.+44     	; 0x17f2 <__floatsisf+0x6c>
    17c6:	88 23       	and	r24, r24
    17c8:	11 f0       	breq	.+4      	; 0x17ce <__floatsisf+0x48>
    17ca:	96 e9       	ldi	r25, 0x96	; 150
    17cc:	11 c0       	rjmp	.+34     	; 0x17f0 <__floatsisf+0x6a>
    17ce:	77 23       	and	r23, r23
    17d0:	21 f0       	breq	.+8      	; 0x17da <__floatsisf+0x54>
    17d2:	9e e8       	ldi	r25, 0x8E	; 142
    17d4:	87 2f       	mov	r24, r23
    17d6:	76 2f       	mov	r23, r22
    17d8:	05 c0       	rjmp	.+10     	; 0x17e4 <__floatsisf+0x5e>
    17da:	66 23       	and	r22, r22
    17dc:	71 f0       	breq	.+28     	; 0x17fa <__floatsisf+0x74>
    17de:	96 e8       	ldi	r25, 0x86	; 134
    17e0:	86 2f       	mov	r24, r22
    17e2:	70 e0       	ldi	r23, 0x00	; 0
    17e4:	60 e0       	ldi	r22, 0x00	; 0
    17e6:	2a f0       	brmi	.+10     	; 0x17f2 <__floatsisf+0x6c>
    17e8:	9a 95       	dec	r25
    17ea:	66 0f       	add	r22, r22
    17ec:	77 1f       	adc	r23, r23
    17ee:	88 1f       	adc	r24, r24
    17f0:	da f7       	brpl	.-10     	; 0x17e8 <__floatsisf+0x62>
    17f2:	88 0f       	add	r24, r24
    17f4:	96 95       	lsr	r25
    17f6:	87 95       	ror	r24
    17f8:	97 f9       	bld	r25, 7
    17fa:	08 95       	ret

000017fc <__fp_cmp>:
    17fc:	99 0f       	add	r25, r25
    17fe:	00 08       	sbc	r0, r0
    1800:	55 0f       	add	r21, r21
    1802:	aa 0b       	sbc	r26, r26
    1804:	e0 e8       	ldi	r30, 0x80	; 128
    1806:	fe ef       	ldi	r31, 0xFE	; 254
    1808:	16 16       	cp	r1, r22
    180a:	17 06       	cpc	r1, r23
    180c:	e8 07       	cpc	r30, r24
    180e:	f9 07       	cpc	r31, r25
    1810:	c0 f0       	brcs	.+48     	; 0x1842 <__fp_cmp+0x46>
    1812:	12 16       	cp	r1, r18
    1814:	13 06       	cpc	r1, r19
    1816:	e4 07       	cpc	r30, r20
    1818:	f5 07       	cpc	r31, r21
    181a:	98 f0       	brcs	.+38     	; 0x1842 <__fp_cmp+0x46>
    181c:	62 1b       	sub	r22, r18
    181e:	73 0b       	sbc	r23, r19
    1820:	84 0b       	sbc	r24, r20
    1822:	95 0b       	sbc	r25, r21
    1824:	39 f4       	brne	.+14     	; 0x1834 <__fp_cmp+0x38>
    1826:	0a 26       	eor	r0, r26
    1828:	61 f0       	breq	.+24     	; 0x1842 <__fp_cmp+0x46>
    182a:	23 2b       	or	r18, r19
    182c:	24 2b       	or	r18, r20
    182e:	25 2b       	or	r18, r21
    1830:	21 f4       	brne	.+8      	; 0x183a <__fp_cmp+0x3e>
    1832:	08 95       	ret
    1834:	0a 26       	eor	r0, r26
    1836:	09 f4       	brne	.+2      	; 0x183a <__fp_cmp+0x3e>
    1838:	a1 40       	sbci	r26, 0x01	; 1
    183a:	a6 95       	lsr	r26
    183c:	8f ef       	ldi	r24, 0xFF	; 255
    183e:	81 1d       	adc	r24, r1
    1840:	81 1d       	adc	r24, r1
    1842:	08 95       	ret

00001844 <__fp_inf>:
    1844:	97 f9       	bld	r25, 7
    1846:	9f 67       	ori	r25, 0x7F	; 127
    1848:	80 e8       	ldi	r24, 0x80	; 128
    184a:	70 e0       	ldi	r23, 0x00	; 0
    184c:	60 e0       	ldi	r22, 0x00	; 0
    184e:	08 95       	ret

00001850 <__fp_nan>:
    1850:	9f ef       	ldi	r25, 0xFF	; 255
    1852:	80 ec       	ldi	r24, 0xC0	; 192
    1854:	08 95       	ret

00001856 <__fp_powser>:
    1856:	df 93       	push	r29
    1858:	cf 93       	push	r28
    185a:	1f 93       	push	r17
    185c:	0f 93       	push	r16
    185e:	ff 92       	push	r15
    1860:	ef 92       	push	r14
    1862:	df 92       	push	r13
    1864:	7b 01       	movw	r14, r22
    1866:	8c 01       	movw	r16, r24
    1868:	68 94       	set
    186a:	06 c0       	rjmp	.+12     	; 0x1878 <__fp_powser+0x22>
    186c:	da 2e       	mov	r13, r26
    186e:	ef 01       	movw	r28, r30
    1870:	0e 94 ba 0c 	call	0x1974	; 0x1974 <__mulsf3x>
    1874:	fe 01       	movw	r30, r28
    1876:	e8 94       	clt
    1878:	a5 91       	lpm	r26, Z+
    187a:	25 91       	lpm	r18, Z+
    187c:	35 91       	lpm	r19, Z+
    187e:	45 91       	lpm	r20, Z+
    1880:	55 91       	lpm	r21, Z+
    1882:	a6 f3       	brts	.-24     	; 0x186c <__fp_powser+0x16>
    1884:	ef 01       	movw	r28, r30
    1886:	0e 94 4d 0a 	call	0x149a	; 0x149a <__addsf3x>
    188a:	fe 01       	movw	r30, r28
    188c:	97 01       	movw	r18, r14
    188e:	a8 01       	movw	r20, r16
    1890:	da 94       	dec	r13
    1892:	69 f7       	brne	.-38     	; 0x186e <__fp_powser+0x18>
    1894:	df 90       	pop	r13
    1896:	ef 90       	pop	r14
    1898:	ff 90       	pop	r15
    189a:	0f 91       	pop	r16
    189c:	1f 91       	pop	r17
    189e:	cf 91       	pop	r28
    18a0:	df 91       	pop	r29
    18a2:	08 95       	ret

000018a4 <__fp_pscA>:
    18a4:	00 24       	eor	r0, r0
    18a6:	0a 94       	dec	r0
    18a8:	16 16       	cp	r1, r22
    18aa:	17 06       	cpc	r1, r23
    18ac:	18 06       	cpc	r1, r24
    18ae:	09 06       	cpc	r0, r25
    18b0:	08 95       	ret

000018b2 <__fp_pscB>:
    18b2:	00 24       	eor	r0, r0
    18b4:	0a 94       	dec	r0
    18b6:	12 16       	cp	r1, r18
    18b8:	13 06       	cpc	r1, r19
    18ba:	14 06       	cpc	r1, r20
    18bc:	05 06       	cpc	r0, r21
    18be:	08 95       	ret

000018c0 <__fp_round>:
    18c0:	09 2e       	mov	r0, r25
    18c2:	03 94       	inc	r0
    18c4:	00 0c       	add	r0, r0
    18c6:	11 f4       	brne	.+4      	; 0x18cc <__fp_round+0xc>
    18c8:	88 23       	and	r24, r24
    18ca:	52 f0       	brmi	.+20     	; 0x18e0 <__fp_round+0x20>
    18cc:	bb 0f       	add	r27, r27
    18ce:	40 f4       	brcc	.+16     	; 0x18e0 <__fp_round+0x20>
    18d0:	bf 2b       	or	r27, r31
    18d2:	11 f4       	brne	.+4      	; 0x18d8 <__fp_round+0x18>
    18d4:	60 ff       	sbrs	r22, 0
    18d6:	04 c0       	rjmp	.+8      	; 0x18e0 <__fp_round+0x20>
    18d8:	6f 5f       	subi	r22, 0xFF	; 255
    18da:	7f 4f       	sbci	r23, 0xFF	; 255
    18dc:	8f 4f       	sbci	r24, 0xFF	; 255
    18de:	9f 4f       	sbci	r25, 0xFF	; 255
    18e0:	08 95       	ret

000018e2 <__fp_split3>:
    18e2:	57 fd       	sbrc	r21, 7
    18e4:	90 58       	subi	r25, 0x80	; 128
    18e6:	44 0f       	add	r20, r20
    18e8:	55 1f       	adc	r21, r21
    18ea:	59 f0       	breq	.+22     	; 0x1902 <__fp_splitA+0x10>
    18ec:	5f 3f       	cpi	r21, 0xFF	; 255
    18ee:	71 f0       	breq	.+28     	; 0x190c <__fp_splitA+0x1a>
    18f0:	47 95       	ror	r20

000018f2 <__fp_splitA>:
    18f2:	88 0f       	add	r24, r24
    18f4:	97 fb       	bst	r25, 7
    18f6:	99 1f       	adc	r25, r25
    18f8:	61 f0       	breq	.+24     	; 0x1912 <__fp_splitA+0x20>
    18fa:	9f 3f       	cpi	r25, 0xFF	; 255
    18fc:	79 f0       	breq	.+30     	; 0x191c <__fp_splitA+0x2a>
    18fe:	87 95       	ror	r24
    1900:	08 95       	ret
    1902:	12 16       	cp	r1, r18
    1904:	13 06       	cpc	r1, r19
    1906:	14 06       	cpc	r1, r20
    1908:	55 1f       	adc	r21, r21
    190a:	f2 cf       	rjmp	.-28     	; 0x18f0 <__fp_split3+0xe>
    190c:	46 95       	lsr	r20
    190e:	f1 df       	rcall	.-30     	; 0x18f2 <__fp_splitA>
    1910:	08 c0       	rjmp	.+16     	; 0x1922 <__fp_splitA+0x30>
    1912:	16 16       	cp	r1, r22
    1914:	17 06       	cpc	r1, r23
    1916:	18 06       	cpc	r1, r24
    1918:	99 1f       	adc	r25, r25
    191a:	f1 cf       	rjmp	.-30     	; 0x18fe <__fp_splitA+0xc>
    191c:	86 95       	lsr	r24
    191e:	71 05       	cpc	r23, r1
    1920:	61 05       	cpc	r22, r1
    1922:	08 94       	sec
    1924:	08 95       	ret

00001926 <__fp_zero>:
    1926:	e8 94       	clt

00001928 <__fp_szero>:
    1928:	bb 27       	eor	r27, r27
    192a:	66 27       	eor	r22, r22
    192c:	77 27       	eor	r23, r23
    192e:	cb 01       	movw	r24, r22
    1930:	97 f9       	bld	r25, 7
    1932:	08 95       	ret

00001934 <__gesf2>:
    1934:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__fp_cmp>
    1938:	08 f4       	brcc	.+2      	; 0x193c <__gesf2+0x8>
    193a:	8f ef       	ldi	r24, 0xFF	; 255
    193c:	08 95       	ret

0000193e <inverse>:
    193e:	9b 01       	movw	r18, r22
    1940:	ac 01       	movw	r20, r24
    1942:	60 e0       	ldi	r22, 0x00	; 0
    1944:	70 e0       	ldi	r23, 0x00	; 0
    1946:	80 e8       	ldi	r24, 0x80	; 128
    1948:	9f e3       	ldi	r25, 0x3F	; 63
    194a:	0c 94 19 0b 	jmp	0x1632	; 0x1632 <__divsf3>

0000194e <__mulsf3>:
    194e:	0e 94 ba 0c 	call	0x1974	; 0x1974 <__mulsf3x>
    1952:	0c 94 60 0c 	jmp	0x18c0	; 0x18c0 <__fp_round>
    1956:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <__fp_pscA>
    195a:	38 f0       	brcs	.+14     	; 0x196a <__mulsf3+0x1c>
    195c:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <__fp_pscB>
    1960:	20 f0       	brcs	.+8      	; 0x196a <__mulsf3+0x1c>
    1962:	95 23       	and	r25, r21
    1964:	11 f0       	breq	.+4      	; 0x196a <__mulsf3+0x1c>
    1966:	0c 94 22 0c 	jmp	0x1844	; 0x1844 <__fp_inf>
    196a:	0c 94 28 0c 	jmp	0x1850	; 0x1850 <__fp_nan>
    196e:	11 24       	eor	r1, r1
    1970:	0c 94 94 0c 	jmp	0x1928	; 0x1928 <__fp_szero>

00001974 <__mulsf3x>:
    1974:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <__fp_split3>
    1978:	70 f3       	brcs	.-36     	; 0x1956 <__mulsf3+0x8>

0000197a <__mulsf3_pse>:
    197a:	95 9f       	mul	r25, r21
    197c:	c1 f3       	breq	.-16     	; 0x196e <__mulsf3+0x20>
    197e:	95 0f       	add	r25, r21
    1980:	50 e0       	ldi	r21, 0x00	; 0
    1982:	55 1f       	adc	r21, r21
    1984:	62 9f       	mul	r22, r18
    1986:	f0 01       	movw	r30, r0
    1988:	72 9f       	mul	r23, r18
    198a:	bb 27       	eor	r27, r27
    198c:	f0 0d       	add	r31, r0
    198e:	b1 1d       	adc	r27, r1
    1990:	63 9f       	mul	r22, r19
    1992:	aa 27       	eor	r26, r26
    1994:	f0 0d       	add	r31, r0
    1996:	b1 1d       	adc	r27, r1
    1998:	aa 1f       	adc	r26, r26
    199a:	64 9f       	mul	r22, r20
    199c:	66 27       	eor	r22, r22
    199e:	b0 0d       	add	r27, r0
    19a0:	a1 1d       	adc	r26, r1
    19a2:	66 1f       	adc	r22, r22
    19a4:	82 9f       	mul	r24, r18
    19a6:	22 27       	eor	r18, r18
    19a8:	b0 0d       	add	r27, r0
    19aa:	a1 1d       	adc	r26, r1
    19ac:	62 1f       	adc	r22, r18
    19ae:	73 9f       	mul	r23, r19
    19b0:	b0 0d       	add	r27, r0
    19b2:	a1 1d       	adc	r26, r1
    19b4:	62 1f       	adc	r22, r18
    19b6:	83 9f       	mul	r24, r19
    19b8:	a0 0d       	add	r26, r0
    19ba:	61 1d       	adc	r22, r1
    19bc:	22 1f       	adc	r18, r18
    19be:	74 9f       	mul	r23, r20
    19c0:	33 27       	eor	r19, r19
    19c2:	a0 0d       	add	r26, r0
    19c4:	61 1d       	adc	r22, r1
    19c6:	23 1f       	adc	r18, r19
    19c8:	84 9f       	mul	r24, r20
    19ca:	60 0d       	add	r22, r0
    19cc:	21 1d       	adc	r18, r1
    19ce:	82 2f       	mov	r24, r18
    19d0:	76 2f       	mov	r23, r22
    19d2:	6a 2f       	mov	r22, r26
    19d4:	11 24       	eor	r1, r1
    19d6:	9f 57       	subi	r25, 0x7F	; 127
    19d8:	50 40       	sbci	r21, 0x00	; 0
    19da:	9a f0       	brmi	.+38     	; 0x1a02 <__mulsf3_pse+0x88>
    19dc:	f1 f0       	breq	.+60     	; 0x1a1a <__mulsf3_pse+0xa0>
    19de:	88 23       	and	r24, r24
    19e0:	4a f0       	brmi	.+18     	; 0x19f4 <__mulsf3_pse+0x7a>
    19e2:	ee 0f       	add	r30, r30
    19e4:	ff 1f       	adc	r31, r31
    19e6:	bb 1f       	adc	r27, r27
    19e8:	66 1f       	adc	r22, r22
    19ea:	77 1f       	adc	r23, r23
    19ec:	88 1f       	adc	r24, r24
    19ee:	91 50       	subi	r25, 0x01	; 1
    19f0:	50 40       	sbci	r21, 0x00	; 0
    19f2:	a9 f7       	brne	.-22     	; 0x19de <__mulsf3_pse+0x64>
    19f4:	9e 3f       	cpi	r25, 0xFE	; 254
    19f6:	51 05       	cpc	r21, r1
    19f8:	80 f0       	brcs	.+32     	; 0x1a1a <__mulsf3_pse+0xa0>
    19fa:	0c 94 22 0c 	jmp	0x1844	; 0x1844 <__fp_inf>
    19fe:	0c 94 94 0c 	jmp	0x1928	; 0x1928 <__fp_szero>
    1a02:	5f 3f       	cpi	r21, 0xFF	; 255
    1a04:	e4 f3       	brlt	.-8      	; 0x19fe <__mulsf3_pse+0x84>
    1a06:	98 3e       	cpi	r25, 0xE8	; 232
    1a08:	d4 f3       	brlt	.-12     	; 0x19fe <__mulsf3_pse+0x84>
    1a0a:	86 95       	lsr	r24
    1a0c:	77 95       	ror	r23
    1a0e:	67 95       	ror	r22
    1a10:	b7 95       	ror	r27
    1a12:	f7 95       	ror	r31
    1a14:	e7 95       	ror	r30
    1a16:	9f 5f       	subi	r25, 0xFF	; 255
    1a18:	c1 f7       	brne	.-16     	; 0x1a0a <__mulsf3_pse+0x90>
    1a1a:	fe 2b       	or	r31, r30
    1a1c:	88 0f       	add	r24, r24
    1a1e:	91 1d       	adc	r25, r1
    1a20:	96 95       	lsr	r25
    1a22:	87 95       	ror	r24
    1a24:	97 f9       	bld	r25, 7
    1a26:	08 95       	ret

00001a28 <square>:
    1a28:	9b 01       	movw	r18, r22
    1a2a:	ac 01       	movw	r20, r24
    1a2c:	0c 94 a7 0c 	jmp	0x194e	; 0x194e <__mulsf3>

00001a30 <__divmodhi4>:
    1a30:	97 fb       	bst	r25, 7
    1a32:	07 2e       	mov	r0, r23
    1a34:	16 f4       	brtc	.+4      	; 0x1a3a <__divmodhi4+0xa>
    1a36:	00 94       	com	r0
    1a38:	07 d0       	rcall	.+14     	; 0x1a48 <__divmodhi4_neg1>
    1a3a:	77 fd       	sbrc	r23, 7
    1a3c:	09 d0       	rcall	.+18     	; 0x1a50 <__divmodhi4_neg2>
    1a3e:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <__udivmodhi4>
    1a42:	07 fc       	sbrc	r0, 7
    1a44:	05 d0       	rcall	.+10     	; 0x1a50 <__divmodhi4_neg2>
    1a46:	3e f4       	brtc	.+14     	; 0x1a56 <__divmodhi4_exit>

00001a48 <__divmodhi4_neg1>:
    1a48:	90 95       	com	r25
    1a4a:	81 95       	neg	r24
    1a4c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a4e:	08 95       	ret

00001a50 <__divmodhi4_neg2>:
    1a50:	70 95       	com	r23
    1a52:	61 95       	neg	r22
    1a54:	7f 4f       	sbci	r23, 0xFF	; 255

00001a56 <__divmodhi4_exit>:
    1a56:	08 95       	ret

00001a58 <__udivmodhi4>:
    1a58:	aa 1b       	sub	r26, r26
    1a5a:	bb 1b       	sub	r27, r27
    1a5c:	51 e1       	ldi	r21, 0x11	; 17
    1a5e:	07 c0       	rjmp	.+14     	; 0x1a6e <__udivmodhi4_ep>

00001a60 <__udivmodhi4_loop>:
    1a60:	aa 1f       	adc	r26, r26
    1a62:	bb 1f       	adc	r27, r27
    1a64:	a6 17       	cp	r26, r22
    1a66:	b7 07       	cpc	r27, r23
    1a68:	10 f0       	brcs	.+4      	; 0x1a6e <__udivmodhi4_ep>
    1a6a:	a6 1b       	sub	r26, r22
    1a6c:	b7 0b       	sbc	r27, r23

00001a6e <__udivmodhi4_ep>:
    1a6e:	88 1f       	adc	r24, r24
    1a70:	99 1f       	adc	r25, r25
    1a72:	5a 95       	dec	r21
    1a74:	a9 f7       	brne	.-22     	; 0x1a60 <__udivmodhi4_loop>
    1a76:	80 95       	com	r24
    1a78:	90 95       	com	r25
    1a7a:	bc 01       	movw	r22, r24
    1a7c:	cd 01       	movw	r24, r26
    1a7e:	08 95       	ret

00001a80 <strcpy>:
    1a80:	fb 01       	movw	r30, r22
    1a82:	dc 01       	movw	r26, r24
    1a84:	01 90       	ld	r0, Z+
    1a86:	0d 92       	st	X+, r0
    1a88:	00 20       	and	r0, r0
    1a8a:	e1 f7       	brne	.-8      	; 0x1a84 <strcpy+0x4>
    1a8c:	08 95       	ret

00001a8e <__itoa_ncheck>:
    1a8e:	bb 27       	eor	r27, r27
    1a90:	4a 30       	cpi	r20, 0x0A	; 10
    1a92:	31 f4       	brne	.+12     	; 0x1aa0 <__itoa_ncheck+0x12>
    1a94:	99 23       	and	r25, r25
    1a96:	22 f4       	brpl	.+8      	; 0x1aa0 <__itoa_ncheck+0x12>
    1a98:	bd e2       	ldi	r27, 0x2D	; 45
    1a9a:	90 95       	com	r25
    1a9c:	81 95       	neg	r24
    1a9e:	9f 4f       	sbci	r25, 0xFF	; 255
    1aa0:	0c 94 53 0d 	jmp	0x1aa6	; 0x1aa6 <__utoa_common>

00001aa4 <__utoa_ncheck>:
    1aa4:	bb 27       	eor	r27, r27

00001aa6 <__utoa_common>:
    1aa6:	fb 01       	movw	r30, r22
    1aa8:	55 27       	eor	r21, r21
    1aaa:	aa 27       	eor	r26, r26
    1aac:	88 0f       	add	r24, r24
    1aae:	99 1f       	adc	r25, r25
    1ab0:	aa 1f       	adc	r26, r26
    1ab2:	a4 17       	cp	r26, r20
    1ab4:	10 f0       	brcs	.+4      	; 0x1aba <__utoa_common+0x14>
    1ab6:	a4 1b       	sub	r26, r20
    1ab8:	83 95       	inc	r24
    1aba:	50 51       	subi	r21, 0x10	; 16
    1abc:	b9 f7       	brne	.-18     	; 0x1aac <__utoa_common+0x6>
    1abe:	a0 5d       	subi	r26, 0xD0	; 208
    1ac0:	aa 33       	cpi	r26, 0x3A	; 58
    1ac2:	08 f0       	brcs	.+2      	; 0x1ac6 <__utoa_common+0x20>
    1ac4:	a9 5d       	subi	r26, 0xD9	; 217
    1ac6:	a1 93       	st	Z+, r26
    1ac8:	00 97       	sbiw	r24, 0x00	; 0
    1aca:	79 f7       	brne	.-34     	; 0x1aaa <__utoa_common+0x4>
    1acc:	b1 11       	cpse	r27, r1
    1ace:	b1 93       	st	Z+, r27
    1ad0:	11 92       	st	Z+, r1
    1ad2:	cb 01       	movw	r24, r22
    1ad4:	0c 94 38 11 	jmp	0x2270	; 0x2270 <strrev>

00001ad8 <fdevopen>:
    1ad8:	0f 93       	push	r16
    1ada:	1f 93       	push	r17
    1adc:	cf 93       	push	r28
    1ade:	df 93       	push	r29
    1ae0:	00 97       	sbiw	r24, 0x00	; 0
    1ae2:	31 f4       	brne	.+12     	; 0x1af0 <fdevopen+0x18>
    1ae4:	61 15       	cp	r22, r1
    1ae6:	71 05       	cpc	r23, r1
    1ae8:	19 f4       	brne	.+6      	; 0x1af0 <fdevopen+0x18>
    1aea:	80 e0       	ldi	r24, 0x00	; 0
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	3a c0       	rjmp	.+116    	; 0x1b64 <fdevopen+0x8c>
    1af0:	8b 01       	movw	r16, r22
    1af2:	ec 01       	movw	r28, r24
    1af4:	6e e0       	ldi	r22, 0x0E	; 14
    1af6:	70 e0       	ldi	r23, 0x00	; 0
    1af8:	81 e0       	ldi	r24, 0x01	; 1
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <calloc>
    1b00:	fc 01       	movw	r30, r24
    1b02:	89 2b       	or	r24, r25
    1b04:	91 f3       	breq	.-28     	; 0x1aea <fdevopen+0x12>
    1b06:	80 e8       	ldi	r24, 0x80	; 128
    1b08:	83 83       	std	Z+3, r24	; 0x03
    1b0a:	01 15       	cp	r16, r1
    1b0c:	11 05       	cpc	r17, r1
    1b0e:	71 f0       	breq	.+28     	; 0x1b2c <fdevopen+0x54>
    1b10:	13 87       	std	Z+11, r17	; 0x0b
    1b12:	02 87       	std	Z+10, r16	; 0x0a
    1b14:	81 e8       	ldi	r24, 0x81	; 129
    1b16:	83 83       	std	Z+3, r24	; 0x03
    1b18:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <__iob>
    1b1c:	90 91 e9 02 	lds	r25, 0x02E9	; 0x8002e9 <__iob+0x1>
    1b20:	89 2b       	or	r24, r25
    1b22:	21 f4       	brne	.+8      	; 0x1b2c <fdevopen+0x54>
    1b24:	f0 93 e9 02 	sts	0x02E9, r31	; 0x8002e9 <__iob+0x1>
    1b28:	e0 93 e8 02 	sts	0x02E8, r30	; 0x8002e8 <__iob>
    1b2c:	20 97       	sbiw	r28, 0x00	; 0
    1b2e:	c9 f0       	breq	.+50     	; 0x1b62 <fdevopen+0x8a>
    1b30:	d1 87       	std	Z+9, r29	; 0x09
    1b32:	c0 87       	std	Z+8, r28	; 0x08
    1b34:	83 81       	ldd	r24, Z+3	; 0x03
    1b36:	82 60       	ori	r24, 0x02	; 2
    1b38:	83 83       	std	Z+3, r24	; 0x03
    1b3a:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <__iob+0x2>
    1b3e:	90 91 eb 02 	lds	r25, 0x02EB	; 0x8002eb <__iob+0x3>
    1b42:	89 2b       	or	r24, r25
    1b44:	71 f4       	brne	.+28     	; 0x1b62 <fdevopen+0x8a>
    1b46:	f0 93 eb 02 	sts	0x02EB, r31	; 0x8002eb <__iob+0x3>
    1b4a:	e0 93 ea 02 	sts	0x02EA, r30	; 0x8002ea <__iob+0x2>
    1b4e:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <__iob+0x4>
    1b52:	90 91 ed 02 	lds	r25, 0x02ED	; 0x8002ed <__iob+0x5>
    1b56:	89 2b       	or	r24, r25
    1b58:	21 f4       	brne	.+8      	; 0x1b62 <fdevopen+0x8a>
    1b5a:	f0 93 ed 02 	sts	0x02ED, r31	; 0x8002ed <__iob+0x5>
    1b5e:	e0 93 ec 02 	sts	0x02EC, r30	; 0x8002ec <__iob+0x4>
    1b62:	cf 01       	movw	r24, r30
    1b64:	df 91       	pop	r29
    1b66:	cf 91       	pop	r28
    1b68:	1f 91       	pop	r17
    1b6a:	0f 91       	pop	r16
    1b6c:	08 95       	ret

00001b6e <printf>:
    1b6e:	a0 e0       	ldi	r26, 0x00	; 0
    1b70:	b0 e0       	ldi	r27, 0x00	; 0
    1b72:	ed eb       	ldi	r30, 0xBD	; 189
    1b74:	fd e0       	ldi	r31, 0x0D	; 13
    1b76:	0c 94 f2 11 	jmp	0x23e4	; 0x23e4 <__prologue_saves__+0x20>
    1b7a:	ae 01       	movw	r20, r28
    1b7c:	4b 5f       	subi	r20, 0xFB	; 251
    1b7e:	5f 4f       	sbci	r21, 0xFF	; 255
    1b80:	fa 01       	movw	r30, r20
    1b82:	61 91       	ld	r22, Z+
    1b84:	71 91       	ld	r23, Z+
    1b86:	af 01       	movw	r20, r30
    1b88:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <__iob+0x2>
    1b8c:	90 91 eb 02 	lds	r25, 0x02EB	; 0x8002eb <__iob+0x3>
    1b90:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <vfprintf>
    1b94:	e2 e0       	ldi	r30, 0x02	; 2
    1b96:	0c 94 0e 12 	jmp	0x241c	; 0x241c <__epilogue_restores__+0x20>

00001b9a <puts>:
    1b9a:	0f 93       	push	r16
    1b9c:	1f 93       	push	r17
    1b9e:	cf 93       	push	r28
    1ba0:	df 93       	push	r29
    1ba2:	e0 91 ea 02 	lds	r30, 0x02EA	; 0x8002ea <__iob+0x2>
    1ba6:	f0 91 eb 02 	lds	r31, 0x02EB	; 0x8002eb <__iob+0x3>
    1baa:	23 81       	ldd	r18, Z+3	; 0x03
    1bac:	21 ff       	sbrs	r18, 1
    1bae:	1b c0       	rjmp	.+54     	; 0x1be6 <puts+0x4c>
    1bb0:	8c 01       	movw	r16, r24
    1bb2:	d0 e0       	ldi	r29, 0x00	; 0
    1bb4:	c0 e0       	ldi	r28, 0x00	; 0
    1bb6:	f8 01       	movw	r30, r16
    1bb8:	81 91       	ld	r24, Z+
    1bba:	8f 01       	movw	r16, r30
    1bbc:	60 91 ea 02 	lds	r22, 0x02EA	; 0x8002ea <__iob+0x2>
    1bc0:	70 91 eb 02 	lds	r23, 0x02EB	; 0x8002eb <__iob+0x3>
    1bc4:	db 01       	movw	r26, r22
    1bc6:	18 96       	adiw	r26, 0x08	; 8
    1bc8:	ed 91       	ld	r30, X+
    1bca:	fc 91       	ld	r31, X
    1bcc:	19 97       	sbiw	r26, 0x09	; 9
    1bce:	88 23       	and	r24, r24
    1bd0:	31 f0       	breq	.+12     	; 0x1bde <puts+0x44>
    1bd2:	09 95       	icall
    1bd4:	89 2b       	or	r24, r25
    1bd6:	79 f3       	breq	.-34     	; 0x1bb6 <puts+0x1c>
    1bd8:	df ef       	ldi	r29, 0xFF	; 255
    1bda:	cf ef       	ldi	r28, 0xFF	; 255
    1bdc:	ec cf       	rjmp	.-40     	; 0x1bb6 <puts+0x1c>
    1bde:	8a e0       	ldi	r24, 0x0A	; 10
    1be0:	09 95       	icall
    1be2:	89 2b       	or	r24, r25
    1be4:	19 f0       	breq	.+6      	; 0x1bec <puts+0x52>
    1be6:	8f ef       	ldi	r24, 0xFF	; 255
    1be8:	9f ef       	ldi	r25, 0xFF	; 255
    1bea:	02 c0       	rjmp	.+4      	; 0x1bf0 <puts+0x56>
    1bec:	8d 2f       	mov	r24, r29
    1bee:	9c 2f       	mov	r25, r28
    1bf0:	df 91       	pop	r29
    1bf2:	cf 91       	pop	r28
    1bf4:	1f 91       	pop	r17
    1bf6:	0f 91       	pop	r16
    1bf8:	08 95       	ret

00001bfa <vfprintf>:
    1bfa:	ab e0       	ldi	r26, 0x0B	; 11
    1bfc:	b0 e0       	ldi	r27, 0x00	; 0
    1bfe:	e3 e0       	ldi	r30, 0x03	; 3
    1c00:	fe e0       	ldi	r31, 0x0E	; 14
    1c02:	0c 94 e2 11 	jmp	0x23c4	; 0x23c4 <__prologue_saves__>
    1c06:	6c 01       	movw	r12, r24
    1c08:	7b 01       	movw	r14, r22
    1c0a:	8a 01       	movw	r16, r20
    1c0c:	fc 01       	movw	r30, r24
    1c0e:	17 82       	std	Z+7, r1	; 0x07
    1c10:	16 82       	std	Z+6, r1	; 0x06
    1c12:	83 81       	ldd	r24, Z+3	; 0x03
    1c14:	81 ff       	sbrs	r24, 1
    1c16:	cc c1       	rjmp	.+920    	; 0x1fb0 <vfprintf+0x3b6>
    1c18:	ce 01       	movw	r24, r28
    1c1a:	01 96       	adiw	r24, 0x01	; 1
    1c1c:	3c 01       	movw	r6, r24
    1c1e:	f6 01       	movw	r30, r12
    1c20:	93 81       	ldd	r25, Z+3	; 0x03
    1c22:	f7 01       	movw	r30, r14
    1c24:	93 fd       	sbrc	r25, 3
    1c26:	85 91       	lpm	r24, Z+
    1c28:	93 ff       	sbrs	r25, 3
    1c2a:	81 91       	ld	r24, Z+
    1c2c:	7f 01       	movw	r14, r30
    1c2e:	88 23       	and	r24, r24
    1c30:	09 f4       	brne	.+2      	; 0x1c34 <vfprintf+0x3a>
    1c32:	ba c1       	rjmp	.+884    	; 0x1fa8 <vfprintf+0x3ae>
    1c34:	85 32       	cpi	r24, 0x25	; 37
    1c36:	39 f4       	brne	.+14     	; 0x1c46 <vfprintf+0x4c>
    1c38:	93 fd       	sbrc	r25, 3
    1c3a:	85 91       	lpm	r24, Z+
    1c3c:	93 ff       	sbrs	r25, 3
    1c3e:	81 91       	ld	r24, Z+
    1c40:	7f 01       	movw	r14, r30
    1c42:	85 32       	cpi	r24, 0x25	; 37
    1c44:	29 f4       	brne	.+10     	; 0x1c50 <vfprintf+0x56>
    1c46:	b6 01       	movw	r22, r12
    1c48:	90 e0       	ldi	r25, 0x00	; 0
    1c4a:	0e 94 48 11 	call	0x2290	; 0x2290 <fputc>
    1c4e:	e7 cf       	rjmp	.-50     	; 0x1c1e <vfprintf+0x24>
    1c50:	91 2c       	mov	r9, r1
    1c52:	21 2c       	mov	r2, r1
    1c54:	31 2c       	mov	r3, r1
    1c56:	ff e1       	ldi	r31, 0x1F	; 31
    1c58:	f3 15       	cp	r31, r3
    1c5a:	d8 f0       	brcs	.+54     	; 0x1c92 <vfprintf+0x98>
    1c5c:	8b 32       	cpi	r24, 0x2B	; 43
    1c5e:	79 f0       	breq	.+30     	; 0x1c7e <vfprintf+0x84>
    1c60:	38 f4       	brcc	.+14     	; 0x1c70 <vfprintf+0x76>
    1c62:	80 32       	cpi	r24, 0x20	; 32
    1c64:	79 f0       	breq	.+30     	; 0x1c84 <vfprintf+0x8a>
    1c66:	83 32       	cpi	r24, 0x23	; 35
    1c68:	a1 f4       	brne	.+40     	; 0x1c92 <vfprintf+0x98>
    1c6a:	23 2d       	mov	r18, r3
    1c6c:	20 61       	ori	r18, 0x10	; 16
    1c6e:	1d c0       	rjmp	.+58     	; 0x1caa <vfprintf+0xb0>
    1c70:	8d 32       	cpi	r24, 0x2D	; 45
    1c72:	61 f0       	breq	.+24     	; 0x1c8c <vfprintf+0x92>
    1c74:	80 33       	cpi	r24, 0x30	; 48
    1c76:	69 f4       	brne	.+26     	; 0x1c92 <vfprintf+0x98>
    1c78:	23 2d       	mov	r18, r3
    1c7a:	21 60       	ori	r18, 0x01	; 1
    1c7c:	16 c0       	rjmp	.+44     	; 0x1caa <vfprintf+0xb0>
    1c7e:	83 2d       	mov	r24, r3
    1c80:	82 60       	ori	r24, 0x02	; 2
    1c82:	38 2e       	mov	r3, r24
    1c84:	e3 2d       	mov	r30, r3
    1c86:	e4 60       	ori	r30, 0x04	; 4
    1c88:	3e 2e       	mov	r3, r30
    1c8a:	2a c0       	rjmp	.+84     	; 0x1ce0 <vfprintf+0xe6>
    1c8c:	f3 2d       	mov	r31, r3
    1c8e:	f8 60       	ori	r31, 0x08	; 8
    1c90:	1d c0       	rjmp	.+58     	; 0x1ccc <vfprintf+0xd2>
    1c92:	37 fc       	sbrc	r3, 7
    1c94:	2d c0       	rjmp	.+90     	; 0x1cf0 <vfprintf+0xf6>
    1c96:	20 ed       	ldi	r18, 0xD0	; 208
    1c98:	28 0f       	add	r18, r24
    1c9a:	2a 30       	cpi	r18, 0x0A	; 10
    1c9c:	40 f0       	brcs	.+16     	; 0x1cae <vfprintf+0xb4>
    1c9e:	8e 32       	cpi	r24, 0x2E	; 46
    1ca0:	b9 f4       	brne	.+46     	; 0x1cd0 <vfprintf+0xd6>
    1ca2:	36 fc       	sbrc	r3, 6
    1ca4:	81 c1       	rjmp	.+770    	; 0x1fa8 <vfprintf+0x3ae>
    1ca6:	23 2d       	mov	r18, r3
    1ca8:	20 64       	ori	r18, 0x40	; 64
    1caa:	32 2e       	mov	r3, r18
    1cac:	19 c0       	rjmp	.+50     	; 0x1ce0 <vfprintf+0xe6>
    1cae:	36 fe       	sbrs	r3, 6
    1cb0:	06 c0       	rjmp	.+12     	; 0x1cbe <vfprintf+0xc4>
    1cb2:	8a e0       	ldi	r24, 0x0A	; 10
    1cb4:	98 9e       	mul	r9, r24
    1cb6:	20 0d       	add	r18, r0
    1cb8:	11 24       	eor	r1, r1
    1cba:	92 2e       	mov	r9, r18
    1cbc:	11 c0       	rjmp	.+34     	; 0x1ce0 <vfprintf+0xe6>
    1cbe:	ea e0       	ldi	r30, 0x0A	; 10
    1cc0:	2e 9e       	mul	r2, r30
    1cc2:	20 0d       	add	r18, r0
    1cc4:	11 24       	eor	r1, r1
    1cc6:	22 2e       	mov	r2, r18
    1cc8:	f3 2d       	mov	r31, r3
    1cca:	f0 62       	ori	r31, 0x20	; 32
    1ccc:	3f 2e       	mov	r3, r31
    1cce:	08 c0       	rjmp	.+16     	; 0x1ce0 <vfprintf+0xe6>
    1cd0:	8c 36       	cpi	r24, 0x6C	; 108
    1cd2:	21 f4       	brne	.+8      	; 0x1cdc <vfprintf+0xe2>
    1cd4:	83 2d       	mov	r24, r3
    1cd6:	80 68       	ori	r24, 0x80	; 128
    1cd8:	38 2e       	mov	r3, r24
    1cda:	02 c0       	rjmp	.+4      	; 0x1ce0 <vfprintf+0xe6>
    1cdc:	88 36       	cpi	r24, 0x68	; 104
    1cde:	41 f4       	brne	.+16     	; 0x1cf0 <vfprintf+0xf6>
    1ce0:	f7 01       	movw	r30, r14
    1ce2:	93 fd       	sbrc	r25, 3
    1ce4:	85 91       	lpm	r24, Z+
    1ce6:	93 ff       	sbrs	r25, 3
    1ce8:	81 91       	ld	r24, Z+
    1cea:	7f 01       	movw	r14, r30
    1cec:	81 11       	cpse	r24, r1
    1cee:	b3 cf       	rjmp	.-154    	; 0x1c56 <vfprintf+0x5c>
    1cf0:	98 2f       	mov	r25, r24
    1cf2:	9f 7d       	andi	r25, 0xDF	; 223
    1cf4:	95 54       	subi	r25, 0x45	; 69
    1cf6:	93 30       	cpi	r25, 0x03	; 3
    1cf8:	28 f4       	brcc	.+10     	; 0x1d04 <vfprintf+0x10a>
    1cfa:	0c 5f       	subi	r16, 0xFC	; 252
    1cfc:	1f 4f       	sbci	r17, 0xFF	; 255
    1cfe:	9f e3       	ldi	r25, 0x3F	; 63
    1d00:	99 83       	std	Y+1, r25	; 0x01
    1d02:	0d c0       	rjmp	.+26     	; 0x1d1e <vfprintf+0x124>
    1d04:	83 36       	cpi	r24, 0x63	; 99
    1d06:	31 f0       	breq	.+12     	; 0x1d14 <vfprintf+0x11a>
    1d08:	83 37       	cpi	r24, 0x73	; 115
    1d0a:	71 f0       	breq	.+28     	; 0x1d28 <vfprintf+0x12e>
    1d0c:	83 35       	cpi	r24, 0x53	; 83
    1d0e:	09 f0       	breq	.+2      	; 0x1d12 <vfprintf+0x118>
    1d10:	59 c0       	rjmp	.+178    	; 0x1dc4 <vfprintf+0x1ca>
    1d12:	21 c0       	rjmp	.+66     	; 0x1d56 <vfprintf+0x15c>
    1d14:	f8 01       	movw	r30, r16
    1d16:	80 81       	ld	r24, Z
    1d18:	89 83       	std	Y+1, r24	; 0x01
    1d1a:	0e 5f       	subi	r16, 0xFE	; 254
    1d1c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d1e:	88 24       	eor	r8, r8
    1d20:	83 94       	inc	r8
    1d22:	91 2c       	mov	r9, r1
    1d24:	53 01       	movw	r10, r6
    1d26:	13 c0       	rjmp	.+38     	; 0x1d4e <vfprintf+0x154>
    1d28:	28 01       	movw	r4, r16
    1d2a:	f2 e0       	ldi	r31, 0x02	; 2
    1d2c:	4f 0e       	add	r4, r31
    1d2e:	51 1c       	adc	r5, r1
    1d30:	f8 01       	movw	r30, r16
    1d32:	a0 80       	ld	r10, Z
    1d34:	b1 80       	ldd	r11, Z+1	; 0x01
    1d36:	36 fe       	sbrs	r3, 6
    1d38:	03 c0       	rjmp	.+6      	; 0x1d40 <vfprintf+0x146>
    1d3a:	69 2d       	mov	r22, r9
    1d3c:	70 e0       	ldi	r23, 0x00	; 0
    1d3e:	02 c0       	rjmp	.+4      	; 0x1d44 <vfprintf+0x14a>
    1d40:	6f ef       	ldi	r22, 0xFF	; 255
    1d42:	7f ef       	ldi	r23, 0xFF	; 255
    1d44:	c5 01       	movw	r24, r10
    1d46:	0e 94 2d 11 	call	0x225a	; 0x225a <strnlen>
    1d4a:	4c 01       	movw	r8, r24
    1d4c:	82 01       	movw	r16, r4
    1d4e:	f3 2d       	mov	r31, r3
    1d50:	ff 77       	andi	r31, 0x7F	; 127
    1d52:	3f 2e       	mov	r3, r31
    1d54:	16 c0       	rjmp	.+44     	; 0x1d82 <vfprintf+0x188>
    1d56:	28 01       	movw	r4, r16
    1d58:	22 e0       	ldi	r18, 0x02	; 2
    1d5a:	42 0e       	add	r4, r18
    1d5c:	51 1c       	adc	r5, r1
    1d5e:	f8 01       	movw	r30, r16
    1d60:	a0 80       	ld	r10, Z
    1d62:	b1 80       	ldd	r11, Z+1	; 0x01
    1d64:	36 fe       	sbrs	r3, 6
    1d66:	03 c0       	rjmp	.+6      	; 0x1d6e <vfprintf+0x174>
    1d68:	69 2d       	mov	r22, r9
    1d6a:	70 e0       	ldi	r23, 0x00	; 0
    1d6c:	02 c0       	rjmp	.+4      	; 0x1d72 <vfprintf+0x178>
    1d6e:	6f ef       	ldi	r22, 0xFF	; 255
    1d70:	7f ef       	ldi	r23, 0xFF	; 255
    1d72:	c5 01       	movw	r24, r10
    1d74:	0e 94 1b 11 	call	0x2236	; 0x2236 <strnlen_P>
    1d78:	4c 01       	movw	r8, r24
    1d7a:	f3 2d       	mov	r31, r3
    1d7c:	f0 68       	ori	r31, 0x80	; 128
    1d7e:	3f 2e       	mov	r3, r31
    1d80:	82 01       	movw	r16, r4
    1d82:	33 fc       	sbrc	r3, 3
    1d84:	1b c0       	rjmp	.+54     	; 0x1dbc <vfprintf+0x1c2>
    1d86:	82 2d       	mov	r24, r2
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	88 16       	cp	r8, r24
    1d8c:	99 06       	cpc	r9, r25
    1d8e:	b0 f4       	brcc	.+44     	; 0x1dbc <vfprintf+0x1c2>
    1d90:	b6 01       	movw	r22, r12
    1d92:	80 e2       	ldi	r24, 0x20	; 32
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	0e 94 48 11 	call	0x2290	; 0x2290 <fputc>
    1d9a:	2a 94       	dec	r2
    1d9c:	f4 cf       	rjmp	.-24     	; 0x1d86 <vfprintf+0x18c>
    1d9e:	f5 01       	movw	r30, r10
    1da0:	37 fc       	sbrc	r3, 7
    1da2:	85 91       	lpm	r24, Z+
    1da4:	37 fe       	sbrs	r3, 7
    1da6:	81 91       	ld	r24, Z+
    1da8:	5f 01       	movw	r10, r30
    1daa:	b6 01       	movw	r22, r12
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	0e 94 48 11 	call	0x2290	; 0x2290 <fputc>
    1db2:	21 10       	cpse	r2, r1
    1db4:	2a 94       	dec	r2
    1db6:	21 e0       	ldi	r18, 0x01	; 1
    1db8:	82 1a       	sub	r8, r18
    1dba:	91 08       	sbc	r9, r1
    1dbc:	81 14       	cp	r8, r1
    1dbe:	91 04       	cpc	r9, r1
    1dc0:	71 f7       	brne	.-36     	; 0x1d9e <vfprintf+0x1a4>
    1dc2:	e8 c0       	rjmp	.+464    	; 0x1f94 <vfprintf+0x39a>
    1dc4:	84 36       	cpi	r24, 0x64	; 100
    1dc6:	11 f0       	breq	.+4      	; 0x1dcc <vfprintf+0x1d2>
    1dc8:	89 36       	cpi	r24, 0x69	; 105
    1dca:	41 f5       	brne	.+80     	; 0x1e1c <vfprintf+0x222>
    1dcc:	f8 01       	movw	r30, r16
    1dce:	37 fe       	sbrs	r3, 7
    1dd0:	07 c0       	rjmp	.+14     	; 0x1de0 <vfprintf+0x1e6>
    1dd2:	60 81       	ld	r22, Z
    1dd4:	71 81       	ldd	r23, Z+1	; 0x01
    1dd6:	82 81       	ldd	r24, Z+2	; 0x02
    1dd8:	93 81       	ldd	r25, Z+3	; 0x03
    1dda:	0c 5f       	subi	r16, 0xFC	; 252
    1ddc:	1f 4f       	sbci	r17, 0xFF	; 255
    1dde:	08 c0       	rjmp	.+16     	; 0x1df0 <vfprintf+0x1f6>
    1de0:	60 81       	ld	r22, Z
    1de2:	71 81       	ldd	r23, Z+1	; 0x01
    1de4:	07 2e       	mov	r0, r23
    1de6:	00 0c       	add	r0, r0
    1de8:	88 0b       	sbc	r24, r24
    1dea:	99 0b       	sbc	r25, r25
    1dec:	0e 5f       	subi	r16, 0xFE	; 254
    1dee:	1f 4f       	sbci	r17, 0xFF	; 255
    1df0:	f3 2d       	mov	r31, r3
    1df2:	ff 76       	andi	r31, 0x6F	; 111
    1df4:	3f 2e       	mov	r3, r31
    1df6:	97 ff       	sbrs	r25, 7
    1df8:	09 c0       	rjmp	.+18     	; 0x1e0c <vfprintf+0x212>
    1dfa:	90 95       	com	r25
    1dfc:	80 95       	com	r24
    1dfe:	70 95       	com	r23
    1e00:	61 95       	neg	r22
    1e02:	7f 4f       	sbci	r23, 0xFF	; 255
    1e04:	8f 4f       	sbci	r24, 0xFF	; 255
    1e06:	9f 4f       	sbci	r25, 0xFF	; 255
    1e08:	f0 68       	ori	r31, 0x80	; 128
    1e0a:	3f 2e       	mov	r3, r31
    1e0c:	2a e0       	ldi	r18, 0x0A	; 10
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	a3 01       	movw	r20, r6
    1e12:	0e 94 84 11 	call	0x2308	; 0x2308 <__ultoa_invert>
    1e16:	88 2e       	mov	r8, r24
    1e18:	86 18       	sub	r8, r6
    1e1a:	45 c0       	rjmp	.+138    	; 0x1ea6 <vfprintf+0x2ac>
    1e1c:	85 37       	cpi	r24, 0x75	; 117
    1e1e:	31 f4       	brne	.+12     	; 0x1e2c <vfprintf+0x232>
    1e20:	23 2d       	mov	r18, r3
    1e22:	2f 7e       	andi	r18, 0xEF	; 239
    1e24:	b2 2e       	mov	r11, r18
    1e26:	2a e0       	ldi	r18, 0x0A	; 10
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	25 c0       	rjmp	.+74     	; 0x1e76 <vfprintf+0x27c>
    1e2c:	93 2d       	mov	r25, r3
    1e2e:	99 7f       	andi	r25, 0xF9	; 249
    1e30:	b9 2e       	mov	r11, r25
    1e32:	8f 36       	cpi	r24, 0x6F	; 111
    1e34:	c1 f0       	breq	.+48     	; 0x1e66 <vfprintf+0x26c>
    1e36:	18 f4       	brcc	.+6      	; 0x1e3e <vfprintf+0x244>
    1e38:	88 35       	cpi	r24, 0x58	; 88
    1e3a:	79 f0       	breq	.+30     	; 0x1e5a <vfprintf+0x260>
    1e3c:	b5 c0       	rjmp	.+362    	; 0x1fa8 <vfprintf+0x3ae>
    1e3e:	80 37       	cpi	r24, 0x70	; 112
    1e40:	19 f0       	breq	.+6      	; 0x1e48 <vfprintf+0x24e>
    1e42:	88 37       	cpi	r24, 0x78	; 120
    1e44:	21 f0       	breq	.+8      	; 0x1e4e <vfprintf+0x254>
    1e46:	b0 c0       	rjmp	.+352    	; 0x1fa8 <vfprintf+0x3ae>
    1e48:	e9 2f       	mov	r30, r25
    1e4a:	e0 61       	ori	r30, 0x10	; 16
    1e4c:	be 2e       	mov	r11, r30
    1e4e:	b4 fe       	sbrs	r11, 4
    1e50:	0d c0       	rjmp	.+26     	; 0x1e6c <vfprintf+0x272>
    1e52:	fb 2d       	mov	r31, r11
    1e54:	f4 60       	ori	r31, 0x04	; 4
    1e56:	bf 2e       	mov	r11, r31
    1e58:	09 c0       	rjmp	.+18     	; 0x1e6c <vfprintf+0x272>
    1e5a:	34 fe       	sbrs	r3, 4
    1e5c:	0a c0       	rjmp	.+20     	; 0x1e72 <vfprintf+0x278>
    1e5e:	29 2f       	mov	r18, r25
    1e60:	26 60       	ori	r18, 0x06	; 6
    1e62:	b2 2e       	mov	r11, r18
    1e64:	06 c0       	rjmp	.+12     	; 0x1e72 <vfprintf+0x278>
    1e66:	28 e0       	ldi	r18, 0x08	; 8
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	05 c0       	rjmp	.+10     	; 0x1e76 <vfprintf+0x27c>
    1e6c:	20 e1       	ldi	r18, 0x10	; 16
    1e6e:	30 e0       	ldi	r19, 0x00	; 0
    1e70:	02 c0       	rjmp	.+4      	; 0x1e76 <vfprintf+0x27c>
    1e72:	20 e1       	ldi	r18, 0x10	; 16
    1e74:	32 e0       	ldi	r19, 0x02	; 2
    1e76:	f8 01       	movw	r30, r16
    1e78:	b7 fe       	sbrs	r11, 7
    1e7a:	07 c0       	rjmp	.+14     	; 0x1e8a <vfprintf+0x290>
    1e7c:	60 81       	ld	r22, Z
    1e7e:	71 81       	ldd	r23, Z+1	; 0x01
    1e80:	82 81       	ldd	r24, Z+2	; 0x02
    1e82:	93 81       	ldd	r25, Z+3	; 0x03
    1e84:	0c 5f       	subi	r16, 0xFC	; 252
    1e86:	1f 4f       	sbci	r17, 0xFF	; 255
    1e88:	06 c0       	rjmp	.+12     	; 0x1e96 <vfprintf+0x29c>
    1e8a:	60 81       	ld	r22, Z
    1e8c:	71 81       	ldd	r23, Z+1	; 0x01
    1e8e:	80 e0       	ldi	r24, 0x00	; 0
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	0e 5f       	subi	r16, 0xFE	; 254
    1e94:	1f 4f       	sbci	r17, 0xFF	; 255
    1e96:	a3 01       	movw	r20, r6
    1e98:	0e 94 84 11 	call	0x2308	; 0x2308 <__ultoa_invert>
    1e9c:	88 2e       	mov	r8, r24
    1e9e:	86 18       	sub	r8, r6
    1ea0:	fb 2d       	mov	r31, r11
    1ea2:	ff 77       	andi	r31, 0x7F	; 127
    1ea4:	3f 2e       	mov	r3, r31
    1ea6:	36 fe       	sbrs	r3, 6
    1ea8:	0d c0       	rjmp	.+26     	; 0x1ec4 <vfprintf+0x2ca>
    1eaa:	23 2d       	mov	r18, r3
    1eac:	2e 7f       	andi	r18, 0xFE	; 254
    1eae:	a2 2e       	mov	r10, r18
    1eb0:	89 14       	cp	r8, r9
    1eb2:	58 f4       	brcc	.+22     	; 0x1eca <vfprintf+0x2d0>
    1eb4:	34 fe       	sbrs	r3, 4
    1eb6:	0b c0       	rjmp	.+22     	; 0x1ece <vfprintf+0x2d4>
    1eb8:	32 fc       	sbrc	r3, 2
    1eba:	09 c0       	rjmp	.+18     	; 0x1ece <vfprintf+0x2d4>
    1ebc:	83 2d       	mov	r24, r3
    1ebe:	8e 7e       	andi	r24, 0xEE	; 238
    1ec0:	a8 2e       	mov	r10, r24
    1ec2:	05 c0       	rjmp	.+10     	; 0x1ece <vfprintf+0x2d4>
    1ec4:	b8 2c       	mov	r11, r8
    1ec6:	a3 2c       	mov	r10, r3
    1ec8:	03 c0       	rjmp	.+6      	; 0x1ed0 <vfprintf+0x2d6>
    1eca:	b8 2c       	mov	r11, r8
    1ecc:	01 c0       	rjmp	.+2      	; 0x1ed0 <vfprintf+0x2d6>
    1ece:	b9 2c       	mov	r11, r9
    1ed0:	a4 fe       	sbrs	r10, 4
    1ed2:	0f c0       	rjmp	.+30     	; 0x1ef2 <vfprintf+0x2f8>
    1ed4:	fe 01       	movw	r30, r28
    1ed6:	e8 0d       	add	r30, r8
    1ed8:	f1 1d       	adc	r31, r1
    1eda:	80 81       	ld	r24, Z
    1edc:	80 33       	cpi	r24, 0x30	; 48
    1ede:	21 f4       	brne	.+8      	; 0x1ee8 <vfprintf+0x2ee>
    1ee0:	9a 2d       	mov	r25, r10
    1ee2:	99 7e       	andi	r25, 0xE9	; 233
    1ee4:	a9 2e       	mov	r10, r25
    1ee6:	09 c0       	rjmp	.+18     	; 0x1efa <vfprintf+0x300>
    1ee8:	a2 fe       	sbrs	r10, 2
    1eea:	06 c0       	rjmp	.+12     	; 0x1ef8 <vfprintf+0x2fe>
    1eec:	b3 94       	inc	r11
    1eee:	b3 94       	inc	r11
    1ef0:	04 c0       	rjmp	.+8      	; 0x1efa <vfprintf+0x300>
    1ef2:	8a 2d       	mov	r24, r10
    1ef4:	86 78       	andi	r24, 0x86	; 134
    1ef6:	09 f0       	breq	.+2      	; 0x1efa <vfprintf+0x300>
    1ef8:	b3 94       	inc	r11
    1efa:	a3 fc       	sbrc	r10, 3
    1efc:	11 c0       	rjmp	.+34     	; 0x1f20 <vfprintf+0x326>
    1efe:	a0 fe       	sbrs	r10, 0
    1f00:	06 c0       	rjmp	.+12     	; 0x1f0e <vfprintf+0x314>
    1f02:	b2 14       	cp	r11, r2
    1f04:	88 f4       	brcc	.+34     	; 0x1f28 <vfprintf+0x32e>
    1f06:	28 0c       	add	r2, r8
    1f08:	92 2c       	mov	r9, r2
    1f0a:	9b 18       	sub	r9, r11
    1f0c:	0e c0       	rjmp	.+28     	; 0x1f2a <vfprintf+0x330>
    1f0e:	b2 14       	cp	r11, r2
    1f10:	60 f4       	brcc	.+24     	; 0x1f2a <vfprintf+0x330>
    1f12:	b6 01       	movw	r22, r12
    1f14:	80 e2       	ldi	r24, 0x20	; 32
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	0e 94 48 11 	call	0x2290	; 0x2290 <fputc>
    1f1c:	b3 94       	inc	r11
    1f1e:	f7 cf       	rjmp	.-18     	; 0x1f0e <vfprintf+0x314>
    1f20:	b2 14       	cp	r11, r2
    1f22:	18 f4       	brcc	.+6      	; 0x1f2a <vfprintf+0x330>
    1f24:	2b 18       	sub	r2, r11
    1f26:	02 c0       	rjmp	.+4      	; 0x1f2c <vfprintf+0x332>
    1f28:	98 2c       	mov	r9, r8
    1f2a:	21 2c       	mov	r2, r1
    1f2c:	a4 fe       	sbrs	r10, 4
    1f2e:	10 c0       	rjmp	.+32     	; 0x1f50 <vfprintf+0x356>
    1f30:	b6 01       	movw	r22, r12
    1f32:	80 e3       	ldi	r24, 0x30	; 48
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	0e 94 48 11 	call	0x2290	; 0x2290 <fputc>
    1f3a:	a2 fe       	sbrs	r10, 2
    1f3c:	17 c0       	rjmp	.+46     	; 0x1f6c <vfprintf+0x372>
    1f3e:	a1 fc       	sbrc	r10, 1
    1f40:	03 c0       	rjmp	.+6      	; 0x1f48 <vfprintf+0x34e>
    1f42:	88 e7       	ldi	r24, 0x78	; 120
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	02 c0       	rjmp	.+4      	; 0x1f4c <vfprintf+0x352>
    1f48:	88 e5       	ldi	r24, 0x58	; 88
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	b6 01       	movw	r22, r12
    1f4e:	0c c0       	rjmp	.+24     	; 0x1f68 <vfprintf+0x36e>
    1f50:	8a 2d       	mov	r24, r10
    1f52:	86 78       	andi	r24, 0x86	; 134
    1f54:	59 f0       	breq	.+22     	; 0x1f6c <vfprintf+0x372>
    1f56:	a1 fe       	sbrs	r10, 1
    1f58:	02 c0       	rjmp	.+4      	; 0x1f5e <vfprintf+0x364>
    1f5a:	8b e2       	ldi	r24, 0x2B	; 43
    1f5c:	01 c0       	rjmp	.+2      	; 0x1f60 <vfprintf+0x366>
    1f5e:	80 e2       	ldi	r24, 0x20	; 32
    1f60:	a7 fc       	sbrc	r10, 7
    1f62:	8d e2       	ldi	r24, 0x2D	; 45
    1f64:	b6 01       	movw	r22, r12
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	0e 94 48 11 	call	0x2290	; 0x2290 <fputc>
    1f6c:	89 14       	cp	r8, r9
    1f6e:	38 f4       	brcc	.+14     	; 0x1f7e <vfprintf+0x384>
    1f70:	b6 01       	movw	r22, r12
    1f72:	80 e3       	ldi	r24, 0x30	; 48
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	0e 94 48 11 	call	0x2290	; 0x2290 <fputc>
    1f7a:	9a 94       	dec	r9
    1f7c:	f7 cf       	rjmp	.-18     	; 0x1f6c <vfprintf+0x372>
    1f7e:	8a 94       	dec	r8
    1f80:	f3 01       	movw	r30, r6
    1f82:	e8 0d       	add	r30, r8
    1f84:	f1 1d       	adc	r31, r1
    1f86:	80 81       	ld	r24, Z
    1f88:	b6 01       	movw	r22, r12
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	0e 94 48 11 	call	0x2290	; 0x2290 <fputc>
    1f90:	81 10       	cpse	r8, r1
    1f92:	f5 cf       	rjmp	.-22     	; 0x1f7e <vfprintf+0x384>
    1f94:	22 20       	and	r2, r2
    1f96:	09 f4       	brne	.+2      	; 0x1f9a <vfprintf+0x3a0>
    1f98:	42 ce       	rjmp	.-892    	; 0x1c1e <vfprintf+0x24>
    1f9a:	b6 01       	movw	r22, r12
    1f9c:	80 e2       	ldi	r24, 0x20	; 32
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	0e 94 48 11 	call	0x2290	; 0x2290 <fputc>
    1fa4:	2a 94       	dec	r2
    1fa6:	f6 cf       	rjmp	.-20     	; 0x1f94 <vfprintf+0x39a>
    1fa8:	f6 01       	movw	r30, r12
    1faa:	86 81       	ldd	r24, Z+6	; 0x06
    1fac:	97 81       	ldd	r25, Z+7	; 0x07
    1fae:	02 c0       	rjmp	.+4      	; 0x1fb4 <vfprintf+0x3ba>
    1fb0:	8f ef       	ldi	r24, 0xFF	; 255
    1fb2:	9f ef       	ldi	r25, 0xFF	; 255
    1fb4:	2b 96       	adiw	r28, 0x0b	; 11
    1fb6:	e2 e1       	ldi	r30, 0x12	; 18
    1fb8:	0c 94 fe 11 	jmp	0x23fc	; 0x23fc <__epilogue_restores__>

00001fbc <calloc>:
    1fbc:	0f 93       	push	r16
    1fbe:	1f 93       	push	r17
    1fc0:	cf 93       	push	r28
    1fc2:	df 93       	push	r29
    1fc4:	86 9f       	mul	r24, r22
    1fc6:	80 01       	movw	r16, r0
    1fc8:	87 9f       	mul	r24, r23
    1fca:	10 0d       	add	r17, r0
    1fcc:	96 9f       	mul	r25, r22
    1fce:	10 0d       	add	r17, r0
    1fd0:	11 24       	eor	r1, r1
    1fd2:	c8 01       	movw	r24, r16
    1fd4:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <malloc>
    1fd8:	ec 01       	movw	r28, r24
    1fda:	00 97       	sbiw	r24, 0x00	; 0
    1fdc:	29 f0       	breq	.+10     	; 0x1fe8 <calloc+0x2c>
    1fde:	a8 01       	movw	r20, r16
    1fe0:	60 e0       	ldi	r22, 0x00	; 0
    1fe2:	70 e0       	ldi	r23, 0x00	; 0
    1fe4:	0e 94 26 11 	call	0x224c	; 0x224c <memset>
    1fe8:	ce 01       	movw	r24, r28
    1fea:	df 91       	pop	r29
    1fec:	cf 91       	pop	r28
    1fee:	1f 91       	pop	r17
    1ff0:	0f 91       	pop	r16
    1ff2:	08 95       	ret

00001ff4 <malloc>:
    1ff4:	0f 93       	push	r16
    1ff6:	1f 93       	push	r17
    1ff8:	cf 93       	push	r28
    1ffa:	df 93       	push	r29
    1ffc:	82 30       	cpi	r24, 0x02	; 2
    1ffe:	91 05       	cpc	r25, r1
    2000:	10 f4       	brcc	.+4      	; 0x2006 <malloc+0x12>
    2002:	82 e0       	ldi	r24, 0x02	; 2
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	e0 91 f0 02 	lds	r30, 0x02F0	; 0x8002f0 <__flp>
    200a:	f0 91 f1 02 	lds	r31, 0x02F1	; 0x8002f1 <__flp+0x1>
    200e:	20 e0       	ldi	r18, 0x00	; 0
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	a0 e0       	ldi	r26, 0x00	; 0
    2014:	b0 e0       	ldi	r27, 0x00	; 0
    2016:	30 97       	sbiw	r30, 0x00	; 0
    2018:	19 f1       	breq	.+70     	; 0x2060 <malloc+0x6c>
    201a:	40 81       	ld	r20, Z
    201c:	51 81       	ldd	r21, Z+1	; 0x01
    201e:	02 81       	ldd	r16, Z+2	; 0x02
    2020:	13 81       	ldd	r17, Z+3	; 0x03
    2022:	48 17       	cp	r20, r24
    2024:	59 07       	cpc	r21, r25
    2026:	c8 f0       	brcs	.+50     	; 0x205a <malloc+0x66>
    2028:	84 17       	cp	r24, r20
    202a:	95 07       	cpc	r25, r21
    202c:	69 f4       	brne	.+26     	; 0x2048 <malloc+0x54>
    202e:	10 97       	sbiw	r26, 0x00	; 0
    2030:	31 f0       	breq	.+12     	; 0x203e <malloc+0x4a>
    2032:	12 96       	adiw	r26, 0x02	; 2
    2034:	0c 93       	st	X, r16
    2036:	12 97       	sbiw	r26, 0x02	; 2
    2038:	13 96       	adiw	r26, 0x03	; 3
    203a:	1c 93       	st	X, r17
    203c:	27 c0       	rjmp	.+78     	; 0x208c <malloc+0x98>
    203e:	00 93 f0 02 	sts	0x02F0, r16	; 0x8002f0 <__flp>
    2042:	10 93 f1 02 	sts	0x02F1, r17	; 0x8002f1 <__flp+0x1>
    2046:	22 c0       	rjmp	.+68     	; 0x208c <malloc+0x98>
    2048:	21 15       	cp	r18, r1
    204a:	31 05       	cpc	r19, r1
    204c:	19 f0       	breq	.+6      	; 0x2054 <malloc+0x60>
    204e:	42 17       	cp	r20, r18
    2050:	53 07       	cpc	r21, r19
    2052:	18 f4       	brcc	.+6      	; 0x205a <malloc+0x66>
    2054:	9a 01       	movw	r18, r20
    2056:	bd 01       	movw	r22, r26
    2058:	ef 01       	movw	r28, r30
    205a:	df 01       	movw	r26, r30
    205c:	f8 01       	movw	r30, r16
    205e:	db cf       	rjmp	.-74     	; 0x2016 <malloc+0x22>
    2060:	21 15       	cp	r18, r1
    2062:	31 05       	cpc	r19, r1
    2064:	f9 f0       	breq	.+62     	; 0x20a4 <malloc+0xb0>
    2066:	28 1b       	sub	r18, r24
    2068:	39 0b       	sbc	r19, r25
    206a:	24 30       	cpi	r18, 0x04	; 4
    206c:	31 05       	cpc	r19, r1
    206e:	80 f4       	brcc	.+32     	; 0x2090 <malloc+0x9c>
    2070:	8a 81       	ldd	r24, Y+2	; 0x02
    2072:	9b 81       	ldd	r25, Y+3	; 0x03
    2074:	61 15       	cp	r22, r1
    2076:	71 05       	cpc	r23, r1
    2078:	21 f0       	breq	.+8      	; 0x2082 <malloc+0x8e>
    207a:	fb 01       	movw	r30, r22
    207c:	93 83       	std	Z+3, r25	; 0x03
    207e:	82 83       	std	Z+2, r24	; 0x02
    2080:	04 c0       	rjmp	.+8      	; 0x208a <malloc+0x96>
    2082:	90 93 f1 02 	sts	0x02F1, r25	; 0x8002f1 <__flp+0x1>
    2086:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <__flp>
    208a:	fe 01       	movw	r30, r28
    208c:	32 96       	adiw	r30, 0x02	; 2
    208e:	44 c0       	rjmp	.+136    	; 0x2118 <malloc+0x124>
    2090:	fe 01       	movw	r30, r28
    2092:	e2 0f       	add	r30, r18
    2094:	f3 1f       	adc	r31, r19
    2096:	81 93       	st	Z+, r24
    2098:	91 93       	st	Z+, r25
    209a:	22 50       	subi	r18, 0x02	; 2
    209c:	31 09       	sbc	r19, r1
    209e:	39 83       	std	Y+1, r19	; 0x01
    20a0:	28 83       	st	Y, r18
    20a2:	3a c0       	rjmp	.+116    	; 0x2118 <malloc+0x124>
    20a4:	20 91 ee 02 	lds	r18, 0x02EE	; 0x8002ee <__brkval>
    20a8:	30 91 ef 02 	lds	r19, 0x02EF	; 0x8002ef <__brkval+0x1>
    20ac:	23 2b       	or	r18, r19
    20ae:	41 f4       	brne	.+16     	; 0x20c0 <malloc+0xcc>
    20b0:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    20b4:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    20b8:	30 93 ef 02 	sts	0x02EF, r19	; 0x8002ef <__brkval+0x1>
    20bc:	20 93 ee 02 	sts	0x02EE, r18	; 0x8002ee <__brkval>
    20c0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    20c4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    20c8:	21 15       	cp	r18, r1
    20ca:	31 05       	cpc	r19, r1
    20cc:	41 f4       	brne	.+16     	; 0x20de <malloc+0xea>
    20ce:	2d b7       	in	r18, 0x3d	; 61
    20d0:	3e b7       	in	r19, 0x3e	; 62
    20d2:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    20d6:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    20da:	24 1b       	sub	r18, r20
    20dc:	35 0b       	sbc	r19, r21
    20de:	e0 91 ee 02 	lds	r30, 0x02EE	; 0x8002ee <__brkval>
    20e2:	f0 91 ef 02 	lds	r31, 0x02EF	; 0x8002ef <__brkval+0x1>
    20e6:	e2 17       	cp	r30, r18
    20e8:	f3 07       	cpc	r31, r19
    20ea:	a0 f4       	brcc	.+40     	; 0x2114 <malloc+0x120>
    20ec:	2e 1b       	sub	r18, r30
    20ee:	3f 0b       	sbc	r19, r31
    20f0:	28 17       	cp	r18, r24
    20f2:	39 07       	cpc	r19, r25
    20f4:	78 f0       	brcs	.+30     	; 0x2114 <malloc+0x120>
    20f6:	ac 01       	movw	r20, r24
    20f8:	4e 5f       	subi	r20, 0xFE	; 254
    20fa:	5f 4f       	sbci	r21, 0xFF	; 255
    20fc:	24 17       	cp	r18, r20
    20fe:	35 07       	cpc	r19, r21
    2100:	48 f0       	brcs	.+18     	; 0x2114 <malloc+0x120>
    2102:	4e 0f       	add	r20, r30
    2104:	5f 1f       	adc	r21, r31
    2106:	50 93 ef 02 	sts	0x02EF, r21	; 0x8002ef <__brkval+0x1>
    210a:	40 93 ee 02 	sts	0x02EE, r20	; 0x8002ee <__brkval>
    210e:	81 93       	st	Z+, r24
    2110:	91 93       	st	Z+, r25
    2112:	02 c0       	rjmp	.+4      	; 0x2118 <malloc+0x124>
    2114:	e0 e0       	ldi	r30, 0x00	; 0
    2116:	f0 e0       	ldi	r31, 0x00	; 0
    2118:	cf 01       	movw	r24, r30
    211a:	df 91       	pop	r29
    211c:	cf 91       	pop	r28
    211e:	1f 91       	pop	r17
    2120:	0f 91       	pop	r16
    2122:	08 95       	ret

00002124 <free>:
    2124:	cf 93       	push	r28
    2126:	df 93       	push	r29
    2128:	00 97       	sbiw	r24, 0x00	; 0
    212a:	09 f4       	brne	.+2      	; 0x212e <free+0xa>
    212c:	81 c0       	rjmp	.+258    	; 0x2230 <free+0x10c>
    212e:	fc 01       	movw	r30, r24
    2130:	32 97       	sbiw	r30, 0x02	; 2
    2132:	13 82       	std	Z+3, r1	; 0x03
    2134:	12 82       	std	Z+2, r1	; 0x02
    2136:	a0 91 f0 02 	lds	r26, 0x02F0	; 0x8002f0 <__flp>
    213a:	b0 91 f1 02 	lds	r27, 0x02F1	; 0x8002f1 <__flp+0x1>
    213e:	10 97       	sbiw	r26, 0x00	; 0
    2140:	81 f4       	brne	.+32     	; 0x2162 <free+0x3e>
    2142:	20 81       	ld	r18, Z
    2144:	31 81       	ldd	r19, Z+1	; 0x01
    2146:	82 0f       	add	r24, r18
    2148:	93 1f       	adc	r25, r19
    214a:	20 91 ee 02 	lds	r18, 0x02EE	; 0x8002ee <__brkval>
    214e:	30 91 ef 02 	lds	r19, 0x02EF	; 0x8002ef <__brkval+0x1>
    2152:	28 17       	cp	r18, r24
    2154:	39 07       	cpc	r19, r25
    2156:	51 f5       	brne	.+84     	; 0x21ac <free+0x88>
    2158:	f0 93 ef 02 	sts	0x02EF, r31	; 0x8002ef <__brkval+0x1>
    215c:	e0 93 ee 02 	sts	0x02EE, r30	; 0x8002ee <__brkval>
    2160:	67 c0       	rjmp	.+206    	; 0x2230 <free+0x10c>
    2162:	ed 01       	movw	r28, r26
    2164:	20 e0       	ldi	r18, 0x00	; 0
    2166:	30 e0       	ldi	r19, 0x00	; 0
    2168:	ce 17       	cp	r28, r30
    216a:	df 07       	cpc	r29, r31
    216c:	40 f4       	brcc	.+16     	; 0x217e <free+0x5a>
    216e:	4a 81       	ldd	r20, Y+2	; 0x02
    2170:	5b 81       	ldd	r21, Y+3	; 0x03
    2172:	9e 01       	movw	r18, r28
    2174:	41 15       	cp	r20, r1
    2176:	51 05       	cpc	r21, r1
    2178:	f1 f0       	breq	.+60     	; 0x21b6 <free+0x92>
    217a:	ea 01       	movw	r28, r20
    217c:	f5 cf       	rjmp	.-22     	; 0x2168 <free+0x44>
    217e:	d3 83       	std	Z+3, r29	; 0x03
    2180:	c2 83       	std	Z+2, r28	; 0x02
    2182:	40 81       	ld	r20, Z
    2184:	51 81       	ldd	r21, Z+1	; 0x01
    2186:	84 0f       	add	r24, r20
    2188:	95 1f       	adc	r25, r21
    218a:	c8 17       	cp	r28, r24
    218c:	d9 07       	cpc	r29, r25
    218e:	59 f4       	brne	.+22     	; 0x21a6 <free+0x82>
    2190:	88 81       	ld	r24, Y
    2192:	99 81       	ldd	r25, Y+1	; 0x01
    2194:	84 0f       	add	r24, r20
    2196:	95 1f       	adc	r25, r21
    2198:	02 96       	adiw	r24, 0x02	; 2
    219a:	91 83       	std	Z+1, r25	; 0x01
    219c:	80 83       	st	Z, r24
    219e:	8a 81       	ldd	r24, Y+2	; 0x02
    21a0:	9b 81       	ldd	r25, Y+3	; 0x03
    21a2:	93 83       	std	Z+3, r25	; 0x03
    21a4:	82 83       	std	Z+2, r24	; 0x02
    21a6:	21 15       	cp	r18, r1
    21a8:	31 05       	cpc	r19, r1
    21aa:	29 f4       	brne	.+10     	; 0x21b6 <free+0x92>
    21ac:	f0 93 f1 02 	sts	0x02F1, r31	; 0x8002f1 <__flp+0x1>
    21b0:	e0 93 f0 02 	sts	0x02F0, r30	; 0x8002f0 <__flp>
    21b4:	3d c0       	rjmp	.+122    	; 0x2230 <free+0x10c>
    21b6:	e9 01       	movw	r28, r18
    21b8:	fb 83       	std	Y+3, r31	; 0x03
    21ba:	ea 83       	std	Y+2, r30	; 0x02
    21bc:	49 91       	ld	r20, Y+
    21be:	59 91       	ld	r21, Y+
    21c0:	c4 0f       	add	r28, r20
    21c2:	d5 1f       	adc	r29, r21
    21c4:	ec 17       	cp	r30, r28
    21c6:	fd 07       	cpc	r31, r29
    21c8:	61 f4       	brne	.+24     	; 0x21e2 <free+0xbe>
    21ca:	80 81       	ld	r24, Z
    21cc:	91 81       	ldd	r25, Z+1	; 0x01
    21ce:	84 0f       	add	r24, r20
    21d0:	95 1f       	adc	r25, r21
    21d2:	02 96       	adiw	r24, 0x02	; 2
    21d4:	e9 01       	movw	r28, r18
    21d6:	99 83       	std	Y+1, r25	; 0x01
    21d8:	88 83       	st	Y, r24
    21da:	82 81       	ldd	r24, Z+2	; 0x02
    21dc:	93 81       	ldd	r25, Z+3	; 0x03
    21de:	9b 83       	std	Y+3, r25	; 0x03
    21e0:	8a 83       	std	Y+2, r24	; 0x02
    21e2:	e0 e0       	ldi	r30, 0x00	; 0
    21e4:	f0 e0       	ldi	r31, 0x00	; 0
    21e6:	12 96       	adiw	r26, 0x02	; 2
    21e8:	8d 91       	ld	r24, X+
    21ea:	9c 91       	ld	r25, X
    21ec:	13 97       	sbiw	r26, 0x03	; 3
    21ee:	00 97       	sbiw	r24, 0x00	; 0
    21f0:	19 f0       	breq	.+6      	; 0x21f8 <free+0xd4>
    21f2:	fd 01       	movw	r30, r26
    21f4:	dc 01       	movw	r26, r24
    21f6:	f7 cf       	rjmp	.-18     	; 0x21e6 <free+0xc2>
    21f8:	8d 91       	ld	r24, X+
    21fa:	9c 91       	ld	r25, X
    21fc:	11 97       	sbiw	r26, 0x01	; 1
    21fe:	9d 01       	movw	r18, r26
    2200:	2e 5f       	subi	r18, 0xFE	; 254
    2202:	3f 4f       	sbci	r19, 0xFF	; 255
    2204:	82 0f       	add	r24, r18
    2206:	93 1f       	adc	r25, r19
    2208:	20 91 ee 02 	lds	r18, 0x02EE	; 0x8002ee <__brkval>
    220c:	30 91 ef 02 	lds	r19, 0x02EF	; 0x8002ef <__brkval+0x1>
    2210:	28 17       	cp	r18, r24
    2212:	39 07       	cpc	r19, r25
    2214:	69 f4       	brne	.+26     	; 0x2230 <free+0x10c>
    2216:	30 97       	sbiw	r30, 0x00	; 0
    2218:	29 f4       	brne	.+10     	; 0x2224 <free+0x100>
    221a:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <__flp+0x1>
    221e:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <__flp>
    2222:	02 c0       	rjmp	.+4      	; 0x2228 <free+0x104>
    2224:	13 82       	std	Z+3, r1	; 0x03
    2226:	12 82       	std	Z+2, r1	; 0x02
    2228:	b0 93 ef 02 	sts	0x02EF, r27	; 0x8002ef <__brkval+0x1>
    222c:	a0 93 ee 02 	sts	0x02EE, r26	; 0x8002ee <__brkval>
    2230:	df 91       	pop	r29
    2232:	cf 91       	pop	r28
    2234:	08 95       	ret

00002236 <strnlen_P>:
    2236:	fc 01       	movw	r30, r24
    2238:	05 90       	lpm	r0, Z+
    223a:	61 50       	subi	r22, 0x01	; 1
    223c:	70 40       	sbci	r23, 0x00	; 0
    223e:	01 10       	cpse	r0, r1
    2240:	d8 f7       	brcc	.-10     	; 0x2238 <strnlen_P+0x2>
    2242:	80 95       	com	r24
    2244:	90 95       	com	r25
    2246:	8e 0f       	add	r24, r30
    2248:	9f 1f       	adc	r25, r31
    224a:	08 95       	ret

0000224c <memset>:
    224c:	dc 01       	movw	r26, r24
    224e:	01 c0       	rjmp	.+2      	; 0x2252 <memset+0x6>
    2250:	6d 93       	st	X+, r22
    2252:	41 50       	subi	r20, 0x01	; 1
    2254:	50 40       	sbci	r21, 0x00	; 0
    2256:	e0 f7       	brcc	.-8      	; 0x2250 <memset+0x4>
    2258:	08 95       	ret

0000225a <strnlen>:
    225a:	fc 01       	movw	r30, r24
    225c:	61 50       	subi	r22, 0x01	; 1
    225e:	70 40       	sbci	r23, 0x00	; 0
    2260:	01 90       	ld	r0, Z+
    2262:	01 10       	cpse	r0, r1
    2264:	d8 f7       	brcc	.-10     	; 0x225c <strnlen+0x2>
    2266:	80 95       	com	r24
    2268:	90 95       	com	r25
    226a:	8e 0f       	add	r24, r30
    226c:	9f 1f       	adc	r25, r31
    226e:	08 95       	ret

00002270 <strrev>:
    2270:	dc 01       	movw	r26, r24
    2272:	fc 01       	movw	r30, r24
    2274:	67 2f       	mov	r22, r23
    2276:	71 91       	ld	r23, Z+
    2278:	77 23       	and	r23, r23
    227a:	e1 f7       	brne	.-8      	; 0x2274 <strrev+0x4>
    227c:	32 97       	sbiw	r30, 0x02	; 2
    227e:	04 c0       	rjmp	.+8      	; 0x2288 <strrev+0x18>
    2280:	7c 91       	ld	r23, X
    2282:	6d 93       	st	X+, r22
    2284:	70 83       	st	Z, r23
    2286:	62 91       	ld	r22, -Z
    2288:	ae 17       	cp	r26, r30
    228a:	bf 07       	cpc	r27, r31
    228c:	c8 f3       	brcs	.-14     	; 0x2280 <strrev+0x10>
    228e:	08 95       	ret

00002290 <fputc>:
    2290:	0f 93       	push	r16
    2292:	1f 93       	push	r17
    2294:	cf 93       	push	r28
    2296:	df 93       	push	r29
    2298:	fb 01       	movw	r30, r22
    229a:	23 81       	ldd	r18, Z+3	; 0x03
    229c:	21 fd       	sbrc	r18, 1
    229e:	03 c0       	rjmp	.+6      	; 0x22a6 <fputc+0x16>
    22a0:	8f ef       	ldi	r24, 0xFF	; 255
    22a2:	9f ef       	ldi	r25, 0xFF	; 255
    22a4:	2c c0       	rjmp	.+88     	; 0x22fe <fputc+0x6e>
    22a6:	22 ff       	sbrs	r18, 2
    22a8:	16 c0       	rjmp	.+44     	; 0x22d6 <fputc+0x46>
    22aa:	46 81       	ldd	r20, Z+6	; 0x06
    22ac:	57 81       	ldd	r21, Z+7	; 0x07
    22ae:	24 81       	ldd	r18, Z+4	; 0x04
    22b0:	35 81       	ldd	r19, Z+5	; 0x05
    22b2:	42 17       	cp	r20, r18
    22b4:	53 07       	cpc	r21, r19
    22b6:	44 f4       	brge	.+16     	; 0x22c8 <fputc+0x38>
    22b8:	a0 81       	ld	r26, Z
    22ba:	b1 81       	ldd	r27, Z+1	; 0x01
    22bc:	9d 01       	movw	r18, r26
    22be:	2f 5f       	subi	r18, 0xFF	; 255
    22c0:	3f 4f       	sbci	r19, 0xFF	; 255
    22c2:	31 83       	std	Z+1, r19	; 0x01
    22c4:	20 83       	st	Z, r18
    22c6:	8c 93       	st	X, r24
    22c8:	26 81       	ldd	r18, Z+6	; 0x06
    22ca:	37 81       	ldd	r19, Z+7	; 0x07
    22cc:	2f 5f       	subi	r18, 0xFF	; 255
    22ce:	3f 4f       	sbci	r19, 0xFF	; 255
    22d0:	37 83       	std	Z+7, r19	; 0x07
    22d2:	26 83       	std	Z+6, r18	; 0x06
    22d4:	14 c0       	rjmp	.+40     	; 0x22fe <fputc+0x6e>
    22d6:	8b 01       	movw	r16, r22
    22d8:	ec 01       	movw	r28, r24
    22da:	fb 01       	movw	r30, r22
    22dc:	00 84       	ldd	r0, Z+8	; 0x08
    22de:	f1 85       	ldd	r31, Z+9	; 0x09
    22e0:	e0 2d       	mov	r30, r0
    22e2:	09 95       	icall
    22e4:	89 2b       	or	r24, r25
    22e6:	e1 f6       	brne	.-72     	; 0x22a0 <fputc+0x10>
    22e8:	d8 01       	movw	r26, r16
    22ea:	16 96       	adiw	r26, 0x06	; 6
    22ec:	8d 91       	ld	r24, X+
    22ee:	9c 91       	ld	r25, X
    22f0:	17 97       	sbiw	r26, 0x07	; 7
    22f2:	01 96       	adiw	r24, 0x01	; 1
    22f4:	17 96       	adiw	r26, 0x07	; 7
    22f6:	9c 93       	st	X, r25
    22f8:	8e 93       	st	-X, r24
    22fa:	16 97       	sbiw	r26, 0x06	; 6
    22fc:	ce 01       	movw	r24, r28
    22fe:	df 91       	pop	r29
    2300:	cf 91       	pop	r28
    2302:	1f 91       	pop	r17
    2304:	0f 91       	pop	r16
    2306:	08 95       	ret

00002308 <__ultoa_invert>:
    2308:	fa 01       	movw	r30, r20
    230a:	aa 27       	eor	r26, r26
    230c:	28 30       	cpi	r18, 0x08	; 8
    230e:	51 f1       	breq	.+84     	; 0x2364 <__ultoa_invert+0x5c>
    2310:	20 31       	cpi	r18, 0x10	; 16
    2312:	81 f1       	breq	.+96     	; 0x2374 <__ultoa_invert+0x6c>
    2314:	e8 94       	clt
    2316:	6f 93       	push	r22
    2318:	6e 7f       	andi	r22, 0xFE	; 254
    231a:	6e 5f       	subi	r22, 0xFE	; 254
    231c:	7f 4f       	sbci	r23, 0xFF	; 255
    231e:	8f 4f       	sbci	r24, 0xFF	; 255
    2320:	9f 4f       	sbci	r25, 0xFF	; 255
    2322:	af 4f       	sbci	r26, 0xFF	; 255
    2324:	b1 e0       	ldi	r27, 0x01	; 1
    2326:	3e d0       	rcall	.+124    	; 0x23a4 <__ultoa_invert+0x9c>
    2328:	b4 e0       	ldi	r27, 0x04	; 4
    232a:	3c d0       	rcall	.+120    	; 0x23a4 <__ultoa_invert+0x9c>
    232c:	67 0f       	add	r22, r23
    232e:	78 1f       	adc	r23, r24
    2330:	89 1f       	adc	r24, r25
    2332:	9a 1f       	adc	r25, r26
    2334:	a1 1d       	adc	r26, r1
    2336:	68 0f       	add	r22, r24
    2338:	79 1f       	adc	r23, r25
    233a:	8a 1f       	adc	r24, r26
    233c:	91 1d       	adc	r25, r1
    233e:	a1 1d       	adc	r26, r1
    2340:	6a 0f       	add	r22, r26
    2342:	71 1d       	adc	r23, r1
    2344:	81 1d       	adc	r24, r1
    2346:	91 1d       	adc	r25, r1
    2348:	a1 1d       	adc	r26, r1
    234a:	20 d0       	rcall	.+64     	; 0x238c <__ultoa_invert+0x84>
    234c:	09 f4       	brne	.+2      	; 0x2350 <__ultoa_invert+0x48>
    234e:	68 94       	set
    2350:	3f 91       	pop	r19
    2352:	2a e0       	ldi	r18, 0x0A	; 10
    2354:	26 9f       	mul	r18, r22
    2356:	11 24       	eor	r1, r1
    2358:	30 19       	sub	r19, r0
    235a:	30 5d       	subi	r19, 0xD0	; 208
    235c:	31 93       	st	Z+, r19
    235e:	de f6       	brtc	.-74     	; 0x2316 <__ultoa_invert+0xe>
    2360:	cf 01       	movw	r24, r30
    2362:	08 95       	ret
    2364:	46 2f       	mov	r20, r22
    2366:	47 70       	andi	r20, 0x07	; 7
    2368:	40 5d       	subi	r20, 0xD0	; 208
    236a:	41 93       	st	Z+, r20
    236c:	b3 e0       	ldi	r27, 0x03	; 3
    236e:	0f d0       	rcall	.+30     	; 0x238e <__ultoa_invert+0x86>
    2370:	c9 f7       	brne	.-14     	; 0x2364 <__ultoa_invert+0x5c>
    2372:	f6 cf       	rjmp	.-20     	; 0x2360 <__ultoa_invert+0x58>
    2374:	46 2f       	mov	r20, r22
    2376:	4f 70       	andi	r20, 0x0F	; 15
    2378:	40 5d       	subi	r20, 0xD0	; 208
    237a:	4a 33       	cpi	r20, 0x3A	; 58
    237c:	18 f0       	brcs	.+6      	; 0x2384 <__ultoa_invert+0x7c>
    237e:	49 5d       	subi	r20, 0xD9	; 217
    2380:	31 fd       	sbrc	r19, 1
    2382:	40 52       	subi	r20, 0x20	; 32
    2384:	41 93       	st	Z+, r20
    2386:	02 d0       	rcall	.+4      	; 0x238c <__ultoa_invert+0x84>
    2388:	a9 f7       	brne	.-22     	; 0x2374 <__ultoa_invert+0x6c>
    238a:	ea cf       	rjmp	.-44     	; 0x2360 <__ultoa_invert+0x58>
    238c:	b4 e0       	ldi	r27, 0x04	; 4
    238e:	a6 95       	lsr	r26
    2390:	97 95       	ror	r25
    2392:	87 95       	ror	r24
    2394:	77 95       	ror	r23
    2396:	67 95       	ror	r22
    2398:	ba 95       	dec	r27
    239a:	c9 f7       	brne	.-14     	; 0x238e <__ultoa_invert+0x86>
    239c:	00 97       	sbiw	r24, 0x00	; 0
    239e:	61 05       	cpc	r22, r1
    23a0:	71 05       	cpc	r23, r1
    23a2:	08 95       	ret
    23a4:	9b 01       	movw	r18, r22
    23a6:	ac 01       	movw	r20, r24
    23a8:	0a 2e       	mov	r0, r26
    23aa:	06 94       	lsr	r0
    23ac:	57 95       	ror	r21
    23ae:	47 95       	ror	r20
    23b0:	37 95       	ror	r19
    23b2:	27 95       	ror	r18
    23b4:	ba 95       	dec	r27
    23b6:	c9 f7       	brne	.-14     	; 0x23aa <__ultoa_invert+0xa2>
    23b8:	62 0f       	add	r22, r18
    23ba:	73 1f       	adc	r23, r19
    23bc:	84 1f       	adc	r24, r20
    23be:	95 1f       	adc	r25, r21
    23c0:	a0 1d       	adc	r26, r0
    23c2:	08 95       	ret

000023c4 <__prologue_saves__>:
    23c4:	2f 92       	push	r2
    23c6:	3f 92       	push	r3
    23c8:	4f 92       	push	r4
    23ca:	5f 92       	push	r5
    23cc:	6f 92       	push	r6
    23ce:	7f 92       	push	r7
    23d0:	8f 92       	push	r8
    23d2:	9f 92       	push	r9
    23d4:	af 92       	push	r10
    23d6:	bf 92       	push	r11
    23d8:	cf 92       	push	r12
    23da:	df 92       	push	r13
    23dc:	ef 92       	push	r14
    23de:	ff 92       	push	r15
    23e0:	0f 93       	push	r16
    23e2:	1f 93       	push	r17
    23e4:	cf 93       	push	r28
    23e6:	df 93       	push	r29
    23e8:	cd b7       	in	r28, 0x3d	; 61
    23ea:	de b7       	in	r29, 0x3e	; 62
    23ec:	ca 1b       	sub	r28, r26
    23ee:	db 0b       	sbc	r29, r27
    23f0:	0f b6       	in	r0, 0x3f	; 63
    23f2:	f8 94       	cli
    23f4:	de bf       	out	0x3e, r29	; 62
    23f6:	0f be       	out	0x3f, r0	; 63
    23f8:	cd bf       	out	0x3d, r28	; 61
    23fa:	09 94       	ijmp

000023fc <__epilogue_restores__>:
    23fc:	2a 88       	ldd	r2, Y+18	; 0x12
    23fe:	39 88       	ldd	r3, Y+17	; 0x11
    2400:	48 88       	ldd	r4, Y+16	; 0x10
    2402:	5f 84       	ldd	r5, Y+15	; 0x0f
    2404:	6e 84       	ldd	r6, Y+14	; 0x0e
    2406:	7d 84       	ldd	r7, Y+13	; 0x0d
    2408:	8c 84       	ldd	r8, Y+12	; 0x0c
    240a:	9b 84       	ldd	r9, Y+11	; 0x0b
    240c:	aa 84       	ldd	r10, Y+10	; 0x0a
    240e:	b9 84       	ldd	r11, Y+9	; 0x09
    2410:	c8 84       	ldd	r12, Y+8	; 0x08
    2412:	df 80       	ldd	r13, Y+7	; 0x07
    2414:	ee 80       	ldd	r14, Y+6	; 0x06
    2416:	fd 80       	ldd	r15, Y+5	; 0x05
    2418:	0c 81       	ldd	r16, Y+4	; 0x04
    241a:	1b 81       	ldd	r17, Y+3	; 0x03
    241c:	aa 81       	ldd	r26, Y+2	; 0x02
    241e:	b9 81       	ldd	r27, Y+1	; 0x01
    2420:	ce 0f       	add	r28, r30
    2422:	d1 1d       	adc	r29, r1
    2424:	0f b6       	in	r0, 0x3f	; 63
    2426:	f8 94       	cli
    2428:	de bf       	out	0x3e, r29	; 62
    242a:	0f be       	out	0x3f, r0	; 63
    242c:	cd bf       	out	0x3d, r28	; 61
    242e:	ed 01       	movw	r28, r26
    2430:	08 95       	ret

00002432 <_exit>:
    2432:	f8 94       	cli

00002434 <__stop_program>:
    2434:	ff cf       	rjmp	.-2      	; 0x2434 <__stop_program>
