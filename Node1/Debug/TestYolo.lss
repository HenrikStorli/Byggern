
TestYolo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000016c  00800100  000014f8  0000158c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  0080026c  0080026c  000016f8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000016f8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001754  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000258  00000000  00000000  00001790  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002868  00000000  00000000  000019e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011e8  00000000  00000000  00004250  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013da  00000000  00000000  00005438  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000614  00000000  00000000  00006814  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000976  00000000  00000000  00006e28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001752  00000000  00000000  0000779e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f8  00000000  00000000  00008ef0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 09 02 	jmp	0x412	; 0x412 <__vector_1>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <main+0x46>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	12 e0       	ldi	r17, 0x02	; 2
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e8 ef       	ldi	r30, 0xF8	; 248
     37c:	f4 e1       	ldi	r31, 0x14	; 20
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	ac 36       	cpi	r26, 0x6C	; 108
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	22 e0       	ldi	r18, 0x02	; 2
     38c:	ac e6       	ldi	r26, 0x6C	; 108
     38e:	b2 e0       	ldi	r27, 0x02	; 2
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	ae 37       	cpi	r26, 0x7E	; 126
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 7e 05 	call	0xafc	; 0xafc <main>
     39e:	0c 94 7a 0a 	jmp	0x14f4	; 0x14f4 <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <ADC_calibrate>:
    uint8_t retreived_value = ext_ram1[adrs];
    if (retreived_value != 0b01010101) {
        printf("ADC error, ext_ram1[%4d] = %02X  \n\r", adrs, retreived_value);
    }
    else{
        printf("ADC success, ext_ram1[%4d] = %02X  \n\r", adrs, retreived_value);
     3a6:	e1 e0       	ldi	r30, 0x01	; 1
     3a8:	f4 e1       	ldi	r31, 0x14	; 20
     3aa:	20 e8       	ldi	r18, 0x80	; 128
     3ac:	20 83       	st	Z, r18
     3ae:	26 ef       	ldi	r18, 0xF6	; 246
     3b0:	2a 95       	dec	r18
     3b2:	f1 f7       	brne	.-4      	; 0x3b0 <ADC_calibrate+0xa>
     3b4:	20 81       	ld	r18, Z
     3b6:	30 e0       	ldi	r19, 0x00	; 0
     3b8:	dc 01       	movw	r26, r24
     3ba:	2d 93       	st	X+, r18
     3bc:	3c 93       	st	X, r19
     3be:	21 e8       	ldi	r18, 0x81	; 129
     3c0:	20 83       	st	Z, r18
     3c2:	b6 ef       	ldi	r27, 0xF6	; 246
     3c4:	ba 95       	dec	r27
     3c6:	f1 f7       	brne	.-4      	; 0x3c4 <ADC_calibrate+0x1e>
     3c8:	20 81       	ld	r18, Z
     3ca:	30 e0       	ldi	r19, 0x00	; 0
     3cc:	fc 01       	movw	r30, r24
     3ce:	33 83       	std	Z+3, r19	; 0x03
     3d0:	22 83       	std	Z+2, r18	; 0x02
     3d2:	08 95       	ret

000003d4 <timer_init>:
}


void timer_init(void) {

    DDRB|=(1<<PB0);  /*set OC0 pin as output*/
     3d4:	b8 9a       	sbi	0x17, 0	; 23

    TCCR0 |= (1<<WGM01) | (0<<WGM00);
     3d6:	83 b7       	in	r24, 0x33	; 51
     3d8:	88 60       	ori	r24, 0x08	; 8
     3da:	83 bf       	out	0x33, r24	; 51
    TCCR0 |= (1<<COM00);
     3dc:	83 b7       	in	r24, 0x33	; 51
     3de:	80 61       	ori	r24, 0x10	; 16
     3e0:	83 bf       	out	0x33, r24	; 51
    TCCR0 |= (1<<CS00);
     3e2:	83 b7       	in	r24, 0x33	; 51
     3e4:	81 60       	ori	r24, 0x01	; 1
     3e6:	83 bf       	out	0x33, r24	; 51

    OCR0 = 0b00000001;
     3e8:	81 e0       	ldi	r24, 0x01	; 1
     3ea:	81 bf       	out	0x31, r24	; 49
     3ec:	08 95       	ret

000003ee <CAN_init>:
volatile int flag = 0;

uint8_t CAN_init(uint8_t mode){
    // Enable interrupt on PIN PE0 (INT2).

    mcp_init(mode);
     3ee:	0e 94 37 04 	call	0x86e	; 0x86e <mcp_init>

    cli(); // Disable global interrupts
     3f2:	f8 94       	cli
    
    
    MCUCR |= (1 << ISC01);
     3f4:	85 b7       	in	r24, 0x35	; 53
     3f6:	82 60       	ori	r24, 0x02	; 2
     3f8:	85 bf       	out	0x35, r24	; 53
    MCUCR &= ~(1 << ISC00);
     3fa:	85 b7       	in	r24, 0x35	; 53
     3fc:	8e 7f       	andi	r24, 0xFE	; 254
     3fe:	85 bf       	out	0x35, r24	; 53
    GICR |= (1 << INT0);   
     400:	8b b7       	in	r24, 0x3b	; 59
     402:	80 64       	ori	r24, 0x40	; 64
     404:	8b bf       	out	0x3b, r24	; 59

    sei(); // Enable global interrupts
     406:	78 94       	sei

    mcp_write(MCP_CANINTE, MCP_RX_INT); // Enable both buffers
     408:	63 e0       	ldi	r22, 0x03	; 3
     40a:	8b e2       	ldi	r24, 0x2B	; 43
     40c:	0e 94 fe 03 	call	0x7fc	; 0x7fc <mcp_write>

}
     410:	08 95       	ret

00000412 <__vector_1>:

ISR(INT0_vect){
     412:	1f 92       	push	r1
     414:	0f 92       	push	r0
     416:	0f b6       	in	r0, 0x3f	; 63
     418:	0f 92       	push	r0
     41a:	11 24       	eor	r1, r1
     41c:	8f 93       	push	r24
     41e:	9f 93       	push	r25
    flag = 1;
     420:	81 e0       	ldi	r24, 0x01	; 1
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <__data_end+0x1>
     428:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <__data_end>
}
     42c:	9f 91       	pop	r25
     42e:	8f 91       	pop	r24
     430:	0f 90       	pop	r0
     432:	0f be       	out	0x3f, r0	; 63
     434:	0f 90       	pop	r0
     436:	1f 90       	pop	r1
     438:	18 95       	reti

0000043a <CAN_check_interrupt>:


uint8_t CAN_check_interrupt(){
    if(flag){
     43a:	20 91 6c 02 	lds	r18, 0x026C	; 0x80026c <__data_end>
     43e:	30 91 6d 02 	lds	r19, 0x026D	; 0x80026d <__data_end+0x1>
     442:	81 e0       	ldi	r24, 0x01	; 1
     444:	23 2b       	or	r18, r19
     446:	09 f4       	brne	.+2      	; 0x44a <CAN_check_interrupt+0x10>
     448:	80 e0       	ldi	r24, 0x00	; 0
        return 1;
    }
return 0;
}
     44a:	08 95       	ret

0000044c <CAN_message_transmission>:


uint8_t CAN_message_transmission(CAN_message_t* can_message){
     44c:	0f 93       	push	r16
     44e:	1f 93       	push	r17
     450:	cf 93       	push	r28
     452:	df 93       	push	r29
     454:	8c 01       	movw	r16, r24

    //Splitting up the identifier into two bytes
    uint8_t identifier_low = (can_message -> identifier) % 8;
     456:	fc 01       	movw	r30, r24
     458:	c0 81       	ld	r28, Z
     45a:	d1 81       	ldd	r29, Z+1	; 0x01
    uint8_t identifier_high = (can_message -> identifier) / 8;

    //Writing the identifier
    mcp_write(MCP_TXB0SIDL, identifier_low);
     45c:	6c 2f       	mov	r22, r28
     45e:	67 70       	andi	r22, 0x07	; 7
     460:	82 e3       	ldi	r24, 0x32	; 50
     462:	0e 94 fe 03 	call	0x7fc	; 0x7fc <mcp_write>
    mcp_write(MCP_TXB0SIDH, identifier_high);
     466:	be 01       	movw	r22, r28
     468:	76 95       	lsr	r23
     46a:	67 95       	ror	r22
     46c:	76 95       	lsr	r23
     46e:	67 95       	ror	r22
     470:	76 95       	lsr	r23
     472:	67 95       	ror	r22
     474:	81 e3       	ldi	r24, 0x31	; 49
     476:	0e 94 fe 03 	call	0x7fc	; 0x7fc <mcp_write>

    //Writing the length of the data message
    mcp_write(MCP_TXB0DLC, can_message -> data_length);
     47a:	f8 01       	movw	r30, r16
     47c:	62 81       	ldd	r22, Z+2	; 0x02
     47e:	85 e3       	ldi	r24, 0x35	; 53
     480:	0e 94 fe 03 	call	0x7fc	; 0x7fc <mcp_write>

    //Writing the data Message
    uint8_t data_byte;
    for(uint8_t i = 0; i < (can_message -> data_length); i++){
     484:	f8 01       	movw	r30, r16
     486:	82 81       	ldd	r24, Z+2	; 0x02
     488:	88 23       	and	r24, r24
     48a:	71 f0       	breq	.+28     	; 0x4a8 <CAN_message_transmission+0x5c>
     48c:	c0 e0       	ldi	r28, 0x00	; 0
        data_byte = (can_message -> data)[i];
     48e:	f8 01       	movw	r30, r16
     490:	ec 0f       	add	r30, r28
     492:	f1 1d       	adc	r31, r1
        mcp_write(MCP_TXB0D0 + i, data_byte);
     494:	63 81       	ldd	r22, Z+3	; 0x03
     496:	86 e3       	ldi	r24, 0x36	; 54
     498:	8c 0f       	add	r24, r28
     49a:	0e 94 fe 03 	call	0x7fc	; 0x7fc <mcp_write>
    //Writing the length of the data message
    mcp_write(MCP_TXB0DLC, can_message -> data_length);

    //Writing the data Message
    uint8_t data_byte;
    for(uint8_t i = 0; i < (can_message -> data_length); i++){
     49e:	cf 5f       	subi	r28, 0xFF	; 255
     4a0:	f8 01       	movw	r30, r16
     4a2:	82 81       	ldd	r24, Z+2	; 0x02
     4a4:	c8 17       	cp	r28, r24
     4a6:	98 f3       	brcs	.-26     	; 0x48e <CAN_message_transmission+0x42>
        data_byte = (can_message -> data)[i];
        mcp_write(MCP_TXB0D0 + i, data_byte);
    }

    // Request to send to given buffer
    mcp_request_to_send(0);
     4a8:	80 e0       	ldi	r24, 0x00	; 0
     4aa:	0e 94 7d 04 	call	0x8fa	; 0x8fa <mcp_request_to_send>
}
     4ae:	df 91       	pop	r29
     4b0:	cf 91       	pop	r28
     4b2:	1f 91       	pop	r17
     4b4:	0f 91       	pop	r16
     4b6:	08 95       	ret

000004b8 <CAN_meessage_reception>:


CAN_message_t CAN_meessage_reception(){
     4b8:	9f 92       	push	r9
     4ba:	af 92       	push	r10
     4bc:	bf 92       	push	r11
     4be:	cf 92       	push	r12
     4c0:	df 92       	push	r13
     4c2:	ef 92       	push	r14
     4c4:	ff 92       	push	r15
     4c6:	0f 93       	push	r16
     4c8:	1f 93       	push	r17
     4ca:	cf 93       	push	r28
     4cc:	df 93       	push	r29
     4ce:	cd b7       	in	r28, 0x3d	; 61
     4d0:	de b7       	in	r29, 0x3e	; 62
     4d2:	2b 97       	sbiw	r28, 0x0b	; 11
     4d4:	0f b6       	in	r0, 0x3f	; 63
     4d6:	f8 94       	cli
     4d8:	de bf       	out	0x3e, r29	; 62
     4da:	0f be       	out	0x3f, r0	; 63
     4dc:	cd bf       	out	0x3d, r28	; 61
     4de:	5c 01       	movw	r10, r24

    uint8_t byte_mask = 0xE0; // Mask for lower part of identifier
    uint8_t length_mask = 0x0F; // Mask for message length register

    // Reading the identifier higher byte
    unsigned int identifier_high = mcp_read(MCP_RXB0SIDH);
     4e0:	81 e6       	ldi	r24, 0x61	; 97
     4e2:	0e 94 19 04 	call	0x832	; 0x832 <mcp_read>
     4e6:	c8 2e       	mov	r12, r24
     4e8:	d1 2c       	mov	r13, r1
    identifier_high = (identifier_high << 8 );

    // Reading the identifier lower byte
    uint8_t identifier_low = mcp_read(MCP_RXB0SIDL);
     4ea:	82 e6       	ldi	r24, 0x62	; 98
     4ec:	0e 94 19 04 	call	0x832	; 0x832 <mcp_read>
    identifier_low &= byte_mask;

    message.identifier = identifier_low + identifier_high;
     4f0:	dc 2c       	mov	r13, r12
     4f2:	cc 24       	eor	r12, r12
     4f4:	80 7e       	andi	r24, 0xE0	; 224
     4f6:	c8 0e       	add	r12, r24
     4f8:	d1 1c       	adc	r13, r1

    // Reading the message length
    message.data_length = mcp_read(MCP_RXB0DLC)&length_mask;
     4fa:	85 e6       	ldi	r24, 0x65	; 101
     4fc:	0e 94 19 04 	call	0x832	; 0x832 <mcp_read>
     500:	8f 70       	andi	r24, 0x0F	; 15
     502:	98 2e       	mov	r9, r24

    // Reading the data in the message
    for(uint8_t i = 0; i < message.data_length; i++){
     504:	81 f0       	breq	.+32     	; 0x526 <__stack+0x27>
     506:	7e 01       	movw	r14, r28
     508:	84 e0       	ldi	r24, 0x04	; 4
     50a:	e8 0e       	add	r14, r24
     50c:	f1 1c       	adc	r15, r1
     50e:	06 e6       	ldi	r16, 0x66	; 102
     510:	09 0d       	add	r16, r9
     512:	16 e6       	ldi	r17, 0x66	; 102
        (message.data)[i] = mcp_read(MCP_RXB0DM +i);
     514:	81 2f       	mov	r24, r17
     516:	0e 94 19 04 	call	0x832	; 0x832 <mcp_read>
     51a:	f7 01       	movw	r30, r14
     51c:	81 93       	st	Z+, r24
     51e:	7f 01       	movw	r14, r30
     520:	1f 5f       	subi	r17, 0xFF	; 255

    // Reading the message length
    message.data_length = mcp_read(MCP_RXB0DLC)&length_mask;

    // Reading the data in the message
    for(uint8_t i = 0; i < message.data_length; i++){
     522:	10 13       	cpse	r17, r16
     524:	f7 cf       	rjmp	.-18     	; 0x514 <__stack+0x15>
        (message.data)[i] = mcp_read(MCP_RXB0DM +i);
    }
    
    return message;
     526:	da 82       	std	Y+2, r13	; 0x02
     528:	c9 82       	std	Y+1, r12	; 0x01
     52a:	9b 82       	std	Y+3, r9	; 0x03
     52c:	8b e0       	ldi	r24, 0x0B	; 11
     52e:	fe 01       	movw	r30, r28
     530:	31 96       	adiw	r30, 0x01	; 1
     532:	d5 01       	movw	r26, r10
     534:	01 90       	ld	r0, Z+
     536:	0d 92       	st	X+, r0
     538:	8a 95       	dec	r24
     53a:	e1 f7       	brne	.-8      	; 0x534 <__stack+0x35>
}
     53c:	c5 01       	movw	r24, r10
     53e:	2b 96       	adiw	r28, 0x0b	; 11
     540:	0f b6       	in	r0, 0x3f	; 63
     542:	f8 94       	cli
     544:	de bf       	out	0x3e, r29	; 62
     546:	0f be       	out	0x3f, r0	; 63
     548:	cd bf       	out	0x3d, r28	; 61
     54a:	df 91       	pop	r29
     54c:	cf 91       	pop	r28
     54e:	1f 91       	pop	r17
     550:	0f 91       	pop	r16
     552:	ff 90       	pop	r15
     554:	ef 90       	pop	r14
     556:	df 90       	pop	r13
     558:	cf 90       	pop	r12
     55a:	bf 90       	pop	r11
     55c:	af 90       	pop	r10
     55e:	9f 90       	pop	r9
     560:	08 95       	ret

00000562 <CAN_meessage_reception2>:

CAN_message_t CAN_meessage_reception2(){
     562:	9f 92       	push	r9
     564:	af 92       	push	r10
     566:	bf 92       	push	r11
     568:	cf 92       	push	r12
     56a:	df 92       	push	r13
     56c:	ef 92       	push	r14
     56e:	ff 92       	push	r15
     570:	0f 93       	push	r16
     572:	1f 93       	push	r17
     574:	cf 93       	push	r28
     576:	df 93       	push	r29
     578:	cd b7       	in	r28, 0x3d	; 61
     57a:	de b7       	in	r29, 0x3e	; 62
     57c:	2b 97       	sbiw	r28, 0x0b	; 11
     57e:	0f b6       	in	r0, 0x3f	; 63
     580:	f8 94       	cli
     582:	de bf       	out	0x3e, r29	; 62
     584:	0f be       	out	0x3f, r0	; 63
     586:	cd bf       	out	0x3d, r28	; 61
     588:	5c 01       	movw	r10, r24

    uint8_t byte_mask = 0xE0;   // Mask for lower part of identifier
    uint8_t length_mask = 0x0F; // Mask for message length register

    // Reading the identifier higher byte
    unsigned int identifier_high = mcp_read(MCP_RXB1SIDH);
     58a:	81 e7       	ldi	r24, 0x71	; 113
     58c:	0e 94 19 04 	call	0x832	; 0x832 <mcp_read>
     590:	c8 2e       	mov	r12, r24
     592:	d1 2c       	mov	r13, r1
    identifier_high = (identifier_high << 8 );

    // Reading the identifier lower byte
    uint8_t identifier_low = mcp_read(MCP_RXB0SIDL + 16);
     594:	82 e7       	ldi	r24, 0x72	; 114
     596:	0e 94 19 04 	call	0x832	; 0x832 <mcp_read>
    identifier_low &= byte_mask;

    message.identifier = identifier_low + identifier_high;
     59a:	dc 2c       	mov	r13, r12
     59c:	cc 24       	eor	r12, r12
     59e:	80 7e       	andi	r24, 0xE0	; 224
     5a0:	c8 0e       	add	r12, r24
     5a2:	d1 1c       	adc	r13, r1

    // Reading the message length
    message.data_length = mcp_read(MCP_RXB0DLC + 16)&length_mask;
     5a4:	85 e7       	ldi	r24, 0x75	; 117
     5a6:	0e 94 19 04 	call	0x832	; 0x832 <mcp_read>
     5aa:	8f 70       	andi	r24, 0x0F	; 15
     5ac:	98 2e       	mov	r9, r24

    // Reading the data in the message
    for(uint8_t i = 0; i < message.data_length; i++){
     5ae:	81 f0       	breq	.+32     	; 0x5d0 <CAN_meessage_reception2+0x6e>
     5b0:	7e 01       	movw	r14, r28
     5b2:	84 e0       	ldi	r24, 0x04	; 4
     5b4:	e8 0e       	add	r14, r24
     5b6:	f1 1c       	adc	r15, r1
     5b8:	06 e7       	ldi	r16, 0x76	; 118
     5ba:	09 0d       	add	r16, r9
     5bc:	16 e7       	ldi	r17, 0x76	; 118
        (message.data)[i] = mcp_read(MCP_RXB0DM +i + 16);
     5be:	81 2f       	mov	r24, r17
     5c0:	0e 94 19 04 	call	0x832	; 0x832 <mcp_read>
     5c4:	f7 01       	movw	r30, r14
     5c6:	81 93       	st	Z+, r24
     5c8:	7f 01       	movw	r14, r30
     5ca:	1f 5f       	subi	r17, 0xFF	; 255

    // Reading the message length
    message.data_length = mcp_read(MCP_RXB0DLC + 16)&length_mask;

    // Reading the data in the message
    for(uint8_t i = 0; i < message.data_length; i++){
     5cc:	10 13       	cpse	r17, r16
     5ce:	f7 cf       	rjmp	.-18     	; 0x5be <CAN_meessage_reception2+0x5c>
        (message.data)[i] = mcp_read(MCP_RXB0DM +i + 16);
    }
    
    return message;
     5d0:	da 82       	std	Y+2, r13	; 0x02
     5d2:	c9 82       	std	Y+1, r12	; 0x01
     5d4:	9b 82       	std	Y+3, r9	; 0x03
     5d6:	8b e0       	ldi	r24, 0x0B	; 11
     5d8:	fe 01       	movw	r30, r28
     5da:	31 96       	adiw	r30, 0x01	; 1
     5dc:	d5 01       	movw	r26, r10
     5de:	01 90       	ld	r0, Z+
     5e0:	0d 92       	st	X+, r0
     5e2:	8a 95       	dec	r24
     5e4:	e1 f7       	brne	.-8      	; 0x5de <CAN_meessage_reception2+0x7c>
}
     5e6:	c5 01       	movw	r24, r10
     5e8:	2b 96       	adiw	r28, 0x0b	; 11
     5ea:	0f b6       	in	r0, 0x3f	; 63
     5ec:	f8 94       	cli
     5ee:	de bf       	out	0x3e, r29	; 62
     5f0:	0f be       	out	0x3f, r0	; 63
     5f2:	cd bf       	out	0x3d, r28	; 61
     5f4:	df 91       	pop	r29
     5f6:	cf 91       	pop	r28
     5f8:	1f 91       	pop	r17
     5fa:	0f 91       	pop	r16
     5fc:	ff 90       	pop	r15
     5fe:	ef 90       	pop	r14
     600:	df 90       	pop	r13
     602:	cf 90       	pop	r12
     604:	bf 90       	pop	r11
     606:	af 90       	pop	r10
     608:	9f 90       	pop	r9
     60a:	08 95       	ret

0000060c <message_handler>:

CAN_message_t message_handler(){
     60c:	cf 93       	push	r28
     60e:	df 93       	push	r29
     610:	ec 01       	movw	r28, r24
    CAN_message_t message;
    
    // Checks if buffer 1 is full
    if(mcp_read(MCP_CANINTF) && 0x01){
     612:	8c e2       	ldi	r24, 0x2C	; 44
     614:	0e 94 19 04 	call	0x832	; 0x832 <mcp_read>
     618:	88 23       	and	r24, r24
     61a:	d1 f0       	breq	.+52     	; 0x650 <message_handler+0x44>
        message = CAN_meessage_reception(); //reads buffer 2 register
     61c:	ce 01       	movw	r24, r28
     61e:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <CAN_meessage_reception>
        printf("i reception nr1 \r\n");
     622:	8a e0       	ldi	r24, 0x0A	; 10
     624:	91 e0       	ldi	r25, 0x01	; 1
     626:	0e 94 3e 06 	call	0xc7c	; 0xc7c <puts>

        mcp_bit_modify(MCP_CANINTF, 1, 0);  // resets can interrupt flag bit for buffer 1
     62a:	40 e0       	ldi	r20, 0x00	; 0
     62c:	61 e0       	ldi	r22, 0x01	; 1
     62e:	8c e2       	ldi	r24, 0x2C	; 44
     630:	0e 94 61 04 	call	0x8c2	; 0x8c2 <mcp_bit_modify>
        if(!(mcp_read(MCP_CANINTF) && 2)   ){
     634:	8c e2       	ldi	r24, 0x2C	; 44
     636:	0e 94 19 04 	call	0x832	; 0x832 <mcp_read>
     63a:	81 11       	cpse	r24, r1
     63c:	27 c0       	rjmp	.+78     	; 0x68c <message_handler+0x80>
            printf("er i if nr1 \r\n");
     63e:	8c e1       	ldi	r24, 0x1C	; 28
     640:	91 e0       	ldi	r25, 0x01	; 1
     642:	0e 94 3e 06 	call	0xc7c	; 0xc7c <puts>
            flag = 0;
     646:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <__data_end+0x1>
     64a:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <__data_end>
     64e:	1e c0       	rjmp	.+60     	; 0x68c <message_handler+0x80>
        }
    }
    
    // Checks if buffer 2 is full
    else if(mcp_read(MCP_CANINTF) && 0x02){
     650:	8c e2       	ldi	r24, 0x2C	; 44
     652:	0e 94 19 04 	call	0x832	; 0x832 <mcp_read>
     656:	88 23       	and	r24, r24
     658:	c9 f0       	breq	.+50     	; 0x68c <message_handler+0x80>
        message = CAN_meessage_reception2();  //reads buffer 2 register
     65a:	ce 01       	movw	r24, r28
     65c:	0e 94 b1 02 	call	0x562	; 0x562 <CAN_meessage_reception2>
         printf("i reception nr2 \r\n");
     660:	8a e2       	ldi	r24, 0x2A	; 42
     662:	91 e0       	ldi	r25, 0x01	; 1
     664:	0e 94 3e 06 	call	0xc7c	; 0xc7c <puts>

        mcp_bit_modify(MCP_CANINTF, 2, 0);    // resets can interrupt flag bit for buffer 2
     668:	40 e0       	ldi	r20, 0x00	; 0
     66a:	62 e0       	ldi	r22, 0x02	; 2
     66c:	8c e2       	ldi	r24, 0x2C	; 44
     66e:	0e 94 61 04 	call	0x8c2	; 0x8c2 <mcp_bit_modify>
        if(!(mcp_read(MCP_CANINTF) && 1)   ){ 
     672:	8c e2       	ldi	r24, 0x2C	; 44
     674:	0e 94 19 04 	call	0x832	; 0x832 <mcp_read>
     678:	81 11       	cpse	r24, r1
     67a:	08 c0       	rjmp	.+16     	; 0x68c <message_handler+0x80>
            printf("er i if nr2 \r\n");
     67c:	8c e3       	ldi	r24, 0x3C	; 60
     67e:	91 e0       	ldi	r25, 0x01	; 1
     680:	0e 94 3e 06 	call	0xc7c	; 0xc7c <puts>
            flag = 0; 
     684:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <__data_end+0x1>
     688:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <__data_end>
        }
    }
    
return message;
}
     68c:	ce 01       	movw	r24, r28
     68e:	df 91       	pop	r29
     690:	cf 91       	pop	r28
     692:	08 95       	ret

00000694 <CAN_communication_test>:

void CAN_communication_test(){ 
     694:	cf 93       	push	r28
     696:	df 93       	push	r29
     698:	cd b7       	in	r28, 0x3d	; 61
     69a:	de b7       	in	r29, 0x3e	; 62
     69c:	66 97       	sbiw	r28, 0x16	; 22
     69e:	0f b6       	in	r0, 0x3f	; 63
     6a0:	f8 94       	cli
     6a2:	de bf       	out	0x3e, r29	; 62
     6a4:	0f be       	out	0x3f, r0	; 63
     6a6:	cd bf       	out	0x3d, r28	; 61
    CAN_message_t message;
    CAN_message_t message_recieve;

    message.identifier = 0xff;
     6a8:	8f ef       	ldi	r24, 0xFF	; 255
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	9a 83       	std	Y+2, r25	; 0x02
     6ae:	89 83       	std	Y+1, r24	; 0x01
    message.data_length = 2;
     6b0:	82 e0       	ldi	r24, 0x02	; 2
     6b2:	8b 83       	std	Y+3, r24	; 0x03
    (message.data)[0] = 0x11;
     6b4:	81 e1       	ldi	r24, 0x11	; 17
     6b6:	8c 83       	std	Y+4, r24	; 0x04
    (message.data)[1] = 0x11;
     6b8:	8d 83       	std	Y+5, r24	; 0x05

    CAN_message_transmission(&message);
     6ba:	ce 01       	movw	r24, r28
     6bc:	01 96       	adiw	r24, 0x01	; 1
     6be:	0e 94 26 02 	call	0x44c	; 0x44c <CAN_message_transmission>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6c2:	8f ef       	ldi	r24, 0xFF	; 255
     6c4:	9f e2       	ldi	r25, 0x2F	; 47
     6c6:	01 97       	sbiw	r24, 0x01	; 1
     6c8:	f1 f7       	brne	.-4      	; 0x6c6 <CAN_communication_test+0x32>
     6ca:	00 c0       	rjmp	.+0      	; 0x6cc <CAN_communication_test+0x38>
     6cc:	00 00       	nop
    _delay_ms(10);
    if(CAN_check_interrupt()){
     6ce:	0e 94 1d 02 	call	0x43a	; 0x43a <CAN_check_interrupt>
     6d2:	88 23       	and	r24, r24
     6d4:	61 f1       	breq	.+88     	; 0x72e <CAN_communication_test+0x9a>
        printf("Interrupt fungerer\n\r");
     6d6:	8a e4       	ldi	r24, 0x4A	; 74
     6d8:	91 e0       	ldi	r25, 0x01	; 1
     6da:	9f 93       	push	r25
     6dc:	8f 93       	push	r24
     6de:	0e 94 28 06 	call	0xc50	; 0xc50 <printf>
        message_recieve = message_handler();
     6e2:	ce 01       	movw	r24, r28
     6e4:	0c 96       	adiw	r24, 0x0c	; 12
     6e6:	0e 94 06 03 	call	0x60c	; 0x60c <message_handler>
        printf("DATAEN er: %d\n\r",message_recieve.data[0]);
     6ea:	8f 85       	ldd	r24, Y+15	; 0x0f
     6ec:	1f 92       	push	r1
     6ee:	8f 93       	push	r24
     6f0:	8f e5       	ldi	r24, 0x5F	; 95
     6f2:	91 e0       	ldi	r25, 0x01	; 1
     6f4:	9f 93       	push	r25
     6f6:	8f 93       	push	r24
     6f8:	0e 94 28 06 	call	0xc50	; 0xc50 <printf>
        printf("identifier : %d \r\n", message.identifier); 
     6fc:	8a 81       	ldd	r24, Y+2	; 0x02
     6fe:	8f 93       	push	r24
     700:	89 81       	ldd	r24, Y+1	; 0x01
     702:	8f 93       	push	r24
     704:	8f e6       	ldi	r24, 0x6F	; 111
     706:	91 e0       	ldi	r25, 0x01	; 1
     708:	9f 93       	push	r25
     70a:	8f 93       	push	r24
     70c:	0e 94 28 06 	call	0xc50	; 0xc50 <printf>
        printf("data length : %d \r\n", message.data_length);
     710:	8b 81       	ldd	r24, Y+3	; 0x03
     712:	1f 92       	push	r1
     714:	8f 93       	push	r24
     716:	82 e8       	ldi	r24, 0x82	; 130
     718:	91 e0       	ldi	r25, 0x01	; 1
     71a:	9f 93       	push	r25
     71c:	8f 93       	push	r24
     71e:	0e 94 28 06 	call	0xc50	; 0xc50 <printf>
     722:	0f b6       	in	r0, 0x3f	; 63
     724:	f8 94       	cli
     726:	de bf       	out	0x3e, r29	; 62
     728:	0f be       	out	0x3f, r0	; 63
     72a:	cd bf       	out	0x3d, r28	; 61
     72c:	04 c0       	rjmp	.+8      	; 0x736 <CAN_communication_test+0xa2>
    }
    else{
        printf("IKKE Interrupt \r\n");
     72e:	86 e9       	ldi	r24, 0x96	; 150
     730:	91 e0       	ldi	r25, 0x01	; 1
     732:	0e 94 3e 06 	call	0xc7c	; 0xc7c <puts>

    }
}
     736:	66 96       	adiw	r28, 0x16	; 22
     738:	0f b6       	in	r0, 0x3f	; 63
     73a:	f8 94       	cli
     73c:	de bf       	out	0x3e, r29	; 62
     73e:	0f be       	out	0x3f, r0	; 63
     740:	cd bf       	out	0x3d, r28	; 61
     742:	df 91       	pop	r29
     744:	cf 91       	pop	r28
     746:	08 95       	ret

00000748 <CAN_communication_test2>:


void CAN_communication_test2(){ 
     748:	cf 93       	push	r28
     74a:	df 93       	push	r29
     74c:	cd b7       	in	r28, 0x3d	; 61
     74e:	de b7       	in	r29, 0x3e	; 62
     750:	66 97       	sbiw	r28, 0x16	; 22
     752:	0f b6       	in	r0, 0x3f	; 63
     754:	f8 94       	cli
     756:	de bf       	out	0x3e, r29	; 62
     758:	0f be       	out	0x3f, r0	; 63
     75a:	cd bf       	out	0x3d, r28	; 61
    CAN_message_t message;
    CAN_message_t message_recieve;

    message.identifier = 0x44;
     75c:	84 e4       	ldi	r24, 0x44	; 68
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	9a 83       	std	Y+2, r25	; 0x02
     762:	89 83       	std	Y+1, r24	; 0x01
    message.data_length = 2;
     764:	82 e0       	ldi	r24, 0x02	; 2
     766:	8b 83       	std	Y+3, r24	; 0x03
    (message.data)[0] = 0x22;
     768:	82 e2       	ldi	r24, 0x22	; 34
     76a:	8c 83       	std	Y+4, r24	; 0x04
    (message.data)[1] = 0x22;
     76c:	8d 83       	std	Y+5, r24	; 0x05

    CAN_message_transmission(&message);
     76e:	ce 01       	movw	r24, r28
     770:	01 96       	adiw	r24, 0x01	; 1
     772:	0e 94 26 02 	call	0x44c	; 0x44c <CAN_message_transmission>

    if(CAN_check_interrupt()){
     776:	0e 94 1d 02 	call	0x43a	; 0x43a <CAN_check_interrupt>
     77a:	88 23       	and	r24, r24
     77c:	61 f1       	breq	.+88     	; 0x7d6 <CAN_communication_test2+0x8e>
        printf("Interrupt fungerer\n\r");
     77e:	8a e4       	ldi	r24, 0x4A	; 74
     780:	91 e0       	ldi	r25, 0x01	; 1
     782:	9f 93       	push	r25
     784:	8f 93       	push	r24
     786:	0e 94 28 06 	call	0xc50	; 0xc50 <printf>
        message_recieve = message_handler();
     78a:	ce 01       	movw	r24, r28
     78c:	0c 96       	adiw	r24, 0x0c	; 12
     78e:	0e 94 06 03 	call	0x60c	; 0x60c <message_handler>
        printf("DATAEN2 er: %d\n\r",message_recieve.data[0]);
     792:	8f 85       	ldd	r24, Y+15	; 0x0f
     794:	1f 92       	push	r1
     796:	8f 93       	push	r24
     798:	87 ea       	ldi	r24, 0xA7	; 167
     79a:	91 e0       	ldi	r25, 0x01	; 1
     79c:	9f 93       	push	r25
     79e:	8f 93       	push	r24
     7a0:	0e 94 28 06 	call	0xc50	; 0xc50 <printf>
        printf("identifier2 : %d \r\n", message.identifier); 
     7a4:	8a 81       	ldd	r24, Y+2	; 0x02
     7a6:	8f 93       	push	r24
     7a8:	89 81       	ldd	r24, Y+1	; 0x01
     7aa:	8f 93       	push	r24
     7ac:	88 eb       	ldi	r24, 0xB8	; 184
     7ae:	91 e0       	ldi	r25, 0x01	; 1
     7b0:	9f 93       	push	r25
     7b2:	8f 93       	push	r24
     7b4:	0e 94 28 06 	call	0xc50	; 0xc50 <printf>
        printf("data length2 : %d \r\n", message.data_length);
     7b8:	8b 81       	ldd	r24, Y+3	; 0x03
     7ba:	1f 92       	push	r1
     7bc:	8f 93       	push	r24
     7be:	8c ec       	ldi	r24, 0xCC	; 204
     7c0:	91 e0       	ldi	r25, 0x01	; 1
     7c2:	9f 93       	push	r25
     7c4:	8f 93       	push	r24
     7c6:	0e 94 28 06 	call	0xc50	; 0xc50 <printf>
     7ca:	0f b6       	in	r0, 0x3f	; 63
     7cc:	f8 94       	cli
     7ce:	de bf       	out	0x3e, r29	; 62
     7d0:	0f be       	out	0x3f, r0	; 63
     7d2:	cd bf       	out	0x3d, r28	; 61
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <CAN_communication_test2+0x96>
    }
    else{
        printf("IKKE Interrupt2 \r\n");
     7d6:	81 ee       	ldi	r24, 0xE1	; 225
     7d8:	91 e0       	ldi	r25, 0x01	; 1
     7da:	0e 94 3e 06 	call	0xc7c	; 0xc7c <puts>

    }
}
     7de:	66 96       	adiw	r28, 0x16	; 22
     7e0:	0f b6       	in	r0, 0x3f	; 63
     7e2:	f8 94       	cli
     7e4:	de bf       	out	0x3e, r29	; 62
     7e6:	0f be       	out	0x3f, r0	; 63
     7e8:	cd bf       	out	0x3d, r28	; 61
     7ea:	df 91       	pop	r29
     7ec:	cf 91       	pop	r28
     7ee:	08 95       	ret

000007f0 <spi_master_CS>:
    status_value = spi_read();

    spi_master_CS(1);

    return status_value;
}
     7f0:	81 11       	cpse	r24, r1
     7f2:	02 c0       	rjmp	.+4      	; 0x7f8 <spi_master_CS+0x8>
     7f4:	c4 98       	cbi	0x18, 4	; 24
     7f6:	08 95       	ret
     7f8:	c4 9a       	sbi	0x18, 4	; 24
     7fa:	08 95       	ret

000007fc <mcp_write>:
     7fc:	cf 93       	push	r28
     7fe:	df 93       	push	r29
     800:	d8 2f       	mov	r29, r24
     802:	c6 2f       	mov	r28, r22
     804:	80 e0       	ldi	r24, 0x00	; 0
     806:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <spi_master_CS>
     80a:	82 e0       	ldi	r24, 0x02	; 2
     80c:	0e 94 b6 05 	call	0xb6c	; 0xb6c <spi_write>
     810:	8d 2f       	mov	r24, r29
     812:	0e 94 b6 05 	call	0xb6c	; 0xb6c <spi_write>
     816:	8c 2f       	mov	r24, r28
     818:	0e 94 b6 05 	call	0xb6c	; 0xb6c <spi_write>
     81c:	81 e0       	ldi	r24, 0x01	; 1
     81e:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <spi_master_CS>
     822:	df 91       	pop	r29
     824:	cf 91       	pop	r28
     826:	08 95       	ret

00000828 <mcp_set_mode>:
     828:	68 2f       	mov	r22, r24
     82a:	8f e0       	ldi	r24, 0x0F	; 15
     82c:	0e 94 fe 03 	call	0x7fc	; 0x7fc <mcp_write>
     830:	08 95       	ret

00000832 <mcp_read>:
     832:	cf 93       	push	r28
     834:	c8 2f       	mov	r28, r24
     836:	80 e0       	ldi	r24, 0x00	; 0
     838:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <spi_master_CS>
     83c:	83 e0       	ldi	r24, 0x03	; 3
     83e:	0e 94 b6 05 	call	0xb6c	; 0xb6c <spi_write>
     842:	8c 2f       	mov	r24, r28
     844:	0e 94 b6 05 	call	0xb6c	; 0xb6c <spi_write>
     848:	0e 94 ba 05 	call	0xb74	; 0xb74 <spi_read>
     84c:	c8 2f       	mov	r28, r24
     84e:	81 e0       	ldi	r24, 0x01	; 1
     850:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <spi_master_CS>
     854:	8c 2f       	mov	r24, r28
     856:	cf 91       	pop	r28
     858:	08 95       	ret

0000085a <mcp_reset>:
     85a:	80 e0       	ldi	r24, 0x00	; 0
     85c:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <spi_master_CS>
     860:	80 ec       	ldi	r24, 0xC0	; 192
     862:	0e 94 b6 05 	call	0xb6c	; 0xb6c <spi_write>
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <spi_master_CS>
     86c:	08 95       	ret

0000086e <mcp_init>:
     86e:	cf 93       	push	r28
     870:	c8 2f       	mov	r28, r24
     872:	0e 94 bf 05 	call	0xb7e	; 0xb7e <spi_init>
     876:	0e 94 2d 04 	call	0x85a	; 0x85a <mcp_reset>
     87a:	8f ef       	ldi	r24, 0xFF	; 255
     87c:	9f e8       	ldi	r25, 0x8F	; 143
     87e:	01 97       	sbiw	r24, 0x01	; 1
     880:	f1 f7       	brne	.-4      	; 0x87e <mcp_init+0x10>
     882:	00 c0       	rjmp	.+0      	; 0x884 <mcp_init+0x16>
     884:	00 00       	nop
     886:	8e e0       	ldi	r24, 0x0E	; 14
     888:	0e 94 19 04 	call	0x832	; 0x832 <mcp_read>
     88c:	80 7e       	andi	r24, 0xE0	; 224
     88e:	80 38       	cpi	r24, 0x80	; 128
     890:	31 f0       	breq	.+12     	; 0x89e <mcp_init+0x30>
     892:	83 ef       	ldi	r24, 0xF3	; 243
     894:	91 e0       	ldi	r25, 0x01	; 1
     896:	0e 94 3e 06 	call	0xc7c	; 0xc7c <puts>
     89a:	81 e0       	ldi	r24, 0x01	; 1
     89c:	10 c0       	rjmp	.+32     	; 0x8be <mcp_init+0x50>
     89e:	8c 2f       	mov	r24, r28
     8a0:	0e 94 14 04 	call	0x828	; 0x828 <mcp_set_mode>
     8a4:	8e e0       	ldi	r24, 0x0E	; 14
     8a6:	0e 94 19 04 	call	0x832	; 0x832 <mcp_read>
     8aa:	80 7e       	andi	r24, 0xE0	; 224
     8ac:	8c 17       	cp	r24, r28
     8ae:	31 f0       	breq	.+12     	; 0x8bc <mcp_init+0x4e>
     8b0:	84 e2       	ldi	r24, 0x24	; 36
     8b2:	92 e0       	ldi	r25, 0x02	; 2
     8b4:	0e 94 3e 06 	call	0xc7c	; 0xc7c <puts>
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	01 c0       	rjmp	.+2      	; 0x8be <mcp_init+0x50>
     8bc:	80 e0       	ldi	r24, 0x00	; 0
     8be:	cf 91       	pop	r28
     8c0:	08 95       	ret

000008c2 <mcp_bit_modify>:
     8c2:	1f 93       	push	r17
     8c4:	cf 93       	push	r28
     8c6:	df 93       	push	r29
     8c8:	18 2f       	mov	r17, r24
     8ca:	d6 2f       	mov	r29, r22
     8cc:	c4 2f       	mov	r28, r20
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <spi_master_CS>
     8d4:	85 e0       	ldi	r24, 0x05	; 5
     8d6:	0e 94 b6 05 	call	0xb6c	; 0xb6c <spi_write>
     8da:	81 2f       	mov	r24, r17
     8dc:	0e 94 b6 05 	call	0xb6c	; 0xb6c <spi_write>
     8e0:	8d 2f       	mov	r24, r29
     8e2:	0e 94 b6 05 	call	0xb6c	; 0xb6c <spi_write>
     8e6:	8c 2f       	mov	r24, r28
     8e8:	0e 94 b6 05 	call	0xb6c	; 0xb6c <spi_write>
     8ec:	81 e0       	ldi	r24, 0x01	; 1
     8ee:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <spi_master_CS>
     8f2:	df 91       	pop	r29
     8f4:	cf 91       	pop	r28
     8f6:	1f 91       	pop	r17
     8f8:	08 95       	ret

000008fa <mcp_request_to_send>:

void mcp_request_to_send(uint8_t buffer){
     8fa:	cf 93       	push	r28
     8fc:	c8 2f       	mov	r28, r24
    spi_master_CS(0);
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <spi_master_CS>

    switch (buffer) {
     904:	c1 30       	cpi	r28, 0x01	; 1
     906:	41 f0       	breq	.+16     	; 0x918 <mcp_request_to_send+0x1e>
     908:	18 f0       	brcs	.+6      	; 0x910 <mcp_request_to_send+0x16>
     90a:	c2 30       	cpi	r28, 0x02	; 2
     90c:	49 f0       	breq	.+18     	; 0x920 <mcp_request_to_send+0x26>
     90e:	0c c0       	rjmp	.+24     	; 0x928 <mcp_request_to_send+0x2e>
      case 0:
          spi_write(MCP_RTS_TX0);
     910:	81 e8       	ldi	r24, 0x81	; 129
     912:	0e 94 b6 05 	call	0xb6c	; 0xb6c <spi_write>
          break;
     916:	0b c0       	rjmp	.+22     	; 0x92e <mcp_request_to_send+0x34>
      case 1:
          spi_write(MCP_RTS_TX1);
     918:	82 e8       	ldi	r24, 0x82	; 130
     91a:	0e 94 b6 05 	call	0xb6c	; 0xb6c <spi_write>
          break;
     91e:	07 c0       	rjmp	.+14     	; 0x92e <mcp_request_to_send+0x34>
      case 2:
          spi_write(MCP_RTS_TX2);
     920:	84 e8       	ldi	r24, 0x84	; 132
     922:	0e 94 b6 05 	call	0xb6c	; 0xb6c <spi_write>
          break;
     926:	03 c0       	rjmp	.+6      	; 0x92e <mcp_request_to_send+0x34>
      default:
        spi_write(MCP_RTS_ALL);
     928:	87 e8       	ldi	r24, 0x87	; 135
     92a:	0e 94 b6 05 	call	0xb6c	; 0xb6c <spi_write>
    }

    spi_master_CS(1);
     92e:	81 e0       	ldi	r24, 0x01	; 1
     930:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <spi_master_CS>
}
     934:	cf 91       	pop	r28
     936:	08 95       	ret

00000938 <oled_sel_row>:
void write_cmd(uint8_t cmd){
    oled_write_cmd[0] = cmd;      // @SRAM location
}

void oled_sel_row(uint8_t page){
    oled_position.row = page;
     938:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <oled_position>
    page = page % 8;
    write_cmd(0xB0 + page);
     93c:	87 70       	andi	r24, 0x07	; 7
     93e:	80 55       	subi	r24, 0x50	; 80
void write_data(uint8_t data){
    oled_write_data[0] = data;      // @SRAM location
}

void write_cmd(uint8_t cmd){
    oled_write_cmd[0] = cmd;      // @SRAM location
     940:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     944:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     948:	80 83       	st	Z, r24
     94a:	08 95       	ret

0000094c <oled_sel_col>:
    oled_position.row = page;
    page = page % 8;
    write_cmd(0xB0 + page);
}
void oled_sel_col(uint8_t col){
    oled_position.col = col;
     94c:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <oled_position+0x1>
    uint8_t numLow = col % 16;
     950:	98 2f       	mov	r25, r24
     952:	9f 70       	andi	r25, 0x0F	; 15
void write_data(uint8_t data){
    oled_write_data[0] = data;      // @SRAM location
}

void write_cmd(uint8_t cmd){
    oled_write_cmd[0] = cmd;      // @SRAM location
     954:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     958:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     95c:	90 83       	st	Z, r25
    oled_position.col = col;
    uint8_t numLow = col % 16;
	uint8_t numHigh = col / 16;

	write_cmd(numLow);
	write_cmd(16 + numHigh);
     95e:	82 95       	swap	r24
     960:	8f 70       	andi	r24, 0x0F	; 15
     962:	80 5f       	subi	r24, 0xF0	; 240
void write_data(uint8_t data){
    oled_write_data[0] = data;      // @SRAM location
}

void write_cmd(uint8_t cmd){
    oled_write_cmd[0] = cmd;      // @SRAM location
     964:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     968:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     96c:	80 83       	st	Z, r24
     96e:	08 95       	ret

00000970 <oled_line_down>:
}
void oled_home(void){
     oled_pos_set(0,0);
}
void oled_line_down(uint8_t lineNR){
    write_cmd(0xB0 + lineNR);
     970:	80 55       	subi	r24, 0x50	; 80
void write_data(uint8_t data){
    oled_write_data[0] = data;      // @SRAM location
}

void write_cmd(uint8_t cmd){
    oled_write_cmd[0] = cmd;      // @SRAM location
     972:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     976:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     97a:	80 83       	st	Z, r24
     97c:	08 95       	ret

0000097e <oled_pos_set>:
   }
    oled_home();
}


void oled_pos_set(uint8_t row, uint8_t col){
     97e:	cf 93       	push	r28
     980:	c6 2f       	mov	r28, r22
    oled_sel_row(row);
     982:	0e 94 9c 04 	call	0x938	; 0x938 <oled_sel_row>
    oled_sel_col(col);
     986:	8c 2f       	mov	r24, r28
     988:	0e 94 a6 04 	call	0x94c	; 0x94c <oled_sel_col>
}
     98c:	cf 91       	pop	r28
     98e:	08 95       	ret

00000990 <oled_home>:
	write_cmd(numLow);
	write_cmd(16 + numHigh);

}
void oled_home(void){
     oled_pos_set(0,0);
     990:	60 e0       	ldi	r22, 0x00	; 0
     992:	80 e0       	ldi	r24, 0x00	; 0
     994:	0e 94 bf 04 	call	0x97e	; 0x97e <oled_pos_set>
     998:	08 95       	ret

0000099a <oled_clear>:
}
void oled_line_down(uint8_t lineNR){
    write_cmd(0xB0 + lineNR);
}
void oled_clear(void){
     99a:	1f 93       	push	r17
     99c:	cf 93       	push	r28
     99e:	df 93       	push	r29
   for(uint8_t i = 0; i < 8; i++){      // page select
     9a0:	10 e0       	ldi	r17, 0x00	; 0
     9a2:	c8 e7       	ldi	r28, 0x78	; 120
     9a4:	d0 e0       	ldi	r29, 0x00	; 0
        oled_line_down(i);
     9a6:	81 2f       	mov	r24, r17
     9a8:	0e 94 b8 04 	call	0x970	; 0x970 <oled_line_down>
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	0d c0       	rjmp	.+26     	; 0x9ca <oled_clear+0x30>
        for(uint8_t j = 0; j < 128; j++){
                for(uint8_t k = 0; k < 8; k++){
                write_data(pgm_read_byte( &(font8[0][k] ) ) );   // gets blank spaces from font.h //
     9b0:	84 91       	lpm	r24, Z
    oled_clear();
    oled_home();
}

void write_data(uint8_t data){
    oled_write_data[0] = data;      // @SRAM location
     9b2:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <oled_write_data>
     9b6:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <oled_write_data+0x1>
     9ba:	8c 93       	st	X, r24
     9bc:	31 96       	adiw	r30, 0x01	; 1
}
void oled_clear(void){
   for(uint8_t i = 0; i < 8; i++){      // page select
        oled_line_down(i);
        for(uint8_t j = 0; j < 128; j++){
                for(uint8_t k = 0; k < 8; k++){
     9be:	ec 17       	cp	r30, r28
     9c0:	fd 07       	cpc	r31, r29
     9c2:	b1 f7       	brne	.-20     	; 0x9b0 <oled_clear+0x16>
    write_cmd(0xB0 + lineNR);
}
void oled_clear(void){
   for(uint8_t i = 0; i < 8; i++){      // page select
        oled_line_down(i);
        for(uint8_t j = 0; j < 128; j++){
     9c4:	9f 5f       	subi	r25, 0xFF	; 255
     9c6:	90 38       	cpi	r25, 0x80	; 128
     9c8:	19 f0       	breq	.+6      	; 0x9d0 <oled_clear+0x36>
     9ca:	e0 e7       	ldi	r30, 0x70	; 112
     9cc:	f0 e0       	ldi	r31, 0x00	; 0
     9ce:	f0 cf       	rjmp	.-32     	; 0x9b0 <oled_clear+0x16>
}
void oled_line_down(uint8_t lineNR){
    write_cmd(0xB0 + lineNR);
}
void oled_clear(void){
   for(uint8_t i = 0; i < 8; i++){      // page select
     9d0:	1f 5f       	subi	r17, 0xFF	; 255
     9d2:	18 30       	cpi	r17, 0x08	; 8
     9d4:	41 f7       	brne	.-48     	; 0x9a6 <oled_clear+0xc>
               //     ext_oledData[0] = pgm_read_byte( &(font8[0][k] ) );
                }
            //
        }
   }
    oled_home();
     9d6:	0e 94 c8 04 	call	0x990	; 0x990 <oled_home>
}
     9da:	df 91       	pop	r29
     9dc:	cf 91       	pop	r28
     9de:	1f 91       	pop	r17
     9e0:	08 95       	ret

000009e2 <OLED_init>:
void write_data(uint8_t data){
    oled_write_data[0] = data;      // @SRAM location
}

void write_cmd(uint8_t cmd){
    oled_write_cmd[0] = cmd;      // @SRAM location
     9e2:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     9e6:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     9ea:	8e ea       	ldi	r24, 0xAE	; 174
     9ec:	80 83       	st	Z, r24
     9ee:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     9f2:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     9f6:	81 ea       	ldi	r24, 0xA1	; 161
     9f8:	80 83       	st	Z, r24
     9fa:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     9fe:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     a02:	8a ed       	ldi	r24, 0xDA	; 218
     a04:	80 83       	st	Z, r24
     a06:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     a0a:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     a0e:	82 e1       	ldi	r24, 0x12	; 18
     a10:	80 83       	st	Z, r24
     a12:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     a16:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     a1a:	88 ec       	ldi	r24, 0xC8	; 200
     a1c:	80 83       	st	Z, r24
     a1e:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     a22:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     a26:	88 ea       	ldi	r24, 0xA8	; 168
     a28:	80 83       	st	Z, r24
     a2a:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     a2e:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     a32:	8f e3       	ldi	r24, 0x3F	; 63
     a34:	80 83       	st	Z, r24
     a36:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     a3a:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     a3e:	85 ed       	ldi	r24, 0xD5	; 213
     a40:	80 83       	st	Z, r24
     a42:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     a46:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     a4a:	80 e8       	ldi	r24, 0x80	; 128
     a4c:	80 83       	st	Z, r24
     a4e:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     a52:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     a56:	81 e8       	ldi	r24, 0x81	; 129
     a58:	80 83       	st	Z, r24
     a5a:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     a5e:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     a62:	80 e5       	ldi	r24, 0x50	; 80
     a64:	80 83       	st	Z, r24
     a66:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     a6a:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     a6e:	89 ed       	ldi	r24, 0xD9	; 217
     a70:	80 83       	st	Z, r24
     a72:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     a76:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     a7a:	81 e2       	ldi	r24, 0x21	; 33
     a7c:	80 83       	st	Z, r24
     a7e:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     a82:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     a86:	80 e2       	ldi	r24, 0x20	; 32
     a88:	80 83       	st	Z, r24
     a8a:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     a8e:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     a92:	82 e0       	ldi	r24, 0x02	; 2
     a94:	80 83       	st	Z, r24
     a96:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     a9a:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     a9e:	8b ed       	ldi	r24, 0xDB	; 219
     aa0:	80 83       	st	Z, r24
     aa2:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     aa6:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     aaa:	80 e3       	ldi	r24, 0x30	; 48
     aac:	80 83       	st	Z, r24
     aae:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     ab2:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     ab6:	8d ea       	ldi	r24, 0xAD	; 173
     ab8:	80 83       	st	Z, r24
     aba:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     abe:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     ac2:	10 82       	st	Z, r1
     ac4:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     ac8:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     acc:	84 ea       	ldi	r24, 0xA4	; 164
     ace:	80 83       	st	Z, r24
     ad0:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     ad4:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     ad8:	86 ea       	ldi	r24, 0xA6	; 166
     ada:	80 83       	st	Z, r24
     adc:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     ae0:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     ae4:	8f ea       	ldi	r24, 0xAF	; 175
     ae6:	80 83       	st	Z, r24
    write_cmd(0x00);
    write_cmd(0xa4); //out follows RAM content
    write_cmd(0xa6); //set normal display
    write_cmd(0xaf); // display on

    oled_clear();
     ae8:	0e 94 cd 04 	call	0x99a	; 0x99a <oled_clear>
    oled_home();
     aec:	0e 94 c8 04 	call	0x990	; 0x990 <oled_home>
     af0:	08 95       	ret

00000af2 <pos_readSettings>:
        return UP;
    }
}

void pos_readSettings(void){
DDRB &= ~(1 << PB1);
     af2:	b9 98       	cbi	0x17, 1	; 23
DDRD &= ~(1 << PD4);
     af4:	8c 98       	cbi	0x11, 4	; 17
DDRD &= ~(1 << PD5);
     af6:	8d 98       	cbi	0x11, 5	; 17

PORTB |= (1 << PB1); // internal pull up enable
     af8:	c1 9a       	sbi	0x18, 1	; 24
     afa:	08 95       	ret

00000afc <main>:


int main(void)
{
    
    SRAM_init();
     afc:	0e 94 c6 05 	call	0xb8c	; 0xb8c <SRAM_init>
    timer_init();
     b00:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <timer_init>
    USART_init();
     b04:	0e 94 cd 05 	call	0xb9a	; 0xb9a <USART_init>
    fdevopen(USART_send, USART_receive);
     b08:	65 ed       	ldi	r22, 0xD5	; 213
     b0a:	75 e0       	ldi	r23, 0x05	; 5
     b0c:	89 ed       	ldi	r24, 0xD9	; 217
     b0e:	95 e0       	ldi	r25, 0x05	; 5
     b10:	0e 94 dd 05 	call	0xbba	; 0xbba <fdevopen>
    ADC_calibrate(&P_cal);
     b14:	8e e6       	ldi	r24, 0x6E	; 110
     b16:	92 e0       	ldi	r25, 0x02	; 2
     b18:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <ADC_calibrate>
    OLED_init();
     b1c:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <OLED_init>
    pos_readSettings();
     b20:	0e 94 79 05 	call	0xaf2	; 0xaf2 <pos_readSettings>
    oled_clear();
     b24:	0e 94 cd 04 	call	0x99a	; 0x99a <oled_clear>

    printf("MAIN kjører");
     b28:	8f e5       	ldi	r24, 0x5F	; 95
     b2a:	92 e0       	ldi	r25, 0x02	; 2
     b2c:	9f 93       	push	r25
     b2e:	8f 93       	push	r24
     b30:	0e 94 28 06 	call	0xc50	; 0xc50 <printf>
    //menu();
    //CAN_init(MODE_LOOPBACK);
    //CAN_communication_test();
    //mcp_init(MODE_LOOPBACK);
    //uint8_t r;
    CAN_init(MODE_LOOPBACK);
     b34:	80 e4       	ldi	r24, 0x40	; 64
     b36:	0e 94 f7 01 	call	0x3ee	; 0x3ee <CAN_init>
     b3a:	2f ef       	ldi	r18, 0xFF	; 255
     b3c:	8f ef       	ldi	r24, 0xFF	; 255
     b3e:	9e e0       	ldi	r25, 0x0E	; 14
     b40:	21 50       	subi	r18, 0x01	; 1
     b42:	80 40       	sbci	r24, 0x00	; 0
     b44:	90 40       	sbci	r25, 0x00	; 0
     b46:	e1 f7       	brne	.-8      	; 0xb40 <main+0x44>
     b48:	00 c0       	rjmp	.+0      	; 0xb4a <main+0x4e>
     b4a:	00 00       	nop
    _delay_ms(1000);
    CAN_communication_test();
     b4c:	0e 94 4a 03 	call	0x694	; 0x694 <CAN_communication_test>
     b50:	2f ef       	ldi	r18, 0xFF	; 255
     b52:	8f ef       	ldi	r24, 0xFF	; 255
     b54:	9e e0       	ldi	r25, 0x0E	; 14
     b56:	21 50       	subi	r18, 0x01	; 1
     b58:	80 40       	sbci	r24, 0x00	; 0
     b5a:	90 40       	sbci	r25, 0x00	; 0
     b5c:	e1 f7       	brne	.-8      	; 0xb56 <main+0x5a>
     b5e:	00 c0       	rjmp	.+0      	; 0xb60 <main+0x64>
     b60:	00 00       	nop
    _delay_ms(1000);
    CAN_communication_test2();
     b62:	0e 94 a4 03 	call	0x748	; 0x748 <CAN_communication_test2>
     b66:	0f 90       	pop	r0
     b68:	0f 90       	pop	r0
     b6a:	ff cf       	rjmp	.-2      	; 0xb6a <main+0x6e>

00000b6c <spi_write>:
#include "spi_driver.h"


void spi_write(char data){

    SPDR = data;
     b6c:	8f b9       	out	0x0f, r24	; 15
    while( !(SPSR & (1<<SPIF)) );
     b6e:	77 9b       	sbis	0x0e, 7	; 14
     b70:	fe cf       	rjmp	.-4      	; 0xb6e <spi_write+0x2>

}
     b72:	08 95       	ret

00000b74 <spi_read>:

char spi_read(void){

    spi_write(DUMMY);
     b74:	86 e5       	ldi	r24, 0x56	; 86
     b76:	0e 94 b6 05 	call	0xb6c	; 0xb6c <spi_write>
    //printf("SPI data sent is");
    return SPDR;
     b7a:	8f b1       	in	r24, 0x0f	; 15
}
     b7c:	08 95       	ret

00000b7e <spi_init>:

void spi_init(void){
    DDR_SPI |= (1 << SCK) | (1 << MOSI) | (1 << SS);
     b7e:	87 b3       	in	r24, 0x17	; 23
     b80:	80 6b       	ori	r24, 0xB0	; 176
     b82:	87 bb       	out	0x17, r24	; 23

    SPCR |= (1 << SPE) | (1 << MSTR) |(1<<SPR0);  // Enable SPI and set as master
     b84:	8d b1       	in	r24, 0x0d	; 13
     b86:	81 65       	ori	r24, 0x51	; 81
     b88:	8d b9       	out	0x0d, r24	; 13
     b8a:	08 95       	ret

00000b8c <SRAM_init>:
 */

#include "SRAM_driver.h"

void SRAM_init(void){
    MCUCR |= (1 << SRE);     //external SRAM enable (mcu control register)
     b8c:	85 b7       	in	r24, 0x35	; 53
     b8e:	80 68       	ori	r24, 0x80	; 128
     b90:	85 bf       	out	0x35, r24	; 53
    SFIOR |= (1 << XMM2);    //excludes memory occupied by JTAG
     b92:	80 b7       	in	r24, 0x30	; 48
     b94:	80 62       	ori	r24, 0x20	; 32
     b96:	80 bf       	out	0x30, r24	; 48
     b98:	08 95       	ret

00000b9a <USART_init>:
 */
#include "UART_driver.h"


void USART_init(void){
    UBRR0L = (uint8_t)(BAUD_PRESCALER);
     b9a:	8f e1       	ldi	r24, 0x1F	; 31
     b9c:	89 b9       	out	0x09, r24	; 9
    UBRR0H = (uint8_t)((uint8_t) BAUD_PRESCALER>>8);
     b9e:	10 bc       	out	0x20, r1	; 32
    UCSR0B = (1 << RXEN0)|(1 << TXEN0);
     ba0:	88 e1       	ldi	r24, 0x18	; 24
     ba2:	8a b9       	out	0x0a, r24	; 10
    UCSR0C = (1 << URSEL0)|(1 << USBS0)|(3 << UCSZ00);
     ba4:	8e e8       	ldi	r24, 0x8E	; 142
     ba6:	80 bd       	out	0x20, r24	; 32
     ba8:	08 95       	ret

00000baa <USART_receive>:
}

unsigned char USART_receive(void){
    while(!(UCSR0A & (1 << RXC0)));
     baa:	5f 9b       	sbis	0x0b, 7	; 11
     bac:	fe cf       	rjmp	.-4      	; 0xbaa <USART_receive>
    return UDR0;
     bae:	8c b1       	in	r24, 0x0c	; 12
}
     bb0:	08 95       	ret

00000bb2 <USART_send>:

void USART_send( unsigned char data){
    while(!(UCSR0A & (1 << UDRE0)));
     bb2:	5d 9b       	sbis	0x0b, 5	; 11
     bb4:	fe cf       	rjmp	.-4      	; 0xbb2 <USART_send>
    UDR0 = data;
     bb6:	8c b9       	out	0x0c, r24	; 12
     bb8:	08 95       	ret

00000bba <fdevopen>:
     bba:	0f 93       	push	r16
     bbc:	1f 93       	push	r17
     bbe:	cf 93       	push	r28
     bc0:	df 93       	push	r29
     bc2:	00 97       	sbiw	r24, 0x00	; 0
     bc4:	31 f4       	brne	.+12     	; 0xbd2 <fdevopen+0x18>
     bc6:	61 15       	cp	r22, r1
     bc8:	71 05       	cpc	r23, r1
     bca:	19 f4       	brne	.+6      	; 0xbd2 <fdevopen+0x18>
     bcc:	80 e0       	ldi	r24, 0x00	; 0
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	3a c0       	rjmp	.+116    	; 0xc46 <fdevopen+0x8c>
     bd2:	8b 01       	movw	r16, r22
     bd4:	ec 01       	movw	r28, r24
     bd6:	6e e0       	ldi	r22, 0x0E	; 14
     bd8:	70 e0       	ldi	r23, 0x00	; 0
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	0e 94 4f 08 	call	0x109e	; 0x109e <calloc>
     be2:	fc 01       	movw	r30, r24
     be4:	89 2b       	or	r24, r25
     be6:	91 f3       	breq	.-28     	; 0xbcc <fdevopen+0x12>
     be8:	80 e8       	ldi	r24, 0x80	; 128
     bea:	83 83       	std	Z+3, r24	; 0x03
     bec:	01 15       	cp	r16, r1
     bee:	11 05       	cpc	r17, r1
     bf0:	71 f0       	breq	.+28     	; 0xc0e <fdevopen+0x54>
     bf2:	13 87       	std	Z+11, r17	; 0x0b
     bf4:	02 87       	std	Z+10, r16	; 0x0a
     bf6:	81 e8       	ldi	r24, 0x81	; 129
     bf8:	83 83       	std	Z+3, r24	; 0x03
     bfa:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <__iob>
     bfe:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <__iob+0x1>
     c02:	89 2b       	or	r24, r25
     c04:	21 f4       	brne	.+8      	; 0xc0e <fdevopen+0x54>
     c06:	f0 93 75 02 	sts	0x0275, r31	; 0x800275 <__iob+0x1>
     c0a:	e0 93 74 02 	sts	0x0274, r30	; 0x800274 <__iob>
     c0e:	20 97       	sbiw	r28, 0x00	; 0
     c10:	c9 f0       	breq	.+50     	; 0xc44 <fdevopen+0x8a>
     c12:	d1 87       	std	Z+9, r29	; 0x09
     c14:	c0 87       	std	Z+8, r28	; 0x08
     c16:	83 81       	ldd	r24, Z+3	; 0x03
     c18:	82 60       	ori	r24, 0x02	; 2
     c1a:	83 83       	std	Z+3, r24	; 0x03
     c1c:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <__iob+0x2>
     c20:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <__iob+0x3>
     c24:	89 2b       	or	r24, r25
     c26:	71 f4       	brne	.+28     	; 0xc44 <fdevopen+0x8a>
     c28:	f0 93 77 02 	sts	0x0277, r31	; 0x800277 <__iob+0x3>
     c2c:	e0 93 76 02 	sts	0x0276, r30	; 0x800276 <__iob+0x2>
     c30:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <__iob+0x4>
     c34:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <__iob+0x5>
     c38:	89 2b       	or	r24, r25
     c3a:	21 f4       	brne	.+8      	; 0xc44 <fdevopen+0x8a>
     c3c:	f0 93 79 02 	sts	0x0279, r31	; 0x800279 <__iob+0x5>
     c40:	e0 93 78 02 	sts	0x0278, r30	; 0x800278 <__iob+0x4>
     c44:	cf 01       	movw	r24, r30
     c46:	df 91       	pop	r29
     c48:	cf 91       	pop	r28
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	08 95       	ret

00000c50 <printf>:
     c50:	a0 e0       	ldi	r26, 0x00	; 0
     c52:	b0 e0       	ldi	r27, 0x00	; 0
     c54:	ee e2       	ldi	r30, 0x2E	; 46
     c56:	f6 e0       	ldi	r31, 0x06	; 6
     c58:	0c 94 53 0a 	jmp	0x14a6	; 0x14a6 <__prologue_saves__+0x20>
     c5c:	ae 01       	movw	r20, r28
     c5e:	4b 5f       	subi	r20, 0xFB	; 251
     c60:	5f 4f       	sbci	r21, 0xFF	; 255
     c62:	fa 01       	movw	r30, r20
     c64:	61 91       	ld	r22, Z+
     c66:	71 91       	ld	r23, Z+
     c68:	af 01       	movw	r20, r30
     c6a:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <__iob+0x2>
     c6e:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <__iob+0x3>
     c72:	0e 94 6e 06 	call	0xcdc	; 0xcdc <vfprintf>
     c76:	e2 e0       	ldi	r30, 0x02	; 2
     c78:	0c 94 6f 0a 	jmp	0x14de	; 0x14de <__epilogue_restores__+0x20>

00000c7c <puts>:
     c7c:	0f 93       	push	r16
     c7e:	1f 93       	push	r17
     c80:	cf 93       	push	r28
     c82:	df 93       	push	r29
     c84:	e0 91 76 02 	lds	r30, 0x0276	; 0x800276 <__iob+0x2>
     c88:	f0 91 77 02 	lds	r31, 0x0277	; 0x800277 <__iob+0x3>
     c8c:	23 81       	ldd	r18, Z+3	; 0x03
     c8e:	21 ff       	sbrs	r18, 1
     c90:	1b c0       	rjmp	.+54     	; 0xcc8 <puts+0x4c>
     c92:	8c 01       	movw	r16, r24
     c94:	d0 e0       	ldi	r29, 0x00	; 0
     c96:	c0 e0       	ldi	r28, 0x00	; 0
     c98:	f8 01       	movw	r30, r16
     c9a:	81 91       	ld	r24, Z+
     c9c:	8f 01       	movw	r16, r30
     c9e:	60 91 76 02 	lds	r22, 0x0276	; 0x800276 <__iob+0x2>
     ca2:	70 91 77 02 	lds	r23, 0x0277	; 0x800277 <__iob+0x3>
     ca6:	db 01       	movw	r26, r22
     ca8:	18 96       	adiw	r26, 0x08	; 8
     caa:	ed 91       	ld	r30, X+
     cac:	fc 91       	ld	r31, X
     cae:	19 97       	sbiw	r26, 0x09	; 9
     cb0:	88 23       	and	r24, r24
     cb2:	31 f0       	breq	.+12     	; 0xcc0 <puts+0x44>
     cb4:	09 95       	icall
     cb6:	89 2b       	or	r24, r25
     cb8:	79 f3       	breq	.-34     	; 0xc98 <puts+0x1c>
     cba:	df ef       	ldi	r29, 0xFF	; 255
     cbc:	cf ef       	ldi	r28, 0xFF	; 255
     cbe:	ec cf       	rjmp	.-40     	; 0xc98 <puts+0x1c>
     cc0:	8a e0       	ldi	r24, 0x0A	; 10
     cc2:	09 95       	icall
     cc4:	89 2b       	or	r24, r25
     cc6:	19 f0       	breq	.+6      	; 0xcce <puts+0x52>
     cc8:	8f ef       	ldi	r24, 0xFF	; 255
     cca:	9f ef       	ldi	r25, 0xFF	; 255
     ccc:	02 c0       	rjmp	.+4      	; 0xcd2 <puts+0x56>
     cce:	8d 2f       	mov	r24, r29
     cd0:	9c 2f       	mov	r25, r28
     cd2:	df 91       	pop	r29
     cd4:	cf 91       	pop	r28
     cd6:	1f 91       	pop	r17
     cd8:	0f 91       	pop	r16
     cda:	08 95       	ret

00000cdc <vfprintf>:
     cdc:	ab e0       	ldi	r26, 0x0B	; 11
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	e4 e7       	ldi	r30, 0x74	; 116
     ce2:	f6 e0       	ldi	r31, 0x06	; 6
     ce4:	0c 94 43 0a 	jmp	0x1486	; 0x1486 <__prologue_saves__>
     ce8:	6c 01       	movw	r12, r24
     cea:	7b 01       	movw	r14, r22
     cec:	8a 01       	movw	r16, r20
     cee:	fc 01       	movw	r30, r24
     cf0:	17 82       	std	Z+7, r1	; 0x07
     cf2:	16 82       	std	Z+6, r1	; 0x06
     cf4:	83 81       	ldd	r24, Z+3	; 0x03
     cf6:	81 ff       	sbrs	r24, 1
     cf8:	cc c1       	rjmp	.+920    	; 0x1092 <vfprintf+0x3b6>
     cfa:	ce 01       	movw	r24, r28
     cfc:	01 96       	adiw	r24, 0x01	; 1
     cfe:	3c 01       	movw	r6, r24
     d00:	f6 01       	movw	r30, r12
     d02:	93 81       	ldd	r25, Z+3	; 0x03
     d04:	f7 01       	movw	r30, r14
     d06:	93 fd       	sbrc	r25, 3
     d08:	85 91       	lpm	r24, Z+
     d0a:	93 ff       	sbrs	r25, 3
     d0c:	81 91       	ld	r24, Z+
     d0e:	7f 01       	movw	r14, r30
     d10:	88 23       	and	r24, r24
     d12:	09 f4       	brne	.+2      	; 0xd16 <vfprintf+0x3a>
     d14:	ba c1       	rjmp	.+884    	; 0x108a <vfprintf+0x3ae>
     d16:	85 32       	cpi	r24, 0x25	; 37
     d18:	39 f4       	brne	.+14     	; 0xd28 <vfprintf+0x4c>
     d1a:	93 fd       	sbrc	r25, 3
     d1c:	85 91       	lpm	r24, Z+
     d1e:	93 ff       	sbrs	r25, 3
     d20:	81 91       	ld	r24, Z+
     d22:	7f 01       	movw	r14, r30
     d24:	85 32       	cpi	r24, 0x25	; 37
     d26:	29 f4       	brne	.+10     	; 0xd32 <vfprintf+0x56>
     d28:	b6 01       	movw	r22, r12
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	0e 94 a9 09 	call	0x1352	; 0x1352 <fputc>
     d30:	e7 cf       	rjmp	.-50     	; 0xd00 <vfprintf+0x24>
     d32:	91 2c       	mov	r9, r1
     d34:	21 2c       	mov	r2, r1
     d36:	31 2c       	mov	r3, r1
     d38:	ff e1       	ldi	r31, 0x1F	; 31
     d3a:	f3 15       	cp	r31, r3
     d3c:	d8 f0       	brcs	.+54     	; 0xd74 <vfprintf+0x98>
     d3e:	8b 32       	cpi	r24, 0x2B	; 43
     d40:	79 f0       	breq	.+30     	; 0xd60 <vfprintf+0x84>
     d42:	38 f4       	brcc	.+14     	; 0xd52 <vfprintf+0x76>
     d44:	80 32       	cpi	r24, 0x20	; 32
     d46:	79 f0       	breq	.+30     	; 0xd66 <vfprintf+0x8a>
     d48:	83 32       	cpi	r24, 0x23	; 35
     d4a:	a1 f4       	brne	.+40     	; 0xd74 <vfprintf+0x98>
     d4c:	23 2d       	mov	r18, r3
     d4e:	20 61       	ori	r18, 0x10	; 16
     d50:	1d c0       	rjmp	.+58     	; 0xd8c <vfprintf+0xb0>
     d52:	8d 32       	cpi	r24, 0x2D	; 45
     d54:	61 f0       	breq	.+24     	; 0xd6e <vfprintf+0x92>
     d56:	80 33       	cpi	r24, 0x30	; 48
     d58:	69 f4       	brne	.+26     	; 0xd74 <vfprintf+0x98>
     d5a:	23 2d       	mov	r18, r3
     d5c:	21 60       	ori	r18, 0x01	; 1
     d5e:	16 c0       	rjmp	.+44     	; 0xd8c <vfprintf+0xb0>
     d60:	83 2d       	mov	r24, r3
     d62:	82 60       	ori	r24, 0x02	; 2
     d64:	38 2e       	mov	r3, r24
     d66:	e3 2d       	mov	r30, r3
     d68:	e4 60       	ori	r30, 0x04	; 4
     d6a:	3e 2e       	mov	r3, r30
     d6c:	2a c0       	rjmp	.+84     	; 0xdc2 <vfprintf+0xe6>
     d6e:	f3 2d       	mov	r31, r3
     d70:	f8 60       	ori	r31, 0x08	; 8
     d72:	1d c0       	rjmp	.+58     	; 0xdae <vfprintf+0xd2>
     d74:	37 fc       	sbrc	r3, 7
     d76:	2d c0       	rjmp	.+90     	; 0xdd2 <vfprintf+0xf6>
     d78:	20 ed       	ldi	r18, 0xD0	; 208
     d7a:	28 0f       	add	r18, r24
     d7c:	2a 30       	cpi	r18, 0x0A	; 10
     d7e:	40 f0       	brcs	.+16     	; 0xd90 <vfprintf+0xb4>
     d80:	8e 32       	cpi	r24, 0x2E	; 46
     d82:	b9 f4       	brne	.+46     	; 0xdb2 <vfprintf+0xd6>
     d84:	36 fc       	sbrc	r3, 6
     d86:	81 c1       	rjmp	.+770    	; 0x108a <vfprintf+0x3ae>
     d88:	23 2d       	mov	r18, r3
     d8a:	20 64       	ori	r18, 0x40	; 64
     d8c:	32 2e       	mov	r3, r18
     d8e:	19 c0       	rjmp	.+50     	; 0xdc2 <vfprintf+0xe6>
     d90:	36 fe       	sbrs	r3, 6
     d92:	06 c0       	rjmp	.+12     	; 0xda0 <vfprintf+0xc4>
     d94:	8a e0       	ldi	r24, 0x0A	; 10
     d96:	98 9e       	mul	r9, r24
     d98:	20 0d       	add	r18, r0
     d9a:	11 24       	eor	r1, r1
     d9c:	92 2e       	mov	r9, r18
     d9e:	11 c0       	rjmp	.+34     	; 0xdc2 <vfprintf+0xe6>
     da0:	ea e0       	ldi	r30, 0x0A	; 10
     da2:	2e 9e       	mul	r2, r30
     da4:	20 0d       	add	r18, r0
     da6:	11 24       	eor	r1, r1
     da8:	22 2e       	mov	r2, r18
     daa:	f3 2d       	mov	r31, r3
     dac:	f0 62       	ori	r31, 0x20	; 32
     dae:	3f 2e       	mov	r3, r31
     db0:	08 c0       	rjmp	.+16     	; 0xdc2 <vfprintf+0xe6>
     db2:	8c 36       	cpi	r24, 0x6C	; 108
     db4:	21 f4       	brne	.+8      	; 0xdbe <vfprintf+0xe2>
     db6:	83 2d       	mov	r24, r3
     db8:	80 68       	ori	r24, 0x80	; 128
     dba:	38 2e       	mov	r3, r24
     dbc:	02 c0       	rjmp	.+4      	; 0xdc2 <vfprintf+0xe6>
     dbe:	88 36       	cpi	r24, 0x68	; 104
     dc0:	41 f4       	brne	.+16     	; 0xdd2 <vfprintf+0xf6>
     dc2:	f7 01       	movw	r30, r14
     dc4:	93 fd       	sbrc	r25, 3
     dc6:	85 91       	lpm	r24, Z+
     dc8:	93 ff       	sbrs	r25, 3
     dca:	81 91       	ld	r24, Z+
     dcc:	7f 01       	movw	r14, r30
     dce:	81 11       	cpse	r24, r1
     dd0:	b3 cf       	rjmp	.-154    	; 0xd38 <vfprintf+0x5c>
     dd2:	98 2f       	mov	r25, r24
     dd4:	9f 7d       	andi	r25, 0xDF	; 223
     dd6:	95 54       	subi	r25, 0x45	; 69
     dd8:	93 30       	cpi	r25, 0x03	; 3
     dda:	28 f4       	brcc	.+10     	; 0xde6 <vfprintf+0x10a>
     ddc:	0c 5f       	subi	r16, 0xFC	; 252
     dde:	1f 4f       	sbci	r17, 0xFF	; 255
     de0:	9f e3       	ldi	r25, 0x3F	; 63
     de2:	99 83       	std	Y+1, r25	; 0x01
     de4:	0d c0       	rjmp	.+26     	; 0xe00 <vfprintf+0x124>
     de6:	83 36       	cpi	r24, 0x63	; 99
     de8:	31 f0       	breq	.+12     	; 0xdf6 <vfprintf+0x11a>
     dea:	83 37       	cpi	r24, 0x73	; 115
     dec:	71 f0       	breq	.+28     	; 0xe0a <vfprintf+0x12e>
     dee:	83 35       	cpi	r24, 0x53	; 83
     df0:	09 f0       	breq	.+2      	; 0xdf4 <vfprintf+0x118>
     df2:	59 c0       	rjmp	.+178    	; 0xea6 <vfprintf+0x1ca>
     df4:	21 c0       	rjmp	.+66     	; 0xe38 <vfprintf+0x15c>
     df6:	f8 01       	movw	r30, r16
     df8:	80 81       	ld	r24, Z
     dfa:	89 83       	std	Y+1, r24	; 0x01
     dfc:	0e 5f       	subi	r16, 0xFE	; 254
     dfe:	1f 4f       	sbci	r17, 0xFF	; 255
     e00:	88 24       	eor	r8, r8
     e02:	83 94       	inc	r8
     e04:	91 2c       	mov	r9, r1
     e06:	53 01       	movw	r10, r6
     e08:	13 c0       	rjmp	.+38     	; 0xe30 <vfprintf+0x154>
     e0a:	28 01       	movw	r4, r16
     e0c:	f2 e0       	ldi	r31, 0x02	; 2
     e0e:	4f 0e       	add	r4, r31
     e10:	51 1c       	adc	r5, r1
     e12:	f8 01       	movw	r30, r16
     e14:	a0 80       	ld	r10, Z
     e16:	b1 80       	ldd	r11, Z+1	; 0x01
     e18:	36 fe       	sbrs	r3, 6
     e1a:	03 c0       	rjmp	.+6      	; 0xe22 <vfprintf+0x146>
     e1c:	69 2d       	mov	r22, r9
     e1e:	70 e0       	ldi	r23, 0x00	; 0
     e20:	02 c0       	rjmp	.+4      	; 0xe26 <vfprintf+0x14a>
     e22:	6f ef       	ldi	r22, 0xFF	; 255
     e24:	7f ef       	ldi	r23, 0xFF	; 255
     e26:	c5 01       	movw	r24, r10
     e28:	0e 94 9e 09 	call	0x133c	; 0x133c <strnlen>
     e2c:	4c 01       	movw	r8, r24
     e2e:	82 01       	movw	r16, r4
     e30:	f3 2d       	mov	r31, r3
     e32:	ff 77       	andi	r31, 0x7F	; 127
     e34:	3f 2e       	mov	r3, r31
     e36:	16 c0       	rjmp	.+44     	; 0xe64 <vfprintf+0x188>
     e38:	28 01       	movw	r4, r16
     e3a:	22 e0       	ldi	r18, 0x02	; 2
     e3c:	42 0e       	add	r4, r18
     e3e:	51 1c       	adc	r5, r1
     e40:	f8 01       	movw	r30, r16
     e42:	a0 80       	ld	r10, Z
     e44:	b1 80       	ldd	r11, Z+1	; 0x01
     e46:	36 fe       	sbrs	r3, 6
     e48:	03 c0       	rjmp	.+6      	; 0xe50 <vfprintf+0x174>
     e4a:	69 2d       	mov	r22, r9
     e4c:	70 e0       	ldi	r23, 0x00	; 0
     e4e:	02 c0       	rjmp	.+4      	; 0xe54 <vfprintf+0x178>
     e50:	6f ef       	ldi	r22, 0xFF	; 255
     e52:	7f ef       	ldi	r23, 0xFF	; 255
     e54:	c5 01       	movw	r24, r10
     e56:	0e 94 8c 09 	call	0x1318	; 0x1318 <strnlen_P>
     e5a:	4c 01       	movw	r8, r24
     e5c:	f3 2d       	mov	r31, r3
     e5e:	f0 68       	ori	r31, 0x80	; 128
     e60:	3f 2e       	mov	r3, r31
     e62:	82 01       	movw	r16, r4
     e64:	33 fc       	sbrc	r3, 3
     e66:	1b c0       	rjmp	.+54     	; 0xe9e <vfprintf+0x1c2>
     e68:	82 2d       	mov	r24, r2
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	88 16       	cp	r8, r24
     e6e:	99 06       	cpc	r9, r25
     e70:	b0 f4       	brcc	.+44     	; 0xe9e <vfprintf+0x1c2>
     e72:	b6 01       	movw	r22, r12
     e74:	80 e2       	ldi	r24, 0x20	; 32
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	0e 94 a9 09 	call	0x1352	; 0x1352 <fputc>
     e7c:	2a 94       	dec	r2
     e7e:	f4 cf       	rjmp	.-24     	; 0xe68 <vfprintf+0x18c>
     e80:	f5 01       	movw	r30, r10
     e82:	37 fc       	sbrc	r3, 7
     e84:	85 91       	lpm	r24, Z+
     e86:	37 fe       	sbrs	r3, 7
     e88:	81 91       	ld	r24, Z+
     e8a:	5f 01       	movw	r10, r30
     e8c:	b6 01       	movw	r22, r12
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	0e 94 a9 09 	call	0x1352	; 0x1352 <fputc>
     e94:	21 10       	cpse	r2, r1
     e96:	2a 94       	dec	r2
     e98:	21 e0       	ldi	r18, 0x01	; 1
     e9a:	82 1a       	sub	r8, r18
     e9c:	91 08       	sbc	r9, r1
     e9e:	81 14       	cp	r8, r1
     ea0:	91 04       	cpc	r9, r1
     ea2:	71 f7       	brne	.-36     	; 0xe80 <vfprintf+0x1a4>
     ea4:	e8 c0       	rjmp	.+464    	; 0x1076 <vfprintf+0x39a>
     ea6:	84 36       	cpi	r24, 0x64	; 100
     ea8:	11 f0       	breq	.+4      	; 0xeae <vfprintf+0x1d2>
     eaa:	89 36       	cpi	r24, 0x69	; 105
     eac:	41 f5       	brne	.+80     	; 0xefe <vfprintf+0x222>
     eae:	f8 01       	movw	r30, r16
     eb0:	37 fe       	sbrs	r3, 7
     eb2:	07 c0       	rjmp	.+14     	; 0xec2 <vfprintf+0x1e6>
     eb4:	60 81       	ld	r22, Z
     eb6:	71 81       	ldd	r23, Z+1	; 0x01
     eb8:	82 81       	ldd	r24, Z+2	; 0x02
     eba:	93 81       	ldd	r25, Z+3	; 0x03
     ebc:	0c 5f       	subi	r16, 0xFC	; 252
     ebe:	1f 4f       	sbci	r17, 0xFF	; 255
     ec0:	08 c0       	rjmp	.+16     	; 0xed2 <vfprintf+0x1f6>
     ec2:	60 81       	ld	r22, Z
     ec4:	71 81       	ldd	r23, Z+1	; 0x01
     ec6:	07 2e       	mov	r0, r23
     ec8:	00 0c       	add	r0, r0
     eca:	88 0b       	sbc	r24, r24
     ecc:	99 0b       	sbc	r25, r25
     ece:	0e 5f       	subi	r16, 0xFE	; 254
     ed0:	1f 4f       	sbci	r17, 0xFF	; 255
     ed2:	f3 2d       	mov	r31, r3
     ed4:	ff 76       	andi	r31, 0x6F	; 111
     ed6:	3f 2e       	mov	r3, r31
     ed8:	97 ff       	sbrs	r25, 7
     eda:	09 c0       	rjmp	.+18     	; 0xeee <vfprintf+0x212>
     edc:	90 95       	com	r25
     ede:	80 95       	com	r24
     ee0:	70 95       	com	r23
     ee2:	61 95       	neg	r22
     ee4:	7f 4f       	sbci	r23, 0xFF	; 255
     ee6:	8f 4f       	sbci	r24, 0xFF	; 255
     ee8:	9f 4f       	sbci	r25, 0xFF	; 255
     eea:	f0 68       	ori	r31, 0x80	; 128
     eec:	3f 2e       	mov	r3, r31
     eee:	2a e0       	ldi	r18, 0x0A	; 10
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	a3 01       	movw	r20, r6
     ef4:	0e 94 e5 09 	call	0x13ca	; 0x13ca <__ultoa_invert>
     ef8:	88 2e       	mov	r8, r24
     efa:	86 18       	sub	r8, r6
     efc:	45 c0       	rjmp	.+138    	; 0xf88 <vfprintf+0x2ac>
     efe:	85 37       	cpi	r24, 0x75	; 117
     f00:	31 f4       	brne	.+12     	; 0xf0e <vfprintf+0x232>
     f02:	23 2d       	mov	r18, r3
     f04:	2f 7e       	andi	r18, 0xEF	; 239
     f06:	b2 2e       	mov	r11, r18
     f08:	2a e0       	ldi	r18, 0x0A	; 10
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	25 c0       	rjmp	.+74     	; 0xf58 <vfprintf+0x27c>
     f0e:	93 2d       	mov	r25, r3
     f10:	99 7f       	andi	r25, 0xF9	; 249
     f12:	b9 2e       	mov	r11, r25
     f14:	8f 36       	cpi	r24, 0x6F	; 111
     f16:	c1 f0       	breq	.+48     	; 0xf48 <vfprintf+0x26c>
     f18:	18 f4       	brcc	.+6      	; 0xf20 <vfprintf+0x244>
     f1a:	88 35       	cpi	r24, 0x58	; 88
     f1c:	79 f0       	breq	.+30     	; 0xf3c <vfprintf+0x260>
     f1e:	b5 c0       	rjmp	.+362    	; 0x108a <vfprintf+0x3ae>
     f20:	80 37       	cpi	r24, 0x70	; 112
     f22:	19 f0       	breq	.+6      	; 0xf2a <vfprintf+0x24e>
     f24:	88 37       	cpi	r24, 0x78	; 120
     f26:	21 f0       	breq	.+8      	; 0xf30 <vfprintf+0x254>
     f28:	b0 c0       	rjmp	.+352    	; 0x108a <vfprintf+0x3ae>
     f2a:	e9 2f       	mov	r30, r25
     f2c:	e0 61       	ori	r30, 0x10	; 16
     f2e:	be 2e       	mov	r11, r30
     f30:	b4 fe       	sbrs	r11, 4
     f32:	0d c0       	rjmp	.+26     	; 0xf4e <vfprintf+0x272>
     f34:	fb 2d       	mov	r31, r11
     f36:	f4 60       	ori	r31, 0x04	; 4
     f38:	bf 2e       	mov	r11, r31
     f3a:	09 c0       	rjmp	.+18     	; 0xf4e <vfprintf+0x272>
     f3c:	34 fe       	sbrs	r3, 4
     f3e:	0a c0       	rjmp	.+20     	; 0xf54 <vfprintf+0x278>
     f40:	29 2f       	mov	r18, r25
     f42:	26 60       	ori	r18, 0x06	; 6
     f44:	b2 2e       	mov	r11, r18
     f46:	06 c0       	rjmp	.+12     	; 0xf54 <vfprintf+0x278>
     f48:	28 e0       	ldi	r18, 0x08	; 8
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	05 c0       	rjmp	.+10     	; 0xf58 <vfprintf+0x27c>
     f4e:	20 e1       	ldi	r18, 0x10	; 16
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	02 c0       	rjmp	.+4      	; 0xf58 <vfprintf+0x27c>
     f54:	20 e1       	ldi	r18, 0x10	; 16
     f56:	32 e0       	ldi	r19, 0x02	; 2
     f58:	f8 01       	movw	r30, r16
     f5a:	b7 fe       	sbrs	r11, 7
     f5c:	07 c0       	rjmp	.+14     	; 0xf6c <vfprintf+0x290>
     f5e:	60 81       	ld	r22, Z
     f60:	71 81       	ldd	r23, Z+1	; 0x01
     f62:	82 81       	ldd	r24, Z+2	; 0x02
     f64:	93 81       	ldd	r25, Z+3	; 0x03
     f66:	0c 5f       	subi	r16, 0xFC	; 252
     f68:	1f 4f       	sbci	r17, 0xFF	; 255
     f6a:	06 c0       	rjmp	.+12     	; 0xf78 <vfprintf+0x29c>
     f6c:	60 81       	ld	r22, Z
     f6e:	71 81       	ldd	r23, Z+1	; 0x01
     f70:	80 e0       	ldi	r24, 0x00	; 0
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	0e 5f       	subi	r16, 0xFE	; 254
     f76:	1f 4f       	sbci	r17, 0xFF	; 255
     f78:	a3 01       	movw	r20, r6
     f7a:	0e 94 e5 09 	call	0x13ca	; 0x13ca <__ultoa_invert>
     f7e:	88 2e       	mov	r8, r24
     f80:	86 18       	sub	r8, r6
     f82:	fb 2d       	mov	r31, r11
     f84:	ff 77       	andi	r31, 0x7F	; 127
     f86:	3f 2e       	mov	r3, r31
     f88:	36 fe       	sbrs	r3, 6
     f8a:	0d c0       	rjmp	.+26     	; 0xfa6 <vfprintf+0x2ca>
     f8c:	23 2d       	mov	r18, r3
     f8e:	2e 7f       	andi	r18, 0xFE	; 254
     f90:	a2 2e       	mov	r10, r18
     f92:	89 14       	cp	r8, r9
     f94:	58 f4       	brcc	.+22     	; 0xfac <vfprintf+0x2d0>
     f96:	34 fe       	sbrs	r3, 4
     f98:	0b c0       	rjmp	.+22     	; 0xfb0 <vfprintf+0x2d4>
     f9a:	32 fc       	sbrc	r3, 2
     f9c:	09 c0       	rjmp	.+18     	; 0xfb0 <vfprintf+0x2d4>
     f9e:	83 2d       	mov	r24, r3
     fa0:	8e 7e       	andi	r24, 0xEE	; 238
     fa2:	a8 2e       	mov	r10, r24
     fa4:	05 c0       	rjmp	.+10     	; 0xfb0 <vfprintf+0x2d4>
     fa6:	b8 2c       	mov	r11, r8
     fa8:	a3 2c       	mov	r10, r3
     faa:	03 c0       	rjmp	.+6      	; 0xfb2 <vfprintf+0x2d6>
     fac:	b8 2c       	mov	r11, r8
     fae:	01 c0       	rjmp	.+2      	; 0xfb2 <vfprintf+0x2d6>
     fb0:	b9 2c       	mov	r11, r9
     fb2:	a4 fe       	sbrs	r10, 4
     fb4:	0f c0       	rjmp	.+30     	; 0xfd4 <vfprintf+0x2f8>
     fb6:	fe 01       	movw	r30, r28
     fb8:	e8 0d       	add	r30, r8
     fba:	f1 1d       	adc	r31, r1
     fbc:	80 81       	ld	r24, Z
     fbe:	80 33       	cpi	r24, 0x30	; 48
     fc0:	21 f4       	brne	.+8      	; 0xfca <vfprintf+0x2ee>
     fc2:	9a 2d       	mov	r25, r10
     fc4:	99 7e       	andi	r25, 0xE9	; 233
     fc6:	a9 2e       	mov	r10, r25
     fc8:	09 c0       	rjmp	.+18     	; 0xfdc <vfprintf+0x300>
     fca:	a2 fe       	sbrs	r10, 2
     fcc:	06 c0       	rjmp	.+12     	; 0xfda <vfprintf+0x2fe>
     fce:	b3 94       	inc	r11
     fd0:	b3 94       	inc	r11
     fd2:	04 c0       	rjmp	.+8      	; 0xfdc <vfprintf+0x300>
     fd4:	8a 2d       	mov	r24, r10
     fd6:	86 78       	andi	r24, 0x86	; 134
     fd8:	09 f0       	breq	.+2      	; 0xfdc <vfprintf+0x300>
     fda:	b3 94       	inc	r11
     fdc:	a3 fc       	sbrc	r10, 3
     fde:	11 c0       	rjmp	.+34     	; 0x1002 <vfprintf+0x326>
     fe0:	a0 fe       	sbrs	r10, 0
     fe2:	06 c0       	rjmp	.+12     	; 0xff0 <vfprintf+0x314>
     fe4:	b2 14       	cp	r11, r2
     fe6:	88 f4       	brcc	.+34     	; 0x100a <vfprintf+0x32e>
     fe8:	28 0c       	add	r2, r8
     fea:	92 2c       	mov	r9, r2
     fec:	9b 18       	sub	r9, r11
     fee:	0e c0       	rjmp	.+28     	; 0x100c <vfprintf+0x330>
     ff0:	b2 14       	cp	r11, r2
     ff2:	60 f4       	brcc	.+24     	; 0x100c <vfprintf+0x330>
     ff4:	b6 01       	movw	r22, r12
     ff6:	80 e2       	ldi	r24, 0x20	; 32
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	0e 94 a9 09 	call	0x1352	; 0x1352 <fputc>
     ffe:	b3 94       	inc	r11
    1000:	f7 cf       	rjmp	.-18     	; 0xff0 <vfprintf+0x314>
    1002:	b2 14       	cp	r11, r2
    1004:	18 f4       	brcc	.+6      	; 0x100c <vfprintf+0x330>
    1006:	2b 18       	sub	r2, r11
    1008:	02 c0       	rjmp	.+4      	; 0x100e <vfprintf+0x332>
    100a:	98 2c       	mov	r9, r8
    100c:	21 2c       	mov	r2, r1
    100e:	a4 fe       	sbrs	r10, 4
    1010:	10 c0       	rjmp	.+32     	; 0x1032 <vfprintf+0x356>
    1012:	b6 01       	movw	r22, r12
    1014:	80 e3       	ldi	r24, 0x30	; 48
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	0e 94 a9 09 	call	0x1352	; 0x1352 <fputc>
    101c:	a2 fe       	sbrs	r10, 2
    101e:	17 c0       	rjmp	.+46     	; 0x104e <vfprintf+0x372>
    1020:	a1 fc       	sbrc	r10, 1
    1022:	03 c0       	rjmp	.+6      	; 0x102a <vfprintf+0x34e>
    1024:	88 e7       	ldi	r24, 0x78	; 120
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	02 c0       	rjmp	.+4      	; 0x102e <vfprintf+0x352>
    102a:	88 e5       	ldi	r24, 0x58	; 88
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	b6 01       	movw	r22, r12
    1030:	0c c0       	rjmp	.+24     	; 0x104a <vfprintf+0x36e>
    1032:	8a 2d       	mov	r24, r10
    1034:	86 78       	andi	r24, 0x86	; 134
    1036:	59 f0       	breq	.+22     	; 0x104e <vfprintf+0x372>
    1038:	a1 fe       	sbrs	r10, 1
    103a:	02 c0       	rjmp	.+4      	; 0x1040 <vfprintf+0x364>
    103c:	8b e2       	ldi	r24, 0x2B	; 43
    103e:	01 c0       	rjmp	.+2      	; 0x1042 <vfprintf+0x366>
    1040:	80 e2       	ldi	r24, 0x20	; 32
    1042:	a7 fc       	sbrc	r10, 7
    1044:	8d e2       	ldi	r24, 0x2D	; 45
    1046:	b6 01       	movw	r22, r12
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	0e 94 a9 09 	call	0x1352	; 0x1352 <fputc>
    104e:	89 14       	cp	r8, r9
    1050:	38 f4       	brcc	.+14     	; 0x1060 <vfprintf+0x384>
    1052:	b6 01       	movw	r22, r12
    1054:	80 e3       	ldi	r24, 0x30	; 48
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	0e 94 a9 09 	call	0x1352	; 0x1352 <fputc>
    105c:	9a 94       	dec	r9
    105e:	f7 cf       	rjmp	.-18     	; 0x104e <vfprintf+0x372>
    1060:	8a 94       	dec	r8
    1062:	f3 01       	movw	r30, r6
    1064:	e8 0d       	add	r30, r8
    1066:	f1 1d       	adc	r31, r1
    1068:	80 81       	ld	r24, Z
    106a:	b6 01       	movw	r22, r12
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	0e 94 a9 09 	call	0x1352	; 0x1352 <fputc>
    1072:	81 10       	cpse	r8, r1
    1074:	f5 cf       	rjmp	.-22     	; 0x1060 <vfprintf+0x384>
    1076:	22 20       	and	r2, r2
    1078:	09 f4       	brne	.+2      	; 0x107c <vfprintf+0x3a0>
    107a:	42 ce       	rjmp	.-892    	; 0xd00 <vfprintf+0x24>
    107c:	b6 01       	movw	r22, r12
    107e:	80 e2       	ldi	r24, 0x20	; 32
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	0e 94 a9 09 	call	0x1352	; 0x1352 <fputc>
    1086:	2a 94       	dec	r2
    1088:	f6 cf       	rjmp	.-20     	; 0x1076 <vfprintf+0x39a>
    108a:	f6 01       	movw	r30, r12
    108c:	86 81       	ldd	r24, Z+6	; 0x06
    108e:	97 81       	ldd	r25, Z+7	; 0x07
    1090:	02 c0       	rjmp	.+4      	; 0x1096 <vfprintf+0x3ba>
    1092:	8f ef       	ldi	r24, 0xFF	; 255
    1094:	9f ef       	ldi	r25, 0xFF	; 255
    1096:	2b 96       	adiw	r28, 0x0b	; 11
    1098:	e2 e1       	ldi	r30, 0x12	; 18
    109a:	0c 94 5f 0a 	jmp	0x14be	; 0x14be <__epilogue_restores__>

0000109e <calloc>:
    109e:	0f 93       	push	r16
    10a0:	1f 93       	push	r17
    10a2:	cf 93       	push	r28
    10a4:	df 93       	push	r29
    10a6:	86 9f       	mul	r24, r22
    10a8:	80 01       	movw	r16, r0
    10aa:	87 9f       	mul	r24, r23
    10ac:	10 0d       	add	r17, r0
    10ae:	96 9f       	mul	r25, r22
    10b0:	10 0d       	add	r17, r0
    10b2:	11 24       	eor	r1, r1
    10b4:	c8 01       	movw	r24, r16
    10b6:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <malloc>
    10ba:	ec 01       	movw	r28, r24
    10bc:	00 97       	sbiw	r24, 0x00	; 0
    10be:	29 f0       	breq	.+10     	; 0x10ca <calloc+0x2c>
    10c0:	a8 01       	movw	r20, r16
    10c2:	60 e0       	ldi	r22, 0x00	; 0
    10c4:	70 e0       	ldi	r23, 0x00	; 0
    10c6:	0e 94 97 09 	call	0x132e	; 0x132e <memset>
    10ca:	ce 01       	movw	r24, r28
    10cc:	df 91       	pop	r29
    10ce:	cf 91       	pop	r28
    10d0:	1f 91       	pop	r17
    10d2:	0f 91       	pop	r16
    10d4:	08 95       	ret

000010d6 <malloc>:
    10d6:	0f 93       	push	r16
    10d8:	1f 93       	push	r17
    10da:	cf 93       	push	r28
    10dc:	df 93       	push	r29
    10de:	82 30       	cpi	r24, 0x02	; 2
    10e0:	91 05       	cpc	r25, r1
    10e2:	10 f4       	brcc	.+4      	; 0x10e8 <malloc+0x12>
    10e4:	82 e0       	ldi	r24, 0x02	; 2
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	e0 91 7c 02 	lds	r30, 0x027C	; 0x80027c <__flp>
    10ec:	f0 91 7d 02 	lds	r31, 0x027D	; 0x80027d <__flp+0x1>
    10f0:	20 e0       	ldi	r18, 0x00	; 0
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	a0 e0       	ldi	r26, 0x00	; 0
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	30 97       	sbiw	r30, 0x00	; 0
    10fa:	19 f1       	breq	.+70     	; 0x1142 <malloc+0x6c>
    10fc:	40 81       	ld	r20, Z
    10fe:	51 81       	ldd	r21, Z+1	; 0x01
    1100:	02 81       	ldd	r16, Z+2	; 0x02
    1102:	13 81       	ldd	r17, Z+3	; 0x03
    1104:	48 17       	cp	r20, r24
    1106:	59 07       	cpc	r21, r25
    1108:	c8 f0       	brcs	.+50     	; 0x113c <malloc+0x66>
    110a:	84 17       	cp	r24, r20
    110c:	95 07       	cpc	r25, r21
    110e:	69 f4       	brne	.+26     	; 0x112a <malloc+0x54>
    1110:	10 97       	sbiw	r26, 0x00	; 0
    1112:	31 f0       	breq	.+12     	; 0x1120 <malloc+0x4a>
    1114:	12 96       	adiw	r26, 0x02	; 2
    1116:	0c 93       	st	X, r16
    1118:	12 97       	sbiw	r26, 0x02	; 2
    111a:	13 96       	adiw	r26, 0x03	; 3
    111c:	1c 93       	st	X, r17
    111e:	27 c0       	rjmp	.+78     	; 0x116e <malloc+0x98>
    1120:	00 93 7c 02 	sts	0x027C, r16	; 0x80027c <__flp>
    1124:	10 93 7d 02 	sts	0x027D, r17	; 0x80027d <__flp+0x1>
    1128:	22 c0       	rjmp	.+68     	; 0x116e <malloc+0x98>
    112a:	21 15       	cp	r18, r1
    112c:	31 05       	cpc	r19, r1
    112e:	19 f0       	breq	.+6      	; 0x1136 <malloc+0x60>
    1130:	42 17       	cp	r20, r18
    1132:	53 07       	cpc	r21, r19
    1134:	18 f4       	brcc	.+6      	; 0x113c <malloc+0x66>
    1136:	9a 01       	movw	r18, r20
    1138:	bd 01       	movw	r22, r26
    113a:	ef 01       	movw	r28, r30
    113c:	df 01       	movw	r26, r30
    113e:	f8 01       	movw	r30, r16
    1140:	db cf       	rjmp	.-74     	; 0x10f8 <malloc+0x22>
    1142:	21 15       	cp	r18, r1
    1144:	31 05       	cpc	r19, r1
    1146:	f9 f0       	breq	.+62     	; 0x1186 <malloc+0xb0>
    1148:	28 1b       	sub	r18, r24
    114a:	39 0b       	sbc	r19, r25
    114c:	24 30       	cpi	r18, 0x04	; 4
    114e:	31 05       	cpc	r19, r1
    1150:	80 f4       	brcc	.+32     	; 0x1172 <malloc+0x9c>
    1152:	8a 81       	ldd	r24, Y+2	; 0x02
    1154:	9b 81       	ldd	r25, Y+3	; 0x03
    1156:	61 15       	cp	r22, r1
    1158:	71 05       	cpc	r23, r1
    115a:	21 f0       	breq	.+8      	; 0x1164 <malloc+0x8e>
    115c:	fb 01       	movw	r30, r22
    115e:	93 83       	std	Z+3, r25	; 0x03
    1160:	82 83       	std	Z+2, r24	; 0x02
    1162:	04 c0       	rjmp	.+8      	; 0x116c <malloc+0x96>
    1164:	90 93 7d 02 	sts	0x027D, r25	; 0x80027d <__flp+0x1>
    1168:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <__flp>
    116c:	fe 01       	movw	r30, r28
    116e:	32 96       	adiw	r30, 0x02	; 2
    1170:	44 c0       	rjmp	.+136    	; 0x11fa <malloc+0x124>
    1172:	fe 01       	movw	r30, r28
    1174:	e2 0f       	add	r30, r18
    1176:	f3 1f       	adc	r31, r19
    1178:	81 93       	st	Z+, r24
    117a:	91 93       	st	Z+, r25
    117c:	22 50       	subi	r18, 0x02	; 2
    117e:	31 09       	sbc	r19, r1
    1180:	39 83       	std	Y+1, r19	; 0x01
    1182:	28 83       	st	Y, r18
    1184:	3a c0       	rjmp	.+116    	; 0x11fa <malloc+0x124>
    1186:	20 91 7a 02 	lds	r18, 0x027A	; 0x80027a <__brkval>
    118a:	30 91 7b 02 	lds	r19, 0x027B	; 0x80027b <__brkval+0x1>
    118e:	23 2b       	or	r18, r19
    1190:	41 f4       	brne	.+16     	; 0x11a2 <malloc+0xcc>
    1192:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1196:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    119a:	30 93 7b 02 	sts	0x027B, r19	; 0x80027b <__brkval+0x1>
    119e:	20 93 7a 02 	sts	0x027A, r18	; 0x80027a <__brkval>
    11a2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    11a6:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    11aa:	21 15       	cp	r18, r1
    11ac:	31 05       	cpc	r19, r1
    11ae:	41 f4       	brne	.+16     	; 0x11c0 <malloc+0xea>
    11b0:	2d b7       	in	r18, 0x3d	; 61
    11b2:	3e b7       	in	r19, 0x3e	; 62
    11b4:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    11b8:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    11bc:	24 1b       	sub	r18, r20
    11be:	35 0b       	sbc	r19, r21
    11c0:	e0 91 7a 02 	lds	r30, 0x027A	; 0x80027a <__brkval>
    11c4:	f0 91 7b 02 	lds	r31, 0x027B	; 0x80027b <__brkval+0x1>
    11c8:	e2 17       	cp	r30, r18
    11ca:	f3 07       	cpc	r31, r19
    11cc:	a0 f4       	brcc	.+40     	; 0x11f6 <malloc+0x120>
    11ce:	2e 1b       	sub	r18, r30
    11d0:	3f 0b       	sbc	r19, r31
    11d2:	28 17       	cp	r18, r24
    11d4:	39 07       	cpc	r19, r25
    11d6:	78 f0       	brcs	.+30     	; 0x11f6 <malloc+0x120>
    11d8:	ac 01       	movw	r20, r24
    11da:	4e 5f       	subi	r20, 0xFE	; 254
    11dc:	5f 4f       	sbci	r21, 0xFF	; 255
    11de:	24 17       	cp	r18, r20
    11e0:	35 07       	cpc	r19, r21
    11e2:	48 f0       	brcs	.+18     	; 0x11f6 <malloc+0x120>
    11e4:	4e 0f       	add	r20, r30
    11e6:	5f 1f       	adc	r21, r31
    11e8:	50 93 7b 02 	sts	0x027B, r21	; 0x80027b <__brkval+0x1>
    11ec:	40 93 7a 02 	sts	0x027A, r20	; 0x80027a <__brkval>
    11f0:	81 93       	st	Z+, r24
    11f2:	91 93       	st	Z+, r25
    11f4:	02 c0       	rjmp	.+4      	; 0x11fa <malloc+0x124>
    11f6:	e0 e0       	ldi	r30, 0x00	; 0
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	cf 01       	movw	r24, r30
    11fc:	df 91       	pop	r29
    11fe:	cf 91       	pop	r28
    1200:	1f 91       	pop	r17
    1202:	0f 91       	pop	r16
    1204:	08 95       	ret

00001206 <free>:
    1206:	cf 93       	push	r28
    1208:	df 93       	push	r29
    120a:	00 97       	sbiw	r24, 0x00	; 0
    120c:	09 f4       	brne	.+2      	; 0x1210 <free+0xa>
    120e:	81 c0       	rjmp	.+258    	; 0x1312 <free+0x10c>
    1210:	fc 01       	movw	r30, r24
    1212:	32 97       	sbiw	r30, 0x02	; 2
    1214:	13 82       	std	Z+3, r1	; 0x03
    1216:	12 82       	std	Z+2, r1	; 0x02
    1218:	a0 91 7c 02 	lds	r26, 0x027C	; 0x80027c <__flp>
    121c:	b0 91 7d 02 	lds	r27, 0x027D	; 0x80027d <__flp+0x1>
    1220:	10 97       	sbiw	r26, 0x00	; 0
    1222:	81 f4       	brne	.+32     	; 0x1244 <free+0x3e>
    1224:	20 81       	ld	r18, Z
    1226:	31 81       	ldd	r19, Z+1	; 0x01
    1228:	82 0f       	add	r24, r18
    122a:	93 1f       	adc	r25, r19
    122c:	20 91 7a 02 	lds	r18, 0x027A	; 0x80027a <__brkval>
    1230:	30 91 7b 02 	lds	r19, 0x027B	; 0x80027b <__brkval+0x1>
    1234:	28 17       	cp	r18, r24
    1236:	39 07       	cpc	r19, r25
    1238:	51 f5       	brne	.+84     	; 0x128e <free+0x88>
    123a:	f0 93 7b 02 	sts	0x027B, r31	; 0x80027b <__brkval+0x1>
    123e:	e0 93 7a 02 	sts	0x027A, r30	; 0x80027a <__brkval>
    1242:	67 c0       	rjmp	.+206    	; 0x1312 <free+0x10c>
    1244:	ed 01       	movw	r28, r26
    1246:	20 e0       	ldi	r18, 0x00	; 0
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	ce 17       	cp	r28, r30
    124c:	df 07       	cpc	r29, r31
    124e:	40 f4       	brcc	.+16     	; 0x1260 <free+0x5a>
    1250:	4a 81       	ldd	r20, Y+2	; 0x02
    1252:	5b 81       	ldd	r21, Y+3	; 0x03
    1254:	9e 01       	movw	r18, r28
    1256:	41 15       	cp	r20, r1
    1258:	51 05       	cpc	r21, r1
    125a:	f1 f0       	breq	.+60     	; 0x1298 <free+0x92>
    125c:	ea 01       	movw	r28, r20
    125e:	f5 cf       	rjmp	.-22     	; 0x124a <free+0x44>
    1260:	d3 83       	std	Z+3, r29	; 0x03
    1262:	c2 83       	std	Z+2, r28	; 0x02
    1264:	40 81       	ld	r20, Z
    1266:	51 81       	ldd	r21, Z+1	; 0x01
    1268:	84 0f       	add	r24, r20
    126a:	95 1f       	adc	r25, r21
    126c:	c8 17       	cp	r28, r24
    126e:	d9 07       	cpc	r29, r25
    1270:	59 f4       	brne	.+22     	; 0x1288 <free+0x82>
    1272:	88 81       	ld	r24, Y
    1274:	99 81       	ldd	r25, Y+1	; 0x01
    1276:	84 0f       	add	r24, r20
    1278:	95 1f       	adc	r25, r21
    127a:	02 96       	adiw	r24, 0x02	; 2
    127c:	91 83       	std	Z+1, r25	; 0x01
    127e:	80 83       	st	Z, r24
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	9b 81       	ldd	r25, Y+3	; 0x03
    1284:	93 83       	std	Z+3, r25	; 0x03
    1286:	82 83       	std	Z+2, r24	; 0x02
    1288:	21 15       	cp	r18, r1
    128a:	31 05       	cpc	r19, r1
    128c:	29 f4       	brne	.+10     	; 0x1298 <free+0x92>
    128e:	f0 93 7d 02 	sts	0x027D, r31	; 0x80027d <__flp+0x1>
    1292:	e0 93 7c 02 	sts	0x027C, r30	; 0x80027c <__flp>
    1296:	3d c0       	rjmp	.+122    	; 0x1312 <free+0x10c>
    1298:	e9 01       	movw	r28, r18
    129a:	fb 83       	std	Y+3, r31	; 0x03
    129c:	ea 83       	std	Y+2, r30	; 0x02
    129e:	49 91       	ld	r20, Y+
    12a0:	59 91       	ld	r21, Y+
    12a2:	c4 0f       	add	r28, r20
    12a4:	d5 1f       	adc	r29, r21
    12a6:	ec 17       	cp	r30, r28
    12a8:	fd 07       	cpc	r31, r29
    12aa:	61 f4       	brne	.+24     	; 0x12c4 <free+0xbe>
    12ac:	80 81       	ld	r24, Z
    12ae:	91 81       	ldd	r25, Z+1	; 0x01
    12b0:	84 0f       	add	r24, r20
    12b2:	95 1f       	adc	r25, r21
    12b4:	02 96       	adiw	r24, 0x02	; 2
    12b6:	e9 01       	movw	r28, r18
    12b8:	99 83       	std	Y+1, r25	; 0x01
    12ba:	88 83       	st	Y, r24
    12bc:	82 81       	ldd	r24, Z+2	; 0x02
    12be:	93 81       	ldd	r25, Z+3	; 0x03
    12c0:	9b 83       	std	Y+3, r25	; 0x03
    12c2:	8a 83       	std	Y+2, r24	; 0x02
    12c4:	e0 e0       	ldi	r30, 0x00	; 0
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	12 96       	adiw	r26, 0x02	; 2
    12ca:	8d 91       	ld	r24, X+
    12cc:	9c 91       	ld	r25, X
    12ce:	13 97       	sbiw	r26, 0x03	; 3
    12d0:	00 97       	sbiw	r24, 0x00	; 0
    12d2:	19 f0       	breq	.+6      	; 0x12da <free+0xd4>
    12d4:	fd 01       	movw	r30, r26
    12d6:	dc 01       	movw	r26, r24
    12d8:	f7 cf       	rjmp	.-18     	; 0x12c8 <free+0xc2>
    12da:	8d 91       	ld	r24, X+
    12dc:	9c 91       	ld	r25, X
    12de:	11 97       	sbiw	r26, 0x01	; 1
    12e0:	9d 01       	movw	r18, r26
    12e2:	2e 5f       	subi	r18, 0xFE	; 254
    12e4:	3f 4f       	sbci	r19, 0xFF	; 255
    12e6:	82 0f       	add	r24, r18
    12e8:	93 1f       	adc	r25, r19
    12ea:	20 91 7a 02 	lds	r18, 0x027A	; 0x80027a <__brkval>
    12ee:	30 91 7b 02 	lds	r19, 0x027B	; 0x80027b <__brkval+0x1>
    12f2:	28 17       	cp	r18, r24
    12f4:	39 07       	cpc	r19, r25
    12f6:	69 f4       	brne	.+26     	; 0x1312 <free+0x10c>
    12f8:	30 97       	sbiw	r30, 0x00	; 0
    12fa:	29 f4       	brne	.+10     	; 0x1306 <free+0x100>
    12fc:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <__flp+0x1>
    1300:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <__flp>
    1304:	02 c0       	rjmp	.+4      	; 0x130a <free+0x104>
    1306:	13 82       	std	Z+3, r1	; 0x03
    1308:	12 82       	std	Z+2, r1	; 0x02
    130a:	b0 93 7b 02 	sts	0x027B, r27	; 0x80027b <__brkval+0x1>
    130e:	a0 93 7a 02 	sts	0x027A, r26	; 0x80027a <__brkval>
    1312:	df 91       	pop	r29
    1314:	cf 91       	pop	r28
    1316:	08 95       	ret

00001318 <strnlen_P>:
    1318:	fc 01       	movw	r30, r24
    131a:	05 90       	lpm	r0, Z+
    131c:	61 50       	subi	r22, 0x01	; 1
    131e:	70 40       	sbci	r23, 0x00	; 0
    1320:	01 10       	cpse	r0, r1
    1322:	d8 f7       	brcc	.-10     	; 0x131a <strnlen_P+0x2>
    1324:	80 95       	com	r24
    1326:	90 95       	com	r25
    1328:	8e 0f       	add	r24, r30
    132a:	9f 1f       	adc	r25, r31
    132c:	08 95       	ret

0000132e <memset>:
    132e:	dc 01       	movw	r26, r24
    1330:	01 c0       	rjmp	.+2      	; 0x1334 <memset+0x6>
    1332:	6d 93       	st	X+, r22
    1334:	41 50       	subi	r20, 0x01	; 1
    1336:	50 40       	sbci	r21, 0x00	; 0
    1338:	e0 f7       	brcc	.-8      	; 0x1332 <memset+0x4>
    133a:	08 95       	ret

0000133c <strnlen>:
    133c:	fc 01       	movw	r30, r24
    133e:	61 50       	subi	r22, 0x01	; 1
    1340:	70 40       	sbci	r23, 0x00	; 0
    1342:	01 90       	ld	r0, Z+
    1344:	01 10       	cpse	r0, r1
    1346:	d8 f7       	brcc	.-10     	; 0x133e <strnlen+0x2>
    1348:	80 95       	com	r24
    134a:	90 95       	com	r25
    134c:	8e 0f       	add	r24, r30
    134e:	9f 1f       	adc	r25, r31
    1350:	08 95       	ret

00001352 <fputc>:
    1352:	0f 93       	push	r16
    1354:	1f 93       	push	r17
    1356:	cf 93       	push	r28
    1358:	df 93       	push	r29
    135a:	fb 01       	movw	r30, r22
    135c:	23 81       	ldd	r18, Z+3	; 0x03
    135e:	21 fd       	sbrc	r18, 1
    1360:	03 c0       	rjmp	.+6      	; 0x1368 <fputc+0x16>
    1362:	8f ef       	ldi	r24, 0xFF	; 255
    1364:	9f ef       	ldi	r25, 0xFF	; 255
    1366:	2c c0       	rjmp	.+88     	; 0x13c0 <fputc+0x6e>
    1368:	22 ff       	sbrs	r18, 2
    136a:	16 c0       	rjmp	.+44     	; 0x1398 <fputc+0x46>
    136c:	46 81       	ldd	r20, Z+6	; 0x06
    136e:	57 81       	ldd	r21, Z+7	; 0x07
    1370:	24 81       	ldd	r18, Z+4	; 0x04
    1372:	35 81       	ldd	r19, Z+5	; 0x05
    1374:	42 17       	cp	r20, r18
    1376:	53 07       	cpc	r21, r19
    1378:	44 f4       	brge	.+16     	; 0x138a <fputc+0x38>
    137a:	a0 81       	ld	r26, Z
    137c:	b1 81       	ldd	r27, Z+1	; 0x01
    137e:	9d 01       	movw	r18, r26
    1380:	2f 5f       	subi	r18, 0xFF	; 255
    1382:	3f 4f       	sbci	r19, 0xFF	; 255
    1384:	31 83       	std	Z+1, r19	; 0x01
    1386:	20 83       	st	Z, r18
    1388:	8c 93       	st	X, r24
    138a:	26 81       	ldd	r18, Z+6	; 0x06
    138c:	37 81       	ldd	r19, Z+7	; 0x07
    138e:	2f 5f       	subi	r18, 0xFF	; 255
    1390:	3f 4f       	sbci	r19, 0xFF	; 255
    1392:	37 83       	std	Z+7, r19	; 0x07
    1394:	26 83       	std	Z+6, r18	; 0x06
    1396:	14 c0       	rjmp	.+40     	; 0x13c0 <fputc+0x6e>
    1398:	8b 01       	movw	r16, r22
    139a:	ec 01       	movw	r28, r24
    139c:	fb 01       	movw	r30, r22
    139e:	00 84       	ldd	r0, Z+8	; 0x08
    13a0:	f1 85       	ldd	r31, Z+9	; 0x09
    13a2:	e0 2d       	mov	r30, r0
    13a4:	09 95       	icall
    13a6:	89 2b       	or	r24, r25
    13a8:	e1 f6       	brne	.-72     	; 0x1362 <fputc+0x10>
    13aa:	d8 01       	movw	r26, r16
    13ac:	16 96       	adiw	r26, 0x06	; 6
    13ae:	8d 91       	ld	r24, X+
    13b0:	9c 91       	ld	r25, X
    13b2:	17 97       	sbiw	r26, 0x07	; 7
    13b4:	01 96       	adiw	r24, 0x01	; 1
    13b6:	17 96       	adiw	r26, 0x07	; 7
    13b8:	9c 93       	st	X, r25
    13ba:	8e 93       	st	-X, r24
    13bc:	16 97       	sbiw	r26, 0x06	; 6
    13be:	ce 01       	movw	r24, r28
    13c0:	df 91       	pop	r29
    13c2:	cf 91       	pop	r28
    13c4:	1f 91       	pop	r17
    13c6:	0f 91       	pop	r16
    13c8:	08 95       	ret

000013ca <__ultoa_invert>:
    13ca:	fa 01       	movw	r30, r20
    13cc:	aa 27       	eor	r26, r26
    13ce:	28 30       	cpi	r18, 0x08	; 8
    13d0:	51 f1       	breq	.+84     	; 0x1426 <__ultoa_invert+0x5c>
    13d2:	20 31       	cpi	r18, 0x10	; 16
    13d4:	81 f1       	breq	.+96     	; 0x1436 <__ultoa_invert+0x6c>
    13d6:	e8 94       	clt
    13d8:	6f 93       	push	r22
    13da:	6e 7f       	andi	r22, 0xFE	; 254
    13dc:	6e 5f       	subi	r22, 0xFE	; 254
    13de:	7f 4f       	sbci	r23, 0xFF	; 255
    13e0:	8f 4f       	sbci	r24, 0xFF	; 255
    13e2:	9f 4f       	sbci	r25, 0xFF	; 255
    13e4:	af 4f       	sbci	r26, 0xFF	; 255
    13e6:	b1 e0       	ldi	r27, 0x01	; 1
    13e8:	3e d0       	rcall	.+124    	; 0x1466 <__ultoa_invert+0x9c>
    13ea:	b4 e0       	ldi	r27, 0x04	; 4
    13ec:	3c d0       	rcall	.+120    	; 0x1466 <__ultoa_invert+0x9c>
    13ee:	67 0f       	add	r22, r23
    13f0:	78 1f       	adc	r23, r24
    13f2:	89 1f       	adc	r24, r25
    13f4:	9a 1f       	adc	r25, r26
    13f6:	a1 1d       	adc	r26, r1
    13f8:	68 0f       	add	r22, r24
    13fa:	79 1f       	adc	r23, r25
    13fc:	8a 1f       	adc	r24, r26
    13fe:	91 1d       	adc	r25, r1
    1400:	a1 1d       	adc	r26, r1
    1402:	6a 0f       	add	r22, r26
    1404:	71 1d       	adc	r23, r1
    1406:	81 1d       	adc	r24, r1
    1408:	91 1d       	adc	r25, r1
    140a:	a1 1d       	adc	r26, r1
    140c:	20 d0       	rcall	.+64     	; 0x144e <__ultoa_invert+0x84>
    140e:	09 f4       	brne	.+2      	; 0x1412 <__ultoa_invert+0x48>
    1410:	68 94       	set
    1412:	3f 91       	pop	r19
    1414:	2a e0       	ldi	r18, 0x0A	; 10
    1416:	26 9f       	mul	r18, r22
    1418:	11 24       	eor	r1, r1
    141a:	30 19       	sub	r19, r0
    141c:	30 5d       	subi	r19, 0xD0	; 208
    141e:	31 93       	st	Z+, r19
    1420:	de f6       	brtc	.-74     	; 0x13d8 <__ultoa_invert+0xe>
    1422:	cf 01       	movw	r24, r30
    1424:	08 95       	ret
    1426:	46 2f       	mov	r20, r22
    1428:	47 70       	andi	r20, 0x07	; 7
    142a:	40 5d       	subi	r20, 0xD0	; 208
    142c:	41 93       	st	Z+, r20
    142e:	b3 e0       	ldi	r27, 0x03	; 3
    1430:	0f d0       	rcall	.+30     	; 0x1450 <__ultoa_invert+0x86>
    1432:	c9 f7       	brne	.-14     	; 0x1426 <__ultoa_invert+0x5c>
    1434:	f6 cf       	rjmp	.-20     	; 0x1422 <__ultoa_invert+0x58>
    1436:	46 2f       	mov	r20, r22
    1438:	4f 70       	andi	r20, 0x0F	; 15
    143a:	40 5d       	subi	r20, 0xD0	; 208
    143c:	4a 33       	cpi	r20, 0x3A	; 58
    143e:	18 f0       	brcs	.+6      	; 0x1446 <__ultoa_invert+0x7c>
    1440:	49 5d       	subi	r20, 0xD9	; 217
    1442:	31 fd       	sbrc	r19, 1
    1444:	40 52       	subi	r20, 0x20	; 32
    1446:	41 93       	st	Z+, r20
    1448:	02 d0       	rcall	.+4      	; 0x144e <__ultoa_invert+0x84>
    144a:	a9 f7       	brne	.-22     	; 0x1436 <__ultoa_invert+0x6c>
    144c:	ea cf       	rjmp	.-44     	; 0x1422 <__ultoa_invert+0x58>
    144e:	b4 e0       	ldi	r27, 0x04	; 4
    1450:	a6 95       	lsr	r26
    1452:	97 95       	ror	r25
    1454:	87 95       	ror	r24
    1456:	77 95       	ror	r23
    1458:	67 95       	ror	r22
    145a:	ba 95       	dec	r27
    145c:	c9 f7       	brne	.-14     	; 0x1450 <__ultoa_invert+0x86>
    145e:	00 97       	sbiw	r24, 0x00	; 0
    1460:	61 05       	cpc	r22, r1
    1462:	71 05       	cpc	r23, r1
    1464:	08 95       	ret
    1466:	9b 01       	movw	r18, r22
    1468:	ac 01       	movw	r20, r24
    146a:	0a 2e       	mov	r0, r26
    146c:	06 94       	lsr	r0
    146e:	57 95       	ror	r21
    1470:	47 95       	ror	r20
    1472:	37 95       	ror	r19
    1474:	27 95       	ror	r18
    1476:	ba 95       	dec	r27
    1478:	c9 f7       	brne	.-14     	; 0x146c <__ultoa_invert+0xa2>
    147a:	62 0f       	add	r22, r18
    147c:	73 1f       	adc	r23, r19
    147e:	84 1f       	adc	r24, r20
    1480:	95 1f       	adc	r25, r21
    1482:	a0 1d       	adc	r26, r0
    1484:	08 95       	ret

00001486 <__prologue_saves__>:
    1486:	2f 92       	push	r2
    1488:	3f 92       	push	r3
    148a:	4f 92       	push	r4
    148c:	5f 92       	push	r5
    148e:	6f 92       	push	r6
    1490:	7f 92       	push	r7
    1492:	8f 92       	push	r8
    1494:	9f 92       	push	r9
    1496:	af 92       	push	r10
    1498:	bf 92       	push	r11
    149a:	cf 92       	push	r12
    149c:	df 92       	push	r13
    149e:	ef 92       	push	r14
    14a0:	ff 92       	push	r15
    14a2:	0f 93       	push	r16
    14a4:	1f 93       	push	r17
    14a6:	cf 93       	push	r28
    14a8:	df 93       	push	r29
    14aa:	cd b7       	in	r28, 0x3d	; 61
    14ac:	de b7       	in	r29, 0x3e	; 62
    14ae:	ca 1b       	sub	r28, r26
    14b0:	db 0b       	sbc	r29, r27
    14b2:	0f b6       	in	r0, 0x3f	; 63
    14b4:	f8 94       	cli
    14b6:	de bf       	out	0x3e, r29	; 62
    14b8:	0f be       	out	0x3f, r0	; 63
    14ba:	cd bf       	out	0x3d, r28	; 61
    14bc:	09 94       	ijmp

000014be <__epilogue_restores__>:
    14be:	2a 88       	ldd	r2, Y+18	; 0x12
    14c0:	39 88       	ldd	r3, Y+17	; 0x11
    14c2:	48 88       	ldd	r4, Y+16	; 0x10
    14c4:	5f 84       	ldd	r5, Y+15	; 0x0f
    14c6:	6e 84       	ldd	r6, Y+14	; 0x0e
    14c8:	7d 84       	ldd	r7, Y+13	; 0x0d
    14ca:	8c 84       	ldd	r8, Y+12	; 0x0c
    14cc:	9b 84       	ldd	r9, Y+11	; 0x0b
    14ce:	aa 84       	ldd	r10, Y+10	; 0x0a
    14d0:	b9 84       	ldd	r11, Y+9	; 0x09
    14d2:	c8 84       	ldd	r12, Y+8	; 0x08
    14d4:	df 80       	ldd	r13, Y+7	; 0x07
    14d6:	ee 80       	ldd	r14, Y+6	; 0x06
    14d8:	fd 80       	ldd	r15, Y+5	; 0x05
    14da:	0c 81       	ldd	r16, Y+4	; 0x04
    14dc:	1b 81       	ldd	r17, Y+3	; 0x03
    14de:	aa 81       	ldd	r26, Y+2	; 0x02
    14e0:	b9 81       	ldd	r27, Y+1	; 0x01
    14e2:	ce 0f       	add	r28, r30
    14e4:	d1 1d       	adc	r29, r1
    14e6:	0f b6       	in	r0, 0x3f	; 63
    14e8:	f8 94       	cli
    14ea:	de bf       	out	0x3e, r29	; 62
    14ec:	0f be       	out	0x3f, r0	; 63
    14ee:	cd bf       	out	0x3d, r28	; 61
    14f0:	ed 01       	movw	r28, r26
    14f2:	08 95       	ret

000014f4 <_exit>:
    14f4:	f8 94       	cli

000014f6 <__stop_program>:
    14f6:	ff cf       	rjmp	.-2      	; 0x14f6 <__stop_program>
