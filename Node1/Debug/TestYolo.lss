
TestYolo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011a  00800100  00001f08  00001f9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f08  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c6  0080021a  0080021a  000020b6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000020b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000020e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000340  00000000  00000000  00002124  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003d9b  00000000  00000000  00002464  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000016dc  00000000  00000000  000061ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001bc7  00000000  00000000  000078db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000878  00000000  00000000  000094a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d52  00000000  00000000  00009d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000020ae  00000000  00000000  0000aa6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b0  00000000  00000000  0000cb1c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cb 01 	jmp	0x396	; 0x396 <__ctors_end>
       4:	0c 94 3c 02 	jmp	0x478	; 0x478 <__vector_1>
       8:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
       c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      10:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      14:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      18:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      1c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      20:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      24:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      28:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      2c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      30:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      34:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      38:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      3c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      40:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      44:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      48:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      4c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      50:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      54:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      58:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      5c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      60:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      64:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      68:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      6c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      70:	08 4a       	sbci	r16, 0xA8	; 168
      72:	d7 3b       	cpi	r29, 0xB7	; 183
      74:	3b ce       	rjmp	.-906    	; 0xfffffcec <__eeprom_end+0xff7efcec>
      76:	01 6e       	ori	r16, 0xE1	; 225
      78:	84 bc       	out	0x24, r8	; 36
      7a:	bf fd       	.word	0xfdbf	; ????
      7c:	c1 2f       	mov	r28, r17
      7e:	3d 6c       	ori	r19, 0xCD	; 205
      80:	74 31       	cpi	r23, 0x14	; 20
      82:	9a bd       	out	0x2a, r25	; 42
      84:	56 83       	std	Z+6, r21	; 0x06
      86:	3d da       	rcall	.-2950   	; 0xfffff502 <__eeprom_end+0xff7ef502>
      88:	3d 00       	.word	0x003d	; ????
      8a:	c7 7f       	andi	r28, 0xF7	; 247
      8c:	11 be       	out	0x31, r1	; 49
      8e:	d9 e4       	ldi	r29, 0x49	; 73
      90:	bb 4c       	sbci	r27, 0xCB	; 203
      92:	3e 91       	ld	r19, -X
      94:	6b aa       	std	Y+51, r6	; 0x33
      96:	aa be       	out	0x3a, r10	; 58
      98:	00 00       	nop
      9a:	00 80       	ld	r0, Z
      9c:	3f 00       	.word	0x003f	; ????

0000009e <__trampolines_end>:
	...
      a6:	00 06       	cpc	r0, r16
      a8:	5f 5f       	subi	r21, 0xFF	; 255
      aa:	06 00       	.word	0x0006	; ????
      ac:	00 00       	nop
      ae:	00 07       	cpc	r16, r16
      b0:	07 00       	.word	0x0007	; ????
      b2:	07 07       	cpc	r16, r23
      b4:	00 00       	nop
      b6:	14 7f       	andi	r17, 0xF4	; 244
      b8:	7f 14       	cp	r7, r15
      ba:	7f 7f       	andi	r23, 0xFF	; 255
      bc:	14 00       	.word	0x0014	; ????
      be:	24 2e       	mov	r2, r20
      c0:	6b 6b       	ori	r22, 0xBB	; 187
      c2:	3a 12       	cpse	r3, r26
      c4:	00 00       	nop
      c6:	46 66       	ori	r20, 0x66	; 102
      c8:	30 18       	sub	r3, r0
      ca:	0c 66       	ori	r16, 0x6C	; 108
      cc:	62 00       	.word	0x0062	; ????
      ce:	30 7a       	andi	r19, 0xA0	; 160
      d0:	4f 5d       	subi	r20, 0xDF	; 223
      d2:	37 7a       	andi	r19, 0xA7	; 167
      d4:	48 00       	.word	0x0048	; ????
      d6:	04 07       	cpc	r16, r20
      d8:	03 00       	.word	0x0003	; ????
      da:	00 00       	nop
      dc:	00 00       	nop
      de:	00 1c       	adc	r0, r0
      e0:	3e 63       	ori	r19, 0x3E	; 62
      e2:	41 00       	.word	0x0041	; ????
      e4:	00 00       	nop
      e6:	00 41       	sbci	r16, 0x10	; 16
      e8:	63 3e       	cpi	r22, 0xE3	; 227
      ea:	1c 00       	.word	0x001c	; ????
      ec:	00 00       	nop
      ee:	08 2a       	or	r0, r24
      f0:	3e 1c       	adc	r3, r14
      f2:	1c 3e       	cpi	r17, 0xEC	; 236
      f4:	2a 08       	sbc	r2, r10
      f6:	08 08       	sbc	r0, r8
      f8:	3e 3e       	cpi	r19, 0xEE	; 238
      fa:	08 08       	sbc	r0, r8
      fc:	00 00       	nop
      fe:	00 a0       	ldd	r0, Z+32	; 0x20
     100:	e0 60       	ori	r30, 0x00	; 0
     102:	00 00       	nop
     104:	00 00       	nop
     106:	08 08       	sbc	r0, r8
     108:	08 08       	sbc	r0, r8
     10a:	08 08       	sbc	r0, r8
     10c:	00 00       	nop
     10e:	00 00       	nop
     110:	60 60       	ori	r22, 0x00	; 0
     112:	00 00       	nop
     114:	00 00       	nop
     116:	60 30       	cpi	r22, 0x00	; 0
     118:	18 0c       	add	r1, r8
     11a:	06 03       	mulsu	r16, r22
     11c:	01 00       	.word	0x0001	; ????
     11e:	3e 7f       	andi	r19, 0xFE	; 254
     120:	59 4d       	sbci	r21, 0xD9	; 217
     122:	7f 3e       	cpi	r23, 0xEF	; 239
     124:	00 00       	nop
     126:	42 42       	sbci	r20, 0x22	; 34
     128:	7f 7f       	andi	r23, 0xFF	; 255
     12a:	40 40       	sbci	r20, 0x00	; 0
     12c:	00 00       	nop
     12e:	62 73       	andi	r22, 0x32	; 50
     130:	59 49       	sbci	r21, 0x99	; 153
     132:	6f 66       	ori	r22, 0x6F	; 111
     134:	00 00       	nop
     136:	22 63       	ori	r18, 0x32	; 50
     138:	49 49       	sbci	r20, 0x99	; 153
     13a:	7f 36       	cpi	r23, 0x6F	; 111
     13c:	00 00       	nop
     13e:	18 1c       	adc	r1, r8
     140:	16 13       	cpse	r17, r22
     142:	7f 7f       	andi	r23, 0xFF	; 255
     144:	10 00       	.word	0x0010	; ????
     146:	27 67       	ori	r18, 0x77	; 119
     148:	45 45       	sbci	r20, 0x55	; 85
     14a:	7d 39       	cpi	r23, 0x9D	; 157
     14c:	00 00       	nop
     14e:	3c 7e       	andi	r19, 0xEC	; 236
     150:	4b 49       	sbci	r20, 0x9B	; 155
     152:	79 30       	cpi	r23, 0x09	; 9
     154:	00 00       	nop
     156:	03 63       	ori	r16, 0x33	; 51
     158:	71 19       	sub	r23, r1
     15a:	0f 07       	cpc	r16, r31
     15c:	00 00       	nop
     15e:	36 7f       	andi	r19, 0xF6	; 246
     160:	49 49       	sbci	r20, 0x99	; 153
     162:	7f 36       	cpi	r23, 0x6F	; 111
     164:	00 00       	nop
     166:	06 4f       	sbci	r16, 0xF6	; 246
     168:	49 69       	ori	r20, 0x99	; 153
     16a:	3f 1e       	adc	r3, r31
     16c:	00 00       	nop
     16e:	00 00       	nop
     170:	6c 6c       	ori	r22, 0xCC	; 204
     172:	00 00       	nop
     174:	00 00       	nop
     176:	00 a0       	ldd	r0, Z+32	; 0x20
     178:	ec 6c       	ori	r30, 0xCC	; 204
     17a:	00 00       	nop
     17c:	00 00       	nop
     17e:	08 1c       	adc	r0, r8
     180:	36 63       	ori	r19, 0x36	; 54
     182:	41 00       	.word	0x0041	; ????
     184:	00 00       	nop
     186:	14 14       	cp	r1, r4
     188:	14 14       	cp	r1, r4
     18a:	14 14       	cp	r1, r4
     18c:	00 00       	nop
     18e:	00 41       	sbci	r16, 0x10	; 16
     190:	63 36       	cpi	r22, 0x63	; 99
     192:	1c 08       	sbc	r1, r12
     194:	00 00       	nop
     196:	02 03       	mulsu	r16, r18
     198:	51 59       	subi	r21, 0x91	; 145
     19a:	0f 06       	cpc	r0, r31
     19c:	00 00       	nop
     19e:	3e 7f       	andi	r19, 0xFE	; 254
     1a0:	41 5d       	subi	r20, 0xD1	; 209
     1a2:	5d 1f       	adc	r21, r29
     1a4:	1e 00       	.word	0x001e	; ????
     1a6:	7c 7e       	andi	r23, 0xEC	; 236
     1a8:	13 13       	cpse	r17, r19
     1aa:	7e 7c       	andi	r23, 0xCE	; 206
     1ac:	00 00       	nop
     1ae:	41 7f       	andi	r20, 0xF1	; 241
     1b0:	7f 49       	sbci	r23, 0x9F	; 159
     1b2:	49 7f       	andi	r20, 0xF9	; 249
     1b4:	36 00       	.word	0x0036	; ????
     1b6:	1c 3e       	cpi	r17, 0xEC	; 236
     1b8:	63 41       	sbci	r22, 0x13	; 19
     1ba:	41 63       	ori	r20, 0x31	; 49
     1bc:	22 00       	.word	0x0022	; ????
     1be:	41 7f       	andi	r20, 0xF1	; 241
     1c0:	7f 41       	sbci	r23, 0x1F	; 31
     1c2:	63 7f       	andi	r22, 0xF3	; 243
     1c4:	1c 00       	.word	0x001c	; ????
     1c6:	41 7f       	andi	r20, 0xF1	; 241
     1c8:	7f 49       	sbci	r23, 0x9F	; 159
     1ca:	5d 41       	sbci	r21, 0x1D	; 29
     1cc:	63 00       	.word	0x0063	; ????
     1ce:	41 7f       	andi	r20, 0xF1	; 241
     1d0:	7f 49       	sbci	r23, 0x9F	; 159
     1d2:	1d 01       	movw	r2, r26
     1d4:	03 00       	.word	0x0003	; ????
     1d6:	1c 3e       	cpi	r17, 0xEC	; 236
     1d8:	63 41       	sbci	r22, 0x13	; 19
     1da:	51 73       	andi	r21, 0x31	; 49
     1dc:	72 00       	.word	0x0072	; ????
     1de:	7f 7f       	andi	r23, 0xFF	; 255
     1e0:	08 08       	sbc	r0, r8
     1e2:	7f 7f       	andi	r23, 0xFF	; 255
     1e4:	00 00       	nop
     1e6:	00 41       	sbci	r16, 0x10	; 16
     1e8:	7f 7f       	andi	r23, 0xFF	; 255
     1ea:	41 00       	.word	0x0041	; ????
     1ec:	00 00       	nop
     1ee:	30 70       	andi	r19, 0x00	; 0
     1f0:	40 41       	sbci	r20, 0x10	; 16
     1f2:	7f 3f       	cpi	r23, 0xFF	; 255
     1f4:	01 00       	.word	0x0001	; ????
     1f6:	41 7f       	andi	r20, 0xF1	; 241
     1f8:	7f 08       	sbc	r7, r15
     1fa:	1c 77       	andi	r17, 0x7C	; 124
     1fc:	63 00       	.word	0x0063	; ????
     1fe:	41 7f       	andi	r20, 0xF1	; 241
     200:	7f 41       	sbci	r23, 0x1F	; 31
     202:	40 60       	ori	r20, 0x00	; 0
     204:	70 00       	.word	0x0070	; ????
     206:	7f 7f       	andi	r23, 0xFF	; 255
     208:	06 0c       	add	r0, r6
     20a:	06 7f       	andi	r16, 0xF6	; 246
     20c:	7f 00       	.word	0x007f	; ????
     20e:	7f 7f       	andi	r23, 0xFF	; 255
     210:	06 0c       	add	r0, r6
     212:	18 7f       	andi	r17, 0xF8	; 248
     214:	7f 00       	.word	0x007f	; ????
     216:	1c 3e       	cpi	r17, 0xEC	; 236
     218:	63 41       	sbci	r22, 0x13	; 19
     21a:	63 3e       	cpi	r22, 0xE3	; 227
     21c:	1c 00       	.word	0x001c	; ????
     21e:	41 7f       	andi	r20, 0xF1	; 241
     220:	7f 49       	sbci	r23, 0x9F	; 159
     222:	09 0f       	add	r16, r25
     224:	06 00       	.word	0x0006	; ????
     226:	1e 3f       	cpi	r17, 0xFE	; 254
     228:	21 71       	andi	r18, 0x11	; 17
     22a:	7f 5e       	subi	r23, 0xEF	; 239
     22c:	00 00       	nop
     22e:	41 7f       	andi	r20, 0xF1	; 241
     230:	7f 19       	sub	r23, r15
     232:	39 6f       	ori	r19, 0xF9	; 249
     234:	46 00       	.word	0x0046	; ????
     236:	26 67       	ori	r18, 0x76	; 118
     238:	4d 59       	subi	r20, 0x9D	; 157
     23a:	7b 32       	cpi	r23, 0x2B	; 43
     23c:	00 00       	nop
     23e:	03 41       	sbci	r16, 0x13	; 19
     240:	7f 7f       	andi	r23, 0xFF	; 255
     242:	41 03       	mulsu	r20, r17
     244:	00 00       	nop
     246:	7f 7f       	andi	r23, 0xFF	; 255
     248:	40 40       	sbci	r20, 0x00	; 0
     24a:	7f 7f       	andi	r23, 0xFF	; 255
     24c:	00 00       	nop
     24e:	1f 3f       	cpi	r17, 0xFF	; 255
     250:	60 60       	ori	r22, 0x00	; 0
     252:	3f 1f       	adc	r19, r31
     254:	00 00       	nop
     256:	7f 7f       	andi	r23, 0xFF	; 255
     258:	30 18       	sub	r3, r0
     25a:	30 7f       	andi	r19, 0xF0	; 240
     25c:	7f 00       	.word	0x007f	; ????
     25e:	63 77       	andi	r22, 0x73	; 115
     260:	1c 08       	sbc	r1, r12
     262:	1c 77       	andi	r17, 0x7C	; 124
     264:	63 00       	.word	0x0063	; ????
     266:	07 4f       	sbci	r16, 0xF7	; 247
     268:	78 78       	andi	r23, 0x88	; 136
     26a:	4f 07       	cpc	r20, r31
     26c:	00 00       	nop
     26e:	67 73       	andi	r22, 0x37	; 55
     270:	59 4d       	sbci	r21, 0xD9	; 217
     272:	47 63       	ori	r20, 0x37	; 55
     274:	71 00       	.word	0x0071	; ????
     276:	00 7f       	andi	r16, 0xF0	; 240
     278:	7f 41       	sbci	r23, 0x1F	; 31
     27a:	41 00       	.word	0x0041	; ????
     27c:	00 00       	nop
     27e:	01 03       	mulsu	r16, r17
     280:	06 0c       	add	r0, r6
     282:	18 30       	cpi	r17, 0x08	; 8
     284:	60 00       	.word	0x0060	; ????
     286:	00 41       	sbci	r16, 0x10	; 16
     288:	41 7f       	andi	r20, 0xF1	; 241
     28a:	7f 00       	.word	0x007f	; ????
     28c:	00 00       	nop
     28e:	08 0c       	add	r0, r8
     290:	06 03       	mulsu	r16, r22
     292:	06 0c       	add	r0, r6
     294:	08 00       	.word	0x0008	; ????
     296:	80 80       	ld	r8, Z
     298:	80 80       	ld	r8, Z
     29a:	80 80       	ld	r8, Z
     29c:	80 80       	ld	r8, Z
     29e:	00 00       	nop
     2a0:	03 07       	cpc	r16, r19
     2a2:	04 00       	.word	0x0004	; ????
     2a4:	00 00       	nop
     2a6:	20 74       	andi	r18, 0x40	; 64
     2a8:	54 54       	subi	r21, 0x44	; 68
     2aa:	3c 78       	andi	r19, 0x8C	; 140
     2ac:	40 00       	.word	0x0040	; ????
     2ae:	41 3f       	cpi	r20, 0xF1	; 241
     2b0:	7f 44       	sbci	r23, 0x4F	; 79
     2b2:	44 7c       	andi	r20, 0xC4	; 196
     2b4:	38 00       	.word	0x0038	; ????
     2b6:	38 7c       	andi	r19, 0xC8	; 200
     2b8:	44 44       	sbci	r20, 0x44	; 68
     2ba:	6c 28       	or	r6, r12
     2bc:	00 00       	nop
     2be:	30 78       	andi	r19, 0x80	; 128
     2c0:	48 49       	sbci	r20, 0x98	; 152
     2c2:	3f 7f       	andi	r19, 0xFF	; 255
     2c4:	40 00       	.word	0x0040	; ????
     2c6:	38 7c       	andi	r19, 0xC8	; 200
     2c8:	54 54       	subi	r21, 0x44	; 68
     2ca:	5c 18       	sub	r5, r12
     2cc:	00 00       	nop
     2ce:	48 7e       	andi	r20, 0xE8	; 232
     2d0:	7f 49       	sbci	r23, 0x9F	; 159
     2d2:	03 02       	muls	r16, r19
     2d4:	00 00       	nop
     2d6:	98 bc       	out	0x28, r9	; 40
     2d8:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2da:	f8 7c       	andi	r31, 0xC8	; 200
     2dc:	04 00       	.word	0x0004	; ????
     2de:	41 7f       	andi	r20, 0xF1	; 241
     2e0:	7f 08       	sbc	r7, r15
     2e2:	04 7c       	andi	r16, 0xC4	; 196
     2e4:	78 00       	.word	0x0078	; ????
     2e6:	00 44       	sbci	r16, 0x40	; 64
     2e8:	7d 7d       	andi	r23, 0xDD	; 221
     2ea:	40 00       	.word	0x0040	; ????
     2ec:	00 00       	nop
     2ee:	40 c4       	rjmp	.+2176   	; 0xb70 <go_down+0x12>
     2f0:	84 fd       	sbrc	r24, 4
     2f2:	7d 00       	.word	0x007d	; ????
     2f4:	00 00       	nop
     2f6:	41 7f       	andi	r20, 0xF1	; 241
     2f8:	7f 10       	cpse	r7, r15
     2fa:	38 6c       	ori	r19, 0xC8	; 200
     2fc:	44 00       	.word	0x0044	; ????
     2fe:	00 41       	sbci	r16, 0x10	; 16
     300:	7f 7f       	andi	r23, 0xFF	; 255
     302:	40 00       	.word	0x0040	; ????
     304:	00 00       	nop
     306:	7c 7c       	andi	r23, 0xCC	; 204
     308:	0c 18       	sub	r0, r12
     30a:	0c 7c       	andi	r16, 0xCC	; 204
     30c:	78 00       	.word	0x0078	; ????
     30e:	7c 7c       	andi	r23, 0xCC	; 204
     310:	04 04       	cpc	r0, r4
     312:	7c 78       	andi	r23, 0x8C	; 140
     314:	00 00       	nop
     316:	38 7c       	andi	r19, 0xC8	; 200
     318:	44 44       	sbci	r20, 0x44	; 68
     31a:	7c 38       	cpi	r23, 0x8C	; 140
     31c:	00 00       	nop
     31e:	84 fc       	sbrc	r8, 4
     320:	f8 a4       	ldd	r15, Y+40	; 0x28
     322:	24 3c       	cpi	r18, 0xC4	; 196
     324:	18 00       	.word	0x0018	; ????
     326:	18 3c       	cpi	r17, 0xC8	; 200
     328:	24 a4       	ldd	r2, Z+44	; 0x2c
     32a:	f8 fc       	.word	0xfcf8	; ????
     32c:	84 00       	.word	0x0084	; ????
     32e:	44 7c       	andi	r20, 0xC4	; 196
     330:	78 44       	sbci	r23, 0x48	; 72
     332:	1c 18       	sub	r1, r12
     334:	00 00       	nop
     336:	48 5c       	subi	r20, 0xC8	; 200
     338:	54 54       	subi	r21, 0x44	; 68
     33a:	74 24       	eor	r7, r4
     33c:	00 00       	nop
     33e:	00 04       	cpc	r0, r0
     340:	3e 7f       	andi	r19, 0xFE	; 254
     342:	44 24       	eor	r4, r4
     344:	00 00       	nop
     346:	3c 7c       	andi	r19, 0xCC	; 204
     348:	40 40       	sbci	r20, 0x00	; 0
     34a:	3c 7c       	andi	r19, 0xCC	; 204
     34c:	40 00       	.word	0x0040	; ????
     34e:	1c 3c       	cpi	r17, 0xCC	; 204
     350:	60 60       	ori	r22, 0x00	; 0
     352:	3c 1c       	adc	r3, r12
     354:	00 00       	nop
     356:	3c 7c       	andi	r19, 0xCC	; 204
     358:	60 30       	cpi	r22, 0x00	; 0
     35a:	60 7c       	andi	r22, 0xC0	; 192
     35c:	3c 00       	.word	0x003c	; ????
     35e:	44 6c       	ori	r20, 0xC4	; 196
     360:	38 10       	cpse	r3, r8
     362:	38 6c       	ori	r19, 0xC8	; 200
     364:	44 00       	.word	0x0044	; ????
     366:	9c bc       	out	0x2c, r9	; 44
     368:	a0 a0       	ldd	r10, Z+32	; 0x20
     36a:	fc 7c       	andi	r31, 0xCC	; 204
     36c:	00 00       	nop
     36e:	4c 64       	ori	r20, 0x4C	; 76
     370:	74 5c       	subi	r23, 0xC4	; 196
     372:	4c 64       	ori	r20, 0x4C	; 76
     374:	00 00       	nop
     376:	08 08       	sbc	r0, r8
     378:	3e 77       	andi	r19, 0x7E	; 126
     37a:	41 41       	sbci	r20, 0x11	; 17
     37c:	00 00       	nop
     37e:	00 00       	nop
     380:	00 77       	andi	r16, 0x70	; 112
     382:	77 00       	.word	0x0077	; ????
     384:	00 00       	nop
     386:	41 41       	sbci	r20, 0x11	; 17
     388:	77 3e       	cpi	r23, 0xE7	; 231
     38a:	08 08       	sbc	r0, r8
     38c:	00 00       	nop
     38e:	02 03       	mulsu	r16, r18
     390:	01 03       	mulsu	r16, r17
     392:	02 03       	mulsu	r16, r18
     394:	01 00       	.word	0x0001	; ????

00000396 <__ctors_end>:
     396:	11 24       	eor	r1, r1
     398:	1f be       	out	0x3f, r1	; 63
     39a:	cf ef       	ldi	r28, 0xFF	; 255
     39c:	d4 e0       	ldi	r29, 0x04	; 4
     39e:	de bf       	out	0x3e, r29	; 62
     3a0:	cd bf       	out	0x3d, r28	; 61

000003a2 <__do_copy_data>:
     3a2:	12 e0       	ldi	r17, 0x02	; 2
     3a4:	a0 e0       	ldi	r26, 0x00	; 0
     3a6:	b1 e0       	ldi	r27, 0x01	; 1
     3a8:	e8 e0       	ldi	r30, 0x08	; 8
     3aa:	ff e1       	ldi	r31, 0x1F	; 31
     3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <__do_copy_data+0x10>
     3ae:	05 90       	lpm	r0, Z+
     3b0:	0d 92       	st	X+, r0
     3b2:	aa 31       	cpi	r26, 0x1A	; 26
     3b4:	b1 07       	cpc	r27, r17
     3b6:	d9 f7       	brne	.-10     	; 0x3ae <__do_copy_data+0xc>

000003b8 <__do_clear_bss>:
     3b8:	22 e0       	ldi	r18, 0x02	; 2
     3ba:	aa e1       	ldi	r26, 0x1A	; 26
     3bc:	b2 e0       	ldi	r27, 0x02	; 2
     3be:	01 c0       	rjmp	.+2      	; 0x3c2 <.do_clear_bss_start>

000003c0 <.do_clear_bss_loop>:
     3c0:	1d 92       	st	X+, r1

000003c2 <.do_clear_bss_start>:
     3c2:	a0 3e       	cpi	r26, 0xE0	; 224
     3c4:	b2 07       	cpc	r27, r18
     3c6:	e1 f7       	brne	.-8      	; 0x3c0 <.do_clear_bss_loop>
     3c8:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <main>
     3cc:	0c 94 82 0f 	jmp	0x1f04	; 0x1f04 <_exit>

000003d0 <__bad_interrupt>:
     3d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003d4 <ADC_read>:
    uint8_t retreived_value = ext_ram1[adrs];
    if (retreived_value != 0b01010101) {
        printf("ADC error, ext_ram1[%4d] = %02X  \n\r", adrs, retreived_value);
    }
    else{
        printf("ADC success, ext_ram1[%4d] = %02X  \n\r", adrs, retreived_value);
     3d4:	80 68       	ori	r24, 0x80	; 128
     3d6:	e1 e0       	ldi	r30, 0x01	; 1
     3d8:	f4 e1       	ldi	r31, 0x14	; 20
     3da:	80 83       	st	Z, r24
     3dc:	86 ef       	ldi	r24, 0xF6	; 246
     3de:	8a 95       	dec	r24
     3e0:	f1 f7       	brne	.-4      	; 0x3de <ADC_read+0xa>
     3e2:	80 81       	ld	r24, Z
     3e4:	08 95       	ret

000003e6 <ADC_calibrate>:
     3e6:	e1 e0       	ldi	r30, 0x01	; 1
     3e8:	f4 e1       	ldi	r31, 0x14	; 20
     3ea:	20 e8       	ldi	r18, 0x80	; 128
     3ec:	20 83       	st	Z, r18
     3ee:	26 ef       	ldi	r18, 0xF6	; 246
     3f0:	2a 95       	dec	r18
     3f2:	f1 f7       	brne	.-4      	; 0x3f0 <ADC_calibrate+0xa>
     3f4:	20 81       	ld	r18, Z
     3f6:	30 e0       	ldi	r19, 0x00	; 0
     3f8:	dc 01       	movw	r26, r24
     3fa:	2d 93       	st	X+, r18
     3fc:	3c 93       	st	X, r19
     3fe:	21 e8       	ldi	r18, 0x81	; 129
     400:	20 83       	st	Z, r18
     402:	b6 ef       	ldi	r27, 0xF6	; 246
     404:	ba 95       	dec	r27
     406:	f1 f7       	brne	.-4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     408:	20 81       	ld	r18, Z
     40a:	30 e0       	ldi	r19, 0x00	; 0
     40c:	fc 01       	movw	r30, r24
     40e:	33 83       	std	Z+3, r19	; 0x03
     410:	22 83       	std	Z+2, r18	; 0x02
     412:	08 95       	ret

00000414 <ADC_timer_init>:
}


void ADC_timer_init(void) {

    DDRB|=(1<<PB0);  /*set OC0 pin as output*/
     414:	b8 9a       	sbi	0x17, 0	; 23

    TCCR0 |= (1<<WGM01) | (0<<WGM00);
     416:	83 b7       	in	r24, 0x33	; 51
     418:	88 60       	ori	r24, 0x08	; 8
     41a:	83 bf       	out	0x33, r24	; 51
    TCCR0 |= (1<<COM00);
     41c:	83 b7       	in	r24, 0x33	; 51
     41e:	80 61       	ori	r24, 0x10	; 16
     420:	83 bf       	out	0x33, r24	; 51
    TCCR0 |= (1<<CS00);
     422:	83 b7       	in	r24, 0x33	; 51
     424:	81 60       	ori	r24, 0x01	; 1
     426:	83 bf       	out	0x33, r24	; 51

    OCR0 = 0b00000001;
     428:	81 e0       	ldi	r24, 0x01	; 1
     42a:	81 bf       	out	0x31, r24	; 49
     42c:	08 95       	ret

0000042e <CAN_init>:
    for(uint8_t i = 0; i < message.data_length; i++){
        (message.data)[i] = mcp_read(MCP_RXB0DM +i + 16);
    }
    
    return message;
}
     42e:	cf 93       	push	r28
     430:	c8 2f       	mov	r28, r24
     432:	f8 94       	cli
     434:	85 b7       	in	r24, 0x35	; 53
     436:	82 60       	ori	r24, 0x02	; 2
     438:	85 bf       	out	0x35, r24	; 53
     43a:	85 b7       	in	r24, 0x35	; 53
     43c:	8e 7f       	andi	r24, 0xFE	; 254
     43e:	85 bf       	out	0x35, r24	; 53
     440:	8b b7       	in	r24, 0x3b	; 59
     442:	80 64       	ori	r24, 0x40	; 64
     444:	8b bf       	out	0x3b, r24	; 59
     446:	78 94       	sei
     448:	80 e8       	ldi	r24, 0x80	; 128
     44a:	0e 94 77 03 	call	0x6ee	; 0x6ee <mcp_init>
     44e:	61 e0       	ldi	r22, 0x01	; 1
     450:	8b e2       	ldi	r24, 0x2B	; 43
     452:	0e 94 3e 03 	call	0x67c	; 0x67c <mcp_write>
     456:	61 e8       	ldi	r22, 0x81	; 129
     458:	8a e2       	ldi	r24, 0x2A	; 42
     45a:	0e 94 3e 03 	call	0x67c	; 0x67c <mcp_write>
     45e:	6d ea       	ldi	r22, 0xAD	; 173
     460:	89 e2       	ldi	r24, 0x29	; 41
     462:	0e 94 3e 03 	call	0x67c	; 0x67c <mcp_write>
     466:	65 e0       	ldi	r22, 0x05	; 5
     468:	88 e2       	ldi	r24, 0x28	; 40
     46a:	0e 94 3e 03 	call	0x67c	; 0x67c <mcp_write>
     46e:	8c 2f       	mov	r24, r28
     470:	0e 94 54 03 	call	0x6a8	; 0x6a8 <mcp_set_mode>
     474:	cf 91       	pop	r28
     476:	08 95       	ret

00000478 <__vector_1>:
     478:	1f 92       	push	r1
     47a:	0f 92       	push	r0
     47c:	0f b6       	in	r0, 0x3f	; 63
     47e:	0f 92       	push	r0
     480:	11 24       	eor	r1, r1
     482:	8f 93       	push	r24
     484:	9f 93       	push	r25
     486:	81 e0       	ldi	r24, 0x01	; 1
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	90 93 1b 02 	sts	0x021B, r25	; 0x80021b <__data_end+0x1>
     48e:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <__data_end>
     492:	9f 91       	pop	r25
     494:	8f 91       	pop	r24
     496:	0f 90       	pop	r0
     498:	0f be       	out	0x3f, r0	; 63
     49a:	0f 90       	pop	r0
     49c:	1f 90       	pop	r1
     49e:	18 95       	reti

000004a0 <CAN_message_transmission>:
     4a0:	0f 93       	push	r16
     4a2:	1f 93       	push	r17
     4a4:	cf 93       	push	r28
     4a6:	df 93       	push	r29
     4a8:	8c 01       	movw	r16, r24
     4aa:	fc 01       	movw	r30, r24
     4ac:	c0 81       	ld	r28, Z
     4ae:	d1 81       	ldd	r29, Z+1	; 0x01
     4b0:	6c 2f       	mov	r22, r28
     4b2:	62 95       	swap	r22
     4b4:	66 0f       	add	r22, r22
     4b6:	60 7e       	andi	r22, 0xE0	; 224
     4b8:	82 e3       	ldi	r24, 0x32	; 50
     4ba:	0e 94 3e 03 	call	0x67c	; 0x67c <mcp_write>
     4be:	be 01       	movw	r22, r28
     4c0:	76 95       	lsr	r23
     4c2:	67 95       	ror	r22
     4c4:	76 95       	lsr	r23
     4c6:	67 95       	ror	r22
     4c8:	76 95       	lsr	r23
     4ca:	67 95       	ror	r22
     4cc:	81 e3       	ldi	r24, 0x31	; 49
     4ce:	0e 94 3e 03 	call	0x67c	; 0x67c <mcp_write>
     4d2:	f8 01       	movw	r30, r16
     4d4:	62 81       	ldd	r22, Z+2	; 0x02
     4d6:	85 e3       	ldi	r24, 0x35	; 53
     4d8:	0e 94 3e 03 	call	0x67c	; 0x67c <mcp_write>
     4dc:	f8 01       	movw	r30, r16
     4de:	82 81       	ldd	r24, Z+2	; 0x02
     4e0:	88 23       	and	r24, r24
     4e2:	71 f0       	breq	.+28     	; 0x500 <__stack+0x1>
     4e4:	c0 e0       	ldi	r28, 0x00	; 0
     4e6:	f8 01       	movw	r30, r16
     4e8:	ec 0f       	add	r30, r28
     4ea:	f1 1d       	adc	r31, r1
     4ec:	63 81       	ldd	r22, Z+3	; 0x03
     4ee:	86 e3       	ldi	r24, 0x36	; 54
     4f0:	8c 0f       	add	r24, r28
     4f2:	0e 94 3e 03 	call	0x67c	; 0x67c <mcp_write>
     4f6:	cf 5f       	subi	r28, 0xFF	; 255
     4f8:	f8 01       	movw	r30, r16
     4fa:	82 81       	ldd	r24, Z+2	; 0x02
     4fc:	c8 17       	cp	r28, r24
     4fe:	98 f3       	brcs	.-26     	; 0x4e6 <CAN_message_transmission+0x46>
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	0e 94 c0 03 	call	0x780	; 0x780 <mcp_request_to_send>
     506:	df 91       	pop	r29
     508:	cf 91       	pop	r28
     50a:	1f 91       	pop	r17
     50c:	0f 91       	pop	r16
     50e:	08 95       	ret

00000510 <CAN_meessage_reception>:
     510:	9f 92       	push	r9
     512:	af 92       	push	r10
     514:	bf 92       	push	r11
     516:	cf 92       	push	r12
     518:	df 92       	push	r13
     51a:	ef 92       	push	r14
     51c:	ff 92       	push	r15
     51e:	0f 93       	push	r16
     520:	1f 93       	push	r17
     522:	cf 93       	push	r28
     524:	df 93       	push	r29
     526:	cd b7       	in	r28, 0x3d	; 61
     528:	de b7       	in	r29, 0x3e	; 62
     52a:	2b 97       	sbiw	r28, 0x0b	; 11
     52c:	0f b6       	in	r0, 0x3f	; 63
     52e:	f8 94       	cli
     530:	de bf       	out	0x3e, r29	; 62
     532:	0f be       	out	0x3f, r0	; 63
     534:	cd bf       	out	0x3d, r28	; 61
     536:	5c 01       	movw	r10, r24
     538:	81 e6       	ldi	r24, 0x61	; 97
     53a:	0e 94 59 03 	call	0x6b2	; 0x6b2 <mcp_read>
     53e:	c8 2e       	mov	r12, r24
     540:	d1 2c       	mov	r13, r1
     542:	82 e6       	ldi	r24, 0x62	; 98
     544:	0e 94 59 03 	call	0x6b2	; 0x6b2 <mcp_read>
     548:	dc 2c       	mov	r13, r12
     54a:	cc 24       	eor	r12, r12
     54c:	80 7e       	andi	r24, 0xE0	; 224
     54e:	c8 0e       	add	r12, r24
     550:	d1 1c       	adc	r13, r1
     552:	85 e6       	ldi	r24, 0x65	; 101
     554:	0e 94 59 03 	call	0x6b2	; 0x6b2 <mcp_read>
     558:	8f 70       	andi	r24, 0x0F	; 15
     55a:	98 2e       	mov	r9, r24
     55c:	81 f0       	breq	.+32     	; 0x57e <CAN_meessage_reception+0x6e>
     55e:	7e 01       	movw	r14, r28
     560:	84 e0       	ldi	r24, 0x04	; 4
     562:	e8 0e       	add	r14, r24
     564:	f1 1c       	adc	r15, r1
     566:	06 e6       	ldi	r16, 0x66	; 102
     568:	09 0d       	add	r16, r9
     56a:	16 e6       	ldi	r17, 0x66	; 102
     56c:	81 2f       	mov	r24, r17
     56e:	0e 94 59 03 	call	0x6b2	; 0x6b2 <mcp_read>
     572:	f7 01       	movw	r30, r14
     574:	81 93       	st	Z+, r24
     576:	7f 01       	movw	r14, r30
     578:	1f 5f       	subi	r17, 0xFF	; 255
     57a:	10 13       	cpse	r17, r16
     57c:	f7 cf       	rjmp	.-18     	; 0x56c <CAN_meessage_reception+0x5c>
     57e:	da 82       	std	Y+2, r13	; 0x02
     580:	c9 82       	std	Y+1, r12	; 0x01
     582:	9b 82       	std	Y+3, r9	; 0x03
     584:	8b e0       	ldi	r24, 0x0B	; 11
     586:	fe 01       	movw	r30, r28
     588:	31 96       	adiw	r30, 0x01	; 1
     58a:	d5 01       	movw	r26, r10
     58c:	01 90       	ld	r0, Z+
     58e:	0d 92       	st	X+, r0
     590:	8a 95       	dec	r24
     592:	e1 f7       	brne	.-8      	; 0x58c <CAN_meessage_reception+0x7c>
     594:	c5 01       	movw	r24, r10
     596:	2b 96       	adiw	r28, 0x0b	; 11
     598:	0f b6       	in	r0, 0x3f	; 63
     59a:	f8 94       	cli
     59c:	de bf       	out	0x3e, r29	; 62
     59e:	0f be       	out	0x3f, r0	; 63
     5a0:	cd bf       	out	0x3d, r28	; 61
     5a2:	df 91       	pop	r29
     5a4:	cf 91       	pop	r28
     5a6:	1f 91       	pop	r17
     5a8:	0f 91       	pop	r16
     5aa:	ff 90       	pop	r15
     5ac:	ef 90       	pop	r14
     5ae:	df 90       	pop	r13
     5b0:	cf 90       	pop	r12
     5b2:	bf 90       	pop	r11
     5b4:	af 90       	pop	r10
     5b6:	9f 90       	pop	r9
     5b8:	08 95       	ret

000005ba <message_handler>:

CAN_message_t message_handler(){
     5ba:	cf 93       	push	r28
     5bc:	df 93       	push	r29
     5be:	ec 01       	movw	r28, r24
    CAN_message_t message;
    
	if(flag){
     5c0:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <__data_end>
     5c4:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <__data_end+0x1>
     5c8:	89 2b       	or	r24, r25
     5ca:	61 f0       	breq	.+24     	; 0x5e4 <message_handler+0x2a>
        message = CAN_meessage_reception(); //reads buffer 2 register
     5cc:	ce 01       	movw	r24, r28
     5ce:	0e 94 88 02 	call	0x510	; 0x510 <CAN_meessage_reception>

		flag = 0;
     5d2:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <__data_end+0x1>
     5d6:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <__data_end>
        mcp_bit_modify(MCP_CANINTF, 1, 0);  // resets can interrupt flag bit for buffer 1
     5da:	40 e0       	ldi	r20, 0x00	; 0
     5dc:	61 e0       	ldi	r22, 0x01	; 1
     5de:	8c e2       	ldi	r24, 0x2C	; 44
     5e0:	0e 94 a4 03 	call	0x748	; 0x748 <mcp_bit_modify>

    }
return message;
}
     5e4:	ce 01       	movw	r24, r28
     5e6:	df 91       	pop	r29
     5e8:	cf 91       	pop	r28
     5ea:	08 95       	ret

000005ec <joyStick_Can_Message>:


#include "CAN_joystick_messages.h"


void joyStick_Can_Message(){
     5ec:	ef 92       	push	r14
     5ee:	ff 92       	push	r15
     5f0:	0f 93       	push	r16
     5f2:	1f 93       	push	r17
     5f4:	cf 93       	push	r28
     5f6:	df 93       	push	r29
     5f8:	cd b7       	in	r28, 0x3d	; 61
     5fa:	de b7       	in	r29, 0x3e	; 62
     5fc:	2b 97       	sbiw	r28, 0x0b	; 11
     5fe:	0f b6       	in	r0, 0x3f	; 63
     600:	f8 94       	cli
     602:	de bf       	out	0x3e, r29	; 62
     604:	0f be       	out	0x3f, r0	; 63
     606:	cd bf       	out	0x3d, r28	; 61
	
pos_read(&P_pos); //Reads the current position of the joystick
     608:	8c ec       	ldi	r24, 0xCC	; 204
     60a:	92 e0       	ldi	r25, 0x02	; 2
     60c:	0e 94 91 08 	call	0x1122	; 0x1122 <pos_read>

uint8_t sendSliderRight = ADC_read(2);  
     610:	82 e0       	ldi	r24, 0x02	; 2
     612:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ADC_read>
     616:	e8 2e       	mov	r14, r24
uint8_t sendPosX = 128 + P_pos.posX;  //Adding 128 to not have negative a number
     618:	ec ec       	ldi	r30, 0xCC	; 204
     61a:	f2 e0       	ldi	r31, 0x02	; 2
     61c:	80 81       	ld	r24, Z
     61e:	68 94       	set
     620:	ff 24       	eor	r15, r15
     622:	f7 f8       	bld	r15, 7
     624:	f8 0e       	add	r15, r24
uint8_t sendPosY = 128 + P_pos.posY;  //Adding 128 to not have negative a number
     626:	02 81       	ldd	r16, Z+2	; 0x02
     628:	00 58       	subi	r16, 0x80	; 128
uint8_t sendJoyButton = usb_button_pushed(JOYSTICK_BUTTON);
     62a:	82 e0       	ldi	r24, 0x02	; 2
     62c:	0e 94 49 0a 	call	0x1492	; 0x1492 <usb_button_pushed>
     630:	18 2f       	mov	r17, r24
uint8_t sendJoyDirection = (joystick_direction()) << 1; //shift right to not disturb rest of message
     632:	0e 94 83 09 	call	0x1306	; 0x1306 <joystick_direction>

uint8_t sendJoyData = sendJoyDirection + sendJoyButton;  //Combining button-bushed and joystick-direction in one byte.

CAN_message_t joyStickData;
joyStickData.identifier = 0b11111111;
     636:	2f ef       	ldi	r18, 0xFF	; 255
     638:	30 e0       	ldi	r19, 0x00	; 0
     63a:	3a 83       	std	Y+2, r19	; 0x02
     63c:	29 83       	std	Y+1, r18	; 0x01
joyStickData.data[0] = sendPosX;
     63e:	fc 82       	std	Y+4, r15	; 0x04
joyStickData.data[1] = sendPosY;
     640:	0d 83       	std	Y+5, r16	; 0x05
joyStickData.data[2] = sendJoyData;
     642:	88 0f       	add	r24, r24
     644:	18 0f       	add	r17, r24
     646:	1e 83       	std	Y+6, r17	; 0x06
joyStickData.data[3] = sendSliderRight;
     648:	ef 82       	std	Y+7, r14	; 0x07
joyStickData.data_length = 4;
     64a:	84 e0       	ldi	r24, 0x04	; 4
     64c:	8b 83       	std	Y+3, r24	; 0x03

CAN_message_transmission(&joyStickData);
     64e:	ce 01       	movw	r24, r28
     650:	01 96       	adiw	r24, 0x01	; 1
     652:	0e 94 50 02 	call	0x4a0	; 0x4a0 <CAN_message_transmission>
     656:	2b 96       	adiw	r28, 0x0b	; 11
     658:	0f b6       	in	r0, 0x3f	; 63
     65a:	f8 94       	cli
     65c:	de bf       	out	0x3e, r29	; 62
     65e:	0f be       	out	0x3f, r0	; 63
     660:	cd bf       	out	0x3d, r28	; 61
     662:	df 91       	pop	r29
     664:	cf 91       	pop	r28
     666:	1f 91       	pop	r17
     668:	0f 91       	pop	r16
     66a:	ff 90       	pop	r15
     66c:	ef 90       	pop	r14
     66e:	08 95       	ret

00000670 <spi_master_CS>:
    status_value = spi_read();

    spi_master_CS(1);

    return status_value;
}
     670:	81 11       	cpse	r24, r1
     672:	02 c0       	rjmp	.+4      	; 0x678 <spi_master_CS+0x8>
     674:	c4 98       	cbi	0x18, 4	; 24
     676:	08 95       	ret
     678:	c4 9a       	sbi	0x18, 4	; 24
     67a:	08 95       	ret

0000067c <mcp_write>:
     67c:	cf 93       	push	r28
     67e:	df 93       	push	r29
     680:	d8 2f       	mov	r29, r24
     682:	c6 2f       	mov	r28, r22
     684:	80 e0       	ldi	r24, 0x00	; 0
     686:	0e 94 38 03 	call	0x670	; 0x670 <spi_master_CS>
     68a:	82 e0       	ldi	r24, 0x02	; 2
     68c:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <spi_write>
     690:	8d 2f       	mov	r24, r29
     692:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <spi_write>
     696:	8c 2f       	mov	r24, r28
     698:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <spi_write>
     69c:	81 e0       	ldi	r24, 0x01	; 1
     69e:	0e 94 38 03 	call	0x670	; 0x670 <spi_master_CS>
     6a2:	df 91       	pop	r29
     6a4:	cf 91       	pop	r28
     6a6:	08 95       	ret

000006a8 <mcp_set_mode>:
     6a8:	68 2f       	mov	r22, r24
     6aa:	8f e0       	ldi	r24, 0x0F	; 15
     6ac:	0e 94 3e 03 	call	0x67c	; 0x67c <mcp_write>
     6b0:	08 95       	ret

000006b2 <mcp_read>:
     6b2:	cf 93       	push	r28
     6b4:	c8 2f       	mov	r28, r24
     6b6:	80 e0       	ldi	r24, 0x00	; 0
     6b8:	0e 94 38 03 	call	0x670	; 0x670 <spi_master_CS>
     6bc:	83 e0       	ldi	r24, 0x03	; 3
     6be:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <spi_write>
     6c2:	8c 2f       	mov	r24, r28
     6c4:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <spi_write>
     6c8:	0e 94 81 0a 	call	0x1502	; 0x1502 <spi_read>
     6cc:	c8 2f       	mov	r28, r24
     6ce:	81 e0       	ldi	r24, 0x01	; 1
     6d0:	0e 94 38 03 	call	0x670	; 0x670 <spi_master_CS>
     6d4:	8c 2f       	mov	r24, r28
     6d6:	cf 91       	pop	r28
     6d8:	08 95       	ret

000006da <mcp_reset>:
     6da:	80 e0       	ldi	r24, 0x00	; 0
     6dc:	0e 94 38 03 	call	0x670	; 0x670 <spi_master_CS>
     6e0:	80 ec       	ldi	r24, 0xC0	; 192
     6e2:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <spi_write>
     6e6:	81 e0       	ldi	r24, 0x01	; 1
     6e8:	0e 94 38 03 	call	0x670	; 0x670 <spi_master_CS>
     6ec:	08 95       	ret

000006ee <mcp_init>:
     6ee:	cf 93       	push	r28
     6f0:	c8 2f       	mov	r28, r24
     6f2:	0e 94 86 0a 	call	0x150c	; 0x150c <spi_init>
     6f6:	0e 94 6d 03 	call	0x6da	; 0x6da <mcp_reset>
     6fa:	80 e8       	ldi	r24, 0x80	; 128
     6fc:	0e 94 54 03 	call	0x6a8	; 0x6a8 <mcp_set_mode>
     700:	8f ef       	ldi	r24, 0xFF	; 255
     702:	9f e8       	ldi	r25, 0x8F	; 143
     704:	01 97       	sbiw	r24, 0x01	; 1
     706:	f1 f7       	brne	.-4      	; 0x704 <mcp_init+0x16>
     708:	00 c0       	rjmp	.+0      	; 0x70a <mcp_init+0x1c>
     70a:	00 00       	nop
     70c:	8e e0       	ldi	r24, 0x0E	; 14
     70e:	0e 94 59 03 	call	0x6b2	; 0x6b2 <mcp_read>
     712:	80 7e       	andi	r24, 0xE0	; 224
     714:	80 38       	cpi	r24, 0x80	; 128
     716:	31 f0       	breq	.+12     	; 0x724 <mcp_init+0x36>
     718:	80 e4       	ldi	r24, 0x40	; 64
     71a:	91 e0       	ldi	r25, 0x01	; 1
     71c:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <puts>
     720:	81 e0       	ldi	r24, 0x01	; 1
     722:	10 c0       	rjmp	.+32     	; 0x744 <mcp_init+0x56>
     724:	8c 2f       	mov	r24, r28
     726:	0e 94 54 03 	call	0x6a8	; 0x6a8 <mcp_set_mode>
     72a:	8e e0       	ldi	r24, 0x0E	; 14
     72c:	0e 94 59 03 	call	0x6b2	; 0x6b2 <mcp_read>
     730:	80 7e       	andi	r24, 0xE0	; 224
     732:	8c 17       	cp	r24, r28
     734:	31 f0       	breq	.+12     	; 0x742 <mcp_init+0x54>
     736:	82 e7       	ldi	r24, 0x72	; 114
     738:	91 e0       	ldi	r25, 0x01	; 1
     73a:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <puts>
     73e:	81 e0       	ldi	r24, 0x01	; 1
     740:	01 c0       	rjmp	.+2      	; 0x744 <mcp_init+0x56>
     742:	80 e0       	ldi	r24, 0x00	; 0
     744:	cf 91       	pop	r28
     746:	08 95       	ret

00000748 <mcp_bit_modify>:
     748:	1f 93       	push	r17
     74a:	cf 93       	push	r28
     74c:	df 93       	push	r29
     74e:	18 2f       	mov	r17, r24
     750:	d6 2f       	mov	r29, r22
     752:	c4 2f       	mov	r28, r20
     754:	80 e0       	ldi	r24, 0x00	; 0
     756:	0e 94 38 03 	call	0x670	; 0x670 <spi_master_CS>
     75a:	85 e0       	ldi	r24, 0x05	; 5
     75c:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <spi_write>
     760:	81 2f       	mov	r24, r17
     762:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <spi_write>
     766:	8d 2f       	mov	r24, r29
     768:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <spi_write>
     76c:	8c 2f       	mov	r24, r28
     76e:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <spi_write>
     772:	81 e0       	ldi	r24, 0x01	; 1
     774:	0e 94 38 03 	call	0x670	; 0x670 <spi_master_CS>
     778:	df 91       	pop	r29
     77a:	cf 91       	pop	r28
     77c:	1f 91       	pop	r17
     77e:	08 95       	ret

00000780 <mcp_request_to_send>:

void mcp_request_to_send(uint8_t buffer){
     780:	cf 93       	push	r28
     782:	c8 2f       	mov	r28, r24
    spi_master_CS(0);
     784:	80 e0       	ldi	r24, 0x00	; 0
     786:	0e 94 38 03 	call	0x670	; 0x670 <spi_master_CS>

    switch (buffer) {
     78a:	c1 30       	cpi	r28, 0x01	; 1
     78c:	41 f0       	breq	.+16     	; 0x79e <mcp_request_to_send+0x1e>
     78e:	18 f0       	brcs	.+6      	; 0x796 <mcp_request_to_send+0x16>
     790:	c2 30       	cpi	r28, 0x02	; 2
     792:	49 f0       	breq	.+18     	; 0x7a6 <mcp_request_to_send+0x26>
     794:	0c c0       	rjmp	.+24     	; 0x7ae <mcp_request_to_send+0x2e>
      case 0:
          spi_write(MCP_RTS_TX0);
     796:	81 e8       	ldi	r24, 0x81	; 129
     798:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <spi_write>
          break;
     79c:	0b c0       	rjmp	.+22     	; 0x7b4 <mcp_request_to_send+0x34>
      case 1:
          spi_write(MCP_RTS_TX1);
     79e:	82 e8       	ldi	r24, 0x82	; 130
     7a0:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <spi_write>
          break;
     7a4:	07 c0       	rjmp	.+14     	; 0x7b4 <mcp_request_to_send+0x34>
      case 2:
          spi_write(MCP_RTS_TX2);
     7a6:	84 e8       	ldi	r24, 0x84	; 132
     7a8:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <spi_write>
          break;
     7ac:	03 c0       	rjmp	.+6      	; 0x7b4 <mcp_request_to_send+0x34>
      default:
        spi_write(MCP_RTS_ALL);
     7ae:	87 e8       	ldi	r24, 0x87	; 135
     7b0:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <spi_write>
    }

    spi_master_CS(1);
     7b4:	81 e0       	ldi	r24, 0x01	; 1
     7b6:	0e 94 38 03 	call	0x670	; 0x670 <spi_master_CS>
}
     7ba:	cf 91       	pop	r28
     7bc:	08 95       	ret

000007be <InitMusic>:
#define DEFAULT_VOLUME 100

void InitMusic()
{

	DDRE |= (1 << PE2); //OC1B as output
     7be:	32 9a       	sbi	0x06, 2	; 6

	// timer1 configuration (for pWM)
    TCCR1A = (1 << COM1B1);  // Clear OC1A/OC1B on compare match
     7c0:	80 e2       	ldi	r24, 0x20	; 32
     7c2:	8f bd       	out	0x2f, r24	; 47

	
	TCCR1B = (1 << WGM13) 	// mode 8, pWM, phase and Frequency Correct (TOp value is ICR1)
     7c4:	82 e1       	ldi	r24, 0x12	; 18
     7c6:	8e bd       	out	0x2e, r24	; 46
     7c8:	08 95       	ret

000007ca <playMusic>:
		   | (1 << CS11); 	// prescaler(8)
}



void playMusic(int* p_notes, uint8_t scale)	{/** paying tempo from 0 to 100. Higher value = slower playback*/
     7ca:	fc 01       	movw	r30, r24

	int note;
	uint8_t i = 0;
   
	while( *p_notes )
     7cc:	80 81       	ld	r24, Z
     7ce:	91 81       	ldd	r25, Z+1	; 0x01
     7d0:	00 97       	sbiw	r24, 0x00	; 0
     7d2:	21 f1       	breq	.+72     	; 0x81c <playMusic+0x52>
	{
		*p_notes = scale* (*p_notes);
     7d4:	70 e0       	ldi	r23, 0x00	; 0
		}

		else
		{
			//not a pause, generate tone
			OCR1B = DEFAULT_VOLUME;
     7d6:	44 e6       	ldi	r20, 0x64	; 100
     7d8:	50 e0       	ldi	r21, 0x00	; 0
	int note;
	uint8_t i = 0;
   
	while( *p_notes )
	{
		*p_notes = scale* (*p_notes);
     7da:	68 9f       	mul	r22, r24
     7dc:	90 01       	movw	r18, r0
     7de:	69 9f       	mul	r22, r25
     7e0:	30 0d       	add	r19, r0
     7e2:	78 9f       	mul	r23, r24
     7e4:	30 0d       	add	r19, r0
     7e6:	11 24       	eor	r1, r1
     7e8:	31 83       	std	Z+1, r19	; 0x01
     7ea:	20 83       	st	Z, r18
     7ec:	34 96       	adiw	r30, 0x04	; 4
		note = *p_notes;
		p_notes++;

		p_notes++;

		if( p == note )
     7ee:	21 30       	cpi	r18, 0x01	; 1
     7f0:	31 05       	cpc	r19, r1
     7f2:	19 f4       	brne	.+6      	; 0x7fa <playMusic+0x30>
		{
			//pause, do not generate any sound
			OCR1B = 0;
     7f4:	19 bc       	out	0x29, r1	; 41
     7f6:	18 bc       	out	0x28, r1	; 40
     7f8:	04 c0       	rjmp	.+8      	; 0x802 <playMusic+0x38>
		}

		else
		{
			//not a pause, generate tone
			OCR1B = DEFAULT_VOLUME;
     7fa:	59 bd       	out	0x29, r21	; 41
     7fc:	48 bd       	out	0x28, r20	; 40

			//set frequency
			ICR1H = (note >> 8);
     7fe:	35 bd       	out	0x25, r19	; 37
			ICR1L = note;
     800:	24 bd       	out	0x24, r18	; 36
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     802:	2f ef       	ldi	r18, 0xFF	; 255
     804:	8f e3       	ldi	r24, 0x3F	; 63
     806:	92 e0       	ldi	r25, 0x02	; 2
     808:	21 50       	subi	r18, 0x01	; 1
     80a:	80 40       	sbci	r24, 0x00	; 0
     80c:	90 40       	sbci	r25, 0x00	; 0
     80e:	e1 f7       	brne	.-8      	; 0x808 <playMusic+0x3e>
     810:	00 c0       	rjmp	.+0      	; 0x812 <playMusic+0x48>
     812:	00 00       	nop
void playMusic(int* p_notes, uint8_t scale)	{/** paying tempo from 0 to 100. Higher value = slower playback*/

	int note;
	uint8_t i = 0;
   
	while( *p_notes )
     814:	80 81       	ld	r24, Z
     816:	91 81       	ldd	r25, Z+1	; 0x01
     818:	00 97       	sbiw	r24, 0x00	; 0
     81a:	f9 f6       	brne	.-66     	; 0x7da <playMusic+0x10>
		_delay_ms(150);
	}
	

	//turn off any sound
	OCR1B = 0;
     81c:	19 bc       	out	0x29, r1	; 41
     81e:	18 bc       	out	0x28, r1	; 40
     820:	08 95       	ret

00000822 <oled_sel_row>:
    oled_line_down(page);

    for(uint8_t j = 0; j < 128; j++){
        write_data(0b00000000);   // sets bitmask of zero to a line/page
    }
}
     822:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <oled_position>
     826:	87 70       	andi	r24, 0x07	; 7
     828:	80 55       	subi	r24, 0x50	; 80
     82a:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     82e:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     832:	80 83       	st	Z, r24
     834:	08 95       	ret

00000836 <oled_sel_col>:
     836:	80 93 d1 02 	sts	0x02D1, r24	; 0x8002d1 <oled_position+0x1>
     83a:	98 2f       	mov	r25, r24
     83c:	9f 70       	andi	r25, 0x0F	; 15
     83e:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     842:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     846:	90 83       	st	Z, r25
     848:	82 95       	swap	r24
     84a:	8f 70       	andi	r24, 0x0F	; 15
     84c:	80 5f       	subi	r24, 0xF0	; 240
     84e:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     852:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     856:	80 83       	st	Z, r24
     858:	08 95       	ret

0000085a <oled_line_down>:
     85a:	80 55       	subi	r24, 0x50	; 80
     85c:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     860:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     864:	80 83       	st	Z, r24
     866:	08 95       	ret

00000868 <oled_pos_set>:
     868:	cf 93       	push	r28
     86a:	c6 2f       	mov	r28, r22
     86c:	0e 94 11 04 	call	0x822	; 0x822 <oled_sel_row>
     870:	8c 2f       	mov	r24, r28
     872:	0e 94 1b 04 	call	0x836	; 0x836 <oled_sel_col>
     876:	cf 91       	pop	r28
     878:	08 95       	ret

0000087a <oled_home>:
     87a:	60 e0       	ldi	r22, 0x00	; 0
     87c:	80 e0       	ldi	r24, 0x00	; 0
     87e:	0e 94 34 04 	call	0x868	; 0x868 <oled_pos_set>
     882:	08 95       	ret

00000884 <oled_clear>:
     884:	1f 93       	push	r17
     886:	cf 93       	push	r28
     888:	df 93       	push	r29
     88a:	10 e0       	ldi	r17, 0x00	; 0
     88c:	c6 ea       	ldi	r28, 0xA6	; 166
     88e:	d0 e0       	ldi	r29, 0x00	; 0
     890:	81 2f       	mov	r24, r17
     892:	0e 94 2d 04 	call	0x85a	; 0x85a <oled_line_down>
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	0d c0       	rjmp	.+26     	; 0x8b4 <oled_clear+0x30>
     89a:	84 91       	lpm	r24, Z
     89c:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <oled_write_data>
     8a0:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <oled_write_data+0x1>
     8a4:	8c 93       	st	X, r24
     8a6:	31 96       	adiw	r30, 0x01	; 1
     8a8:	ec 17       	cp	r30, r28
     8aa:	fd 07       	cpc	r31, r29
     8ac:	b1 f7       	brne	.-20     	; 0x89a <oled_clear+0x16>
     8ae:	9f 5f       	subi	r25, 0xFF	; 255
     8b0:	90 38       	cpi	r25, 0x80	; 128
     8b2:	19 f0       	breq	.+6      	; 0x8ba <oled_clear+0x36>
     8b4:	ee e9       	ldi	r30, 0x9E	; 158
     8b6:	f0 e0       	ldi	r31, 0x00	; 0
     8b8:	f0 cf       	rjmp	.-32     	; 0x89a <oled_clear+0x16>
     8ba:	1f 5f       	subi	r17, 0xFF	; 255
     8bc:	18 30       	cpi	r17, 0x08	; 8
     8be:	41 f7       	brne	.-48     	; 0x890 <oled_clear+0xc>
     8c0:	0e 94 3d 04 	call	0x87a	; 0x87a <oled_home>
     8c4:	df 91       	pop	r29
     8c6:	cf 91       	pop	r28
     8c8:	1f 91       	pop	r17
     8ca:	08 95       	ret

000008cc <OLED_init>:
     8cc:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     8d0:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     8d4:	8e ea       	ldi	r24, 0xAE	; 174
     8d6:	80 83       	st	Z, r24
     8d8:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     8dc:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     8e0:	81 ea       	ldi	r24, 0xA1	; 161
     8e2:	80 83       	st	Z, r24
     8e4:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     8e8:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     8ec:	8a ed       	ldi	r24, 0xDA	; 218
     8ee:	80 83       	st	Z, r24
     8f0:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     8f4:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     8f8:	82 e1       	ldi	r24, 0x12	; 18
     8fa:	80 83       	st	Z, r24
     8fc:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     900:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     904:	88 ec       	ldi	r24, 0xC8	; 200
     906:	80 83       	st	Z, r24
     908:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     90c:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     910:	88 ea       	ldi	r24, 0xA8	; 168
     912:	80 83       	st	Z, r24
     914:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     918:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     91c:	8f e3       	ldi	r24, 0x3F	; 63
     91e:	80 83       	st	Z, r24
     920:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     924:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     928:	85 ed       	ldi	r24, 0xD5	; 213
     92a:	80 83       	st	Z, r24
     92c:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     930:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     934:	80 e8       	ldi	r24, 0x80	; 128
     936:	80 83       	st	Z, r24
     938:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     93c:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     940:	81 e8       	ldi	r24, 0x81	; 129
     942:	80 83       	st	Z, r24
     944:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     948:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     94c:	80 e5       	ldi	r24, 0x50	; 80
     94e:	80 83       	st	Z, r24
     950:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     954:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     958:	89 ed       	ldi	r24, 0xD9	; 217
     95a:	80 83       	st	Z, r24
     95c:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     960:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     964:	81 e2       	ldi	r24, 0x21	; 33
     966:	80 83       	st	Z, r24
     968:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     96c:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     970:	80 e2       	ldi	r24, 0x20	; 32
     972:	80 83       	st	Z, r24
     974:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     978:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     97c:	82 e0       	ldi	r24, 0x02	; 2
     97e:	80 83       	st	Z, r24
     980:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     984:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     988:	8b ed       	ldi	r24, 0xDB	; 219
     98a:	80 83       	st	Z, r24
     98c:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     990:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     994:	80 e3       	ldi	r24, 0x30	; 48
     996:	80 83       	st	Z, r24
     998:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     99c:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     9a0:	8d ea       	ldi	r24, 0xAD	; 173
     9a2:	80 83       	st	Z, r24
     9a4:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     9a8:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     9ac:	10 82       	st	Z, r1
     9ae:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     9b2:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     9b6:	84 ea       	ldi	r24, 0xA4	; 164
     9b8:	80 83       	st	Z, r24
     9ba:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     9be:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     9c2:	86 ea       	ldi	r24, 0xA6	; 166
     9c4:	80 83       	st	Z, r24
     9c6:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     9ca:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     9ce:	8f ea       	ldi	r24, 0xAF	; 175
     9d0:	80 83       	st	Z, r24
     9d2:	0e 94 42 04 	call	0x884	; 0x884 <oled_clear>
     9d6:	0e 94 3d 04 	call	0x87a	; 0x87a <oled_home>
     9da:	08 95       	ret

000009dc <oled_write_character>:

void oled_write_character(uint8_t c){
     9dc:	28 2f       	mov	r18, r24
     9de:	30 e0       	ldi	r19, 0x00	; 0
     9e0:	f9 01       	movw	r30, r18
     9e2:	ee 0f       	add	r30, r30
     9e4:	ff 1f       	adc	r31, r31
     9e6:	ee 0f       	add	r30, r30
     9e8:	ff 1f       	adc	r31, r31
     9ea:	ee 0f       	add	r30, r30
     9ec:	ff 1f       	adc	r31, r31
     9ee:	e2 56       	subi	r30, 0x62	; 98
     9f0:	f0 40       	sbci	r31, 0x00	; 0
     9f2:	22 0f       	add	r18, r18
     9f4:	33 1f       	adc	r19, r19
     9f6:	22 0f       	add	r18, r18
     9f8:	33 1f       	adc	r19, r19
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	2a 55       	subi	r18, 0x5A	; 90
     a00:	30 40       	sbci	r19, 0x00	; 0
     for(uint8_t i = 0; i < 8; i++){
         write_data(pgm_read_byte( &font8[c-32][i] ) );
     a02:	94 91       	lpm	r25, Z
    oled_clear();
    oled_home();
}

void write_data(uint8_t data){
    oled_write_data[0] = data;     
     a04:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <oled_write_data>
     a08:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <oled_write_data+0x1>
     a0c:	9c 93       	st	X, r25
     a0e:	31 96       	adiw	r30, 0x01	; 1
        write_data(0b00000000);   // sets bitmask of zero to a line/page
    }
}

void oled_write_character(uint8_t c){
     for(uint8_t i = 0; i < 8; i++){
     a10:	e2 17       	cp	r30, r18
     a12:	f3 07       	cpc	r31, r19
     a14:	b1 f7       	brne	.-20     	; 0xa02 <oled_write_character+0x26>
         write_data(pgm_read_byte( &font8[c-32][i] ) );
     }
}
     a16:	08 95       	ret

00000a18 <oled_print>:

void oled_print(char* string){
     a18:	0f 93       	push	r16
     a1a:	1f 93       	push	r17
     a1c:	cf 93       	push	r28
     a1e:	df 93       	push	r29
    int length = strlen(&string[0]);
     a20:	fc 01       	movw	r30, r24
     a22:	01 90       	ld	r0, Z+
     a24:	00 20       	and	r0, r0
     a26:	e9 f7       	brne	.-6      	; 0xa22 <oled_print+0xa>
     a28:	31 97       	sbiw	r30, 0x01	; 1
     a2a:	e8 1b       	sub	r30, r24
     a2c:	f9 0b       	sbc	r31, r25

    for(int i = 0; i < length; i++ ){
     a2e:	1e 16       	cp	r1, r30
     a30:	1f 06       	cpc	r1, r31
     a32:	54 f4       	brge	.+20     	; 0xa48 <oled_print+0x30>
     a34:	ec 01       	movw	r28, r24
     a36:	8c 01       	movw	r16, r24
     a38:	0e 0f       	add	r16, r30
     a3a:	1f 1f       	adc	r17, r31

        oled_write_character(string[i]);
     a3c:	89 91       	ld	r24, Y+
     a3e:	0e 94 ee 04 	call	0x9dc	; 0x9dc <oled_write_character>
}

void oled_print(char* string){
    int length = strlen(&string[0]);

    for(int i = 0; i < length; i++ ){
     a42:	c0 17       	cp	r28, r16
     a44:	d1 07       	cpc	r29, r17
     a46:	d1 f7       	brne	.-12     	; 0xa3c <oled_print+0x24>

        oled_write_character(string[i]);
    }
}
     a48:	df 91       	pop	r29
     a4a:	cf 91       	pop	r28
     a4c:	1f 91       	pop	r17
     a4e:	0f 91       	pop	r16
     a50:	08 95       	ret

00000a52 <oled_print_arrow>:


void oled_print_arrow(uint8_t row, uint8_t col){
    oled_pos_set(row, col);
     a52:	0e 94 34 04 	call	0x868	; 0x868 <oled_pos_set>
    oled_clear();
    oled_home();
}

void write_data(uint8_t data){
    oled_write_data[0] = data;     
     a56:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <oled_write_data>
     a5a:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <oled_write_data+0x1>
     a5e:	88 e1       	ldi	r24, 0x18	; 24
     a60:	80 83       	st	Z, r24
     a62:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <oled_write_data>
     a66:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <oled_write_data+0x1>
     a6a:	80 83       	st	Z, r24
     a6c:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <oled_write_data>
     a70:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <oled_write_data+0x1>
     a74:	9e e7       	ldi	r25, 0x7E	; 126
     a76:	90 83       	st	Z, r25
     a78:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <oled_write_data>
     a7c:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <oled_write_data+0x1>
     a80:	9c e3       	ldi	r25, 0x3C	; 60
     a82:	90 83       	st	Z, r25
     a84:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <oled_write_data>
     a88:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <oled_write_data+0x1>
     a8c:	80 83       	st	Z, r24
     a8e:	08 95       	ret

00000a90 <set_difficulty>:
    if(child == 0){
        child = current_node->elements_on_screen;
    }

    return child;
}
     a90:	cf 93       	push	r28
     a92:	df 93       	push	r29
     a94:	cd b7       	in	r28, 0x3d	; 61
     a96:	de b7       	in	r29, 0x3e	; 62
     a98:	2b 97       	sbiw	r28, 0x0b	; 11
     a9a:	0f b6       	in	r0, 0x3f	; 63
     a9c:	f8 94       	cli
     a9e:	de bf       	out	0x3e, r29	; 62
     aa0:	0f be       	out	0x3f, r0	; 63
     aa2:	cd bf       	out	0x3d, r28	; 61
     aa4:	85 e0       	ldi	r24, 0x05	; 5
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	9a 83       	std	Y+2, r25	; 0x02
     aaa:	89 83       	std	Y+1, r24	; 0x01
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	8b 83       	std	Y+3, r24	; 0x03
     ab0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <child>
     ab4:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <child+0x1>
     ab8:	81 30       	cpi	r24, 0x01	; 1
     aba:	91 05       	cpc	r25, r1
     abc:	19 f4       	brne	.+6      	; 0xac4 <set_difficulty+0x34>
     abe:	81 e0       	ldi	r24, 0x01	; 1
     ac0:	8c 83       	std	Y+4, r24	; 0x04
     ac2:	0a c0       	rjmp	.+20     	; 0xad8 <set_difficulty+0x48>
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	91 05       	cpc	r25, r1
     ac8:	19 f4       	brne	.+6      	; 0xad0 <set_difficulty+0x40>
     aca:	82 e0       	ldi	r24, 0x02	; 2
     acc:	8c 83       	std	Y+4, r24	; 0x04
     ace:	04 c0       	rjmp	.+8      	; 0xad8 <set_difficulty+0x48>
     ad0:	03 97       	sbiw	r24, 0x03	; 3
     ad2:	11 f4       	brne	.+4      	; 0xad8 <set_difficulty+0x48>
     ad4:	83 e0       	ldi	r24, 0x03	; 3
     ad6:	8c 83       	std	Y+4, r24	; 0x04
     ad8:	ce 01       	movw	r24, r28
     ada:	01 96       	adiw	r24, 0x01	; 1
     adc:	0e 94 50 02 	call	0x4a0	; 0x4a0 <CAN_message_transmission>
     ae0:	2b 96       	adiw	r28, 0x0b	; 11
     ae2:	0f b6       	in	r0, 0x3f	; 63
     ae4:	f8 94       	cli
     ae6:	de bf       	out	0x3e, r29	; 62
     ae8:	0f be       	out	0x3f, r0	; 63
     aea:	cd bf       	out	0x3d, r28	; 61
     aec:	df 91       	pop	r29
     aee:	cf 91       	pop	r28
     af0:	08 95       	ret

00000af2 <build_node>:
     af2:	cf 92       	push	r12
     af4:	df 92       	push	r13
     af6:	ef 92       	push	r14
     af8:	ff 92       	push	r15
     afa:	0f 93       	push	r16
     afc:	1f 93       	push	r17
     afe:	cf 93       	push	r28
     b00:	df 93       	push	r29
     b02:	ec 01       	movw	r28, r24
     b04:	69 01       	movw	r12, r18
     b06:	79 83       	std	Y+1, r23	; 0x01
     b08:	68 83       	st	Y, r22
     b0a:	ba 01       	movw	r22, r20
     b0c:	46 96       	adiw	r24, 0x16	; 22
     b0e:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <strcpy>
     b12:	dd 8a       	std	Y+21, r13	; 0x15
     b14:	cc 8a       	std	Y+20, r12	; 0x14
     b16:	fb 8a       	std	Y+19, r15	; 0x13
     b18:	ea 8a       	std	Y+18, r14	; 0x12
     b1a:	a0 2f       	mov	r26, r16
     b1c:	b1 2f       	mov	r27, r17
     b1e:	fe 01       	movw	r30, r28
     b20:	32 96       	adiw	r30, 0x02	; 2
     b22:	ce 01       	movw	r24, r28
     b24:	42 96       	adiw	r24, 0x12	; 18
     b26:	2d 91       	ld	r18, X+
     b28:	3d 91       	ld	r19, X+
     b2a:	21 93       	st	Z+, r18
     b2c:	31 93       	st	Z+, r19
     b2e:	e8 17       	cp	r30, r24
     b30:	f9 07       	cpc	r31, r25
     b32:	c9 f7       	brne	.-14     	; 0xb26 <build_node+0x34>
     b34:	df 91       	pop	r29
     b36:	cf 91       	pop	r28
     b38:	1f 91       	pop	r17
     b3a:	0f 91       	pop	r16
     b3c:	ff 90       	pop	r15
     b3e:	ef 90       	pop	r14
     b40:	df 90       	pop	r13
     b42:	cf 90       	pop	r12
     b44:	08 95       	ret

00000b46 <go_up>:
     b46:	dc 01       	movw	r26, r24
     b48:	ed 91       	ld	r30, X+
     b4a:	fc 91       	ld	r31, X
     b4c:	11 97       	sbiw	r26, 0x01	; 1
     b4e:	20 81       	ld	r18, Z
     b50:	31 81       	ldd	r19, Z+1	; 0x01
     b52:	21 15       	cp	r18, r1
     b54:	31 05       	cpc	r19, r1
     b56:	11 f0       	breq	.+4      	; 0xb5c <go_up+0x16>
     b58:	2d 93       	st	X+, r18
     b5a:	3c 93       	st	X, r19
     b5c:	08 95       	ret

00000b5e <go_down>:
     b5e:	fc 01       	movw	r30, r24
     b60:	a0 81       	ld	r26, Z
     b62:	b1 81       	ldd	r27, Z+1	; 0x01
     b64:	fb 01       	movw	r30, r22
     b66:	ee 0f       	add	r30, r30
     b68:	ff 1f       	adc	r31, r31
     b6a:	ea 0f       	add	r30, r26
     b6c:	fb 1f       	adc	r31, r27
     b6e:	20 81       	ld	r18, Z
     b70:	31 81       	ldd	r19, Z+1	; 0x01
     b72:	21 15       	cp	r18, r1
     b74:	31 05       	cpc	r19, r1
     b76:	21 f0       	breq	.+8      	; 0xb80 <go_down+0x22>
     b78:	fc 01       	movw	r30, r24
     b7a:	31 83       	std	Z+1, r19	; 0x01
     b7c:	20 83       	st	Z, r18
     b7e:	08 95       	ret
     b80:	54 96       	adiw	r26, 0x14	; 20
     b82:	ed 91       	ld	r30, X+
     b84:	fc 91       	ld	r31, X
     b86:	55 97       	sbiw	r26, 0x15	; 21
     b88:	30 97       	sbiw	r30, 0x00	; 0
     b8a:	09 f0       	breq	.+2      	; 0xb8e <go_down+0x30>
     b8c:	09 95       	icall
     b8e:	08 95       	ret

00000b90 <wait_for_action>:
     b90:	0e 94 83 09 	call	0x1306	; 0x1306 <joystick_direction>
     b94:	84 30       	cpi	r24, 0x04	; 4
     b96:	29 f4       	brne	.+10     	; 0xba2 <wait_for_action+0x12>
     b98:	82 e0       	ldi	r24, 0x02	; 2
     b9a:	0e 94 49 0a 	call	0x1492	; 0x1492 <usb_button_pushed>
     b9e:	88 23       	and	r24, r24
     ba0:	b9 f3       	breq	.-18     	; 0xb90 <wait_for_action>
     ba2:	0e 94 83 09 	call	0x1306	; 0x1306 <joystick_direction>
     ba6:	82 30       	cpi	r24, 0x02	; 2
     ba8:	99 f0       	breq	.+38     	; 0xbd0 <wait_for_action+0x40>
     baa:	0e 94 83 09 	call	0x1306	; 0x1306 <joystick_direction>
     bae:	83 30       	cpi	r24, 0x03	; 3
     bb0:	79 f0       	breq	.+30     	; 0xbd0 <wait_for_action+0x40>
     bb2:	0e 94 83 09 	call	0x1306	; 0x1306 <joystick_direction>
     bb6:	81 30       	cpi	r24, 0x01	; 1
     bb8:	59 f0       	breq	.+22     	; 0xbd0 <wait_for_action+0x40>
     bba:	0e 94 83 09 	call	0x1306	; 0x1306 <joystick_direction>
     bbe:	88 23       	and	r24, r24
     bc0:	39 f0       	breq	.+14     	; 0xbd0 <wait_for_action+0x40>
     bc2:	82 e0       	ldi	r24, 0x02	; 2
     bc4:	0e 94 49 0a 	call	0x1492	; 0x1492 <usb_button_pushed>
     bc8:	81 11       	cpse	r24, r1
     bca:	01 c0       	rjmp	.+2      	; 0xbce <wait_for_action+0x3e>
     bcc:	08 95       	ret
     bce:	85 e0       	ldi	r24, 0x05	; 5
     bd0:	08 95       	ret

00000bd2 <wait_for_neutral_joystick_position>:
     bd2:	0e 94 83 09 	call	0x1306	; 0x1306 <joystick_direction>
     bd6:	84 30       	cpi	r24, 0x04	; 4
     bd8:	e1 f7       	brne	.-8      	; 0xbd2 <wait_for_neutral_joystick_position>
     bda:	08 95       	ret

00000bdc <update_element_down>:

int update_element_down(Node *current_node, int child){

    child++;
     bdc:	6f 5f       	subi	r22, 0xFF	; 255
     bde:	7f 4f       	sbci	r23, 0xFF	; 255

    if(child == current_node->elements_on_screen + 1){
     be0:	fc 01       	movw	r30, r24
     be2:	82 89       	ldd	r24, Z+18	; 0x12
     be4:	93 89       	ldd	r25, Z+19	; 0x13
     be6:	01 96       	adiw	r24, 0x01	; 1
     be8:	68 17       	cp	r22, r24
     bea:	79 07       	cpc	r23, r25
     bec:	11 f4       	brne	.+4      	; 0xbf2 <update_element_down+0x16>
        child = 1;
     bee:	61 e0       	ldi	r22, 0x01	; 1
     bf0:	70 e0       	ldi	r23, 0x00	; 0
    }

    return child;
    
}
     bf2:	cb 01       	movw	r24, r22
     bf4:	08 95       	ret

00000bf6 <check_highscore>:

    print_selecting_arrow(child);
}

void check_highscore(int highscore){
    if(highscore >= _1ST){   //check if new highscore
     bf6:	20 91 d4 02 	lds	r18, 0x02D4	; 0x8002d4 <_1ST>
     bfa:	30 91 d5 02 	lds	r19, 0x02D5	; 0x8002d5 <_1ST+0x1>
     bfe:	82 17       	cp	r24, r18
     c00:	93 07       	cpc	r25, r19
     c02:	8c f0       	brlt	.+34     	; 0xc26 <check_highscore+0x30>
		_3RD = _2ND;
     c04:	40 91 d2 02 	lds	r20, 0x02D2	; 0x8002d2 <_2ND>
     c08:	50 91 d3 02 	lds	r21, 0x02D3	; 0x8002d3 <_2ND+0x1>
     c0c:	50 93 c7 02 	sts	0x02C7, r21	; 0x8002c7 <_3RD+0x1>
     c10:	40 93 c6 02 	sts	0x02C6, r20	; 0x8002c6 <_3RD>
		_2ND = _1ST;
     c14:	30 93 d3 02 	sts	0x02D3, r19	; 0x8002d3 <_2ND+0x1>
     c18:	20 93 d2 02 	sts	0x02D2, r18	; 0x8002d2 <_2ND>
        _1ST = highscore;
     c1c:	90 93 d5 02 	sts	0x02D5, r25	; 0x8002d5 <_1ST+0x1>
     c20:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <_1ST>
     c24:	08 95       	ret
		
    }
    else if(    (highscore < _1ST) && (highscore > _2ND)    )    {  //check if new second best
     c26:	20 91 d2 02 	lds	r18, 0x02D2	; 0x8002d2 <_2ND>
     c2a:	30 91 d3 02 	lds	r19, 0x02D3	; 0x8002d3 <_2ND+0x1>
     c2e:	28 17       	cp	r18, r24
     c30:	39 07       	cpc	r19, r25
     c32:	4c f4       	brge	.+18     	; 0xc46 <check_highscore+0x50>
		_3RD = _2ND;
     c34:	30 93 c7 02 	sts	0x02C7, r19	; 0x8002c7 <_3RD+0x1>
     c38:	20 93 c6 02 	sts	0x02C6, r18	; 0x8002c6 <_3RD>
        _2ND = highscore;
     c3c:	90 93 d3 02 	sts	0x02D3, r25	; 0x8002d3 <_2ND+0x1>
     c40:	80 93 d2 02 	sts	0x02D2, r24	; 0x8002d2 <_2ND>
     c44:	08 95       	ret
    }
    else if(    (highscore < _2ND) && (highscore > _3RD)    ){ //check if new third best
     c46:	82 17       	cp	r24, r18
     c48:	93 07       	cpc	r25, r19
     c4a:	5c f4       	brge	.+22     	; 0xc62 <check_highscore+0x6c>
     c4c:	20 91 c6 02 	lds	r18, 0x02C6	; 0x8002c6 <_3RD>
     c50:	30 91 c7 02 	lds	r19, 0x02C7	; 0x8002c7 <_3RD+0x1>
     c54:	28 17       	cp	r18, r24
     c56:	39 07       	cpc	r19, r25
     c58:	24 f4       	brge	.+8      	; 0xc62 <check_highscore+0x6c>
        _3RD = highscore;
     c5a:	90 93 c7 02 	sts	0x02C7, r25	; 0x8002c7 <_3RD+0x1>
     c5e:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <_3RD>
     c62:	08 95       	ret

00000c64 <play_game>:
    oled_print_arrow(child - 1, 5);
	
}


void play_game(){
     c64:	cf 93       	push	r28
     c66:	df 93       	push	r29
     c68:	cd b7       	in	r28, 0x3d	; 61
     c6a:	de b7       	in	r29, 0x3e	; 62
     c6c:	a1 97       	sbiw	r28, 0x21	; 33
     c6e:	0f b6       	in	r0, 0x3f	; 63
     c70:	f8 94       	cli
     c72:	de bf       	out	0x3e, r29	; 62
     c74:	0f be       	out	0x3f, r0	; 63
     c76:	cd bf       	out	0x3d, r28	; 61
	
	// Play start music
	playMusic(start_melody, 1, 2);
     c78:	42 e0       	ldi	r20, 0x02	; 2
     c7a:	50 e0       	ldi	r21, 0x00	; 0
     c7c:	61 e0       	ldi	r22, 0x01	; 1
     c7e:	70 e0       	ldi	r23, 0x00	; 0
     c80:	8c e0       	ldi	r24, 0x0C	; 12
     c82:	91 e0       	ldi	r25, 0x01	; 1
     c84:	0e 94 e5 03 	call	0x7ca	; 0x7ca <playMusic>
	
	// Empties buffer if needed
	message_handler();
     c88:	ce 01       	movw	r24, r28
     c8a:	47 96       	adiw	r24, 0x17	; 23
     c8c:	0e 94 dd 02 	call	0x5ba	; 0x5ba <message_handler>
	message_handler();
     c90:	ce 01       	movw	r24, r28
     c92:	47 96       	adiw	r24, 0x17	; 23
     c94:	0e 94 dd 02 	call	0x5ba	; 0x5ba <message_handler>
	game_status.data[0] = 0;
	uint8_t game_on = 1;
	
	// Create message that is to be sent when game starts
	CAN_message_t start_game;
	start_game.identifier = 9;
     c98:	89 e0       	ldi	r24, 0x09	; 9
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	9d 87       	std	Y+13, r25	; 0x0d
     c9e:	8c 87       	std	Y+12, r24	; 0x0c
	start_game.data[0] = 7;
     ca0:	87 e0       	ldi	r24, 0x07	; 7
     ca2:	8f 87       	std	Y+15, r24	; 0x0f
	start_game.data_length = 1;
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	8e 87       	std	Y+14, r24	; 0x0e
	
	// Sends game start message
	CAN_message_transmission(&start_game);
     ca8:	ce 01       	movw	r24, r28
     caa:	0c 96       	adiw	r24, 0x0c	; 12
     cac:	0e 94 50 02 	call	0x4a0	; 0x4a0 <CAN_message_transmission>
		
		
	while(game_on){
		joyStick_Can_Message();
     cb0:	0e 94 f6 02 	call	0x5ec	; 0x5ec <joyStick_Can_Message>
		
		game_status = message_handler();
     cb4:	ce 01       	movw	r24, r28
     cb6:	01 96       	adiw	r24, 0x01	; 1
     cb8:	0e 94 dd 02 	call	0x5ba	; 0x5ba <message_handler>
		
		// Checks if game over message is received
		if(game_status.data[0] == 0b10101011){
     cbc:	8c 81       	ldd	r24, Y+4	; 0x04
     cbe:	8b 3a       	cpi	r24, 0xAB	; 171
     cc0:	b9 f7       	brne	.-18     	; 0xcb0 <play_game+0x4c>
	}
	
	
	// Update highscore
	int highscore = game_status.data[1];
	check_highscore(highscore);
     cc2:	8d 81       	ldd	r24, Y+5	; 0x05
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <check_highscore>
	
	// Play end song
	playMusic(end_melody2, 1, 2);
     cca:	42 e0       	ldi	r20, 0x02	; 2
     ccc:	50 e0       	ldi	r21, 0x00	; 0
     cce:	61 e0       	ldi	r22, 0x01	; 1
     cd0:	70 e0       	ldi	r23, 0x00	; 0
     cd2:	8e e1       	ldi	r24, 0x1E	; 30
     cd4:	91 e0       	ldi	r25, 0x01	; 1
     cd6:	0e 94 e5 03 	call	0x7ca	; 0x7ca <playMusic>
	
}
     cda:	a1 96       	adiw	r28, 0x21	; 33
     cdc:	0f b6       	in	r0, 0x3f	; 63
     cde:	f8 94       	cli
     ce0:	de bf       	out	0x3e, r29	; 62
     ce2:	0f be       	out	0x3f, r0	; 63
     ce4:	cd bf       	out	0x3d, r28	; 61
     ce6:	df 91       	pop	r29
     ce8:	cf 91       	pop	r28
     cea:	08 95       	ret

00000cec <print_selecting_arrow>:
	
}


void print_selecting_arrow(int child){
    oled_print_arrow(child - 1, 5);
     cec:	65 e0       	ldi	r22, 0x05	; 5
     cee:	81 50       	subi	r24, 0x01	; 1
     cf0:	0e 94 29 05 	call	0xa52	; 0xa52 <oled_print_arrow>
     cf4:	08 95       	ret

00000cf6 <print_main_menu_objects>:
        wait_for_neutral_joystick_position();
    }
}


void print_main_menu_objects(int child){
     cf6:	0f 93       	push	r16
     cf8:	1f 93       	push	r17
     cfa:	cf 93       	push	r28
     cfc:	df 93       	push	r29
     cfe:	cd b7       	in	r28, 0x3d	; 61
     d00:	de b7       	in	r29, 0x3e	; 62
     d02:	66 97       	sbiw	r28, 0x16	; 22
     d04:	0f b6       	in	r0, 0x3f	; 63
     d06:	f8 94       	cli
     d08:	de bf       	out	0x3e, r29	; 62
     d0a:	0f be       	out	0x3f, r0	; 63
     d0c:	cd bf       	out	0x3d, r28	; 61
     d0e:	8c 01       	movw	r16, r24
    char line1[] = "play";
     d10:	85 e0       	ldi	r24, 0x05	; 5
     d12:	ed ea       	ldi	r30, 0xAD	; 173
     d14:	f1 e0       	ldi	r31, 0x01	; 1
     d16:	de 01       	movw	r26, r28
     d18:	11 96       	adiw	r26, 0x01	; 1
     d1a:	01 90       	ld	r0, Z+
     d1c:	0d 92       	st	X+, r0
     d1e:	8a 95       	dec	r24
     d20:	e1 f7       	brne	.-8      	; 0xd1a <print_main_menu_objects+0x24>
    char line2[] = "Score";
     d22:	86 e0       	ldi	r24, 0x06	; 6
     d24:	e2 eb       	ldi	r30, 0xB2	; 178
     d26:	f1 e0       	ldi	r31, 0x01	; 1
     d28:	de 01       	movw	r26, r28
     d2a:	16 96       	adiw	r26, 0x06	; 6
     d2c:	01 90       	ld	r0, Z+
     d2e:	0d 92       	st	X+, r0
     d30:	8a 95       	dec	r24
     d32:	e1 f7       	brne	.-8      	; 0xd2c <print_main_menu_objects+0x36>
	char line3[] = "Difficulty";
     d34:	8b e0       	ldi	r24, 0x0B	; 11
     d36:	e8 eb       	ldi	r30, 0xB8	; 184
     d38:	f1 e0       	ldi	r31, 0x01	; 1
     d3a:	de 01       	movw	r26, r28
     d3c:	1c 96       	adiw	r26, 0x0c	; 12
     d3e:	01 90       	ld	r0, Z+
     d40:	0d 92       	st	X+, r0
     d42:	8a 95       	dec	r24
     d44:	e1 f7       	brne	.-8      	; 0xd3e <print_main_menu_objects+0x48>

    oled_pos_set(0, 12);
     d46:	6c e0       	ldi	r22, 0x0C	; 12
     d48:	80 e0       	ldi	r24, 0x00	; 0
     d4a:	0e 94 34 04 	call	0x868	; 0x868 <oled_pos_set>
    oled_print(&line1);
     d4e:	ce 01       	movw	r24, r28
     d50:	01 96       	adiw	r24, 0x01	; 1
     d52:	0e 94 0c 05 	call	0xa18	; 0xa18 <oled_print>

    oled_pos_set(1, 12);
     d56:	6c e0       	ldi	r22, 0x0C	; 12
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	0e 94 34 04 	call	0x868	; 0x868 <oled_pos_set>
    oled_print(&line2);
     d5e:	ce 01       	movw	r24, r28
     d60:	06 96       	adiw	r24, 0x06	; 6
     d62:	0e 94 0c 05 	call	0xa18	; 0xa18 <oled_print>
	
	oled_pos_set(2, 12);
     d66:	6c e0       	ldi	r22, 0x0C	; 12
     d68:	82 e0       	ldi	r24, 0x02	; 2
     d6a:	0e 94 34 04 	call	0x868	; 0x868 <oled_pos_set>
	oled_print(&line3);
     d6e:	ce 01       	movw	r24, r28
     d70:	0c 96       	adiw	r24, 0x0c	; 12
     d72:	0e 94 0c 05 	call	0xa18	; 0xa18 <oled_print>
	
	

    print_selecting_arrow(child);       //Draw the arrow that selects the preferable option.
     d76:	c8 01       	movw	r24, r16
     d78:	0e 94 76 06 	call	0xcec	; 0xcec <print_selecting_arrow>
    
}
     d7c:	66 96       	adiw	r28, 0x16	; 22
     d7e:	0f b6       	in	r0, 0x3f	; 63
     d80:	f8 94       	cli
     d82:	de bf       	out	0x3e, r29	; 62
     d84:	0f be       	out	0x3f, r0	; 63
     d86:	cd bf       	out	0x3d, r28	; 61
     d88:	df 91       	pop	r29
     d8a:	cf 91       	pop	r28
     d8c:	1f 91       	pop	r17
     d8e:	0f 91       	pop	r16
     d90:	08 95       	ret

00000d92 <print_new_game_menu_objects>:

void print_new_game_menu_objects(int child){
     d92:	0f 93       	push	r16
     d94:	1f 93       	push	r17
     d96:	cf 93       	push	r28
     d98:	df 93       	push	r29
     d9a:	cd b7       	in	r28, 0x3d	; 61
     d9c:	de b7       	in	r29, 0x3e	; 62
     d9e:	2b 97       	sbiw	r28, 0x0b	; 11
     da0:	0f b6       	in	r0, 0x3f	; 63
     da2:	f8 94       	cli
     da4:	de bf       	out	0x3e, r29	; 62
     da6:	0f be       	out	0x3f, r0	; 63
     da8:	cd bf       	out	0x3d, r28	; 61
     daa:	8c 01       	movw	r16, r24

    char line1[] = "Start game";
     dac:	8b e0       	ldi	r24, 0x0B	; 11
     dae:	e3 ec       	ldi	r30, 0xC3	; 195
     db0:	f1 e0       	ldi	r31, 0x01	; 1
     db2:	de 01       	movw	r26, r28
     db4:	11 96       	adiw	r26, 0x01	; 1
     db6:	01 90       	ld	r0, Z+
     db8:	0d 92       	st	X+, r0
     dba:	8a 95       	dec	r24
     dbc:	e1 f7       	brne	.-8      	; 0xdb6 <print_new_game_menu_objects+0x24>

    oled_pos_set(0, 12);
     dbe:	6c e0       	ldi	r22, 0x0C	; 12
     dc0:	80 e0       	ldi	r24, 0x00	; 0
     dc2:	0e 94 34 04 	call	0x868	; 0x868 <oled_pos_set>
    oled_print(&line1);
     dc6:	ce 01       	movw	r24, r28
     dc8:	01 96       	adiw	r24, 0x01	; 1
     dca:	0e 94 0c 05 	call	0xa18	; 0xa18 <oled_print>

    print_selecting_arrow(child);
     dce:	c8 01       	movw	r24, r16
     dd0:	0e 94 76 06 	call	0xcec	; 0xcec <print_selecting_arrow>
}
     dd4:	2b 96       	adiw	r28, 0x0b	; 11
     dd6:	0f b6       	in	r0, 0x3f	; 63
     dd8:	f8 94       	cli
     dda:	de bf       	out	0x3e, r29	; 62
     ddc:	0f be       	out	0x3f, r0	; 63
     dde:	cd bf       	out	0x3d, r28	; 61
     de0:	df 91       	pop	r29
     de2:	cf 91       	pop	r28
     de4:	1f 91       	pop	r17
     de6:	0f 91       	pop	r16
     de8:	08 95       	ret

00000dea <print_score_menu_objects>:
        _3RD = highscore;
    }
    
}

void print_score_menu_objects(int child){
     dea:	0f 93       	push	r16
     dec:	1f 93       	push	r17
     dee:	cf 93       	push	r28
     df0:	df 93       	push	r29
     df2:	cd b7       	in	r28, 0x3d	; 61
     df4:	de b7       	in	r29, 0x3e	; 62
     df6:	e7 97       	sbiw	r28, 0x37	; 55
     df8:	0f b6       	in	r0, 0x3f	; 63
     dfa:	f8 94       	cli
     dfc:	de bf       	out	0x3e, r29	; 62
     dfe:	0f be       	out	0x3f, r0	; 63
     e00:	cd bf       	out	0x3d, r28	; 61
     e02:	8c 01       	movw	r16, r24

char line1[] = "Top score";
     e04:	8a e0       	ldi	r24, 0x0A	; 10
     e06:	e0 ee       	ldi	r30, 0xE0	; 224
     e08:	f1 e0       	ldi	r31, 0x01	; 1
     e0a:	de 01       	movw	r26, r28
     e0c:	11 96       	adiw	r26, 0x01	; 1
     e0e:	01 90       	ld	r0, Z+
     e10:	0d 92       	st	X+, r0
     e12:	8a 95       	dec	r24
     e14:	e1 f7       	brne	.-8      	; 0xe0e <print_score_menu_objects+0x24>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     e16:	4a e0       	ldi	r20, 0x0A	; 10
     e18:	be 01       	movw	r22, r28
     e1a:	65 5f       	subi	r22, 0xF5	; 245
     e1c:	7f 4f       	sbci	r23, 0xFF	; 255
     e1e:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <_1ST>
     e22:	90 91 d5 02 	lds	r25, 0x02D5	; 0x8002d5 <_1ST+0x1>
     e26:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__itoa_ncheck>
     e2a:	4a e0       	ldi	r20, 0x0A	; 10
     e2c:	be 01       	movw	r22, r28
     e2e:	66 5e       	subi	r22, 0xE6	; 230
     e30:	7f 4f       	sbci	r23, 0xFF	; 255
     e32:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <_2ND>
     e36:	90 91 d3 02 	lds	r25, 0x02D3	; 0x8002d3 <_2ND+0x1>
     e3a:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__itoa_ncheck>
     e3e:	4a e0       	ldi	r20, 0x0A	; 10
     e40:	be 01       	movw	r22, r28
     e42:	67 5d       	subi	r22, 0xD7	; 215
     e44:	7f 4f       	sbci	r23, 0xFF	; 255
     e46:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <_3RD>
     e4a:	90 91 c7 02 	lds	r25, 0x02C7	; 0x8002c7 <_3RD+0x1>
     e4e:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__itoa_ncheck>
itoa(_1ST, score_string1, 10);
itoa(_2ND, score_string2, 10);
itoa(_3RD, score_string3, 10);    

    
    oled_pos_set(0, 12);
     e52:	6c e0       	ldi	r22, 0x0C	; 12
     e54:	80 e0       	ldi	r24, 0x00	; 0
     e56:	0e 94 34 04 	call	0x868	; 0x868 <oled_pos_set>
    oled_print(&line1);
     e5a:	ce 01       	movw	r24, r28
     e5c:	01 96       	adiw	r24, 0x01	; 1
     e5e:	0e 94 0c 05 	call	0xa18	; 0xa18 <oled_print>

    oled_pos_set(2, 12);
     e62:	6c e0       	ldi	r22, 0x0C	; 12
     e64:	82 e0       	ldi	r24, 0x02	; 2
     e66:	0e 94 34 04 	call	0x868	; 0x868 <oled_pos_set>
    oled_print("1ST  ");
     e6a:	8e ec       	ldi	r24, 0xCE	; 206
     e6c:	91 e0       	ldi	r25, 0x01	; 1
     e6e:	0e 94 0c 05 	call	0xa18	; 0xa18 <oled_print>
    oled_print(&score_string1);
     e72:	ce 01       	movw	r24, r28
     e74:	0b 96       	adiw	r24, 0x0b	; 11
     e76:	0e 94 0c 05 	call	0xa18	; 0xa18 <oled_print>
    
    oled_pos_set(4, 12);
     e7a:	6c e0       	ldi	r22, 0x0C	; 12
     e7c:	84 e0       	ldi	r24, 0x04	; 4
     e7e:	0e 94 34 04 	call	0x868	; 0x868 <oled_pos_set>
    oled_print("2ND  ");
     e82:	84 ed       	ldi	r24, 0xD4	; 212
     e84:	91 e0       	ldi	r25, 0x01	; 1
     e86:	0e 94 0c 05 	call	0xa18	; 0xa18 <oled_print>
    oled_print(&score_string2);
     e8a:	ce 01       	movw	r24, r28
     e8c:	4a 96       	adiw	r24, 0x1a	; 26
     e8e:	0e 94 0c 05 	call	0xa18	; 0xa18 <oled_print>

    oled_pos_set(6, 12);
     e92:	6c e0       	ldi	r22, 0x0C	; 12
     e94:	86 e0       	ldi	r24, 0x06	; 6
     e96:	0e 94 34 04 	call	0x868	; 0x868 <oled_pos_set>
    oled_print("3RD  ");
     e9a:	8a ed       	ldi	r24, 0xDA	; 218
     e9c:	91 e0       	ldi	r25, 0x01	; 1
     e9e:	0e 94 0c 05 	call	0xa18	; 0xa18 <oled_print>
    oled_print(&score_string3);
     ea2:	ce 01       	movw	r24, r28
     ea4:	89 96       	adiw	r24, 0x29	; 41
     ea6:	0e 94 0c 05 	call	0xa18	; 0xa18 <oled_print>
    
    print_selecting_arrow(child);
     eaa:	c8 01       	movw	r24, r16
     eac:	0e 94 76 06 	call	0xcec	; 0xcec <print_selecting_arrow>

}
     eb0:	e7 96       	adiw	r28, 0x37	; 55
     eb2:	0f b6       	in	r0, 0x3f	; 63
     eb4:	f8 94       	cli
     eb6:	de bf       	out	0x3e, r29	; 62
     eb8:	0f be       	out	0x3f, r0	; 63
     eba:	cd bf       	out	0x3d, r28	; 61
     ebc:	df 91       	pop	r29
     ebe:	cf 91       	pop	r28
     ec0:	1f 91       	pop	r17
     ec2:	0f 91       	pop	r16
     ec4:	08 95       	ret

00000ec6 <print_difficulty_menu_objects>:

void print_difficulty_menu_objects(int child){
     ec6:	0f 93       	push	r16
     ec8:	1f 93       	push	r17
     eca:	cf 93       	push	r28
     ecc:	df 93       	push	r29
     ece:	cd b7       	in	r28, 0x3d	; 61
     ed0:	de b7       	in	r29, 0x3e	; 62
     ed2:	61 97       	sbiw	r28, 0x11	; 17
     ed4:	0f b6       	in	r0, 0x3f	; 63
     ed6:	f8 94       	cli
     ed8:	de bf       	out	0x3e, r29	; 62
     eda:	0f be       	out	0x3f, r0	; 63
     edc:	cd bf       	out	0x3d, r28	; 61
     ede:	8c 01       	movw	r16, r24
	char line1[] = "Easy";
     ee0:	85 e0       	ldi	r24, 0x05	; 5
     ee2:	ea ee       	ldi	r30, 0xEA	; 234
     ee4:	f1 e0       	ldi	r31, 0x01	; 1
     ee6:	de 01       	movw	r26, r28
     ee8:	11 96       	adiw	r26, 0x01	; 1
     eea:	01 90       	ld	r0, Z+
     eec:	0d 92       	st	X+, r0
     eee:	8a 95       	dec	r24
     ef0:	e1 f7       	brne	.-8      	; 0xeea <print_difficulty_menu_objects+0x24>
	char line2[] = "Medium";
     ef2:	87 e0       	ldi	r24, 0x07	; 7
     ef4:	ef ee       	ldi	r30, 0xEF	; 239
     ef6:	f1 e0       	ldi	r31, 0x01	; 1
     ef8:	de 01       	movw	r26, r28
     efa:	16 96       	adiw	r26, 0x06	; 6
     efc:	01 90       	ld	r0, Z+
     efe:	0d 92       	st	X+, r0
     f00:	8a 95       	dec	r24
     f02:	e1 f7       	brne	.-8      	; 0xefc <print_difficulty_menu_objects+0x36>
	char line3[] = "Hard";
     f04:	85 e0       	ldi	r24, 0x05	; 5
     f06:	e6 ef       	ldi	r30, 0xF6	; 246
     f08:	f1 e0       	ldi	r31, 0x01	; 1
     f0a:	de 01       	movw	r26, r28
     f0c:	1d 96       	adiw	r26, 0x0d	; 13
     f0e:	01 90       	ld	r0, Z+
     f10:	0d 92       	st	X+, r0
     f12:	8a 95       	dec	r24
     f14:	e1 f7       	brne	.-8      	; 0xf0e <print_difficulty_menu_objects+0x48>

	oled_pos_set(0, 12);
     f16:	6c e0       	ldi	r22, 0x0C	; 12
     f18:	80 e0       	ldi	r24, 0x00	; 0
     f1a:	0e 94 34 04 	call	0x868	; 0x868 <oled_pos_set>
	oled_print(&line1);
     f1e:	ce 01       	movw	r24, r28
     f20:	01 96       	adiw	r24, 0x01	; 1
     f22:	0e 94 0c 05 	call	0xa18	; 0xa18 <oled_print>

	oled_pos_set(1, 12);
     f26:	6c e0       	ldi	r22, 0x0C	; 12
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	0e 94 34 04 	call	0x868	; 0x868 <oled_pos_set>
	oled_print(&line2);
     f2e:	ce 01       	movw	r24, r28
     f30:	06 96       	adiw	r24, 0x06	; 6
     f32:	0e 94 0c 05 	call	0xa18	; 0xa18 <oled_print>
	
	oled_pos_set(2, 12);
     f36:	6c e0       	ldi	r22, 0x0C	; 12
     f38:	82 e0       	ldi	r24, 0x02	; 2
     f3a:	0e 94 34 04 	call	0x868	; 0x868 <oled_pos_set>
	oled_print(&line3);
     f3e:	ce 01       	movw	r24, r28
     f40:	0d 96       	adiw	r24, 0x0d	; 13
     f42:	0e 94 0c 05 	call	0xa18	; 0xa18 <oled_print>
	
	print_selecting_arrow(child);       //Draw the arrow that selects the preferable option.
     f46:	c8 01       	movw	r24, r16
     f48:	0e 94 76 06 	call	0xcec	; 0xcec <print_selecting_arrow>
	
}
     f4c:	61 96       	adiw	r28, 0x11	; 17
     f4e:	0f b6       	in	r0, 0x3f	; 63
     f50:	f8 94       	cli
     f52:	de bf       	out	0x3e, r29	; 62
     f54:	0f be       	out	0x3f, r0	; 63
     f56:	cd bf       	out	0x3d, r28	; 61
     f58:	df 91       	pop	r29
     f5a:	cf 91       	pop	r28
     f5c:	1f 91       	pop	r17
     f5e:	0f 91       	pop	r16
     f60:	08 95       	ret

00000f62 <update_screen>:
}

void update_screen(Node *current_node, int child){
	
	// Checks the second letter in the name of the child node.
    if(((*current_node).name[1]) == 'a'){
     f62:	fc 01       	movw	r30, r24
     f64:	87 89       	ldd	r24, Z+23	; 0x17
     f66:	81 36       	cpi	r24, 0x61	; 97
     f68:	21 f4       	brne	.+8      	; 0xf72 <update_screen+0x10>
        print_main_menu_objects(child);
     f6a:	cb 01       	movw	r24, r22
     f6c:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <print_main_menu_objects>
     f70:	08 95       	ret
    }
    else if(((*current_node).name[1]) == 'l'){
     f72:	8c 36       	cpi	r24, 0x6C	; 108
     f74:	21 f4       	brne	.+8      	; 0xf7e <update_screen+0x1c>
        print_new_game_menu_objects(child);
     f76:	cb 01       	movw	r24, r22
     f78:	0e 94 c9 06 	call	0xd92	; 0xd92 <print_new_game_menu_objects>
     f7c:	08 95       	ret
    }
    else if(((*current_node).name[1]) == 'h'){
     f7e:	88 36       	cpi	r24, 0x68	; 104
     f80:	21 f4       	brne	.+8      	; 0xf8a <update_screen+0x28>
        print_score_menu_objects(child);
     f82:	cb 01       	movw	r24, r22
     f84:	0e 94 f5 06 	call	0xdea	; 0xdea <print_score_menu_objects>
     f88:	08 95       	ret
    }
	else if(((*current_node).name[1]) == 'i'){
     f8a:	89 36       	cpi	r24, 0x69	; 105
     f8c:	19 f4       	brne	.+6      	; 0xf94 <update_screen+0x32>
		print_difficulty_menu_objects(child);
     f8e:	cb 01       	movw	r24, r22
     f90:	0e 94 63 07 	call	0xec6	; 0xec6 <print_difficulty_menu_objects>
     f94:	08 95       	ret

00000f96 <menu>:
    return child;
    
}


void menu(){
     f96:	cf 93       	push	r28
     f98:	df 93       	push	r29
     f9a:	cd b7       	in	r28, 0x3d	; 61
     f9c:	de b7       	in	r29, 0x3e	; 62
     f9e:	e0 97       	sbiw	r28, 0x30	; 48
     fa0:	0f b6       	in	r0, 0x3f	; 63
     fa2:	f8 94       	cli
     fa4:	de bf       	out	0x3e, r29	; 62
     fa6:	0f be       	out	0x3f, r0	; 63
     fa8:	cd bf       	out	0x3d, r28	; 61
    static Node Main_menu, Score, Play, Difficulty, Easy, Medium, Hard, *current_node;

    current_node = &Main_menu; 
     faa:	8a e9       	ldi	r24, 0x9A	; 154
     fac:	92 e0       	ldi	r25, 0x02	; 2
     fae:	90 93 c5 02 	sts	0x02C5, r25	; 0x8002c5 <current_node.2458+0x1>
     fb2:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <current_node.2458>
    DIRECTION action; // Action from joystick

    // Build node structure
    Node* children1[8] = {&Play, &Score, &Difficulty ,0 ,0 ,0 ,0 ,0};
     fb6:	80 e1       	ldi	r24, 0x10	; 16
     fb8:	e0 e3       	ldi	r30, 0x30	; 48
     fba:	f1 e0       	ldi	r31, 0x01	; 1
     fbc:	de 01       	movw	r26, r28
     fbe:	11 96       	adiw	r26, 0x01	; 1
     fc0:	01 90       	ld	r0, Z+
     fc2:	0d 92       	st	X+, r0
     fc4:	8a 95       	dec	r24
     fc6:	e1 f7       	brne	.-8      	; 0xfc0 <menu+0x2a>
    Node* children2[8] = {0, 0, 0, 0, 0, 0, 0, 0};
     fc8:	80 e1       	ldi	r24, 0x10	; 16
     fca:	6e 01       	movw	r12, r28
     fcc:	91 e1       	ldi	r25, 0x11	; 17
     fce:	c9 0e       	add	r12, r25
     fd0:	d1 1c       	adc	r13, r1
     fd2:	f6 01       	movw	r30, r12
     fd4:	98 2f       	mov	r25, r24
     fd6:	11 92       	st	Z+, r1
     fd8:	9a 95       	dec	r25
     fda:	e9 f7       	brne	.-6      	; 0xfd6 <menu+0x40>
    Node* children3[8] = {0, 0, 0, 0, 0, 0, 0, 0};
     fdc:	5e 01       	movw	r10, r28
     fde:	e1 e2       	ldi	r30, 0x21	; 33
     fe0:	ae 0e       	add	r10, r30
     fe2:	b1 1c       	adc	r11, r1
     fe4:	f5 01       	movw	r30, r10
     fe6:	11 92       	st	Z+, r1
     fe8:	8a 95       	dec	r24
     fea:	e9 f7       	brne	.-6      	; 0xfe6 <menu+0x50>
		
		



    build_node(&Main_menu, NULL, "Main menu", NULL, &children1,3);
     fec:	0f 2e       	mov	r0, r31
     fee:	f3 e0       	ldi	r31, 0x03	; 3
     ff0:	ef 2e       	mov	r14, r31
     ff2:	f1 2c       	mov	r15, r1
     ff4:	f0 2d       	mov	r31, r0
     ff6:	8e 01       	movw	r16, r28
     ff8:	0f 5f       	subi	r16, 0xFF	; 255
     ffa:	1f 4f       	sbci	r17, 0xFF	; 255
     ffc:	20 e0       	ldi	r18, 0x00	; 0
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	4b ef       	ldi	r20, 0xFB	; 251
    1002:	51 e0       	ldi	r21, 0x01	; 1
    1004:	60 e0       	ldi	r22, 0x00	; 0
    1006:	70 e0       	ldi	r23, 0x00	; 0
    1008:	8a e9       	ldi	r24, 0x9A	; 154
    100a:	92 e0       	ldi	r25, 0x02	; 2
    100c:	0e 94 79 05 	call	0xaf2	; 0xaf2 <build_node>
    build_node(&Play, &Main_menu, "Play game", play_game, &children2,1);
    1010:	ee 24       	eor	r14, r14
    1012:	e3 94       	inc	r14
    1014:	f1 2c       	mov	r15, r1
    1016:	86 01       	movw	r16, r12
    1018:	22 e3       	ldi	r18, 0x32	; 50
    101a:	36 e0       	ldi	r19, 0x06	; 6
    101c:	45 e0       	ldi	r20, 0x05	; 5
    101e:	52 e0       	ldi	r21, 0x02	; 2
    1020:	6a e9       	ldi	r22, 0x9A	; 154
    1022:	72 e0       	ldi	r23, 0x02	; 2
    1024:	80 e7       	ldi	r24, 0x70	; 112
    1026:	92 e0       	ldi	r25, 0x02	; 2
    1028:	0e 94 79 05 	call	0xaf2	; 0xaf2 <build_node>
    build_node(&Score, &Main_menu, "Show score", NULL, &children3,8);
    102c:	68 94       	set
    102e:	ee 24       	eor	r14, r14
    1030:	e3 f8       	bld	r14, 3
    1032:	f1 2c       	mov	r15, r1
    1034:	85 01       	movw	r16, r10
    1036:	20 e0       	ldi	r18, 0x00	; 0
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	4f e0       	ldi	r20, 0x0F	; 15
    103c:	52 e0       	ldi	r21, 0x02	; 2
    103e:	6a e9       	ldi	r22, 0x9A	; 154
    1040:	72 e0       	ldi	r23, 0x02	; 2
    1042:	86 e4       	ldi	r24, 0x46	; 70
    1044:	92 e0       	ldi	r25, 0x02	; 2
    1046:	0e 94 79 05 	call	0xaf2	; 0xaf2 <build_node>
	build_node(&Difficulty, &Main_menu, "Difficulty", set_difficulty, &children2, 3);
    104a:	0f 2e       	mov	r0, r31
    104c:	f3 e0       	ldi	r31, 0x03	; 3
    104e:	ef 2e       	mov	r14, r31
    1050:	f1 2c       	mov	r15, r1
    1052:	f0 2d       	mov	r31, r0
    1054:	86 01       	movw	r16, r12
    1056:	28 e4       	ldi	r18, 0x48	; 72
    1058:	35 e0       	ldi	r19, 0x05	; 5
    105a:	48 eb       	ldi	r20, 0xB8	; 184
    105c:	51 e0       	ldi	r21, 0x01	; 1
    105e:	6a e9       	ldi	r22, 0x9A	; 154
    1060:	72 e0       	ldi	r23, 0x02	; 2
    1062:	8c e1       	ldi	r24, 0x1C	; 28
    1064:	92 e0       	ldi	r25, 0x02	; 2
    1066:	0e 94 79 05 	call	0xaf2	; 0xaf2 <build_node>
	
    update_screen(current_node, child);
    106a:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <child>
    106e:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <child+0x1>
    1072:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <current_node.2458>
    1076:	90 91 c5 02 	lds	r25, 0x02C5	; 0x8002c5 <current_node.2458+0x1>
    107a:	0e 94 b1 07 	call	0xf62	; 0xf62 <update_screen>
                go_up(&current_node);
                child = 1;
              break;
          case RIGHT:
                go_down(&current_node, child);
                child = 1;
    107e:	ee 24       	eor	r14, r14
    1080:	e3 94       	inc	r14
    1082:	f1 2c       	mov	r15, r1
	build_node(&Difficulty, &Main_menu, "Difficulty", set_difficulty, &children2, 3);
	
    update_screen(current_node, child);

    while(1){
        action = wait_for_action();  //Wait for user to move the joystick
    1084:	0e 94 c8 05 	call	0xb90	; 0xb90 <wait_for_action>
    1088:	18 2f       	mov	r17, r24
        oled_clear();  //Clears the screen.
    108a:	0e 94 42 04 	call	0x884	; 0x884 <oled_clear>

        switch(action)
    108e:	11 30       	cpi	r17, 0x01	; 1
    1090:	79 f1       	breq	.+94     	; 0x10f0 <menu+0x15a>
    1092:	28 f1       	brcs	.+74     	; 0x10de <menu+0x148>
    1094:	12 30       	cpi	r17, 0x02	; 2
    1096:	19 f0       	breq	.+6      	; 0x109e <menu+0x108>
    1098:	13 30       	cpi	r17, 0x03	; 3
    109a:	91 f0       	breq	.+36     	; 0x10c0 <menu+0x12a>
    109c:	35 c0       	rjmp	.+106    	; 0x1108 <menu+0x172>

}

int update_element_up(Node *current_node, int child){

    child--;
    109e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <child>
    10a2:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <child+0x1>
    10a6:	01 97       	sbiw	r24, 0x01	; 1

    if(child == 0){
    10a8:	31 f4       	brne	.+12     	; 0x10b6 <menu+0x120>
        child = current_node->elements_on_screen;
    10aa:	e0 91 c4 02 	lds	r30, 0x02C4	; 0x8002c4 <current_node.2458>
    10ae:	f0 91 c5 02 	lds	r31, 0x02C5	; 0x8002c5 <current_node.2458+0x1>
    10b2:	82 89       	ldd	r24, Z+18	; 0x12
    10b4:	93 89       	ldd	r25, Z+19	; 0x13
        switch(action)
        {
          case BUTTON_PRESS:
              break;
          case UP:
                child = update_element_up(current_node, child);
    10b6:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <child+0x1>
    10ba:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <child>
              break;
    10be:	24 c0       	rjmp	.+72     	; 0x1108 <menu+0x172>
          case DOWN:
                child = update_element_down(current_node, child);
    10c0:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <child>
    10c4:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <child+0x1>
    10c8:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <current_node.2458>
    10cc:	90 91 c5 02 	lds	r25, 0x02C5	; 0x8002c5 <current_node.2458+0x1>
    10d0:	0e 94 ee 05 	call	0xbdc	; 0xbdc <update_element_down>
    10d4:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <child+0x1>
    10d8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <child>
              break;
    10dc:	15 c0       	rjmp	.+42     	; 0x1108 <menu+0x172>
          case LEFT:
                go_up(&current_node);
    10de:	84 ec       	ldi	r24, 0xC4	; 196
    10e0:	92 e0       	ldi	r25, 0x02	; 2
    10e2:	0e 94 a3 05 	call	0xb46	; 0xb46 <go_up>
                child = 1;
    10e6:	f0 92 0b 01 	sts	0x010B, r15	; 0x80010b <child+0x1>
    10ea:	e0 92 0a 01 	sts	0x010A, r14	; 0x80010a <child>
              break;
    10ee:	0c c0       	rjmp	.+24     	; 0x1108 <menu+0x172>
          case RIGHT:
                go_down(&current_node, child);
    10f0:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <child>
    10f4:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <child+0x1>
    10f8:	84 ec       	ldi	r24, 0xC4	; 196
    10fa:	92 e0       	ldi	r25, 0x02	; 2
    10fc:	0e 94 af 05 	call	0xb5e	; 0xb5e <go_down>
                child = 1;
    1100:	f0 92 0b 01 	sts	0x010B, r15	; 0x80010b <child+0x1>
    1104:	e0 92 0a 01 	sts	0x010A, r14	; 0x80010a <child>
              break;
          default:
              break;
        }
		
        update_screen(current_node, child);
    1108:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <child>
    110c:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <child+0x1>
    1110:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <current_node.2458>
    1114:	90 91 c5 02 	lds	r25, 0x02C5	; 0x8002c5 <current_node.2458+0x1>
    1118:	0e 94 b1 07 	call	0xf62	; 0xf62 <update_screen>
		
        wait_for_neutral_joystick_position();
    111c:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <wait_for_neutral_joystick_position>
    }
    1120:	b1 cf       	rjmp	.-158    	; 0x1084 <menu+0xee>

00001122 <pos_read>:
#include <avr/io.h>
#include <stdio.h>
#include "pos_read.h"


void pos_read(position* pos){
    1122:	8f 92       	push	r8
    1124:	9f 92       	push	r9
    1126:	af 92       	push	r10
    1128:	bf 92       	push	r11
    112a:	cf 92       	push	r12
    112c:	df 92       	push	r13
    112e:	ef 92       	push	r14
    1130:	ff 92       	push	r15
    1132:	0f 93       	push	r16
    1134:	1f 93       	push	r17
    1136:	cf 93       	push	r28
    1138:	df 93       	push	r29
    113a:	7c 01       	movw	r14, r24

    int ADC_Y = ADC_read(0);
    113c:	80 e0       	ldi	r24, 0x00	; 0
    113e:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ADC_read>
    1142:	c8 2f       	mov	r28, r24
    1144:	d0 e0       	ldi	r29, 0x00	; 0
    int ADC_X = ADC_read(1);
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ADC_read>
    114c:	68 2f       	mov	r22, r24
    114e:	70 e0       	ldi	r23, 0x00	; 0

    // X read

    if((ADC_X >= (P_cal.center_X - 20)) && (ADC_X <= (P_cal.center_X + 20))){ //Deadspace for joystick
    1150:	00 91 c8 02 	lds	r16, 0x02C8	; 0x8002c8 <P_cal>
    1154:	10 91 c9 02 	lds	r17, 0x02C9	; 0x8002c9 <P_cal+0x1>
    1158:	c8 01       	movw	r24, r16
    115a:	44 97       	sbiw	r24, 0x14	; 20
    115c:	68 17       	cp	r22, r24
    115e:	79 07       	cpc	r23, r25
    1160:	0c f4       	brge	.+2      	; 0x1164 <pos_read+0x42>
    1162:	b6 c0       	rjmp	.+364    	; 0x12d0 <pos_read+0x1ae>
    1164:	88 96       	adiw	r24, 0x28	; 40
    1166:	86 17       	cp	r24, r22
    1168:	97 07       	cpc	r25, r23
    116a:	0c f0       	brlt	.+2      	; 0x116e <pos_read+0x4c>
    116c:	4c c0       	rjmp	.+152    	; 0x1206 <pos_read+0xe4>
        ADC_X = 0;
    }
    else if(ADC_X > (P_cal.center_X + 20)){
        ADC_X = (ADC_X - P_cal.center_X) * 100.0 / (255.0 - P_cal.center_X);  //
    116e:	60 1b       	sub	r22, r16
    1170:	71 0b       	sbc	r23, r17
    1172:	07 2e       	mov	r0, r23
    1174:	00 0c       	add	r0, r0
    1176:	88 0b       	sbc	r24, r24
    1178:	99 0b       	sbc	r25, r25
    117a:	0e 94 32 0c 	call	0x1864	; 0x1864 <__floatsisf>
    117e:	20 e0       	ldi	r18, 0x00	; 0
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	48 ec       	ldi	r20, 0xC8	; 200
    1184:	52 e4       	ldi	r21, 0x42	; 66
    1186:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <__mulsf3>
    118a:	4b 01       	movw	r8, r22
    118c:	5c 01       	movw	r10, r24
    118e:	b8 01       	movw	r22, r16
    1190:	11 0f       	add	r17, r17
    1192:	88 0b       	sbc	r24, r24
    1194:	99 0b       	sbc	r25, r25
    1196:	0e 94 32 0c 	call	0x1864	; 0x1864 <__floatsisf>
    119a:	9b 01       	movw	r18, r22
    119c:	ac 01       	movw	r20, r24
    119e:	60 e0       	ldi	r22, 0x00	; 0
    11a0:	70 e0       	ldi	r23, 0x00	; 0
    11a2:	8f e7       	ldi	r24, 0x7F	; 127
    11a4:	93 e4       	ldi	r25, 0x43	; 67
    11a6:	0e 94 a4 0a 	call	0x1548	; 0x1548 <__subsf3>
    11aa:	9b 01       	movw	r18, r22
    11ac:	ac 01       	movw	r20, r24
    11ae:	c5 01       	movw	r24, r10
    11b0:	b4 01       	movw	r22, r8
    11b2:	0e 94 88 0b 	call	0x1710	; 0x1710 <__divsf3>
    11b6:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <__fixsfsi>
    11ba:	6b 01       	movw	r12, r22
    11bc:	26 c0       	rjmp	.+76     	; 0x120a <pos_read+0xe8>
    }

    else if (ADC_X < (P_cal.center_X - 20)){
        ADC_X = (ADC_X / ((float)P_cal.center_X)) * 100 - 100;   // // Scaling when value is larger then center value
    11be:	07 2e       	mov	r0, r23
    11c0:	00 0c       	add	r0, r0
    11c2:	88 0b       	sbc	r24, r24
    11c4:	99 0b       	sbc	r25, r25
    11c6:	0e 94 32 0c 	call	0x1864	; 0x1864 <__floatsisf>
    11ca:	4b 01       	movw	r8, r22
    11cc:	5c 01       	movw	r10, r24
    11ce:	b8 01       	movw	r22, r16
    11d0:	11 0f       	add	r17, r17
    11d2:	88 0b       	sbc	r24, r24
    11d4:	99 0b       	sbc	r25, r25
    11d6:	0e 94 32 0c 	call	0x1864	; 0x1864 <__floatsisf>
    11da:	9b 01       	movw	r18, r22
    11dc:	ac 01       	movw	r20, r24
    11de:	c5 01       	movw	r24, r10
    11e0:	b4 01       	movw	r22, r8
    11e2:	0e 94 88 0b 	call	0x1710	; 0x1710 <__divsf3>
    11e6:	20 e0       	ldi	r18, 0x00	; 0
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	48 ec       	ldi	r20, 0xC8	; 200
    11ec:	52 e4       	ldi	r21, 0x42	; 66
    11ee:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <__mulsf3>
    11f2:	20 e0       	ldi	r18, 0x00	; 0
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	48 ec       	ldi	r20, 0xC8	; 200
    11f8:	52 e4       	ldi	r21, 0x42	; 66
    11fa:	0e 94 a4 0a 	call	0x1548	; 0x1548 <__subsf3>
    11fe:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <__fixsfsi>
    1202:	6b 01       	movw	r12, r22
    1204:	02 c0       	rjmp	.+4      	; 0x120a <pos_read+0xe8>
    int ADC_X = ADC_read(1);

    // X read

    if((ADC_X >= (P_cal.center_X - 20)) && (ADC_X <= (P_cal.center_X + 20))){ //Deadspace for joystick
        ADC_X = 0;
    1206:	c1 2c       	mov	r12, r1
    1208:	d1 2c       	mov	r13, r1
        ADC_X = (ADC_X / ((float)P_cal.center_X)) * 100 - 100;   // // Scaling when value is larger then center value
    }

    // Y read

    if(ADC_Y >= (P_cal.center_Y - 80) && ADC_Y <= (P_cal.center_Y + 80)){  //Deadspace for joystick
    120a:	00 91 ca 02 	lds	r16, 0x02CA	; 0x8002ca <P_cal+0x2>
    120e:	10 91 cb 02 	lds	r17, 0x02CB	; 0x8002cb <P_cal+0x3>
    1212:	c8 01       	movw	r24, r16
    1214:	80 55       	subi	r24, 0x50	; 80
    1216:	91 09       	sbc	r25, r1
    1218:	c8 17       	cp	r28, r24
    121a:	d9 07       	cpc	r29, r25
    121c:	0c f4       	brge	.+2      	; 0x1220 <pos_read+0xfe>
    121e:	5f c0       	rjmp	.+190    	; 0x12de <pos_read+0x1bc>
    1220:	80 56       	subi	r24, 0x60	; 96
    1222:	9f 4f       	sbci	r25, 0xFF	; 255
    1224:	8c 17       	cp	r24, r28
    1226:	9d 07       	cpc	r25, r29
    1228:	0c f0       	brlt	.+2      	; 0x122c <pos_read+0x10a>
    122a:	4a c0       	rjmp	.+148    	; 0x12c0 <pos_read+0x19e>
        ADC_Y = 0;
    }
    else if(ADC_Y > (P_cal.center_Y + 80)){
        ADC_Y = (ADC_Y - (P_cal.center_Y)) * 100.0 / (255.0 - P_cal.center_Y);  // Scaling when value is larger then center value
    122c:	c0 1b       	sub	r28, r16
    122e:	d1 0b       	sbc	r29, r17
    1230:	be 01       	movw	r22, r28
    1232:	dd 0f       	add	r29, r29
    1234:	88 0b       	sbc	r24, r24
    1236:	99 0b       	sbc	r25, r25
    1238:	0e 94 32 0c 	call	0x1864	; 0x1864 <__floatsisf>
    123c:	20 e0       	ldi	r18, 0x00	; 0
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	48 ec       	ldi	r20, 0xC8	; 200
    1242:	52 e4       	ldi	r21, 0x42	; 66
    1244:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <__mulsf3>
    1248:	4b 01       	movw	r8, r22
    124a:	5c 01       	movw	r10, r24
    124c:	b8 01       	movw	r22, r16
    124e:	11 0f       	add	r17, r17
    1250:	88 0b       	sbc	r24, r24
    1252:	99 0b       	sbc	r25, r25
    1254:	0e 94 32 0c 	call	0x1864	; 0x1864 <__floatsisf>
    1258:	9b 01       	movw	r18, r22
    125a:	ac 01       	movw	r20, r24
    125c:	60 e0       	ldi	r22, 0x00	; 0
    125e:	70 e0       	ldi	r23, 0x00	; 0
    1260:	8f e7       	ldi	r24, 0x7F	; 127
    1262:	93 e4       	ldi	r25, 0x43	; 67
    1264:	0e 94 a4 0a 	call	0x1548	; 0x1548 <__subsf3>
    1268:	9b 01       	movw	r18, r22
    126a:	ac 01       	movw	r20, r24
    126c:	c5 01       	movw	r24, r10
    126e:	b4 01       	movw	r22, r8
    1270:	0e 94 88 0b 	call	0x1710	; 0x1710 <__divsf3>
    1274:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <__fixsfsi>
    1278:	25 c0       	rjmp	.+74     	; 0x12c4 <pos_read+0x1a2>
    }

    else if (ADC_Y < (P_cal.center_Y - 80)){
        ADC_Y = (ADC_Y / ((float)P_cal.center_Y)) * 100 - 100;   // Scaling when value is smaller then center value
    127a:	be 01       	movw	r22, r28
    127c:	dd 0f       	add	r29, r29
    127e:	88 0b       	sbc	r24, r24
    1280:	99 0b       	sbc	r25, r25
    1282:	0e 94 32 0c 	call	0x1864	; 0x1864 <__floatsisf>
    1286:	4b 01       	movw	r8, r22
    1288:	5c 01       	movw	r10, r24
    128a:	b8 01       	movw	r22, r16
    128c:	11 0f       	add	r17, r17
    128e:	88 0b       	sbc	r24, r24
    1290:	99 0b       	sbc	r25, r25
    1292:	0e 94 32 0c 	call	0x1864	; 0x1864 <__floatsisf>
    1296:	9b 01       	movw	r18, r22
    1298:	ac 01       	movw	r20, r24
    129a:	c5 01       	movw	r24, r10
    129c:	b4 01       	movw	r22, r8
    129e:	0e 94 88 0b 	call	0x1710	; 0x1710 <__divsf3>
    12a2:	20 e0       	ldi	r18, 0x00	; 0
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	48 ec       	ldi	r20, 0xC8	; 200
    12a8:	52 e4       	ldi	r21, 0x42	; 66
    12aa:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <__mulsf3>
    12ae:	20 e0       	ldi	r18, 0x00	; 0
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	48 ec       	ldi	r20, 0xC8	; 200
    12b4:	52 e4       	ldi	r21, 0x42	; 66
    12b6:	0e 94 a4 0a 	call	0x1548	; 0x1548 <__subsf3>
    12ba:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <__fixsfsi>
    12be:	02 c0       	rjmp	.+4      	; 0x12c4 <pos_read+0x1a2>
    }

    // Y read

    if(ADC_Y >= (P_cal.center_Y - 80) && ADC_Y <= (P_cal.center_Y + 80)){  //Deadspace for joystick
        ADC_Y = 0;
    12c0:	60 e0       	ldi	r22, 0x00	; 0
    12c2:	70 e0       	ldi	r23, 0x00	; 0

    else if (ADC_Y < (P_cal.center_Y - 80)){
        ADC_Y = (ADC_Y / ((float)P_cal.center_Y)) * 100 - 100;   // Scaling when value is smaller then center value
    }

    pos -> posX = ADC_X;
    12c4:	f7 01       	movw	r30, r14
    12c6:	d1 82       	std	Z+1, r13	; 0x01
    12c8:	c0 82       	st	Z, r12
    pos -> posY = ADC_Y;
    12ca:	73 83       	std	Z+3, r23	; 0x03
    12cc:	62 83       	std	Z+2, r22	; 0x02
}
    12ce:	0e c0       	rjmp	.+28     	; 0x12ec <pos_read+0x1ca>
    // X read

    if((ADC_X >= (P_cal.center_X - 20)) && (ADC_X <= (P_cal.center_X + 20))){ //Deadspace for joystick
        ADC_X = 0;
    }
    else if(ADC_X > (P_cal.center_X + 20)){
    12d0:	c8 01       	movw	r24, r16
    12d2:	44 96       	adiw	r24, 0x14	; 20
    12d4:	86 17       	cp	r24, r22
    12d6:	97 07       	cpc	r25, r23
    12d8:	0c f4       	brge	.+2      	; 0x12dc <pos_read+0x1ba>
    12da:	49 cf       	rjmp	.-366    	; 0x116e <pos_read+0x4c>
    12dc:	70 cf       	rjmp	.-288    	; 0x11be <pos_read+0x9c>
    // Y read

    if(ADC_Y >= (P_cal.center_Y - 80) && ADC_Y <= (P_cal.center_Y + 80)){  //Deadspace for joystick
        ADC_Y = 0;
    }
    else if(ADC_Y > (P_cal.center_Y + 80)){
    12de:	c8 01       	movw	r24, r16
    12e0:	80 5b       	subi	r24, 0xB0	; 176
    12e2:	9f 4f       	sbci	r25, 0xFF	; 255
    12e4:	8c 17       	cp	r24, r28
    12e6:	9d 07       	cpc	r25, r29
    12e8:	44 f6       	brge	.-112    	; 0x127a <pos_read+0x158>
    12ea:	a0 cf       	rjmp	.-192    	; 0x122c <pos_read+0x10a>
        ADC_Y = (ADC_Y / ((float)P_cal.center_Y)) * 100 - 100;   // Scaling when value is smaller then center value
    }

    pos -> posX = ADC_X;
    pos -> posY = ADC_Y;
}
    12ec:	df 91       	pop	r29
    12ee:	cf 91       	pop	r28
    12f0:	1f 91       	pop	r17
    12f2:	0f 91       	pop	r16
    12f4:	ff 90       	pop	r15
    12f6:	ef 90       	pop	r14
    12f8:	df 90       	pop	r13
    12fa:	cf 90       	pop	r12
    12fc:	bf 90       	pop	r11
    12fe:	af 90       	pop	r10
    1300:	9f 90       	pop	r9
    1302:	8f 90       	pop	r8
    1304:	08 95       	ret

00001306 <joystick_direction>:

DIRECTION joystick_direction(void){
    1306:	8f 92       	push	r8
    1308:	9f 92       	push	r9
    130a:	af 92       	push	r10
    130c:	bf 92       	push	r11
    130e:	cf 92       	push	r12
    1310:	df 92       	push	r13
    1312:	ef 92       	push	r14
    1314:	ff 92       	push	r15
    1316:	cf 93       	push	r28
    1318:	df 93       	push	r29

    pos_read(&P_pos);
    131a:	8c ec       	ldi	r24, 0xCC	; 204
    131c:	92 e0       	ldi	r25, 0x02	; 2
    131e:	0e 94 91 08 	call	0x1122	; 0x1122 <pos_read>

    int angle = atan2(P_pos.posY, P_pos.posX);
    1322:	ec ec       	ldi	r30, 0xCC	; 204
    1324:	f2 e0       	ldi	r31, 0x02	; 2
    1326:	e0 80       	ld	r14, Z
    1328:	f1 80       	ldd	r15, Z+1	; 0x01
    132a:	c2 81       	ldd	r28, Z+2	; 0x02
    132c:	d3 81       	ldd	r29, Z+3	; 0x03
    132e:	b7 01       	movw	r22, r14
    1330:	0f 2c       	mov	r0, r15
    1332:	00 0c       	add	r0, r0
    1334:	88 0b       	sbc	r24, r24
    1336:	99 0b       	sbc	r25, r25
    1338:	0e 94 32 0c 	call	0x1864	; 0x1864 <__floatsisf>
    133c:	4b 01       	movw	r8, r22
    133e:	5c 01       	movw	r10, r24
    1340:	be 01       	movw	r22, r28
    1342:	0d 2e       	mov	r0, r29
    1344:	00 0c       	add	r0, r0
    1346:	88 0b       	sbc	r24, r24
    1348:	99 0b       	sbc	r25, r25
    134a:	0e 94 32 0c 	call	0x1864	; 0x1864 <__floatsisf>
    134e:	a5 01       	movw	r20, r10
    1350:	94 01       	movw	r18, r8
    1352:	0e 94 24 0b 	call	0x1648	; 0x1648 <atan2>

    if(!P_pos.posY & !P_pos.posX){
    1356:	21 e0       	ldi	r18, 0x01	; 1
    1358:	cd 2b       	or	r28, r29
    135a:	09 f0       	breq	.+2      	; 0x135e <joystick_direction+0x58>
    135c:	20 e0       	ldi	r18, 0x00	; 0
    135e:	22 23       	and	r18, r18
    1360:	31 f0       	breq	.+12     	; 0x136e <joystick_direction+0x68>
    1362:	21 e0       	ldi	r18, 0x01	; 1
    1364:	ef 28       	or	r14, r15
    1366:	09 f0       	breq	.+2      	; 0x136a <joystick_direction+0x64>
    1368:	20 e0       	ldi	r18, 0x00	; 0
    136a:	21 11       	cpse	r18, r1
    136c:	79 c0       	rjmp	.+242    	; 0x1460 <joystick_direction+0x15a>
        return NEUTRAL;
    }

    else if(angle >= -PI / 4.0 & angle <= PI/4.0){
    136e:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <__fixsfsi>
    1372:	07 2e       	mov	r0, r23
    1374:	00 0c       	add	r0, r0
    1376:	88 0b       	sbc	r24, r24
    1378:	99 0b       	sbc	r25, r25
    137a:	0e 94 32 0c 	call	0x1864	; 0x1864 <__floatsisf>
    137e:	6b 01       	movw	r12, r22
    1380:	7c 01       	movw	r14, r24
    1382:	c1 e0       	ldi	r28, 0x01	; 1
    1384:	2b ed       	ldi	r18, 0xDB	; 219
    1386:	3f e0       	ldi	r19, 0x0F	; 15
    1388:	49 e4       	ldi	r20, 0x49	; 73
    138a:	5f eb       	ldi	r21, 0xBF	; 191
    138c:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__gesf2>
    1390:	88 23       	and	r24, r24
    1392:	0c f4       	brge	.+2      	; 0x1396 <joystick_direction+0x90>
    1394:	c0 e0       	ldi	r28, 0x00	; 0
    1396:	cc 23       	and	r28, r28
    1398:	71 f0       	breq	.+28     	; 0x13b6 <joystick_direction+0xb0>
    139a:	c1 e0       	ldi	r28, 0x01	; 1
    139c:	2b ed       	ldi	r18, 0xDB	; 219
    139e:	3f e0       	ldi	r19, 0x0F	; 15
    13a0:	49 e4       	ldi	r20, 0x49	; 73
    13a2:	5f e3       	ldi	r21, 0x3F	; 63
    13a4:	c7 01       	movw	r24, r14
    13a6:	b6 01       	movw	r22, r12
    13a8:	0e 94 83 0b 	call	0x1706	; 0x1706 <__cmpsf2>
    13ac:	18 16       	cp	r1, r24
    13ae:	0c f4       	brge	.+2      	; 0x13b2 <joystick_direction+0xac>
    13b0:	c0 e0       	ldi	r28, 0x00	; 0
    13b2:	c1 11       	cpse	r28, r1
    13b4:	57 c0       	rjmp	.+174    	; 0x1464 <joystick_direction+0x15e>
        return RIGHT;
    }

    else if(angle >= -3 * PI/4.0 & angle <= -PI / 4.0){
    13b6:	c1 e0       	ldi	r28, 0x01	; 1
    13b8:	24 ee       	ldi	r18, 0xE4	; 228
    13ba:	3b ec       	ldi	r19, 0xCB	; 203
    13bc:	46 e1       	ldi	r20, 0x16	; 22
    13be:	50 ec       	ldi	r21, 0xC0	; 192
    13c0:	c7 01       	movw	r24, r14
    13c2:	b6 01       	movw	r22, r12
    13c4:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__gesf2>
    13c8:	88 23       	and	r24, r24
    13ca:	0c f4       	brge	.+2      	; 0x13ce <joystick_direction+0xc8>
    13cc:	c0 e0       	ldi	r28, 0x00	; 0
    13ce:	cc 23       	and	r28, r28
    13d0:	71 f0       	breq	.+28     	; 0x13ee <joystick_direction+0xe8>
    13d2:	c1 e0       	ldi	r28, 0x01	; 1
    13d4:	2b ed       	ldi	r18, 0xDB	; 219
    13d6:	3f e0       	ldi	r19, 0x0F	; 15
    13d8:	49 e4       	ldi	r20, 0x49	; 73
    13da:	5f eb       	ldi	r21, 0xBF	; 191
    13dc:	c7 01       	movw	r24, r14
    13de:	b6 01       	movw	r22, r12
    13e0:	0e 94 83 0b 	call	0x1706	; 0x1706 <__cmpsf2>
    13e4:	18 16       	cp	r1, r24
    13e6:	0c f4       	brge	.+2      	; 0x13ea <joystick_direction+0xe4>
    13e8:	c0 e0       	ldi	r28, 0x00	; 0
    13ea:	c1 11       	cpse	r28, r1
    13ec:	3d c0       	rjmp	.+122    	; 0x1468 <joystick_direction+0x162>
        return DOWN;
    }

    else if(angle >= 3 * PI/4 | angle <= -3* PI / 4.0){
    13ee:	c1 e0       	ldi	r28, 0x01	; 1
    13f0:	24 ee       	ldi	r18, 0xE4	; 228
    13f2:	3b ec       	ldi	r19, 0xCB	; 203
    13f4:	46 e1       	ldi	r20, 0x16	; 22
    13f6:	50 e4       	ldi	r21, 0x40	; 64
    13f8:	c7 01       	movw	r24, r14
    13fa:	b6 01       	movw	r22, r12
    13fc:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__gesf2>
    1400:	88 23       	and	r24, r24
    1402:	0c f4       	brge	.+2      	; 0x1406 <joystick_direction+0x100>
    1404:	c0 e0       	ldi	r28, 0x00	; 0
    1406:	c1 11       	cpse	r28, r1
    1408:	31 c0       	rjmp	.+98     	; 0x146c <joystick_direction+0x166>
    140a:	c1 e0       	ldi	r28, 0x01	; 1
    140c:	24 ee       	ldi	r18, 0xE4	; 228
    140e:	3b ec       	ldi	r19, 0xCB	; 203
    1410:	46 e1       	ldi	r20, 0x16	; 22
    1412:	50 ec       	ldi	r21, 0xC0	; 192
    1414:	c7 01       	movw	r24, r14
    1416:	b6 01       	movw	r22, r12
    1418:	0e 94 83 0b 	call	0x1706	; 0x1706 <__cmpsf2>
    141c:	18 16       	cp	r1, r24
    141e:	0c f4       	brge	.+2      	; 0x1422 <joystick_direction+0x11c>
    1420:	c0 e0       	ldi	r28, 0x00	; 0
    1422:	c1 11       	cpse	r28, r1
    1424:	23 c0       	rjmp	.+70     	; 0x146c <joystick_direction+0x166>
        return LEFT;
    }

    else if(angle >= PI / 4 & angle <= 3*PI / 4.0){
    1426:	c1 e0       	ldi	r28, 0x01	; 1
    1428:	2b ed       	ldi	r18, 0xDB	; 219
    142a:	3f e0       	ldi	r19, 0x0F	; 15
    142c:	49 e4       	ldi	r20, 0x49	; 73
    142e:	5f e3       	ldi	r21, 0x3F	; 63
    1430:	c7 01       	movw	r24, r14
    1432:	b6 01       	movw	r22, r12
    1434:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__gesf2>
    1438:	88 23       	and	r24, r24
    143a:	0c f4       	brge	.+2      	; 0x143e <joystick_direction+0x138>
    143c:	c0 e0       	ldi	r28, 0x00	; 0
    143e:	cc 23       	and	r28, r28
    1440:	71 f0       	breq	.+28     	; 0x145e <joystick_direction+0x158>
    1442:	c1 e0       	ldi	r28, 0x01	; 1
    1444:	24 ee       	ldi	r18, 0xE4	; 228
    1446:	3b ec       	ldi	r19, 0xCB	; 203
    1448:	46 e1       	ldi	r20, 0x16	; 22
    144a:	50 e4       	ldi	r21, 0x40	; 64
    144c:	c7 01       	movw	r24, r14
    144e:	b6 01       	movw	r22, r12
    1450:	0e 94 83 0b 	call	0x1706	; 0x1706 <__cmpsf2>
    1454:	18 16       	cp	r1, r24
    1456:	0c f4       	brge	.+2      	; 0x145a <joystick_direction+0x154>
    1458:	c0 e0       	ldi	r28, 0x00	; 0
    145a:	c1 11       	cpse	r28, r1
    145c:	09 c0       	rjmp	.+18     	; 0x1470 <joystick_direction+0x16a>
        return UP;
    }
}
    145e:	09 c0       	rjmp	.+18     	; 0x1472 <joystick_direction+0x16c>
    pos_read(&P_pos);

    int angle = atan2(P_pos.posY, P_pos.posX);

    if(!P_pos.posY & !P_pos.posX){
        return NEUTRAL;
    1460:	84 e0       	ldi	r24, 0x04	; 4
    1462:	07 c0       	rjmp	.+14     	; 0x1472 <joystick_direction+0x16c>
    }

    else if(angle >= -PI / 4.0 & angle <= PI/4.0){
        return RIGHT;
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	05 c0       	rjmp	.+10     	; 0x1472 <joystick_direction+0x16c>
    }

    else if(angle >= -3 * PI/4.0 & angle <= -PI / 4.0){
        return DOWN;
    1468:	83 e0       	ldi	r24, 0x03	; 3
    146a:	03 c0       	rjmp	.+6      	; 0x1472 <joystick_direction+0x16c>
    }

    else if(angle >= 3 * PI/4 | angle <= -3* PI / 4.0){
        return LEFT;
    146c:	80 e0       	ldi	r24, 0x00	; 0
    146e:	01 c0       	rjmp	.+2      	; 0x1472 <joystick_direction+0x16c>
    }

    else if(angle >= PI / 4 & angle <= 3*PI / 4.0){
        return UP;
    1470:	82 e0       	ldi	r24, 0x02	; 2
    }
}
    1472:	df 91       	pop	r29
    1474:	cf 91       	pop	r28
    1476:	ff 90       	pop	r15
    1478:	ef 90       	pop	r14
    147a:	df 90       	pop	r13
    147c:	cf 90       	pop	r12
    147e:	bf 90       	pop	r11
    1480:	af 90       	pop	r10
    1482:	9f 90       	pop	r9
    1484:	8f 90       	pop	r8
    1486:	08 95       	ret

00001488 <pos_readSettings>:

void pos_readSettings(void){
	
	DDRB &= ~(1 << PB1);
    1488:	b9 98       	cbi	0x17, 1	; 23
	DDRD &= ~(1 << PD4);
    148a:	8c 98       	cbi	0x11, 4	; 17
	DDRD &= ~(1 << PD5);
    148c:	8d 98       	cbi	0x11, 5	; 17

	PORTB |= (1 << PB1); // internal pull up enable
    148e:	c1 9a       	sbi	0x18, 1	; 24
    1490:	08 95       	ret

00001492 <usb_button_pushed>:

uint8_t usb_button_pushed(USB_BUTTON BUTTON){

    uint8_t pressed;

    if(BUTTON == LEFT_BUTTON){
    1492:	81 30       	cpi	r24, 0x01	; 1
    1494:	19 f4       	brne	.+6      	; 0x149c <usb_button_pushed+0xa>
        pressed = (PIND & (1 << PD4) );
    1496:	80 b3       	in	r24, 0x10	; 16
    1498:	80 71       	andi	r24, 0x10	; 16
    149a:	08 95       	ret

		}

    if(BUTTON == RIGHT_BUTTON){
    149c:	81 11       	cpse	r24, r1
    149e:	03 c0       	rjmp	.+6      	; 0x14a6 <usb_button_pushed+0x14>
        pressed =  (PIND & (1 << PD5) );
    14a0:	80 b3       	in	r24, 0x10	; 16
    14a2:	80 72       	andi	r24, 0x20	; 32
    14a4:	08 95       	ret
		}

    if(BUTTON == JOYSTICK_BUTTON){
    14a6:	82 30       	cpi	r24, 0x02	; 2
    14a8:	31 f4       	brne	.+12     	; 0x14b6 <usb_button_pushed+0x24>
        pressed =  (PINB & (1 << PB1) );
    14aa:	86 b3       	in	r24, 0x16	; 22
        return !pressed;
    14ac:	86 95       	lsr	r24
    14ae:	81 70       	andi	r24, 0x01	; 1
    14b0:	91 e0       	ldi	r25, 0x01	; 1
    14b2:	89 27       	eor	r24, r25
    14b4:	08 95       	ret
    14b6:	80 e0       	ldi	r24, 0x00	; 0
		}

    return pressed;
}
    14b8:	08 95       	ret

000014ba <main>:
#include "music.h"

int main(void)
{
	// Initializes everything needed for operation 
    InitMusic();
    14ba:	0e 94 df 03 	call	0x7be	; 0x7be <InitMusic>
    SRAM_init();
    14be:	0e 94 8d 0a 	call	0x151a	; 0x151a <SRAM_init>
    ADC_timer_init();
    14c2:	0e 94 0a 02 	call	0x414	; 0x414 <ADC_timer_init>
    USART_init();
    14c6:	0e 94 94 0a 	call	0x1528	; 0x1528 <USART_init>
    fdevopen(USART_send, USART_receive);
    14ca:	6c e9       	ldi	r22, 0x9C	; 156
    14cc:	7a e0       	ldi	r23, 0x0A	; 10
    14ce:	80 ea       	ldi	r24, 0xA0	; 160
    14d0:	9a e0       	ldi	r25, 0x0A	; 10
    14d2:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <fdevopen>
    ADC_calibrate(&P_cal);
    14d6:	88 ec       	ldi	r24, 0xC8	; 200
    14d8:	92 e0       	ldi	r25, 0x02	; 2
    14da:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <ADC_calibrate>
    OLED_init();
    14de:	0e 94 66 04 	call	0x8cc	; 0x8cc <OLED_init>
    pos_readSettings();
    14e2:	0e 94 44 0a 	call	0x1488	; 0x1488 <pos_readSettings>
    oled_clear();
    14e6:	0e 94 42 04 	call	0x884	; 0x884 <oled_clear>
	CAN_init(MODE_NORMAL);
    14ea:	80 e0       	ldi	r24, 0x00	; 0
    14ec:	0e 94 17 02 	call	0x42e	; 0x42e <CAN_init>
	
	// Where all interactions occur
    menu();
    14f0:	0e 94 cb 07 	call	0xf96	; 0xf96 <menu>
} 
    14f4:	80 e0       	ldi	r24, 0x00	; 0
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	08 95       	ret

000014fa <spi_write>:
#include "spi_driver.h"


void spi_write(char data){

    SPDR = data;
    14fa:	8f b9       	out	0x0f, r24	; 15
    while( !(SPSR & (1<<SPIF)) );
    14fc:	77 9b       	sbis	0x0e, 7	; 14
    14fe:	fe cf       	rjmp	.-4      	; 0x14fc <spi_write+0x2>

}
    1500:	08 95       	ret

00001502 <spi_read>:

char spi_read(void){

    spi_write(DUMMY);
    1502:	86 e5       	ldi	r24, 0x56	; 86
    1504:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <spi_write>
	
    return SPDR;
    1508:	8f b1       	in	r24, 0x0f	; 15
}
    150a:	08 95       	ret

0000150c <spi_init>:

void spi_init(void){
    DDR_SPI |= (1 << SCK) | (1 << MOSI) | (1 << SS);
    150c:	87 b3       	in	r24, 0x17	; 23
    150e:	80 6b       	ori	r24, 0xB0	; 176
    1510:	87 bb       	out	0x17, r24	; 23

    SPCR |= (1 << SPE) | (1 << MSTR) | (1<<SPR0);  // Enable SPI and set as master
    1512:	8d b1       	in	r24, 0x0d	; 13
    1514:	81 65       	ori	r24, 0x51	; 81
    1516:	8d b9       	out	0x0d, r24	; 13
    1518:	08 95       	ret

0000151a <SRAM_init>:
*/

#include "SRAM_driver.h"

void SRAM_init(void){
    MCUCR |= (1 << SRE);     //external SRAM enable (mcu control register)
    151a:	85 b7       	in	r24, 0x35	; 53
    151c:	80 68       	ori	r24, 0x80	; 128
    151e:	85 bf       	out	0x35, r24	; 53
    SFIOR |= (1 << XMM2);    //excludes memory occupied by JTAG
    1520:	80 b7       	in	r24, 0x30	; 48
    1522:	80 62       	ori	r24, 0x20	; 32
    1524:	80 bf       	out	0x30, r24	; 48
    1526:	08 95       	ret

00001528 <USART_init>:

#include "UART_driver.h"


void USART_init(void){
    UBRR0L = (uint8_t)(BAUD_PRESCALER);
    1528:	8f e1       	ldi	r24, 0x1F	; 31
    152a:	89 b9       	out	0x09, r24	; 9
    UBRR0H = (uint8_t)((uint8_t) BAUD_PRESCALER>>8);
    152c:	10 bc       	out	0x20, r1	; 32
    UCSR0B = (1 << RXEN0)|(1 << TXEN0);
    152e:	88 e1       	ldi	r24, 0x18	; 24
    1530:	8a b9       	out	0x0a, r24	; 10
    UCSR0C = (1 << URSEL0)|(1 << USBS0)|(3 << UCSZ00);
    1532:	8e e8       	ldi	r24, 0x8E	; 142
    1534:	80 bd       	out	0x20, r24	; 32
    1536:	08 95       	ret

00001538 <USART_receive>:
}

unsigned char USART_receive(void){
    while(!(UCSR0A & (1 << RXC0)));
    1538:	5f 9b       	sbis	0x0b, 7	; 11
    153a:	fe cf       	rjmp	.-4      	; 0x1538 <USART_receive>
    return UDR0;
    153c:	8c b1       	in	r24, 0x0c	; 12
}
    153e:	08 95       	ret

00001540 <USART_send>:

void USART_send( unsigned char data){
    while(!(UCSR0A & (1 << UDRE0)));
    1540:	5d 9b       	sbis	0x0b, 5	; 11
    1542:	fe cf       	rjmp	.-4      	; 0x1540 <USART_send>
    UDR0 = data;
    1544:	8c b9       	out	0x0c, r24	; 12
    1546:	08 95       	ret

00001548 <__subsf3>:
    1548:	50 58       	subi	r21, 0x80	; 128

0000154a <__addsf3>:
    154a:	bb 27       	eor	r27, r27
    154c:	aa 27       	eor	r26, r26
    154e:	0e 94 bc 0a 	call	0x1578	; 0x1578 <__addsf3x>
    1552:	0c 94 cf 0c 	jmp	0x199e	; 0x199e <__fp_round>
    1556:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__fp_pscA>
    155a:	38 f0       	brcs	.+14     	; 0x156a <__addsf3+0x20>
    155c:	0e 94 c8 0c 	call	0x1990	; 0x1990 <__fp_pscB>
    1560:	20 f0       	brcs	.+8      	; 0x156a <__addsf3+0x20>
    1562:	39 f4       	brne	.+14     	; 0x1572 <__addsf3+0x28>
    1564:	9f 3f       	cpi	r25, 0xFF	; 255
    1566:	19 f4       	brne	.+6      	; 0x156e <__addsf3+0x24>
    1568:	26 f4       	brtc	.+8      	; 0x1572 <__addsf3+0x28>
    156a:	0c 94 97 0c 	jmp	0x192e	; 0x192e <__fp_nan>
    156e:	0e f4       	brtc	.+2      	; 0x1572 <__addsf3+0x28>
    1570:	e0 95       	com	r30
    1572:	e7 fb       	bst	r30, 7
    1574:	0c 94 91 0c 	jmp	0x1922	; 0x1922 <__fp_inf>

00001578 <__addsf3x>:
    1578:	e9 2f       	mov	r30, r25
    157a:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <__fp_split3>
    157e:	58 f3       	brcs	.-42     	; 0x1556 <__addsf3+0xc>
    1580:	ba 17       	cp	r27, r26
    1582:	62 07       	cpc	r22, r18
    1584:	73 07       	cpc	r23, r19
    1586:	84 07       	cpc	r24, r20
    1588:	95 07       	cpc	r25, r21
    158a:	20 f0       	brcs	.+8      	; 0x1594 <__addsf3x+0x1c>
    158c:	79 f4       	brne	.+30     	; 0x15ac <__addsf3x+0x34>
    158e:	a6 f5       	brtc	.+104    	; 0x15f8 <__addsf3x+0x80>
    1590:	0c 94 02 0d 	jmp	0x1a04	; 0x1a04 <__fp_zero>
    1594:	0e f4       	brtc	.+2      	; 0x1598 <__addsf3x+0x20>
    1596:	e0 95       	com	r30
    1598:	0b 2e       	mov	r0, r27
    159a:	ba 2f       	mov	r27, r26
    159c:	a0 2d       	mov	r26, r0
    159e:	0b 01       	movw	r0, r22
    15a0:	b9 01       	movw	r22, r18
    15a2:	90 01       	movw	r18, r0
    15a4:	0c 01       	movw	r0, r24
    15a6:	ca 01       	movw	r24, r20
    15a8:	a0 01       	movw	r20, r0
    15aa:	11 24       	eor	r1, r1
    15ac:	ff 27       	eor	r31, r31
    15ae:	59 1b       	sub	r21, r25
    15b0:	99 f0       	breq	.+38     	; 0x15d8 <__addsf3x+0x60>
    15b2:	59 3f       	cpi	r21, 0xF9	; 249
    15b4:	50 f4       	brcc	.+20     	; 0x15ca <__addsf3x+0x52>
    15b6:	50 3e       	cpi	r21, 0xE0	; 224
    15b8:	68 f1       	brcs	.+90     	; 0x1614 <__addsf3x+0x9c>
    15ba:	1a 16       	cp	r1, r26
    15bc:	f0 40       	sbci	r31, 0x00	; 0
    15be:	a2 2f       	mov	r26, r18
    15c0:	23 2f       	mov	r18, r19
    15c2:	34 2f       	mov	r19, r20
    15c4:	44 27       	eor	r20, r20
    15c6:	58 5f       	subi	r21, 0xF8	; 248
    15c8:	f3 cf       	rjmp	.-26     	; 0x15b0 <__addsf3x+0x38>
    15ca:	46 95       	lsr	r20
    15cc:	37 95       	ror	r19
    15ce:	27 95       	ror	r18
    15d0:	a7 95       	ror	r26
    15d2:	f0 40       	sbci	r31, 0x00	; 0
    15d4:	53 95       	inc	r21
    15d6:	c9 f7       	brne	.-14     	; 0x15ca <__addsf3x+0x52>
    15d8:	7e f4       	brtc	.+30     	; 0x15f8 <__addsf3x+0x80>
    15da:	1f 16       	cp	r1, r31
    15dc:	ba 0b       	sbc	r27, r26
    15de:	62 0b       	sbc	r22, r18
    15e0:	73 0b       	sbc	r23, r19
    15e2:	84 0b       	sbc	r24, r20
    15e4:	ba f0       	brmi	.+46     	; 0x1614 <__addsf3x+0x9c>
    15e6:	91 50       	subi	r25, 0x01	; 1
    15e8:	a1 f0       	breq	.+40     	; 0x1612 <__addsf3x+0x9a>
    15ea:	ff 0f       	add	r31, r31
    15ec:	bb 1f       	adc	r27, r27
    15ee:	66 1f       	adc	r22, r22
    15f0:	77 1f       	adc	r23, r23
    15f2:	88 1f       	adc	r24, r24
    15f4:	c2 f7       	brpl	.-16     	; 0x15e6 <__addsf3x+0x6e>
    15f6:	0e c0       	rjmp	.+28     	; 0x1614 <__addsf3x+0x9c>
    15f8:	ba 0f       	add	r27, r26
    15fa:	62 1f       	adc	r22, r18
    15fc:	73 1f       	adc	r23, r19
    15fe:	84 1f       	adc	r24, r20
    1600:	48 f4       	brcc	.+18     	; 0x1614 <__addsf3x+0x9c>
    1602:	87 95       	ror	r24
    1604:	77 95       	ror	r23
    1606:	67 95       	ror	r22
    1608:	b7 95       	ror	r27
    160a:	f7 95       	ror	r31
    160c:	9e 3f       	cpi	r25, 0xFE	; 254
    160e:	08 f0       	brcs	.+2      	; 0x1612 <__addsf3x+0x9a>
    1610:	b0 cf       	rjmp	.-160    	; 0x1572 <__addsf3+0x28>
    1612:	93 95       	inc	r25
    1614:	88 0f       	add	r24, r24
    1616:	08 f0       	brcs	.+2      	; 0x161a <__addsf3x+0xa2>
    1618:	99 27       	eor	r25, r25
    161a:	ee 0f       	add	r30, r30
    161c:	97 95       	ror	r25
    161e:	87 95       	ror	r24
    1620:	08 95       	ret
    1622:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__fp_pscA>
    1626:	60 f0       	brcs	.+24     	; 0x1640 <__addsf3x+0xc8>
    1628:	80 e8       	ldi	r24, 0x80	; 128
    162a:	91 e0       	ldi	r25, 0x01	; 1
    162c:	09 f4       	brne	.+2      	; 0x1630 <__addsf3x+0xb8>
    162e:	9e ef       	ldi	r25, 0xFE	; 254
    1630:	0e 94 c8 0c 	call	0x1990	; 0x1990 <__fp_pscB>
    1634:	28 f0       	brcs	.+10     	; 0x1640 <__addsf3x+0xc8>
    1636:	40 e8       	ldi	r20, 0x80	; 128
    1638:	51 e0       	ldi	r21, 0x01	; 1
    163a:	71 f4       	brne	.+28     	; 0x1658 <atan2+0x10>
    163c:	5e ef       	ldi	r21, 0xFE	; 254
    163e:	0c c0       	rjmp	.+24     	; 0x1658 <atan2+0x10>
    1640:	0c 94 97 0c 	jmp	0x192e	; 0x192e <__fp_nan>
    1644:	0c 94 02 0d 	jmp	0x1a04	; 0x1a04 <__fp_zero>

00001648 <atan2>:
    1648:	e9 2f       	mov	r30, r25
    164a:	e0 78       	andi	r30, 0x80	; 128
    164c:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <__fp_split3>
    1650:	40 f3       	brcs	.-48     	; 0x1622 <__addsf3x+0xaa>
    1652:	09 2e       	mov	r0, r25
    1654:	05 2a       	or	r0, r21
    1656:	b1 f3       	breq	.-20     	; 0x1644 <__addsf3x+0xcc>
    1658:	26 17       	cp	r18, r22
    165a:	37 07       	cpc	r19, r23
    165c:	48 07       	cpc	r20, r24
    165e:	59 07       	cpc	r21, r25
    1660:	38 f0       	brcs	.+14     	; 0x1670 <atan2+0x28>
    1662:	0e 2e       	mov	r0, r30
    1664:	07 f8       	bld	r0, 7
    1666:	e0 25       	eor	r30, r0
    1668:	69 f0       	breq	.+26     	; 0x1684 <atan2+0x3c>
    166a:	e0 25       	eor	r30, r0
    166c:	e0 64       	ori	r30, 0x40	; 64
    166e:	0a c0       	rjmp	.+20     	; 0x1684 <atan2+0x3c>
    1670:	ef 63       	ori	r30, 0x3F	; 63
    1672:	07 f8       	bld	r0, 7
    1674:	00 94       	com	r0
    1676:	07 fa       	bst	r0, 7
    1678:	db 01       	movw	r26, r22
    167a:	b9 01       	movw	r22, r18
    167c:	9d 01       	movw	r18, r26
    167e:	dc 01       	movw	r26, r24
    1680:	ca 01       	movw	r24, r20
    1682:	ad 01       	movw	r20, r26
    1684:	ef 93       	push	r30
    1686:	0e 94 9f 0b 	call	0x173e	; 0x173e <__divsf3_pse>
    168a:	0e 94 cf 0c 	call	0x199e	; 0x199e <__fp_round>
    168e:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <atan>
    1692:	5f 91       	pop	r21
    1694:	55 23       	and	r21, r21
    1696:	39 f0       	breq	.+14     	; 0x16a6 <atan2+0x5e>
    1698:	2b ed       	ldi	r18, 0xDB	; 219
    169a:	3f e0       	ldi	r19, 0x0F	; 15
    169c:	49 e4       	ldi	r20, 0x49	; 73
    169e:	50 fd       	sbrc	r21, 0
    16a0:	49 ec       	ldi	r20, 0xC9	; 201
    16a2:	0c 94 a5 0a 	jmp	0x154a	; 0x154a <__addsf3>
    16a6:	08 95       	ret

000016a8 <atan>:
    16a8:	df 93       	push	r29
    16aa:	dd 27       	eor	r29, r29
    16ac:	b9 2f       	mov	r27, r25
    16ae:	bf 77       	andi	r27, 0x7F	; 127
    16b0:	40 e8       	ldi	r20, 0x80	; 128
    16b2:	5f e3       	ldi	r21, 0x3F	; 63
    16b4:	16 16       	cp	r1, r22
    16b6:	17 06       	cpc	r1, r23
    16b8:	48 07       	cpc	r20, r24
    16ba:	5b 07       	cpc	r21, r27
    16bc:	18 f4       	brcc	.+6      	; 0x16c4 <atan+0x1c>
    16be:	d9 2f       	mov	r29, r25
    16c0:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <inverse>
    16c4:	9f 93       	push	r25
    16c6:	8f 93       	push	r24
    16c8:	7f 93       	push	r23
    16ca:	6f 93       	push	r22
    16cc:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <square>
    16d0:	e0 e7       	ldi	r30, 0x70	; 112
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	0e 94 9a 0c 	call	0x1934	; 0x1934 <__fp_powser>
    16d8:	0e 94 cf 0c 	call	0x199e	; 0x199e <__fp_round>
    16dc:	2f 91       	pop	r18
    16de:	3f 91       	pop	r19
    16e0:	4f 91       	pop	r20
    16e2:	5f 91       	pop	r21
    16e4:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <__mulsf3x>
    16e8:	dd 23       	and	r29, r29
    16ea:	51 f0       	breq	.+20     	; 0x1700 <atan+0x58>
    16ec:	90 58       	subi	r25, 0x80	; 128
    16ee:	a2 ea       	ldi	r26, 0xA2	; 162
    16f0:	2a ed       	ldi	r18, 0xDA	; 218
    16f2:	3f e0       	ldi	r19, 0x0F	; 15
    16f4:	49 ec       	ldi	r20, 0xC9	; 201
    16f6:	5f e3       	ldi	r21, 0x3F	; 63
    16f8:	d0 78       	andi	r29, 0x80	; 128
    16fa:	5d 27       	eor	r21, r29
    16fc:	0e 94 bc 0a 	call	0x1578	; 0x1578 <__addsf3x>
    1700:	df 91       	pop	r29
    1702:	0c 94 cf 0c 	jmp	0x199e	; 0x199e <__fp_round>

00001706 <__cmpsf2>:
    1706:	0e 94 6d 0c 	call	0x18da	; 0x18da <__fp_cmp>
    170a:	08 f4       	brcc	.+2      	; 0x170e <__cmpsf2+0x8>
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	08 95       	ret

00001710 <__divsf3>:
    1710:	0e 94 9c 0b 	call	0x1738	; 0x1738 <__divsf3x>
    1714:	0c 94 cf 0c 	jmp	0x199e	; 0x199e <__fp_round>
    1718:	0e 94 c8 0c 	call	0x1990	; 0x1990 <__fp_pscB>
    171c:	58 f0       	brcs	.+22     	; 0x1734 <__divsf3+0x24>
    171e:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__fp_pscA>
    1722:	40 f0       	brcs	.+16     	; 0x1734 <__divsf3+0x24>
    1724:	29 f4       	brne	.+10     	; 0x1730 <__divsf3+0x20>
    1726:	5f 3f       	cpi	r21, 0xFF	; 255
    1728:	29 f0       	breq	.+10     	; 0x1734 <__divsf3+0x24>
    172a:	0c 94 91 0c 	jmp	0x1922	; 0x1922 <__fp_inf>
    172e:	51 11       	cpse	r21, r1
    1730:	0c 94 03 0d 	jmp	0x1a06	; 0x1a06 <__fp_szero>
    1734:	0c 94 97 0c 	jmp	0x192e	; 0x192e <__fp_nan>

00001738 <__divsf3x>:
    1738:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <__fp_split3>
    173c:	68 f3       	brcs	.-38     	; 0x1718 <__divsf3+0x8>

0000173e <__divsf3_pse>:
    173e:	99 23       	and	r25, r25
    1740:	b1 f3       	breq	.-20     	; 0x172e <__divsf3+0x1e>
    1742:	55 23       	and	r21, r21
    1744:	91 f3       	breq	.-28     	; 0x172a <__divsf3+0x1a>
    1746:	95 1b       	sub	r25, r21
    1748:	55 0b       	sbc	r21, r21
    174a:	bb 27       	eor	r27, r27
    174c:	aa 27       	eor	r26, r26
    174e:	62 17       	cp	r22, r18
    1750:	73 07       	cpc	r23, r19
    1752:	84 07       	cpc	r24, r20
    1754:	38 f0       	brcs	.+14     	; 0x1764 <__divsf3_pse+0x26>
    1756:	9f 5f       	subi	r25, 0xFF	; 255
    1758:	5f 4f       	sbci	r21, 0xFF	; 255
    175a:	22 0f       	add	r18, r18
    175c:	33 1f       	adc	r19, r19
    175e:	44 1f       	adc	r20, r20
    1760:	aa 1f       	adc	r26, r26
    1762:	a9 f3       	breq	.-22     	; 0x174e <__divsf3_pse+0x10>
    1764:	35 d0       	rcall	.+106    	; 0x17d0 <__divsf3_pse+0x92>
    1766:	0e 2e       	mov	r0, r30
    1768:	3a f0       	brmi	.+14     	; 0x1778 <__divsf3_pse+0x3a>
    176a:	e0 e8       	ldi	r30, 0x80	; 128
    176c:	32 d0       	rcall	.+100    	; 0x17d2 <__divsf3_pse+0x94>
    176e:	91 50       	subi	r25, 0x01	; 1
    1770:	50 40       	sbci	r21, 0x00	; 0
    1772:	e6 95       	lsr	r30
    1774:	00 1c       	adc	r0, r0
    1776:	ca f7       	brpl	.-14     	; 0x176a <__divsf3_pse+0x2c>
    1778:	2b d0       	rcall	.+86     	; 0x17d0 <__divsf3_pse+0x92>
    177a:	fe 2f       	mov	r31, r30
    177c:	29 d0       	rcall	.+82     	; 0x17d0 <__divsf3_pse+0x92>
    177e:	66 0f       	add	r22, r22
    1780:	77 1f       	adc	r23, r23
    1782:	88 1f       	adc	r24, r24
    1784:	bb 1f       	adc	r27, r27
    1786:	26 17       	cp	r18, r22
    1788:	37 07       	cpc	r19, r23
    178a:	48 07       	cpc	r20, r24
    178c:	ab 07       	cpc	r26, r27
    178e:	b0 e8       	ldi	r27, 0x80	; 128
    1790:	09 f0       	breq	.+2      	; 0x1794 <__divsf3_pse+0x56>
    1792:	bb 0b       	sbc	r27, r27
    1794:	80 2d       	mov	r24, r0
    1796:	bf 01       	movw	r22, r30
    1798:	ff 27       	eor	r31, r31
    179a:	93 58       	subi	r25, 0x83	; 131
    179c:	5f 4f       	sbci	r21, 0xFF	; 255
    179e:	3a f0       	brmi	.+14     	; 0x17ae <__divsf3_pse+0x70>
    17a0:	9e 3f       	cpi	r25, 0xFE	; 254
    17a2:	51 05       	cpc	r21, r1
    17a4:	78 f0       	brcs	.+30     	; 0x17c4 <__divsf3_pse+0x86>
    17a6:	0c 94 91 0c 	jmp	0x1922	; 0x1922 <__fp_inf>
    17aa:	0c 94 03 0d 	jmp	0x1a06	; 0x1a06 <__fp_szero>
    17ae:	5f 3f       	cpi	r21, 0xFF	; 255
    17b0:	e4 f3       	brlt	.-8      	; 0x17aa <__divsf3_pse+0x6c>
    17b2:	98 3e       	cpi	r25, 0xE8	; 232
    17b4:	d4 f3       	brlt	.-12     	; 0x17aa <__divsf3_pse+0x6c>
    17b6:	86 95       	lsr	r24
    17b8:	77 95       	ror	r23
    17ba:	67 95       	ror	r22
    17bc:	b7 95       	ror	r27
    17be:	f7 95       	ror	r31
    17c0:	9f 5f       	subi	r25, 0xFF	; 255
    17c2:	c9 f7       	brne	.-14     	; 0x17b6 <__divsf3_pse+0x78>
    17c4:	88 0f       	add	r24, r24
    17c6:	91 1d       	adc	r25, r1
    17c8:	96 95       	lsr	r25
    17ca:	87 95       	ror	r24
    17cc:	97 f9       	bld	r25, 7
    17ce:	08 95       	ret
    17d0:	e1 e0       	ldi	r30, 0x01	; 1
    17d2:	66 0f       	add	r22, r22
    17d4:	77 1f       	adc	r23, r23
    17d6:	88 1f       	adc	r24, r24
    17d8:	bb 1f       	adc	r27, r27
    17da:	62 17       	cp	r22, r18
    17dc:	73 07       	cpc	r23, r19
    17de:	84 07       	cpc	r24, r20
    17e0:	ba 07       	cpc	r27, r26
    17e2:	20 f0       	brcs	.+8      	; 0x17ec <__divsf3_pse+0xae>
    17e4:	62 1b       	sub	r22, r18
    17e6:	73 0b       	sbc	r23, r19
    17e8:	84 0b       	sbc	r24, r20
    17ea:	ba 0b       	sbc	r27, r26
    17ec:	ee 1f       	adc	r30, r30
    17ee:	88 f7       	brcc	.-30     	; 0x17d2 <__divsf3_pse+0x94>
    17f0:	e0 95       	com	r30
    17f2:	08 95       	ret

000017f4 <__fixsfsi>:
    17f4:	0e 94 01 0c 	call	0x1802	; 0x1802 <__fixunssfsi>
    17f8:	68 94       	set
    17fa:	b1 11       	cpse	r27, r1
    17fc:	0c 94 03 0d 	jmp	0x1a06	; 0x1a06 <__fp_szero>
    1800:	08 95       	ret

00001802 <__fixunssfsi>:
    1802:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <__fp_splitA>
    1806:	88 f0       	brcs	.+34     	; 0x182a <__fixunssfsi+0x28>
    1808:	9f 57       	subi	r25, 0x7F	; 127
    180a:	98 f0       	brcs	.+38     	; 0x1832 <__fixunssfsi+0x30>
    180c:	b9 2f       	mov	r27, r25
    180e:	99 27       	eor	r25, r25
    1810:	b7 51       	subi	r27, 0x17	; 23
    1812:	b0 f0       	brcs	.+44     	; 0x1840 <__fixunssfsi+0x3e>
    1814:	e1 f0       	breq	.+56     	; 0x184e <__fixunssfsi+0x4c>
    1816:	66 0f       	add	r22, r22
    1818:	77 1f       	adc	r23, r23
    181a:	88 1f       	adc	r24, r24
    181c:	99 1f       	adc	r25, r25
    181e:	1a f0       	brmi	.+6      	; 0x1826 <__fixunssfsi+0x24>
    1820:	ba 95       	dec	r27
    1822:	c9 f7       	brne	.-14     	; 0x1816 <__fixunssfsi+0x14>
    1824:	14 c0       	rjmp	.+40     	; 0x184e <__fixunssfsi+0x4c>
    1826:	b1 30       	cpi	r27, 0x01	; 1
    1828:	91 f0       	breq	.+36     	; 0x184e <__fixunssfsi+0x4c>
    182a:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <__fp_zero>
    182e:	b1 e0       	ldi	r27, 0x01	; 1
    1830:	08 95       	ret
    1832:	0c 94 02 0d 	jmp	0x1a04	; 0x1a04 <__fp_zero>
    1836:	67 2f       	mov	r22, r23
    1838:	78 2f       	mov	r23, r24
    183a:	88 27       	eor	r24, r24
    183c:	b8 5f       	subi	r27, 0xF8	; 248
    183e:	39 f0       	breq	.+14     	; 0x184e <__fixunssfsi+0x4c>
    1840:	b9 3f       	cpi	r27, 0xF9	; 249
    1842:	cc f3       	brlt	.-14     	; 0x1836 <__fixunssfsi+0x34>
    1844:	86 95       	lsr	r24
    1846:	77 95       	ror	r23
    1848:	67 95       	ror	r22
    184a:	b3 95       	inc	r27
    184c:	d9 f7       	brne	.-10     	; 0x1844 <__fixunssfsi+0x42>
    184e:	3e f4       	brtc	.+14     	; 0x185e <__fixunssfsi+0x5c>
    1850:	90 95       	com	r25
    1852:	80 95       	com	r24
    1854:	70 95       	com	r23
    1856:	61 95       	neg	r22
    1858:	7f 4f       	sbci	r23, 0xFF	; 255
    185a:	8f 4f       	sbci	r24, 0xFF	; 255
    185c:	9f 4f       	sbci	r25, 0xFF	; 255
    185e:	08 95       	ret

00001860 <__floatunsisf>:
    1860:	e8 94       	clt
    1862:	09 c0       	rjmp	.+18     	; 0x1876 <__floatsisf+0x12>

00001864 <__floatsisf>:
    1864:	97 fb       	bst	r25, 7
    1866:	3e f4       	brtc	.+14     	; 0x1876 <__floatsisf+0x12>
    1868:	90 95       	com	r25
    186a:	80 95       	com	r24
    186c:	70 95       	com	r23
    186e:	61 95       	neg	r22
    1870:	7f 4f       	sbci	r23, 0xFF	; 255
    1872:	8f 4f       	sbci	r24, 0xFF	; 255
    1874:	9f 4f       	sbci	r25, 0xFF	; 255
    1876:	99 23       	and	r25, r25
    1878:	a9 f0       	breq	.+42     	; 0x18a4 <__floatsisf+0x40>
    187a:	f9 2f       	mov	r31, r25
    187c:	96 e9       	ldi	r25, 0x96	; 150
    187e:	bb 27       	eor	r27, r27
    1880:	93 95       	inc	r25
    1882:	f6 95       	lsr	r31
    1884:	87 95       	ror	r24
    1886:	77 95       	ror	r23
    1888:	67 95       	ror	r22
    188a:	b7 95       	ror	r27
    188c:	f1 11       	cpse	r31, r1
    188e:	f8 cf       	rjmp	.-16     	; 0x1880 <__floatsisf+0x1c>
    1890:	fa f4       	brpl	.+62     	; 0x18d0 <__floatsisf+0x6c>
    1892:	bb 0f       	add	r27, r27
    1894:	11 f4       	brne	.+4      	; 0x189a <__floatsisf+0x36>
    1896:	60 ff       	sbrs	r22, 0
    1898:	1b c0       	rjmp	.+54     	; 0x18d0 <__floatsisf+0x6c>
    189a:	6f 5f       	subi	r22, 0xFF	; 255
    189c:	7f 4f       	sbci	r23, 0xFF	; 255
    189e:	8f 4f       	sbci	r24, 0xFF	; 255
    18a0:	9f 4f       	sbci	r25, 0xFF	; 255
    18a2:	16 c0       	rjmp	.+44     	; 0x18d0 <__floatsisf+0x6c>
    18a4:	88 23       	and	r24, r24
    18a6:	11 f0       	breq	.+4      	; 0x18ac <__floatsisf+0x48>
    18a8:	96 e9       	ldi	r25, 0x96	; 150
    18aa:	11 c0       	rjmp	.+34     	; 0x18ce <__floatsisf+0x6a>
    18ac:	77 23       	and	r23, r23
    18ae:	21 f0       	breq	.+8      	; 0x18b8 <__floatsisf+0x54>
    18b0:	9e e8       	ldi	r25, 0x8E	; 142
    18b2:	87 2f       	mov	r24, r23
    18b4:	76 2f       	mov	r23, r22
    18b6:	05 c0       	rjmp	.+10     	; 0x18c2 <__floatsisf+0x5e>
    18b8:	66 23       	and	r22, r22
    18ba:	71 f0       	breq	.+28     	; 0x18d8 <__floatsisf+0x74>
    18bc:	96 e8       	ldi	r25, 0x86	; 134
    18be:	86 2f       	mov	r24, r22
    18c0:	70 e0       	ldi	r23, 0x00	; 0
    18c2:	60 e0       	ldi	r22, 0x00	; 0
    18c4:	2a f0       	brmi	.+10     	; 0x18d0 <__floatsisf+0x6c>
    18c6:	9a 95       	dec	r25
    18c8:	66 0f       	add	r22, r22
    18ca:	77 1f       	adc	r23, r23
    18cc:	88 1f       	adc	r24, r24
    18ce:	da f7       	brpl	.-10     	; 0x18c6 <__floatsisf+0x62>
    18d0:	88 0f       	add	r24, r24
    18d2:	96 95       	lsr	r25
    18d4:	87 95       	ror	r24
    18d6:	97 f9       	bld	r25, 7
    18d8:	08 95       	ret

000018da <__fp_cmp>:
    18da:	99 0f       	add	r25, r25
    18dc:	00 08       	sbc	r0, r0
    18de:	55 0f       	add	r21, r21
    18e0:	aa 0b       	sbc	r26, r26
    18e2:	e0 e8       	ldi	r30, 0x80	; 128
    18e4:	fe ef       	ldi	r31, 0xFE	; 254
    18e6:	16 16       	cp	r1, r22
    18e8:	17 06       	cpc	r1, r23
    18ea:	e8 07       	cpc	r30, r24
    18ec:	f9 07       	cpc	r31, r25
    18ee:	c0 f0       	brcs	.+48     	; 0x1920 <__fp_cmp+0x46>
    18f0:	12 16       	cp	r1, r18
    18f2:	13 06       	cpc	r1, r19
    18f4:	e4 07       	cpc	r30, r20
    18f6:	f5 07       	cpc	r31, r21
    18f8:	98 f0       	brcs	.+38     	; 0x1920 <__fp_cmp+0x46>
    18fa:	62 1b       	sub	r22, r18
    18fc:	73 0b       	sbc	r23, r19
    18fe:	84 0b       	sbc	r24, r20
    1900:	95 0b       	sbc	r25, r21
    1902:	39 f4       	brne	.+14     	; 0x1912 <__fp_cmp+0x38>
    1904:	0a 26       	eor	r0, r26
    1906:	61 f0       	breq	.+24     	; 0x1920 <__fp_cmp+0x46>
    1908:	23 2b       	or	r18, r19
    190a:	24 2b       	or	r18, r20
    190c:	25 2b       	or	r18, r21
    190e:	21 f4       	brne	.+8      	; 0x1918 <__fp_cmp+0x3e>
    1910:	08 95       	ret
    1912:	0a 26       	eor	r0, r26
    1914:	09 f4       	brne	.+2      	; 0x1918 <__fp_cmp+0x3e>
    1916:	a1 40       	sbci	r26, 0x01	; 1
    1918:	a6 95       	lsr	r26
    191a:	8f ef       	ldi	r24, 0xFF	; 255
    191c:	81 1d       	adc	r24, r1
    191e:	81 1d       	adc	r24, r1
    1920:	08 95       	ret

00001922 <__fp_inf>:
    1922:	97 f9       	bld	r25, 7
    1924:	9f 67       	ori	r25, 0x7F	; 127
    1926:	80 e8       	ldi	r24, 0x80	; 128
    1928:	70 e0       	ldi	r23, 0x00	; 0
    192a:	60 e0       	ldi	r22, 0x00	; 0
    192c:	08 95       	ret

0000192e <__fp_nan>:
    192e:	9f ef       	ldi	r25, 0xFF	; 255
    1930:	80 ec       	ldi	r24, 0xC0	; 192
    1932:	08 95       	ret

00001934 <__fp_powser>:
    1934:	df 93       	push	r29
    1936:	cf 93       	push	r28
    1938:	1f 93       	push	r17
    193a:	0f 93       	push	r16
    193c:	ff 92       	push	r15
    193e:	ef 92       	push	r14
    1940:	df 92       	push	r13
    1942:	7b 01       	movw	r14, r22
    1944:	8c 01       	movw	r16, r24
    1946:	68 94       	set
    1948:	06 c0       	rjmp	.+12     	; 0x1956 <__fp_powser+0x22>
    194a:	da 2e       	mov	r13, r26
    194c:	ef 01       	movw	r28, r30
    194e:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <__mulsf3x>
    1952:	fe 01       	movw	r30, r28
    1954:	e8 94       	clt
    1956:	a5 91       	lpm	r26, Z+
    1958:	25 91       	lpm	r18, Z+
    195a:	35 91       	lpm	r19, Z+
    195c:	45 91       	lpm	r20, Z+
    195e:	55 91       	lpm	r21, Z+
    1960:	a6 f3       	brts	.-24     	; 0x194a <__fp_powser+0x16>
    1962:	ef 01       	movw	r28, r30
    1964:	0e 94 bc 0a 	call	0x1578	; 0x1578 <__addsf3x>
    1968:	fe 01       	movw	r30, r28
    196a:	97 01       	movw	r18, r14
    196c:	a8 01       	movw	r20, r16
    196e:	da 94       	dec	r13
    1970:	69 f7       	brne	.-38     	; 0x194c <__fp_powser+0x18>
    1972:	df 90       	pop	r13
    1974:	ef 90       	pop	r14
    1976:	ff 90       	pop	r15
    1978:	0f 91       	pop	r16
    197a:	1f 91       	pop	r17
    197c:	cf 91       	pop	r28
    197e:	df 91       	pop	r29
    1980:	08 95       	ret

00001982 <__fp_pscA>:
    1982:	00 24       	eor	r0, r0
    1984:	0a 94       	dec	r0
    1986:	16 16       	cp	r1, r22
    1988:	17 06       	cpc	r1, r23
    198a:	18 06       	cpc	r1, r24
    198c:	09 06       	cpc	r0, r25
    198e:	08 95       	ret

00001990 <__fp_pscB>:
    1990:	00 24       	eor	r0, r0
    1992:	0a 94       	dec	r0
    1994:	12 16       	cp	r1, r18
    1996:	13 06       	cpc	r1, r19
    1998:	14 06       	cpc	r1, r20
    199a:	05 06       	cpc	r0, r21
    199c:	08 95       	ret

0000199e <__fp_round>:
    199e:	09 2e       	mov	r0, r25
    19a0:	03 94       	inc	r0
    19a2:	00 0c       	add	r0, r0
    19a4:	11 f4       	brne	.+4      	; 0x19aa <__fp_round+0xc>
    19a6:	88 23       	and	r24, r24
    19a8:	52 f0       	brmi	.+20     	; 0x19be <__fp_round+0x20>
    19aa:	bb 0f       	add	r27, r27
    19ac:	40 f4       	brcc	.+16     	; 0x19be <__fp_round+0x20>
    19ae:	bf 2b       	or	r27, r31
    19b0:	11 f4       	brne	.+4      	; 0x19b6 <__fp_round+0x18>
    19b2:	60 ff       	sbrs	r22, 0
    19b4:	04 c0       	rjmp	.+8      	; 0x19be <__fp_round+0x20>
    19b6:	6f 5f       	subi	r22, 0xFF	; 255
    19b8:	7f 4f       	sbci	r23, 0xFF	; 255
    19ba:	8f 4f       	sbci	r24, 0xFF	; 255
    19bc:	9f 4f       	sbci	r25, 0xFF	; 255
    19be:	08 95       	ret

000019c0 <__fp_split3>:
    19c0:	57 fd       	sbrc	r21, 7
    19c2:	90 58       	subi	r25, 0x80	; 128
    19c4:	44 0f       	add	r20, r20
    19c6:	55 1f       	adc	r21, r21
    19c8:	59 f0       	breq	.+22     	; 0x19e0 <__fp_splitA+0x10>
    19ca:	5f 3f       	cpi	r21, 0xFF	; 255
    19cc:	71 f0       	breq	.+28     	; 0x19ea <__fp_splitA+0x1a>
    19ce:	47 95       	ror	r20

000019d0 <__fp_splitA>:
    19d0:	88 0f       	add	r24, r24
    19d2:	97 fb       	bst	r25, 7
    19d4:	99 1f       	adc	r25, r25
    19d6:	61 f0       	breq	.+24     	; 0x19f0 <__fp_splitA+0x20>
    19d8:	9f 3f       	cpi	r25, 0xFF	; 255
    19da:	79 f0       	breq	.+30     	; 0x19fa <__fp_splitA+0x2a>
    19dc:	87 95       	ror	r24
    19de:	08 95       	ret
    19e0:	12 16       	cp	r1, r18
    19e2:	13 06       	cpc	r1, r19
    19e4:	14 06       	cpc	r1, r20
    19e6:	55 1f       	adc	r21, r21
    19e8:	f2 cf       	rjmp	.-28     	; 0x19ce <__fp_split3+0xe>
    19ea:	46 95       	lsr	r20
    19ec:	f1 df       	rcall	.-30     	; 0x19d0 <__fp_splitA>
    19ee:	08 c0       	rjmp	.+16     	; 0x1a00 <__fp_splitA+0x30>
    19f0:	16 16       	cp	r1, r22
    19f2:	17 06       	cpc	r1, r23
    19f4:	18 06       	cpc	r1, r24
    19f6:	99 1f       	adc	r25, r25
    19f8:	f1 cf       	rjmp	.-30     	; 0x19dc <__fp_splitA+0xc>
    19fa:	86 95       	lsr	r24
    19fc:	71 05       	cpc	r23, r1
    19fe:	61 05       	cpc	r22, r1
    1a00:	08 94       	sec
    1a02:	08 95       	ret

00001a04 <__fp_zero>:
    1a04:	e8 94       	clt

00001a06 <__fp_szero>:
    1a06:	bb 27       	eor	r27, r27
    1a08:	66 27       	eor	r22, r22
    1a0a:	77 27       	eor	r23, r23
    1a0c:	cb 01       	movw	r24, r22
    1a0e:	97 f9       	bld	r25, 7
    1a10:	08 95       	ret

00001a12 <__gesf2>:
    1a12:	0e 94 6d 0c 	call	0x18da	; 0x18da <__fp_cmp>
    1a16:	08 f4       	brcc	.+2      	; 0x1a1a <__gesf2+0x8>
    1a18:	8f ef       	ldi	r24, 0xFF	; 255
    1a1a:	08 95       	ret

00001a1c <inverse>:
    1a1c:	9b 01       	movw	r18, r22
    1a1e:	ac 01       	movw	r20, r24
    1a20:	60 e0       	ldi	r22, 0x00	; 0
    1a22:	70 e0       	ldi	r23, 0x00	; 0
    1a24:	80 e8       	ldi	r24, 0x80	; 128
    1a26:	9f e3       	ldi	r25, 0x3F	; 63
    1a28:	0c 94 88 0b 	jmp	0x1710	; 0x1710 <__divsf3>

00001a2c <__mulsf3>:
    1a2c:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <__mulsf3x>
    1a30:	0c 94 cf 0c 	jmp	0x199e	; 0x199e <__fp_round>
    1a34:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__fp_pscA>
    1a38:	38 f0       	brcs	.+14     	; 0x1a48 <__mulsf3+0x1c>
    1a3a:	0e 94 c8 0c 	call	0x1990	; 0x1990 <__fp_pscB>
    1a3e:	20 f0       	brcs	.+8      	; 0x1a48 <__mulsf3+0x1c>
    1a40:	95 23       	and	r25, r21
    1a42:	11 f0       	breq	.+4      	; 0x1a48 <__mulsf3+0x1c>
    1a44:	0c 94 91 0c 	jmp	0x1922	; 0x1922 <__fp_inf>
    1a48:	0c 94 97 0c 	jmp	0x192e	; 0x192e <__fp_nan>
    1a4c:	11 24       	eor	r1, r1
    1a4e:	0c 94 03 0d 	jmp	0x1a06	; 0x1a06 <__fp_szero>

00001a52 <__mulsf3x>:
    1a52:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <__fp_split3>
    1a56:	70 f3       	brcs	.-36     	; 0x1a34 <__mulsf3+0x8>

00001a58 <__mulsf3_pse>:
    1a58:	95 9f       	mul	r25, r21
    1a5a:	c1 f3       	breq	.-16     	; 0x1a4c <__mulsf3+0x20>
    1a5c:	95 0f       	add	r25, r21
    1a5e:	50 e0       	ldi	r21, 0x00	; 0
    1a60:	55 1f       	adc	r21, r21
    1a62:	62 9f       	mul	r22, r18
    1a64:	f0 01       	movw	r30, r0
    1a66:	72 9f       	mul	r23, r18
    1a68:	bb 27       	eor	r27, r27
    1a6a:	f0 0d       	add	r31, r0
    1a6c:	b1 1d       	adc	r27, r1
    1a6e:	63 9f       	mul	r22, r19
    1a70:	aa 27       	eor	r26, r26
    1a72:	f0 0d       	add	r31, r0
    1a74:	b1 1d       	adc	r27, r1
    1a76:	aa 1f       	adc	r26, r26
    1a78:	64 9f       	mul	r22, r20
    1a7a:	66 27       	eor	r22, r22
    1a7c:	b0 0d       	add	r27, r0
    1a7e:	a1 1d       	adc	r26, r1
    1a80:	66 1f       	adc	r22, r22
    1a82:	82 9f       	mul	r24, r18
    1a84:	22 27       	eor	r18, r18
    1a86:	b0 0d       	add	r27, r0
    1a88:	a1 1d       	adc	r26, r1
    1a8a:	62 1f       	adc	r22, r18
    1a8c:	73 9f       	mul	r23, r19
    1a8e:	b0 0d       	add	r27, r0
    1a90:	a1 1d       	adc	r26, r1
    1a92:	62 1f       	adc	r22, r18
    1a94:	83 9f       	mul	r24, r19
    1a96:	a0 0d       	add	r26, r0
    1a98:	61 1d       	adc	r22, r1
    1a9a:	22 1f       	adc	r18, r18
    1a9c:	74 9f       	mul	r23, r20
    1a9e:	33 27       	eor	r19, r19
    1aa0:	a0 0d       	add	r26, r0
    1aa2:	61 1d       	adc	r22, r1
    1aa4:	23 1f       	adc	r18, r19
    1aa6:	84 9f       	mul	r24, r20
    1aa8:	60 0d       	add	r22, r0
    1aaa:	21 1d       	adc	r18, r1
    1aac:	82 2f       	mov	r24, r18
    1aae:	76 2f       	mov	r23, r22
    1ab0:	6a 2f       	mov	r22, r26
    1ab2:	11 24       	eor	r1, r1
    1ab4:	9f 57       	subi	r25, 0x7F	; 127
    1ab6:	50 40       	sbci	r21, 0x00	; 0
    1ab8:	9a f0       	brmi	.+38     	; 0x1ae0 <__mulsf3_pse+0x88>
    1aba:	f1 f0       	breq	.+60     	; 0x1af8 <__mulsf3_pse+0xa0>
    1abc:	88 23       	and	r24, r24
    1abe:	4a f0       	brmi	.+18     	; 0x1ad2 <__mulsf3_pse+0x7a>
    1ac0:	ee 0f       	add	r30, r30
    1ac2:	ff 1f       	adc	r31, r31
    1ac4:	bb 1f       	adc	r27, r27
    1ac6:	66 1f       	adc	r22, r22
    1ac8:	77 1f       	adc	r23, r23
    1aca:	88 1f       	adc	r24, r24
    1acc:	91 50       	subi	r25, 0x01	; 1
    1ace:	50 40       	sbci	r21, 0x00	; 0
    1ad0:	a9 f7       	brne	.-22     	; 0x1abc <__mulsf3_pse+0x64>
    1ad2:	9e 3f       	cpi	r25, 0xFE	; 254
    1ad4:	51 05       	cpc	r21, r1
    1ad6:	80 f0       	brcs	.+32     	; 0x1af8 <__mulsf3_pse+0xa0>
    1ad8:	0c 94 91 0c 	jmp	0x1922	; 0x1922 <__fp_inf>
    1adc:	0c 94 03 0d 	jmp	0x1a06	; 0x1a06 <__fp_szero>
    1ae0:	5f 3f       	cpi	r21, 0xFF	; 255
    1ae2:	e4 f3       	brlt	.-8      	; 0x1adc <__mulsf3_pse+0x84>
    1ae4:	98 3e       	cpi	r25, 0xE8	; 232
    1ae6:	d4 f3       	brlt	.-12     	; 0x1adc <__mulsf3_pse+0x84>
    1ae8:	86 95       	lsr	r24
    1aea:	77 95       	ror	r23
    1aec:	67 95       	ror	r22
    1aee:	b7 95       	ror	r27
    1af0:	f7 95       	ror	r31
    1af2:	e7 95       	ror	r30
    1af4:	9f 5f       	subi	r25, 0xFF	; 255
    1af6:	c1 f7       	brne	.-16     	; 0x1ae8 <__mulsf3_pse+0x90>
    1af8:	fe 2b       	or	r31, r30
    1afa:	88 0f       	add	r24, r24
    1afc:	91 1d       	adc	r25, r1
    1afe:	96 95       	lsr	r25
    1b00:	87 95       	ror	r24
    1b02:	97 f9       	bld	r25, 7
    1b04:	08 95       	ret

00001b06 <square>:
    1b06:	9b 01       	movw	r18, r22
    1b08:	ac 01       	movw	r20, r24
    1b0a:	0c 94 16 0d 	jmp	0x1a2c	; 0x1a2c <__mulsf3>

00001b0e <strcpy>:
    1b0e:	fb 01       	movw	r30, r22
    1b10:	dc 01       	movw	r26, r24
    1b12:	01 90       	ld	r0, Z+
    1b14:	0d 92       	st	X+, r0
    1b16:	00 20       	and	r0, r0
    1b18:	e1 f7       	brne	.-8      	; 0x1b12 <strcpy+0x4>
    1b1a:	08 95       	ret

00001b1c <__itoa_ncheck>:
    1b1c:	bb 27       	eor	r27, r27
    1b1e:	4a 30       	cpi	r20, 0x0A	; 10
    1b20:	31 f4       	brne	.+12     	; 0x1b2e <__itoa_ncheck+0x12>
    1b22:	99 23       	and	r25, r25
    1b24:	22 f4       	brpl	.+8      	; 0x1b2e <__itoa_ncheck+0x12>
    1b26:	bd e2       	ldi	r27, 0x2D	; 45
    1b28:	90 95       	com	r25
    1b2a:	81 95       	neg	r24
    1b2c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b2e:	0c 94 9a 0d 	jmp	0x1b34	; 0x1b34 <__utoa_common>

00001b32 <__utoa_ncheck>:
    1b32:	bb 27       	eor	r27, r27

00001b34 <__utoa_common>:
    1b34:	fb 01       	movw	r30, r22
    1b36:	55 27       	eor	r21, r21
    1b38:	aa 27       	eor	r26, r26
    1b3a:	88 0f       	add	r24, r24
    1b3c:	99 1f       	adc	r25, r25
    1b3e:	aa 1f       	adc	r26, r26
    1b40:	a4 17       	cp	r26, r20
    1b42:	10 f0       	brcs	.+4      	; 0x1b48 <__utoa_common+0x14>
    1b44:	a4 1b       	sub	r26, r20
    1b46:	83 95       	inc	r24
    1b48:	50 51       	subi	r21, 0x10	; 16
    1b4a:	b9 f7       	brne	.-18     	; 0x1b3a <__utoa_common+0x6>
    1b4c:	a0 5d       	subi	r26, 0xD0	; 208
    1b4e:	aa 33       	cpi	r26, 0x3A	; 58
    1b50:	08 f0       	brcs	.+2      	; 0x1b54 <__utoa_common+0x20>
    1b52:	a9 5d       	subi	r26, 0xD9	; 217
    1b54:	a1 93       	st	Z+, r26
    1b56:	00 97       	sbiw	r24, 0x00	; 0
    1b58:	79 f7       	brne	.-34     	; 0x1b38 <__utoa_common+0x4>
    1b5a:	b1 11       	cpse	r27, r1
    1b5c:	b1 93       	st	Z+, r27
    1b5e:	11 92       	st	Z+, r1
    1b60:	cb 01       	movw	r24, r22
    1b62:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <strrev>

00001b66 <fdevopen>:
    1b66:	0f 93       	push	r16
    1b68:	1f 93       	push	r17
    1b6a:	cf 93       	push	r28
    1b6c:	df 93       	push	r29
    1b6e:	00 97       	sbiw	r24, 0x00	; 0
    1b70:	31 f4       	brne	.+12     	; 0x1b7e <fdevopen+0x18>
    1b72:	61 15       	cp	r22, r1
    1b74:	71 05       	cpc	r23, r1
    1b76:	19 f4       	brne	.+6      	; 0x1b7e <fdevopen+0x18>
    1b78:	80 e0       	ldi	r24, 0x00	; 0
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	3a c0       	rjmp	.+116    	; 0x1bf2 <fdevopen+0x8c>
    1b7e:	8b 01       	movw	r16, r22
    1b80:	ec 01       	movw	r28, r24
    1b82:	6e e0       	ldi	r22, 0x0E	; 14
    1b84:	70 e0       	ldi	r23, 0x00	; 0
    1b86:	81 e0       	ldi	r24, 0x01	; 1
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <calloc>
    1b8e:	fc 01       	movw	r30, r24
    1b90:	89 2b       	or	r24, r25
    1b92:	91 f3       	breq	.-28     	; 0x1b78 <fdevopen+0x12>
    1b94:	80 e8       	ldi	r24, 0x80	; 128
    1b96:	83 83       	std	Z+3, r24	; 0x03
    1b98:	01 15       	cp	r16, r1
    1b9a:	11 05       	cpc	r17, r1
    1b9c:	71 f0       	breq	.+28     	; 0x1bba <fdevopen+0x54>
    1b9e:	13 87       	std	Z+11, r17	; 0x0b
    1ba0:	02 87       	std	Z+10, r16	; 0x0a
    1ba2:	81 e8       	ldi	r24, 0x81	; 129
    1ba4:	83 83       	std	Z+3, r24	; 0x03
    1ba6:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <__iob>
    1baa:	90 91 d7 02 	lds	r25, 0x02D7	; 0x8002d7 <__iob+0x1>
    1bae:	89 2b       	or	r24, r25
    1bb0:	21 f4       	brne	.+8      	; 0x1bba <fdevopen+0x54>
    1bb2:	f0 93 d7 02 	sts	0x02D7, r31	; 0x8002d7 <__iob+0x1>
    1bb6:	e0 93 d6 02 	sts	0x02D6, r30	; 0x8002d6 <__iob>
    1bba:	20 97       	sbiw	r28, 0x00	; 0
    1bbc:	c9 f0       	breq	.+50     	; 0x1bf0 <fdevopen+0x8a>
    1bbe:	d1 87       	std	Z+9, r29	; 0x09
    1bc0:	c0 87       	std	Z+8, r28	; 0x08
    1bc2:	83 81       	ldd	r24, Z+3	; 0x03
    1bc4:	82 60       	ori	r24, 0x02	; 2
    1bc6:	83 83       	std	Z+3, r24	; 0x03
    1bc8:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <__iob+0x2>
    1bcc:	90 91 d9 02 	lds	r25, 0x02D9	; 0x8002d9 <__iob+0x3>
    1bd0:	89 2b       	or	r24, r25
    1bd2:	71 f4       	brne	.+28     	; 0x1bf0 <fdevopen+0x8a>
    1bd4:	f0 93 d9 02 	sts	0x02D9, r31	; 0x8002d9 <__iob+0x3>
    1bd8:	e0 93 d8 02 	sts	0x02D8, r30	; 0x8002d8 <__iob+0x2>
    1bdc:	80 91 da 02 	lds	r24, 0x02DA	; 0x8002da <__iob+0x4>
    1be0:	90 91 db 02 	lds	r25, 0x02DB	; 0x8002db <__iob+0x5>
    1be4:	89 2b       	or	r24, r25
    1be6:	21 f4       	brne	.+8      	; 0x1bf0 <fdevopen+0x8a>
    1be8:	f0 93 db 02 	sts	0x02DB, r31	; 0x8002db <__iob+0x5>
    1bec:	e0 93 da 02 	sts	0x02DA, r30	; 0x8002da <__iob+0x4>
    1bf0:	cf 01       	movw	r24, r30
    1bf2:	df 91       	pop	r29
    1bf4:	cf 91       	pop	r28
    1bf6:	1f 91       	pop	r17
    1bf8:	0f 91       	pop	r16
    1bfa:	08 95       	ret

00001bfc <puts>:
    1bfc:	0f 93       	push	r16
    1bfe:	1f 93       	push	r17
    1c00:	cf 93       	push	r28
    1c02:	df 93       	push	r29
    1c04:	e0 91 d8 02 	lds	r30, 0x02D8	; 0x8002d8 <__iob+0x2>
    1c08:	f0 91 d9 02 	lds	r31, 0x02D9	; 0x8002d9 <__iob+0x3>
    1c0c:	23 81       	ldd	r18, Z+3	; 0x03
    1c0e:	21 ff       	sbrs	r18, 1
    1c10:	1b c0       	rjmp	.+54     	; 0x1c48 <puts+0x4c>
    1c12:	8c 01       	movw	r16, r24
    1c14:	d0 e0       	ldi	r29, 0x00	; 0
    1c16:	c0 e0       	ldi	r28, 0x00	; 0
    1c18:	f8 01       	movw	r30, r16
    1c1a:	81 91       	ld	r24, Z+
    1c1c:	8f 01       	movw	r16, r30
    1c1e:	60 91 d8 02 	lds	r22, 0x02D8	; 0x8002d8 <__iob+0x2>
    1c22:	70 91 d9 02 	lds	r23, 0x02D9	; 0x8002d9 <__iob+0x3>
    1c26:	db 01       	movw	r26, r22
    1c28:	18 96       	adiw	r26, 0x08	; 8
    1c2a:	ed 91       	ld	r30, X+
    1c2c:	fc 91       	ld	r31, X
    1c2e:	19 97       	sbiw	r26, 0x09	; 9
    1c30:	88 23       	and	r24, r24
    1c32:	31 f0       	breq	.+12     	; 0x1c40 <puts+0x44>
    1c34:	09 95       	icall
    1c36:	89 2b       	or	r24, r25
    1c38:	79 f3       	breq	.-34     	; 0x1c18 <puts+0x1c>
    1c3a:	df ef       	ldi	r29, 0xFF	; 255
    1c3c:	cf ef       	ldi	r28, 0xFF	; 255
    1c3e:	ec cf       	rjmp	.-40     	; 0x1c18 <puts+0x1c>
    1c40:	8a e0       	ldi	r24, 0x0A	; 10
    1c42:	09 95       	icall
    1c44:	89 2b       	or	r24, r25
    1c46:	19 f0       	breq	.+6      	; 0x1c4e <puts+0x52>
    1c48:	8f ef       	ldi	r24, 0xFF	; 255
    1c4a:	9f ef       	ldi	r25, 0xFF	; 255
    1c4c:	02 c0       	rjmp	.+4      	; 0x1c52 <puts+0x56>
    1c4e:	8d 2f       	mov	r24, r29
    1c50:	9c 2f       	mov	r25, r28
    1c52:	df 91       	pop	r29
    1c54:	cf 91       	pop	r28
    1c56:	1f 91       	pop	r17
    1c58:	0f 91       	pop	r16
    1c5a:	08 95       	ret

00001c5c <calloc>:
    1c5c:	0f 93       	push	r16
    1c5e:	1f 93       	push	r17
    1c60:	cf 93       	push	r28
    1c62:	df 93       	push	r29
    1c64:	86 9f       	mul	r24, r22
    1c66:	80 01       	movw	r16, r0
    1c68:	87 9f       	mul	r24, r23
    1c6a:	10 0d       	add	r17, r0
    1c6c:	96 9f       	mul	r25, r22
    1c6e:	10 0d       	add	r17, r0
    1c70:	11 24       	eor	r1, r1
    1c72:	c8 01       	movw	r24, r16
    1c74:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <malloc>
    1c78:	ec 01       	movw	r28, r24
    1c7a:	00 97       	sbiw	r24, 0x00	; 0
    1c7c:	29 f0       	breq	.+10     	; 0x1c88 <calloc+0x2c>
    1c7e:	a8 01       	movw	r20, r16
    1c80:	60 e0       	ldi	r22, 0x00	; 0
    1c82:	70 e0       	ldi	r23, 0x00	; 0
    1c84:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <memset>
    1c88:	ce 01       	movw	r24, r28
    1c8a:	df 91       	pop	r29
    1c8c:	cf 91       	pop	r28
    1c8e:	1f 91       	pop	r17
    1c90:	0f 91       	pop	r16
    1c92:	08 95       	ret

00001c94 <malloc>:
    1c94:	0f 93       	push	r16
    1c96:	1f 93       	push	r17
    1c98:	cf 93       	push	r28
    1c9a:	df 93       	push	r29
    1c9c:	82 30       	cpi	r24, 0x02	; 2
    1c9e:	91 05       	cpc	r25, r1
    1ca0:	10 f4       	brcc	.+4      	; 0x1ca6 <malloc+0x12>
    1ca2:	82 e0       	ldi	r24, 0x02	; 2
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	e0 91 de 02 	lds	r30, 0x02DE	; 0x8002de <__flp>
    1caa:	f0 91 df 02 	lds	r31, 0x02DF	; 0x8002df <__flp+0x1>
    1cae:	20 e0       	ldi	r18, 0x00	; 0
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	a0 e0       	ldi	r26, 0x00	; 0
    1cb4:	b0 e0       	ldi	r27, 0x00	; 0
    1cb6:	30 97       	sbiw	r30, 0x00	; 0
    1cb8:	19 f1       	breq	.+70     	; 0x1d00 <malloc+0x6c>
    1cba:	40 81       	ld	r20, Z
    1cbc:	51 81       	ldd	r21, Z+1	; 0x01
    1cbe:	02 81       	ldd	r16, Z+2	; 0x02
    1cc0:	13 81       	ldd	r17, Z+3	; 0x03
    1cc2:	48 17       	cp	r20, r24
    1cc4:	59 07       	cpc	r21, r25
    1cc6:	c8 f0       	brcs	.+50     	; 0x1cfa <malloc+0x66>
    1cc8:	84 17       	cp	r24, r20
    1cca:	95 07       	cpc	r25, r21
    1ccc:	69 f4       	brne	.+26     	; 0x1ce8 <malloc+0x54>
    1cce:	10 97       	sbiw	r26, 0x00	; 0
    1cd0:	31 f0       	breq	.+12     	; 0x1cde <malloc+0x4a>
    1cd2:	12 96       	adiw	r26, 0x02	; 2
    1cd4:	0c 93       	st	X, r16
    1cd6:	12 97       	sbiw	r26, 0x02	; 2
    1cd8:	13 96       	adiw	r26, 0x03	; 3
    1cda:	1c 93       	st	X, r17
    1cdc:	27 c0       	rjmp	.+78     	; 0x1d2c <malloc+0x98>
    1cde:	00 93 de 02 	sts	0x02DE, r16	; 0x8002de <__flp>
    1ce2:	10 93 df 02 	sts	0x02DF, r17	; 0x8002df <__flp+0x1>
    1ce6:	22 c0       	rjmp	.+68     	; 0x1d2c <malloc+0x98>
    1ce8:	21 15       	cp	r18, r1
    1cea:	31 05       	cpc	r19, r1
    1cec:	19 f0       	breq	.+6      	; 0x1cf4 <malloc+0x60>
    1cee:	42 17       	cp	r20, r18
    1cf0:	53 07       	cpc	r21, r19
    1cf2:	18 f4       	brcc	.+6      	; 0x1cfa <malloc+0x66>
    1cf4:	9a 01       	movw	r18, r20
    1cf6:	bd 01       	movw	r22, r26
    1cf8:	ef 01       	movw	r28, r30
    1cfa:	df 01       	movw	r26, r30
    1cfc:	f8 01       	movw	r30, r16
    1cfe:	db cf       	rjmp	.-74     	; 0x1cb6 <malloc+0x22>
    1d00:	21 15       	cp	r18, r1
    1d02:	31 05       	cpc	r19, r1
    1d04:	f9 f0       	breq	.+62     	; 0x1d44 <malloc+0xb0>
    1d06:	28 1b       	sub	r18, r24
    1d08:	39 0b       	sbc	r19, r25
    1d0a:	24 30       	cpi	r18, 0x04	; 4
    1d0c:	31 05       	cpc	r19, r1
    1d0e:	80 f4       	brcc	.+32     	; 0x1d30 <malloc+0x9c>
    1d10:	8a 81       	ldd	r24, Y+2	; 0x02
    1d12:	9b 81       	ldd	r25, Y+3	; 0x03
    1d14:	61 15       	cp	r22, r1
    1d16:	71 05       	cpc	r23, r1
    1d18:	21 f0       	breq	.+8      	; 0x1d22 <malloc+0x8e>
    1d1a:	fb 01       	movw	r30, r22
    1d1c:	93 83       	std	Z+3, r25	; 0x03
    1d1e:	82 83       	std	Z+2, r24	; 0x02
    1d20:	04 c0       	rjmp	.+8      	; 0x1d2a <malloc+0x96>
    1d22:	90 93 df 02 	sts	0x02DF, r25	; 0x8002df <__flp+0x1>
    1d26:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <__flp>
    1d2a:	fe 01       	movw	r30, r28
    1d2c:	32 96       	adiw	r30, 0x02	; 2
    1d2e:	44 c0       	rjmp	.+136    	; 0x1db8 <malloc+0x124>
    1d30:	fe 01       	movw	r30, r28
    1d32:	e2 0f       	add	r30, r18
    1d34:	f3 1f       	adc	r31, r19
    1d36:	81 93       	st	Z+, r24
    1d38:	91 93       	st	Z+, r25
    1d3a:	22 50       	subi	r18, 0x02	; 2
    1d3c:	31 09       	sbc	r19, r1
    1d3e:	39 83       	std	Y+1, r19	; 0x01
    1d40:	28 83       	st	Y, r18
    1d42:	3a c0       	rjmp	.+116    	; 0x1db8 <malloc+0x124>
    1d44:	20 91 dc 02 	lds	r18, 0x02DC	; 0x8002dc <__brkval>
    1d48:	30 91 dd 02 	lds	r19, 0x02DD	; 0x8002dd <__brkval+0x1>
    1d4c:	23 2b       	or	r18, r19
    1d4e:	41 f4       	brne	.+16     	; 0x1d60 <malloc+0xcc>
    1d50:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1d54:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1d58:	30 93 dd 02 	sts	0x02DD, r19	; 0x8002dd <__brkval+0x1>
    1d5c:	20 93 dc 02 	sts	0x02DC, r18	; 0x8002dc <__brkval>
    1d60:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1d64:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1d68:	21 15       	cp	r18, r1
    1d6a:	31 05       	cpc	r19, r1
    1d6c:	41 f4       	brne	.+16     	; 0x1d7e <malloc+0xea>
    1d6e:	2d b7       	in	r18, 0x3d	; 61
    1d70:	3e b7       	in	r19, 0x3e	; 62
    1d72:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1d76:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1d7a:	24 1b       	sub	r18, r20
    1d7c:	35 0b       	sbc	r19, r21
    1d7e:	e0 91 dc 02 	lds	r30, 0x02DC	; 0x8002dc <__brkval>
    1d82:	f0 91 dd 02 	lds	r31, 0x02DD	; 0x8002dd <__brkval+0x1>
    1d86:	e2 17       	cp	r30, r18
    1d88:	f3 07       	cpc	r31, r19
    1d8a:	a0 f4       	brcc	.+40     	; 0x1db4 <malloc+0x120>
    1d8c:	2e 1b       	sub	r18, r30
    1d8e:	3f 0b       	sbc	r19, r31
    1d90:	28 17       	cp	r18, r24
    1d92:	39 07       	cpc	r19, r25
    1d94:	78 f0       	brcs	.+30     	; 0x1db4 <malloc+0x120>
    1d96:	ac 01       	movw	r20, r24
    1d98:	4e 5f       	subi	r20, 0xFE	; 254
    1d9a:	5f 4f       	sbci	r21, 0xFF	; 255
    1d9c:	24 17       	cp	r18, r20
    1d9e:	35 07       	cpc	r19, r21
    1da0:	48 f0       	brcs	.+18     	; 0x1db4 <malloc+0x120>
    1da2:	4e 0f       	add	r20, r30
    1da4:	5f 1f       	adc	r21, r31
    1da6:	50 93 dd 02 	sts	0x02DD, r21	; 0x8002dd <__brkval+0x1>
    1daa:	40 93 dc 02 	sts	0x02DC, r20	; 0x8002dc <__brkval>
    1dae:	81 93       	st	Z+, r24
    1db0:	91 93       	st	Z+, r25
    1db2:	02 c0       	rjmp	.+4      	; 0x1db8 <malloc+0x124>
    1db4:	e0 e0       	ldi	r30, 0x00	; 0
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	cf 01       	movw	r24, r30
    1dba:	df 91       	pop	r29
    1dbc:	cf 91       	pop	r28
    1dbe:	1f 91       	pop	r17
    1dc0:	0f 91       	pop	r16
    1dc2:	08 95       	ret

00001dc4 <free>:
    1dc4:	cf 93       	push	r28
    1dc6:	df 93       	push	r29
    1dc8:	00 97       	sbiw	r24, 0x00	; 0
    1dca:	09 f4       	brne	.+2      	; 0x1dce <free+0xa>
    1dcc:	81 c0       	rjmp	.+258    	; 0x1ed0 <free+0x10c>
    1dce:	fc 01       	movw	r30, r24
    1dd0:	32 97       	sbiw	r30, 0x02	; 2
    1dd2:	13 82       	std	Z+3, r1	; 0x03
    1dd4:	12 82       	std	Z+2, r1	; 0x02
    1dd6:	a0 91 de 02 	lds	r26, 0x02DE	; 0x8002de <__flp>
    1dda:	b0 91 df 02 	lds	r27, 0x02DF	; 0x8002df <__flp+0x1>
    1dde:	10 97       	sbiw	r26, 0x00	; 0
    1de0:	81 f4       	brne	.+32     	; 0x1e02 <free+0x3e>
    1de2:	20 81       	ld	r18, Z
    1de4:	31 81       	ldd	r19, Z+1	; 0x01
    1de6:	82 0f       	add	r24, r18
    1de8:	93 1f       	adc	r25, r19
    1dea:	20 91 dc 02 	lds	r18, 0x02DC	; 0x8002dc <__brkval>
    1dee:	30 91 dd 02 	lds	r19, 0x02DD	; 0x8002dd <__brkval+0x1>
    1df2:	28 17       	cp	r18, r24
    1df4:	39 07       	cpc	r19, r25
    1df6:	51 f5       	brne	.+84     	; 0x1e4c <free+0x88>
    1df8:	f0 93 dd 02 	sts	0x02DD, r31	; 0x8002dd <__brkval+0x1>
    1dfc:	e0 93 dc 02 	sts	0x02DC, r30	; 0x8002dc <__brkval>
    1e00:	67 c0       	rjmp	.+206    	; 0x1ed0 <free+0x10c>
    1e02:	ed 01       	movw	r28, r26
    1e04:	20 e0       	ldi	r18, 0x00	; 0
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	ce 17       	cp	r28, r30
    1e0a:	df 07       	cpc	r29, r31
    1e0c:	40 f4       	brcc	.+16     	; 0x1e1e <free+0x5a>
    1e0e:	4a 81       	ldd	r20, Y+2	; 0x02
    1e10:	5b 81       	ldd	r21, Y+3	; 0x03
    1e12:	9e 01       	movw	r18, r28
    1e14:	41 15       	cp	r20, r1
    1e16:	51 05       	cpc	r21, r1
    1e18:	f1 f0       	breq	.+60     	; 0x1e56 <free+0x92>
    1e1a:	ea 01       	movw	r28, r20
    1e1c:	f5 cf       	rjmp	.-22     	; 0x1e08 <free+0x44>
    1e1e:	d3 83       	std	Z+3, r29	; 0x03
    1e20:	c2 83       	std	Z+2, r28	; 0x02
    1e22:	40 81       	ld	r20, Z
    1e24:	51 81       	ldd	r21, Z+1	; 0x01
    1e26:	84 0f       	add	r24, r20
    1e28:	95 1f       	adc	r25, r21
    1e2a:	c8 17       	cp	r28, r24
    1e2c:	d9 07       	cpc	r29, r25
    1e2e:	59 f4       	brne	.+22     	; 0x1e46 <free+0x82>
    1e30:	88 81       	ld	r24, Y
    1e32:	99 81       	ldd	r25, Y+1	; 0x01
    1e34:	84 0f       	add	r24, r20
    1e36:	95 1f       	adc	r25, r21
    1e38:	02 96       	adiw	r24, 0x02	; 2
    1e3a:	91 83       	std	Z+1, r25	; 0x01
    1e3c:	80 83       	st	Z, r24
    1e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e40:	9b 81       	ldd	r25, Y+3	; 0x03
    1e42:	93 83       	std	Z+3, r25	; 0x03
    1e44:	82 83       	std	Z+2, r24	; 0x02
    1e46:	21 15       	cp	r18, r1
    1e48:	31 05       	cpc	r19, r1
    1e4a:	29 f4       	brne	.+10     	; 0x1e56 <free+0x92>
    1e4c:	f0 93 df 02 	sts	0x02DF, r31	; 0x8002df <__flp+0x1>
    1e50:	e0 93 de 02 	sts	0x02DE, r30	; 0x8002de <__flp>
    1e54:	3d c0       	rjmp	.+122    	; 0x1ed0 <free+0x10c>
    1e56:	e9 01       	movw	r28, r18
    1e58:	fb 83       	std	Y+3, r31	; 0x03
    1e5a:	ea 83       	std	Y+2, r30	; 0x02
    1e5c:	49 91       	ld	r20, Y+
    1e5e:	59 91       	ld	r21, Y+
    1e60:	c4 0f       	add	r28, r20
    1e62:	d5 1f       	adc	r29, r21
    1e64:	ec 17       	cp	r30, r28
    1e66:	fd 07       	cpc	r31, r29
    1e68:	61 f4       	brne	.+24     	; 0x1e82 <free+0xbe>
    1e6a:	80 81       	ld	r24, Z
    1e6c:	91 81       	ldd	r25, Z+1	; 0x01
    1e6e:	84 0f       	add	r24, r20
    1e70:	95 1f       	adc	r25, r21
    1e72:	02 96       	adiw	r24, 0x02	; 2
    1e74:	e9 01       	movw	r28, r18
    1e76:	99 83       	std	Y+1, r25	; 0x01
    1e78:	88 83       	st	Y, r24
    1e7a:	82 81       	ldd	r24, Z+2	; 0x02
    1e7c:	93 81       	ldd	r25, Z+3	; 0x03
    1e7e:	9b 83       	std	Y+3, r25	; 0x03
    1e80:	8a 83       	std	Y+2, r24	; 0x02
    1e82:	e0 e0       	ldi	r30, 0x00	; 0
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	12 96       	adiw	r26, 0x02	; 2
    1e88:	8d 91       	ld	r24, X+
    1e8a:	9c 91       	ld	r25, X
    1e8c:	13 97       	sbiw	r26, 0x03	; 3
    1e8e:	00 97       	sbiw	r24, 0x00	; 0
    1e90:	19 f0       	breq	.+6      	; 0x1e98 <free+0xd4>
    1e92:	fd 01       	movw	r30, r26
    1e94:	dc 01       	movw	r26, r24
    1e96:	f7 cf       	rjmp	.-18     	; 0x1e86 <free+0xc2>
    1e98:	8d 91       	ld	r24, X+
    1e9a:	9c 91       	ld	r25, X
    1e9c:	11 97       	sbiw	r26, 0x01	; 1
    1e9e:	9d 01       	movw	r18, r26
    1ea0:	2e 5f       	subi	r18, 0xFE	; 254
    1ea2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ea4:	82 0f       	add	r24, r18
    1ea6:	93 1f       	adc	r25, r19
    1ea8:	20 91 dc 02 	lds	r18, 0x02DC	; 0x8002dc <__brkval>
    1eac:	30 91 dd 02 	lds	r19, 0x02DD	; 0x8002dd <__brkval+0x1>
    1eb0:	28 17       	cp	r18, r24
    1eb2:	39 07       	cpc	r19, r25
    1eb4:	69 f4       	brne	.+26     	; 0x1ed0 <free+0x10c>
    1eb6:	30 97       	sbiw	r30, 0x00	; 0
    1eb8:	29 f4       	brne	.+10     	; 0x1ec4 <free+0x100>
    1eba:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <__flp+0x1>
    1ebe:	10 92 de 02 	sts	0x02DE, r1	; 0x8002de <__flp>
    1ec2:	02 c0       	rjmp	.+4      	; 0x1ec8 <free+0x104>
    1ec4:	13 82       	std	Z+3, r1	; 0x03
    1ec6:	12 82       	std	Z+2, r1	; 0x02
    1ec8:	b0 93 dd 02 	sts	0x02DD, r27	; 0x8002dd <__brkval+0x1>
    1ecc:	a0 93 dc 02 	sts	0x02DC, r26	; 0x8002dc <__brkval>
    1ed0:	df 91       	pop	r29
    1ed2:	cf 91       	pop	r28
    1ed4:	08 95       	ret

00001ed6 <memset>:
    1ed6:	dc 01       	movw	r26, r24
    1ed8:	01 c0       	rjmp	.+2      	; 0x1edc <memset+0x6>
    1eda:	6d 93       	st	X+, r22
    1edc:	41 50       	subi	r20, 0x01	; 1
    1ede:	50 40       	sbci	r21, 0x00	; 0
    1ee0:	e0 f7       	brcc	.-8      	; 0x1eda <memset+0x4>
    1ee2:	08 95       	ret

00001ee4 <strrev>:
    1ee4:	dc 01       	movw	r26, r24
    1ee6:	fc 01       	movw	r30, r24
    1ee8:	67 2f       	mov	r22, r23
    1eea:	71 91       	ld	r23, Z+
    1eec:	77 23       	and	r23, r23
    1eee:	e1 f7       	brne	.-8      	; 0x1ee8 <strrev+0x4>
    1ef0:	32 97       	sbiw	r30, 0x02	; 2
    1ef2:	04 c0       	rjmp	.+8      	; 0x1efc <strrev+0x18>
    1ef4:	7c 91       	ld	r23, X
    1ef6:	6d 93       	st	X+, r22
    1ef8:	70 83       	st	Z, r23
    1efa:	62 91       	ld	r22, -Z
    1efc:	ae 17       	cp	r26, r30
    1efe:	bf 07       	cpc	r27, r31
    1f00:	c8 f3       	brcs	.-14     	; 0x1ef4 <strrev+0x10>
    1f02:	08 95       	ret

00001f04 <_exit>:
    1f04:	f8 94       	cli

00001f06 <__stop_program>:
    1f06:	ff cf       	rjmp	.-2      	; 0x1f06 <__stop_program>
