
TestYolo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000194  00800100  00002602  00002696  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002602  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c6  00800294  00800294  0000282a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000282a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002888  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000340  00000000  00000000  000028c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003c3a  00000000  00000000  00002c04  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001678  00000000  00000000  0000683e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001baf  00000000  00000000  00007eb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008f0  00000000  00000000  00009a68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ddd  00000000  00000000  0000a358  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002369  00000000  00000000  0000b135  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b0  00000000  00000000  0000d49e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cb 01 	jmp	0x396	; 0x396 <__ctors_end>
       4:	0c 94 3c 02 	jmp	0x478	; 0x478 <__vector_1>
       8:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
       c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      10:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      14:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      18:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      1c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      20:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      24:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      28:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      2c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      30:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      34:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      38:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      3c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      40:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      44:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      48:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      4c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      50:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      54:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      58:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      5c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      60:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      64:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      68:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      6c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      70:	08 4a       	sbci	r16, 0xA8	; 168
      72:	d7 3b       	cpi	r29, 0xB7	; 183
      74:	3b ce       	rjmp	.-906    	; 0xfffffcec <__eeprom_end+0xff7efcec>
      76:	01 6e       	ori	r16, 0xE1	; 225
      78:	84 bc       	out	0x24, r8	; 36
      7a:	bf fd       	.word	0xfdbf	; ????
      7c:	c1 2f       	mov	r28, r17
      7e:	3d 6c       	ori	r19, 0xCD	; 205
      80:	74 31       	cpi	r23, 0x14	; 20
      82:	9a bd       	out	0x2a, r25	; 42
      84:	56 83       	std	Z+6, r21	; 0x06
      86:	3d da       	rcall	.-2950   	; 0xfffff502 <__eeprom_end+0xff7ef502>
      88:	3d 00       	.word	0x003d	; ????
      8a:	c7 7f       	andi	r28, 0xF7	; 247
      8c:	11 be       	out	0x31, r1	; 49
      8e:	d9 e4       	ldi	r29, 0x49	; 73
      90:	bb 4c       	sbci	r27, 0xCB	; 203
      92:	3e 91       	ld	r19, -X
      94:	6b aa       	std	Y+51, r6	; 0x33
      96:	aa be       	out	0x3a, r10	; 58
      98:	00 00       	nop
      9a:	00 80       	ld	r0, Z
      9c:	3f 00       	.word	0x003f	; ????

0000009e <__trampolines_end>:
	...
      a6:	00 06       	cpc	r0, r16
      a8:	5f 5f       	subi	r21, 0xFF	; 255
      aa:	06 00       	.word	0x0006	; ????
      ac:	00 00       	nop
      ae:	00 07       	cpc	r16, r16
      b0:	07 00       	.word	0x0007	; ????
      b2:	07 07       	cpc	r16, r23
      b4:	00 00       	nop
      b6:	14 7f       	andi	r17, 0xF4	; 244
      b8:	7f 14       	cp	r7, r15
      ba:	7f 7f       	andi	r23, 0xFF	; 255
      bc:	14 00       	.word	0x0014	; ????
      be:	24 2e       	mov	r2, r20
      c0:	6b 6b       	ori	r22, 0xBB	; 187
      c2:	3a 12       	cpse	r3, r26
      c4:	00 00       	nop
      c6:	46 66       	ori	r20, 0x66	; 102
      c8:	30 18       	sub	r3, r0
      ca:	0c 66       	ori	r16, 0x6C	; 108
      cc:	62 00       	.word	0x0062	; ????
      ce:	30 7a       	andi	r19, 0xA0	; 160
      d0:	4f 5d       	subi	r20, 0xDF	; 223
      d2:	37 7a       	andi	r19, 0xA7	; 167
      d4:	48 00       	.word	0x0048	; ????
      d6:	04 07       	cpc	r16, r20
      d8:	03 00       	.word	0x0003	; ????
      da:	00 00       	nop
      dc:	00 00       	nop
      de:	00 1c       	adc	r0, r0
      e0:	3e 63       	ori	r19, 0x3E	; 62
      e2:	41 00       	.word	0x0041	; ????
      e4:	00 00       	nop
      e6:	00 41       	sbci	r16, 0x10	; 16
      e8:	63 3e       	cpi	r22, 0xE3	; 227
      ea:	1c 00       	.word	0x001c	; ????
      ec:	00 00       	nop
      ee:	08 2a       	or	r0, r24
      f0:	3e 1c       	adc	r3, r14
      f2:	1c 3e       	cpi	r17, 0xEC	; 236
      f4:	2a 08       	sbc	r2, r10
      f6:	08 08       	sbc	r0, r8
      f8:	3e 3e       	cpi	r19, 0xEE	; 238
      fa:	08 08       	sbc	r0, r8
      fc:	00 00       	nop
      fe:	00 a0       	ldd	r0, Z+32	; 0x20
     100:	e0 60       	ori	r30, 0x00	; 0
     102:	00 00       	nop
     104:	00 00       	nop
     106:	08 08       	sbc	r0, r8
     108:	08 08       	sbc	r0, r8
     10a:	08 08       	sbc	r0, r8
     10c:	00 00       	nop
     10e:	00 00       	nop
     110:	60 60       	ori	r22, 0x00	; 0
     112:	00 00       	nop
     114:	00 00       	nop
     116:	60 30       	cpi	r22, 0x00	; 0
     118:	18 0c       	add	r1, r8
     11a:	06 03       	mulsu	r16, r22
     11c:	01 00       	.word	0x0001	; ????
     11e:	3e 7f       	andi	r19, 0xFE	; 254
     120:	59 4d       	sbci	r21, 0xD9	; 217
     122:	7f 3e       	cpi	r23, 0xEF	; 239
     124:	00 00       	nop
     126:	42 42       	sbci	r20, 0x22	; 34
     128:	7f 7f       	andi	r23, 0xFF	; 255
     12a:	40 40       	sbci	r20, 0x00	; 0
     12c:	00 00       	nop
     12e:	62 73       	andi	r22, 0x32	; 50
     130:	59 49       	sbci	r21, 0x99	; 153
     132:	6f 66       	ori	r22, 0x6F	; 111
     134:	00 00       	nop
     136:	22 63       	ori	r18, 0x32	; 50
     138:	49 49       	sbci	r20, 0x99	; 153
     13a:	7f 36       	cpi	r23, 0x6F	; 111
     13c:	00 00       	nop
     13e:	18 1c       	adc	r1, r8
     140:	16 13       	cpse	r17, r22
     142:	7f 7f       	andi	r23, 0xFF	; 255
     144:	10 00       	.word	0x0010	; ????
     146:	27 67       	ori	r18, 0x77	; 119
     148:	45 45       	sbci	r20, 0x55	; 85
     14a:	7d 39       	cpi	r23, 0x9D	; 157
     14c:	00 00       	nop
     14e:	3c 7e       	andi	r19, 0xEC	; 236
     150:	4b 49       	sbci	r20, 0x9B	; 155
     152:	79 30       	cpi	r23, 0x09	; 9
     154:	00 00       	nop
     156:	03 63       	ori	r16, 0x33	; 51
     158:	71 19       	sub	r23, r1
     15a:	0f 07       	cpc	r16, r31
     15c:	00 00       	nop
     15e:	36 7f       	andi	r19, 0xF6	; 246
     160:	49 49       	sbci	r20, 0x99	; 153
     162:	7f 36       	cpi	r23, 0x6F	; 111
     164:	00 00       	nop
     166:	06 4f       	sbci	r16, 0xF6	; 246
     168:	49 69       	ori	r20, 0x99	; 153
     16a:	3f 1e       	adc	r3, r31
     16c:	00 00       	nop
     16e:	00 00       	nop
     170:	6c 6c       	ori	r22, 0xCC	; 204
     172:	00 00       	nop
     174:	00 00       	nop
     176:	00 a0       	ldd	r0, Z+32	; 0x20
     178:	ec 6c       	ori	r30, 0xCC	; 204
     17a:	00 00       	nop
     17c:	00 00       	nop
     17e:	08 1c       	adc	r0, r8
     180:	36 63       	ori	r19, 0x36	; 54
     182:	41 00       	.word	0x0041	; ????
     184:	00 00       	nop
     186:	14 14       	cp	r1, r4
     188:	14 14       	cp	r1, r4
     18a:	14 14       	cp	r1, r4
     18c:	00 00       	nop
     18e:	00 41       	sbci	r16, 0x10	; 16
     190:	63 36       	cpi	r22, 0x63	; 99
     192:	1c 08       	sbc	r1, r12
     194:	00 00       	nop
     196:	02 03       	mulsu	r16, r18
     198:	51 59       	subi	r21, 0x91	; 145
     19a:	0f 06       	cpc	r0, r31
     19c:	00 00       	nop
     19e:	3e 7f       	andi	r19, 0xFE	; 254
     1a0:	41 5d       	subi	r20, 0xD1	; 209
     1a2:	5d 1f       	adc	r21, r29
     1a4:	1e 00       	.word	0x001e	; ????
     1a6:	7c 7e       	andi	r23, 0xEC	; 236
     1a8:	13 13       	cpse	r17, r19
     1aa:	7e 7c       	andi	r23, 0xCE	; 206
     1ac:	00 00       	nop
     1ae:	41 7f       	andi	r20, 0xF1	; 241
     1b0:	7f 49       	sbci	r23, 0x9F	; 159
     1b2:	49 7f       	andi	r20, 0xF9	; 249
     1b4:	36 00       	.word	0x0036	; ????
     1b6:	1c 3e       	cpi	r17, 0xEC	; 236
     1b8:	63 41       	sbci	r22, 0x13	; 19
     1ba:	41 63       	ori	r20, 0x31	; 49
     1bc:	22 00       	.word	0x0022	; ????
     1be:	41 7f       	andi	r20, 0xF1	; 241
     1c0:	7f 41       	sbci	r23, 0x1F	; 31
     1c2:	63 7f       	andi	r22, 0xF3	; 243
     1c4:	1c 00       	.word	0x001c	; ????
     1c6:	41 7f       	andi	r20, 0xF1	; 241
     1c8:	7f 49       	sbci	r23, 0x9F	; 159
     1ca:	5d 41       	sbci	r21, 0x1D	; 29
     1cc:	63 00       	.word	0x0063	; ????
     1ce:	41 7f       	andi	r20, 0xF1	; 241
     1d0:	7f 49       	sbci	r23, 0x9F	; 159
     1d2:	1d 01       	movw	r2, r26
     1d4:	03 00       	.word	0x0003	; ????
     1d6:	1c 3e       	cpi	r17, 0xEC	; 236
     1d8:	63 41       	sbci	r22, 0x13	; 19
     1da:	51 73       	andi	r21, 0x31	; 49
     1dc:	72 00       	.word	0x0072	; ????
     1de:	7f 7f       	andi	r23, 0xFF	; 255
     1e0:	08 08       	sbc	r0, r8
     1e2:	7f 7f       	andi	r23, 0xFF	; 255
     1e4:	00 00       	nop
     1e6:	00 41       	sbci	r16, 0x10	; 16
     1e8:	7f 7f       	andi	r23, 0xFF	; 255
     1ea:	41 00       	.word	0x0041	; ????
     1ec:	00 00       	nop
     1ee:	30 70       	andi	r19, 0x00	; 0
     1f0:	40 41       	sbci	r20, 0x10	; 16
     1f2:	7f 3f       	cpi	r23, 0xFF	; 255
     1f4:	01 00       	.word	0x0001	; ????
     1f6:	41 7f       	andi	r20, 0xF1	; 241
     1f8:	7f 08       	sbc	r7, r15
     1fa:	1c 77       	andi	r17, 0x7C	; 124
     1fc:	63 00       	.word	0x0063	; ????
     1fe:	41 7f       	andi	r20, 0xF1	; 241
     200:	7f 41       	sbci	r23, 0x1F	; 31
     202:	40 60       	ori	r20, 0x00	; 0
     204:	70 00       	.word	0x0070	; ????
     206:	7f 7f       	andi	r23, 0xFF	; 255
     208:	06 0c       	add	r0, r6
     20a:	06 7f       	andi	r16, 0xF6	; 246
     20c:	7f 00       	.word	0x007f	; ????
     20e:	7f 7f       	andi	r23, 0xFF	; 255
     210:	06 0c       	add	r0, r6
     212:	18 7f       	andi	r17, 0xF8	; 248
     214:	7f 00       	.word	0x007f	; ????
     216:	1c 3e       	cpi	r17, 0xEC	; 236
     218:	63 41       	sbci	r22, 0x13	; 19
     21a:	63 3e       	cpi	r22, 0xE3	; 227
     21c:	1c 00       	.word	0x001c	; ????
     21e:	41 7f       	andi	r20, 0xF1	; 241
     220:	7f 49       	sbci	r23, 0x9F	; 159
     222:	09 0f       	add	r16, r25
     224:	06 00       	.word	0x0006	; ????
     226:	1e 3f       	cpi	r17, 0xFE	; 254
     228:	21 71       	andi	r18, 0x11	; 17
     22a:	7f 5e       	subi	r23, 0xEF	; 239
     22c:	00 00       	nop
     22e:	41 7f       	andi	r20, 0xF1	; 241
     230:	7f 19       	sub	r23, r15
     232:	39 6f       	ori	r19, 0xF9	; 249
     234:	46 00       	.word	0x0046	; ????
     236:	26 67       	ori	r18, 0x76	; 118
     238:	4d 59       	subi	r20, 0x9D	; 157
     23a:	7b 32       	cpi	r23, 0x2B	; 43
     23c:	00 00       	nop
     23e:	03 41       	sbci	r16, 0x13	; 19
     240:	7f 7f       	andi	r23, 0xFF	; 255
     242:	41 03       	mulsu	r20, r17
     244:	00 00       	nop
     246:	7f 7f       	andi	r23, 0xFF	; 255
     248:	40 40       	sbci	r20, 0x00	; 0
     24a:	7f 7f       	andi	r23, 0xFF	; 255
     24c:	00 00       	nop
     24e:	1f 3f       	cpi	r17, 0xFF	; 255
     250:	60 60       	ori	r22, 0x00	; 0
     252:	3f 1f       	adc	r19, r31
     254:	00 00       	nop
     256:	7f 7f       	andi	r23, 0xFF	; 255
     258:	30 18       	sub	r3, r0
     25a:	30 7f       	andi	r19, 0xF0	; 240
     25c:	7f 00       	.word	0x007f	; ????
     25e:	63 77       	andi	r22, 0x73	; 115
     260:	1c 08       	sbc	r1, r12
     262:	1c 77       	andi	r17, 0x7C	; 124
     264:	63 00       	.word	0x0063	; ????
     266:	07 4f       	sbci	r16, 0xF7	; 247
     268:	78 78       	andi	r23, 0x88	; 136
     26a:	4f 07       	cpc	r20, r31
     26c:	00 00       	nop
     26e:	67 73       	andi	r22, 0x37	; 55
     270:	59 4d       	sbci	r21, 0xD9	; 217
     272:	47 63       	ori	r20, 0x37	; 55
     274:	71 00       	.word	0x0071	; ????
     276:	00 7f       	andi	r16, 0xF0	; 240
     278:	7f 41       	sbci	r23, 0x1F	; 31
     27a:	41 00       	.word	0x0041	; ????
     27c:	00 00       	nop
     27e:	01 03       	mulsu	r16, r17
     280:	06 0c       	add	r0, r6
     282:	18 30       	cpi	r17, 0x08	; 8
     284:	60 00       	.word	0x0060	; ????
     286:	00 41       	sbci	r16, 0x10	; 16
     288:	41 7f       	andi	r20, 0xF1	; 241
     28a:	7f 00       	.word	0x007f	; ????
     28c:	00 00       	nop
     28e:	08 0c       	add	r0, r8
     290:	06 03       	mulsu	r16, r22
     292:	06 0c       	add	r0, r6
     294:	08 00       	.word	0x0008	; ????
     296:	80 80       	ld	r8, Z
     298:	80 80       	ld	r8, Z
     29a:	80 80       	ld	r8, Z
     29c:	80 80       	ld	r8, Z
     29e:	00 00       	nop
     2a0:	03 07       	cpc	r16, r19
     2a2:	04 00       	.word	0x0004	; ????
     2a4:	00 00       	nop
     2a6:	20 74       	andi	r18, 0x40	; 64
     2a8:	54 54       	subi	r21, 0x44	; 68
     2aa:	3c 78       	andi	r19, 0x8C	; 140
     2ac:	40 00       	.word	0x0040	; ????
     2ae:	41 3f       	cpi	r20, 0xF1	; 241
     2b0:	7f 44       	sbci	r23, 0x4F	; 79
     2b2:	44 7c       	andi	r20, 0xC4	; 196
     2b4:	38 00       	.word	0x0038	; ????
     2b6:	38 7c       	andi	r19, 0xC8	; 200
     2b8:	44 44       	sbci	r20, 0x44	; 68
     2ba:	6c 28       	or	r6, r12
     2bc:	00 00       	nop
     2be:	30 78       	andi	r19, 0x80	; 128
     2c0:	48 49       	sbci	r20, 0x98	; 152
     2c2:	3f 7f       	andi	r19, 0xFF	; 255
     2c4:	40 00       	.word	0x0040	; ????
     2c6:	38 7c       	andi	r19, 0xC8	; 200
     2c8:	54 54       	subi	r21, 0x44	; 68
     2ca:	5c 18       	sub	r5, r12
     2cc:	00 00       	nop
     2ce:	48 7e       	andi	r20, 0xE8	; 232
     2d0:	7f 49       	sbci	r23, 0x9F	; 159
     2d2:	03 02       	muls	r16, r19
     2d4:	00 00       	nop
     2d6:	98 bc       	out	0x28, r9	; 40
     2d8:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2da:	f8 7c       	andi	r31, 0xC8	; 200
     2dc:	04 00       	.word	0x0004	; ????
     2de:	41 7f       	andi	r20, 0xF1	; 241
     2e0:	7f 08       	sbc	r7, r15
     2e2:	04 7c       	andi	r16, 0xC4	; 196
     2e4:	78 00       	.word	0x0078	; ????
     2e6:	00 44       	sbci	r16, 0x40	; 64
     2e8:	7d 7d       	andi	r23, 0xDD	; 221
     2ea:	40 00       	.word	0x0040	; ????
     2ec:	00 00       	nop
     2ee:	40 c4       	rjmp	.+2176   	; 0xb70 <set_difficulty+0x48>
     2f0:	84 fd       	sbrc	r24, 4
     2f2:	7d 00       	.word	0x007d	; ????
     2f4:	00 00       	nop
     2f6:	41 7f       	andi	r20, 0xF1	; 241
     2f8:	7f 10       	cpse	r7, r15
     2fa:	38 6c       	ori	r19, 0xC8	; 200
     2fc:	44 00       	.word	0x0044	; ????
     2fe:	00 41       	sbci	r16, 0x10	; 16
     300:	7f 7f       	andi	r23, 0xFF	; 255
     302:	40 00       	.word	0x0040	; ????
     304:	00 00       	nop
     306:	7c 7c       	andi	r23, 0xCC	; 204
     308:	0c 18       	sub	r0, r12
     30a:	0c 7c       	andi	r16, 0xCC	; 204
     30c:	78 00       	.word	0x0078	; ????
     30e:	7c 7c       	andi	r23, 0xCC	; 204
     310:	04 04       	cpc	r0, r4
     312:	7c 78       	andi	r23, 0x8C	; 140
     314:	00 00       	nop
     316:	38 7c       	andi	r19, 0xC8	; 200
     318:	44 44       	sbci	r20, 0x44	; 68
     31a:	7c 38       	cpi	r23, 0x8C	; 140
     31c:	00 00       	nop
     31e:	84 fc       	sbrc	r8, 4
     320:	f8 a4       	ldd	r15, Y+40	; 0x28
     322:	24 3c       	cpi	r18, 0xC4	; 196
     324:	18 00       	.word	0x0018	; ????
     326:	18 3c       	cpi	r17, 0xC8	; 200
     328:	24 a4       	ldd	r2, Z+44	; 0x2c
     32a:	f8 fc       	.word	0xfcf8	; ????
     32c:	84 00       	.word	0x0084	; ????
     32e:	44 7c       	andi	r20, 0xC4	; 196
     330:	78 44       	sbci	r23, 0x48	; 72
     332:	1c 18       	sub	r1, r12
     334:	00 00       	nop
     336:	48 5c       	subi	r20, 0xC8	; 200
     338:	54 54       	subi	r21, 0x44	; 68
     33a:	74 24       	eor	r7, r4
     33c:	00 00       	nop
     33e:	00 04       	cpc	r0, r0
     340:	3e 7f       	andi	r19, 0xFE	; 254
     342:	44 24       	eor	r4, r4
     344:	00 00       	nop
     346:	3c 7c       	andi	r19, 0xCC	; 204
     348:	40 40       	sbci	r20, 0x00	; 0
     34a:	3c 7c       	andi	r19, 0xCC	; 204
     34c:	40 00       	.word	0x0040	; ????
     34e:	1c 3c       	cpi	r17, 0xCC	; 204
     350:	60 60       	ori	r22, 0x00	; 0
     352:	3c 1c       	adc	r3, r12
     354:	00 00       	nop
     356:	3c 7c       	andi	r19, 0xCC	; 204
     358:	60 30       	cpi	r22, 0x00	; 0
     35a:	60 7c       	andi	r22, 0xC0	; 192
     35c:	3c 00       	.word	0x003c	; ????
     35e:	44 6c       	ori	r20, 0xC4	; 196
     360:	38 10       	cpse	r3, r8
     362:	38 6c       	ori	r19, 0xC8	; 200
     364:	44 00       	.word	0x0044	; ????
     366:	9c bc       	out	0x2c, r9	; 44
     368:	a0 a0       	ldd	r10, Z+32	; 0x20
     36a:	fc 7c       	andi	r31, 0xCC	; 204
     36c:	00 00       	nop
     36e:	4c 64       	ori	r20, 0x4C	; 76
     370:	74 5c       	subi	r23, 0xC4	; 196
     372:	4c 64       	ori	r20, 0x4C	; 76
     374:	00 00       	nop
     376:	08 08       	sbc	r0, r8
     378:	3e 77       	andi	r19, 0x7E	; 126
     37a:	41 41       	sbci	r20, 0x11	; 17
     37c:	00 00       	nop
     37e:	00 00       	nop
     380:	00 77       	andi	r16, 0x70	; 112
     382:	77 00       	.word	0x0077	; ????
     384:	00 00       	nop
     386:	41 41       	sbci	r20, 0x11	; 17
     388:	77 3e       	cpi	r23, 0xE7	; 231
     38a:	08 08       	sbc	r0, r8
     38c:	00 00       	nop
     38e:	02 03       	mulsu	r16, r18
     390:	01 03       	mulsu	r16, r17
     392:	02 03       	mulsu	r16, r18
     394:	01 00       	.word	0x0001	; ????

00000396 <__ctors_end>:
     396:	11 24       	eor	r1, r1
     398:	1f be       	out	0x3f, r1	; 63
     39a:	cf ef       	ldi	r28, 0xFF	; 255
     39c:	d4 e0       	ldi	r29, 0x04	; 4
     39e:	de bf       	out	0x3e, r29	; 62
     3a0:	cd bf       	out	0x3d, r28	; 61

000003a2 <__do_copy_data>:
     3a2:	12 e0       	ldi	r17, 0x02	; 2
     3a4:	a0 e0       	ldi	r26, 0x00	; 0
     3a6:	b1 e0       	ldi	r27, 0x01	; 1
     3a8:	e2 e0       	ldi	r30, 0x02	; 2
     3aa:	f6 e2       	ldi	r31, 0x26	; 38
     3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <__do_copy_data+0x10>
     3ae:	05 90       	lpm	r0, Z+
     3b0:	0d 92       	st	X+, r0
     3b2:	a4 39       	cpi	r26, 0x94	; 148
     3b4:	b1 07       	cpc	r27, r17
     3b6:	d9 f7       	brne	.-10     	; 0x3ae <__do_copy_data+0xc>

000003b8 <__do_clear_bss>:
     3b8:	23 e0       	ldi	r18, 0x03	; 3
     3ba:	a4 e9       	ldi	r26, 0x94	; 148
     3bc:	b2 e0       	ldi	r27, 0x02	; 2
     3be:	01 c0       	rjmp	.+2      	; 0x3c2 <.do_clear_bss_start>

000003c0 <.do_clear_bss_loop>:
     3c0:	1d 92       	st	X+, r1

000003c2 <.do_clear_bss_start>:
     3c2:	aa 35       	cpi	r26, 0x5A	; 90
     3c4:	b2 07       	cpc	r27, r18
     3c6:	e1 f7       	brne	.-8      	; 0x3c0 <.do_clear_bss_loop>
     3c8:	0e 94 a9 0a 	call	0x1552	; 0x1552 <main>
     3cc:	0c 94 ff 12 	jmp	0x25fe	; 0x25fe <_exit>

000003d0 <__bad_interrupt>:
     3d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003d4 <ADC_read>:
    uint8_t retreived_value = ext_ram1[adrs];
    if (retreived_value != 0b01010101) {
        printf("ADC error, ext_ram1[%4d] = %02X  \n\r", adrs, retreived_value);
    }
    else{
        printf("ADC success, ext_ram1[%4d] = %02X  \n\r", adrs, retreived_value);
     3d4:	80 68       	ori	r24, 0x80	; 128
     3d6:	e1 e0       	ldi	r30, 0x01	; 1
     3d8:	f4 e1       	ldi	r31, 0x14	; 20
     3da:	80 83       	st	Z, r24
     3dc:	86 ef       	ldi	r24, 0xF6	; 246
     3de:	8a 95       	dec	r24
     3e0:	f1 f7       	brne	.-4      	; 0x3de <ADC_read+0xa>
     3e2:	80 81       	ld	r24, Z
     3e4:	08 95       	ret

000003e6 <ADC_calibrate>:
     3e6:	e1 e0       	ldi	r30, 0x01	; 1
     3e8:	f4 e1       	ldi	r31, 0x14	; 20
     3ea:	20 e8       	ldi	r18, 0x80	; 128
     3ec:	20 83       	st	Z, r18
     3ee:	26 ef       	ldi	r18, 0xF6	; 246
     3f0:	2a 95       	dec	r18
     3f2:	f1 f7       	brne	.-4      	; 0x3f0 <ADC_calibrate+0xa>
     3f4:	20 81       	ld	r18, Z
     3f6:	30 e0       	ldi	r19, 0x00	; 0
     3f8:	dc 01       	movw	r26, r24
     3fa:	2d 93       	st	X+, r18
     3fc:	3c 93       	st	X, r19
     3fe:	21 e8       	ldi	r18, 0x81	; 129
     400:	20 83       	st	Z, r18
     402:	b6 ef       	ldi	r27, 0xF6	; 246
     404:	ba 95       	dec	r27
     406:	f1 f7       	brne	.-4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     408:	20 81       	ld	r18, Z
     40a:	30 e0       	ldi	r19, 0x00	; 0
     40c:	fc 01       	movw	r30, r24
     40e:	33 83       	std	Z+3, r19	; 0x03
     410:	22 83       	std	Z+2, r18	; 0x02
     412:	08 95       	ret

00000414 <ADC_timer_init>:
}


void ADC_timer_init(void) {

    DDRB|=(1<<PB0);  /*set OC0 pin as output*/
     414:	b8 9a       	sbi	0x17, 0	; 23

    TCCR0 |= (1<<WGM01) | (0<<WGM00);
     416:	83 b7       	in	r24, 0x33	; 51
     418:	88 60       	ori	r24, 0x08	; 8
     41a:	83 bf       	out	0x33, r24	; 51
    TCCR0 |= (1<<COM00);
     41c:	83 b7       	in	r24, 0x33	; 51
     41e:	80 61       	ori	r24, 0x10	; 16
     420:	83 bf       	out	0x33, r24	; 51
    TCCR0 |= (1<<CS00);
     422:	83 b7       	in	r24, 0x33	; 51
     424:	81 60       	ori	r24, 0x01	; 1
     426:	83 bf       	out	0x33, r24	; 51

    OCR0 = 0b00000001;
     428:	81 e0       	ldi	r24, 0x01	; 1
     42a:	81 bf       	out	0x31, r24	; 49
     42c:	08 95       	ret

0000042e <CAN_init>:
    for(uint8_t i = 0; i < message.data_length; i++){
        (message.data)[i] = mcp_read(MCP_RXB0DM +i + 16);
    }
    
    return message;
}
     42e:	cf 93       	push	r28
     430:	c8 2f       	mov	r28, r24
     432:	f8 94       	cli
     434:	85 b7       	in	r24, 0x35	; 53
     436:	82 60       	ori	r24, 0x02	; 2
     438:	85 bf       	out	0x35, r24	; 53
     43a:	85 b7       	in	r24, 0x35	; 53
     43c:	8e 7f       	andi	r24, 0xFE	; 254
     43e:	85 bf       	out	0x35, r24	; 53
     440:	8b b7       	in	r24, 0x3b	; 59
     442:	80 64       	ori	r24, 0x40	; 64
     444:	8b bf       	out	0x3b, r24	; 59
     446:	78 94       	sei
     448:	80 e8       	ldi	r24, 0x80	; 128
     44a:	0e 94 87 03 	call	0x70e	; 0x70e <mcp_init>
     44e:	61 e0       	ldi	r22, 0x01	; 1
     450:	8b e2       	ldi	r24, 0x2B	; 43
     452:	0e 94 4e 03 	call	0x69c	; 0x69c <mcp_write>
     456:	61 e8       	ldi	r22, 0x81	; 129
     458:	8a e2       	ldi	r24, 0x2A	; 42
     45a:	0e 94 4e 03 	call	0x69c	; 0x69c <mcp_write>
     45e:	6d ea       	ldi	r22, 0xAD	; 173
     460:	89 e2       	ldi	r24, 0x29	; 41
     462:	0e 94 4e 03 	call	0x69c	; 0x69c <mcp_write>
     466:	65 e0       	ldi	r22, 0x05	; 5
     468:	88 e2       	ldi	r24, 0x28	; 40
     46a:	0e 94 4e 03 	call	0x69c	; 0x69c <mcp_write>
     46e:	8c 2f       	mov	r24, r28
     470:	0e 94 64 03 	call	0x6c8	; 0x6c8 <mcp_set_mode>
     474:	cf 91       	pop	r28
     476:	08 95       	ret

00000478 <__vector_1>:
     478:	1f 92       	push	r1
     47a:	0f 92       	push	r0
     47c:	0f b6       	in	r0, 0x3f	; 63
     47e:	0f 92       	push	r0
     480:	11 24       	eor	r1, r1
     482:	8f 93       	push	r24
     484:	9f 93       	push	r25
     486:	81 e0       	ldi	r24, 0x01	; 1
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	90 93 95 02 	sts	0x0295, r25	; 0x800295 <__data_end+0x1>
     48e:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <__data_end>
     492:	9f 91       	pop	r25
     494:	8f 91       	pop	r24
     496:	0f 90       	pop	r0
     498:	0f be       	out	0x3f, r0	; 63
     49a:	0f 90       	pop	r0
     49c:	1f 90       	pop	r1
     49e:	18 95       	reti

000004a0 <CAN_message_transmission>:
     4a0:	0f 93       	push	r16
     4a2:	1f 93       	push	r17
     4a4:	cf 93       	push	r28
     4a6:	df 93       	push	r29
     4a8:	8c 01       	movw	r16, r24
     4aa:	fc 01       	movw	r30, r24
     4ac:	c0 81       	ld	r28, Z
     4ae:	d1 81       	ldd	r29, Z+1	; 0x01
     4b0:	6c 2f       	mov	r22, r28
     4b2:	62 95       	swap	r22
     4b4:	66 0f       	add	r22, r22
     4b6:	60 7e       	andi	r22, 0xE0	; 224
     4b8:	82 e3       	ldi	r24, 0x32	; 50
     4ba:	0e 94 4e 03 	call	0x69c	; 0x69c <mcp_write>
     4be:	be 01       	movw	r22, r28
     4c0:	76 95       	lsr	r23
     4c2:	67 95       	ror	r22
     4c4:	76 95       	lsr	r23
     4c6:	67 95       	ror	r22
     4c8:	76 95       	lsr	r23
     4ca:	67 95       	ror	r22
     4cc:	81 e3       	ldi	r24, 0x31	; 49
     4ce:	0e 94 4e 03 	call	0x69c	; 0x69c <mcp_write>
     4d2:	f8 01       	movw	r30, r16
     4d4:	62 81       	ldd	r22, Z+2	; 0x02
     4d6:	85 e3       	ldi	r24, 0x35	; 53
     4d8:	0e 94 4e 03 	call	0x69c	; 0x69c <mcp_write>
     4dc:	f8 01       	movw	r30, r16
     4de:	82 81       	ldd	r24, Z+2	; 0x02
     4e0:	88 23       	and	r24, r24
     4e2:	71 f0       	breq	.+28     	; 0x500 <__stack+0x1>
     4e4:	c0 e0       	ldi	r28, 0x00	; 0
     4e6:	f8 01       	movw	r30, r16
     4e8:	ec 0f       	add	r30, r28
     4ea:	f1 1d       	adc	r31, r1
     4ec:	63 81       	ldd	r22, Z+3	; 0x03
     4ee:	86 e3       	ldi	r24, 0x36	; 54
     4f0:	8c 0f       	add	r24, r28
     4f2:	0e 94 4e 03 	call	0x69c	; 0x69c <mcp_write>
     4f6:	cf 5f       	subi	r28, 0xFF	; 255
     4f8:	f8 01       	movw	r30, r16
     4fa:	82 81       	ldd	r24, Z+2	; 0x02
     4fc:	c8 17       	cp	r28, r24
     4fe:	98 f3       	brcs	.-26     	; 0x4e6 <CAN_message_transmission+0x46>
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	0e 94 df 03 	call	0x7be	; 0x7be <mcp_request_to_send>
     506:	df 91       	pop	r29
     508:	cf 91       	pop	r28
     50a:	1f 91       	pop	r17
     50c:	0f 91       	pop	r16
     50e:	08 95       	ret

00000510 <CAN_meessage_reception>:
     510:	9f 92       	push	r9
     512:	af 92       	push	r10
     514:	bf 92       	push	r11
     516:	cf 92       	push	r12
     518:	df 92       	push	r13
     51a:	ef 92       	push	r14
     51c:	ff 92       	push	r15
     51e:	0f 93       	push	r16
     520:	1f 93       	push	r17
     522:	cf 93       	push	r28
     524:	df 93       	push	r29
     526:	cd b7       	in	r28, 0x3d	; 61
     528:	de b7       	in	r29, 0x3e	; 62
     52a:	2b 97       	sbiw	r28, 0x0b	; 11
     52c:	0f b6       	in	r0, 0x3f	; 63
     52e:	f8 94       	cli
     530:	de bf       	out	0x3e, r29	; 62
     532:	0f be       	out	0x3f, r0	; 63
     534:	cd bf       	out	0x3d, r28	; 61
     536:	5c 01       	movw	r10, r24
     538:	81 e6       	ldi	r24, 0x61	; 97
     53a:	0e 94 69 03 	call	0x6d2	; 0x6d2 <mcp_read>
     53e:	c8 2e       	mov	r12, r24
     540:	d1 2c       	mov	r13, r1
     542:	82 e6       	ldi	r24, 0x62	; 98
     544:	0e 94 69 03 	call	0x6d2	; 0x6d2 <mcp_read>
     548:	dc 2c       	mov	r13, r12
     54a:	cc 24       	eor	r12, r12
     54c:	80 7e       	andi	r24, 0xE0	; 224
     54e:	c8 0e       	add	r12, r24
     550:	d1 1c       	adc	r13, r1
     552:	85 e6       	ldi	r24, 0x65	; 101
     554:	0e 94 69 03 	call	0x6d2	; 0x6d2 <mcp_read>
     558:	8f 70       	andi	r24, 0x0F	; 15
     55a:	98 2e       	mov	r9, r24
     55c:	81 f0       	breq	.+32     	; 0x57e <CAN_meessage_reception+0x6e>
     55e:	7e 01       	movw	r14, r28
     560:	84 e0       	ldi	r24, 0x04	; 4
     562:	e8 0e       	add	r14, r24
     564:	f1 1c       	adc	r15, r1
     566:	06 e6       	ldi	r16, 0x66	; 102
     568:	09 0d       	add	r16, r9
     56a:	16 e6       	ldi	r17, 0x66	; 102
     56c:	81 2f       	mov	r24, r17
     56e:	0e 94 69 03 	call	0x6d2	; 0x6d2 <mcp_read>
     572:	f7 01       	movw	r30, r14
     574:	81 93       	st	Z+, r24
     576:	7f 01       	movw	r14, r30
     578:	1f 5f       	subi	r17, 0xFF	; 255
     57a:	10 13       	cpse	r17, r16
     57c:	f7 cf       	rjmp	.-18     	; 0x56c <CAN_meessage_reception+0x5c>
     57e:	da 82       	std	Y+2, r13	; 0x02
     580:	c9 82       	std	Y+1, r12	; 0x01
     582:	9b 82       	std	Y+3, r9	; 0x03
     584:	8b e0       	ldi	r24, 0x0B	; 11
     586:	fe 01       	movw	r30, r28
     588:	31 96       	adiw	r30, 0x01	; 1
     58a:	d5 01       	movw	r26, r10
     58c:	01 90       	ld	r0, Z+
     58e:	0d 92       	st	X+, r0
     590:	8a 95       	dec	r24
     592:	e1 f7       	brne	.-8      	; 0x58c <CAN_meessage_reception+0x7c>
     594:	c5 01       	movw	r24, r10
     596:	2b 96       	adiw	r28, 0x0b	; 11
     598:	0f b6       	in	r0, 0x3f	; 63
     59a:	f8 94       	cli
     59c:	de bf       	out	0x3e, r29	; 62
     59e:	0f be       	out	0x3f, r0	; 63
     5a0:	cd bf       	out	0x3d, r28	; 61
     5a2:	df 91       	pop	r29
     5a4:	cf 91       	pop	r28
     5a6:	1f 91       	pop	r17
     5a8:	0f 91       	pop	r16
     5aa:	ff 90       	pop	r15
     5ac:	ef 90       	pop	r14
     5ae:	df 90       	pop	r13
     5b0:	cf 90       	pop	r12
     5b2:	bf 90       	pop	r11
     5b4:	af 90       	pop	r10
     5b6:	9f 90       	pop	r9
     5b8:	08 95       	ret

000005ba <message_handler>:

CAN_message_t message_handler(){
     5ba:	cf 93       	push	r28
     5bc:	df 93       	push	r29
     5be:	ec 01       	movw	r28, r24
    CAN_message_t message;
    
	if(flag){
     5c0:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <__data_end>
     5c4:	90 91 95 02 	lds	r25, 0x0295	; 0x800295 <__data_end+0x1>
     5c8:	89 2b       	or	r24, r25
     5ca:	61 f0       	breq	.+24     	; 0x5e4 <message_handler+0x2a>
        message = CAN_meessage_reception(); //reads buffer 2 register
     5cc:	ce 01       	movw	r24, r28
     5ce:	0e 94 88 02 	call	0x510	; 0x510 <CAN_meessage_reception>

		flag = 0;
     5d2:	10 92 95 02 	sts	0x0295, r1	; 0x800295 <__data_end+0x1>
     5d6:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <__data_end>
        mcp_bit_modify(MCP_CANINTF, 1, 0);  // resets can interrupt flag bit for buffer 1
     5da:	40 e0       	ldi	r20, 0x00	; 0
     5dc:	61 e0       	ldi	r22, 0x01	; 1
     5de:	8c e2       	ldi	r24, 0x2C	; 44
     5e0:	0e 94 c3 03 	call	0x786	; 0x786 <mcp_bit_modify>

    }
return message;
}
     5e4:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <__data_end>
     5e8:	90 91 95 02 	lds	r25, 0x0295	; 0x800295 <__data_end+0x1>
     5ec:	9f 93       	push	r25
     5ee:	8f 93       	push	r24
     5f0:	80 e4       	ldi	r24, 0x40	; 64
     5f2:	91 e0       	ldi	r25, 0x01	; 1
     5f4:	9f 93       	push	r25
     5f6:	8f 93       	push	r24
     5f8:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <printf>

     5fc:	0f 90       	pop	r0
     5fe:	0f 90       	pop	r0
     600:	0f 90       	pop	r0
     602:	0f 90       	pop	r0
void CAN_communication_test(){ 
     604:	ce 01       	movw	r24, r28
     606:	df 91       	pop	r29
     608:	cf 91       	pop	r28
     60a:	08 95       	ret

0000060c <joyStick_Can_Message>:
 *  Author: Herbe
 */ 
#include "CAN_joystick_messages.h"


void joyStick_Can_Message(){
     60c:	ef 92       	push	r14
     60e:	ff 92       	push	r15
     610:	0f 93       	push	r16
     612:	1f 93       	push	r17
     614:	cf 93       	push	r28
     616:	df 93       	push	r29
     618:	cd b7       	in	r28, 0x3d	; 61
     61a:	de b7       	in	r29, 0x3e	; 62
     61c:	2b 97       	sbiw	r28, 0x0b	; 11
     61e:	0f b6       	in	r0, 0x3f	; 63
     620:	f8 94       	cli
     622:	de bf       	out	0x3e, r29	; 62
     624:	0f be       	out	0x3f, r0	; 63
     626:	cd bf       	out	0x3d, r28	; 61
	
pos_read(&P_pos); //Reads the current position of the joystick
     628:	86 e4       	ldi	r24, 0x46	; 70
     62a:	93 e0       	ldi	r25, 0x03	; 3
     62c:	0e 94 dd 08 	call	0x11ba	; 0x11ba <pos_read>

uint8_t sendSliderRight = ADC_read(2);  
     630:	82 e0       	ldi	r24, 0x02	; 2
     632:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ADC_read>
     636:	e8 2e       	mov	r14, r24
uint8_t sendPosX = 128 + P_pos.posX;  //Adding 128 to not have negative a number
     638:	e6 e4       	ldi	r30, 0x46	; 70
     63a:	f3 e0       	ldi	r31, 0x03	; 3
     63c:	80 81       	ld	r24, Z
     63e:	68 94       	set
     640:	ff 24       	eor	r15, r15
     642:	f7 f8       	bld	r15, 7
     644:	f8 0e       	add	r15, r24
uint8_t sendPosY = 128 + P_pos.posY;  //Adding 128 to not have negative a number
     646:	02 81       	ldd	r16, Z+2	; 0x02
     648:	00 58       	subi	r16, 0x80	; 128
uint8_t sendJoyButton = usb_button_pushed(JOYSTICK_BUTTON);
     64a:	82 e0       	ldi	r24, 0x02	; 2
     64c:	0e 94 95 0a 	call	0x152a	; 0x152a <usb_button_pushed>
     650:	18 2f       	mov	r17, r24
uint8_t sendJoyDirection = (joystick_direction()) << 1; //shift right to not disturb rest of message
     652:	0e 94 cf 09 	call	0x139e	; 0x139e <joystick_direction>

uint8_t sendJoyData = sendJoyDirection + sendJoyButton;  //Combining button-bushed and joystick-direction in one byte.

CAN_message_t joyStickData;
joyStickData.identifier = 0b11111111;
     656:	2f ef       	ldi	r18, 0xFF	; 255
     658:	30 e0       	ldi	r19, 0x00	; 0
     65a:	3a 83       	std	Y+2, r19	; 0x02
     65c:	29 83       	std	Y+1, r18	; 0x01
joyStickData.data[0] = sendPosX;
     65e:	fc 82       	std	Y+4, r15	; 0x04
joyStickData.data[1] = sendPosY;
     660:	0d 83       	std	Y+5, r16	; 0x05
joyStickData.data[2] = sendJoyData;
     662:	88 0f       	add	r24, r24
     664:	18 0f       	add	r17, r24
     666:	1e 83       	std	Y+6, r17	; 0x06
joyStickData.data[3] = sendSliderRight;
     668:	ef 82       	std	Y+7, r14	; 0x07
joyStickData.data_length = 4;
     66a:	84 e0       	ldi	r24, 0x04	; 4
     66c:	8b 83       	std	Y+3, r24	; 0x03

CAN_message_transmission(&joyStickData);
     66e:	ce 01       	movw	r24, r28
     670:	01 96       	adiw	r24, 0x01	; 1
     672:	0e 94 50 02 	call	0x4a0	; 0x4a0 <CAN_message_transmission>
     676:	2b 96       	adiw	r28, 0x0b	; 11
     678:	0f b6       	in	r0, 0x3f	; 63
     67a:	f8 94       	cli
     67c:	de bf       	out	0x3e, r29	; 62
     67e:	0f be       	out	0x3f, r0	; 63
     680:	cd bf       	out	0x3d, r28	; 61
     682:	df 91       	pop	r29
     684:	cf 91       	pop	r28
     686:	1f 91       	pop	r17
     688:	0f 91       	pop	r16
     68a:	ff 90       	pop	r15
     68c:	ef 90       	pop	r14
     68e:	08 95       	ret

00000690 <spi_master_CS>:

    spi_master_CS(1);

    return status_value;
}

     690:	81 11       	cpse	r24, r1
     692:	02 c0       	rjmp	.+4      	; 0x698 <spi_master_CS+0x8>
     694:	c4 98       	cbi	0x18, 4	; 24
     696:	08 95       	ret
     698:	c4 9a       	sbi	0x18, 4	; 24
     69a:	08 95       	ret

0000069c <mcp_write>:
     69c:	cf 93       	push	r28
     69e:	df 93       	push	r29
     6a0:	d8 2f       	mov	r29, r24
     6a2:	c6 2f       	mov	r28, r22
     6a4:	80 e0       	ldi	r24, 0x00	; 0
     6a6:	0e 94 48 03 	call	0x690	; 0x690 <spi_master_CS>
     6aa:	82 e0       	ldi	r24, 0x02	; 2
     6ac:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <spi_write>
     6b0:	8d 2f       	mov	r24, r29
     6b2:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <spi_write>
     6b6:	8c 2f       	mov	r24, r28
     6b8:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <spi_write>
     6bc:	81 e0       	ldi	r24, 0x01	; 1
     6be:	0e 94 48 03 	call	0x690	; 0x690 <spi_master_CS>
     6c2:	df 91       	pop	r29
     6c4:	cf 91       	pop	r28
     6c6:	08 95       	ret

000006c8 <mcp_set_mode>:
     6c8:	68 2f       	mov	r22, r24
     6ca:	8f e0       	ldi	r24, 0x0F	; 15
     6cc:	0e 94 4e 03 	call	0x69c	; 0x69c <mcp_write>
     6d0:	08 95       	ret

000006d2 <mcp_read>:
     6d2:	cf 93       	push	r28
     6d4:	c8 2f       	mov	r28, r24
     6d6:	80 e0       	ldi	r24, 0x00	; 0
     6d8:	0e 94 48 03 	call	0x690	; 0x690 <spi_master_CS>
     6dc:	83 e0       	ldi	r24, 0x03	; 3
     6de:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <spi_write>
     6e2:	8c 2f       	mov	r24, r28
     6e4:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <spi_write>
     6e8:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <spi_read>
     6ec:	c8 2f       	mov	r28, r24
     6ee:	81 e0       	ldi	r24, 0x01	; 1
     6f0:	0e 94 48 03 	call	0x690	; 0x690 <spi_master_CS>
     6f4:	8c 2f       	mov	r24, r28
     6f6:	cf 91       	pop	r28
     6f8:	08 95       	ret

000006fa <mcp_reset>:
     6fa:	80 e0       	ldi	r24, 0x00	; 0
     6fc:	0e 94 48 03 	call	0x690	; 0x690 <spi_master_CS>
     700:	80 ec       	ldi	r24, 0xC0	; 192
     702:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <spi_write>
     706:	81 e0       	ldi	r24, 0x01	; 1
     708:	0e 94 48 03 	call	0x690	; 0x690 <spi_master_CS>
     70c:	08 95       	ret

0000070e <mcp_init>:
     70e:	cf 93       	push	r28
     710:	df 93       	push	r29
     712:	d8 2f       	mov	r29, r24
     714:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <spi_init>
     718:	0e 94 7d 03 	call	0x6fa	; 0x6fa <mcp_reset>
     71c:	80 e8       	ldi	r24, 0x80	; 128
     71e:	0e 94 64 03 	call	0x6c8	; 0x6c8 <mcp_set_mode>
     722:	8f ef       	ldi	r24, 0xFF	; 255
     724:	9f e8       	ldi	r25, 0x8F	; 143
     726:	01 97       	sbiw	r24, 0x01	; 1
     728:	f1 f7       	brne	.-4      	; 0x726 <mcp_init+0x18>
     72a:	00 c0       	rjmp	.+0      	; 0x72c <mcp_init+0x1e>
     72c:	00 00       	nop
     72e:	8e e0       	ldi	r24, 0x0E	; 14
     730:	0e 94 69 03 	call	0x6d2	; 0x6d2 <mcp_read>
     734:	c8 2f       	mov	r28, r24
     736:	1f 92       	push	r1
     738:	8f 93       	push	r24
     73a:	82 e5       	ldi	r24, 0x52	; 82
     73c:	91 e0       	ldi	r25, 0x01	; 1
     73e:	9f 93       	push	r25
     740:	8f 93       	push	r24
     742:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <printf>
     746:	c0 7e       	andi	r28, 0xE0	; 224
     748:	0f 90       	pop	r0
     74a:	0f 90       	pop	r0
     74c:	0f 90       	pop	r0
     74e:	0f 90       	pop	r0
     750:	c0 38       	cpi	r28, 0x80	; 128
     752:	31 f0       	breq	.+12     	; 0x760 <mcp_init+0x52>
     754:	8e e5       	ldi	r24, 0x5E	; 94
     756:	91 e0       	ldi	r25, 0x01	; 1
     758:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <puts>
     75c:	81 e0       	ldi	r24, 0x01	; 1
     75e:	10 c0       	rjmp	.+32     	; 0x780 <mcp_init+0x72>
     760:	8d 2f       	mov	r24, r29
     762:	0e 94 64 03 	call	0x6c8	; 0x6c8 <mcp_set_mode>
     766:	8e e0       	ldi	r24, 0x0E	; 14
     768:	0e 94 69 03 	call	0x6d2	; 0x6d2 <mcp_read>
     76c:	80 7e       	andi	r24, 0xE0	; 224
     76e:	8d 17       	cp	r24, r29
     770:	31 f0       	breq	.+12     	; 0x77e <mcp_init+0x70>
     772:	80 e9       	ldi	r24, 0x90	; 144
     774:	91 e0       	ldi	r25, 0x01	; 1
     776:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <puts>
     77a:	81 e0       	ldi	r24, 0x01	; 1
     77c:	01 c0       	rjmp	.+2      	; 0x780 <mcp_init+0x72>
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	df 91       	pop	r29
     782:	cf 91       	pop	r28
     784:	08 95       	ret

00000786 <mcp_bit_modify>:
     786:	1f 93       	push	r17
     788:	cf 93       	push	r28
     78a:	df 93       	push	r29
     78c:	18 2f       	mov	r17, r24
     78e:	d6 2f       	mov	r29, r22
     790:	c4 2f       	mov	r28, r20
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	0e 94 48 03 	call	0x690	; 0x690 <spi_master_CS>
     798:	85 e0       	ldi	r24, 0x05	; 5
     79a:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <spi_write>
     79e:	81 2f       	mov	r24, r17
     7a0:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <spi_write>
     7a4:	8d 2f       	mov	r24, r29
     7a6:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <spi_write>
     7aa:	8c 2f       	mov	r24, r28
     7ac:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <spi_write>
     7b0:	81 e0       	ldi	r24, 0x01	; 1
     7b2:	0e 94 48 03 	call	0x690	; 0x690 <spi_master_CS>
     7b6:	df 91       	pop	r29
     7b8:	cf 91       	pop	r28
     7ba:	1f 91       	pop	r17
     7bc:	08 95       	ret

000007be <mcp_request_to_send>:
void mcp_request_to_send(uint8_t buffer){
    spi_master_CS(0);
     7be:	cf 93       	push	r28
     7c0:	c8 2f       	mov	r28, r24

     7c2:	80 e0       	ldi	r24, 0x00	; 0
     7c4:	0e 94 48 03 	call	0x690	; 0x690 <spi_master_CS>
    switch (buffer) {
      case 0:
     7c8:	c1 30       	cpi	r28, 0x01	; 1
     7ca:	41 f0       	breq	.+16     	; 0x7dc <mcp_request_to_send+0x1e>
     7cc:	18 f0       	brcs	.+6      	; 0x7d4 <mcp_request_to_send+0x16>
     7ce:	c2 30       	cpi	r28, 0x02	; 2
     7d0:	49 f0       	breq	.+18     	; 0x7e4 <mcp_request_to_send+0x26>
     7d2:	0c c0       	rjmp	.+24     	; 0x7ec <mcp_request_to_send+0x2e>
          spi_write(MCP_RTS_TX0);
          break;
     7d4:	81 e8       	ldi	r24, 0x81	; 129
     7d6:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <spi_write>
      case 1:
     7da:	0b c0       	rjmp	.+22     	; 0x7f2 <mcp_request_to_send+0x34>
          spi_write(MCP_RTS_TX1);
          break;
     7dc:	82 e8       	ldi	r24, 0x82	; 130
     7de:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <spi_write>
      case 2:
     7e2:	07 c0       	rjmp	.+14     	; 0x7f2 <mcp_request_to_send+0x34>
          spi_write(MCP_RTS_TX2);
          break;
     7e4:	84 e8       	ldi	r24, 0x84	; 132
     7e6:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <spi_write>
      default:
     7ea:	03 c0       	rjmp	.+6      	; 0x7f2 <mcp_request_to_send+0x34>
        spi_write(MCP_RTS_ALL);
    }
     7ec:	87 e8       	ldi	r24, 0x87	; 135
     7ee:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <spi_write>

    spi_master_CS(1);
}
     7f2:	81 e0       	ldi	r24, 0x01	; 1
     7f4:	0e 94 48 03 	call	0x690	; 0x690 <spi_master_CS>
     7f8:	cf 91       	pop	r28
     7fa:	08 95       	ret

000007fc <InitMusic>:

void InitMusic()
{
	// Configure OC1B pin as output

	DDRE |= (1 << PE2); //OC1B as output
     7fc:	32 9a       	sbi	0x06, 2	; 6

	// timer1 configuration (for pWM)
    TCCR1A = (1 << COM1B1);  // Clear OC1A/OC1B on compare match
     7fe:	80 e2       	ldi	r24, 0x20	; 32
     800:	8f bd       	out	0x2f, r24	; 47

	
	TCCR1B = (1 << WGM13) 	//mode 8, pWM, phase and Frequency Correct (TOp value is ICR1)
     802:	82 e1       	ldi	r24, 0x12	; 18
     804:	8e bd       	out	0x2e, r24	; 46
     806:	08 95       	ret

00000808 <playMusic>:

/**
	plays music.
*/

void playMusic( int* p_notes, uint8_t tempo, uint8_t scale)	{							 /** paying tempo from 0 to 100. Higher value = slower playback*/
     808:	cf 92       	push	r12
     80a:	df 92       	push	r13
     80c:	ef 92       	push	r14
     80e:	ff 92       	push	r15
     810:	0f 93       	push	r16
     812:	1f 93       	push	r17
     814:	cf 93       	push	r28
     816:	df 93       	push	r29
     818:	ec 01       	movw	r28, r24
//	uint16_t size = sizeof(*p_notes);

	int duration;
	int note;
	uint8_t i = 0;
	uint16_t delay = tempo * 10000;
     81a:	80 e1       	ldi	r24, 0x10	; 16
     81c:	97 e2       	ldi	r25, 0x27	; 39
     81e:	68 9f       	mul	r22, r24
     820:	90 01       	movw	r18, r0
     822:	69 9f       	mul	r22, r25
     824:	30 0d       	add	r19, r0
     826:	11 24       	eor	r1, r1
   
	while( *p_notes )
	{
		*p_notes = scale* (*p_notes);
     828:	04 2f       	mov	r16, r20
     82a:	10 e0       	ldi	r17, 0x00	; 0
		}

		else
		{
			//not a pause, generate tone
			OCR1B = DEFAULT_VOLUME;
     82c:	0f 2e       	mov	r0, r31
     82e:	f4 e6       	ldi	r31, 0x64	; 100
     830:	cf 2e       	mov	r12, r31
     832:	d1 2c       	mov	r13, r1
     834:	f0 2d       	mov	r31, r0
			//set frequency
			ICR1H = (note >> 8);
			ICR1L = note;
		}
		// wait duration
		for(i=0;i<32/duration;i++)
     836:	68 94       	set
     838:	ee 24       	eor	r14, r14
     83a:	e5 f8       	bld	r14, 5
     83c:	f1 2c       	mov	r15, r1
	int duration;
	int note;
	uint8_t i = 0;
	uint16_t delay = tempo * 10000;
   
	while( *p_notes )
     83e:	2d c0       	rjmp	.+90     	; 0x89a <playMusic+0x92>
	{
		*p_notes = scale* (*p_notes);
     840:	04 9f       	mul	r16, r20
     842:	c0 01       	movw	r24, r0
     844:	05 9f       	mul	r16, r21
     846:	90 0d       	add	r25, r0
     848:	14 9f       	mul	r17, r20
     84a:	90 0d       	add	r25, r0
     84c:	11 24       	eor	r1, r1
     84e:	99 83       	std	Y+1, r25	; 0x01
     850:	88 83       	st	Y, r24
		note = *p_notes;
		p_notes++;

		duration = *p_notes;
     852:	6a 81       	ldd	r22, Y+2	; 0x02
     854:	7b 81       	ldd	r23, Y+3	; 0x03
     856:	24 96       	adiw	r28, 0x04	; 4
		p_notes++;

		if( p == note )
     858:	81 30       	cpi	r24, 0x01	; 1
     85a:	91 05       	cpc	r25, r1
     85c:	19 f4       	brne	.+6      	; 0x864 <playMusic+0x5c>
		{
			//pause, do not generate any sound
			OCR1B = 0;
     85e:	19 bc       	out	0x29, r1	; 41
     860:	18 bc       	out	0x28, r1	; 40
     862:	04 c0       	rjmp	.+8      	; 0x86c <playMusic+0x64>
		}

		else
		{
			//not a pause, generate tone
			OCR1B = DEFAULT_VOLUME;
     864:	d9 bc       	out	0x29, r13	; 41
     866:	c8 bc       	out	0x28, r12	; 40

			//set frequency
			ICR1H = (note >> 8);
     868:	95 bd       	out	0x25, r25	; 37
			ICR1L = note;
     86a:	84 bd       	out	0x24, r24	; 36
		}
		// wait duration
		for(i=0;i<32/duration;i++)
     86c:	c7 01       	movw	r24, r14
     86e:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <__divmodhi4>
     872:	16 16       	cp	r1, r22
     874:	17 06       	cpc	r1, r23
     876:	6c f0       	brlt	.+26     	; 0x892 <playMusic+0x8a>
     878:	10 c0       	rjmp	.+32     	; 0x89a <playMusic+0x92>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     87a:	f9 01       	movw	r30, r18
     87c:	31 97       	sbiw	r30, 0x01	; 1
     87e:	f1 f7       	brne	.-4      	; 0x87c <playMusic+0x74>
     880:	01 97       	sbiw	r24, 0x01	; 1
		{
			for(int j = 0; j<5; j++){
     882:	d9 f7       	brne	.-10     	; 0x87a <playMusic+0x72>
			//set frequency
			ICR1H = (note >> 8);
			ICR1L = note;
		}
		// wait duration
		for(i=0;i<32/duration;i++)
     884:	4f 5f       	subi	r20, 0xFF	; 255
     886:	84 2f       	mov	r24, r20
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	86 17       	cp	r24, r22
     88c:	97 07       	cpc	r25, r23
     88e:	14 f0       	brlt	.+4      	; 0x894 <playMusic+0x8c>
     890:	04 c0       	rjmp	.+8      	; 0x89a <playMusic+0x92>
     892:	40 e0       	ldi	r20, 0x00	; 0

/**
	plays music.
*/

void playMusic( int* p_notes, uint8_t tempo, uint8_t scale)	{							 /** paying tempo from 0 to 100. Higher value = slower playback*/
     894:	85 e0       	ldi	r24, 0x05	; 5
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	f0 cf       	rjmp	.-32     	; 0x87a <playMusic+0x72>
	int duration;
	int note;
	uint8_t i = 0;
	uint16_t delay = tempo * 10000;
   
	while( *p_notes )
     89a:	48 81       	ld	r20, Y
     89c:	59 81       	ldd	r21, Y+1	; 0x01
     89e:	41 15       	cp	r20, r1
     8a0:	51 05       	cpc	r21, r1
     8a2:	71 f6       	brne	.-100    	; 0x840 <playMusic+0x38>
		}
	}
	

	//turn off any sound
	OCR1B = 0;
     8a4:	19 bc       	out	0x29, r1	; 41
     8a6:	18 bc       	out	0x28, r1	; 40
}
     8a8:	df 91       	pop	r29
     8aa:	cf 91       	pop	r28
     8ac:	1f 91       	pop	r17
     8ae:	0f 91       	pop	r16
     8b0:	ff 90       	pop	r15
     8b2:	ef 90       	pop	r14
     8b4:	df 90       	pop	r13
     8b6:	cf 90       	pop	r12
     8b8:	08 95       	ret

000008ba <oled_sel_row>:
     8ba:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <oled_position>
     8be:	87 70       	andi	r24, 0x07	; 7
     8c0:	80 55       	subi	r24, 0x50	; 80
     8c2:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     8c6:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     8ca:	80 83       	st	Z, r24
     8cc:	08 95       	ret

000008ce <oled_sel_col>:
     8ce:	80 93 4b 03 	sts	0x034B, r24	; 0x80034b <oled_position+0x1>
     8d2:	98 2f       	mov	r25, r24
     8d4:	9f 70       	andi	r25, 0x0F	; 15
     8d6:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     8da:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     8de:	90 83       	st	Z, r25
     8e0:	82 95       	swap	r24
     8e2:	8f 70       	andi	r24, 0x0F	; 15
     8e4:	80 5f       	subi	r24, 0xF0	; 240
     8e6:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     8ea:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     8ee:	80 83       	st	Z, r24
     8f0:	08 95       	ret

000008f2 <oled_line_down>:
     8f2:	80 55       	subi	r24, 0x50	; 80
     8f4:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     8f8:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     8fc:	80 83       	st	Z, r24
     8fe:	08 95       	ret

00000900 <oled_pos_set>:
     900:	cf 93       	push	r28
     902:	c6 2f       	mov	r28, r22
     904:	0e 94 5d 04 	call	0x8ba	; 0x8ba <oled_sel_row>
     908:	8c 2f       	mov	r24, r28
     90a:	0e 94 67 04 	call	0x8ce	; 0x8ce <oled_sel_col>
     90e:	cf 91       	pop	r28
     910:	08 95       	ret

00000912 <oled_home>:
     912:	60 e0       	ldi	r22, 0x00	; 0
     914:	80 e0       	ldi	r24, 0x00	; 0
     916:	0e 94 80 04 	call	0x900	; 0x900 <oled_pos_set>
     91a:	08 95       	ret

0000091c <oled_clear>:
     91c:	1f 93       	push	r17
     91e:	cf 93       	push	r28
     920:	df 93       	push	r29
     922:	10 e0       	ldi	r17, 0x00	; 0
     924:	c6 ea       	ldi	r28, 0xA6	; 166
     926:	d0 e0       	ldi	r29, 0x00	; 0
     928:	81 2f       	mov	r24, r17
     92a:	0e 94 79 04 	call	0x8f2	; 0x8f2 <oled_line_down>
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	0d c0       	rjmp	.+26     	; 0x94c <oled_clear+0x30>
     932:	84 91       	lpm	r24, Z
     934:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <oled_write_data>
     938:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <oled_write_data+0x1>
     93c:	8c 93       	st	X, r24
     93e:	31 96       	adiw	r30, 0x01	; 1
     940:	ec 17       	cp	r30, r28
     942:	fd 07       	cpc	r31, r29
     944:	b1 f7       	brne	.-20     	; 0x932 <oled_clear+0x16>
     946:	9f 5f       	subi	r25, 0xFF	; 255
     948:	90 38       	cpi	r25, 0x80	; 128
     94a:	19 f0       	breq	.+6      	; 0x952 <oled_clear+0x36>
     94c:	ee e9       	ldi	r30, 0x9E	; 158
     94e:	f0 e0       	ldi	r31, 0x00	; 0
     950:	f0 cf       	rjmp	.-32     	; 0x932 <oled_clear+0x16>
     952:	1f 5f       	subi	r17, 0xFF	; 255
     954:	18 30       	cpi	r17, 0x08	; 8
     956:	41 f7       	brne	.-48     	; 0x928 <oled_clear+0xc>
     958:	0e 94 89 04 	call	0x912	; 0x912 <oled_home>
     95c:	df 91       	pop	r29
     95e:	cf 91       	pop	r28
     960:	1f 91       	pop	r17
     962:	08 95       	ret

00000964 <OLED_init>:
     964:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     968:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     96c:	8e ea       	ldi	r24, 0xAE	; 174
     96e:	80 83       	st	Z, r24
     970:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     974:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     978:	81 ea       	ldi	r24, 0xA1	; 161
     97a:	80 83       	st	Z, r24
     97c:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     980:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     984:	8a ed       	ldi	r24, 0xDA	; 218
     986:	80 83       	st	Z, r24
     988:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     98c:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     990:	82 e1       	ldi	r24, 0x12	; 18
     992:	80 83       	st	Z, r24
     994:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     998:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     99c:	88 ec       	ldi	r24, 0xC8	; 200
     99e:	80 83       	st	Z, r24
     9a0:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     9a4:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     9a8:	88 ea       	ldi	r24, 0xA8	; 168
     9aa:	80 83       	st	Z, r24
     9ac:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     9b0:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     9b4:	8f e3       	ldi	r24, 0x3F	; 63
     9b6:	80 83       	st	Z, r24
     9b8:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     9bc:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     9c0:	85 ed       	ldi	r24, 0xD5	; 213
     9c2:	80 83       	st	Z, r24
     9c4:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     9c8:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     9cc:	80 e8       	ldi	r24, 0x80	; 128
     9ce:	80 83       	st	Z, r24
     9d0:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     9d4:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     9d8:	81 e8       	ldi	r24, 0x81	; 129
     9da:	80 83       	st	Z, r24
     9dc:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     9e0:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     9e4:	80 e5       	ldi	r24, 0x50	; 80
     9e6:	80 83       	st	Z, r24
     9e8:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     9ec:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     9f0:	89 ed       	ldi	r24, 0xD9	; 217
     9f2:	80 83       	st	Z, r24
     9f4:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     9f8:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     9fc:	81 e2       	ldi	r24, 0x21	; 33
     9fe:	80 83       	st	Z, r24
     a00:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     a04:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     a08:	80 e2       	ldi	r24, 0x20	; 32
     a0a:	80 83       	st	Z, r24
     a0c:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     a10:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     a14:	82 e0       	ldi	r24, 0x02	; 2
     a16:	80 83       	st	Z, r24
     a18:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     a1c:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     a20:	8b ed       	ldi	r24, 0xDB	; 219
     a22:	80 83       	st	Z, r24
     a24:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     a28:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     a2c:	80 e3       	ldi	r24, 0x30	; 48
     a2e:	80 83       	st	Z, r24
     a30:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     a34:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     a38:	8d ea       	ldi	r24, 0xAD	; 173
     a3a:	80 83       	st	Z, r24
     a3c:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     a40:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     a44:	10 82       	st	Z, r1
     a46:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     a4a:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     a4e:	84 ea       	ldi	r24, 0xA4	; 164
     a50:	80 83       	st	Z, r24
     a52:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     a56:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     a5a:	86 ea       	ldi	r24, 0xA6	; 166
     a5c:	80 83       	st	Z, r24
     a5e:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     a62:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     a66:	8f ea       	ldi	r24, 0xAF	; 175
     a68:	80 83       	st	Z, r24
     a6a:	0e 94 8e 04 	call	0x91c	; 0x91c <oled_clear>
     a6e:	0e 94 89 04 	call	0x912	; 0x912 <oled_home>
     a72:	08 95       	ret

00000a74 <oled_write_character>:
     a74:	28 2f       	mov	r18, r24
     a76:	30 e0       	ldi	r19, 0x00	; 0
     a78:	f9 01       	movw	r30, r18
     a7a:	ee 0f       	add	r30, r30
     a7c:	ff 1f       	adc	r31, r31
     a7e:	ee 0f       	add	r30, r30
     a80:	ff 1f       	adc	r31, r31
     a82:	ee 0f       	add	r30, r30
     a84:	ff 1f       	adc	r31, r31
     a86:	e2 56       	subi	r30, 0x62	; 98
     a88:	f0 40       	sbci	r31, 0x00	; 0
     a8a:	22 0f       	add	r18, r18
     a8c:	33 1f       	adc	r19, r19
     a8e:	22 0f       	add	r18, r18
     a90:	33 1f       	adc	r19, r19
     a92:	22 0f       	add	r18, r18
     a94:	33 1f       	adc	r19, r19
     a96:	2a 55       	subi	r18, 0x5A	; 90
     a98:	30 40       	sbci	r19, 0x00	; 0
     a9a:	94 91       	lpm	r25, Z
     a9c:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <oled_write_data>
     aa0:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <oled_write_data+0x1>
     aa4:	9c 93       	st	X, r25
     aa6:	31 96       	adiw	r30, 0x01	; 1
     aa8:	e2 17       	cp	r30, r18
     aaa:	f3 07       	cpc	r31, r19
     aac:	b1 f7       	brne	.-20     	; 0xa9a <oled_write_character+0x26>
     aae:	08 95       	ret

00000ab0 <oled_print>:
     ab0:	0f 93       	push	r16
     ab2:	1f 93       	push	r17
     ab4:	cf 93       	push	r28
     ab6:	df 93       	push	r29
     ab8:	fc 01       	movw	r30, r24
     aba:	01 90       	ld	r0, Z+
     abc:	00 20       	and	r0, r0
     abe:	e9 f7       	brne	.-6      	; 0xaba <oled_print+0xa>
     ac0:	31 97       	sbiw	r30, 0x01	; 1
     ac2:	e8 1b       	sub	r30, r24
     ac4:	f9 0b       	sbc	r31, r25
     ac6:	1e 16       	cp	r1, r30
     ac8:	1f 06       	cpc	r1, r31
     aca:	54 f4       	brge	.+20     	; 0xae0 <oled_print+0x30>
     acc:	ec 01       	movw	r28, r24
     ace:	8c 01       	movw	r16, r24
     ad0:	0e 0f       	add	r16, r30
     ad2:	1f 1f       	adc	r17, r31
     ad4:	89 91       	ld	r24, Y+
     ad6:	0e 94 3a 05 	call	0xa74	; 0xa74 <oled_write_character>
     ada:	c0 17       	cp	r28, r16
     adc:	d1 07       	cpc	r29, r17
     ade:	d1 f7       	brne	.-12     	; 0xad4 <oled_print+0x24>
     ae0:	df 91       	pop	r29
     ae2:	cf 91       	pop	r28
     ae4:	1f 91       	pop	r17
     ae6:	0f 91       	pop	r16
     ae8:	08 95       	ret

00000aea <oled_print_arrow>:
     aea:	0e 94 80 04 	call	0x900	; 0x900 <oled_pos_set>
     aee:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <oled_write_data>
     af2:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <oled_write_data+0x1>
     af6:	88 e1       	ldi	r24, 0x18	; 24
     af8:	80 83       	st	Z, r24
     afa:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <oled_write_data>
     afe:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <oled_write_data+0x1>
     b02:	80 83       	st	Z, r24
     b04:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <oled_write_data>
     b08:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <oled_write_data+0x1>
     b0c:	9e e7       	ldi	r25, 0x7E	; 126
     b0e:	90 83       	st	Z, r25
     b10:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <oled_write_data>
     b14:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <oled_write_data+0x1>
     b18:	9c e3       	ldi	r25, 0x3C	; 60
     b1a:	90 83       	st	Z, r25
     b1c:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <oled_write_data>
     b20:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <oled_write_data+0x1>
     b24:	80 83       	st	Z, r24
     b26:	08 95       	ret

00000b28 <set_difficulty>:
    if(child == 0){
        child = current_node->elements_on_screen;
    }

    return child;
}
     b28:	cf 93       	push	r28
     b2a:	df 93       	push	r29
     b2c:	cd b7       	in	r28, 0x3d	; 61
     b2e:	de b7       	in	r29, 0x3e	; 62
     b30:	2b 97       	sbiw	r28, 0x0b	; 11
     b32:	0f b6       	in	r0, 0x3f	; 63
     b34:	f8 94       	cli
     b36:	de bf       	out	0x3e, r29	; 62
     b38:	0f be       	out	0x3f, r0	; 63
     b3a:	cd bf       	out	0x3d, r28	; 61
     b3c:	85 e0       	ldi	r24, 0x05	; 5
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	9a 83       	std	Y+2, r25	; 0x02
     b42:	89 83       	std	Y+1, r24	; 0x01
     b44:	81 e0       	ldi	r24, 0x01	; 1
     b46:	8b 83       	std	Y+3, r24	; 0x03
     b48:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <child>
     b4c:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <child+0x1>
     b50:	81 30       	cpi	r24, 0x01	; 1
     b52:	91 05       	cpc	r25, r1
     b54:	19 f4       	brne	.+6      	; 0xb5c <set_difficulty+0x34>
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	8c 83       	std	Y+4, r24	; 0x04
     b5a:	0a c0       	rjmp	.+20     	; 0xb70 <set_difficulty+0x48>
     b5c:	82 30       	cpi	r24, 0x02	; 2
     b5e:	91 05       	cpc	r25, r1
     b60:	19 f4       	brne	.+6      	; 0xb68 <set_difficulty+0x40>
     b62:	82 e0       	ldi	r24, 0x02	; 2
     b64:	8c 83       	std	Y+4, r24	; 0x04
     b66:	04 c0       	rjmp	.+8      	; 0xb70 <set_difficulty+0x48>
     b68:	03 97       	sbiw	r24, 0x03	; 3
     b6a:	11 f4       	brne	.+4      	; 0xb70 <set_difficulty+0x48>
     b6c:	83 e0       	ldi	r24, 0x03	; 3
     b6e:	8c 83       	std	Y+4, r24	; 0x04
     b70:	ce 01       	movw	r24, r28
     b72:	01 96       	adiw	r24, 0x01	; 1
     b74:	0e 94 50 02 	call	0x4a0	; 0x4a0 <CAN_message_transmission>
     b78:	2b 96       	adiw	r28, 0x0b	; 11
     b7a:	0f b6       	in	r0, 0x3f	; 63
     b7c:	f8 94       	cli
     b7e:	de bf       	out	0x3e, r29	; 62
     b80:	0f be       	out	0x3f, r0	; 63
     b82:	cd bf       	out	0x3d, r28	; 61
     b84:	df 91       	pop	r29
     b86:	cf 91       	pop	r28
     b88:	08 95       	ret

00000b8a <build_node>:
     b8a:	cf 92       	push	r12
     b8c:	df 92       	push	r13
     b8e:	ef 92       	push	r14
     b90:	ff 92       	push	r15
     b92:	0f 93       	push	r16
     b94:	1f 93       	push	r17
     b96:	cf 93       	push	r28
     b98:	df 93       	push	r29
     b9a:	ec 01       	movw	r28, r24
     b9c:	69 01       	movw	r12, r18
     b9e:	79 83       	std	Y+1, r23	; 0x01
     ba0:	68 83       	st	Y, r22
     ba2:	ba 01       	movw	r22, r20
     ba4:	46 96       	adiw	r24, 0x16	; 22
     ba6:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <strcpy>
     baa:	dd 8a       	std	Y+21, r13	; 0x15
     bac:	cc 8a       	std	Y+20, r12	; 0x14
     bae:	fb 8a       	std	Y+19, r15	; 0x13
     bb0:	ea 8a       	std	Y+18, r14	; 0x12
     bb2:	a0 2f       	mov	r26, r16
     bb4:	b1 2f       	mov	r27, r17
     bb6:	fe 01       	movw	r30, r28
     bb8:	32 96       	adiw	r30, 0x02	; 2
     bba:	ce 01       	movw	r24, r28
     bbc:	42 96       	adiw	r24, 0x12	; 18
     bbe:	2d 91       	ld	r18, X+
     bc0:	3d 91       	ld	r19, X+
     bc2:	21 93       	st	Z+, r18
     bc4:	31 93       	st	Z+, r19
     bc6:	e8 17       	cp	r30, r24
     bc8:	f9 07       	cpc	r31, r25
     bca:	c9 f7       	brne	.-14     	; 0xbbe <build_node+0x34>
     bcc:	df 91       	pop	r29
     bce:	cf 91       	pop	r28
     bd0:	1f 91       	pop	r17
     bd2:	0f 91       	pop	r16
     bd4:	ff 90       	pop	r15
     bd6:	ef 90       	pop	r14
     bd8:	df 90       	pop	r13
     bda:	cf 90       	pop	r12
     bdc:	08 95       	ret

00000bde <go_up>:
     bde:	dc 01       	movw	r26, r24
     be0:	ed 91       	ld	r30, X+
     be2:	fc 91       	ld	r31, X
     be4:	11 97       	sbiw	r26, 0x01	; 1
     be6:	20 81       	ld	r18, Z
     be8:	31 81       	ldd	r19, Z+1	; 0x01
     bea:	21 15       	cp	r18, r1
     bec:	31 05       	cpc	r19, r1
     bee:	11 f0       	breq	.+4      	; 0xbf4 <go_up+0x16>
     bf0:	2d 93       	st	X+, r18
     bf2:	3c 93       	st	X, r19
     bf4:	08 95       	ret

00000bf6 <go_down>:
     bf6:	fc 01       	movw	r30, r24
     bf8:	a0 81       	ld	r26, Z
     bfa:	b1 81       	ldd	r27, Z+1	; 0x01
     bfc:	fb 01       	movw	r30, r22
     bfe:	ee 0f       	add	r30, r30
     c00:	ff 1f       	adc	r31, r31
     c02:	ea 0f       	add	r30, r26
     c04:	fb 1f       	adc	r31, r27
     c06:	20 81       	ld	r18, Z
     c08:	31 81       	ldd	r19, Z+1	; 0x01
     c0a:	21 15       	cp	r18, r1
     c0c:	31 05       	cpc	r19, r1
     c0e:	21 f0       	breq	.+8      	; 0xc18 <go_down+0x22>
     c10:	fc 01       	movw	r30, r24
     c12:	31 83       	std	Z+1, r19	; 0x01
     c14:	20 83       	st	Z, r18
     c16:	08 95       	ret
     c18:	54 96       	adiw	r26, 0x14	; 20
     c1a:	ed 91       	ld	r30, X+
     c1c:	fc 91       	ld	r31, X
     c1e:	55 97       	sbiw	r26, 0x15	; 21
     c20:	30 97       	sbiw	r30, 0x00	; 0
     c22:	09 f0       	breq	.+2      	; 0xc26 <go_down+0x30>
     c24:	09 95       	icall
     c26:	08 95       	ret

00000c28 <wait_for_action>:
     c28:	0e 94 cf 09 	call	0x139e	; 0x139e <joystick_direction>
     c2c:	84 30       	cpi	r24, 0x04	; 4
     c2e:	29 f4       	brne	.+10     	; 0xc3a <wait_for_action+0x12>
     c30:	82 e0       	ldi	r24, 0x02	; 2
     c32:	0e 94 95 0a 	call	0x152a	; 0x152a <usb_button_pushed>
     c36:	88 23       	and	r24, r24
     c38:	b9 f3       	breq	.-18     	; 0xc28 <wait_for_action>
     c3a:	0e 94 cf 09 	call	0x139e	; 0x139e <joystick_direction>
     c3e:	82 30       	cpi	r24, 0x02	; 2
     c40:	99 f0       	breq	.+38     	; 0xc68 <wait_for_action+0x40>
     c42:	0e 94 cf 09 	call	0x139e	; 0x139e <joystick_direction>
     c46:	83 30       	cpi	r24, 0x03	; 3
     c48:	79 f0       	breq	.+30     	; 0xc68 <wait_for_action+0x40>
     c4a:	0e 94 cf 09 	call	0x139e	; 0x139e <joystick_direction>
     c4e:	81 30       	cpi	r24, 0x01	; 1
     c50:	59 f0       	breq	.+22     	; 0xc68 <wait_for_action+0x40>
     c52:	0e 94 cf 09 	call	0x139e	; 0x139e <joystick_direction>
     c56:	88 23       	and	r24, r24
     c58:	39 f0       	breq	.+14     	; 0xc68 <wait_for_action+0x40>
     c5a:	82 e0       	ldi	r24, 0x02	; 2
     c5c:	0e 94 95 0a 	call	0x152a	; 0x152a <usb_button_pushed>
     c60:	81 11       	cpse	r24, r1
     c62:	01 c0       	rjmp	.+2      	; 0xc66 <wait_for_action+0x3e>
     c64:	08 95       	ret
     c66:	85 e0       	ldi	r24, 0x05	; 5
     c68:	08 95       	ret

00000c6a <wait_for_neutral_joystick_position>:
     c6a:	0e 94 cf 09 	call	0x139e	; 0x139e <joystick_direction>
     c6e:	84 30       	cpi	r24, 0x04	; 4
     c70:	e1 f7       	brne	.-8      	; 0xc6a <wait_for_neutral_joystick_position>
     c72:	08 95       	ret

00000c74 <update_element_down>:

int update_element_down(Node *current_node, int child){

    child++;
     c74:	6f 5f       	subi	r22, 0xFF	; 255
     c76:	7f 4f       	sbci	r23, 0xFF	; 255

    if(child == current_node->elements_on_screen + 1){
     c78:	fc 01       	movw	r30, r24
     c7a:	82 89       	ldd	r24, Z+18	; 0x12
     c7c:	93 89       	ldd	r25, Z+19	; 0x13
     c7e:	01 96       	adiw	r24, 0x01	; 1
     c80:	68 17       	cp	r22, r24
     c82:	79 07       	cpc	r23, r25
     c84:	11 f4       	brne	.+4      	; 0xc8a <update_element_down+0x16>
        child = 1;
     c86:	61 e0       	ldi	r22, 0x01	; 1
     c88:	70 e0       	ldi	r23, 0x00	; 0
    }

    return child;
    
}
     c8a:	cb 01       	movw	r24, r22
     c8c:	08 95       	ret

00000c8e <check_highscore>:

    print_selecting_arrow(child);
}

void check_highscore(int highscore){
    if(highscore >= _1ST){   //check if new highscore
     c8e:	20 91 4e 03 	lds	r18, 0x034E	; 0x80034e <_1ST>
     c92:	30 91 4f 03 	lds	r19, 0x034F	; 0x80034f <_1ST+0x1>
     c96:	82 17       	cp	r24, r18
     c98:	93 07       	cpc	r25, r19
     c9a:	8c f0       	brlt	.+34     	; 0xcbe <check_highscore+0x30>
		_3RD = _2ND;
     c9c:	40 91 4c 03 	lds	r20, 0x034C	; 0x80034c <_2ND>
     ca0:	50 91 4d 03 	lds	r21, 0x034D	; 0x80034d <_2ND+0x1>
     ca4:	50 93 41 03 	sts	0x0341, r21	; 0x800341 <_3RD+0x1>
     ca8:	40 93 40 03 	sts	0x0340, r20	; 0x800340 <_3RD>
		_2ND = _1ST;
     cac:	30 93 4d 03 	sts	0x034D, r19	; 0x80034d <_2ND+0x1>
     cb0:	20 93 4c 03 	sts	0x034C, r18	; 0x80034c <_2ND>
        _1ST = highscore;
     cb4:	90 93 4f 03 	sts	0x034F, r25	; 0x80034f <_1ST+0x1>
     cb8:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <_1ST>
     cbc:	08 95       	ret
		
    }
    else if(    (highscore < _1ST) && (highscore > _2ND)    )    {  //check if new second best
     cbe:	20 91 4c 03 	lds	r18, 0x034C	; 0x80034c <_2ND>
     cc2:	30 91 4d 03 	lds	r19, 0x034D	; 0x80034d <_2ND+0x1>
     cc6:	28 17       	cp	r18, r24
     cc8:	39 07       	cpc	r19, r25
     cca:	4c f4       	brge	.+18     	; 0xcde <check_highscore+0x50>
		_3RD = _2ND;
     ccc:	30 93 41 03 	sts	0x0341, r19	; 0x800341 <_3RD+0x1>
     cd0:	20 93 40 03 	sts	0x0340, r18	; 0x800340 <_3RD>
        _2ND = highscore;
     cd4:	90 93 4d 03 	sts	0x034D, r25	; 0x80034d <_2ND+0x1>
     cd8:	80 93 4c 03 	sts	0x034C, r24	; 0x80034c <_2ND>
     cdc:	08 95       	ret
    }
    else if(    (highscore < _2ND) && (highscore > _3RD)    ){ //check if new third best
     cde:	82 17       	cp	r24, r18
     ce0:	93 07       	cpc	r25, r19
     ce2:	5c f4       	brge	.+22     	; 0xcfa <check_highscore+0x6c>
     ce4:	20 91 40 03 	lds	r18, 0x0340	; 0x800340 <_3RD>
     ce8:	30 91 41 03 	lds	r19, 0x0341	; 0x800341 <_3RD+0x1>
     cec:	28 17       	cp	r18, r24
     cee:	39 07       	cpc	r19, r25
     cf0:	24 f4       	brge	.+8      	; 0xcfa <check_highscore+0x6c>
        _3RD = highscore;
     cf2:	90 93 41 03 	sts	0x0341, r25	; 0x800341 <_3RD+0x1>
     cf6:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <_3RD>
     cfa:	08 95       	ret

00000cfc <play_game>:
    oled_print_arrow(child - 1, 5);
	
}


void play_game(){
     cfc:	cf 93       	push	r28
     cfe:	df 93       	push	r29
     d00:	cd b7       	in	r28, 0x3d	; 61
     d02:	de b7       	in	r29, 0x3e	; 62
     d04:	a1 97       	sbiw	r28, 0x21	; 33
     d06:	0f b6       	in	r0, 0x3f	; 63
     d08:	f8 94       	cli
     d0a:	de bf       	out	0x3e, r29	; 62
     d0c:	0f be       	out	0x3f, r0	; 63
     d0e:	cd bf       	out	0x3d, r28	; 61
	
	// Play start music
	playMusic(start_melody, 1, 2);
     d10:	42 e0       	ldi	r20, 0x02	; 2
     d12:	50 e0       	ldi	r21, 0x00	; 0
     d14:	61 e0       	ldi	r22, 0x01	; 1
     d16:	70 e0       	ldi	r23, 0x00	; 0
     d18:	8c e0       	ldi	r24, 0x0C	; 12
     d1a:	91 e0       	ldi	r25, 0x01	; 1
     d1c:	0e 94 04 04 	call	0x808	; 0x808 <playMusic>
	
	// Empties buffer if needed
	message_handler();
     d20:	ce 01       	movw	r24, r28
     d22:	47 96       	adiw	r24, 0x17	; 23
     d24:	0e 94 dd 02 	call	0x5ba	; 0x5ba <message_handler>
	message_handler();
     d28:	ce 01       	movw	r24, r28
     d2a:	47 96       	adiw	r24, 0x17	; 23
     d2c:	0e 94 dd 02 	call	0x5ba	; 0x5ba <message_handler>
	game_status.data[0] = 0;
	uint8_t game_on = 1;
	
	// Create message that is to be sent when game starts
	CAN_message_t start_game;
	start_game.identifier = 9;
     d30:	89 e0       	ldi	r24, 0x09	; 9
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	9d 87       	std	Y+13, r25	; 0x0d
     d36:	8c 87       	std	Y+12, r24	; 0x0c
	start_game.data[0] = 7;
     d38:	87 e0       	ldi	r24, 0x07	; 7
     d3a:	8f 87       	std	Y+15, r24	; 0x0f
	start_game.data_length = 1;
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	8e 87       	std	Y+14, r24	; 0x0e
	
	// Sends game start message
	CAN_message_transmission(&start_game);
     d40:	ce 01       	movw	r24, r28
     d42:	0c 96       	adiw	r24, 0x0c	; 12
     d44:	0e 94 50 02 	call	0x4a0	; 0x4a0 <CAN_message_transmission>
		
		
	while(game_on){
		joyStick_Can_Message();
     d48:	0e 94 06 03 	call	0x60c	; 0x60c <joyStick_Can_Message>
		
		game_status = message_handler();
     d4c:	ce 01       	movw	r24, r28
     d4e:	01 96       	adiw	r24, 0x01	; 1
     d50:	0e 94 dd 02 	call	0x5ba	; 0x5ba <message_handler>
		
		// Checks if game over message is received
		if(game_status.data[0] == 0b10101011){
     d54:	8c 81       	ldd	r24, Y+4	; 0x04
     d56:	8b 3a       	cpi	r24, 0xAB	; 171
     d58:	b9 f7       	brne	.-18     	; 0xd48 <play_game+0x4c>
	}
	
	
	// Update highscore
	int highscore = game_status.data[1];
	check_highscore(highscore);
     d5a:	8d 81       	ldd	r24, Y+5	; 0x05
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	0e 94 47 06 	call	0xc8e	; 0xc8e <check_highscore>
	
	// Play end song
	playMusic(end_melody2, 1, 2);
     d62:	42 e0       	ldi	r20, 0x02	; 2
     d64:	50 e0       	ldi	r21, 0x00	; 0
     d66:	61 e0       	ldi	r22, 0x01	; 1
     d68:	70 e0       	ldi	r23, 0x00	; 0
     d6a:	8e e1       	ldi	r24, 0x1E	; 30
     d6c:	91 e0       	ldi	r25, 0x01	; 1
     d6e:	0e 94 04 04 	call	0x808	; 0x808 <playMusic>
	
}
     d72:	a1 96       	adiw	r28, 0x21	; 33
     d74:	0f b6       	in	r0, 0x3f	; 63
     d76:	f8 94       	cli
     d78:	de bf       	out	0x3e, r29	; 62
     d7a:	0f be       	out	0x3f, r0	; 63
     d7c:	cd bf       	out	0x3d, r28	; 61
     d7e:	df 91       	pop	r29
     d80:	cf 91       	pop	r28
     d82:	08 95       	ret

00000d84 <print_selecting_arrow>:
	
}


void print_selecting_arrow(int child){
    oled_print_arrow(child - 1, 5);
     d84:	65 e0       	ldi	r22, 0x05	; 5
     d86:	81 50       	subi	r24, 0x01	; 1
     d88:	0e 94 75 05 	call	0xaea	; 0xaea <oled_print_arrow>
     d8c:	08 95       	ret

00000d8e <print_main_menu_objects>:
        wait_for_neutral_joystick_position();
    }
}


void print_main_menu_objects(int child){
     d8e:	0f 93       	push	r16
     d90:	1f 93       	push	r17
     d92:	cf 93       	push	r28
     d94:	df 93       	push	r29
     d96:	cd b7       	in	r28, 0x3d	; 61
     d98:	de b7       	in	r29, 0x3e	; 62
     d9a:	66 97       	sbiw	r28, 0x16	; 22
     d9c:	0f b6       	in	r0, 0x3f	; 63
     d9e:	f8 94       	cli
     da0:	de bf       	out	0x3e, r29	; 62
     da2:	0f be       	out	0x3f, r0	; 63
     da4:	cd bf       	out	0x3d, r28	; 61
     da6:	8c 01       	movw	r16, r24
    char line1[] = "play";
     da8:	85 e0       	ldi	r24, 0x05	; 5
     daa:	eb ec       	ldi	r30, 0xCB	; 203
     dac:	f1 e0       	ldi	r31, 0x01	; 1
     dae:	de 01       	movw	r26, r28
     db0:	11 96       	adiw	r26, 0x01	; 1
     db2:	01 90       	ld	r0, Z+
     db4:	0d 92       	st	X+, r0
     db6:	8a 95       	dec	r24
     db8:	e1 f7       	brne	.-8      	; 0xdb2 <print_main_menu_objects+0x24>
    char line2[] = "Score";
     dba:	86 e0       	ldi	r24, 0x06	; 6
     dbc:	e0 ed       	ldi	r30, 0xD0	; 208
     dbe:	f1 e0       	ldi	r31, 0x01	; 1
     dc0:	de 01       	movw	r26, r28
     dc2:	16 96       	adiw	r26, 0x06	; 6
     dc4:	01 90       	ld	r0, Z+
     dc6:	0d 92       	st	X+, r0
     dc8:	8a 95       	dec	r24
     dca:	e1 f7       	brne	.-8      	; 0xdc4 <print_main_menu_objects+0x36>
	char line3[] = "Difficulty";
     dcc:	8b e0       	ldi	r24, 0x0B	; 11
     dce:	e6 ed       	ldi	r30, 0xD6	; 214
     dd0:	f1 e0       	ldi	r31, 0x01	; 1
     dd2:	de 01       	movw	r26, r28
     dd4:	1c 96       	adiw	r26, 0x0c	; 12
     dd6:	01 90       	ld	r0, Z+
     dd8:	0d 92       	st	X+, r0
     dda:	8a 95       	dec	r24
     ddc:	e1 f7       	brne	.-8      	; 0xdd6 <print_main_menu_objects+0x48>

    oled_pos_set(0, 12);
     dde:	6c e0       	ldi	r22, 0x0C	; 12
     de0:	80 e0       	ldi	r24, 0x00	; 0
     de2:	0e 94 80 04 	call	0x900	; 0x900 <oled_pos_set>
    oled_print(&line1);
     de6:	ce 01       	movw	r24, r28
     de8:	01 96       	adiw	r24, 0x01	; 1
     dea:	0e 94 58 05 	call	0xab0	; 0xab0 <oled_print>

    oled_pos_set(1, 12);
     dee:	6c e0       	ldi	r22, 0x0C	; 12
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	0e 94 80 04 	call	0x900	; 0x900 <oled_pos_set>
    oled_print(&line2);
     df6:	ce 01       	movw	r24, r28
     df8:	06 96       	adiw	r24, 0x06	; 6
     dfa:	0e 94 58 05 	call	0xab0	; 0xab0 <oled_print>
	
	oled_pos_set(2, 12);
     dfe:	6c e0       	ldi	r22, 0x0C	; 12
     e00:	82 e0       	ldi	r24, 0x02	; 2
     e02:	0e 94 80 04 	call	0x900	; 0x900 <oled_pos_set>
	oled_print(&line3);
     e06:	ce 01       	movw	r24, r28
     e08:	0c 96       	adiw	r24, 0x0c	; 12
     e0a:	0e 94 58 05 	call	0xab0	; 0xab0 <oled_print>
	
	

    print_selecting_arrow(child);       //Draw the arrow that selects the preferable option.
     e0e:	c8 01       	movw	r24, r16
     e10:	0e 94 c2 06 	call	0xd84	; 0xd84 <print_selecting_arrow>
    
}
     e14:	66 96       	adiw	r28, 0x16	; 22
     e16:	0f b6       	in	r0, 0x3f	; 63
     e18:	f8 94       	cli
     e1a:	de bf       	out	0x3e, r29	; 62
     e1c:	0f be       	out	0x3f, r0	; 63
     e1e:	cd bf       	out	0x3d, r28	; 61
     e20:	df 91       	pop	r29
     e22:	cf 91       	pop	r28
     e24:	1f 91       	pop	r17
     e26:	0f 91       	pop	r16
     e28:	08 95       	ret

00000e2a <print_new_game_menu_objects>:

void print_new_game_menu_objects(int child){
     e2a:	0f 93       	push	r16
     e2c:	1f 93       	push	r17
     e2e:	cf 93       	push	r28
     e30:	df 93       	push	r29
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	2b 97       	sbiw	r28, 0x0b	; 11
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	de bf       	out	0x3e, r29	; 62
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	cd bf       	out	0x3d, r28	; 61
     e42:	8c 01       	movw	r16, r24

    char line1[] = "Start game";
     e44:	8b e0       	ldi	r24, 0x0B	; 11
     e46:	e1 ee       	ldi	r30, 0xE1	; 225
     e48:	f1 e0       	ldi	r31, 0x01	; 1
     e4a:	de 01       	movw	r26, r28
     e4c:	11 96       	adiw	r26, 0x01	; 1
     e4e:	01 90       	ld	r0, Z+
     e50:	0d 92       	st	X+, r0
     e52:	8a 95       	dec	r24
     e54:	e1 f7       	brne	.-8      	; 0xe4e <print_new_game_menu_objects+0x24>

    oled_pos_set(0, 12);
     e56:	6c e0       	ldi	r22, 0x0C	; 12
     e58:	80 e0       	ldi	r24, 0x00	; 0
     e5a:	0e 94 80 04 	call	0x900	; 0x900 <oled_pos_set>
    oled_print(&line1);
     e5e:	ce 01       	movw	r24, r28
     e60:	01 96       	adiw	r24, 0x01	; 1
     e62:	0e 94 58 05 	call	0xab0	; 0xab0 <oled_print>

    print_selecting_arrow(child);
     e66:	c8 01       	movw	r24, r16
     e68:	0e 94 c2 06 	call	0xd84	; 0xd84 <print_selecting_arrow>
}
     e6c:	2b 96       	adiw	r28, 0x0b	; 11
     e6e:	0f b6       	in	r0, 0x3f	; 63
     e70:	f8 94       	cli
     e72:	de bf       	out	0x3e, r29	; 62
     e74:	0f be       	out	0x3f, r0	; 63
     e76:	cd bf       	out	0x3d, r28	; 61
     e78:	df 91       	pop	r29
     e7a:	cf 91       	pop	r28
     e7c:	1f 91       	pop	r17
     e7e:	0f 91       	pop	r16
     e80:	08 95       	ret

00000e82 <print_score_menu_objects>:
        _3RD = highscore;
    }
    
}

void print_score_menu_objects(int child){
     e82:	0f 93       	push	r16
     e84:	1f 93       	push	r17
     e86:	cf 93       	push	r28
     e88:	df 93       	push	r29
     e8a:	cd b7       	in	r28, 0x3d	; 61
     e8c:	de b7       	in	r29, 0x3e	; 62
     e8e:	e7 97       	sbiw	r28, 0x37	; 55
     e90:	0f b6       	in	r0, 0x3f	; 63
     e92:	f8 94       	cli
     e94:	de bf       	out	0x3e, r29	; 62
     e96:	0f be       	out	0x3f, r0	; 63
     e98:	cd bf       	out	0x3d, r28	; 61
     e9a:	8c 01       	movw	r16, r24

char line1[] = "Top score";
     e9c:	8a e0       	ldi	r24, 0x0A	; 10
     e9e:	ee ef       	ldi	r30, 0xFE	; 254
     ea0:	f1 e0       	ldi	r31, 0x01	; 1
     ea2:	de 01       	movw	r26, r28
     ea4:	11 96       	adiw	r26, 0x01	; 1
     ea6:	01 90       	ld	r0, Z+
     ea8:	0d 92       	st	X+, r0
     eaa:	8a 95       	dec	r24
     eac:	e1 f7       	brne	.-8      	; 0xea6 <print_score_menu_objects+0x24>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     eae:	4a e0       	ldi	r20, 0x0A	; 10
     eb0:	be 01       	movw	r22, r28
     eb2:	65 5f       	subi	r22, 0xF5	; 245
     eb4:	7f 4f       	sbci	r23, 0xFF	; 255
     eb6:	80 91 4e 03 	lds	r24, 0x034E	; 0x80034e <_1ST>
     eba:	90 91 4f 03 	lds	r25, 0x034F	; 0x80034f <_1ST+0x1>
     ebe:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <__itoa_ncheck>
     ec2:	4a e0       	ldi	r20, 0x0A	; 10
     ec4:	be 01       	movw	r22, r28
     ec6:	66 5e       	subi	r22, 0xE6	; 230
     ec8:	7f 4f       	sbci	r23, 0xFF	; 255
     eca:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <_2ND>
     ece:	90 91 4d 03 	lds	r25, 0x034D	; 0x80034d <_2ND+0x1>
     ed2:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <__itoa_ncheck>
     ed6:	4a e0       	ldi	r20, 0x0A	; 10
     ed8:	be 01       	movw	r22, r28
     eda:	67 5d       	subi	r22, 0xD7	; 215
     edc:	7f 4f       	sbci	r23, 0xFF	; 255
     ede:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <_3RD>
     ee2:	90 91 41 03 	lds	r25, 0x0341	; 0x800341 <_3RD+0x1>
     ee6:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <__itoa_ncheck>
itoa(_1ST, score_string1, 10);
itoa(_2ND, score_string2, 10);
itoa(_3RD, score_string3, 10);    

    
    oled_pos_set(0, 12);
     eea:	6c e0       	ldi	r22, 0x0C	; 12
     eec:	80 e0       	ldi	r24, 0x00	; 0
     eee:	0e 94 80 04 	call	0x900	; 0x900 <oled_pos_set>
    oled_print(&line1);
     ef2:	ce 01       	movw	r24, r28
     ef4:	01 96       	adiw	r24, 0x01	; 1
     ef6:	0e 94 58 05 	call	0xab0	; 0xab0 <oled_print>

    oled_pos_set(2, 12);
     efa:	6c e0       	ldi	r22, 0x0C	; 12
     efc:	82 e0       	ldi	r24, 0x02	; 2
     efe:	0e 94 80 04 	call	0x900	; 0x900 <oled_pos_set>
    oled_print("1ST  ");
     f02:	8c ee       	ldi	r24, 0xEC	; 236
     f04:	91 e0       	ldi	r25, 0x01	; 1
     f06:	0e 94 58 05 	call	0xab0	; 0xab0 <oled_print>
    oled_print(&score_string1);
     f0a:	ce 01       	movw	r24, r28
     f0c:	0b 96       	adiw	r24, 0x0b	; 11
     f0e:	0e 94 58 05 	call	0xab0	; 0xab0 <oled_print>
    
    oled_pos_set(4, 12);
     f12:	6c e0       	ldi	r22, 0x0C	; 12
     f14:	84 e0       	ldi	r24, 0x04	; 4
     f16:	0e 94 80 04 	call	0x900	; 0x900 <oled_pos_set>
    oled_print("2ND  ");
     f1a:	82 ef       	ldi	r24, 0xF2	; 242
     f1c:	91 e0       	ldi	r25, 0x01	; 1
     f1e:	0e 94 58 05 	call	0xab0	; 0xab0 <oled_print>
    oled_print(&score_string2);
     f22:	ce 01       	movw	r24, r28
     f24:	4a 96       	adiw	r24, 0x1a	; 26
     f26:	0e 94 58 05 	call	0xab0	; 0xab0 <oled_print>

    oled_pos_set(6, 12);
     f2a:	6c e0       	ldi	r22, 0x0C	; 12
     f2c:	86 e0       	ldi	r24, 0x06	; 6
     f2e:	0e 94 80 04 	call	0x900	; 0x900 <oled_pos_set>
    oled_print("3RD  ");
     f32:	88 ef       	ldi	r24, 0xF8	; 248
     f34:	91 e0       	ldi	r25, 0x01	; 1
     f36:	0e 94 58 05 	call	0xab0	; 0xab0 <oled_print>
    oled_print(&score_string3);
     f3a:	ce 01       	movw	r24, r28
     f3c:	89 96       	adiw	r24, 0x29	; 41
     f3e:	0e 94 58 05 	call	0xab0	; 0xab0 <oled_print>
    
    print_selecting_arrow(child);
     f42:	c8 01       	movw	r24, r16
     f44:	0e 94 c2 06 	call	0xd84	; 0xd84 <print_selecting_arrow>

}
     f48:	e7 96       	adiw	r28, 0x37	; 55
     f4a:	0f b6       	in	r0, 0x3f	; 63
     f4c:	f8 94       	cli
     f4e:	de bf       	out	0x3e, r29	; 62
     f50:	0f be       	out	0x3f, r0	; 63
     f52:	cd bf       	out	0x3d, r28	; 61
     f54:	df 91       	pop	r29
     f56:	cf 91       	pop	r28
     f58:	1f 91       	pop	r17
     f5a:	0f 91       	pop	r16
     f5c:	08 95       	ret

00000f5e <print_difficulty_menu_objects>:

void print_difficulty_menu_objects(int child){
     f5e:	0f 93       	push	r16
     f60:	1f 93       	push	r17
     f62:	cf 93       	push	r28
     f64:	df 93       	push	r29
     f66:	cd b7       	in	r28, 0x3d	; 61
     f68:	de b7       	in	r29, 0x3e	; 62
     f6a:	61 97       	sbiw	r28, 0x11	; 17
     f6c:	0f b6       	in	r0, 0x3f	; 63
     f6e:	f8 94       	cli
     f70:	de bf       	out	0x3e, r29	; 62
     f72:	0f be       	out	0x3f, r0	; 63
     f74:	cd bf       	out	0x3d, r28	; 61
     f76:	8c 01       	movw	r16, r24
	char line1[] = "Easy";
     f78:	85 e0       	ldi	r24, 0x05	; 5
     f7a:	e8 e0       	ldi	r30, 0x08	; 8
     f7c:	f2 e0       	ldi	r31, 0x02	; 2
     f7e:	de 01       	movw	r26, r28
     f80:	11 96       	adiw	r26, 0x01	; 1
     f82:	01 90       	ld	r0, Z+
     f84:	0d 92       	st	X+, r0
     f86:	8a 95       	dec	r24
     f88:	e1 f7       	brne	.-8      	; 0xf82 <print_difficulty_menu_objects+0x24>
	char line2[] = "Medium";
     f8a:	87 e0       	ldi	r24, 0x07	; 7
     f8c:	ed e0       	ldi	r30, 0x0D	; 13
     f8e:	f2 e0       	ldi	r31, 0x02	; 2
     f90:	de 01       	movw	r26, r28
     f92:	16 96       	adiw	r26, 0x06	; 6
     f94:	01 90       	ld	r0, Z+
     f96:	0d 92       	st	X+, r0
     f98:	8a 95       	dec	r24
     f9a:	e1 f7       	brne	.-8      	; 0xf94 <print_difficulty_menu_objects+0x36>
	char line3[] = "Hard";
     f9c:	85 e0       	ldi	r24, 0x05	; 5
     f9e:	e4 e1       	ldi	r30, 0x14	; 20
     fa0:	f2 e0       	ldi	r31, 0x02	; 2
     fa2:	de 01       	movw	r26, r28
     fa4:	1d 96       	adiw	r26, 0x0d	; 13
     fa6:	01 90       	ld	r0, Z+
     fa8:	0d 92       	st	X+, r0
     faa:	8a 95       	dec	r24
     fac:	e1 f7       	brne	.-8      	; 0xfa6 <print_difficulty_menu_objects+0x48>

	oled_pos_set(0, 12);
     fae:	6c e0       	ldi	r22, 0x0C	; 12
     fb0:	80 e0       	ldi	r24, 0x00	; 0
     fb2:	0e 94 80 04 	call	0x900	; 0x900 <oled_pos_set>
	oled_print(&line1);
     fb6:	ce 01       	movw	r24, r28
     fb8:	01 96       	adiw	r24, 0x01	; 1
     fba:	0e 94 58 05 	call	0xab0	; 0xab0 <oled_print>

	oled_pos_set(1, 12);
     fbe:	6c e0       	ldi	r22, 0x0C	; 12
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	0e 94 80 04 	call	0x900	; 0x900 <oled_pos_set>
	oled_print(&line2);
     fc6:	ce 01       	movw	r24, r28
     fc8:	06 96       	adiw	r24, 0x06	; 6
     fca:	0e 94 58 05 	call	0xab0	; 0xab0 <oled_print>
	
	oled_pos_set(2, 12);
     fce:	6c e0       	ldi	r22, 0x0C	; 12
     fd0:	82 e0       	ldi	r24, 0x02	; 2
     fd2:	0e 94 80 04 	call	0x900	; 0x900 <oled_pos_set>
	oled_print(&line3);
     fd6:	ce 01       	movw	r24, r28
     fd8:	0d 96       	adiw	r24, 0x0d	; 13
     fda:	0e 94 58 05 	call	0xab0	; 0xab0 <oled_print>
	
	print_selecting_arrow(child);       //Draw the arrow that selects the preferable option.
     fde:	c8 01       	movw	r24, r16
     fe0:	0e 94 c2 06 	call	0xd84	; 0xd84 <print_selecting_arrow>
	
}
     fe4:	61 96       	adiw	r28, 0x11	; 17
     fe6:	0f b6       	in	r0, 0x3f	; 63
     fe8:	f8 94       	cli
     fea:	de bf       	out	0x3e, r29	; 62
     fec:	0f be       	out	0x3f, r0	; 63
     fee:	cd bf       	out	0x3d, r28	; 61
     ff0:	df 91       	pop	r29
     ff2:	cf 91       	pop	r28
     ff4:	1f 91       	pop	r17
     ff6:	0f 91       	pop	r16
     ff8:	08 95       	ret

00000ffa <update_screen>:
}

void update_screen(Node *current_node, int child){
	
	// Checks the second letter in the name of the child node.
    if(((*current_node).name[1]) == 'a'){
     ffa:	fc 01       	movw	r30, r24
     ffc:	87 89       	ldd	r24, Z+23	; 0x17
     ffe:	81 36       	cpi	r24, 0x61	; 97
    1000:	21 f4       	brne	.+8      	; 0x100a <update_screen+0x10>
        print_main_menu_objects(child);
    1002:	cb 01       	movw	r24, r22
    1004:	0e 94 c7 06 	call	0xd8e	; 0xd8e <print_main_menu_objects>
    1008:	08 95       	ret
    }
    else if(((*current_node).name[1]) == 'l'){
    100a:	8c 36       	cpi	r24, 0x6C	; 108
    100c:	21 f4       	brne	.+8      	; 0x1016 <update_screen+0x1c>
        print_new_game_menu_objects(child);
    100e:	cb 01       	movw	r24, r22
    1010:	0e 94 15 07 	call	0xe2a	; 0xe2a <print_new_game_menu_objects>
    1014:	08 95       	ret
    }
    else if(((*current_node).name[1]) == 'h'){
    1016:	88 36       	cpi	r24, 0x68	; 104
    1018:	21 f4       	brne	.+8      	; 0x1022 <update_screen+0x28>
        print_score_menu_objects(child);
    101a:	cb 01       	movw	r24, r22
    101c:	0e 94 41 07 	call	0xe82	; 0xe82 <print_score_menu_objects>
    1020:	08 95       	ret
    }
	else if(((*current_node).name[1]) == 'i'){
    1022:	89 36       	cpi	r24, 0x69	; 105
    1024:	19 f4       	brne	.+6      	; 0x102c <update_screen+0x32>
		print_difficulty_menu_objects(child);
    1026:	cb 01       	movw	r24, r22
    1028:	0e 94 af 07 	call	0xf5e	; 0xf5e <print_difficulty_menu_objects>
    102c:	08 95       	ret

0000102e <menu>:
    return child;
    
}


void menu(){
    102e:	cf 93       	push	r28
    1030:	df 93       	push	r29
    1032:	cd b7       	in	r28, 0x3d	; 61
    1034:	de b7       	in	r29, 0x3e	; 62
    1036:	e0 97       	sbiw	r28, 0x30	; 48
    1038:	0f b6       	in	r0, 0x3f	; 63
    103a:	f8 94       	cli
    103c:	de bf       	out	0x3e, r29	; 62
    103e:	0f be       	out	0x3f, r0	; 63
    1040:	cd bf       	out	0x3d, r28	; 61
    static Node Main_menu, Score, Play, Difficulty, Easy, Medium, Hard, *current_node;

    current_node = &Main_menu; 
    1042:	84 e1       	ldi	r24, 0x14	; 20
    1044:	93 e0       	ldi	r25, 0x03	; 3
    1046:	90 93 3f 03 	sts	0x033F, r25	; 0x80033f <current_node.2458+0x1>
    104a:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <current_node.2458>
    DIRECTION action; // Action from joystick

    // Build node structure
    Node* children1[8] = {&Play, &Score, &Difficulty ,0 ,0 ,0 ,0 ,0};
    104e:	80 e1       	ldi	r24, 0x10	; 16
    1050:	e0 e3       	ldi	r30, 0x30	; 48
    1052:	f1 e0       	ldi	r31, 0x01	; 1
    1054:	de 01       	movw	r26, r28
    1056:	11 96       	adiw	r26, 0x01	; 1
    1058:	01 90       	ld	r0, Z+
    105a:	0d 92       	st	X+, r0
    105c:	8a 95       	dec	r24
    105e:	e1 f7       	brne	.-8      	; 0x1058 <menu+0x2a>
    Node* children2[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    1060:	80 e1       	ldi	r24, 0x10	; 16
    1062:	6e 01       	movw	r12, r28
    1064:	91 e1       	ldi	r25, 0x11	; 17
    1066:	c9 0e       	add	r12, r25
    1068:	d1 1c       	adc	r13, r1
    106a:	f6 01       	movw	r30, r12
    106c:	98 2f       	mov	r25, r24
    106e:	11 92       	st	Z+, r1
    1070:	9a 95       	dec	r25
    1072:	e9 f7       	brne	.-6      	; 0x106e <menu+0x40>
    Node* children3[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    1074:	5e 01       	movw	r10, r28
    1076:	e1 e2       	ldi	r30, 0x21	; 33
    1078:	ae 0e       	add	r10, r30
    107a:	b1 1c       	adc	r11, r1
    107c:	f5 01       	movw	r30, r10
    107e:	11 92       	st	Z+, r1
    1080:	8a 95       	dec	r24
    1082:	e9 f7       	brne	.-6      	; 0x107e <menu+0x50>
		
		



    build_node(&Main_menu, NULL, "Main menu", NULL, &children1,3);
    1084:	0f 2e       	mov	r0, r31
    1086:	f3 e0       	ldi	r31, 0x03	; 3
    1088:	ef 2e       	mov	r14, r31
    108a:	f1 2c       	mov	r15, r1
    108c:	f0 2d       	mov	r31, r0
    108e:	8e 01       	movw	r16, r28
    1090:	0f 5f       	subi	r16, 0xFF	; 255
    1092:	1f 4f       	sbci	r17, 0xFF	; 255
    1094:	20 e0       	ldi	r18, 0x00	; 0
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	49 e1       	ldi	r20, 0x19	; 25
    109a:	52 e0       	ldi	r21, 0x02	; 2
    109c:	60 e0       	ldi	r22, 0x00	; 0
    109e:	70 e0       	ldi	r23, 0x00	; 0
    10a0:	84 e1       	ldi	r24, 0x14	; 20
    10a2:	93 e0       	ldi	r25, 0x03	; 3
    10a4:	0e 94 c5 05 	call	0xb8a	; 0xb8a <build_node>
    build_node(&Play, &Main_menu, "Play game", play_game, &children2,1);
    10a8:	ee 24       	eor	r14, r14
    10aa:	e3 94       	inc	r14
    10ac:	f1 2c       	mov	r15, r1
    10ae:	86 01       	movw	r16, r12
    10b0:	2e e7       	ldi	r18, 0x7E	; 126
    10b2:	36 e0       	ldi	r19, 0x06	; 6
    10b4:	43 e2       	ldi	r20, 0x23	; 35
    10b6:	52 e0       	ldi	r21, 0x02	; 2
    10b8:	64 e1       	ldi	r22, 0x14	; 20
    10ba:	73 e0       	ldi	r23, 0x03	; 3
    10bc:	8a ee       	ldi	r24, 0xEA	; 234
    10be:	92 e0       	ldi	r25, 0x02	; 2
    10c0:	0e 94 c5 05 	call	0xb8a	; 0xb8a <build_node>
    build_node(&Score, &Main_menu, "Show score", NULL, &children3,8);
    10c4:	68 94       	set
    10c6:	ee 24       	eor	r14, r14
    10c8:	e3 f8       	bld	r14, 3
    10ca:	f1 2c       	mov	r15, r1
    10cc:	85 01       	movw	r16, r10
    10ce:	20 e0       	ldi	r18, 0x00	; 0
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	4d e2       	ldi	r20, 0x2D	; 45
    10d4:	52 e0       	ldi	r21, 0x02	; 2
    10d6:	64 e1       	ldi	r22, 0x14	; 20
    10d8:	73 e0       	ldi	r23, 0x03	; 3
    10da:	80 ec       	ldi	r24, 0xC0	; 192
    10dc:	92 e0       	ldi	r25, 0x02	; 2
    10de:	0e 94 c5 05 	call	0xb8a	; 0xb8a <build_node>
	build_node(&Difficulty, &Main_menu, "Difficulty", set_difficulty, &children2, 3);
    10e2:	0f 2e       	mov	r0, r31
    10e4:	f3 e0       	ldi	r31, 0x03	; 3
    10e6:	ef 2e       	mov	r14, r31
    10e8:	f1 2c       	mov	r15, r1
    10ea:	f0 2d       	mov	r31, r0
    10ec:	86 01       	movw	r16, r12
    10ee:	24 e9       	ldi	r18, 0x94	; 148
    10f0:	35 e0       	ldi	r19, 0x05	; 5
    10f2:	46 ed       	ldi	r20, 0xD6	; 214
    10f4:	51 e0       	ldi	r21, 0x01	; 1
    10f6:	64 e1       	ldi	r22, 0x14	; 20
    10f8:	73 e0       	ldi	r23, 0x03	; 3
    10fa:	86 e9       	ldi	r24, 0x96	; 150
    10fc:	92 e0       	ldi	r25, 0x02	; 2
    10fe:	0e 94 c5 05 	call	0xb8a	; 0xb8a <build_node>
	
    update_screen(current_node, child);
    1102:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <child>
    1106:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <child+0x1>
    110a:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <current_node.2458>
    110e:	90 91 3f 03 	lds	r25, 0x033F	; 0x80033f <current_node.2458+0x1>
    1112:	0e 94 fd 07 	call	0xffa	; 0xffa <update_screen>
                go_up(&current_node);
                child = 1;
              break;
          case RIGHT:
                go_down(&current_node, child);
                child = 1;
    1116:	ee 24       	eor	r14, r14
    1118:	e3 94       	inc	r14
    111a:	f1 2c       	mov	r15, r1
	build_node(&Difficulty, &Main_menu, "Difficulty", set_difficulty, &children2, 3);
	
    update_screen(current_node, child);

    while(1){
        action = wait_for_action();  //Wait for user to move the joystick
    111c:	0e 94 14 06 	call	0xc28	; 0xc28 <wait_for_action>
    1120:	18 2f       	mov	r17, r24
        oled_clear();  //Clears the screen.
    1122:	0e 94 8e 04 	call	0x91c	; 0x91c <oled_clear>

        switch(action)
    1126:	11 30       	cpi	r17, 0x01	; 1
    1128:	79 f1       	breq	.+94     	; 0x1188 <menu+0x15a>
    112a:	28 f1       	brcs	.+74     	; 0x1176 <menu+0x148>
    112c:	12 30       	cpi	r17, 0x02	; 2
    112e:	19 f0       	breq	.+6      	; 0x1136 <menu+0x108>
    1130:	13 30       	cpi	r17, 0x03	; 3
    1132:	91 f0       	breq	.+36     	; 0x1158 <menu+0x12a>
    1134:	35 c0       	rjmp	.+106    	; 0x11a0 <menu+0x172>

}

int update_element_up(Node *current_node, int child){

    child--;
    1136:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <child>
    113a:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <child+0x1>
    113e:	01 97       	sbiw	r24, 0x01	; 1

    if(child == 0){
    1140:	31 f4       	brne	.+12     	; 0x114e <menu+0x120>
        child = current_node->elements_on_screen;
    1142:	e0 91 3e 03 	lds	r30, 0x033E	; 0x80033e <current_node.2458>
    1146:	f0 91 3f 03 	lds	r31, 0x033F	; 0x80033f <current_node.2458+0x1>
    114a:	82 89       	ldd	r24, Z+18	; 0x12
    114c:	93 89       	ldd	r25, Z+19	; 0x13
        {
          case BUTTON_PRESS:
              break;
          case UP:
                //update_screen(current_node, child);
                child = update_element_up(current_node, child);
    114e:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <child+0x1>
    1152:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <child>
              break;
    1156:	24 c0       	rjmp	.+72     	; 0x11a0 <menu+0x172>
          case DOWN:
                child = update_element_down(current_node, child);
    1158:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <child>
    115c:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <child+0x1>
    1160:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <current_node.2458>
    1164:	90 91 3f 03 	lds	r25, 0x033F	; 0x80033f <current_node.2458+0x1>
    1168:	0e 94 3a 06 	call	0xc74	; 0xc74 <update_element_down>
    116c:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <child+0x1>
    1170:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <child>
              break;
    1174:	15 c0       	rjmp	.+42     	; 0x11a0 <menu+0x172>
          case LEFT:
                go_up(&current_node);
    1176:	8e e3       	ldi	r24, 0x3E	; 62
    1178:	93 e0       	ldi	r25, 0x03	; 3
    117a:	0e 94 ef 05 	call	0xbde	; 0xbde <go_up>
                child = 1;
    117e:	f0 92 0b 01 	sts	0x010B, r15	; 0x80010b <child+0x1>
    1182:	e0 92 0a 01 	sts	0x010A, r14	; 0x80010a <child>
              break;
    1186:	0c c0       	rjmp	.+24     	; 0x11a0 <menu+0x172>
          case RIGHT:
                go_down(&current_node, child);
    1188:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <child>
    118c:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <child+0x1>
    1190:	8e e3       	ldi	r24, 0x3E	; 62
    1192:	93 e0       	ldi	r25, 0x03	; 3
    1194:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <go_down>
                child = 1;
    1198:	f0 92 0b 01 	sts	0x010B, r15	; 0x80010b <child+0x1>
    119c:	e0 92 0a 01 	sts	0x010A, r14	; 0x80010a <child>
              break;
          default:
              break;
        }
        update_screen(current_node, child);
    11a0:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <child>
    11a4:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <child+0x1>
    11a8:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <current_node.2458>
    11ac:	90 91 3f 03 	lds	r25, 0x033F	; 0x80033f <current_node.2458+0x1>
    11b0:	0e 94 fd 07 	call	0xffa	; 0xffa <update_screen>
        wait_for_neutral_joystick_position();
    11b4:	0e 94 35 06 	call	0xc6a	; 0xc6a <wait_for_neutral_joystick_position>
    }
    11b8:	b1 cf       	rjmp	.-158    	; 0x111c <menu+0xee>

000011ba <pos_read>:
#include <avr/io.h>
#include <stdio.h>
#include "pos_read.h"


void pos_read(position* pos){
    11ba:	8f 92       	push	r8
    11bc:	9f 92       	push	r9
    11be:	af 92       	push	r10
    11c0:	bf 92       	push	r11
    11c2:	cf 92       	push	r12
    11c4:	df 92       	push	r13
    11c6:	ef 92       	push	r14
    11c8:	ff 92       	push	r15
    11ca:	0f 93       	push	r16
    11cc:	1f 93       	push	r17
    11ce:	cf 93       	push	r28
    11d0:	df 93       	push	r29
    11d2:	7c 01       	movw	r14, r24

    int ADC_Y = ADC_read(0);
    11d4:	80 e0       	ldi	r24, 0x00	; 0
    11d6:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ADC_read>
    11da:	c8 2f       	mov	r28, r24
    11dc:	d0 e0       	ldi	r29, 0x00	; 0
    int ADC_X = ADC_read(1);
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ADC_read>
    11e4:	68 2f       	mov	r22, r24
    11e6:	70 e0       	ldi	r23, 0x00	; 0

    // X read

    if((ADC_X >= (P_cal.center_X - 20)) && (ADC_X <= (P_cal.center_X + 20))){ //Deadspace for joystick
    11e8:	00 91 42 03 	lds	r16, 0x0342	; 0x800342 <P_cal>
    11ec:	10 91 43 03 	lds	r17, 0x0343	; 0x800343 <P_cal+0x1>
    11f0:	c8 01       	movw	r24, r16
    11f2:	44 97       	sbiw	r24, 0x14	; 20
    11f4:	68 17       	cp	r22, r24
    11f6:	79 07       	cpc	r23, r25
    11f8:	0c f4       	brge	.+2      	; 0x11fc <pos_read+0x42>
    11fa:	b6 c0       	rjmp	.+364    	; 0x1368 <pos_read+0x1ae>
    11fc:	88 96       	adiw	r24, 0x28	; 40
    11fe:	86 17       	cp	r24, r22
    1200:	97 07       	cpc	r25, r23
    1202:	0c f0       	brlt	.+2      	; 0x1206 <pos_read+0x4c>
    1204:	4c c0       	rjmp	.+152    	; 0x129e <pos_read+0xe4>
        ADC_X = 0;
    }
    else if(ADC_X > (P_cal.center_X + 20)){
        ADC_X = (ADC_X - P_cal.center_X) * 100.0 / (255.0 - P_cal.center_X);  //
    1206:	60 1b       	sub	r22, r16
    1208:	71 0b       	sbc	r23, r17
    120a:	07 2e       	mov	r0, r23
    120c:	00 0c       	add	r0, r0
    120e:	88 0b       	sbc	r24, r24
    1210:	99 0b       	sbc	r25, r25
    1212:	0e 94 a9 0c 	call	0x1952	; 0x1952 <__floatsisf>
    1216:	20 e0       	ldi	r18, 0x00	; 0
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	48 ec       	ldi	r20, 0xC8	; 200
    121c:	52 e4       	ldi	r21, 0x42	; 66
    121e:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <__mulsf3>
    1222:	4b 01       	movw	r8, r22
    1224:	5c 01       	movw	r10, r24
    1226:	b8 01       	movw	r22, r16
    1228:	11 0f       	add	r17, r17
    122a:	88 0b       	sbc	r24, r24
    122c:	99 0b       	sbc	r25, r25
    122e:	0e 94 a9 0c 	call	0x1952	; 0x1952 <__floatsisf>
    1232:	9b 01       	movw	r18, r22
    1234:	ac 01       	movw	r20, r24
    1236:	60 e0       	ldi	r22, 0x00	; 0
    1238:	70 e0       	ldi	r23, 0x00	; 0
    123a:	8f e7       	ldi	r24, 0x7F	; 127
    123c:	93 e4       	ldi	r25, 0x43	; 67
    123e:	0e 94 1b 0b 	call	0x1636	; 0x1636 <__subsf3>
    1242:	9b 01       	movw	r18, r22
    1244:	ac 01       	movw	r20, r24
    1246:	c5 01       	movw	r24, r10
    1248:	b4 01       	movw	r22, r8
    124a:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <__divsf3>
    124e:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <__fixsfsi>
    1252:	6b 01       	movw	r12, r22
    1254:	26 c0       	rjmp	.+76     	; 0x12a2 <pos_read+0xe8>
    }

    else if (ADC_X < (P_cal.center_X - 20)){
        ADC_X = (ADC_X / ((float)P_cal.center_X)) * 100 - 100;   // // Scaling when value is larger then center value
    1256:	07 2e       	mov	r0, r23
    1258:	00 0c       	add	r0, r0
    125a:	88 0b       	sbc	r24, r24
    125c:	99 0b       	sbc	r25, r25
    125e:	0e 94 a9 0c 	call	0x1952	; 0x1952 <__floatsisf>
    1262:	4b 01       	movw	r8, r22
    1264:	5c 01       	movw	r10, r24
    1266:	b8 01       	movw	r22, r16
    1268:	11 0f       	add	r17, r17
    126a:	88 0b       	sbc	r24, r24
    126c:	99 0b       	sbc	r25, r25
    126e:	0e 94 a9 0c 	call	0x1952	; 0x1952 <__floatsisf>
    1272:	9b 01       	movw	r18, r22
    1274:	ac 01       	movw	r20, r24
    1276:	c5 01       	movw	r24, r10
    1278:	b4 01       	movw	r22, r8
    127a:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <__divsf3>
    127e:	20 e0       	ldi	r18, 0x00	; 0
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	48 ec       	ldi	r20, 0xC8	; 200
    1284:	52 e4       	ldi	r21, 0x42	; 66
    1286:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <__mulsf3>
    128a:	20 e0       	ldi	r18, 0x00	; 0
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	48 ec       	ldi	r20, 0xC8	; 200
    1290:	52 e4       	ldi	r21, 0x42	; 66
    1292:	0e 94 1b 0b 	call	0x1636	; 0x1636 <__subsf3>
    1296:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <__fixsfsi>
    129a:	6b 01       	movw	r12, r22
    129c:	02 c0       	rjmp	.+4      	; 0x12a2 <pos_read+0xe8>
    int ADC_X = ADC_read(1);

    // X read

    if((ADC_X >= (P_cal.center_X - 20)) && (ADC_X <= (P_cal.center_X + 20))){ //Deadspace for joystick
        ADC_X = 0;
    129e:	c1 2c       	mov	r12, r1
    12a0:	d1 2c       	mov	r13, r1
        ADC_X = (ADC_X / ((float)P_cal.center_X)) * 100 - 100;   // // Scaling when value is larger then center value
    }

    // Y read

    if(ADC_Y >= (P_cal.center_Y - 80) && ADC_Y <= (P_cal.center_Y + 80)){  //Deadspace for joystick
    12a2:	00 91 44 03 	lds	r16, 0x0344	; 0x800344 <P_cal+0x2>
    12a6:	10 91 45 03 	lds	r17, 0x0345	; 0x800345 <P_cal+0x3>
    12aa:	c8 01       	movw	r24, r16
    12ac:	80 55       	subi	r24, 0x50	; 80
    12ae:	91 09       	sbc	r25, r1
    12b0:	c8 17       	cp	r28, r24
    12b2:	d9 07       	cpc	r29, r25
    12b4:	0c f4       	brge	.+2      	; 0x12b8 <pos_read+0xfe>
    12b6:	5f c0       	rjmp	.+190    	; 0x1376 <pos_read+0x1bc>
    12b8:	80 56       	subi	r24, 0x60	; 96
    12ba:	9f 4f       	sbci	r25, 0xFF	; 255
    12bc:	8c 17       	cp	r24, r28
    12be:	9d 07       	cpc	r25, r29
    12c0:	0c f0       	brlt	.+2      	; 0x12c4 <pos_read+0x10a>
    12c2:	4a c0       	rjmp	.+148    	; 0x1358 <pos_read+0x19e>
        ADC_Y = 0;
    }
    else if(ADC_Y > (P_cal.center_Y + 80)){
        ADC_Y = (ADC_Y - (P_cal.center_Y)) * 100.0 / (255.0 - P_cal.center_Y);  // Scaling when value is larger then center value
    12c4:	c0 1b       	sub	r28, r16
    12c6:	d1 0b       	sbc	r29, r17
    12c8:	be 01       	movw	r22, r28
    12ca:	dd 0f       	add	r29, r29
    12cc:	88 0b       	sbc	r24, r24
    12ce:	99 0b       	sbc	r25, r25
    12d0:	0e 94 a9 0c 	call	0x1952	; 0x1952 <__floatsisf>
    12d4:	20 e0       	ldi	r18, 0x00	; 0
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	48 ec       	ldi	r20, 0xC8	; 200
    12da:	52 e4       	ldi	r21, 0x42	; 66
    12dc:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <__mulsf3>
    12e0:	4b 01       	movw	r8, r22
    12e2:	5c 01       	movw	r10, r24
    12e4:	b8 01       	movw	r22, r16
    12e6:	11 0f       	add	r17, r17
    12e8:	88 0b       	sbc	r24, r24
    12ea:	99 0b       	sbc	r25, r25
    12ec:	0e 94 a9 0c 	call	0x1952	; 0x1952 <__floatsisf>
    12f0:	9b 01       	movw	r18, r22
    12f2:	ac 01       	movw	r20, r24
    12f4:	60 e0       	ldi	r22, 0x00	; 0
    12f6:	70 e0       	ldi	r23, 0x00	; 0
    12f8:	8f e7       	ldi	r24, 0x7F	; 127
    12fa:	93 e4       	ldi	r25, 0x43	; 67
    12fc:	0e 94 1b 0b 	call	0x1636	; 0x1636 <__subsf3>
    1300:	9b 01       	movw	r18, r22
    1302:	ac 01       	movw	r20, r24
    1304:	c5 01       	movw	r24, r10
    1306:	b4 01       	movw	r22, r8
    1308:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <__divsf3>
    130c:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <__fixsfsi>
    1310:	25 c0       	rjmp	.+74     	; 0x135c <pos_read+0x1a2>
    }

    else if (ADC_Y < (P_cal.center_Y - 80)){
        ADC_Y = (ADC_Y / ((float)P_cal.center_Y)) * 100 - 100;   // Scaling when value is smaller then center value
    1312:	be 01       	movw	r22, r28
    1314:	dd 0f       	add	r29, r29
    1316:	88 0b       	sbc	r24, r24
    1318:	99 0b       	sbc	r25, r25
    131a:	0e 94 a9 0c 	call	0x1952	; 0x1952 <__floatsisf>
    131e:	4b 01       	movw	r8, r22
    1320:	5c 01       	movw	r10, r24
    1322:	b8 01       	movw	r22, r16
    1324:	11 0f       	add	r17, r17
    1326:	88 0b       	sbc	r24, r24
    1328:	99 0b       	sbc	r25, r25
    132a:	0e 94 a9 0c 	call	0x1952	; 0x1952 <__floatsisf>
    132e:	9b 01       	movw	r18, r22
    1330:	ac 01       	movw	r20, r24
    1332:	c5 01       	movw	r24, r10
    1334:	b4 01       	movw	r22, r8
    1336:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <__divsf3>
    133a:	20 e0       	ldi	r18, 0x00	; 0
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	48 ec       	ldi	r20, 0xC8	; 200
    1340:	52 e4       	ldi	r21, 0x42	; 66
    1342:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <__mulsf3>
    1346:	20 e0       	ldi	r18, 0x00	; 0
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	48 ec       	ldi	r20, 0xC8	; 200
    134c:	52 e4       	ldi	r21, 0x42	; 66
    134e:	0e 94 1b 0b 	call	0x1636	; 0x1636 <__subsf3>
    1352:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <__fixsfsi>
    1356:	02 c0       	rjmp	.+4      	; 0x135c <pos_read+0x1a2>
    }

    // Y read

    if(ADC_Y >= (P_cal.center_Y - 80) && ADC_Y <= (P_cal.center_Y + 80)){  //Deadspace for joystick
        ADC_Y = 0;
    1358:	60 e0       	ldi	r22, 0x00	; 0
    135a:	70 e0       	ldi	r23, 0x00	; 0

    else if (ADC_Y < (P_cal.center_Y - 80)){
        ADC_Y = (ADC_Y / ((float)P_cal.center_Y)) * 100 - 100;   // Scaling when value is smaller then center value
    }

    pos -> posX = ADC_X;
    135c:	f7 01       	movw	r30, r14
    135e:	d1 82       	std	Z+1, r13	; 0x01
    1360:	c0 82       	st	Z, r12
    pos -> posY = ADC_Y;
    1362:	73 83       	std	Z+3, r23	; 0x03
    1364:	62 83       	std	Z+2, r22	; 0x02
}
    1366:	0e c0       	rjmp	.+28     	; 0x1384 <pos_read+0x1ca>
    // X read

    if((ADC_X >= (P_cal.center_X - 20)) && (ADC_X <= (P_cal.center_X + 20))){ //Deadspace for joystick
        ADC_X = 0;
    }
    else if(ADC_X > (P_cal.center_X + 20)){
    1368:	c8 01       	movw	r24, r16
    136a:	44 96       	adiw	r24, 0x14	; 20
    136c:	86 17       	cp	r24, r22
    136e:	97 07       	cpc	r25, r23
    1370:	0c f4       	brge	.+2      	; 0x1374 <pos_read+0x1ba>
    1372:	49 cf       	rjmp	.-366    	; 0x1206 <pos_read+0x4c>
    1374:	70 cf       	rjmp	.-288    	; 0x1256 <pos_read+0x9c>
    // Y read

    if(ADC_Y >= (P_cal.center_Y - 80) && ADC_Y <= (P_cal.center_Y + 80)){  //Deadspace for joystick
        ADC_Y = 0;
    }
    else if(ADC_Y > (P_cal.center_Y + 80)){
    1376:	c8 01       	movw	r24, r16
    1378:	80 5b       	subi	r24, 0xB0	; 176
    137a:	9f 4f       	sbci	r25, 0xFF	; 255
    137c:	8c 17       	cp	r24, r28
    137e:	9d 07       	cpc	r25, r29
    1380:	44 f6       	brge	.-112    	; 0x1312 <pos_read+0x158>
    1382:	a0 cf       	rjmp	.-192    	; 0x12c4 <pos_read+0x10a>
        ADC_Y = (ADC_Y / ((float)P_cal.center_Y)) * 100 - 100;   // Scaling when value is smaller then center value
    }

    pos -> posX = ADC_X;
    pos -> posY = ADC_Y;
}
    1384:	df 91       	pop	r29
    1386:	cf 91       	pop	r28
    1388:	1f 91       	pop	r17
    138a:	0f 91       	pop	r16
    138c:	ff 90       	pop	r15
    138e:	ef 90       	pop	r14
    1390:	df 90       	pop	r13
    1392:	cf 90       	pop	r12
    1394:	bf 90       	pop	r11
    1396:	af 90       	pop	r10
    1398:	9f 90       	pop	r9
    139a:	8f 90       	pop	r8
    139c:	08 95       	ret

0000139e <joystick_direction>:

DIRECTION joystick_direction(void){
    139e:	8f 92       	push	r8
    13a0:	9f 92       	push	r9
    13a2:	af 92       	push	r10
    13a4:	bf 92       	push	r11
    13a6:	cf 92       	push	r12
    13a8:	df 92       	push	r13
    13aa:	ef 92       	push	r14
    13ac:	ff 92       	push	r15
    13ae:	cf 93       	push	r28
    13b0:	df 93       	push	r29

    pos_read(&P_pos);
    13b2:	86 e4       	ldi	r24, 0x46	; 70
    13b4:	93 e0       	ldi	r25, 0x03	; 3
    13b6:	0e 94 dd 08 	call	0x11ba	; 0x11ba <pos_read>

    int angle = atan2(P_pos.posY, P_pos.posX);
    13ba:	e6 e4       	ldi	r30, 0x46	; 70
    13bc:	f3 e0       	ldi	r31, 0x03	; 3
    13be:	e0 80       	ld	r14, Z
    13c0:	f1 80       	ldd	r15, Z+1	; 0x01
    13c2:	c2 81       	ldd	r28, Z+2	; 0x02
    13c4:	d3 81       	ldd	r29, Z+3	; 0x03
    13c6:	b7 01       	movw	r22, r14
    13c8:	0f 2c       	mov	r0, r15
    13ca:	00 0c       	add	r0, r0
    13cc:	88 0b       	sbc	r24, r24
    13ce:	99 0b       	sbc	r25, r25
    13d0:	0e 94 a9 0c 	call	0x1952	; 0x1952 <__floatsisf>
    13d4:	4b 01       	movw	r8, r22
    13d6:	5c 01       	movw	r10, r24
    13d8:	be 01       	movw	r22, r28
    13da:	0d 2e       	mov	r0, r29
    13dc:	00 0c       	add	r0, r0
    13de:	88 0b       	sbc	r24, r24
    13e0:	99 0b       	sbc	r25, r25
    13e2:	0e 94 a9 0c 	call	0x1952	; 0x1952 <__floatsisf>
    13e6:	a5 01       	movw	r20, r10
    13e8:	94 01       	movw	r18, r8
    13ea:	0e 94 9b 0b 	call	0x1736	; 0x1736 <atan2>

    if(!P_pos.posY & !P_pos.posX){
    13ee:	21 e0       	ldi	r18, 0x01	; 1
    13f0:	cd 2b       	or	r28, r29
    13f2:	09 f0       	breq	.+2      	; 0x13f6 <joystick_direction+0x58>
    13f4:	20 e0       	ldi	r18, 0x00	; 0
    13f6:	22 23       	and	r18, r18
    13f8:	31 f0       	breq	.+12     	; 0x1406 <joystick_direction+0x68>
    13fa:	21 e0       	ldi	r18, 0x01	; 1
    13fc:	ef 28       	or	r14, r15
    13fe:	09 f0       	breq	.+2      	; 0x1402 <joystick_direction+0x64>
    1400:	20 e0       	ldi	r18, 0x00	; 0
    1402:	21 11       	cpse	r18, r1
    1404:	79 c0       	rjmp	.+242    	; 0x14f8 <joystick_direction+0x15a>
        return NEUTRAL;
    }

    else if(angle >= -PI / 4.0 & angle <= PI/4.0){
    1406:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <__fixsfsi>
    140a:	07 2e       	mov	r0, r23
    140c:	00 0c       	add	r0, r0
    140e:	88 0b       	sbc	r24, r24
    1410:	99 0b       	sbc	r25, r25
    1412:	0e 94 a9 0c 	call	0x1952	; 0x1952 <__floatsisf>
    1416:	6b 01       	movw	r12, r22
    1418:	7c 01       	movw	r14, r24
    141a:	c1 e0       	ldi	r28, 0x01	; 1
    141c:	2b ed       	ldi	r18, 0xDB	; 219
    141e:	3f e0       	ldi	r19, 0x0F	; 15
    1420:	49 e4       	ldi	r20, 0x49	; 73
    1422:	5f eb       	ldi	r21, 0xBF	; 191
    1424:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <__gesf2>
    1428:	88 23       	and	r24, r24
    142a:	0c f4       	brge	.+2      	; 0x142e <joystick_direction+0x90>
    142c:	c0 e0       	ldi	r28, 0x00	; 0
    142e:	cc 23       	and	r28, r28
    1430:	71 f0       	breq	.+28     	; 0x144e <joystick_direction+0xb0>
    1432:	c1 e0       	ldi	r28, 0x01	; 1
    1434:	2b ed       	ldi	r18, 0xDB	; 219
    1436:	3f e0       	ldi	r19, 0x0F	; 15
    1438:	49 e4       	ldi	r20, 0x49	; 73
    143a:	5f e3       	ldi	r21, 0x3F	; 63
    143c:	c7 01       	movw	r24, r14
    143e:	b6 01       	movw	r22, r12
    1440:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <__cmpsf2>
    1444:	18 16       	cp	r1, r24
    1446:	0c f4       	brge	.+2      	; 0x144a <joystick_direction+0xac>
    1448:	c0 e0       	ldi	r28, 0x00	; 0
    144a:	c1 11       	cpse	r28, r1
    144c:	57 c0       	rjmp	.+174    	; 0x14fc <joystick_direction+0x15e>
        return RIGHT;
    }

    else if(angle >= -3 * PI/4.0 & angle <= -PI / 4.0){
    144e:	c1 e0       	ldi	r28, 0x01	; 1
    1450:	24 ee       	ldi	r18, 0xE4	; 228
    1452:	3b ec       	ldi	r19, 0xCB	; 203
    1454:	46 e1       	ldi	r20, 0x16	; 22
    1456:	50 ec       	ldi	r21, 0xC0	; 192
    1458:	c7 01       	movw	r24, r14
    145a:	b6 01       	movw	r22, r12
    145c:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <__gesf2>
    1460:	88 23       	and	r24, r24
    1462:	0c f4       	brge	.+2      	; 0x1466 <joystick_direction+0xc8>
    1464:	c0 e0       	ldi	r28, 0x00	; 0
    1466:	cc 23       	and	r28, r28
    1468:	71 f0       	breq	.+28     	; 0x1486 <joystick_direction+0xe8>
    146a:	c1 e0       	ldi	r28, 0x01	; 1
    146c:	2b ed       	ldi	r18, 0xDB	; 219
    146e:	3f e0       	ldi	r19, 0x0F	; 15
    1470:	49 e4       	ldi	r20, 0x49	; 73
    1472:	5f eb       	ldi	r21, 0xBF	; 191
    1474:	c7 01       	movw	r24, r14
    1476:	b6 01       	movw	r22, r12
    1478:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <__cmpsf2>
    147c:	18 16       	cp	r1, r24
    147e:	0c f4       	brge	.+2      	; 0x1482 <joystick_direction+0xe4>
    1480:	c0 e0       	ldi	r28, 0x00	; 0
    1482:	c1 11       	cpse	r28, r1
    1484:	3d c0       	rjmp	.+122    	; 0x1500 <joystick_direction+0x162>
        return DOWN;
    }

    else if(angle >= 3 * PI/4 | angle <= -3* PI / 4.0){
    1486:	c1 e0       	ldi	r28, 0x01	; 1
    1488:	24 ee       	ldi	r18, 0xE4	; 228
    148a:	3b ec       	ldi	r19, 0xCB	; 203
    148c:	46 e1       	ldi	r20, 0x16	; 22
    148e:	50 e4       	ldi	r21, 0x40	; 64
    1490:	c7 01       	movw	r24, r14
    1492:	b6 01       	movw	r22, r12
    1494:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <__gesf2>
    1498:	88 23       	and	r24, r24
    149a:	0c f4       	brge	.+2      	; 0x149e <joystick_direction+0x100>
    149c:	c0 e0       	ldi	r28, 0x00	; 0
    149e:	c1 11       	cpse	r28, r1
    14a0:	31 c0       	rjmp	.+98     	; 0x1504 <joystick_direction+0x166>
    14a2:	c1 e0       	ldi	r28, 0x01	; 1
    14a4:	24 ee       	ldi	r18, 0xE4	; 228
    14a6:	3b ec       	ldi	r19, 0xCB	; 203
    14a8:	46 e1       	ldi	r20, 0x16	; 22
    14aa:	50 ec       	ldi	r21, 0xC0	; 192
    14ac:	c7 01       	movw	r24, r14
    14ae:	b6 01       	movw	r22, r12
    14b0:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <__cmpsf2>
    14b4:	18 16       	cp	r1, r24
    14b6:	0c f4       	brge	.+2      	; 0x14ba <joystick_direction+0x11c>
    14b8:	c0 e0       	ldi	r28, 0x00	; 0
    14ba:	c1 11       	cpse	r28, r1
    14bc:	23 c0       	rjmp	.+70     	; 0x1504 <joystick_direction+0x166>
        return LEFT;
    }

    else if(angle >= PI / 4 & angle <= 3*PI / 4.0){
    14be:	c1 e0       	ldi	r28, 0x01	; 1
    14c0:	2b ed       	ldi	r18, 0xDB	; 219
    14c2:	3f e0       	ldi	r19, 0x0F	; 15
    14c4:	49 e4       	ldi	r20, 0x49	; 73
    14c6:	5f e3       	ldi	r21, 0x3F	; 63
    14c8:	c7 01       	movw	r24, r14
    14ca:	b6 01       	movw	r22, r12
    14cc:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <__gesf2>
    14d0:	88 23       	and	r24, r24
    14d2:	0c f4       	brge	.+2      	; 0x14d6 <joystick_direction+0x138>
    14d4:	c0 e0       	ldi	r28, 0x00	; 0
    14d6:	cc 23       	and	r28, r28
    14d8:	71 f0       	breq	.+28     	; 0x14f6 <joystick_direction+0x158>
    14da:	c1 e0       	ldi	r28, 0x01	; 1
    14dc:	24 ee       	ldi	r18, 0xE4	; 228
    14de:	3b ec       	ldi	r19, 0xCB	; 203
    14e0:	46 e1       	ldi	r20, 0x16	; 22
    14e2:	50 e4       	ldi	r21, 0x40	; 64
    14e4:	c7 01       	movw	r24, r14
    14e6:	b6 01       	movw	r22, r12
    14e8:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <__cmpsf2>
    14ec:	18 16       	cp	r1, r24
    14ee:	0c f4       	brge	.+2      	; 0x14f2 <joystick_direction+0x154>
    14f0:	c0 e0       	ldi	r28, 0x00	; 0
    14f2:	c1 11       	cpse	r28, r1
    14f4:	09 c0       	rjmp	.+18     	; 0x1508 <joystick_direction+0x16a>
        return UP;
    }
}
    14f6:	09 c0       	rjmp	.+18     	; 0x150a <joystick_direction+0x16c>
    pos_read(&P_pos);

    int angle = atan2(P_pos.posY, P_pos.posX);

    if(!P_pos.posY & !P_pos.posX){
        return NEUTRAL;
    14f8:	84 e0       	ldi	r24, 0x04	; 4
    14fa:	07 c0       	rjmp	.+14     	; 0x150a <joystick_direction+0x16c>
    }

    else if(angle >= -PI / 4.0 & angle <= PI/4.0){
        return RIGHT;
    14fc:	81 e0       	ldi	r24, 0x01	; 1
    14fe:	05 c0       	rjmp	.+10     	; 0x150a <joystick_direction+0x16c>
    }

    else if(angle >= -3 * PI/4.0 & angle <= -PI / 4.0){
        return DOWN;
    1500:	83 e0       	ldi	r24, 0x03	; 3
    1502:	03 c0       	rjmp	.+6      	; 0x150a <joystick_direction+0x16c>
    }

    else if(angle >= 3 * PI/4 | angle <= -3* PI / 4.0){
        return LEFT;
    1504:	80 e0       	ldi	r24, 0x00	; 0
    1506:	01 c0       	rjmp	.+2      	; 0x150a <joystick_direction+0x16c>
    }

    else if(angle >= PI / 4 & angle <= 3*PI / 4.0){
        return UP;
    1508:	82 e0       	ldi	r24, 0x02	; 2
    }
}
    150a:	df 91       	pop	r29
    150c:	cf 91       	pop	r28
    150e:	ff 90       	pop	r15
    1510:	ef 90       	pop	r14
    1512:	df 90       	pop	r13
    1514:	cf 90       	pop	r12
    1516:	bf 90       	pop	r11
    1518:	af 90       	pop	r10
    151a:	9f 90       	pop	r9
    151c:	8f 90       	pop	r8
    151e:	08 95       	ret

00001520 <pos_readSettings>:

void pos_readSettings(void){
	
	DDRB &= ~(1 << PB1);
    1520:	b9 98       	cbi	0x17, 1	; 23
	DDRD &= ~(1 << PD4);
    1522:	8c 98       	cbi	0x11, 4	; 17
	DDRD &= ~(1 << PD5);
    1524:	8d 98       	cbi	0x11, 5	; 17

	PORTB |= (1 << PB1); // internal pull up enable
    1526:	c1 9a       	sbi	0x18, 1	; 24
    1528:	08 95       	ret

0000152a <usb_button_pushed>:

uint8_t usb_button_pushed(USB_BUTTON BUTTON){

    uint8_t pressed;

    if(BUTTON == LEFT_BUTTON){
    152a:	81 30       	cpi	r24, 0x01	; 1
    152c:	19 f4       	brne	.+6      	; 0x1534 <usb_button_pushed+0xa>
        pressed = (PIND & (1 << PD4) );
    152e:	80 b3       	in	r24, 0x10	; 16
    1530:	80 71       	andi	r24, 0x10	; 16
    1532:	08 95       	ret

		}

    if(BUTTON == RIGHT_BUTTON){
    1534:	81 11       	cpse	r24, r1
    1536:	03 c0       	rjmp	.+6      	; 0x153e <usb_button_pushed+0x14>
        pressed =  (PIND & (1 << PD5) );
    1538:	80 b3       	in	r24, 0x10	; 16
    153a:	80 72       	andi	r24, 0x20	; 32
    153c:	08 95       	ret
		}

    if(BUTTON == JOYSTICK_BUTTON){
    153e:	82 30       	cpi	r24, 0x02	; 2
    1540:	31 f4       	brne	.+12     	; 0x154e <usb_button_pushed+0x24>
        pressed =  (PINB & (1 << PB1) );
    1542:	86 b3       	in	r24, 0x16	; 22
        return !pressed;
    1544:	86 95       	lsr	r24
    1546:	81 70       	andi	r24, 0x01	; 1
    1548:	91 e0       	ldi	r25, 0x01	; 1
    154a:	89 27       	eor	r24, r25
    154c:	08 95       	ret
    154e:	80 e0       	ldi	r24, 0x00	; 0
		}

    return pressed;
}
    1550:	08 95       	ret

00001552 <main>:
//#include "notes.h"


int main(void)
{
    InitMusic();
    1552:	0e 94 fe 03 	call	0x7fc	; 0x7fc <InitMusic>
	//playMusic(end_melody2, 1, 2);
	
    SRAM_init();
    1556:	0e 94 04 0b 	call	0x1608	; 0x1608 <SRAM_init>
    ADC_timer_init();
    155a:	0e 94 0a 02 	call	0x414	; 0x414 <ADC_timer_init>
    USART_init();
    155e:	0e 94 0b 0b 	call	0x1616	; 0x1616 <USART_init>
    fdevopen(USART_send, USART_receive);
    1562:	63 e1       	ldi	r22, 0x13	; 19
    1564:	7b e0       	ldi	r23, 0x0B	; 11
    1566:	87 e1       	ldi	r24, 0x17	; 23
    1568:	9b e0       	ldi	r25, 0x0B	; 11
    156a:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <fdevopen>
    ADC_calibrate(&P_cal);
    156e:	82 e4       	ldi	r24, 0x42	; 66
    1570:	93 e0       	ldi	r25, 0x03	; 3
    1572:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <ADC_calibrate>
    OLED_init();
    1576:	0e 94 b2 04 	call	0x964	; 0x964 <OLED_init>
    pos_readSettings();
    157a:	0e 94 90 0a 	call	0x1520	; 0x1520 <pos_readSettings>
    oled_clear();
    157e:	0e 94 8e 04 	call	0x91c	; 0x91c <oled_clear>
	CAN_init(MODE_NORMAL);
    1582:	80 e0       	ldi	r24, 0x00	; 0
    1584:	0e 94 17 02 	call	0x42e	; 0x42e <CAN_init>
	
    menu();
    1588:	0e 94 17 08 	call	0x102e	; 0x102e <menu>

    printf("Initiating node 1 \n\r");
    158c:	88 e3       	ldi	r24, 0x38	; 56
    158e:	92 e0       	ldi	r25, 0x02	; 2
    1590:	9f 93       	push	r25
    1592:	8f 93       	push	r24
    1594:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <printf>
    1598:	0f 90       	pop	r0
    159a:	0f 90       	pop	r0
	   joyStick_Can_Message();
        
        uint8_t sliderX = ADC_read(3);
        uint8_t sliderY = ADC_read(2);
  
        printf("Pos X val is %4d , Pos Y is %4d, sliderX is %4d,  sliderY is %4d  \n \r", P_pos.posX, P_pos.posY, sliderX, sliderY);
    159c:	c6 e4       	ldi	r28, 0x46	; 70
    159e:	d3 e0       	ldi	r29, 0x03	; 3
    15a0:	0d e4       	ldi	r16, 0x4D	; 77
    15a2:	12 e0       	ldi	r17, 0x02	; 2
    printf("Initiating node 1 \n\r");
    
    //printf("showscore is: %c")
    while (1) {

	   joyStick_Can_Message();
    15a4:	0e 94 06 03 	call	0x60c	; 0x60c <joyStick_Can_Message>
        
        uint8_t sliderX = ADC_read(3);
    15a8:	83 e0       	ldi	r24, 0x03	; 3
    15aa:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ADC_read>
    15ae:	f8 2e       	mov	r15, r24
        uint8_t sliderY = ADC_read(2);
    15b0:	82 e0       	ldi	r24, 0x02	; 2
    15b2:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ADC_read>
  
        printf("Pos X val is %4d , Pos Y is %4d, sliderX is %4d,  sliderY is %4d  \n \r", P_pos.posX, P_pos.posY, sliderX, sliderY);
    15b6:	1f 92       	push	r1
    15b8:	8f 93       	push	r24
    15ba:	1f 92       	push	r1
    15bc:	ff 92       	push	r15
    15be:	8b 81       	ldd	r24, Y+3	; 0x03
    15c0:	8f 93       	push	r24
    15c2:	8a 81       	ldd	r24, Y+2	; 0x02
    15c4:	8f 93       	push	r24
    15c6:	89 81       	ldd	r24, Y+1	; 0x01
    15c8:	8f 93       	push	r24
    15ca:	88 81       	ld	r24, Y
    15cc:	8f 93       	push	r24
    15ce:	1f 93       	push	r17
    15d0:	0f 93       	push	r16
    15d2:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <printf>
    15d6:	8d b7       	in	r24, 0x3d	; 61
    15d8:	9e b7       	in	r25, 0x3e	; 62
    15da:	0a 96       	adiw	r24, 0x0a	; 10
    15dc:	0f b6       	in	r0, 0x3f	; 63
    15de:	f8 94       	cli
    15e0:	9e bf       	out	0x3e, r25	; 62
    15e2:	0f be       	out	0x3f, r0	; 63
    15e4:	8d bf       	out	0x3d, r24	; 61
    15e6:	de cf       	rjmp	.-68     	; 0x15a4 <main+0x52>

000015e8 <spi_write>:
#include "spi_driver.h"


void spi_write(char data){

    SPDR = data;
    15e8:	8f b9       	out	0x0f, r24	; 15
    while( !(SPSR & (1<<SPIF)) );
    15ea:	77 9b       	sbis	0x0e, 7	; 14
    15ec:	fe cf       	rjmp	.-4      	; 0x15ea <spi_write+0x2>

}
    15ee:	08 95       	ret

000015f0 <spi_read>:

char spi_read(void){

    spi_write(DUMMY);
    15f0:	86 e5       	ldi	r24, 0x56	; 86
    15f2:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <spi_write>
    return SPDR;
}
    15f6:	8f b1       	in	r24, 0x0f	; 15

    15f8:	08 95       	ret

000015fa <spi_init>:
void spi_init(void){
    DDR_SPI |= (1 << SCK) | (1 << MOSI) | (1 << SS);

    15fa:	87 b3       	in	r24, 0x17	; 23
    15fc:	80 6b       	ori	r24, 0xB0	; 176
    15fe:	87 bb       	out	0x17, r24	; 23
    SPCR |= (1 << SPE) | (1 << MSTR) | (1<<SPR0);  // Enable SPI and set as master

    1600:	8d b1       	in	r24, 0x0d	; 13
    1602:	81 65       	ori	r24, 0x51	; 81
    1604:	8d b9       	out	0x0d, r24	; 13
    1606:	08 95       	ret

00001608 <SRAM_init>:
 */

#include "SRAM_driver.h"

void SRAM_init(void){
    MCUCR |= (1 << SRE);     //external SRAM enable (mcu control register)
    1608:	85 b7       	in	r24, 0x35	; 53
    160a:	80 68       	ori	r24, 0x80	; 128
    160c:	85 bf       	out	0x35, r24	; 53
    SFIOR |= (1 << XMM2);    //excludes memory occupied by JTAG
    160e:	80 b7       	in	r24, 0x30	; 48
    1610:	80 62       	ori	r24, 0x20	; 32
    1612:	80 bf       	out	0x30, r24	; 48
    1614:	08 95       	ret

00001616 <USART_init>:
 */
#include "UART_driver.h"


void USART_init(void){
    UBRR0L = (uint8_t)(BAUD_PRESCALER);
    1616:	8f e1       	ldi	r24, 0x1F	; 31
    1618:	89 b9       	out	0x09, r24	; 9
    UBRR0H = (uint8_t)((uint8_t) BAUD_PRESCALER>>8);
    161a:	10 bc       	out	0x20, r1	; 32
    UCSR0B = (1 << RXEN0)|(1 << TXEN0);
    161c:	88 e1       	ldi	r24, 0x18	; 24
    161e:	8a b9       	out	0x0a, r24	; 10
    UCSR0C = (1 << URSEL0)|(1 << USBS0)|(3 << UCSZ00);
    1620:	8e e8       	ldi	r24, 0x8E	; 142
    1622:	80 bd       	out	0x20, r24	; 32
    1624:	08 95       	ret

00001626 <USART_receive>:
}

unsigned char USART_receive(void){
    while(!(UCSR0A & (1 << RXC0)));
    1626:	5f 9b       	sbis	0x0b, 7	; 11
    1628:	fe cf       	rjmp	.-4      	; 0x1626 <USART_receive>
    return UDR0;
    162a:	8c b1       	in	r24, 0x0c	; 12
}
    162c:	08 95       	ret

0000162e <USART_send>:

void USART_send( unsigned char data){
    while(!(UCSR0A & (1 << UDRE0)));
    162e:	5d 9b       	sbis	0x0b, 5	; 11
    1630:	fe cf       	rjmp	.-4      	; 0x162e <USART_send>
    UDR0 = data;
    1632:	8c b9       	out	0x0c, r24	; 12
    1634:	08 95       	ret

00001636 <__subsf3>:
    1636:	50 58       	subi	r21, 0x80	; 128

00001638 <__addsf3>:
    1638:	bb 27       	eor	r27, r27
    163a:	aa 27       	eor	r26, r26
    163c:	0e 94 33 0b 	call	0x1666	; 0x1666 <__addsf3x>
    1640:	0c 94 46 0d 	jmp	0x1a8c	; 0x1a8c <__fp_round>
    1644:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <__fp_pscA>
    1648:	38 f0       	brcs	.+14     	; 0x1658 <__addsf3+0x20>
    164a:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <__fp_pscB>
    164e:	20 f0       	brcs	.+8      	; 0x1658 <__addsf3+0x20>
    1650:	39 f4       	brne	.+14     	; 0x1660 <__addsf3+0x28>
    1652:	9f 3f       	cpi	r25, 0xFF	; 255
    1654:	19 f4       	brne	.+6      	; 0x165c <__addsf3+0x24>
    1656:	26 f4       	brtc	.+8      	; 0x1660 <__addsf3+0x28>
    1658:	0c 94 0e 0d 	jmp	0x1a1c	; 0x1a1c <__fp_nan>
    165c:	0e f4       	brtc	.+2      	; 0x1660 <__addsf3+0x28>
    165e:	e0 95       	com	r30
    1660:	e7 fb       	bst	r30, 7
    1662:	0c 94 08 0d 	jmp	0x1a10	; 0x1a10 <__fp_inf>

00001666 <__addsf3x>:
    1666:	e9 2f       	mov	r30, r25
    1668:	0e 94 57 0d 	call	0x1aae	; 0x1aae <__fp_split3>
    166c:	58 f3       	brcs	.-42     	; 0x1644 <__addsf3+0xc>
    166e:	ba 17       	cp	r27, r26
    1670:	62 07       	cpc	r22, r18
    1672:	73 07       	cpc	r23, r19
    1674:	84 07       	cpc	r24, r20
    1676:	95 07       	cpc	r25, r21
    1678:	20 f0       	brcs	.+8      	; 0x1682 <__addsf3x+0x1c>
    167a:	79 f4       	brne	.+30     	; 0x169a <__addsf3x+0x34>
    167c:	a6 f5       	brtc	.+104    	; 0x16e6 <__addsf3x+0x80>
    167e:	0c 94 79 0d 	jmp	0x1af2	; 0x1af2 <__fp_zero>
    1682:	0e f4       	brtc	.+2      	; 0x1686 <__addsf3x+0x20>
    1684:	e0 95       	com	r30
    1686:	0b 2e       	mov	r0, r27
    1688:	ba 2f       	mov	r27, r26
    168a:	a0 2d       	mov	r26, r0
    168c:	0b 01       	movw	r0, r22
    168e:	b9 01       	movw	r22, r18
    1690:	90 01       	movw	r18, r0
    1692:	0c 01       	movw	r0, r24
    1694:	ca 01       	movw	r24, r20
    1696:	a0 01       	movw	r20, r0
    1698:	11 24       	eor	r1, r1
    169a:	ff 27       	eor	r31, r31
    169c:	59 1b       	sub	r21, r25
    169e:	99 f0       	breq	.+38     	; 0x16c6 <__addsf3x+0x60>
    16a0:	59 3f       	cpi	r21, 0xF9	; 249
    16a2:	50 f4       	brcc	.+20     	; 0x16b8 <__addsf3x+0x52>
    16a4:	50 3e       	cpi	r21, 0xE0	; 224
    16a6:	68 f1       	brcs	.+90     	; 0x1702 <__addsf3x+0x9c>
    16a8:	1a 16       	cp	r1, r26
    16aa:	f0 40       	sbci	r31, 0x00	; 0
    16ac:	a2 2f       	mov	r26, r18
    16ae:	23 2f       	mov	r18, r19
    16b0:	34 2f       	mov	r19, r20
    16b2:	44 27       	eor	r20, r20
    16b4:	58 5f       	subi	r21, 0xF8	; 248
    16b6:	f3 cf       	rjmp	.-26     	; 0x169e <__addsf3x+0x38>
    16b8:	46 95       	lsr	r20
    16ba:	37 95       	ror	r19
    16bc:	27 95       	ror	r18
    16be:	a7 95       	ror	r26
    16c0:	f0 40       	sbci	r31, 0x00	; 0
    16c2:	53 95       	inc	r21
    16c4:	c9 f7       	brne	.-14     	; 0x16b8 <__addsf3x+0x52>
    16c6:	7e f4       	brtc	.+30     	; 0x16e6 <__addsf3x+0x80>
    16c8:	1f 16       	cp	r1, r31
    16ca:	ba 0b       	sbc	r27, r26
    16cc:	62 0b       	sbc	r22, r18
    16ce:	73 0b       	sbc	r23, r19
    16d0:	84 0b       	sbc	r24, r20
    16d2:	ba f0       	brmi	.+46     	; 0x1702 <__addsf3x+0x9c>
    16d4:	91 50       	subi	r25, 0x01	; 1
    16d6:	a1 f0       	breq	.+40     	; 0x1700 <__addsf3x+0x9a>
    16d8:	ff 0f       	add	r31, r31
    16da:	bb 1f       	adc	r27, r27
    16dc:	66 1f       	adc	r22, r22
    16de:	77 1f       	adc	r23, r23
    16e0:	88 1f       	adc	r24, r24
    16e2:	c2 f7       	brpl	.-16     	; 0x16d4 <__addsf3x+0x6e>
    16e4:	0e c0       	rjmp	.+28     	; 0x1702 <__addsf3x+0x9c>
    16e6:	ba 0f       	add	r27, r26
    16e8:	62 1f       	adc	r22, r18
    16ea:	73 1f       	adc	r23, r19
    16ec:	84 1f       	adc	r24, r20
    16ee:	48 f4       	brcc	.+18     	; 0x1702 <__addsf3x+0x9c>
    16f0:	87 95       	ror	r24
    16f2:	77 95       	ror	r23
    16f4:	67 95       	ror	r22
    16f6:	b7 95       	ror	r27
    16f8:	f7 95       	ror	r31
    16fa:	9e 3f       	cpi	r25, 0xFE	; 254
    16fc:	08 f0       	brcs	.+2      	; 0x1700 <__addsf3x+0x9a>
    16fe:	b0 cf       	rjmp	.-160    	; 0x1660 <__addsf3+0x28>
    1700:	93 95       	inc	r25
    1702:	88 0f       	add	r24, r24
    1704:	08 f0       	brcs	.+2      	; 0x1708 <__addsf3x+0xa2>
    1706:	99 27       	eor	r25, r25
    1708:	ee 0f       	add	r30, r30
    170a:	97 95       	ror	r25
    170c:	87 95       	ror	r24
    170e:	08 95       	ret
    1710:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <__fp_pscA>
    1714:	60 f0       	brcs	.+24     	; 0x172e <__addsf3x+0xc8>
    1716:	80 e8       	ldi	r24, 0x80	; 128
    1718:	91 e0       	ldi	r25, 0x01	; 1
    171a:	09 f4       	brne	.+2      	; 0x171e <__addsf3x+0xb8>
    171c:	9e ef       	ldi	r25, 0xFE	; 254
    171e:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <__fp_pscB>
    1722:	28 f0       	brcs	.+10     	; 0x172e <__addsf3x+0xc8>
    1724:	40 e8       	ldi	r20, 0x80	; 128
    1726:	51 e0       	ldi	r21, 0x01	; 1
    1728:	71 f4       	brne	.+28     	; 0x1746 <atan2+0x10>
    172a:	5e ef       	ldi	r21, 0xFE	; 254
    172c:	0c c0       	rjmp	.+24     	; 0x1746 <atan2+0x10>
    172e:	0c 94 0e 0d 	jmp	0x1a1c	; 0x1a1c <__fp_nan>
    1732:	0c 94 79 0d 	jmp	0x1af2	; 0x1af2 <__fp_zero>

00001736 <atan2>:
    1736:	e9 2f       	mov	r30, r25
    1738:	e0 78       	andi	r30, 0x80	; 128
    173a:	0e 94 57 0d 	call	0x1aae	; 0x1aae <__fp_split3>
    173e:	40 f3       	brcs	.-48     	; 0x1710 <__addsf3x+0xaa>
    1740:	09 2e       	mov	r0, r25
    1742:	05 2a       	or	r0, r21
    1744:	b1 f3       	breq	.-20     	; 0x1732 <__addsf3x+0xcc>
    1746:	26 17       	cp	r18, r22
    1748:	37 07       	cpc	r19, r23
    174a:	48 07       	cpc	r20, r24
    174c:	59 07       	cpc	r21, r25
    174e:	38 f0       	brcs	.+14     	; 0x175e <atan2+0x28>
    1750:	0e 2e       	mov	r0, r30
    1752:	07 f8       	bld	r0, 7
    1754:	e0 25       	eor	r30, r0
    1756:	69 f0       	breq	.+26     	; 0x1772 <atan2+0x3c>
    1758:	e0 25       	eor	r30, r0
    175a:	e0 64       	ori	r30, 0x40	; 64
    175c:	0a c0       	rjmp	.+20     	; 0x1772 <atan2+0x3c>
    175e:	ef 63       	ori	r30, 0x3F	; 63
    1760:	07 f8       	bld	r0, 7
    1762:	00 94       	com	r0
    1764:	07 fa       	bst	r0, 7
    1766:	db 01       	movw	r26, r22
    1768:	b9 01       	movw	r22, r18
    176a:	9d 01       	movw	r18, r26
    176c:	dc 01       	movw	r26, r24
    176e:	ca 01       	movw	r24, r20
    1770:	ad 01       	movw	r20, r26
    1772:	ef 93       	push	r30
    1774:	0e 94 16 0c 	call	0x182c	; 0x182c <__divsf3_pse>
    1778:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <__fp_round>
    177c:	0e 94 cb 0b 	call	0x1796	; 0x1796 <atan>
    1780:	5f 91       	pop	r21
    1782:	55 23       	and	r21, r21
    1784:	39 f0       	breq	.+14     	; 0x1794 <atan2+0x5e>
    1786:	2b ed       	ldi	r18, 0xDB	; 219
    1788:	3f e0       	ldi	r19, 0x0F	; 15
    178a:	49 e4       	ldi	r20, 0x49	; 73
    178c:	50 fd       	sbrc	r21, 0
    178e:	49 ec       	ldi	r20, 0xC9	; 201
    1790:	0c 94 1c 0b 	jmp	0x1638	; 0x1638 <__addsf3>
    1794:	08 95       	ret

00001796 <atan>:
    1796:	df 93       	push	r29
    1798:	dd 27       	eor	r29, r29
    179a:	b9 2f       	mov	r27, r25
    179c:	bf 77       	andi	r27, 0x7F	; 127
    179e:	40 e8       	ldi	r20, 0x80	; 128
    17a0:	5f e3       	ldi	r21, 0x3F	; 63
    17a2:	16 16       	cp	r1, r22
    17a4:	17 06       	cpc	r1, r23
    17a6:	48 07       	cpc	r20, r24
    17a8:	5b 07       	cpc	r21, r27
    17aa:	18 f4       	brcc	.+6      	; 0x17b2 <atan+0x1c>
    17ac:	d9 2f       	mov	r29, r25
    17ae:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <inverse>
    17b2:	9f 93       	push	r25
    17b4:	8f 93       	push	r24
    17b6:	7f 93       	push	r23
    17b8:	6f 93       	push	r22
    17ba:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <square>
    17be:	e0 e7       	ldi	r30, 0x70	; 112
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <__fp_powser>
    17c6:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <__fp_round>
    17ca:	2f 91       	pop	r18
    17cc:	3f 91       	pop	r19
    17ce:	4f 91       	pop	r20
    17d0:	5f 91       	pop	r21
    17d2:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <__mulsf3x>
    17d6:	dd 23       	and	r29, r29
    17d8:	51 f0       	breq	.+20     	; 0x17ee <atan+0x58>
    17da:	90 58       	subi	r25, 0x80	; 128
    17dc:	a2 ea       	ldi	r26, 0xA2	; 162
    17de:	2a ed       	ldi	r18, 0xDA	; 218
    17e0:	3f e0       	ldi	r19, 0x0F	; 15
    17e2:	49 ec       	ldi	r20, 0xC9	; 201
    17e4:	5f e3       	ldi	r21, 0x3F	; 63
    17e6:	d0 78       	andi	r29, 0x80	; 128
    17e8:	5d 27       	eor	r21, r29
    17ea:	0e 94 33 0b 	call	0x1666	; 0x1666 <__addsf3x>
    17ee:	df 91       	pop	r29
    17f0:	0c 94 46 0d 	jmp	0x1a8c	; 0x1a8c <__fp_round>

000017f4 <__cmpsf2>:
    17f4:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <__fp_cmp>
    17f8:	08 f4       	brcc	.+2      	; 0x17fc <__cmpsf2+0x8>
    17fa:	81 e0       	ldi	r24, 0x01	; 1
    17fc:	08 95       	ret

000017fe <__divsf3>:
    17fe:	0e 94 13 0c 	call	0x1826	; 0x1826 <__divsf3x>
    1802:	0c 94 46 0d 	jmp	0x1a8c	; 0x1a8c <__fp_round>
    1806:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <__fp_pscB>
    180a:	58 f0       	brcs	.+22     	; 0x1822 <__divsf3+0x24>
    180c:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <__fp_pscA>
    1810:	40 f0       	brcs	.+16     	; 0x1822 <__divsf3+0x24>
    1812:	29 f4       	brne	.+10     	; 0x181e <__divsf3+0x20>
    1814:	5f 3f       	cpi	r21, 0xFF	; 255
    1816:	29 f0       	breq	.+10     	; 0x1822 <__divsf3+0x24>
    1818:	0c 94 08 0d 	jmp	0x1a10	; 0x1a10 <__fp_inf>
    181c:	51 11       	cpse	r21, r1
    181e:	0c 94 7a 0d 	jmp	0x1af4	; 0x1af4 <__fp_szero>
    1822:	0c 94 0e 0d 	jmp	0x1a1c	; 0x1a1c <__fp_nan>

00001826 <__divsf3x>:
    1826:	0e 94 57 0d 	call	0x1aae	; 0x1aae <__fp_split3>
    182a:	68 f3       	brcs	.-38     	; 0x1806 <__divsf3+0x8>

0000182c <__divsf3_pse>:
    182c:	99 23       	and	r25, r25
    182e:	b1 f3       	breq	.-20     	; 0x181c <__divsf3+0x1e>
    1830:	55 23       	and	r21, r21
    1832:	91 f3       	breq	.-28     	; 0x1818 <__divsf3+0x1a>
    1834:	95 1b       	sub	r25, r21
    1836:	55 0b       	sbc	r21, r21
    1838:	bb 27       	eor	r27, r27
    183a:	aa 27       	eor	r26, r26
    183c:	62 17       	cp	r22, r18
    183e:	73 07       	cpc	r23, r19
    1840:	84 07       	cpc	r24, r20
    1842:	38 f0       	brcs	.+14     	; 0x1852 <__divsf3_pse+0x26>
    1844:	9f 5f       	subi	r25, 0xFF	; 255
    1846:	5f 4f       	sbci	r21, 0xFF	; 255
    1848:	22 0f       	add	r18, r18
    184a:	33 1f       	adc	r19, r19
    184c:	44 1f       	adc	r20, r20
    184e:	aa 1f       	adc	r26, r26
    1850:	a9 f3       	breq	.-22     	; 0x183c <__divsf3_pse+0x10>
    1852:	35 d0       	rcall	.+106    	; 0x18be <__divsf3_pse+0x92>
    1854:	0e 2e       	mov	r0, r30
    1856:	3a f0       	brmi	.+14     	; 0x1866 <__divsf3_pse+0x3a>
    1858:	e0 e8       	ldi	r30, 0x80	; 128
    185a:	32 d0       	rcall	.+100    	; 0x18c0 <__divsf3_pse+0x94>
    185c:	91 50       	subi	r25, 0x01	; 1
    185e:	50 40       	sbci	r21, 0x00	; 0
    1860:	e6 95       	lsr	r30
    1862:	00 1c       	adc	r0, r0
    1864:	ca f7       	brpl	.-14     	; 0x1858 <__divsf3_pse+0x2c>
    1866:	2b d0       	rcall	.+86     	; 0x18be <__divsf3_pse+0x92>
    1868:	fe 2f       	mov	r31, r30
    186a:	29 d0       	rcall	.+82     	; 0x18be <__divsf3_pse+0x92>
    186c:	66 0f       	add	r22, r22
    186e:	77 1f       	adc	r23, r23
    1870:	88 1f       	adc	r24, r24
    1872:	bb 1f       	adc	r27, r27
    1874:	26 17       	cp	r18, r22
    1876:	37 07       	cpc	r19, r23
    1878:	48 07       	cpc	r20, r24
    187a:	ab 07       	cpc	r26, r27
    187c:	b0 e8       	ldi	r27, 0x80	; 128
    187e:	09 f0       	breq	.+2      	; 0x1882 <__divsf3_pse+0x56>
    1880:	bb 0b       	sbc	r27, r27
    1882:	80 2d       	mov	r24, r0
    1884:	bf 01       	movw	r22, r30
    1886:	ff 27       	eor	r31, r31
    1888:	93 58       	subi	r25, 0x83	; 131
    188a:	5f 4f       	sbci	r21, 0xFF	; 255
    188c:	3a f0       	brmi	.+14     	; 0x189c <__divsf3_pse+0x70>
    188e:	9e 3f       	cpi	r25, 0xFE	; 254
    1890:	51 05       	cpc	r21, r1
    1892:	78 f0       	brcs	.+30     	; 0x18b2 <__divsf3_pse+0x86>
    1894:	0c 94 08 0d 	jmp	0x1a10	; 0x1a10 <__fp_inf>
    1898:	0c 94 7a 0d 	jmp	0x1af4	; 0x1af4 <__fp_szero>
    189c:	5f 3f       	cpi	r21, 0xFF	; 255
    189e:	e4 f3       	brlt	.-8      	; 0x1898 <__divsf3_pse+0x6c>
    18a0:	98 3e       	cpi	r25, 0xE8	; 232
    18a2:	d4 f3       	brlt	.-12     	; 0x1898 <__divsf3_pse+0x6c>
    18a4:	86 95       	lsr	r24
    18a6:	77 95       	ror	r23
    18a8:	67 95       	ror	r22
    18aa:	b7 95       	ror	r27
    18ac:	f7 95       	ror	r31
    18ae:	9f 5f       	subi	r25, 0xFF	; 255
    18b0:	c9 f7       	brne	.-14     	; 0x18a4 <__divsf3_pse+0x78>
    18b2:	88 0f       	add	r24, r24
    18b4:	91 1d       	adc	r25, r1
    18b6:	96 95       	lsr	r25
    18b8:	87 95       	ror	r24
    18ba:	97 f9       	bld	r25, 7
    18bc:	08 95       	ret
    18be:	e1 e0       	ldi	r30, 0x01	; 1
    18c0:	66 0f       	add	r22, r22
    18c2:	77 1f       	adc	r23, r23
    18c4:	88 1f       	adc	r24, r24
    18c6:	bb 1f       	adc	r27, r27
    18c8:	62 17       	cp	r22, r18
    18ca:	73 07       	cpc	r23, r19
    18cc:	84 07       	cpc	r24, r20
    18ce:	ba 07       	cpc	r27, r26
    18d0:	20 f0       	brcs	.+8      	; 0x18da <__divsf3_pse+0xae>
    18d2:	62 1b       	sub	r22, r18
    18d4:	73 0b       	sbc	r23, r19
    18d6:	84 0b       	sbc	r24, r20
    18d8:	ba 0b       	sbc	r27, r26
    18da:	ee 1f       	adc	r30, r30
    18dc:	88 f7       	brcc	.-30     	; 0x18c0 <__divsf3_pse+0x94>
    18de:	e0 95       	com	r30
    18e0:	08 95       	ret

000018e2 <__fixsfsi>:
    18e2:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <__fixunssfsi>
    18e6:	68 94       	set
    18e8:	b1 11       	cpse	r27, r1
    18ea:	0c 94 7a 0d 	jmp	0x1af4	; 0x1af4 <__fp_szero>
    18ee:	08 95       	ret

000018f0 <__fixunssfsi>:
    18f0:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <__fp_splitA>
    18f4:	88 f0       	brcs	.+34     	; 0x1918 <__fixunssfsi+0x28>
    18f6:	9f 57       	subi	r25, 0x7F	; 127
    18f8:	98 f0       	brcs	.+38     	; 0x1920 <__fixunssfsi+0x30>
    18fa:	b9 2f       	mov	r27, r25
    18fc:	99 27       	eor	r25, r25
    18fe:	b7 51       	subi	r27, 0x17	; 23
    1900:	b0 f0       	brcs	.+44     	; 0x192e <__fixunssfsi+0x3e>
    1902:	e1 f0       	breq	.+56     	; 0x193c <__fixunssfsi+0x4c>
    1904:	66 0f       	add	r22, r22
    1906:	77 1f       	adc	r23, r23
    1908:	88 1f       	adc	r24, r24
    190a:	99 1f       	adc	r25, r25
    190c:	1a f0       	brmi	.+6      	; 0x1914 <__fixunssfsi+0x24>
    190e:	ba 95       	dec	r27
    1910:	c9 f7       	brne	.-14     	; 0x1904 <__fixunssfsi+0x14>
    1912:	14 c0       	rjmp	.+40     	; 0x193c <__fixunssfsi+0x4c>
    1914:	b1 30       	cpi	r27, 0x01	; 1
    1916:	91 f0       	breq	.+36     	; 0x193c <__fixunssfsi+0x4c>
    1918:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <__fp_zero>
    191c:	b1 e0       	ldi	r27, 0x01	; 1
    191e:	08 95       	ret
    1920:	0c 94 79 0d 	jmp	0x1af2	; 0x1af2 <__fp_zero>
    1924:	67 2f       	mov	r22, r23
    1926:	78 2f       	mov	r23, r24
    1928:	88 27       	eor	r24, r24
    192a:	b8 5f       	subi	r27, 0xF8	; 248
    192c:	39 f0       	breq	.+14     	; 0x193c <__fixunssfsi+0x4c>
    192e:	b9 3f       	cpi	r27, 0xF9	; 249
    1930:	cc f3       	brlt	.-14     	; 0x1924 <__fixunssfsi+0x34>
    1932:	86 95       	lsr	r24
    1934:	77 95       	ror	r23
    1936:	67 95       	ror	r22
    1938:	b3 95       	inc	r27
    193a:	d9 f7       	brne	.-10     	; 0x1932 <__fixunssfsi+0x42>
    193c:	3e f4       	brtc	.+14     	; 0x194c <__fixunssfsi+0x5c>
    193e:	90 95       	com	r25
    1940:	80 95       	com	r24
    1942:	70 95       	com	r23
    1944:	61 95       	neg	r22
    1946:	7f 4f       	sbci	r23, 0xFF	; 255
    1948:	8f 4f       	sbci	r24, 0xFF	; 255
    194a:	9f 4f       	sbci	r25, 0xFF	; 255
    194c:	08 95       	ret

0000194e <__floatunsisf>:
    194e:	e8 94       	clt
    1950:	09 c0       	rjmp	.+18     	; 0x1964 <__floatsisf+0x12>

00001952 <__floatsisf>:
    1952:	97 fb       	bst	r25, 7
    1954:	3e f4       	brtc	.+14     	; 0x1964 <__floatsisf+0x12>
    1956:	90 95       	com	r25
    1958:	80 95       	com	r24
    195a:	70 95       	com	r23
    195c:	61 95       	neg	r22
    195e:	7f 4f       	sbci	r23, 0xFF	; 255
    1960:	8f 4f       	sbci	r24, 0xFF	; 255
    1962:	9f 4f       	sbci	r25, 0xFF	; 255
    1964:	99 23       	and	r25, r25
    1966:	a9 f0       	breq	.+42     	; 0x1992 <__floatsisf+0x40>
    1968:	f9 2f       	mov	r31, r25
    196a:	96 e9       	ldi	r25, 0x96	; 150
    196c:	bb 27       	eor	r27, r27
    196e:	93 95       	inc	r25
    1970:	f6 95       	lsr	r31
    1972:	87 95       	ror	r24
    1974:	77 95       	ror	r23
    1976:	67 95       	ror	r22
    1978:	b7 95       	ror	r27
    197a:	f1 11       	cpse	r31, r1
    197c:	f8 cf       	rjmp	.-16     	; 0x196e <__floatsisf+0x1c>
    197e:	fa f4       	brpl	.+62     	; 0x19be <__floatsisf+0x6c>
    1980:	bb 0f       	add	r27, r27
    1982:	11 f4       	brne	.+4      	; 0x1988 <__floatsisf+0x36>
    1984:	60 ff       	sbrs	r22, 0
    1986:	1b c0       	rjmp	.+54     	; 0x19be <__floatsisf+0x6c>
    1988:	6f 5f       	subi	r22, 0xFF	; 255
    198a:	7f 4f       	sbci	r23, 0xFF	; 255
    198c:	8f 4f       	sbci	r24, 0xFF	; 255
    198e:	9f 4f       	sbci	r25, 0xFF	; 255
    1990:	16 c0       	rjmp	.+44     	; 0x19be <__floatsisf+0x6c>
    1992:	88 23       	and	r24, r24
    1994:	11 f0       	breq	.+4      	; 0x199a <__floatsisf+0x48>
    1996:	96 e9       	ldi	r25, 0x96	; 150
    1998:	11 c0       	rjmp	.+34     	; 0x19bc <__floatsisf+0x6a>
    199a:	77 23       	and	r23, r23
    199c:	21 f0       	breq	.+8      	; 0x19a6 <__floatsisf+0x54>
    199e:	9e e8       	ldi	r25, 0x8E	; 142
    19a0:	87 2f       	mov	r24, r23
    19a2:	76 2f       	mov	r23, r22
    19a4:	05 c0       	rjmp	.+10     	; 0x19b0 <__floatsisf+0x5e>
    19a6:	66 23       	and	r22, r22
    19a8:	71 f0       	breq	.+28     	; 0x19c6 <__floatsisf+0x74>
    19aa:	96 e8       	ldi	r25, 0x86	; 134
    19ac:	86 2f       	mov	r24, r22
    19ae:	70 e0       	ldi	r23, 0x00	; 0
    19b0:	60 e0       	ldi	r22, 0x00	; 0
    19b2:	2a f0       	brmi	.+10     	; 0x19be <__floatsisf+0x6c>
    19b4:	9a 95       	dec	r25
    19b6:	66 0f       	add	r22, r22
    19b8:	77 1f       	adc	r23, r23
    19ba:	88 1f       	adc	r24, r24
    19bc:	da f7       	brpl	.-10     	; 0x19b4 <__floatsisf+0x62>
    19be:	88 0f       	add	r24, r24
    19c0:	96 95       	lsr	r25
    19c2:	87 95       	ror	r24
    19c4:	97 f9       	bld	r25, 7
    19c6:	08 95       	ret

000019c8 <__fp_cmp>:
    19c8:	99 0f       	add	r25, r25
    19ca:	00 08       	sbc	r0, r0
    19cc:	55 0f       	add	r21, r21
    19ce:	aa 0b       	sbc	r26, r26
    19d0:	e0 e8       	ldi	r30, 0x80	; 128
    19d2:	fe ef       	ldi	r31, 0xFE	; 254
    19d4:	16 16       	cp	r1, r22
    19d6:	17 06       	cpc	r1, r23
    19d8:	e8 07       	cpc	r30, r24
    19da:	f9 07       	cpc	r31, r25
    19dc:	c0 f0       	brcs	.+48     	; 0x1a0e <__fp_cmp+0x46>
    19de:	12 16       	cp	r1, r18
    19e0:	13 06       	cpc	r1, r19
    19e2:	e4 07       	cpc	r30, r20
    19e4:	f5 07       	cpc	r31, r21
    19e6:	98 f0       	brcs	.+38     	; 0x1a0e <__fp_cmp+0x46>
    19e8:	62 1b       	sub	r22, r18
    19ea:	73 0b       	sbc	r23, r19
    19ec:	84 0b       	sbc	r24, r20
    19ee:	95 0b       	sbc	r25, r21
    19f0:	39 f4       	brne	.+14     	; 0x1a00 <__fp_cmp+0x38>
    19f2:	0a 26       	eor	r0, r26
    19f4:	61 f0       	breq	.+24     	; 0x1a0e <__fp_cmp+0x46>
    19f6:	23 2b       	or	r18, r19
    19f8:	24 2b       	or	r18, r20
    19fa:	25 2b       	or	r18, r21
    19fc:	21 f4       	brne	.+8      	; 0x1a06 <__fp_cmp+0x3e>
    19fe:	08 95       	ret
    1a00:	0a 26       	eor	r0, r26
    1a02:	09 f4       	brne	.+2      	; 0x1a06 <__fp_cmp+0x3e>
    1a04:	a1 40       	sbci	r26, 0x01	; 1
    1a06:	a6 95       	lsr	r26
    1a08:	8f ef       	ldi	r24, 0xFF	; 255
    1a0a:	81 1d       	adc	r24, r1
    1a0c:	81 1d       	adc	r24, r1
    1a0e:	08 95       	ret

00001a10 <__fp_inf>:
    1a10:	97 f9       	bld	r25, 7
    1a12:	9f 67       	ori	r25, 0x7F	; 127
    1a14:	80 e8       	ldi	r24, 0x80	; 128
    1a16:	70 e0       	ldi	r23, 0x00	; 0
    1a18:	60 e0       	ldi	r22, 0x00	; 0
    1a1a:	08 95       	ret

00001a1c <__fp_nan>:
    1a1c:	9f ef       	ldi	r25, 0xFF	; 255
    1a1e:	80 ec       	ldi	r24, 0xC0	; 192
    1a20:	08 95       	ret

00001a22 <__fp_powser>:
    1a22:	df 93       	push	r29
    1a24:	cf 93       	push	r28
    1a26:	1f 93       	push	r17
    1a28:	0f 93       	push	r16
    1a2a:	ff 92       	push	r15
    1a2c:	ef 92       	push	r14
    1a2e:	df 92       	push	r13
    1a30:	7b 01       	movw	r14, r22
    1a32:	8c 01       	movw	r16, r24
    1a34:	68 94       	set
    1a36:	06 c0       	rjmp	.+12     	; 0x1a44 <__fp_powser+0x22>
    1a38:	da 2e       	mov	r13, r26
    1a3a:	ef 01       	movw	r28, r30
    1a3c:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <__mulsf3x>
    1a40:	fe 01       	movw	r30, r28
    1a42:	e8 94       	clt
    1a44:	a5 91       	lpm	r26, Z+
    1a46:	25 91       	lpm	r18, Z+
    1a48:	35 91       	lpm	r19, Z+
    1a4a:	45 91       	lpm	r20, Z+
    1a4c:	55 91       	lpm	r21, Z+
    1a4e:	a6 f3       	brts	.-24     	; 0x1a38 <__fp_powser+0x16>
    1a50:	ef 01       	movw	r28, r30
    1a52:	0e 94 33 0b 	call	0x1666	; 0x1666 <__addsf3x>
    1a56:	fe 01       	movw	r30, r28
    1a58:	97 01       	movw	r18, r14
    1a5a:	a8 01       	movw	r20, r16
    1a5c:	da 94       	dec	r13
    1a5e:	69 f7       	brne	.-38     	; 0x1a3a <__fp_powser+0x18>
    1a60:	df 90       	pop	r13
    1a62:	ef 90       	pop	r14
    1a64:	ff 90       	pop	r15
    1a66:	0f 91       	pop	r16
    1a68:	1f 91       	pop	r17
    1a6a:	cf 91       	pop	r28
    1a6c:	df 91       	pop	r29
    1a6e:	08 95       	ret

00001a70 <__fp_pscA>:
    1a70:	00 24       	eor	r0, r0
    1a72:	0a 94       	dec	r0
    1a74:	16 16       	cp	r1, r22
    1a76:	17 06       	cpc	r1, r23
    1a78:	18 06       	cpc	r1, r24
    1a7a:	09 06       	cpc	r0, r25
    1a7c:	08 95       	ret

00001a7e <__fp_pscB>:
    1a7e:	00 24       	eor	r0, r0
    1a80:	0a 94       	dec	r0
    1a82:	12 16       	cp	r1, r18
    1a84:	13 06       	cpc	r1, r19
    1a86:	14 06       	cpc	r1, r20
    1a88:	05 06       	cpc	r0, r21
    1a8a:	08 95       	ret

00001a8c <__fp_round>:
    1a8c:	09 2e       	mov	r0, r25
    1a8e:	03 94       	inc	r0
    1a90:	00 0c       	add	r0, r0
    1a92:	11 f4       	brne	.+4      	; 0x1a98 <__fp_round+0xc>
    1a94:	88 23       	and	r24, r24
    1a96:	52 f0       	brmi	.+20     	; 0x1aac <__fp_round+0x20>
    1a98:	bb 0f       	add	r27, r27
    1a9a:	40 f4       	brcc	.+16     	; 0x1aac <__fp_round+0x20>
    1a9c:	bf 2b       	or	r27, r31
    1a9e:	11 f4       	brne	.+4      	; 0x1aa4 <__fp_round+0x18>
    1aa0:	60 ff       	sbrs	r22, 0
    1aa2:	04 c0       	rjmp	.+8      	; 0x1aac <__fp_round+0x20>
    1aa4:	6f 5f       	subi	r22, 0xFF	; 255
    1aa6:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa8:	8f 4f       	sbci	r24, 0xFF	; 255
    1aaa:	9f 4f       	sbci	r25, 0xFF	; 255
    1aac:	08 95       	ret

00001aae <__fp_split3>:
    1aae:	57 fd       	sbrc	r21, 7
    1ab0:	90 58       	subi	r25, 0x80	; 128
    1ab2:	44 0f       	add	r20, r20
    1ab4:	55 1f       	adc	r21, r21
    1ab6:	59 f0       	breq	.+22     	; 0x1ace <__fp_splitA+0x10>
    1ab8:	5f 3f       	cpi	r21, 0xFF	; 255
    1aba:	71 f0       	breq	.+28     	; 0x1ad8 <__fp_splitA+0x1a>
    1abc:	47 95       	ror	r20

00001abe <__fp_splitA>:
    1abe:	88 0f       	add	r24, r24
    1ac0:	97 fb       	bst	r25, 7
    1ac2:	99 1f       	adc	r25, r25
    1ac4:	61 f0       	breq	.+24     	; 0x1ade <__fp_splitA+0x20>
    1ac6:	9f 3f       	cpi	r25, 0xFF	; 255
    1ac8:	79 f0       	breq	.+30     	; 0x1ae8 <__fp_splitA+0x2a>
    1aca:	87 95       	ror	r24
    1acc:	08 95       	ret
    1ace:	12 16       	cp	r1, r18
    1ad0:	13 06       	cpc	r1, r19
    1ad2:	14 06       	cpc	r1, r20
    1ad4:	55 1f       	adc	r21, r21
    1ad6:	f2 cf       	rjmp	.-28     	; 0x1abc <__fp_split3+0xe>
    1ad8:	46 95       	lsr	r20
    1ada:	f1 df       	rcall	.-30     	; 0x1abe <__fp_splitA>
    1adc:	08 c0       	rjmp	.+16     	; 0x1aee <__fp_splitA+0x30>
    1ade:	16 16       	cp	r1, r22
    1ae0:	17 06       	cpc	r1, r23
    1ae2:	18 06       	cpc	r1, r24
    1ae4:	99 1f       	adc	r25, r25
    1ae6:	f1 cf       	rjmp	.-30     	; 0x1aca <__fp_splitA+0xc>
    1ae8:	86 95       	lsr	r24
    1aea:	71 05       	cpc	r23, r1
    1aec:	61 05       	cpc	r22, r1
    1aee:	08 94       	sec
    1af0:	08 95       	ret

00001af2 <__fp_zero>:
    1af2:	e8 94       	clt

00001af4 <__fp_szero>:
    1af4:	bb 27       	eor	r27, r27
    1af6:	66 27       	eor	r22, r22
    1af8:	77 27       	eor	r23, r23
    1afa:	cb 01       	movw	r24, r22
    1afc:	97 f9       	bld	r25, 7
    1afe:	08 95       	ret

00001b00 <__gesf2>:
    1b00:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <__fp_cmp>
    1b04:	08 f4       	brcc	.+2      	; 0x1b08 <__gesf2+0x8>
    1b06:	8f ef       	ldi	r24, 0xFF	; 255
    1b08:	08 95       	ret

00001b0a <inverse>:
    1b0a:	9b 01       	movw	r18, r22
    1b0c:	ac 01       	movw	r20, r24
    1b0e:	60 e0       	ldi	r22, 0x00	; 0
    1b10:	70 e0       	ldi	r23, 0x00	; 0
    1b12:	80 e8       	ldi	r24, 0x80	; 128
    1b14:	9f e3       	ldi	r25, 0x3F	; 63
    1b16:	0c 94 ff 0b 	jmp	0x17fe	; 0x17fe <__divsf3>

00001b1a <__mulsf3>:
    1b1a:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <__mulsf3x>
    1b1e:	0c 94 46 0d 	jmp	0x1a8c	; 0x1a8c <__fp_round>
    1b22:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <__fp_pscA>
    1b26:	38 f0       	brcs	.+14     	; 0x1b36 <__mulsf3+0x1c>
    1b28:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <__fp_pscB>
    1b2c:	20 f0       	brcs	.+8      	; 0x1b36 <__mulsf3+0x1c>
    1b2e:	95 23       	and	r25, r21
    1b30:	11 f0       	breq	.+4      	; 0x1b36 <__mulsf3+0x1c>
    1b32:	0c 94 08 0d 	jmp	0x1a10	; 0x1a10 <__fp_inf>
    1b36:	0c 94 0e 0d 	jmp	0x1a1c	; 0x1a1c <__fp_nan>
    1b3a:	11 24       	eor	r1, r1
    1b3c:	0c 94 7a 0d 	jmp	0x1af4	; 0x1af4 <__fp_szero>

00001b40 <__mulsf3x>:
    1b40:	0e 94 57 0d 	call	0x1aae	; 0x1aae <__fp_split3>
    1b44:	70 f3       	brcs	.-36     	; 0x1b22 <__mulsf3+0x8>

00001b46 <__mulsf3_pse>:
    1b46:	95 9f       	mul	r25, r21
    1b48:	c1 f3       	breq	.-16     	; 0x1b3a <__mulsf3+0x20>
    1b4a:	95 0f       	add	r25, r21
    1b4c:	50 e0       	ldi	r21, 0x00	; 0
    1b4e:	55 1f       	adc	r21, r21
    1b50:	62 9f       	mul	r22, r18
    1b52:	f0 01       	movw	r30, r0
    1b54:	72 9f       	mul	r23, r18
    1b56:	bb 27       	eor	r27, r27
    1b58:	f0 0d       	add	r31, r0
    1b5a:	b1 1d       	adc	r27, r1
    1b5c:	63 9f       	mul	r22, r19
    1b5e:	aa 27       	eor	r26, r26
    1b60:	f0 0d       	add	r31, r0
    1b62:	b1 1d       	adc	r27, r1
    1b64:	aa 1f       	adc	r26, r26
    1b66:	64 9f       	mul	r22, r20
    1b68:	66 27       	eor	r22, r22
    1b6a:	b0 0d       	add	r27, r0
    1b6c:	a1 1d       	adc	r26, r1
    1b6e:	66 1f       	adc	r22, r22
    1b70:	82 9f       	mul	r24, r18
    1b72:	22 27       	eor	r18, r18
    1b74:	b0 0d       	add	r27, r0
    1b76:	a1 1d       	adc	r26, r1
    1b78:	62 1f       	adc	r22, r18
    1b7a:	73 9f       	mul	r23, r19
    1b7c:	b0 0d       	add	r27, r0
    1b7e:	a1 1d       	adc	r26, r1
    1b80:	62 1f       	adc	r22, r18
    1b82:	83 9f       	mul	r24, r19
    1b84:	a0 0d       	add	r26, r0
    1b86:	61 1d       	adc	r22, r1
    1b88:	22 1f       	adc	r18, r18
    1b8a:	74 9f       	mul	r23, r20
    1b8c:	33 27       	eor	r19, r19
    1b8e:	a0 0d       	add	r26, r0
    1b90:	61 1d       	adc	r22, r1
    1b92:	23 1f       	adc	r18, r19
    1b94:	84 9f       	mul	r24, r20
    1b96:	60 0d       	add	r22, r0
    1b98:	21 1d       	adc	r18, r1
    1b9a:	82 2f       	mov	r24, r18
    1b9c:	76 2f       	mov	r23, r22
    1b9e:	6a 2f       	mov	r22, r26
    1ba0:	11 24       	eor	r1, r1
    1ba2:	9f 57       	subi	r25, 0x7F	; 127
    1ba4:	50 40       	sbci	r21, 0x00	; 0
    1ba6:	9a f0       	brmi	.+38     	; 0x1bce <__mulsf3_pse+0x88>
    1ba8:	f1 f0       	breq	.+60     	; 0x1be6 <__mulsf3_pse+0xa0>
    1baa:	88 23       	and	r24, r24
    1bac:	4a f0       	brmi	.+18     	; 0x1bc0 <__mulsf3_pse+0x7a>
    1bae:	ee 0f       	add	r30, r30
    1bb0:	ff 1f       	adc	r31, r31
    1bb2:	bb 1f       	adc	r27, r27
    1bb4:	66 1f       	adc	r22, r22
    1bb6:	77 1f       	adc	r23, r23
    1bb8:	88 1f       	adc	r24, r24
    1bba:	91 50       	subi	r25, 0x01	; 1
    1bbc:	50 40       	sbci	r21, 0x00	; 0
    1bbe:	a9 f7       	brne	.-22     	; 0x1baa <__mulsf3_pse+0x64>
    1bc0:	9e 3f       	cpi	r25, 0xFE	; 254
    1bc2:	51 05       	cpc	r21, r1
    1bc4:	80 f0       	brcs	.+32     	; 0x1be6 <__mulsf3_pse+0xa0>
    1bc6:	0c 94 08 0d 	jmp	0x1a10	; 0x1a10 <__fp_inf>
    1bca:	0c 94 7a 0d 	jmp	0x1af4	; 0x1af4 <__fp_szero>
    1bce:	5f 3f       	cpi	r21, 0xFF	; 255
    1bd0:	e4 f3       	brlt	.-8      	; 0x1bca <__mulsf3_pse+0x84>
    1bd2:	98 3e       	cpi	r25, 0xE8	; 232
    1bd4:	d4 f3       	brlt	.-12     	; 0x1bca <__mulsf3_pse+0x84>
    1bd6:	86 95       	lsr	r24
    1bd8:	77 95       	ror	r23
    1bda:	67 95       	ror	r22
    1bdc:	b7 95       	ror	r27
    1bde:	f7 95       	ror	r31
    1be0:	e7 95       	ror	r30
    1be2:	9f 5f       	subi	r25, 0xFF	; 255
    1be4:	c1 f7       	brne	.-16     	; 0x1bd6 <__mulsf3_pse+0x90>
    1be6:	fe 2b       	or	r31, r30
    1be8:	88 0f       	add	r24, r24
    1bea:	91 1d       	adc	r25, r1
    1bec:	96 95       	lsr	r25
    1bee:	87 95       	ror	r24
    1bf0:	97 f9       	bld	r25, 7
    1bf2:	08 95       	ret

00001bf4 <square>:
    1bf4:	9b 01       	movw	r18, r22
    1bf6:	ac 01       	movw	r20, r24
    1bf8:	0c 94 8d 0d 	jmp	0x1b1a	; 0x1b1a <__mulsf3>

00001bfc <__divmodhi4>:
    1bfc:	97 fb       	bst	r25, 7
    1bfe:	07 2e       	mov	r0, r23
    1c00:	16 f4       	brtc	.+4      	; 0x1c06 <__divmodhi4+0xa>
    1c02:	00 94       	com	r0
    1c04:	07 d0       	rcall	.+14     	; 0x1c14 <__divmodhi4_neg1>
    1c06:	77 fd       	sbrc	r23, 7
    1c08:	09 d0       	rcall	.+18     	; 0x1c1c <__divmodhi4_neg2>
    1c0a:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <__udivmodhi4>
    1c0e:	07 fc       	sbrc	r0, 7
    1c10:	05 d0       	rcall	.+10     	; 0x1c1c <__divmodhi4_neg2>
    1c12:	3e f4       	brtc	.+14     	; 0x1c22 <__divmodhi4_exit>

00001c14 <__divmodhi4_neg1>:
    1c14:	90 95       	com	r25
    1c16:	81 95       	neg	r24
    1c18:	9f 4f       	sbci	r25, 0xFF	; 255
    1c1a:	08 95       	ret

00001c1c <__divmodhi4_neg2>:
    1c1c:	70 95       	com	r23
    1c1e:	61 95       	neg	r22
    1c20:	7f 4f       	sbci	r23, 0xFF	; 255

00001c22 <__divmodhi4_exit>:
    1c22:	08 95       	ret

00001c24 <__udivmodhi4>:
    1c24:	aa 1b       	sub	r26, r26
    1c26:	bb 1b       	sub	r27, r27
    1c28:	51 e1       	ldi	r21, 0x11	; 17
    1c2a:	07 c0       	rjmp	.+14     	; 0x1c3a <__udivmodhi4_ep>

00001c2c <__udivmodhi4_loop>:
    1c2c:	aa 1f       	adc	r26, r26
    1c2e:	bb 1f       	adc	r27, r27
    1c30:	a6 17       	cp	r26, r22
    1c32:	b7 07       	cpc	r27, r23
    1c34:	10 f0       	brcs	.+4      	; 0x1c3a <__udivmodhi4_ep>
    1c36:	a6 1b       	sub	r26, r22
    1c38:	b7 0b       	sbc	r27, r23

00001c3a <__udivmodhi4_ep>:
    1c3a:	88 1f       	adc	r24, r24
    1c3c:	99 1f       	adc	r25, r25
    1c3e:	5a 95       	dec	r21
    1c40:	a9 f7       	brne	.-22     	; 0x1c2c <__udivmodhi4_loop>
    1c42:	80 95       	com	r24
    1c44:	90 95       	com	r25
    1c46:	bc 01       	movw	r22, r24
    1c48:	cd 01       	movw	r24, r26
    1c4a:	08 95       	ret

00001c4c <strcpy>:
    1c4c:	fb 01       	movw	r30, r22
    1c4e:	dc 01       	movw	r26, r24
    1c50:	01 90       	ld	r0, Z+
    1c52:	0d 92       	st	X+, r0
    1c54:	00 20       	and	r0, r0
    1c56:	e1 f7       	brne	.-8      	; 0x1c50 <strcpy+0x4>
    1c58:	08 95       	ret

00001c5a <__itoa_ncheck>:
    1c5a:	bb 27       	eor	r27, r27
    1c5c:	4a 30       	cpi	r20, 0x0A	; 10
    1c5e:	31 f4       	brne	.+12     	; 0x1c6c <__itoa_ncheck+0x12>
    1c60:	99 23       	and	r25, r25
    1c62:	22 f4       	brpl	.+8      	; 0x1c6c <__itoa_ncheck+0x12>
    1c64:	bd e2       	ldi	r27, 0x2D	; 45
    1c66:	90 95       	com	r25
    1c68:	81 95       	neg	r24
    1c6a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c6c:	0c 94 39 0e 	jmp	0x1c72	; 0x1c72 <__utoa_common>

00001c70 <__utoa_ncheck>:
    1c70:	bb 27       	eor	r27, r27

00001c72 <__utoa_common>:
    1c72:	fb 01       	movw	r30, r22
    1c74:	55 27       	eor	r21, r21
    1c76:	aa 27       	eor	r26, r26
    1c78:	88 0f       	add	r24, r24
    1c7a:	99 1f       	adc	r25, r25
    1c7c:	aa 1f       	adc	r26, r26
    1c7e:	a4 17       	cp	r26, r20
    1c80:	10 f0       	brcs	.+4      	; 0x1c86 <__utoa_common+0x14>
    1c82:	a4 1b       	sub	r26, r20
    1c84:	83 95       	inc	r24
    1c86:	50 51       	subi	r21, 0x10	; 16
    1c88:	b9 f7       	brne	.-18     	; 0x1c78 <__utoa_common+0x6>
    1c8a:	a0 5d       	subi	r26, 0xD0	; 208
    1c8c:	aa 33       	cpi	r26, 0x3A	; 58
    1c8e:	08 f0       	brcs	.+2      	; 0x1c92 <__utoa_common+0x20>
    1c90:	a9 5d       	subi	r26, 0xD9	; 217
    1c92:	a1 93       	st	Z+, r26
    1c94:	00 97       	sbiw	r24, 0x00	; 0
    1c96:	79 f7       	brne	.-34     	; 0x1c76 <__utoa_common+0x4>
    1c98:	b1 11       	cpse	r27, r1
    1c9a:	b1 93       	st	Z+, r27
    1c9c:	11 92       	st	Z+, r1
    1c9e:	cb 01       	movw	r24, r22
    1ca0:	0c 94 1e 12 	jmp	0x243c	; 0x243c <strrev>

00001ca4 <fdevopen>:
    1ca4:	0f 93       	push	r16
    1ca6:	1f 93       	push	r17
    1ca8:	cf 93       	push	r28
    1caa:	df 93       	push	r29
    1cac:	00 97       	sbiw	r24, 0x00	; 0
    1cae:	31 f4       	brne	.+12     	; 0x1cbc <fdevopen+0x18>
    1cb0:	61 15       	cp	r22, r1
    1cb2:	71 05       	cpc	r23, r1
    1cb4:	19 f4       	brne	.+6      	; 0x1cbc <fdevopen+0x18>
    1cb6:	80 e0       	ldi	r24, 0x00	; 0
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	3a c0       	rjmp	.+116    	; 0x1d30 <fdevopen+0x8c>
    1cbc:	8b 01       	movw	r16, r22
    1cbe:	ec 01       	movw	r28, r24
    1cc0:	6e e0       	ldi	r22, 0x0E	; 14
    1cc2:	70 e0       	ldi	r23, 0x00	; 0
    1cc4:	81 e0       	ldi	r24, 0x01	; 1
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	0e 94 c4 10 	call	0x2188	; 0x2188 <calloc>
    1ccc:	fc 01       	movw	r30, r24
    1cce:	89 2b       	or	r24, r25
    1cd0:	91 f3       	breq	.-28     	; 0x1cb6 <fdevopen+0x12>
    1cd2:	80 e8       	ldi	r24, 0x80	; 128
    1cd4:	83 83       	std	Z+3, r24	; 0x03
    1cd6:	01 15       	cp	r16, r1
    1cd8:	11 05       	cpc	r17, r1
    1cda:	71 f0       	breq	.+28     	; 0x1cf8 <fdevopen+0x54>
    1cdc:	13 87       	std	Z+11, r17	; 0x0b
    1cde:	02 87       	std	Z+10, r16	; 0x0a
    1ce0:	81 e8       	ldi	r24, 0x81	; 129
    1ce2:	83 83       	std	Z+3, r24	; 0x03
    1ce4:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <__iob>
    1ce8:	90 91 51 03 	lds	r25, 0x0351	; 0x800351 <__iob+0x1>
    1cec:	89 2b       	or	r24, r25
    1cee:	21 f4       	brne	.+8      	; 0x1cf8 <fdevopen+0x54>
    1cf0:	f0 93 51 03 	sts	0x0351, r31	; 0x800351 <__iob+0x1>
    1cf4:	e0 93 50 03 	sts	0x0350, r30	; 0x800350 <__iob>
    1cf8:	20 97       	sbiw	r28, 0x00	; 0
    1cfa:	c9 f0       	breq	.+50     	; 0x1d2e <fdevopen+0x8a>
    1cfc:	d1 87       	std	Z+9, r29	; 0x09
    1cfe:	c0 87       	std	Z+8, r28	; 0x08
    1d00:	83 81       	ldd	r24, Z+3	; 0x03
    1d02:	82 60       	ori	r24, 0x02	; 2
    1d04:	83 83       	std	Z+3, r24	; 0x03
    1d06:	80 91 52 03 	lds	r24, 0x0352	; 0x800352 <__iob+0x2>
    1d0a:	90 91 53 03 	lds	r25, 0x0353	; 0x800353 <__iob+0x3>
    1d0e:	89 2b       	or	r24, r25
    1d10:	71 f4       	brne	.+28     	; 0x1d2e <fdevopen+0x8a>
    1d12:	f0 93 53 03 	sts	0x0353, r31	; 0x800353 <__iob+0x3>
    1d16:	e0 93 52 03 	sts	0x0352, r30	; 0x800352 <__iob+0x2>
    1d1a:	80 91 54 03 	lds	r24, 0x0354	; 0x800354 <__iob+0x4>
    1d1e:	90 91 55 03 	lds	r25, 0x0355	; 0x800355 <__iob+0x5>
    1d22:	89 2b       	or	r24, r25
    1d24:	21 f4       	brne	.+8      	; 0x1d2e <fdevopen+0x8a>
    1d26:	f0 93 55 03 	sts	0x0355, r31	; 0x800355 <__iob+0x5>
    1d2a:	e0 93 54 03 	sts	0x0354, r30	; 0x800354 <__iob+0x4>
    1d2e:	cf 01       	movw	r24, r30
    1d30:	df 91       	pop	r29
    1d32:	cf 91       	pop	r28
    1d34:	1f 91       	pop	r17
    1d36:	0f 91       	pop	r16
    1d38:	08 95       	ret

00001d3a <printf>:
    1d3a:	a0 e0       	ldi	r26, 0x00	; 0
    1d3c:	b0 e0       	ldi	r27, 0x00	; 0
    1d3e:	e3 ea       	ldi	r30, 0xA3	; 163
    1d40:	fe e0       	ldi	r31, 0x0E	; 14
    1d42:	0c 94 d8 12 	jmp	0x25b0	; 0x25b0 <__prologue_saves__+0x20>
    1d46:	ae 01       	movw	r20, r28
    1d48:	4b 5f       	subi	r20, 0xFB	; 251
    1d4a:	5f 4f       	sbci	r21, 0xFF	; 255
    1d4c:	fa 01       	movw	r30, r20
    1d4e:	61 91       	ld	r22, Z+
    1d50:	71 91       	ld	r23, Z+
    1d52:	af 01       	movw	r20, r30
    1d54:	80 91 52 03 	lds	r24, 0x0352	; 0x800352 <__iob+0x2>
    1d58:	90 91 53 03 	lds	r25, 0x0353	; 0x800353 <__iob+0x3>
    1d5c:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <vfprintf>
    1d60:	e2 e0       	ldi	r30, 0x02	; 2
    1d62:	0c 94 f4 12 	jmp	0x25e8	; 0x25e8 <__epilogue_restores__+0x20>

00001d66 <puts>:
    1d66:	0f 93       	push	r16
    1d68:	1f 93       	push	r17
    1d6a:	cf 93       	push	r28
    1d6c:	df 93       	push	r29
    1d6e:	e0 91 52 03 	lds	r30, 0x0352	; 0x800352 <__iob+0x2>
    1d72:	f0 91 53 03 	lds	r31, 0x0353	; 0x800353 <__iob+0x3>
    1d76:	23 81       	ldd	r18, Z+3	; 0x03
    1d78:	21 ff       	sbrs	r18, 1
    1d7a:	1b c0       	rjmp	.+54     	; 0x1db2 <puts+0x4c>
    1d7c:	8c 01       	movw	r16, r24
    1d7e:	d0 e0       	ldi	r29, 0x00	; 0
    1d80:	c0 e0       	ldi	r28, 0x00	; 0
    1d82:	f8 01       	movw	r30, r16
    1d84:	81 91       	ld	r24, Z+
    1d86:	8f 01       	movw	r16, r30
    1d88:	60 91 52 03 	lds	r22, 0x0352	; 0x800352 <__iob+0x2>
    1d8c:	70 91 53 03 	lds	r23, 0x0353	; 0x800353 <__iob+0x3>
    1d90:	db 01       	movw	r26, r22
    1d92:	18 96       	adiw	r26, 0x08	; 8
    1d94:	ed 91       	ld	r30, X+
    1d96:	fc 91       	ld	r31, X
    1d98:	19 97       	sbiw	r26, 0x09	; 9
    1d9a:	88 23       	and	r24, r24
    1d9c:	31 f0       	breq	.+12     	; 0x1daa <puts+0x44>
    1d9e:	09 95       	icall
    1da0:	89 2b       	or	r24, r25
    1da2:	79 f3       	breq	.-34     	; 0x1d82 <puts+0x1c>
    1da4:	df ef       	ldi	r29, 0xFF	; 255
    1da6:	cf ef       	ldi	r28, 0xFF	; 255
    1da8:	ec cf       	rjmp	.-40     	; 0x1d82 <puts+0x1c>
    1daa:	8a e0       	ldi	r24, 0x0A	; 10
    1dac:	09 95       	icall
    1dae:	89 2b       	or	r24, r25
    1db0:	19 f0       	breq	.+6      	; 0x1db8 <puts+0x52>
    1db2:	8f ef       	ldi	r24, 0xFF	; 255
    1db4:	9f ef       	ldi	r25, 0xFF	; 255
    1db6:	02 c0       	rjmp	.+4      	; 0x1dbc <puts+0x56>
    1db8:	8d 2f       	mov	r24, r29
    1dba:	9c 2f       	mov	r25, r28
    1dbc:	df 91       	pop	r29
    1dbe:	cf 91       	pop	r28
    1dc0:	1f 91       	pop	r17
    1dc2:	0f 91       	pop	r16
    1dc4:	08 95       	ret

00001dc6 <vfprintf>:
    1dc6:	ab e0       	ldi	r26, 0x0B	; 11
    1dc8:	b0 e0       	ldi	r27, 0x00	; 0
    1dca:	e9 ee       	ldi	r30, 0xE9	; 233
    1dcc:	fe e0       	ldi	r31, 0x0E	; 14
    1dce:	0c 94 c8 12 	jmp	0x2590	; 0x2590 <__prologue_saves__>
    1dd2:	6c 01       	movw	r12, r24
    1dd4:	7b 01       	movw	r14, r22
    1dd6:	8a 01       	movw	r16, r20
    1dd8:	fc 01       	movw	r30, r24
    1dda:	17 82       	std	Z+7, r1	; 0x07
    1ddc:	16 82       	std	Z+6, r1	; 0x06
    1dde:	83 81       	ldd	r24, Z+3	; 0x03
    1de0:	81 ff       	sbrs	r24, 1
    1de2:	cc c1       	rjmp	.+920    	; 0x217c <vfprintf+0x3b6>
    1de4:	ce 01       	movw	r24, r28
    1de6:	01 96       	adiw	r24, 0x01	; 1
    1de8:	3c 01       	movw	r6, r24
    1dea:	f6 01       	movw	r30, r12
    1dec:	93 81       	ldd	r25, Z+3	; 0x03
    1dee:	f7 01       	movw	r30, r14
    1df0:	93 fd       	sbrc	r25, 3
    1df2:	85 91       	lpm	r24, Z+
    1df4:	93 ff       	sbrs	r25, 3
    1df6:	81 91       	ld	r24, Z+
    1df8:	7f 01       	movw	r14, r30
    1dfa:	88 23       	and	r24, r24
    1dfc:	09 f4       	brne	.+2      	; 0x1e00 <vfprintf+0x3a>
    1dfe:	ba c1       	rjmp	.+884    	; 0x2174 <vfprintf+0x3ae>
    1e00:	85 32       	cpi	r24, 0x25	; 37
    1e02:	39 f4       	brne	.+14     	; 0x1e12 <vfprintf+0x4c>
    1e04:	93 fd       	sbrc	r25, 3
    1e06:	85 91       	lpm	r24, Z+
    1e08:	93 ff       	sbrs	r25, 3
    1e0a:	81 91       	ld	r24, Z+
    1e0c:	7f 01       	movw	r14, r30
    1e0e:	85 32       	cpi	r24, 0x25	; 37
    1e10:	29 f4       	brne	.+10     	; 0x1e1c <vfprintf+0x56>
    1e12:	b6 01       	movw	r22, r12
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	0e 94 2e 12 	call	0x245c	; 0x245c <fputc>
    1e1a:	e7 cf       	rjmp	.-50     	; 0x1dea <vfprintf+0x24>
    1e1c:	91 2c       	mov	r9, r1
    1e1e:	21 2c       	mov	r2, r1
    1e20:	31 2c       	mov	r3, r1
    1e22:	ff e1       	ldi	r31, 0x1F	; 31
    1e24:	f3 15       	cp	r31, r3
    1e26:	d8 f0       	brcs	.+54     	; 0x1e5e <vfprintf+0x98>
    1e28:	8b 32       	cpi	r24, 0x2B	; 43
    1e2a:	79 f0       	breq	.+30     	; 0x1e4a <vfprintf+0x84>
    1e2c:	38 f4       	brcc	.+14     	; 0x1e3c <vfprintf+0x76>
    1e2e:	80 32       	cpi	r24, 0x20	; 32
    1e30:	79 f0       	breq	.+30     	; 0x1e50 <vfprintf+0x8a>
    1e32:	83 32       	cpi	r24, 0x23	; 35
    1e34:	a1 f4       	brne	.+40     	; 0x1e5e <vfprintf+0x98>
    1e36:	23 2d       	mov	r18, r3
    1e38:	20 61       	ori	r18, 0x10	; 16
    1e3a:	1d c0       	rjmp	.+58     	; 0x1e76 <vfprintf+0xb0>
    1e3c:	8d 32       	cpi	r24, 0x2D	; 45
    1e3e:	61 f0       	breq	.+24     	; 0x1e58 <vfprintf+0x92>
    1e40:	80 33       	cpi	r24, 0x30	; 48
    1e42:	69 f4       	brne	.+26     	; 0x1e5e <vfprintf+0x98>
    1e44:	23 2d       	mov	r18, r3
    1e46:	21 60       	ori	r18, 0x01	; 1
    1e48:	16 c0       	rjmp	.+44     	; 0x1e76 <vfprintf+0xb0>
    1e4a:	83 2d       	mov	r24, r3
    1e4c:	82 60       	ori	r24, 0x02	; 2
    1e4e:	38 2e       	mov	r3, r24
    1e50:	e3 2d       	mov	r30, r3
    1e52:	e4 60       	ori	r30, 0x04	; 4
    1e54:	3e 2e       	mov	r3, r30
    1e56:	2a c0       	rjmp	.+84     	; 0x1eac <vfprintf+0xe6>
    1e58:	f3 2d       	mov	r31, r3
    1e5a:	f8 60       	ori	r31, 0x08	; 8
    1e5c:	1d c0       	rjmp	.+58     	; 0x1e98 <vfprintf+0xd2>
    1e5e:	37 fc       	sbrc	r3, 7
    1e60:	2d c0       	rjmp	.+90     	; 0x1ebc <vfprintf+0xf6>
    1e62:	20 ed       	ldi	r18, 0xD0	; 208
    1e64:	28 0f       	add	r18, r24
    1e66:	2a 30       	cpi	r18, 0x0A	; 10
    1e68:	40 f0       	brcs	.+16     	; 0x1e7a <vfprintf+0xb4>
    1e6a:	8e 32       	cpi	r24, 0x2E	; 46
    1e6c:	b9 f4       	brne	.+46     	; 0x1e9c <vfprintf+0xd6>
    1e6e:	36 fc       	sbrc	r3, 6
    1e70:	81 c1       	rjmp	.+770    	; 0x2174 <vfprintf+0x3ae>
    1e72:	23 2d       	mov	r18, r3
    1e74:	20 64       	ori	r18, 0x40	; 64
    1e76:	32 2e       	mov	r3, r18
    1e78:	19 c0       	rjmp	.+50     	; 0x1eac <vfprintf+0xe6>
    1e7a:	36 fe       	sbrs	r3, 6
    1e7c:	06 c0       	rjmp	.+12     	; 0x1e8a <vfprintf+0xc4>
    1e7e:	8a e0       	ldi	r24, 0x0A	; 10
    1e80:	98 9e       	mul	r9, r24
    1e82:	20 0d       	add	r18, r0
    1e84:	11 24       	eor	r1, r1
    1e86:	92 2e       	mov	r9, r18
    1e88:	11 c0       	rjmp	.+34     	; 0x1eac <vfprintf+0xe6>
    1e8a:	ea e0       	ldi	r30, 0x0A	; 10
    1e8c:	2e 9e       	mul	r2, r30
    1e8e:	20 0d       	add	r18, r0
    1e90:	11 24       	eor	r1, r1
    1e92:	22 2e       	mov	r2, r18
    1e94:	f3 2d       	mov	r31, r3
    1e96:	f0 62       	ori	r31, 0x20	; 32
    1e98:	3f 2e       	mov	r3, r31
    1e9a:	08 c0       	rjmp	.+16     	; 0x1eac <vfprintf+0xe6>
    1e9c:	8c 36       	cpi	r24, 0x6C	; 108
    1e9e:	21 f4       	brne	.+8      	; 0x1ea8 <vfprintf+0xe2>
    1ea0:	83 2d       	mov	r24, r3
    1ea2:	80 68       	ori	r24, 0x80	; 128
    1ea4:	38 2e       	mov	r3, r24
    1ea6:	02 c0       	rjmp	.+4      	; 0x1eac <vfprintf+0xe6>
    1ea8:	88 36       	cpi	r24, 0x68	; 104
    1eaa:	41 f4       	brne	.+16     	; 0x1ebc <vfprintf+0xf6>
    1eac:	f7 01       	movw	r30, r14
    1eae:	93 fd       	sbrc	r25, 3
    1eb0:	85 91       	lpm	r24, Z+
    1eb2:	93 ff       	sbrs	r25, 3
    1eb4:	81 91       	ld	r24, Z+
    1eb6:	7f 01       	movw	r14, r30
    1eb8:	81 11       	cpse	r24, r1
    1eba:	b3 cf       	rjmp	.-154    	; 0x1e22 <vfprintf+0x5c>
    1ebc:	98 2f       	mov	r25, r24
    1ebe:	9f 7d       	andi	r25, 0xDF	; 223
    1ec0:	95 54       	subi	r25, 0x45	; 69
    1ec2:	93 30       	cpi	r25, 0x03	; 3
    1ec4:	28 f4       	brcc	.+10     	; 0x1ed0 <vfprintf+0x10a>
    1ec6:	0c 5f       	subi	r16, 0xFC	; 252
    1ec8:	1f 4f       	sbci	r17, 0xFF	; 255
    1eca:	9f e3       	ldi	r25, 0x3F	; 63
    1ecc:	99 83       	std	Y+1, r25	; 0x01
    1ece:	0d c0       	rjmp	.+26     	; 0x1eea <vfprintf+0x124>
    1ed0:	83 36       	cpi	r24, 0x63	; 99
    1ed2:	31 f0       	breq	.+12     	; 0x1ee0 <vfprintf+0x11a>
    1ed4:	83 37       	cpi	r24, 0x73	; 115
    1ed6:	71 f0       	breq	.+28     	; 0x1ef4 <vfprintf+0x12e>
    1ed8:	83 35       	cpi	r24, 0x53	; 83
    1eda:	09 f0       	breq	.+2      	; 0x1ede <vfprintf+0x118>
    1edc:	59 c0       	rjmp	.+178    	; 0x1f90 <vfprintf+0x1ca>
    1ede:	21 c0       	rjmp	.+66     	; 0x1f22 <vfprintf+0x15c>
    1ee0:	f8 01       	movw	r30, r16
    1ee2:	80 81       	ld	r24, Z
    1ee4:	89 83       	std	Y+1, r24	; 0x01
    1ee6:	0e 5f       	subi	r16, 0xFE	; 254
    1ee8:	1f 4f       	sbci	r17, 0xFF	; 255
    1eea:	88 24       	eor	r8, r8
    1eec:	83 94       	inc	r8
    1eee:	91 2c       	mov	r9, r1
    1ef0:	53 01       	movw	r10, r6
    1ef2:	13 c0       	rjmp	.+38     	; 0x1f1a <vfprintf+0x154>
    1ef4:	28 01       	movw	r4, r16
    1ef6:	f2 e0       	ldi	r31, 0x02	; 2
    1ef8:	4f 0e       	add	r4, r31
    1efa:	51 1c       	adc	r5, r1
    1efc:	f8 01       	movw	r30, r16
    1efe:	a0 80       	ld	r10, Z
    1f00:	b1 80       	ldd	r11, Z+1	; 0x01
    1f02:	36 fe       	sbrs	r3, 6
    1f04:	03 c0       	rjmp	.+6      	; 0x1f0c <vfprintf+0x146>
    1f06:	69 2d       	mov	r22, r9
    1f08:	70 e0       	ldi	r23, 0x00	; 0
    1f0a:	02 c0       	rjmp	.+4      	; 0x1f10 <vfprintf+0x14a>
    1f0c:	6f ef       	ldi	r22, 0xFF	; 255
    1f0e:	7f ef       	ldi	r23, 0xFF	; 255
    1f10:	c5 01       	movw	r24, r10
    1f12:	0e 94 13 12 	call	0x2426	; 0x2426 <strnlen>
    1f16:	4c 01       	movw	r8, r24
    1f18:	82 01       	movw	r16, r4
    1f1a:	f3 2d       	mov	r31, r3
    1f1c:	ff 77       	andi	r31, 0x7F	; 127
    1f1e:	3f 2e       	mov	r3, r31
    1f20:	16 c0       	rjmp	.+44     	; 0x1f4e <vfprintf+0x188>
    1f22:	28 01       	movw	r4, r16
    1f24:	22 e0       	ldi	r18, 0x02	; 2
    1f26:	42 0e       	add	r4, r18
    1f28:	51 1c       	adc	r5, r1
    1f2a:	f8 01       	movw	r30, r16
    1f2c:	a0 80       	ld	r10, Z
    1f2e:	b1 80       	ldd	r11, Z+1	; 0x01
    1f30:	36 fe       	sbrs	r3, 6
    1f32:	03 c0       	rjmp	.+6      	; 0x1f3a <vfprintf+0x174>
    1f34:	69 2d       	mov	r22, r9
    1f36:	70 e0       	ldi	r23, 0x00	; 0
    1f38:	02 c0       	rjmp	.+4      	; 0x1f3e <vfprintf+0x178>
    1f3a:	6f ef       	ldi	r22, 0xFF	; 255
    1f3c:	7f ef       	ldi	r23, 0xFF	; 255
    1f3e:	c5 01       	movw	r24, r10
    1f40:	0e 94 01 12 	call	0x2402	; 0x2402 <strnlen_P>
    1f44:	4c 01       	movw	r8, r24
    1f46:	f3 2d       	mov	r31, r3
    1f48:	f0 68       	ori	r31, 0x80	; 128
    1f4a:	3f 2e       	mov	r3, r31
    1f4c:	82 01       	movw	r16, r4
    1f4e:	33 fc       	sbrc	r3, 3
    1f50:	1b c0       	rjmp	.+54     	; 0x1f88 <vfprintf+0x1c2>
    1f52:	82 2d       	mov	r24, r2
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	88 16       	cp	r8, r24
    1f58:	99 06       	cpc	r9, r25
    1f5a:	b0 f4       	brcc	.+44     	; 0x1f88 <vfprintf+0x1c2>
    1f5c:	b6 01       	movw	r22, r12
    1f5e:	80 e2       	ldi	r24, 0x20	; 32
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	0e 94 2e 12 	call	0x245c	; 0x245c <fputc>
    1f66:	2a 94       	dec	r2
    1f68:	f4 cf       	rjmp	.-24     	; 0x1f52 <vfprintf+0x18c>
    1f6a:	f5 01       	movw	r30, r10
    1f6c:	37 fc       	sbrc	r3, 7
    1f6e:	85 91       	lpm	r24, Z+
    1f70:	37 fe       	sbrs	r3, 7
    1f72:	81 91       	ld	r24, Z+
    1f74:	5f 01       	movw	r10, r30
    1f76:	b6 01       	movw	r22, r12
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	0e 94 2e 12 	call	0x245c	; 0x245c <fputc>
    1f7e:	21 10       	cpse	r2, r1
    1f80:	2a 94       	dec	r2
    1f82:	21 e0       	ldi	r18, 0x01	; 1
    1f84:	82 1a       	sub	r8, r18
    1f86:	91 08       	sbc	r9, r1
    1f88:	81 14       	cp	r8, r1
    1f8a:	91 04       	cpc	r9, r1
    1f8c:	71 f7       	brne	.-36     	; 0x1f6a <vfprintf+0x1a4>
    1f8e:	e8 c0       	rjmp	.+464    	; 0x2160 <vfprintf+0x39a>
    1f90:	84 36       	cpi	r24, 0x64	; 100
    1f92:	11 f0       	breq	.+4      	; 0x1f98 <vfprintf+0x1d2>
    1f94:	89 36       	cpi	r24, 0x69	; 105
    1f96:	41 f5       	brne	.+80     	; 0x1fe8 <vfprintf+0x222>
    1f98:	f8 01       	movw	r30, r16
    1f9a:	37 fe       	sbrs	r3, 7
    1f9c:	07 c0       	rjmp	.+14     	; 0x1fac <vfprintf+0x1e6>
    1f9e:	60 81       	ld	r22, Z
    1fa0:	71 81       	ldd	r23, Z+1	; 0x01
    1fa2:	82 81       	ldd	r24, Z+2	; 0x02
    1fa4:	93 81       	ldd	r25, Z+3	; 0x03
    1fa6:	0c 5f       	subi	r16, 0xFC	; 252
    1fa8:	1f 4f       	sbci	r17, 0xFF	; 255
    1faa:	08 c0       	rjmp	.+16     	; 0x1fbc <vfprintf+0x1f6>
    1fac:	60 81       	ld	r22, Z
    1fae:	71 81       	ldd	r23, Z+1	; 0x01
    1fb0:	07 2e       	mov	r0, r23
    1fb2:	00 0c       	add	r0, r0
    1fb4:	88 0b       	sbc	r24, r24
    1fb6:	99 0b       	sbc	r25, r25
    1fb8:	0e 5f       	subi	r16, 0xFE	; 254
    1fba:	1f 4f       	sbci	r17, 0xFF	; 255
    1fbc:	f3 2d       	mov	r31, r3
    1fbe:	ff 76       	andi	r31, 0x6F	; 111
    1fc0:	3f 2e       	mov	r3, r31
    1fc2:	97 ff       	sbrs	r25, 7
    1fc4:	09 c0       	rjmp	.+18     	; 0x1fd8 <vfprintf+0x212>
    1fc6:	90 95       	com	r25
    1fc8:	80 95       	com	r24
    1fca:	70 95       	com	r23
    1fcc:	61 95       	neg	r22
    1fce:	7f 4f       	sbci	r23, 0xFF	; 255
    1fd0:	8f 4f       	sbci	r24, 0xFF	; 255
    1fd2:	9f 4f       	sbci	r25, 0xFF	; 255
    1fd4:	f0 68       	ori	r31, 0x80	; 128
    1fd6:	3f 2e       	mov	r3, r31
    1fd8:	2a e0       	ldi	r18, 0x0A	; 10
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	a3 01       	movw	r20, r6
    1fde:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <__ultoa_invert>
    1fe2:	88 2e       	mov	r8, r24
    1fe4:	86 18       	sub	r8, r6
    1fe6:	45 c0       	rjmp	.+138    	; 0x2072 <vfprintf+0x2ac>
    1fe8:	85 37       	cpi	r24, 0x75	; 117
    1fea:	31 f4       	brne	.+12     	; 0x1ff8 <vfprintf+0x232>
    1fec:	23 2d       	mov	r18, r3
    1fee:	2f 7e       	andi	r18, 0xEF	; 239
    1ff0:	b2 2e       	mov	r11, r18
    1ff2:	2a e0       	ldi	r18, 0x0A	; 10
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	25 c0       	rjmp	.+74     	; 0x2042 <vfprintf+0x27c>
    1ff8:	93 2d       	mov	r25, r3
    1ffa:	99 7f       	andi	r25, 0xF9	; 249
    1ffc:	b9 2e       	mov	r11, r25
    1ffe:	8f 36       	cpi	r24, 0x6F	; 111
    2000:	c1 f0       	breq	.+48     	; 0x2032 <vfprintf+0x26c>
    2002:	18 f4       	brcc	.+6      	; 0x200a <vfprintf+0x244>
    2004:	88 35       	cpi	r24, 0x58	; 88
    2006:	79 f0       	breq	.+30     	; 0x2026 <vfprintf+0x260>
    2008:	b5 c0       	rjmp	.+362    	; 0x2174 <vfprintf+0x3ae>
    200a:	80 37       	cpi	r24, 0x70	; 112
    200c:	19 f0       	breq	.+6      	; 0x2014 <vfprintf+0x24e>
    200e:	88 37       	cpi	r24, 0x78	; 120
    2010:	21 f0       	breq	.+8      	; 0x201a <vfprintf+0x254>
    2012:	b0 c0       	rjmp	.+352    	; 0x2174 <vfprintf+0x3ae>
    2014:	e9 2f       	mov	r30, r25
    2016:	e0 61       	ori	r30, 0x10	; 16
    2018:	be 2e       	mov	r11, r30
    201a:	b4 fe       	sbrs	r11, 4
    201c:	0d c0       	rjmp	.+26     	; 0x2038 <vfprintf+0x272>
    201e:	fb 2d       	mov	r31, r11
    2020:	f4 60       	ori	r31, 0x04	; 4
    2022:	bf 2e       	mov	r11, r31
    2024:	09 c0       	rjmp	.+18     	; 0x2038 <vfprintf+0x272>
    2026:	34 fe       	sbrs	r3, 4
    2028:	0a c0       	rjmp	.+20     	; 0x203e <vfprintf+0x278>
    202a:	29 2f       	mov	r18, r25
    202c:	26 60       	ori	r18, 0x06	; 6
    202e:	b2 2e       	mov	r11, r18
    2030:	06 c0       	rjmp	.+12     	; 0x203e <vfprintf+0x278>
    2032:	28 e0       	ldi	r18, 0x08	; 8
    2034:	30 e0       	ldi	r19, 0x00	; 0
    2036:	05 c0       	rjmp	.+10     	; 0x2042 <vfprintf+0x27c>
    2038:	20 e1       	ldi	r18, 0x10	; 16
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	02 c0       	rjmp	.+4      	; 0x2042 <vfprintf+0x27c>
    203e:	20 e1       	ldi	r18, 0x10	; 16
    2040:	32 e0       	ldi	r19, 0x02	; 2
    2042:	f8 01       	movw	r30, r16
    2044:	b7 fe       	sbrs	r11, 7
    2046:	07 c0       	rjmp	.+14     	; 0x2056 <vfprintf+0x290>
    2048:	60 81       	ld	r22, Z
    204a:	71 81       	ldd	r23, Z+1	; 0x01
    204c:	82 81       	ldd	r24, Z+2	; 0x02
    204e:	93 81       	ldd	r25, Z+3	; 0x03
    2050:	0c 5f       	subi	r16, 0xFC	; 252
    2052:	1f 4f       	sbci	r17, 0xFF	; 255
    2054:	06 c0       	rjmp	.+12     	; 0x2062 <vfprintf+0x29c>
    2056:	60 81       	ld	r22, Z
    2058:	71 81       	ldd	r23, Z+1	; 0x01
    205a:	80 e0       	ldi	r24, 0x00	; 0
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	0e 5f       	subi	r16, 0xFE	; 254
    2060:	1f 4f       	sbci	r17, 0xFF	; 255
    2062:	a3 01       	movw	r20, r6
    2064:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <__ultoa_invert>
    2068:	88 2e       	mov	r8, r24
    206a:	86 18       	sub	r8, r6
    206c:	fb 2d       	mov	r31, r11
    206e:	ff 77       	andi	r31, 0x7F	; 127
    2070:	3f 2e       	mov	r3, r31
    2072:	36 fe       	sbrs	r3, 6
    2074:	0d c0       	rjmp	.+26     	; 0x2090 <vfprintf+0x2ca>
    2076:	23 2d       	mov	r18, r3
    2078:	2e 7f       	andi	r18, 0xFE	; 254
    207a:	a2 2e       	mov	r10, r18
    207c:	89 14       	cp	r8, r9
    207e:	58 f4       	brcc	.+22     	; 0x2096 <vfprintf+0x2d0>
    2080:	34 fe       	sbrs	r3, 4
    2082:	0b c0       	rjmp	.+22     	; 0x209a <vfprintf+0x2d4>
    2084:	32 fc       	sbrc	r3, 2
    2086:	09 c0       	rjmp	.+18     	; 0x209a <vfprintf+0x2d4>
    2088:	83 2d       	mov	r24, r3
    208a:	8e 7e       	andi	r24, 0xEE	; 238
    208c:	a8 2e       	mov	r10, r24
    208e:	05 c0       	rjmp	.+10     	; 0x209a <vfprintf+0x2d4>
    2090:	b8 2c       	mov	r11, r8
    2092:	a3 2c       	mov	r10, r3
    2094:	03 c0       	rjmp	.+6      	; 0x209c <vfprintf+0x2d6>
    2096:	b8 2c       	mov	r11, r8
    2098:	01 c0       	rjmp	.+2      	; 0x209c <vfprintf+0x2d6>
    209a:	b9 2c       	mov	r11, r9
    209c:	a4 fe       	sbrs	r10, 4
    209e:	0f c0       	rjmp	.+30     	; 0x20be <vfprintf+0x2f8>
    20a0:	fe 01       	movw	r30, r28
    20a2:	e8 0d       	add	r30, r8
    20a4:	f1 1d       	adc	r31, r1
    20a6:	80 81       	ld	r24, Z
    20a8:	80 33       	cpi	r24, 0x30	; 48
    20aa:	21 f4       	brne	.+8      	; 0x20b4 <vfprintf+0x2ee>
    20ac:	9a 2d       	mov	r25, r10
    20ae:	99 7e       	andi	r25, 0xE9	; 233
    20b0:	a9 2e       	mov	r10, r25
    20b2:	09 c0       	rjmp	.+18     	; 0x20c6 <vfprintf+0x300>
    20b4:	a2 fe       	sbrs	r10, 2
    20b6:	06 c0       	rjmp	.+12     	; 0x20c4 <vfprintf+0x2fe>
    20b8:	b3 94       	inc	r11
    20ba:	b3 94       	inc	r11
    20bc:	04 c0       	rjmp	.+8      	; 0x20c6 <vfprintf+0x300>
    20be:	8a 2d       	mov	r24, r10
    20c0:	86 78       	andi	r24, 0x86	; 134
    20c2:	09 f0       	breq	.+2      	; 0x20c6 <vfprintf+0x300>
    20c4:	b3 94       	inc	r11
    20c6:	a3 fc       	sbrc	r10, 3
    20c8:	11 c0       	rjmp	.+34     	; 0x20ec <vfprintf+0x326>
    20ca:	a0 fe       	sbrs	r10, 0
    20cc:	06 c0       	rjmp	.+12     	; 0x20da <vfprintf+0x314>
    20ce:	b2 14       	cp	r11, r2
    20d0:	88 f4       	brcc	.+34     	; 0x20f4 <vfprintf+0x32e>
    20d2:	28 0c       	add	r2, r8
    20d4:	92 2c       	mov	r9, r2
    20d6:	9b 18       	sub	r9, r11
    20d8:	0e c0       	rjmp	.+28     	; 0x20f6 <vfprintf+0x330>
    20da:	b2 14       	cp	r11, r2
    20dc:	60 f4       	brcc	.+24     	; 0x20f6 <vfprintf+0x330>
    20de:	b6 01       	movw	r22, r12
    20e0:	80 e2       	ldi	r24, 0x20	; 32
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	0e 94 2e 12 	call	0x245c	; 0x245c <fputc>
    20e8:	b3 94       	inc	r11
    20ea:	f7 cf       	rjmp	.-18     	; 0x20da <vfprintf+0x314>
    20ec:	b2 14       	cp	r11, r2
    20ee:	18 f4       	brcc	.+6      	; 0x20f6 <vfprintf+0x330>
    20f0:	2b 18       	sub	r2, r11
    20f2:	02 c0       	rjmp	.+4      	; 0x20f8 <vfprintf+0x332>
    20f4:	98 2c       	mov	r9, r8
    20f6:	21 2c       	mov	r2, r1
    20f8:	a4 fe       	sbrs	r10, 4
    20fa:	10 c0       	rjmp	.+32     	; 0x211c <vfprintf+0x356>
    20fc:	b6 01       	movw	r22, r12
    20fe:	80 e3       	ldi	r24, 0x30	; 48
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	0e 94 2e 12 	call	0x245c	; 0x245c <fputc>
    2106:	a2 fe       	sbrs	r10, 2
    2108:	17 c0       	rjmp	.+46     	; 0x2138 <vfprintf+0x372>
    210a:	a1 fc       	sbrc	r10, 1
    210c:	03 c0       	rjmp	.+6      	; 0x2114 <vfprintf+0x34e>
    210e:	88 e7       	ldi	r24, 0x78	; 120
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	02 c0       	rjmp	.+4      	; 0x2118 <vfprintf+0x352>
    2114:	88 e5       	ldi	r24, 0x58	; 88
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	b6 01       	movw	r22, r12
    211a:	0c c0       	rjmp	.+24     	; 0x2134 <vfprintf+0x36e>
    211c:	8a 2d       	mov	r24, r10
    211e:	86 78       	andi	r24, 0x86	; 134
    2120:	59 f0       	breq	.+22     	; 0x2138 <vfprintf+0x372>
    2122:	a1 fe       	sbrs	r10, 1
    2124:	02 c0       	rjmp	.+4      	; 0x212a <vfprintf+0x364>
    2126:	8b e2       	ldi	r24, 0x2B	; 43
    2128:	01 c0       	rjmp	.+2      	; 0x212c <vfprintf+0x366>
    212a:	80 e2       	ldi	r24, 0x20	; 32
    212c:	a7 fc       	sbrc	r10, 7
    212e:	8d e2       	ldi	r24, 0x2D	; 45
    2130:	b6 01       	movw	r22, r12
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	0e 94 2e 12 	call	0x245c	; 0x245c <fputc>
    2138:	89 14       	cp	r8, r9
    213a:	38 f4       	brcc	.+14     	; 0x214a <vfprintf+0x384>
    213c:	b6 01       	movw	r22, r12
    213e:	80 e3       	ldi	r24, 0x30	; 48
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	0e 94 2e 12 	call	0x245c	; 0x245c <fputc>
    2146:	9a 94       	dec	r9
    2148:	f7 cf       	rjmp	.-18     	; 0x2138 <vfprintf+0x372>
    214a:	8a 94       	dec	r8
    214c:	f3 01       	movw	r30, r6
    214e:	e8 0d       	add	r30, r8
    2150:	f1 1d       	adc	r31, r1
    2152:	80 81       	ld	r24, Z
    2154:	b6 01       	movw	r22, r12
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	0e 94 2e 12 	call	0x245c	; 0x245c <fputc>
    215c:	81 10       	cpse	r8, r1
    215e:	f5 cf       	rjmp	.-22     	; 0x214a <vfprintf+0x384>
    2160:	22 20       	and	r2, r2
    2162:	09 f4       	brne	.+2      	; 0x2166 <vfprintf+0x3a0>
    2164:	42 ce       	rjmp	.-892    	; 0x1dea <vfprintf+0x24>
    2166:	b6 01       	movw	r22, r12
    2168:	80 e2       	ldi	r24, 0x20	; 32
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	0e 94 2e 12 	call	0x245c	; 0x245c <fputc>
    2170:	2a 94       	dec	r2
    2172:	f6 cf       	rjmp	.-20     	; 0x2160 <vfprintf+0x39a>
    2174:	f6 01       	movw	r30, r12
    2176:	86 81       	ldd	r24, Z+6	; 0x06
    2178:	97 81       	ldd	r25, Z+7	; 0x07
    217a:	02 c0       	rjmp	.+4      	; 0x2180 <vfprintf+0x3ba>
    217c:	8f ef       	ldi	r24, 0xFF	; 255
    217e:	9f ef       	ldi	r25, 0xFF	; 255
    2180:	2b 96       	adiw	r28, 0x0b	; 11
    2182:	e2 e1       	ldi	r30, 0x12	; 18
    2184:	0c 94 e4 12 	jmp	0x25c8	; 0x25c8 <__epilogue_restores__>

00002188 <calloc>:
    2188:	0f 93       	push	r16
    218a:	1f 93       	push	r17
    218c:	cf 93       	push	r28
    218e:	df 93       	push	r29
    2190:	86 9f       	mul	r24, r22
    2192:	80 01       	movw	r16, r0
    2194:	87 9f       	mul	r24, r23
    2196:	10 0d       	add	r17, r0
    2198:	96 9f       	mul	r25, r22
    219a:	10 0d       	add	r17, r0
    219c:	11 24       	eor	r1, r1
    219e:	c8 01       	movw	r24, r16
    21a0:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <malloc>
    21a4:	ec 01       	movw	r28, r24
    21a6:	00 97       	sbiw	r24, 0x00	; 0
    21a8:	29 f0       	breq	.+10     	; 0x21b4 <calloc+0x2c>
    21aa:	a8 01       	movw	r20, r16
    21ac:	60 e0       	ldi	r22, 0x00	; 0
    21ae:	70 e0       	ldi	r23, 0x00	; 0
    21b0:	0e 94 0c 12 	call	0x2418	; 0x2418 <memset>
    21b4:	ce 01       	movw	r24, r28
    21b6:	df 91       	pop	r29
    21b8:	cf 91       	pop	r28
    21ba:	1f 91       	pop	r17
    21bc:	0f 91       	pop	r16
    21be:	08 95       	ret

000021c0 <malloc>:
    21c0:	0f 93       	push	r16
    21c2:	1f 93       	push	r17
    21c4:	cf 93       	push	r28
    21c6:	df 93       	push	r29
    21c8:	82 30       	cpi	r24, 0x02	; 2
    21ca:	91 05       	cpc	r25, r1
    21cc:	10 f4       	brcc	.+4      	; 0x21d2 <malloc+0x12>
    21ce:	82 e0       	ldi	r24, 0x02	; 2
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	e0 91 58 03 	lds	r30, 0x0358	; 0x800358 <__flp>
    21d6:	f0 91 59 03 	lds	r31, 0x0359	; 0x800359 <__flp+0x1>
    21da:	20 e0       	ldi	r18, 0x00	; 0
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	a0 e0       	ldi	r26, 0x00	; 0
    21e0:	b0 e0       	ldi	r27, 0x00	; 0
    21e2:	30 97       	sbiw	r30, 0x00	; 0
    21e4:	19 f1       	breq	.+70     	; 0x222c <malloc+0x6c>
    21e6:	40 81       	ld	r20, Z
    21e8:	51 81       	ldd	r21, Z+1	; 0x01
    21ea:	02 81       	ldd	r16, Z+2	; 0x02
    21ec:	13 81       	ldd	r17, Z+3	; 0x03
    21ee:	48 17       	cp	r20, r24
    21f0:	59 07       	cpc	r21, r25
    21f2:	c8 f0       	brcs	.+50     	; 0x2226 <malloc+0x66>
    21f4:	84 17       	cp	r24, r20
    21f6:	95 07       	cpc	r25, r21
    21f8:	69 f4       	brne	.+26     	; 0x2214 <malloc+0x54>
    21fa:	10 97       	sbiw	r26, 0x00	; 0
    21fc:	31 f0       	breq	.+12     	; 0x220a <malloc+0x4a>
    21fe:	12 96       	adiw	r26, 0x02	; 2
    2200:	0c 93       	st	X, r16
    2202:	12 97       	sbiw	r26, 0x02	; 2
    2204:	13 96       	adiw	r26, 0x03	; 3
    2206:	1c 93       	st	X, r17
    2208:	27 c0       	rjmp	.+78     	; 0x2258 <malloc+0x98>
    220a:	00 93 58 03 	sts	0x0358, r16	; 0x800358 <__flp>
    220e:	10 93 59 03 	sts	0x0359, r17	; 0x800359 <__flp+0x1>
    2212:	22 c0       	rjmp	.+68     	; 0x2258 <malloc+0x98>
    2214:	21 15       	cp	r18, r1
    2216:	31 05       	cpc	r19, r1
    2218:	19 f0       	breq	.+6      	; 0x2220 <malloc+0x60>
    221a:	42 17       	cp	r20, r18
    221c:	53 07       	cpc	r21, r19
    221e:	18 f4       	brcc	.+6      	; 0x2226 <malloc+0x66>
    2220:	9a 01       	movw	r18, r20
    2222:	bd 01       	movw	r22, r26
    2224:	ef 01       	movw	r28, r30
    2226:	df 01       	movw	r26, r30
    2228:	f8 01       	movw	r30, r16
    222a:	db cf       	rjmp	.-74     	; 0x21e2 <malloc+0x22>
    222c:	21 15       	cp	r18, r1
    222e:	31 05       	cpc	r19, r1
    2230:	f9 f0       	breq	.+62     	; 0x2270 <malloc+0xb0>
    2232:	28 1b       	sub	r18, r24
    2234:	39 0b       	sbc	r19, r25
    2236:	24 30       	cpi	r18, 0x04	; 4
    2238:	31 05       	cpc	r19, r1
    223a:	80 f4       	brcc	.+32     	; 0x225c <malloc+0x9c>
    223c:	8a 81       	ldd	r24, Y+2	; 0x02
    223e:	9b 81       	ldd	r25, Y+3	; 0x03
    2240:	61 15       	cp	r22, r1
    2242:	71 05       	cpc	r23, r1
    2244:	21 f0       	breq	.+8      	; 0x224e <malloc+0x8e>
    2246:	fb 01       	movw	r30, r22
    2248:	93 83       	std	Z+3, r25	; 0x03
    224a:	82 83       	std	Z+2, r24	; 0x02
    224c:	04 c0       	rjmp	.+8      	; 0x2256 <malloc+0x96>
    224e:	90 93 59 03 	sts	0x0359, r25	; 0x800359 <__flp+0x1>
    2252:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <__flp>
    2256:	fe 01       	movw	r30, r28
    2258:	32 96       	adiw	r30, 0x02	; 2
    225a:	44 c0       	rjmp	.+136    	; 0x22e4 <malloc+0x124>
    225c:	fe 01       	movw	r30, r28
    225e:	e2 0f       	add	r30, r18
    2260:	f3 1f       	adc	r31, r19
    2262:	81 93       	st	Z+, r24
    2264:	91 93       	st	Z+, r25
    2266:	22 50       	subi	r18, 0x02	; 2
    2268:	31 09       	sbc	r19, r1
    226a:	39 83       	std	Y+1, r19	; 0x01
    226c:	28 83       	st	Y, r18
    226e:	3a c0       	rjmp	.+116    	; 0x22e4 <malloc+0x124>
    2270:	20 91 56 03 	lds	r18, 0x0356	; 0x800356 <__brkval>
    2274:	30 91 57 03 	lds	r19, 0x0357	; 0x800357 <__brkval+0x1>
    2278:	23 2b       	or	r18, r19
    227a:	41 f4       	brne	.+16     	; 0x228c <malloc+0xcc>
    227c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    2280:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    2284:	30 93 57 03 	sts	0x0357, r19	; 0x800357 <__brkval+0x1>
    2288:	20 93 56 03 	sts	0x0356, r18	; 0x800356 <__brkval>
    228c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    2290:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    2294:	21 15       	cp	r18, r1
    2296:	31 05       	cpc	r19, r1
    2298:	41 f4       	brne	.+16     	; 0x22aa <malloc+0xea>
    229a:	2d b7       	in	r18, 0x3d	; 61
    229c:	3e b7       	in	r19, 0x3e	; 62
    229e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    22a2:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    22a6:	24 1b       	sub	r18, r20
    22a8:	35 0b       	sbc	r19, r21
    22aa:	e0 91 56 03 	lds	r30, 0x0356	; 0x800356 <__brkval>
    22ae:	f0 91 57 03 	lds	r31, 0x0357	; 0x800357 <__brkval+0x1>
    22b2:	e2 17       	cp	r30, r18
    22b4:	f3 07       	cpc	r31, r19
    22b6:	a0 f4       	brcc	.+40     	; 0x22e0 <malloc+0x120>
    22b8:	2e 1b       	sub	r18, r30
    22ba:	3f 0b       	sbc	r19, r31
    22bc:	28 17       	cp	r18, r24
    22be:	39 07       	cpc	r19, r25
    22c0:	78 f0       	brcs	.+30     	; 0x22e0 <malloc+0x120>
    22c2:	ac 01       	movw	r20, r24
    22c4:	4e 5f       	subi	r20, 0xFE	; 254
    22c6:	5f 4f       	sbci	r21, 0xFF	; 255
    22c8:	24 17       	cp	r18, r20
    22ca:	35 07       	cpc	r19, r21
    22cc:	48 f0       	brcs	.+18     	; 0x22e0 <malloc+0x120>
    22ce:	4e 0f       	add	r20, r30
    22d0:	5f 1f       	adc	r21, r31
    22d2:	50 93 57 03 	sts	0x0357, r21	; 0x800357 <__brkval+0x1>
    22d6:	40 93 56 03 	sts	0x0356, r20	; 0x800356 <__brkval>
    22da:	81 93       	st	Z+, r24
    22dc:	91 93       	st	Z+, r25
    22de:	02 c0       	rjmp	.+4      	; 0x22e4 <malloc+0x124>
    22e0:	e0 e0       	ldi	r30, 0x00	; 0
    22e2:	f0 e0       	ldi	r31, 0x00	; 0
    22e4:	cf 01       	movw	r24, r30
    22e6:	df 91       	pop	r29
    22e8:	cf 91       	pop	r28
    22ea:	1f 91       	pop	r17
    22ec:	0f 91       	pop	r16
    22ee:	08 95       	ret

000022f0 <free>:
    22f0:	cf 93       	push	r28
    22f2:	df 93       	push	r29
    22f4:	00 97       	sbiw	r24, 0x00	; 0
    22f6:	09 f4       	brne	.+2      	; 0x22fa <free+0xa>
    22f8:	81 c0       	rjmp	.+258    	; 0x23fc <free+0x10c>
    22fa:	fc 01       	movw	r30, r24
    22fc:	32 97       	sbiw	r30, 0x02	; 2
    22fe:	13 82       	std	Z+3, r1	; 0x03
    2300:	12 82       	std	Z+2, r1	; 0x02
    2302:	a0 91 58 03 	lds	r26, 0x0358	; 0x800358 <__flp>
    2306:	b0 91 59 03 	lds	r27, 0x0359	; 0x800359 <__flp+0x1>
    230a:	10 97       	sbiw	r26, 0x00	; 0
    230c:	81 f4       	brne	.+32     	; 0x232e <free+0x3e>
    230e:	20 81       	ld	r18, Z
    2310:	31 81       	ldd	r19, Z+1	; 0x01
    2312:	82 0f       	add	r24, r18
    2314:	93 1f       	adc	r25, r19
    2316:	20 91 56 03 	lds	r18, 0x0356	; 0x800356 <__brkval>
    231a:	30 91 57 03 	lds	r19, 0x0357	; 0x800357 <__brkval+0x1>
    231e:	28 17       	cp	r18, r24
    2320:	39 07       	cpc	r19, r25
    2322:	51 f5       	brne	.+84     	; 0x2378 <free+0x88>
    2324:	f0 93 57 03 	sts	0x0357, r31	; 0x800357 <__brkval+0x1>
    2328:	e0 93 56 03 	sts	0x0356, r30	; 0x800356 <__brkval>
    232c:	67 c0       	rjmp	.+206    	; 0x23fc <free+0x10c>
    232e:	ed 01       	movw	r28, r26
    2330:	20 e0       	ldi	r18, 0x00	; 0
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	ce 17       	cp	r28, r30
    2336:	df 07       	cpc	r29, r31
    2338:	40 f4       	brcc	.+16     	; 0x234a <free+0x5a>
    233a:	4a 81       	ldd	r20, Y+2	; 0x02
    233c:	5b 81       	ldd	r21, Y+3	; 0x03
    233e:	9e 01       	movw	r18, r28
    2340:	41 15       	cp	r20, r1
    2342:	51 05       	cpc	r21, r1
    2344:	f1 f0       	breq	.+60     	; 0x2382 <free+0x92>
    2346:	ea 01       	movw	r28, r20
    2348:	f5 cf       	rjmp	.-22     	; 0x2334 <free+0x44>
    234a:	d3 83       	std	Z+3, r29	; 0x03
    234c:	c2 83       	std	Z+2, r28	; 0x02
    234e:	40 81       	ld	r20, Z
    2350:	51 81       	ldd	r21, Z+1	; 0x01
    2352:	84 0f       	add	r24, r20
    2354:	95 1f       	adc	r25, r21
    2356:	c8 17       	cp	r28, r24
    2358:	d9 07       	cpc	r29, r25
    235a:	59 f4       	brne	.+22     	; 0x2372 <free+0x82>
    235c:	88 81       	ld	r24, Y
    235e:	99 81       	ldd	r25, Y+1	; 0x01
    2360:	84 0f       	add	r24, r20
    2362:	95 1f       	adc	r25, r21
    2364:	02 96       	adiw	r24, 0x02	; 2
    2366:	91 83       	std	Z+1, r25	; 0x01
    2368:	80 83       	st	Z, r24
    236a:	8a 81       	ldd	r24, Y+2	; 0x02
    236c:	9b 81       	ldd	r25, Y+3	; 0x03
    236e:	93 83       	std	Z+3, r25	; 0x03
    2370:	82 83       	std	Z+2, r24	; 0x02
    2372:	21 15       	cp	r18, r1
    2374:	31 05       	cpc	r19, r1
    2376:	29 f4       	brne	.+10     	; 0x2382 <free+0x92>
    2378:	f0 93 59 03 	sts	0x0359, r31	; 0x800359 <__flp+0x1>
    237c:	e0 93 58 03 	sts	0x0358, r30	; 0x800358 <__flp>
    2380:	3d c0       	rjmp	.+122    	; 0x23fc <free+0x10c>
    2382:	e9 01       	movw	r28, r18
    2384:	fb 83       	std	Y+3, r31	; 0x03
    2386:	ea 83       	std	Y+2, r30	; 0x02
    2388:	49 91       	ld	r20, Y+
    238a:	59 91       	ld	r21, Y+
    238c:	c4 0f       	add	r28, r20
    238e:	d5 1f       	adc	r29, r21
    2390:	ec 17       	cp	r30, r28
    2392:	fd 07       	cpc	r31, r29
    2394:	61 f4       	brne	.+24     	; 0x23ae <free+0xbe>
    2396:	80 81       	ld	r24, Z
    2398:	91 81       	ldd	r25, Z+1	; 0x01
    239a:	84 0f       	add	r24, r20
    239c:	95 1f       	adc	r25, r21
    239e:	02 96       	adiw	r24, 0x02	; 2
    23a0:	e9 01       	movw	r28, r18
    23a2:	99 83       	std	Y+1, r25	; 0x01
    23a4:	88 83       	st	Y, r24
    23a6:	82 81       	ldd	r24, Z+2	; 0x02
    23a8:	93 81       	ldd	r25, Z+3	; 0x03
    23aa:	9b 83       	std	Y+3, r25	; 0x03
    23ac:	8a 83       	std	Y+2, r24	; 0x02
    23ae:	e0 e0       	ldi	r30, 0x00	; 0
    23b0:	f0 e0       	ldi	r31, 0x00	; 0
    23b2:	12 96       	adiw	r26, 0x02	; 2
    23b4:	8d 91       	ld	r24, X+
    23b6:	9c 91       	ld	r25, X
    23b8:	13 97       	sbiw	r26, 0x03	; 3
    23ba:	00 97       	sbiw	r24, 0x00	; 0
    23bc:	19 f0       	breq	.+6      	; 0x23c4 <free+0xd4>
    23be:	fd 01       	movw	r30, r26
    23c0:	dc 01       	movw	r26, r24
    23c2:	f7 cf       	rjmp	.-18     	; 0x23b2 <free+0xc2>
    23c4:	8d 91       	ld	r24, X+
    23c6:	9c 91       	ld	r25, X
    23c8:	11 97       	sbiw	r26, 0x01	; 1
    23ca:	9d 01       	movw	r18, r26
    23cc:	2e 5f       	subi	r18, 0xFE	; 254
    23ce:	3f 4f       	sbci	r19, 0xFF	; 255
    23d0:	82 0f       	add	r24, r18
    23d2:	93 1f       	adc	r25, r19
    23d4:	20 91 56 03 	lds	r18, 0x0356	; 0x800356 <__brkval>
    23d8:	30 91 57 03 	lds	r19, 0x0357	; 0x800357 <__brkval+0x1>
    23dc:	28 17       	cp	r18, r24
    23de:	39 07       	cpc	r19, r25
    23e0:	69 f4       	brne	.+26     	; 0x23fc <free+0x10c>
    23e2:	30 97       	sbiw	r30, 0x00	; 0
    23e4:	29 f4       	brne	.+10     	; 0x23f0 <free+0x100>
    23e6:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <__flp+0x1>
    23ea:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <__flp>
    23ee:	02 c0       	rjmp	.+4      	; 0x23f4 <free+0x104>
    23f0:	13 82       	std	Z+3, r1	; 0x03
    23f2:	12 82       	std	Z+2, r1	; 0x02
    23f4:	b0 93 57 03 	sts	0x0357, r27	; 0x800357 <__brkval+0x1>
    23f8:	a0 93 56 03 	sts	0x0356, r26	; 0x800356 <__brkval>
    23fc:	df 91       	pop	r29
    23fe:	cf 91       	pop	r28
    2400:	08 95       	ret

00002402 <strnlen_P>:
    2402:	fc 01       	movw	r30, r24
    2404:	05 90       	lpm	r0, Z+
    2406:	61 50       	subi	r22, 0x01	; 1
    2408:	70 40       	sbci	r23, 0x00	; 0
    240a:	01 10       	cpse	r0, r1
    240c:	d8 f7       	brcc	.-10     	; 0x2404 <strnlen_P+0x2>
    240e:	80 95       	com	r24
    2410:	90 95       	com	r25
    2412:	8e 0f       	add	r24, r30
    2414:	9f 1f       	adc	r25, r31
    2416:	08 95       	ret

00002418 <memset>:
    2418:	dc 01       	movw	r26, r24
    241a:	01 c0       	rjmp	.+2      	; 0x241e <memset+0x6>
    241c:	6d 93       	st	X+, r22
    241e:	41 50       	subi	r20, 0x01	; 1
    2420:	50 40       	sbci	r21, 0x00	; 0
    2422:	e0 f7       	brcc	.-8      	; 0x241c <memset+0x4>
    2424:	08 95       	ret

00002426 <strnlen>:
    2426:	fc 01       	movw	r30, r24
    2428:	61 50       	subi	r22, 0x01	; 1
    242a:	70 40       	sbci	r23, 0x00	; 0
    242c:	01 90       	ld	r0, Z+
    242e:	01 10       	cpse	r0, r1
    2430:	d8 f7       	brcc	.-10     	; 0x2428 <strnlen+0x2>
    2432:	80 95       	com	r24
    2434:	90 95       	com	r25
    2436:	8e 0f       	add	r24, r30
    2438:	9f 1f       	adc	r25, r31
    243a:	08 95       	ret

0000243c <strrev>:
    243c:	dc 01       	movw	r26, r24
    243e:	fc 01       	movw	r30, r24
    2440:	67 2f       	mov	r22, r23
    2442:	71 91       	ld	r23, Z+
    2444:	77 23       	and	r23, r23
    2446:	e1 f7       	brne	.-8      	; 0x2440 <strrev+0x4>
    2448:	32 97       	sbiw	r30, 0x02	; 2
    244a:	04 c0       	rjmp	.+8      	; 0x2454 <strrev+0x18>
    244c:	7c 91       	ld	r23, X
    244e:	6d 93       	st	X+, r22
    2450:	70 83       	st	Z, r23
    2452:	62 91       	ld	r22, -Z
    2454:	ae 17       	cp	r26, r30
    2456:	bf 07       	cpc	r27, r31
    2458:	c8 f3       	brcs	.-14     	; 0x244c <strrev+0x10>
    245a:	08 95       	ret

0000245c <fputc>:
    245c:	0f 93       	push	r16
    245e:	1f 93       	push	r17
    2460:	cf 93       	push	r28
    2462:	df 93       	push	r29
    2464:	fb 01       	movw	r30, r22
    2466:	23 81       	ldd	r18, Z+3	; 0x03
    2468:	21 fd       	sbrc	r18, 1
    246a:	03 c0       	rjmp	.+6      	; 0x2472 <fputc+0x16>
    246c:	8f ef       	ldi	r24, 0xFF	; 255
    246e:	9f ef       	ldi	r25, 0xFF	; 255
    2470:	2c c0       	rjmp	.+88     	; 0x24ca <fputc+0x6e>
    2472:	22 ff       	sbrs	r18, 2
    2474:	16 c0       	rjmp	.+44     	; 0x24a2 <fputc+0x46>
    2476:	46 81       	ldd	r20, Z+6	; 0x06
    2478:	57 81       	ldd	r21, Z+7	; 0x07
    247a:	24 81       	ldd	r18, Z+4	; 0x04
    247c:	35 81       	ldd	r19, Z+5	; 0x05
    247e:	42 17       	cp	r20, r18
    2480:	53 07       	cpc	r21, r19
    2482:	44 f4       	brge	.+16     	; 0x2494 <fputc+0x38>
    2484:	a0 81       	ld	r26, Z
    2486:	b1 81       	ldd	r27, Z+1	; 0x01
    2488:	9d 01       	movw	r18, r26
    248a:	2f 5f       	subi	r18, 0xFF	; 255
    248c:	3f 4f       	sbci	r19, 0xFF	; 255
    248e:	31 83       	std	Z+1, r19	; 0x01
    2490:	20 83       	st	Z, r18
    2492:	8c 93       	st	X, r24
    2494:	26 81       	ldd	r18, Z+6	; 0x06
    2496:	37 81       	ldd	r19, Z+7	; 0x07
    2498:	2f 5f       	subi	r18, 0xFF	; 255
    249a:	3f 4f       	sbci	r19, 0xFF	; 255
    249c:	37 83       	std	Z+7, r19	; 0x07
    249e:	26 83       	std	Z+6, r18	; 0x06
    24a0:	14 c0       	rjmp	.+40     	; 0x24ca <fputc+0x6e>
    24a2:	8b 01       	movw	r16, r22
    24a4:	ec 01       	movw	r28, r24
    24a6:	fb 01       	movw	r30, r22
    24a8:	00 84       	ldd	r0, Z+8	; 0x08
    24aa:	f1 85       	ldd	r31, Z+9	; 0x09
    24ac:	e0 2d       	mov	r30, r0
    24ae:	09 95       	icall
    24b0:	89 2b       	or	r24, r25
    24b2:	e1 f6       	brne	.-72     	; 0x246c <fputc+0x10>
    24b4:	d8 01       	movw	r26, r16
    24b6:	16 96       	adiw	r26, 0x06	; 6
    24b8:	8d 91       	ld	r24, X+
    24ba:	9c 91       	ld	r25, X
    24bc:	17 97       	sbiw	r26, 0x07	; 7
    24be:	01 96       	adiw	r24, 0x01	; 1
    24c0:	17 96       	adiw	r26, 0x07	; 7
    24c2:	9c 93       	st	X, r25
    24c4:	8e 93       	st	-X, r24
    24c6:	16 97       	sbiw	r26, 0x06	; 6
    24c8:	ce 01       	movw	r24, r28
    24ca:	df 91       	pop	r29
    24cc:	cf 91       	pop	r28
    24ce:	1f 91       	pop	r17
    24d0:	0f 91       	pop	r16
    24d2:	08 95       	ret

000024d4 <__ultoa_invert>:
    24d4:	fa 01       	movw	r30, r20
    24d6:	aa 27       	eor	r26, r26
    24d8:	28 30       	cpi	r18, 0x08	; 8
    24da:	51 f1       	breq	.+84     	; 0x2530 <__ultoa_invert+0x5c>
    24dc:	20 31       	cpi	r18, 0x10	; 16
    24de:	81 f1       	breq	.+96     	; 0x2540 <__ultoa_invert+0x6c>
    24e0:	e8 94       	clt
    24e2:	6f 93       	push	r22
    24e4:	6e 7f       	andi	r22, 0xFE	; 254
    24e6:	6e 5f       	subi	r22, 0xFE	; 254
    24e8:	7f 4f       	sbci	r23, 0xFF	; 255
    24ea:	8f 4f       	sbci	r24, 0xFF	; 255
    24ec:	9f 4f       	sbci	r25, 0xFF	; 255
    24ee:	af 4f       	sbci	r26, 0xFF	; 255
    24f0:	b1 e0       	ldi	r27, 0x01	; 1
    24f2:	3e d0       	rcall	.+124    	; 0x2570 <__ultoa_invert+0x9c>
    24f4:	b4 e0       	ldi	r27, 0x04	; 4
    24f6:	3c d0       	rcall	.+120    	; 0x2570 <__ultoa_invert+0x9c>
    24f8:	67 0f       	add	r22, r23
    24fa:	78 1f       	adc	r23, r24
    24fc:	89 1f       	adc	r24, r25
    24fe:	9a 1f       	adc	r25, r26
    2500:	a1 1d       	adc	r26, r1
    2502:	68 0f       	add	r22, r24
    2504:	79 1f       	adc	r23, r25
    2506:	8a 1f       	adc	r24, r26
    2508:	91 1d       	adc	r25, r1
    250a:	a1 1d       	adc	r26, r1
    250c:	6a 0f       	add	r22, r26
    250e:	71 1d       	adc	r23, r1
    2510:	81 1d       	adc	r24, r1
    2512:	91 1d       	adc	r25, r1
    2514:	a1 1d       	adc	r26, r1
    2516:	20 d0       	rcall	.+64     	; 0x2558 <__ultoa_invert+0x84>
    2518:	09 f4       	brne	.+2      	; 0x251c <__ultoa_invert+0x48>
    251a:	68 94       	set
    251c:	3f 91       	pop	r19
    251e:	2a e0       	ldi	r18, 0x0A	; 10
    2520:	26 9f       	mul	r18, r22
    2522:	11 24       	eor	r1, r1
    2524:	30 19       	sub	r19, r0
    2526:	30 5d       	subi	r19, 0xD0	; 208
    2528:	31 93       	st	Z+, r19
    252a:	de f6       	brtc	.-74     	; 0x24e2 <__ultoa_invert+0xe>
    252c:	cf 01       	movw	r24, r30
    252e:	08 95       	ret
    2530:	46 2f       	mov	r20, r22
    2532:	47 70       	andi	r20, 0x07	; 7
    2534:	40 5d       	subi	r20, 0xD0	; 208
    2536:	41 93       	st	Z+, r20
    2538:	b3 e0       	ldi	r27, 0x03	; 3
    253a:	0f d0       	rcall	.+30     	; 0x255a <__ultoa_invert+0x86>
    253c:	c9 f7       	brne	.-14     	; 0x2530 <__ultoa_invert+0x5c>
    253e:	f6 cf       	rjmp	.-20     	; 0x252c <__ultoa_invert+0x58>
    2540:	46 2f       	mov	r20, r22
    2542:	4f 70       	andi	r20, 0x0F	; 15
    2544:	40 5d       	subi	r20, 0xD0	; 208
    2546:	4a 33       	cpi	r20, 0x3A	; 58
    2548:	18 f0       	brcs	.+6      	; 0x2550 <__ultoa_invert+0x7c>
    254a:	49 5d       	subi	r20, 0xD9	; 217
    254c:	31 fd       	sbrc	r19, 1
    254e:	40 52       	subi	r20, 0x20	; 32
    2550:	41 93       	st	Z+, r20
    2552:	02 d0       	rcall	.+4      	; 0x2558 <__ultoa_invert+0x84>
    2554:	a9 f7       	brne	.-22     	; 0x2540 <__ultoa_invert+0x6c>
    2556:	ea cf       	rjmp	.-44     	; 0x252c <__ultoa_invert+0x58>
    2558:	b4 e0       	ldi	r27, 0x04	; 4
    255a:	a6 95       	lsr	r26
    255c:	97 95       	ror	r25
    255e:	87 95       	ror	r24
    2560:	77 95       	ror	r23
    2562:	67 95       	ror	r22
    2564:	ba 95       	dec	r27
    2566:	c9 f7       	brne	.-14     	; 0x255a <__ultoa_invert+0x86>
    2568:	00 97       	sbiw	r24, 0x00	; 0
    256a:	61 05       	cpc	r22, r1
    256c:	71 05       	cpc	r23, r1
    256e:	08 95       	ret
    2570:	9b 01       	movw	r18, r22
    2572:	ac 01       	movw	r20, r24
    2574:	0a 2e       	mov	r0, r26
    2576:	06 94       	lsr	r0
    2578:	57 95       	ror	r21
    257a:	47 95       	ror	r20
    257c:	37 95       	ror	r19
    257e:	27 95       	ror	r18
    2580:	ba 95       	dec	r27
    2582:	c9 f7       	brne	.-14     	; 0x2576 <__ultoa_invert+0xa2>
    2584:	62 0f       	add	r22, r18
    2586:	73 1f       	adc	r23, r19
    2588:	84 1f       	adc	r24, r20
    258a:	95 1f       	adc	r25, r21
    258c:	a0 1d       	adc	r26, r0
    258e:	08 95       	ret

00002590 <__prologue_saves__>:
    2590:	2f 92       	push	r2
    2592:	3f 92       	push	r3
    2594:	4f 92       	push	r4
    2596:	5f 92       	push	r5
    2598:	6f 92       	push	r6
    259a:	7f 92       	push	r7
    259c:	8f 92       	push	r8
    259e:	9f 92       	push	r9
    25a0:	af 92       	push	r10
    25a2:	bf 92       	push	r11
    25a4:	cf 92       	push	r12
    25a6:	df 92       	push	r13
    25a8:	ef 92       	push	r14
    25aa:	ff 92       	push	r15
    25ac:	0f 93       	push	r16
    25ae:	1f 93       	push	r17
    25b0:	cf 93       	push	r28
    25b2:	df 93       	push	r29
    25b4:	cd b7       	in	r28, 0x3d	; 61
    25b6:	de b7       	in	r29, 0x3e	; 62
    25b8:	ca 1b       	sub	r28, r26
    25ba:	db 0b       	sbc	r29, r27
    25bc:	0f b6       	in	r0, 0x3f	; 63
    25be:	f8 94       	cli
    25c0:	de bf       	out	0x3e, r29	; 62
    25c2:	0f be       	out	0x3f, r0	; 63
    25c4:	cd bf       	out	0x3d, r28	; 61
    25c6:	09 94       	ijmp

000025c8 <__epilogue_restores__>:
    25c8:	2a 88       	ldd	r2, Y+18	; 0x12
    25ca:	39 88       	ldd	r3, Y+17	; 0x11
    25cc:	48 88       	ldd	r4, Y+16	; 0x10
    25ce:	5f 84       	ldd	r5, Y+15	; 0x0f
    25d0:	6e 84       	ldd	r6, Y+14	; 0x0e
    25d2:	7d 84       	ldd	r7, Y+13	; 0x0d
    25d4:	8c 84       	ldd	r8, Y+12	; 0x0c
    25d6:	9b 84       	ldd	r9, Y+11	; 0x0b
    25d8:	aa 84       	ldd	r10, Y+10	; 0x0a
    25da:	b9 84       	ldd	r11, Y+9	; 0x09
    25dc:	c8 84       	ldd	r12, Y+8	; 0x08
    25de:	df 80       	ldd	r13, Y+7	; 0x07
    25e0:	ee 80       	ldd	r14, Y+6	; 0x06
    25e2:	fd 80       	ldd	r15, Y+5	; 0x05
    25e4:	0c 81       	ldd	r16, Y+4	; 0x04
    25e6:	1b 81       	ldd	r17, Y+3	; 0x03
    25e8:	aa 81       	ldd	r26, Y+2	; 0x02
    25ea:	b9 81       	ldd	r27, Y+1	; 0x01
    25ec:	ce 0f       	add	r28, r30
    25ee:	d1 1d       	adc	r29, r1
    25f0:	0f b6       	in	r0, 0x3f	; 63
    25f2:	f8 94       	cli
    25f4:	de bf       	out	0x3e, r29	; 62
    25f6:	0f be       	out	0x3f, r0	; 63
    25f8:	cd bf       	out	0x3d, r28	; 61
    25fa:	ed 01       	movw	r28, r26
    25fc:	08 95       	ret

000025fe <_exit>:
    25fe:	f8 94       	cli

00002600 <__stop_program>:
    2600:	ff cf       	rjmp	.-2      	; 0x2600 <__stop_program>
