
TestYolo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001b2  00800100  00001344  000013d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001344  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  008002b2  008002b2  0000158a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000158a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000015e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000258  00000000  00000000  00001624  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000028bb  00000000  00000000  0000187c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001197  00000000  00000000  00004137  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001398  00000000  00000000  000052ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000634  00000000  00000000  00006668  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009c8  00000000  00000000  00006c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000179a  00000000  00000000  00007664  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f8  00000000  00000000  00008dfe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 1c 02 	jmp	0x438	; 0x438 <__vector_1>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <vfprintf+0x1a>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	12 e0       	ldi	r17, 0x02	; 2
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e4 e4       	ldi	r30, 0x44	; 68
     37c:	f3 e1       	ldi	r31, 0x13	; 19
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a2 3b       	cpi	r26, 0xB2	; 178
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	22 e0       	ldi	r18, 0x02	; 2
     38c:	a2 eb       	ldi	r26, 0xB2	; 178
     38e:	b2 e0       	ldi	r27, 0x02	; 2
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a4 3c       	cpi	r26, 0xC4	; 196
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 97 04 	call	0x92e	; 0x92e <main>
     39e:	0c 94 a0 09 	jmp	0x1340	; 0x1340 <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <ADC_calibrate>:
     3a6:	e1 e0       	ldi	r30, 0x01	; 1
     3a8:	f4 e1       	ldi	r31, 0x14	; 20
     3aa:	20 e8       	ldi	r18, 0x80	; 128
     3ac:	20 83       	st	Z, r18
     3ae:	26 ef       	ldi	r18, 0xF6	; 246
     3b0:	2a 95       	dec	r18
     3b2:	f1 f7       	brne	.-4      	; 0x3b0 <ADC_calibrate+0xa>
     3b4:	20 81       	ld	r18, Z
     3b6:	30 e0       	ldi	r19, 0x00	; 0
     3b8:	dc 01       	movw	r26, r24
     3ba:	2d 93       	st	X+, r18
     3bc:	3c 93       	st	X, r19
     3be:	21 e8       	ldi	r18, 0x81	; 129
     3c0:	20 83       	st	Z, r18
     3c2:	b6 ef       	ldi	r27, 0xF6	; 246
     3c4:	ba 95       	dec	r27
     3c6:	f1 f7       	brne	.-4      	; 0x3c4 <ADC_calibrate+0x1e>
     3c8:	20 81       	ld	r18, Z
     3ca:	30 e0       	ldi	r19, 0x00	; 0
     3cc:	fc 01       	movw	r30, r24
     3ce:	33 83       	std	Z+3, r19	; 0x03
     3d0:	22 83       	std	Z+2, r18	; 0x02
     3d2:	08 95       	ret

000003d4 <ADC_timer_init>:
     3d4:	b8 9a       	sbi	0x17, 0	; 23
     3d6:	83 b7       	in	r24, 0x33	; 51
     3d8:	88 60       	ori	r24, 0x08	; 8
     3da:	83 bf       	out	0x33, r24	; 51
     3dc:	83 b7       	in	r24, 0x33	; 51
     3de:	80 61       	ori	r24, 0x10	; 16
     3e0:	83 bf       	out	0x33, r24	; 51
     3e2:	83 b7       	in	r24, 0x33	; 51
     3e4:	81 60       	ori	r24, 0x01	; 1
     3e6:	83 bf       	out	0x33, r24	; 51
     3e8:	81 e0       	ldi	r24, 0x01	; 1
     3ea:	81 bf       	out	0x31, r24	; 49
     3ec:	08 95       	ret

000003ee <CAN_init>:
        mcp_write(MCP_TXB0D0 + i, data_byte);
    }

    // Request to send to given buffer
    mcp_request_to_send(0);
}
     3ee:	cf 93       	push	r28
     3f0:	c8 2f       	mov	r28, r24
     3f2:	f8 94       	cli
     3f4:	85 b7       	in	r24, 0x35	; 53
     3f6:	82 60       	ori	r24, 0x02	; 2
     3f8:	85 bf       	out	0x35, r24	; 53
     3fa:	85 b7       	in	r24, 0x35	; 53
     3fc:	8e 7f       	andi	r24, 0xFE	; 254
     3fe:	85 bf       	out	0x35, r24	; 53
     400:	8b b7       	in	r24, 0x3b	; 59
     402:	80 64       	ori	r24, 0x40	; 64
     404:	8b bf       	out	0x3b, r24	; 59
     406:	78 94       	sei
     408:	80 e8       	ldi	r24, 0x80	; 128
     40a:	0e 94 5d 03 	call	0x6ba	; 0x6ba <mcp_init>
     40e:	63 e0       	ldi	r22, 0x03	; 3
     410:	8b e2       	ldi	r24, 0x2B	; 43
     412:	0e 94 24 03 	call	0x648	; 0x648 <mcp_write>
     416:	61 e8       	ldi	r22, 0x81	; 129
     418:	8a e2       	ldi	r24, 0x2A	; 42
     41a:	0e 94 24 03 	call	0x648	; 0x648 <mcp_write>
     41e:	6d ea       	ldi	r22, 0xAD	; 173
     420:	89 e2       	ldi	r24, 0x29	; 41
     422:	0e 94 24 03 	call	0x648	; 0x648 <mcp_write>
     426:	65 e0       	ldi	r22, 0x05	; 5
     428:	88 e2       	ldi	r24, 0x28	; 40
     42a:	0e 94 24 03 	call	0x648	; 0x648 <mcp_write>
     42e:	8c 2f       	mov	r24, r28
     430:	0e 94 3a 03 	call	0x674	; 0x674 <mcp_set_mode>
     434:	cf 91       	pop	r28
     436:	08 95       	ret

00000438 <__vector_1>:
     438:	1f 92       	push	r1
     43a:	0f 92       	push	r0
     43c:	0f b6       	in	r0, 0x3f	; 63
     43e:	0f 92       	push	r0
     440:	11 24       	eor	r1, r1
     442:	8f 93       	push	r24
     444:	9f 93       	push	r25
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	90 93 b3 02 	sts	0x02B3, r25	; 0x8002b3 <__data_end+0x1>
     44e:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <__data_end>
     452:	9f 91       	pop	r25
     454:	8f 91       	pop	r24
     456:	0f 90       	pop	r0
     458:	0f be       	out	0x3f, r0	; 63
     45a:	0f 90       	pop	r0
     45c:	1f 90       	pop	r1
     45e:	18 95       	reti

00000460 <CAN_meessage_reception>:


CAN_message_t CAN_meessage_reception(){
     460:	9f 92       	push	r9
     462:	af 92       	push	r10
     464:	bf 92       	push	r11
     466:	cf 92       	push	r12
     468:	df 92       	push	r13
     46a:	ef 92       	push	r14
     46c:	ff 92       	push	r15
     46e:	0f 93       	push	r16
     470:	1f 93       	push	r17
     472:	cf 93       	push	r28
     474:	df 93       	push	r29
     476:	cd b7       	in	r28, 0x3d	; 61
     478:	de b7       	in	r29, 0x3e	; 62
     47a:	2b 97       	sbiw	r28, 0x0b	; 11
     47c:	0f b6       	in	r0, 0x3f	; 63
     47e:	f8 94       	cli
     480:	de bf       	out	0x3e, r29	; 62
     482:	0f be       	out	0x3f, r0	; 63
     484:	cd bf       	out	0x3d, r28	; 61
     486:	5c 01       	movw	r10, r24

    uint8_t byte_mask = 0xE0; // Mask for lower part of identifier
    uint8_t length_mask = 0x0F; // Mask for message length register

    // Reading the identifier higher byte
    unsigned int identifier_high = mcp_read(MCP_RXB0SIDH);
     488:	81 e6       	ldi	r24, 0x61	; 97
     48a:	0e 94 3f 03 	call	0x67e	; 0x67e <mcp_read>
     48e:	c8 2e       	mov	r12, r24
     490:	d1 2c       	mov	r13, r1
    identifier_high = (identifier_high << 8 );

    // Reading the identifier lower byte
    uint8_t identifier_low = mcp_read(MCP_RXB0SIDL);
     492:	82 e6       	ldi	r24, 0x62	; 98
     494:	0e 94 3f 03 	call	0x67e	; 0x67e <mcp_read>
    identifier_low &= byte_mask;

    message.identifier = identifier_low + identifier_high;
     498:	dc 2c       	mov	r13, r12
     49a:	cc 24       	eor	r12, r12
     49c:	80 7e       	andi	r24, 0xE0	; 224
     49e:	c8 0e       	add	r12, r24
     4a0:	d1 1c       	adc	r13, r1

    // Reading the message length
    message.data_length = mcp_read(MCP_RXB0DLC)&length_mask;
     4a2:	85 e6       	ldi	r24, 0x65	; 101
     4a4:	0e 94 3f 03 	call	0x67e	; 0x67e <mcp_read>
     4a8:	8f 70       	andi	r24, 0x0F	; 15
     4aa:	98 2e       	mov	r9, r24

    // Reading the data in the message
    for(uint8_t i = 0; i < message.data_length; i++){
     4ac:	81 f0       	breq	.+32     	; 0x4ce <CAN_meessage_reception+0x6e>
     4ae:	7e 01       	movw	r14, r28
     4b0:	84 e0       	ldi	r24, 0x04	; 4
     4b2:	e8 0e       	add	r14, r24
     4b4:	f1 1c       	adc	r15, r1
     4b6:	06 e6       	ldi	r16, 0x66	; 102
     4b8:	09 0d       	add	r16, r9
     4ba:	16 e6       	ldi	r17, 0x66	; 102
        (message.data)[i] = mcp_read(MCP_RXB0DM +i);
     4bc:	81 2f       	mov	r24, r17
     4be:	0e 94 3f 03 	call	0x67e	; 0x67e <mcp_read>
     4c2:	f7 01       	movw	r30, r14
     4c4:	81 93       	st	Z+, r24
     4c6:	7f 01       	movw	r14, r30
     4c8:	1f 5f       	subi	r17, 0xFF	; 255

    // Reading the message length
    message.data_length = mcp_read(MCP_RXB0DLC)&length_mask;

    // Reading the data in the message
    for(uint8_t i = 0; i < message.data_length; i++){
     4ca:	10 13       	cpse	r17, r16
     4cc:	f7 cf       	rjmp	.-18     	; 0x4bc <CAN_meessage_reception+0x5c>
        (message.data)[i] = mcp_read(MCP_RXB0DM +i);
    }
    
    return message;
     4ce:	da 82       	std	Y+2, r13	; 0x02
     4d0:	c9 82       	std	Y+1, r12	; 0x01
     4d2:	9b 82       	std	Y+3, r9	; 0x03
     4d4:	8b e0       	ldi	r24, 0x0B	; 11
     4d6:	fe 01       	movw	r30, r28
     4d8:	31 96       	adiw	r30, 0x01	; 1
     4da:	d5 01       	movw	r26, r10
     4dc:	01 90       	ld	r0, Z+
     4de:	0d 92       	st	X+, r0
     4e0:	8a 95       	dec	r24
     4e2:	e1 f7       	brne	.-8      	; 0x4dc <CAN_meessage_reception+0x7c>
}
     4e4:	c5 01       	movw	r24, r10
     4e6:	2b 96       	adiw	r28, 0x0b	; 11
     4e8:	0f b6       	in	r0, 0x3f	; 63
     4ea:	f8 94       	cli
     4ec:	de bf       	out	0x3e, r29	; 62
     4ee:	0f be       	out	0x3f, r0	; 63
     4f0:	cd bf       	out	0x3d, r28	; 61
     4f2:	df 91       	pop	r29
     4f4:	cf 91       	pop	r28
     4f6:	1f 91       	pop	r17
     4f8:	0f 91       	pop	r16
     4fa:	ff 90       	pop	r15
     4fc:	ef 90       	pop	r14
     4fe:	df 90       	pop	r13
     500:	cf 90       	pop	r12
     502:	bf 90       	pop	r11
     504:	af 90       	pop	r10
     506:	9f 90       	pop	r9
     508:	08 95       	ret

0000050a <CAN_meessage_reception2>:

CAN_message_t CAN_meessage_reception2(){
     50a:	9f 92       	push	r9
     50c:	af 92       	push	r10
     50e:	bf 92       	push	r11
     510:	cf 92       	push	r12
     512:	df 92       	push	r13
     514:	ef 92       	push	r14
     516:	ff 92       	push	r15
     518:	0f 93       	push	r16
     51a:	1f 93       	push	r17
     51c:	cf 93       	push	r28
     51e:	df 93       	push	r29
     520:	cd b7       	in	r28, 0x3d	; 61
     522:	de b7       	in	r29, 0x3e	; 62
     524:	2b 97       	sbiw	r28, 0x0b	; 11
     526:	0f b6       	in	r0, 0x3f	; 63
     528:	f8 94       	cli
     52a:	de bf       	out	0x3e, r29	; 62
     52c:	0f be       	out	0x3f, r0	; 63
     52e:	cd bf       	out	0x3d, r28	; 61
     530:	5c 01       	movw	r10, r24

    uint8_t byte_mask = 0xE0;   // Mask for lower part of identifier
    uint8_t length_mask = 0x0F; // Mask for message length register

    // Reading the identifier higher byte
    unsigned int identifier_high = mcp_read(MCP_RXB1SIDH);
     532:	81 e7       	ldi	r24, 0x71	; 113
     534:	0e 94 3f 03 	call	0x67e	; 0x67e <mcp_read>
     538:	c8 2e       	mov	r12, r24
     53a:	d1 2c       	mov	r13, r1
    identifier_high = (identifier_high << 8 );

    // Reading the identifier lower byte
    uint8_t identifier_low = mcp_read(MCP_RXB0SIDL + 16);
     53c:	82 e7       	ldi	r24, 0x72	; 114
     53e:	0e 94 3f 03 	call	0x67e	; 0x67e <mcp_read>
    identifier_low &= byte_mask;

    message.identifier = identifier_low + identifier_high;
     542:	dc 2c       	mov	r13, r12
     544:	cc 24       	eor	r12, r12
     546:	80 7e       	andi	r24, 0xE0	; 224
     548:	c8 0e       	add	r12, r24
     54a:	d1 1c       	adc	r13, r1

    // Reading the message length
    message.data_length = mcp_read(MCP_RXB0DLC + 16)&length_mask;
     54c:	85 e7       	ldi	r24, 0x75	; 117
     54e:	0e 94 3f 03 	call	0x67e	; 0x67e <mcp_read>
     552:	8f 70       	andi	r24, 0x0F	; 15
     554:	98 2e       	mov	r9, r24

    // Reading the data in the message
    for(uint8_t i = 0; i < message.data_length; i++){
     556:	81 f0       	breq	.+32     	; 0x578 <CAN_meessage_reception2+0x6e>
     558:	7e 01       	movw	r14, r28
     55a:	84 e0       	ldi	r24, 0x04	; 4
     55c:	e8 0e       	add	r14, r24
     55e:	f1 1c       	adc	r15, r1
     560:	06 e7       	ldi	r16, 0x76	; 118
     562:	09 0d       	add	r16, r9
     564:	16 e7       	ldi	r17, 0x76	; 118
        (message.data)[i] = mcp_read(MCP_RXB0DM +i + 16);
     566:	81 2f       	mov	r24, r17
     568:	0e 94 3f 03 	call	0x67e	; 0x67e <mcp_read>
     56c:	f7 01       	movw	r30, r14
     56e:	81 93       	st	Z+, r24
     570:	7f 01       	movw	r14, r30
     572:	1f 5f       	subi	r17, 0xFF	; 255

    // Reading the message length
    message.data_length = mcp_read(MCP_RXB0DLC + 16)&length_mask;

    // Reading the data in the message
    for(uint8_t i = 0; i < message.data_length; i++){
     574:	10 13       	cpse	r17, r16
     576:	f7 cf       	rjmp	.-18     	; 0x566 <CAN_meessage_reception2+0x5c>
        (message.data)[i] = mcp_read(MCP_RXB0DM +i + 16);
    }
    
    return message;
     578:	da 82       	std	Y+2, r13	; 0x02
     57a:	c9 82       	std	Y+1, r12	; 0x01
     57c:	9b 82       	std	Y+3, r9	; 0x03
     57e:	8b e0       	ldi	r24, 0x0B	; 11
     580:	fe 01       	movw	r30, r28
     582:	31 96       	adiw	r30, 0x01	; 1
     584:	d5 01       	movw	r26, r10
     586:	01 90       	ld	r0, Z+
     588:	0d 92       	st	X+, r0
     58a:	8a 95       	dec	r24
     58c:	e1 f7       	brne	.-8      	; 0x586 <CAN_meessage_reception2+0x7c>
}
     58e:	c5 01       	movw	r24, r10
     590:	2b 96       	adiw	r28, 0x0b	; 11
     592:	0f b6       	in	r0, 0x3f	; 63
     594:	f8 94       	cli
     596:	de bf       	out	0x3e, r29	; 62
     598:	0f be       	out	0x3f, r0	; 63
     59a:	cd bf       	out	0x3d, r28	; 61
     59c:	df 91       	pop	r29
     59e:	cf 91       	pop	r28
     5a0:	1f 91       	pop	r17
     5a2:	0f 91       	pop	r16
     5a4:	ff 90       	pop	r15
     5a6:	ef 90       	pop	r14
     5a8:	df 90       	pop	r13
     5aa:	cf 90       	pop	r12
     5ac:	bf 90       	pop	r11
     5ae:	af 90       	pop	r10
     5b0:	9f 90       	pop	r9
     5b2:	08 95       	ret

000005b4 <message_handler>:

CAN_message_t message_handler(){
     5b4:	cf 93       	push	r28
     5b6:	df 93       	push	r29
     5b8:	ec 01       	movw	r28, r24
    CAN_message_t message;
    
    // Checks if buffer 1 is full
    if(mcp_read(MCP_CANINTF) && 0x01){
     5ba:	8c e2       	ldi	r24, 0x2C	; 44
     5bc:	0e 94 3f 03 	call	0x67e	; 0x67e <mcp_read>
     5c0:	88 23       	and	r24, r24
     5c2:	d1 f0       	breq	.+52     	; 0x5f8 <message_handler+0x44>
        message = CAN_meessage_reception(); //reads buffer 2 register
     5c4:	ce 01       	movw	r24, r28
     5c6:	0e 94 30 02 	call	0x460	; 0x460 <CAN_meessage_reception>
        printf("i reception nr1 \r\n");
     5ca:	8a e0       	ldi	r24, 0x0A	; 10
     5cc:	91 e0       	ldi	r25, 0x01	; 1
     5ce:	0e 94 64 05 	call	0xac8	; 0xac8 <puts>

        mcp_bit_modify(MCP_CANINTF, 1, 0);  // resets can interrupt flag bit for buffer 1
     5d2:	40 e0       	ldi	r20, 0x00	; 0
     5d4:	61 e0       	ldi	r22, 0x01	; 1
     5d6:	8c e2       	ldi	r24, 0x2C	; 44
     5d8:	0e 94 99 03 	call	0x732	; 0x732 <mcp_bit_modify>
        if(!(mcp_read(MCP_CANINTF) && 2)   ){
     5dc:	8c e2       	ldi	r24, 0x2C	; 44
     5de:	0e 94 3f 03 	call	0x67e	; 0x67e <mcp_read>
     5e2:	81 11       	cpse	r24, r1
     5e4:	27 c0       	rjmp	.+78     	; 0x634 <message_handler+0x80>
            printf("er i if nr1 \r\n");
     5e6:	8c e1       	ldi	r24, 0x1C	; 28
     5e8:	91 e0       	ldi	r25, 0x01	; 1
     5ea:	0e 94 64 05 	call	0xac8	; 0xac8 <puts>
            flag = 0;
     5ee:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <__data_end+0x1>
     5f2:	10 92 b2 02 	sts	0x02B2, r1	; 0x8002b2 <__data_end>
     5f6:	1e c0       	rjmp	.+60     	; 0x634 <message_handler+0x80>
        }
    }
    
    // Checks if buffer 2 is full
    else if(mcp_read(MCP_CANINTF) && 0x02){
     5f8:	8c e2       	ldi	r24, 0x2C	; 44
     5fa:	0e 94 3f 03 	call	0x67e	; 0x67e <mcp_read>
     5fe:	88 23       	and	r24, r24
     600:	c9 f0       	breq	.+50     	; 0x634 <message_handler+0x80>
        message = CAN_meessage_reception2();  //reads buffer 2 register
     602:	ce 01       	movw	r24, r28
     604:	0e 94 85 02 	call	0x50a	; 0x50a <CAN_meessage_reception2>
         printf("i reception nr2 \r\n");
     608:	8a e2       	ldi	r24, 0x2A	; 42
     60a:	91 e0       	ldi	r25, 0x01	; 1
     60c:	0e 94 64 05 	call	0xac8	; 0xac8 <puts>

        mcp_bit_modify(MCP_CANINTF, 2, 0);    // resets can interrupt flag bit for buffer 2
     610:	40 e0       	ldi	r20, 0x00	; 0
     612:	62 e0       	ldi	r22, 0x02	; 2
     614:	8c e2       	ldi	r24, 0x2C	; 44
     616:	0e 94 99 03 	call	0x732	; 0x732 <mcp_bit_modify>
        if(!(mcp_read(MCP_CANINTF) && 1)   ){ 
     61a:	8c e2       	ldi	r24, 0x2C	; 44
     61c:	0e 94 3f 03 	call	0x67e	; 0x67e <mcp_read>
     620:	81 11       	cpse	r24, r1
     622:	08 c0       	rjmp	.+16     	; 0x634 <message_handler+0x80>
            printf("er i if nr2 \r\n");
     624:	8c e3       	ldi	r24, 0x3C	; 60
     626:	91 e0       	ldi	r25, 0x01	; 1
     628:	0e 94 64 05 	call	0xac8	; 0xac8 <puts>
            flag = 0; 
     62c:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <__data_end+0x1>
     630:	10 92 b2 02 	sts	0x02B2, r1	; 0x8002b2 <__data_end>
        }
    }
    
return message;
}
     634:	ce 01       	movw	r24, r28
     636:	df 91       	pop	r29
     638:	cf 91       	pop	r28
     63a:	08 95       	ret

0000063c <spi_master_CS>:

void spi_master_CS(unsigned char state){

    //DDR_SPI |= (1 << SS);

    if(!state) {
     63c:	81 11       	cpse	r24, r1
     63e:	02 c0       	rjmp	.+4      	; 0x644 <spi_master_CS+0x8>
        //Lower CS pin
        PORT_SPI &= ~(1 << SS);
     640:	c4 98       	cbi	0x18, 4	; 24
     642:	08 95       	ret
        }
    else {
        // Set CS pin
        PORT_SPI |= (1 << SS);
     644:	c4 9a       	sbi	0x18, 4	; 24
     646:	08 95       	ret

00000648 <mcp_write>:

void mcp_set_mode(uint8_t mode){
    mcp_write(MCP_CANCTRL, mode);
}

void mcp_write(uint8_t adrs, uint8_t value){
     648:	cf 93       	push	r28
     64a:	df 93       	push	r29
     64c:	d8 2f       	mov	r29, r24
     64e:	c6 2f       	mov	r28, r22

    spi_master_CS(0); //Select CAN controller
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	0e 94 1e 03 	call	0x63c	; 0x63c <spi_master_CS>

    spi_write(MCP_WRITE); // Instruction
     656:	82 e0       	ldi	r24, 0x02	; 2
     658:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <spi_write>
    spi_write(adrs);    //Adress
     65c:	8d 2f       	mov	r24, r29
     65e:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <spi_write>
    spi_write(value);   // Data
     662:	8c 2f       	mov	r24, r28
     664:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <spi_write>

    spi_master_CS(1); //Deselect CAN controller
     668:	81 e0       	ldi	r24, 0x01	; 1
     66a:	0e 94 1e 03 	call	0x63c	; 0x63c <spi_master_CS>
}
     66e:	df 91       	pop	r29
     670:	cf 91       	pop	r28
     672:	08 95       	ret

00000674 <mcp_set_mode>:

    return 0;
}

void mcp_set_mode(uint8_t mode){
    mcp_write(MCP_CANCTRL, mode);
     674:	68 2f       	mov	r22, r24
     676:	8f e0       	ldi	r24, 0x0F	; 15
     678:	0e 94 24 03 	call	0x648	; 0x648 <mcp_write>
     67c:	08 95       	ret

0000067e <mcp_read>:

    spi_master_CS(1); //Deselect CAN controller
}


uint8_t mcp_read(uint8_t adrs){
     67e:	cf 93       	push	r28
     680:	c8 2f       	mov	r28, r24
   uint8_t result;

   spi_master_CS(0);
     682:	80 e0       	ldi	r24, 0x00	; 0
     684:	0e 94 1e 03 	call	0x63c	; 0x63c <spi_master_CS>

   spi_write(MCP_READ); //Instruction
     688:	83 e0       	ldi	r24, 0x03	; 3
     68a:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <spi_write>
   spi_write(adrs); // Adress
     68e:	8c 2f       	mov	r24, r28
     690:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <spi_write>
   result =  spi_read(); //Read return value
     694:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <spi_read>
     698:	c8 2f       	mov	r28, r24

   spi_master_CS(1);
     69a:	81 e0       	ldi	r24, 0x01	; 1
     69c:	0e 94 1e 03 	call	0x63c	; 0x63c <spi_master_CS>

   return result;
}
     6a0:	8c 2f       	mov	r24, r28
     6a2:	cf 91       	pop	r28
     6a4:	08 95       	ret

000006a6 <mcp_reset>:
        }
}

void mcp_reset(){

    spi_master_CS(0);
     6a6:	80 e0       	ldi	r24, 0x00	; 0
     6a8:	0e 94 1e 03 	call	0x63c	; 0x63c <spi_master_CS>
    spi_write(MCP_RESET);
     6ac:	80 ec       	ldi	r24, 0xC0	; 192
     6ae:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <spi_write>
    
    spi_master_CS(1);
     6b2:	81 e0       	ldi	r24, 0x01	; 1
     6b4:	0e 94 1e 03 	call	0x63c	; 0x63c <spi_master_CS>
     6b8:	08 95       	ret

000006ba <mcp_init>:
 */

#include "mcp2515_driver.h"


uint8_t mcp_init(uint8_t mode){
     6ba:	cf 93       	push	r28
     6bc:	df 93       	push	r29
     6be:	d8 2f       	mov	r29, r24
    uint8_t value;

    spi_init();
     6c0:	0e 94 e5 04 	call	0x9ca	; 0x9ca <spi_init>
    
    mcp_reset();
     6c4:	0e 94 53 03 	call	0x6a6	; 0x6a6 <mcp_reset>
    mcp_set_mode(MODE_CONFIG);
     6c8:	80 e8       	ldi	r24, 0x80	; 128
     6ca:	0e 94 3a 03 	call	0x674	; 0x674 <mcp_set_mode>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6ce:	8f ef       	ldi	r24, 0xFF	; 255
     6d0:	9f e8       	ldi	r25, 0x8F	; 143
     6d2:	01 97       	sbiw	r24, 0x01	; 1
     6d4:	f1 f7       	brne	.-4      	; 0x6d2 <mcp_init+0x18>
     6d6:	00 c0       	rjmp	.+0      	; 0x6d8 <mcp_init+0x1e>
     6d8:	00 00       	nop
    _delay_ms(30);
    value = mcp_read(MCP_CANSTAT);
     6da:	8e e0       	ldi	r24, 0x0E	; 14
     6dc:	0e 94 3f 03 	call	0x67e	; 0x67e <mcp_read>
     6e0:	c8 2f       	mov	r28, r24
    printf("value is %d", value);
     6e2:	1f 92       	push	r1
     6e4:	8f 93       	push	r24
     6e6:	83 ef       	ldi	r24, 0xF3	; 243
     6e8:	91 e0       	ldi	r25, 0x01	; 1
     6ea:	9f 93       	push	r25
     6ec:	8f 93       	push	r24
     6ee:	0e 94 4e 05 	call	0xa9c	; 0xa9c <printf>
    if((value & MODE_MASK) != MODE_CONFIG){
     6f2:	c0 7e       	andi	r28, 0xE0	; 224
     6f4:	0f 90       	pop	r0
     6f6:	0f 90       	pop	r0
     6f8:	0f 90       	pop	r0
     6fa:	0f 90       	pop	r0
     6fc:	c0 38       	cpi	r28, 0x80	; 128
     6fe:	31 f0       	breq	.+12     	; 0x70c <mcp_init+0x52>
        printf("MCP2515 is NOT in configuration mode after reset!\n");
     700:	8f ef       	ldi	r24, 0xFF	; 255
     702:	91 e0       	ldi	r25, 0x01	; 1
     704:	0e 94 64 05 	call	0xac8	; 0xac8 <puts>
        return 1;
     708:	81 e0       	ldi	r24, 0x01	; 1
     70a:	10 c0       	rjmp	.+32     	; 0x72c <mcp_init+0x72>
    }

    mcp_set_mode(mode);
     70c:	8d 2f       	mov	r24, r29
     70e:	0e 94 3a 03 	call	0x674	; 0x674 <mcp_set_mode>

    value = mcp_read(MCP_CANSTAT);
     712:	8e e0       	ldi	r24, 0x0E	; 14
     714:	0e 94 3f 03 	call	0x67e	; 0x67e <mcp_read>
    if((value & MODE_MASK) != mode){
     718:	80 7e       	andi	r24, 0xE0	; 224
     71a:	8d 17       	cp	r24, r29
     71c:	31 f0       	breq	.+12     	; 0x72a <mcp_init+0x70>
        printf("MCP2515 is NOT in the specified mode after initialization!\n");
     71e:	81 e3       	ldi	r24, 0x31	; 49
     720:	92 e0       	ldi	r25, 0x02	; 2
     722:	0e 94 64 05 	call	0xac8	; 0xac8 <puts>
        return 1;
     726:	81 e0       	ldi	r24, 0x01	; 1
     728:	01 c0       	rjmp	.+2      	; 0x72c <mcp_init+0x72>
    }

    return 0;
     72a:	80 e0       	ldi	r24, 0x00	; 0
}
     72c:	df 91       	pop	r29
     72e:	cf 91       	pop	r28
     730:	08 95       	ret

00000732 <mcp_bit_modify>:
    
    spi_master_CS(1);
}


void mcp_bit_modify(uint8_t adrs, uint8_t mask_byte, uint8_t data_byte){
     732:	1f 93       	push	r17
     734:	cf 93       	push	r28
     736:	df 93       	push	r29
     738:	18 2f       	mov	r17, r24
     73a:	d6 2f       	mov	r29, r22
     73c:	c4 2f       	mov	r28, r20
    spi_master_CS(0);
     73e:	80 e0       	ldi	r24, 0x00	; 0
     740:	0e 94 1e 03 	call	0x63c	; 0x63c <spi_master_CS>

    // Not all registers can be accessed with this command
    spi_write(MCP_BITMOD);
     744:	85 e0       	ldi	r24, 0x05	; 5
     746:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <spi_write>
    spi_write(adrs);
     74a:	81 2f       	mov	r24, r17
     74c:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <spi_write>
    spi_write(mask_byte);
     750:	8d 2f       	mov	r24, r29
     752:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <spi_write>
    spi_write(data_byte);
     756:	8c 2f       	mov	r24, r28
     758:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <spi_write>

    spi_master_CS(1);
     75c:	81 e0       	ldi	r24, 0x01	; 1
     75e:	0e 94 1e 03 	call	0x63c	; 0x63c <spi_master_CS>

}
     762:	df 91       	pop	r29
     764:	cf 91       	pop	r28
     766:	1f 91       	pop	r17
     768:	08 95       	ret

0000076a <oled_sel_row>:
void write_cmd(uint8_t cmd){
    oled_write_cmd[0] = cmd;      // @SRAM location
}

void oled_sel_row(uint8_t page){
    oled_position.row = page;
     76a:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <oled_position>
    page = page % 8;
    write_cmd(0xB0 + page);
     76e:	87 70       	andi	r24, 0x07	; 7
     770:	80 55       	subi	r24, 0x50	; 80
void write_data(uint8_t data){
    oled_write_data[0] = data;      // @SRAM location
}

void write_cmd(uint8_t cmd){
    oled_write_cmd[0] = cmd;      // @SRAM location
     772:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     776:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     77a:	80 83       	st	Z, r24
     77c:	08 95       	ret

0000077e <oled_sel_col>:
    oled_position.row = page;
    page = page % 8;
    write_cmd(0xB0 + page);
}
void oled_sel_col(uint8_t col){
    oled_position.col = col;
     77e:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <oled_position+0x1>
    uint8_t numLow = col % 16;
     782:	98 2f       	mov	r25, r24
     784:	9f 70       	andi	r25, 0x0F	; 15
void write_data(uint8_t data){
    oled_write_data[0] = data;      // @SRAM location
}

void write_cmd(uint8_t cmd){
    oled_write_cmd[0] = cmd;      // @SRAM location
     786:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     78a:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     78e:	90 83       	st	Z, r25
    oled_position.col = col;
    uint8_t numLow = col % 16;
	uint8_t numHigh = col / 16;

	write_cmd(numLow);
	write_cmd(16 + numHigh);
     790:	82 95       	swap	r24
     792:	8f 70       	andi	r24, 0x0F	; 15
     794:	80 5f       	subi	r24, 0xF0	; 240
void write_data(uint8_t data){
    oled_write_data[0] = data;      // @SRAM location
}

void write_cmd(uint8_t cmd){
    oled_write_cmd[0] = cmd;      // @SRAM location
     796:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     79a:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     79e:	80 83       	st	Z, r24
     7a0:	08 95       	ret

000007a2 <oled_line_down>:
}
void oled_home(void){
     oled_pos_set(0,0);
}
void oled_line_down(uint8_t lineNR){
    write_cmd(0xB0 + lineNR);
     7a2:	80 55       	subi	r24, 0x50	; 80
void write_data(uint8_t data){
    oled_write_data[0] = data;      // @SRAM location
}

void write_cmd(uint8_t cmd){
    oled_write_cmd[0] = cmd;      // @SRAM location
     7a4:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     7a8:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     7ac:	80 83       	st	Z, r24
     7ae:	08 95       	ret

000007b0 <oled_pos_set>:
   }
    oled_home();
}


void oled_pos_set(uint8_t row, uint8_t col){
     7b0:	cf 93       	push	r28
     7b2:	c6 2f       	mov	r28, r22
    oled_sel_row(row);
     7b4:	0e 94 b5 03 	call	0x76a	; 0x76a <oled_sel_row>
    oled_sel_col(col);
     7b8:	8c 2f       	mov	r24, r28
     7ba:	0e 94 bf 03 	call	0x77e	; 0x77e <oled_sel_col>
}
     7be:	cf 91       	pop	r28
     7c0:	08 95       	ret

000007c2 <oled_home>:
	write_cmd(numLow);
	write_cmd(16 + numHigh);

}
void oled_home(void){
     oled_pos_set(0,0);
     7c2:	60 e0       	ldi	r22, 0x00	; 0
     7c4:	80 e0       	ldi	r24, 0x00	; 0
     7c6:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <oled_pos_set>
     7ca:	08 95       	ret

000007cc <oled_clear>:
}
void oled_line_down(uint8_t lineNR){
    write_cmd(0xB0 + lineNR);
}
void oled_clear(void){
     7cc:	1f 93       	push	r17
     7ce:	cf 93       	push	r28
     7d0:	df 93       	push	r29
   for(uint8_t i = 0; i < 8; i++){      // page select
     7d2:	10 e0       	ldi	r17, 0x00	; 0
     7d4:	c8 e7       	ldi	r28, 0x78	; 120
     7d6:	d0 e0       	ldi	r29, 0x00	; 0
        oled_line_down(i);
     7d8:	81 2f       	mov	r24, r17
     7da:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <oled_line_down>
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	0d c0       	rjmp	.+26     	; 0x7fc <oled_clear+0x30>
        for(uint8_t j = 0; j < 128; j++){
                for(uint8_t k = 0; k < 8; k++){
                write_data(pgm_read_byte( &(font8[0][k] ) ) );   // gets blank spaces from font.h //
     7e2:	84 91       	lpm	r24, Z
    oled_clear();
    oled_home();
}

void write_data(uint8_t data){
    oled_write_data[0] = data;      // @SRAM location
     7e4:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <oled_write_data>
     7e8:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <oled_write_data+0x1>
     7ec:	8c 93       	st	X, r24
     7ee:	31 96       	adiw	r30, 0x01	; 1
}
void oled_clear(void){
   for(uint8_t i = 0; i < 8; i++){      // page select
        oled_line_down(i);
        for(uint8_t j = 0; j < 128; j++){
                for(uint8_t k = 0; k < 8; k++){
     7f0:	ec 17       	cp	r30, r28
     7f2:	fd 07       	cpc	r31, r29
     7f4:	b1 f7       	brne	.-20     	; 0x7e2 <oled_clear+0x16>
    write_cmd(0xB0 + lineNR);
}
void oled_clear(void){
   for(uint8_t i = 0; i < 8; i++){      // page select
        oled_line_down(i);
        for(uint8_t j = 0; j < 128; j++){
     7f6:	9f 5f       	subi	r25, 0xFF	; 255
     7f8:	90 38       	cpi	r25, 0x80	; 128
     7fa:	19 f0       	breq	.+6      	; 0x802 <oled_clear+0x36>
     7fc:	e0 e7       	ldi	r30, 0x70	; 112
     7fe:	f0 e0       	ldi	r31, 0x00	; 0
     800:	f0 cf       	rjmp	.-32     	; 0x7e2 <oled_clear+0x16>
}
void oled_line_down(uint8_t lineNR){
    write_cmd(0xB0 + lineNR);
}
void oled_clear(void){
   for(uint8_t i = 0; i < 8; i++){      // page select
     802:	1f 5f       	subi	r17, 0xFF	; 255
     804:	18 30       	cpi	r17, 0x08	; 8
     806:	41 f7       	brne	.-48     	; 0x7d8 <oled_clear+0xc>
               //     ext_oledData[0] = pgm_read_byte( &(font8[0][k] ) );
                }
            //
        }
   }
    oled_home();
     808:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <oled_home>
}
     80c:	df 91       	pop	r29
     80e:	cf 91       	pop	r28
     810:	1f 91       	pop	r17
     812:	08 95       	ret

00000814 <OLED_init>:
void write_data(uint8_t data){
    oled_write_data[0] = data;      // @SRAM location
}

void write_cmd(uint8_t cmd){
    oled_write_cmd[0] = cmd;      // @SRAM location
     814:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     818:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     81c:	8e ea       	ldi	r24, 0xAE	; 174
     81e:	80 83       	st	Z, r24
     820:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     824:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     828:	81 ea       	ldi	r24, 0xA1	; 161
     82a:	80 83       	st	Z, r24
     82c:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     830:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     834:	8a ed       	ldi	r24, 0xDA	; 218
     836:	80 83       	st	Z, r24
     838:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     83c:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     840:	82 e1       	ldi	r24, 0x12	; 18
     842:	80 83       	st	Z, r24
     844:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     848:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     84c:	88 ec       	ldi	r24, 0xC8	; 200
     84e:	80 83       	st	Z, r24
     850:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     854:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     858:	88 ea       	ldi	r24, 0xA8	; 168
     85a:	80 83       	st	Z, r24
     85c:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     860:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     864:	8f e3       	ldi	r24, 0x3F	; 63
     866:	80 83       	st	Z, r24
     868:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     86c:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     870:	85 ed       	ldi	r24, 0xD5	; 213
     872:	80 83       	st	Z, r24
     874:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     878:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     87c:	80 e8       	ldi	r24, 0x80	; 128
     87e:	80 83       	st	Z, r24
     880:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     884:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     888:	81 e8       	ldi	r24, 0x81	; 129
     88a:	80 83       	st	Z, r24
     88c:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     890:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     894:	80 e5       	ldi	r24, 0x50	; 80
     896:	80 83       	st	Z, r24
     898:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     89c:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     8a0:	89 ed       	ldi	r24, 0xD9	; 217
     8a2:	80 83       	st	Z, r24
     8a4:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     8a8:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     8ac:	81 e2       	ldi	r24, 0x21	; 33
     8ae:	80 83       	st	Z, r24
     8b0:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     8b4:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     8b8:	80 e2       	ldi	r24, 0x20	; 32
     8ba:	80 83       	st	Z, r24
     8bc:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     8c0:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     8c4:	82 e0       	ldi	r24, 0x02	; 2
     8c6:	80 83       	st	Z, r24
     8c8:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     8cc:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     8d0:	8b ed       	ldi	r24, 0xDB	; 219
     8d2:	80 83       	st	Z, r24
     8d4:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     8d8:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     8dc:	80 e3       	ldi	r24, 0x30	; 48
     8de:	80 83       	st	Z, r24
     8e0:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     8e4:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     8e8:	8d ea       	ldi	r24, 0xAD	; 173
     8ea:	80 83       	st	Z, r24
     8ec:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     8f0:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     8f4:	10 82       	st	Z, r1
     8f6:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     8fa:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     8fe:	84 ea       	ldi	r24, 0xA4	; 164
     900:	80 83       	st	Z, r24
     902:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     906:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     90a:	86 ea       	ldi	r24, 0xA6	; 166
     90c:	80 83       	st	Z, r24
     90e:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     912:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     916:	8f ea       	ldi	r24, 0xAF	; 175
     918:	80 83       	st	Z, r24
    write_cmd(0x00);
    write_cmd(0xa4); //out follows RAM content
    write_cmd(0xa6); //set normal display
    write_cmd(0xaf); // display on

    oled_clear();
     91a:	0e 94 e6 03 	call	0x7cc	; 0x7cc <oled_clear>
    oled_home();
     91e:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <oled_home>
     922:	08 95       	ret

00000924 <pos_readSettings>:
    }
}

void pos_readSettings(void){
	
	DDRB &= ~(1 << PB1);
     924:	b9 98       	cbi	0x17, 1	; 23
	DDRD &= ~(1 << PD4);
     926:	8c 98       	cbi	0x11, 4	; 17
	DDRD &= ~(1 << PD5);
     928:	8d 98       	cbi	0x11, 5	; 17

	PORTB |= (1 << PB1); // internal pull up enable
     92a:	c1 9a       	sbi	0x18, 1	; 24
     92c:	08 95       	ret

0000092e <main>:
#include "CAN_communication.h"
#include "CAN_joystick_messages.h"


int main(void)
{
     92e:	cf 93       	push	r28
     930:	df 93       	push	r29
     932:	cd b7       	in	r28, 0x3d	; 61
     934:	de b7       	in	r29, 0x3e	; 62
     936:	2b 97       	sbiw	r28, 0x0b	; 11
     938:	0f b6       	in	r0, 0x3f	; 63
     93a:	f8 94       	cli
     93c:	de bf       	out	0x3e, r29	; 62
     93e:	0f be       	out	0x3f, r0	; 63
     940:	cd bf       	out	0x3d, r28	; 61
    
    SRAM_init();
     942:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <SRAM_init>
    ADC_timer_init();
     946:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ADC_timer_init>
    USART_init();
     94a:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <USART_init>
    fdevopen(USART_send, USART_receive);
     94e:	6b ef       	ldi	r22, 0xFB	; 251
     950:	74 e0       	ldi	r23, 0x04	; 4
     952:	8f ef       	ldi	r24, 0xFF	; 255
     954:	94 e0       	ldi	r25, 0x04	; 4
     956:	0e 94 03 05 	call	0xa06	; 0xa06 <fdevopen>
    ADC_calibrate(&P_cal);
     95a:	84 eb       	ldi	r24, 0xB4	; 180
     95c:	92 e0       	ldi	r25, 0x02	; 2
     95e:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <ADC_calibrate>
    OLED_init();
     962:	0e 94 0a 04 	call	0x814	; 0x814 <OLED_init>
    pos_readSettings();
     966:	0e 94 92 04 	call	0x924	; 0x924 <pos_readSettings>
    oled_clear();
     96a:	0e 94 e6 03 	call	0x7cc	; 0x7cc <oled_clear>
	CAN_init(MODE_NORMAL);
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	0e 94 f7 01 	call	0x3ee	; 0x3ee <CAN_init>
//    CAN_communication_test();
 //   _delay_ms(1000);
//    CAN_communication_test2();

    CAN_message_t recieve_message;
    printf("Initiating node 1 \n\r");
     974:	8c e6       	ldi	r24, 0x6C	; 108
     976:	92 e0       	ldi	r25, 0x02	; 2
     978:	9f 93       	push	r25
     97a:	8f 93       	push	r24
     97c:	0e 94 4e 05 	call	0xa9c	; 0xa9c <printf>
     980:	0f 90       	pop	r0
     982:	0f 90       	pop	r0
    while (1) {
     
        recieve_message = message_handler();
        
        if(recieve_message.data[0] > 0){
        printf("Lengden er : %d\n\r Dataen er: %d\n\r ID'en er: %d\n\r", recieve_message.data_length, recieve_message.data[0], recieve_message.data_length);
     984:	01 e8       	ldi	r16, 0x81	; 129
     986:	12 e0       	ldi	r17, 0x02	; 2
    CAN_message_t recieve_message;
    printf("Initiating node 1 \n\r");
    
    while (1) {
     
        recieve_message = message_handler();
     988:	ce 01       	movw	r24, r28
     98a:	01 96       	adiw	r24, 0x01	; 1
     98c:	0e 94 da 02 	call	0x5b4	; 0x5b4 <message_handler>
     990:	8c 81       	ldd	r24, Y+4	; 0x04
        
        if(recieve_message.data[0] > 0){
     992:	88 23       	and	r24, r24
     994:	c9 f3       	breq	.-14     	; 0x988 <main+0x5a>
        printf("Lengden er : %d\n\r Dataen er: %d\n\r ID'en er: %d\n\r", recieve_message.data_length, recieve_message.data[0], recieve_message.data_length);
     996:	9b 81       	ldd	r25, Y+3	; 0x03
     998:	1f 92       	push	r1
     99a:	9f 93       	push	r25
     99c:	1f 92       	push	r1
     99e:	8f 93       	push	r24
     9a0:	1f 92       	push	r1
     9a2:	9f 93       	push	r25
     9a4:	1f 93       	push	r17
     9a6:	0f 93       	push	r16
     9a8:	0e 94 4e 05 	call	0xa9c	; 0xa9c <printf>
     9ac:	0f b6       	in	r0, 0x3f	; 63
     9ae:	f8 94       	cli
     9b0:	de bf       	out	0x3e, r29	; 62
     9b2:	0f be       	out	0x3f, r0	; 63
     9b4:	cd bf       	out	0x3d, r28	; 61
     9b6:	e8 cf       	rjmp	.-48     	; 0x988 <main+0x5a>

000009b8 <spi_write>:
#include "spi_driver.h"


void spi_write(char data){

    SPDR = data;
     9b8:	8f b9       	out	0x0f, r24	; 15
    while( !(SPSR & (1<<SPIF)) );
     9ba:	77 9b       	sbis	0x0e, 7	; 14
     9bc:	fe cf       	rjmp	.-4      	; 0x9ba <spi_write+0x2>

}
     9be:	08 95       	ret

000009c0 <spi_read>:

char spi_read(void){

    spi_write(DUMMY);
     9c0:	86 e5       	ldi	r24, 0x56	; 86
     9c2:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <spi_write>
    //printf("SPI data sent is");
    return SPDR;
     9c6:	8f b1       	in	r24, 0x0f	; 15
}
     9c8:	08 95       	ret

000009ca <spi_init>:

void spi_init(void){
    DDR_SPI |= (1 << SCK) | (1 << MOSI) | (1 << SS);
     9ca:	87 b3       	in	r24, 0x17	; 23
     9cc:	80 6b       	ori	r24, 0xB0	; 176
     9ce:	87 bb       	out	0x17, r24	; 23

    SPCR |= (1 << SPE) | (1 << MSTR) | (1<<SPR0);  // Enable SPI and set as master
     9d0:	8d b1       	in	r24, 0x0d	; 13
     9d2:	81 65       	ori	r24, 0x51	; 81
     9d4:	8d b9       	out	0x0d, r24	; 13
     9d6:	08 95       	ret

000009d8 <SRAM_init>:
 */

#include "SRAM_driver.h"

void SRAM_init(void){
    MCUCR |= (1 << SRE);     //external SRAM enable (mcu control register)
     9d8:	85 b7       	in	r24, 0x35	; 53
     9da:	80 68       	ori	r24, 0x80	; 128
     9dc:	85 bf       	out	0x35, r24	; 53
    SFIOR |= (1 << XMM2);    //excludes memory occupied by JTAG
     9de:	80 b7       	in	r24, 0x30	; 48
     9e0:	80 62       	ori	r24, 0x20	; 32
     9e2:	80 bf       	out	0x30, r24	; 48
     9e4:	08 95       	ret

000009e6 <USART_init>:
 */
#include "UART_driver.h"


void USART_init(void){
    UBRR0L = (uint8_t)(BAUD_PRESCALER);
     9e6:	8f e1       	ldi	r24, 0x1F	; 31
     9e8:	89 b9       	out	0x09, r24	; 9
    UBRR0H = (uint8_t)((uint8_t) BAUD_PRESCALER>>8);
     9ea:	10 bc       	out	0x20, r1	; 32
    UCSR0B = (1 << RXEN0)|(1 << TXEN0);
     9ec:	88 e1       	ldi	r24, 0x18	; 24
     9ee:	8a b9       	out	0x0a, r24	; 10
    UCSR0C = (1 << URSEL0)|(1 << USBS0)|(3 << UCSZ00);
     9f0:	8e e8       	ldi	r24, 0x8E	; 142
     9f2:	80 bd       	out	0x20, r24	; 32
     9f4:	08 95       	ret

000009f6 <USART_receive>:
}

unsigned char USART_receive(void){
    while(!(UCSR0A & (1 << RXC0)));
     9f6:	5f 9b       	sbis	0x0b, 7	; 11
     9f8:	fe cf       	rjmp	.-4      	; 0x9f6 <USART_receive>
    return UDR0;
     9fa:	8c b1       	in	r24, 0x0c	; 12
}
     9fc:	08 95       	ret

000009fe <USART_send>:

void USART_send( unsigned char data){
    while(!(UCSR0A & (1 << UDRE0)));
     9fe:	5d 9b       	sbis	0x0b, 5	; 11
     a00:	fe cf       	rjmp	.-4      	; 0x9fe <USART_send>
    UDR0 = data;
     a02:	8c b9       	out	0x0c, r24	; 12
     a04:	08 95       	ret

00000a06 <fdevopen>:
     a06:	0f 93       	push	r16
     a08:	1f 93       	push	r17
     a0a:	cf 93       	push	r28
     a0c:	df 93       	push	r29
     a0e:	00 97       	sbiw	r24, 0x00	; 0
     a10:	31 f4       	brne	.+12     	; 0xa1e <fdevopen+0x18>
     a12:	61 15       	cp	r22, r1
     a14:	71 05       	cpc	r23, r1
     a16:	19 f4       	brne	.+6      	; 0xa1e <fdevopen+0x18>
     a18:	80 e0       	ldi	r24, 0x00	; 0
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	3a c0       	rjmp	.+116    	; 0xa92 <fdevopen+0x8c>
     a1e:	8b 01       	movw	r16, r22
     a20:	ec 01       	movw	r28, r24
     a22:	6e e0       	ldi	r22, 0x0E	; 14
     a24:	70 e0       	ldi	r23, 0x00	; 0
     a26:	81 e0       	ldi	r24, 0x01	; 1
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	0e 94 75 07 	call	0xeea	; 0xeea <calloc>
     a2e:	fc 01       	movw	r30, r24
     a30:	89 2b       	or	r24, r25
     a32:	91 f3       	breq	.-28     	; 0xa18 <fdevopen+0x12>
     a34:	80 e8       	ldi	r24, 0x80	; 128
     a36:	83 83       	std	Z+3, r24	; 0x03
     a38:	01 15       	cp	r16, r1
     a3a:	11 05       	cpc	r17, r1
     a3c:	71 f0       	breq	.+28     	; 0xa5a <fdevopen+0x54>
     a3e:	13 87       	std	Z+11, r17	; 0x0b
     a40:	02 87       	std	Z+10, r16	; 0x0a
     a42:	81 e8       	ldi	r24, 0x81	; 129
     a44:	83 83       	std	Z+3, r24	; 0x03
     a46:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <__iob>
     a4a:	90 91 bb 02 	lds	r25, 0x02BB	; 0x8002bb <__iob+0x1>
     a4e:	89 2b       	or	r24, r25
     a50:	21 f4       	brne	.+8      	; 0xa5a <fdevopen+0x54>
     a52:	f0 93 bb 02 	sts	0x02BB, r31	; 0x8002bb <__iob+0x1>
     a56:	e0 93 ba 02 	sts	0x02BA, r30	; 0x8002ba <__iob>
     a5a:	20 97       	sbiw	r28, 0x00	; 0
     a5c:	c9 f0       	breq	.+50     	; 0xa90 <fdevopen+0x8a>
     a5e:	d1 87       	std	Z+9, r29	; 0x09
     a60:	c0 87       	std	Z+8, r28	; 0x08
     a62:	83 81       	ldd	r24, Z+3	; 0x03
     a64:	82 60       	ori	r24, 0x02	; 2
     a66:	83 83       	std	Z+3, r24	; 0x03
     a68:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <__iob+0x2>
     a6c:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <__iob+0x3>
     a70:	89 2b       	or	r24, r25
     a72:	71 f4       	brne	.+28     	; 0xa90 <fdevopen+0x8a>
     a74:	f0 93 bd 02 	sts	0x02BD, r31	; 0x8002bd <__iob+0x3>
     a78:	e0 93 bc 02 	sts	0x02BC, r30	; 0x8002bc <__iob+0x2>
     a7c:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <__iob+0x4>
     a80:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <__iob+0x5>
     a84:	89 2b       	or	r24, r25
     a86:	21 f4       	brne	.+8      	; 0xa90 <fdevopen+0x8a>
     a88:	f0 93 bf 02 	sts	0x02BF, r31	; 0x8002bf <__iob+0x5>
     a8c:	e0 93 be 02 	sts	0x02BE, r30	; 0x8002be <__iob+0x4>
     a90:	cf 01       	movw	r24, r30
     a92:	df 91       	pop	r29
     a94:	cf 91       	pop	r28
     a96:	1f 91       	pop	r17
     a98:	0f 91       	pop	r16
     a9a:	08 95       	ret

00000a9c <printf>:
     a9c:	a0 e0       	ldi	r26, 0x00	; 0
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	e4 e5       	ldi	r30, 0x54	; 84
     aa2:	f5 e0       	ldi	r31, 0x05	; 5
     aa4:	0c 94 79 09 	jmp	0x12f2	; 0x12f2 <__prologue_saves__+0x20>
     aa8:	ae 01       	movw	r20, r28
     aaa:	4b 5f       	subi	r20, 0xFB	; 251
     aac:	5f 4f       	sbci	r21, 0xFF	; 255
     aae:	fa 01       	movw	r30, r20
     ab0:	61 91       	ld	r22, Z+
     ab2:	71 91       	ld	r23, Z+
     ab4:	af 01       	movw	r20, r30
     ab6:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <__iob+0x2>
     aba:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <__iob+0x3>
     abe:	0e 94 94 05 	call	0xb28	; 0xb28 <vfprintf>
     ac2:	e2 e0       	ldi	r30, 0x02	; 2
     ac4:	0c 94 95 09 	jmp	0x132a	; 0x132a <__epilogue_restores__+0x20>

00000ac8 <puts>:
     ac8:	0f 93       	push	r16
     aca:	1f 93       	push	r17
     acc:	cf 93       	push	r28
     ace:	df 93       	push	r29
     ad0:	e0 91 bc 02 	lds	r30, 0x02BC	; 0x8002bc <__iob+0x2>
     ad4:	f0 91 bd 02 	lds	r31, 0x02BD	; 0x8002bd <__iob+0x3>
     ad8:	23 81       	ldd	r18, Z+3	; 0x03
     ada:	21 ff       	sbrs	r18, 1
     adc:	1b c0       	rjmp	.+54     	; 0xb14 <puts+0x4c>
     ade:	8c 01       	movw	r16, r24
     ae0:	d0 e0       	ldi	r29, 0x00	; 0
     ae2:	c0 e0       	ldi	r28, 0x00	; 0
     ae4:	f8 01       	movw	r30, r16
     ae6:	81 91       	ld	r24, Z+
     ae8:	8f 01       	movw	r16, r30
     aea:	60 91 bc 02 	lds	r22, 0x02BC	; 0x8002bc <__iob+0x2>
     aee:	70 91 bd 02 	lds	r23, 0x02BD	; 0x8002bd <__iob+0x3>
     af2:	db 01       	movw	r26, r22
     af4:	18 96       	adiw	r26, 0x08	; 8
     af6:	ed 91       	ld	r30, X+
     af8:	fc 91       	ld	r31, X
     afa:	19 97       	sbiw	r26, 0x09	; 9
     afc:	88 23       	and	r24, r24
     afe:	31 f0       	breq	.+12     	; 0xb0c <puts+0x44>
     b00:	09 95       	icall
     b02:	89 2b       	or	r24, r25
     b04:	79 f3       	breq	.-34     	; 0xae4 <puts+0x1c>
     b06:	df ef       	ldi	r29, 0xFF	; 255
     b08:	cf ef       	ldi	r28, 0xFF	; 255
     b0a:	ec cf       	rjmp	.-40     	; 0xae4 <puts+0x1c>
     b0c:	8a e0       	ldi	r24, 0x0A	; 10
     b0e:	09 95       	icall
     b10:	89 2b       	or	r24, r25
     b12:	19 f0       	breq	.+6      	; 0xb1a <puts+0x52>
     b14:	8f ef       	ldi	r24, 0xFF	; 255
     b16:	9f ef       	ldi	r25, 0xFF	; 255
     b18:	02 c0       	rjmp	.+4      	; 0xb1e <puts+0x56>
     b1a:	8d 2f       	mov	r24, r29
     b1c:	9c 2f       	mov	r25, r28
     b1e:	df 91       	pop	r29
     b20:	cf 91       	pop	r28
     b22:	1f 91       	pop	r17
     b24:	0f 91       	pop	r16
     b26:	08 95       	ret

00000b28 <vfprintf>:
     b28:	ab e0       	ldi	r26, 0x0B	; 11
     b2a:	b0 e0       	ldi	r27, 0x00	; 0
     b2c:	ea e9       	ldi	r30, 0x9A	; 154
     b2e:	f5 e0       	ldi	r31, 0x05	; 5
     b30:	0c 94 69 09 	jmp	0x12d2	; 0x12d2 <__prologue_saves__>
     b34:	6c 01       	movw	r12, r24
     b36:	7b 01       	movw	r14, r22
     b38:	8a 01       	movw	r16, r20
     b3a:	fc 01       	movw	r30, r24
     b3c:	17 82       	std	Z+7, r1	; 0x07
     b3e:	16 82       	std	Z+6, r1	; 0x06
     b40:	83 81       	ldd	r24, Z+3	; 0x03
     b42:	81 ff       	sbrs	r24, 1
     b44:	cc c1       	rjmp	.+920    	; 0xede <vfprintf+0x3b6>
     b46:	ce 01       	movw	r24, r28
     b48:	01 96       	adiw	r24, 0x01	; 1
     b4a:	3c 01       	movw	r6, r24
     b4c:	f6 01       	movw	r30, r12
     b4e:	93 81       	ldd	r25, Z+3	; 0x03
     b50:	f7 01       	movw	r30, r14
     b52:	93 fd       	sbrc	r25, 3
     b54:	85 91       	lpm	r24, Z+
     b56:	93 ff       	sbrs	r25, 3
     b58:	81 91       	ld	r24, Z+
     b5a:	7f 01       	movw	r14, r30
     b5c:	88 23       	and	r24, r24
     b5e:	09 f4       	brne	.+2      	; 0xb62 <vfprintf+0x3a>
     b60:	ba c1       	rjmp	.+884    	; 0xed6 <vfprintf+0x3ae>
     b62:	85 32       	cpi	r24, 0x25	; 37
     b64:	39 f4       	brne	.+14     	; 0xb74 <vfprintf+0x4c>
     b66:	93 fd       	sbrc	r25, 3
     b68:	85 91       	lpm	r24, Z+
     b6a:	93 ff       	sbrs	r25, 3
     b6c:	81 91       	ld	r24, Z+
     b6e:	7f 01       	movw	r14, r30
     b70:	85 32       	cpi	r24, 0x25	; 37
     b72:	29 f4       	brne	.+10     	; 0xb7e <vfprintf+0x56>
     b74:	b6 01       	movw	r22, r12
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	0e 94 cf 08 	call	0x119e	; 0x119e <fputc>
     b7c:	e7 cf       	rjmp	.-50     	; 0xb4c <vfprintf+0x24>
     b7e:	91 2c       	mov	r9, r1
     b80:	21 2c       	mov	r2, r1
     b82:	31 2c       	mov	r3, r1
     b84:	ff e1       	ldi	r31, 0x1F	; 31
     b86:	f3 15       	cp	r31, r3
     b88:	d8 f0       	brcs	.+54     	; 0xbc0 <vfprintf+0x98>
     b8a:	8b 32       	cpi	r24, 0x2B	; 43
     b8c:	79 f0       	breq	.+30     	; 0xbac <vfprintf+0x84>
     b8e:	38 f4       	brcc	.+14     	; 0xb9e <vfprintf+0x76>
     b90:	80 32       	cpi	r24, 0x20	; 32
     b92:	79 f0       	breq	.+30     	; 0xbb2 <vfprintf+0x8a>
     b94:	83 32       	cpi	r24, 0x23	; 35
     b96:	a1 f4       	brne	.+40     	; 0xbc0 <vfprintf+0x98>
     b98:	23 2d       	mov	r18, r3
     b9a:	20 61       	ori	r18, 0x10	; 16
     b9c:	1d c0       	rjmp	.+58     	; 0xbd8 <vfprintf+0xb0>
     b9e:	8d 32       	cpi	r24, 0x2D	; 45
     ba0:	61 f0       	breq	.+24     	; 0xbba <vfprintf+0x92>
     ba2:	80 33       	cpi	r24, 0x30	; 48
     ba4:	69 f4       	brne	.+26     	; 0xbc0 <vfprintf+0x98>
     ba6:	23 2d       	mov	r18, r3
     ba8:	21 60       	ori	r18, 0x01	; 1
     baa:	16 c0       	rjmp	.+44     	; 0xbd8 <vfprintf+0xb0>
     bac:	83 2d       	mov	r24, r3
     bae:	82 60       	ori	r24, 0x02	; 2
     bb0:	38 2e       	mov	r3, r24
     bb2:	e3 2d       	mov	r30, r3
     bb4:	e4 60       	ori	r30, 0x04	; 4
     bb6:	3e 2e       	mov	r3, r30
     bb8:	2a c0       	rjmp	.+84     	; 0xc0e <vfprintf+0xe6>
     bba:	f3 2d       	mov	r31, r3
     bbc:	f8 60       	ori	r31, 0x08	; 8
     bbe:	1d c0       	rjmp	.+58     	; 0xbfa <vfprintf+0xd2>
     bc0:	37 fc       	sbrc	r3, 7
     bc2:	2d c0       	rjmp	.+90     	; 0xc1e <vfprintf+0xf6>
     bc4:	20 ed       	ldi	r18, 0xD0	; 208
     bc6:	28 0f       	add	r18, r24
     bc8:	2a 30       	cpi	r18, 0x0A	; 10
     bca:	40 f0       	brcs	.+16     	; 0xbdc <vfprintf+0xb4>
     bcc:	8e 32       	cpi	r24, 0x2E	; 46
     bce:	b9 f4       	brne	.+46     	; 0xbfe <vfprintf+0xd6>
     bd0:	36 fc       	sbrc	r3, 6
     bd2:	81 c1       	rjmp	.+770    	; 0xed6 <vfprintf+0x3ae>
     bd4:	23 2d       	mov	r18, r3
     bd6:	20 64       	ori	r18, 0x40	; 64
     bd8:	32 2e       	mov	r3, r18
     bda:	19 c0       	rjmp	.+50     	; 0xc0e <vfprintf+0xe6>
     bdc:	36 fe       	sbrs	r3, 6
     bde:	06 c0       	rjmp	.+12     	; 0xbec <vfprintf+0xc4>
     be0:	8a e0       	ldi	r24, 0x0A	; 10
     be2:	98 9e       	mul	r9, r24
     be4:	20 0d       	add	r18, r0
     be6:	11 24       	eor	r1, r1
     be8:	92 2e       	mov	r9, r18
     bea:	11 c0       	rjmp	.+34     	; 0xc0e <vfprintf+0xe6>
     bec:	ea e0       	ldi	r30, 0x0A	; 10
     bee:	2e 9e       	mul	r2, r30
     bf0:	20 0d       	add	r18, r0
     bf2:	11 24       	eor	r1, r1
     bf4:	22 2e       	mov	r2, r18
     bf6:	f3 2d       	mov	r31, r3
     bf8:	f0 62       	ori	r31, 0x20	; 32
     bfa:	3f 2e       	mov	r3, r31
     bfc:	08 c0       	rjmp	.+16     	; 0xc0e <vfprintf+0xe6>
     bfe:	8c 36       	cpi	r24, 0x6C	; 108
     c00:	21 f4       	brne	.+8      	; 0xc0a <vfprintf+0xe2>
     c02:	83 2d       	mov	r24, r3
     c04:	80 68       	ori	r24, 0x80	; 128
     c06:	38 2e       	mov	r3, r24
     c08:	02 c0       	rjmp	.+4      	; 0xc0e <vfprintf+0xe6>
     c0a:	88 36       	cpi	r24, 0x68	; 104
     c0c:	41 f4       	brne	.+16     	; 0xc1e <vfprintf+0xf6>
     c0e:	f7 01       	movw	r30, r14
     c10:	93 fd       	sbrc	r25, 3
     c12:	85 91       	lpm	r24, Z+
     c14:	93 ff       	sbrs	r25, 3
     c16:	81 91       	ld	r24, Z+
     c18:	7f 01       	movw	r14, r30
     c1a:	81 11       	cpse	r24, r1
     c1c:	b3 cf       	rjmp	.-154    	; 0xb84 <vfprintf+0x5c>
     c1e:	98 2f       	mov	r25, r24
     c20:	9f 7d       	andi	r25, 0xDF	; 223
     c22:	95 54       	subi	r25, 0x45	; 69
     c24:	93 30       	cpi	r25, 0x03	; 3
     c26:	28 f4       	brcc	.+10     	; 0xc32 <vfprintf+0x10a>
     c28:	0c 5f       	subi	r16, 0xFC	; 252
     c2a:	1f 4f       	sbci	r17, 0xFF	; 255
     c2c:	9f e3       	ldi	r25, 0x3F	; 63
     c2e:	99 83       	std	Y+1, r25	; 0x01
     c30:	0d c0       	rjmp	.+26     	; 0xc4c <vfprintf+0x124>
     c32:	83 36       	cpi	r24, 0x63	; 99
     c34:	31 f0       	breq	.+12     	; 0xc42 <vfprintf+0x11a>
     c36:	83 37       	cpi	r24, 0x73	; 115
     c38:	71 f0       	breq	.+28     	; 0xc56 <vfprintf+0x12e>
     c3a:	83 35       	cpi	r24, 0x53	; 83
     c3c:	09 f0       	breq	.+2      	; 0xc40 <vfprintf+0x118>
     c3e:	59 c0       	rjmp	.+178    	; 0xcf2 <vfprintf+0x1ca>
     c40:	21 c0       	rjmp	.+66     	; 0xc84 <vfprintf+0x15c>
     c42:	f8 01       	movw	r30, r16
     c44:	80 81       	ld	r24, Z
     c46:	89 83       	std	Y+1, r24	; 0x01
     c48:	0e 5f       	subi	r16, 0xFE	; 254
     c4a:	1f 4f       	sbci	r17, 0xFF	; 255
     c4c:	88 24       	eor	r8, r8
     c4e:	83 94       	inc	r8
     c50:	91 2c       	mov	r9, r1
     c52:	53 01       	movw	r10, r6
     c54:	13 c0       	rjmp	.+38     	; 0xc7c <vfprintf+0x154>
     c56:	28 01       	movw	r4, r16
     c58:	f2 e0       	ldi	r31, 0x02	; 2
     c5a:	4f 0e       	add	r4, r31
     c5c:	51 1c       	adc	r5, r1
     c5e:	f8 01       	movw	r30, r16
     c60:	a0 80       	ld	r10, Z
     c62:	b1 80       	ldd	r11, Z+1	; 0x01
     c64:	36 fe       	sbrs	r3, 6
     c66:	03 c0       	rjmp	.+6      	; 0xc6e <vfprintf+0x146>
     c68:	69 2d       	mov	r22, r9
     c6a:	70 e0       	ldi	r23, 0x00	; 0
     c6c:	02 c0       	rjmp	.+4      	; 0xc72 <vfprintf+0x14a>
     c6e:	6f ef       	ldi	r22, 0xFF	; 255
     c70:	7f ef       	ldi	r23, 0xFF	; 255
     c72:	c5 01       	movw	r24, r10
     c74:	0e 94 c4 08 	call	0x1188	; 0x1188 <strnlen>
     c78:	4c 01       	movw	r8, r24
     c7a:	82 01       	movw	r16, r4
     c7c:	f3 2d       	mov	r31, r3
     c7e:	ff 77       	andi	r31, 0x7F	; 127
     c80:	3f 2e       	mov	r3, r31
     c82:	16 c0       	rjmp	.+44     	; 0xcb0 <vfprintf+0x188>
     c84:	28 01       	movw	r4, r16
     c86:	22 e0       	ldi	r18, 0x02	; 2
     c88:	42 0e       	add	r4, r18
     c8a:	51 1c       	adc	r5, r1
     c8c:	f8 01       	movw	r30, r16
     c8e:	a0 80       	ld	r10, Z
     c90:	b1 80       	ldd	r11, Z+1	; 0x01
     c92:	36 fe       	sbrs	r3, 6
     c94:	03 c0       	rjmp	.+6      	; 0xc9c <vfprintf+0x174>
     c96:	69 2d       	mov	r22, r9
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	02 c0       	rjmp	.+4      	; 0xca0 <vfprintf+0x178>
     c9c:	6f ef       	ldi	r22, 0xFF	; 255
     c9e:	7f ef       	ldi	r23, 0xFF	; 255
     ca0:	c5 01       	movw	r24, r10
     ca2:	0e 94 b2 08 	call	0x1164	; 0x1164 <strnlen_P>
     ca6:	4c 01       	movw	r8, r24
     ca8:	f3 2d       	mov	r31, r3
     caa:	f0 68       	ori	r31, 0x80	; 128
     cac:	3f 2e       	mov	r3, r31
     cae:	82 01       	movw	r16, r4
     cb0:	33 fc       	sbrc	r3, 3
     cb2:	1b c0       	rjmp	.+54     	; 0xcea <vfprintf+0x1c2>
     cb4:	82 2d       	mov	r24, r2
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	88 16       	cp	r8, r24
     cba:	99 06       	cpc	r9, r25
     cbc:	b0 f4       	brcc	.+44     	; 0xcea <vfprintf+0x1c2>
     cbe:	b6 01       	movw	r22, r12
     cc0:	80 e2       	ldi	r24, 0x20	; 32
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	0e 94 cf 08 	call	0x119e	; 0x119e <fputc>
     cc8:	2a 94       	dec	r2
     cca:	f4 cf       	rjmp	.-24     	; 0xcb4 <vfprintf+0x18c>
     ccc:	f5 01       	movw	r30, r10
     cce:	37 fc       	sbrc	r3, 7
     cd0:	85 91       	lpm	r24, Z+
     cd2:	37 fe       	sbrs	r3, 7
     cd4:	81 91       	ld	r24, Z+
     cd6:	5f 01       	movw	r10, r30
     cd8:	b6 01       	movw	r22, r12
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	0e 94 cf 08 	call	0x119e	; 0x119e <fputc>
     ce0:	21 10       	cpse	r2, r1
     ce2:	2a 94       	dec	r2
     ce4:	21 e0       	ldi	r18, 0x01	; 1
     ce6:	82 1a       	sub	r8, r18
     ce8:	91 08       	sbc	r9, r1
     cea:	81 14       	cp	r8, r1
     cec:	91 04       	cpc	r9, r1
     cee:	71 f7       	brne	.-36     	; 0xccc <vfprintf+0x1a4>
     cf0:	e8 c0       	rjmp	.+464    	; 0xec2 <vfprintf+0x39a>
     cf2:	84 36       	cpi	r24, 0x64	; 100
     cf4:	11 f0       	breq	.+4      	; 0xcfa <vfprintf+0x1d2>
     cf6:	89 36       	cpi	r24, 0x69	; 105
     cf8:	41 f5       	brne	.+80     	; 0xd4a <vfprintf+0x222>
     cfa:	f8 01       	movw	r30, r16
     cfc:	37 fe       	sbrs	r3, 7
     cfe:	07 c0       	rjmp	.+14     	; 0xd0e <vfprintf+0x1e6>
     d00:	60 81       	ld	r22, Z
     d02:	71 81       	ldd	r23, Z+1	; 0x01
     d04:	82 81       	ldd	r24, Z+2	; 0x02
     d06:	93 81       	ldd	r25, Z+3	; 0x03
     d08:	0c 5f       	subi	r16, 0xFC	; 252
     d0a:	1f 4f       	sbci	r17, 0xFF	; 255
     d0c:	08 c0       	rjmp	.+16     	; 0xd1e <vfprintf+0x1f6>
     d0e:	60 81       	ld	r22, Z
     d10:	71 81       	ldd	r23, Z+1	; 0x01
     d12:	07 2e       	mov	r0, r23
     d14:	00 0c       	add	r0, r0
     d16:	88 0b       	sbc	r24, r24
     d18:	99 0b       	sbc	r25, r25
     d1a:	0e 5f       	subi	r16, 0xFE	; 254
     d1c:	1f 4f       	sbci	r17, 0xFF	; 255
     d1e:	f3 2d       	mov	r31, r3
     d20:	ff 76       	andi	r31, 0x6F	; 111
     d22:	3f 2e       	mov	r3, r31
     d24:	97 ff       	sbrs	r25, 7
     d26:	09 c0       	rjmp	.+18     	; 0xd3a <vfprintf+0x212>
     d28:	90 95       	com	r25
     d2a:	80 95       	com	r24
     d2c:	70 95       	com	r23
     d2e:	61 95       	neg	r22
     d30:	7f 4f       	sbci	r23, 0xFF	; 255
     d32:	8f 4f       	sbci	r24, 0xFF	; 255
     d34:	9f 4f       	sbci	r25, 0xFF	; 255
     d36:	f0 68       	ori	r31, 0x80	; 128
     d38:	3f 2e       	mov	r3, r31
     d3a:	2a e0       	ldi	r18, 0x0A	; 10
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	a3 01       	movw	r20, r6
     d40:	0e 94 0b 09 	call	0x1216	; 0x1216 <__ultoa_invert>
     d44:	88 2e       	mov	r8, r24
     d46:	86 18       	sub	r8, r6
     d48:	45 c0       	rjmp	.+138    	; 0xdd4 <vfprintf+0x2ac>
     d4a:	85 37       	cpi	r24, 0x75	; 117
     d4c:	31 f4       	brne	.+12     	; 0xd5a <vfprintf+0x232>
     d4e:	23 2d       	mov	r18, r3
     d50:	2f 7e       	andi	r18, 0xEF	; 239
     d52:	b2 2e       	mov	r11, r18
     d54:	2a e0       	ldi	r18, 0x0A	; 10
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	25 c0       	rjmp	.+74     	; 0xda4 <vfprintf+0x27c>
     d5a:	93 2d       	mov	r25, r3
     d5c:	99 7f       	andi	r25, 0xF9	; 249
     d5e:	b9 2e       	mov	r11, r25
     d60:	8f 36       	cpi	r24, 0x6F	; 111
     d62:	c1 f0       	breq	.+48     	; 0xd94 <vfprintf+0x26c>
     d64:	18 f4       	brcc	.+6      	; 0xd6c <vfprintf+0x244>
     d66:	88 35       	cpi	r24, 0x58	; 88
     d68:	79 f0       	breq	.+30     	; 0xd88 <vfprintf+0x260>
     d6a:	b5 c0       	rjmp	.+362    	; 0xed6 <vfprintf+0x3ae>
     d6c:	80 37       	cpi	r24, 0x70	; 112
     d6e:	19 f0       	breq	.+6      	; 0xd76 <vfprintf+0x24e>
     d70:	88 37       	cpi	r24, 0x78	; 120
     d72:	21 f0       	breq	.+8      	; 0xd7c <vfprintf+0x254>
     d74:	b0 c0       	rjmp	.+352    	; 0xed6 <vfprintf+0x3ae>
     d76:	e9 2f       	mov	r30, r25
     d78:	e0 61       	ori	r30, 0x10	; 16
     d7a:	be 2e       	mov	r11, r30
     d7c:	b4 fe       	sbrs	r11, 4
     d7e:	0d c0       	rjmp	.+26     	; 0xd9a <vfprintf+0x272>
     d80:	fb 2d       	mov	r31, r11
     d82:	f4 60       	ori	r31, 0x04	; 4
     d84:	bf 2e       	mov	r11, r31
     d86:	09 c0       	rjmp	.+18     	; 0xd9a <vfprintf+0x272>
     d88:	34 fe       	sbrs	r3, 4
     d8a:	0a c0       	rjmp	.+20     	; 0xda0 <vfprintf+0x278>
     d8c:	29 2f       	mov	r18, r25
     d8e:	26 60       	ori	r18, 0x06	; 6
     d90:	b2 2e       	mov	r11, r18
     d92:	06 c0       	rjmp	.+12     	; 0xda0 <vfprintf+0x278>
     d94:	28 e0       	ldi	r18, 0x08	; 8
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	05 c0       	rjmp	.+10     	; 0xda4 <vfprintf+0x27c>
     d9a:	20 e1       	ldi	r18, 0x10	; 16
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	02 c0       	rjmp	.+4      	; 0xda4 <vfprintf+0x27c>
     da0:	20 e1       	ldi	r18, 0x10	; 16
     da2:	32 e0       	ldi	r19, 0x02	; 2
     da4:	f8 01       	movw	r30, r16
     da6:	b7 fe       	sbrs	r11, 7
     da8:	07 c0       	rjmp	.+14     	; 0xdb8 <vfprintf+0x290>
     daa:	60 81       	ld	r22, Z
     dac:	71 81       	ldd	r23, Z+1	; 0x01
     dae:	82 81       	ldd	r24, Z+2	; 0x02
     db0:	93 81       	ldd	r25, Z+3	; 0x03
     db2:	0c 5f       	subi	r16, 0xFC	; 252
     db4:	1f 4f       	sbci	r17, 0xFF	; 255
     db6:	06 c0       	rjmp	.+12     	; 0xdc4 <vfprintf+0x29c>
     db8:	60 81       	ld	r22, Z
     dba:	71 81       	ldd	r23, Z+1	; 0x01
     dbc:	80 e0       	ldi	r24, 0x00	; 0
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	0e 5f       	subi	r16, 0xFE	; 254
     dc2:	1f 4f       	sbci	r17, 0xFF	; 255
     dc4:	a3 01       	movw	r20, r6
     dc6:	0e 94 0b 09 	call	0x1216	; 0x1216 <__ultoa_invert>
     dca:	88 2e       	mov	r8, r24
     dcc:	86 18       	sub	r8, r6
     dce:	fb 2d       	mov	r31, r11
     dd0:	ff 77       	andi	r31, 0x7F	; 127
     dd2:	3f 2e       	mov	r3, r31
     dd4:	36 fe       	sbrs	r3, 6
     dd6:	0d c0       	rjmp	.+26     	; 0xdf2 <vfprintf+0x2ca>
     dd8:	23 2d       	mov	r18, r3
     dda:	2e 7f       	andi	r18, 0xFE	; 254
     ddc:	a2 2e       	mov	r10, r18
     dde:	89 14       	cp	r8, r9
     de0:	58 f4       	brcc	.+22     	; 0xdf8 <vfprintf+0x2d0>
     de2:	34 fe       	sbrs	r3, 4
     de4:	0b c0       	rjmp	.+22     	; 0xdfc <vfprintf+0x2d4>
     de6:	32 fc       	sbrc	r3, 2
     de8:	09 c0       	rjmp	.+18     	; 0xdfc <vfprintf+0x2d4>
     dea:	83 2d       	mov	r24, r3
     dec:	8e 7e       	andi	r24, 0xEE	; 238
     dee:	a8 2e       	mov	r10, r24
     df0:	05 c0       	rjmp	.+10     	; 0xdfc <vfprintf+0x2d4>
     df2:	b8 2c       	mov	r11, r8
     df4:	a3 2c       	mov	r10, r3
     df6:	03 c0       	rjmp	.+6      	; 0xdfe <vfprintf+0x2d6>
     df8:	b8 2c       	mov	r11, r8
     dfa:	01 c0       	rjmp	.+2      	; 0xdfe <vfprintf+0x2d6>
     dfc:	b9 2c       	mov	r11, r9
     dfe:	a4 fe       	sbrs	r10, 4
     e00:	0f c0       	rjmp	.+30     	; 0xe20 <vfprintf+0x2f8>
     e02:	fe 01       	movw	r30, r28
     e04:	e8 0d       	add	r30, r8
     e06:	f1 1d       	adc	r31, r1
     e08:	80 81       	ld	r24, Z
     e0a:	80 33       	cpi	r24, 0x30	; 48
     e0c:	21 f4       	brne	.+8      	; 0xe16 <vfprintf+0x2ee>
     e0e:	9a 2d       	mov	r25, r10
     e10:	99 7e       	andi	r25, 0xE9	; 233
     e12:	a9 2e       	mov	r10, r25
     e14:	09 c0       	rjmp	.+18     	; 0xe28 <vfprintf+0x300>
     e16:	a2 fe       	sbrs	r10, 2
     e18:	06 c0       	rjmp	.+12     	; 0xe26 <vfprintf+0x2fe>
     e1a:	b3 94       	inc	r11
     e1c:	b3 94       	inc	r11
     e1e:	04 c0       	rjmp	.+8      	; 0xe28 <vfprintf+0x300>
     e20:	8a 2d       	mov	r24, r10
     e22:	86 78       	andi	r24, 0x86	; 134
     e24:	09 f0       	breq	.+2      	; 0xe28 <vfprintf+0x300>
     e26:	b3 94       	inc	r11
     e28:	a3 fc       	sbrc	r10, 3
     e2a:	11 c0       	rjmp	.+34     	; 0xe4e <vfprintf+0x326>
     e2c:	a0 fe       	sbrs	r10, 0
     e2e:	06 c0       	rjmp	.+12     	; 0xe3c <vfprintf+0x314>
     e30:	b2 14       	cp	r11, r2
     e32:	88 f4       	brcc	.+34     	; 0xe56 <vfprintf+0x32e>
     e34:	28 0c       	add	r2, r8
     e36:	92 2c       	mov	r9, r2
     e38:	9b 18       	sub	r9, r11
     e3a:	0e c0       	rjmp	.+28     	; 0xe58 <vfprintf+0x330>
     e3c:	b2 14       	cp	r11, r2
     e3e:	60 f4       	brcc	.+24     	; 0xe58 <vfprintf+0x330>
     e40:	b6 01       	movw	r22, r12
     e42:	80 e2       	ldi	r24, 0x20	; 32
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	0e 94 cf 08 	call	0x119e	; 0x119e <fputc>
     e4a:	b3 94       	inc	r11
     e4c:	f7 cf       	rjmp	.-18     	; 0xe3c <vfprintf+0x314>
     e4e:	b2 14       	cp	r11, r2
     e50:	18 f4       	brcc	.+6      	; 0xe58 <vfprintf+0x330>
     e52:	2b 18       	sub	r2, r11
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <vfprintf+0x332>
     e56:	98 2c       	mov	r9, r8
     e58:	21 2c       	mov	r2, r1
     e5a:	a4 fe       	sbrs	r10, 4
     e5c:	10 c0       	rjmp	.+32     	; 0xe7e <vfprintf+0x356>
     e5e:	b6 01       	movw	r22, r12
     e60:	80 e3       	ldi	r24, 0x30	; 48
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	0e 94 cf 08 	call	0x119e	; 0x119e <fputc>
     e68:	a2 fe       	sbrs	r10, 2
     e6a:	17 c0       	rjmp	.+46     	; 0xe9a <vfprintf+0x372>
     e6c:	a1 fc       	sbrc	r10, 1
     e6e:	03 c0       	rjmp	.+6      	; 0xe76 <vfprintf+0x34e>
     e70:	88 e7       	ldi	r24, 0x78	; 120
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	02 c0       	rjmp	.+4      	; 0xe7a <vfprintf+0x352>
     e76:	88 e5       	ldi	r24, 0x58	; 88
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	b6 01       	movw	r22, r12
     e7c:	0c c0       	rjmp	.+24     	; 0xe96 <vfprintf+0x36e>
     e7e:	8a 2d       	mov	r24, r10
     e80:	86 78       	andi	r24, 0x86	; 134
     e82:	59 f0       	breq	.+22     	; 0xe9a <vfprintf+0x372>
     e84:	a1 fe       	sbrs	r10, 1
     e86:	02 c0       	rjmp	.+4      	; 0xe8c <vfprintf+0x364>
     e88:	8b e2       	ldi	r24, 0x2B	; 43
     e8a:	01 c0       	rjmp	.+2      	; 0xe8e <vfprintf+0x366>
     e8c:	80 e2       	ldi	r24, 0x20	; 32
     e8e:	a7 fc       	sbrc	r10, 7
     e90:	8d e2       	ldi	r24, 0x2D	; 45
     e92:	b6 01       	movw	r22, r12
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	0e 94 cf 08 	call	0x119e	; 0x119e <fputc>
     e9a:	89 14       	cp	r8, r9
     e9c:	38 f4       	brcc	.+14     	; 0xeac <vfprintf+0x384>
     e9e:	b6 01       	movw	r22, r12
     ea0:	80 e3       	ldi	r24, 0x30	; 48
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	0e 94 cf 08 	call	0x119e	; 0x119e <fputc>
     ea8:	9a 94       	dec	r9
     eaa:	f7 cf       	rjmp	.-18     	; 0xe9a <vfprintf+0x372>
     eac:	8a 94       	dec	r8
     eae:	f3 01       	movw	r30, r6
     eb0:	e8 0d       	add	r30, r8
     eb2:	f1 1d       	adc	r31, r1
     eb4:	80 81       	ld	r24, Z
     eb6:	b6 01       	movw	r22, r12
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	0e 94 cf 08 	call	0x119e	; 0x119e <fputc>
     ebe:	81 10       	cpse	r8, r1
     ec0:	f5 cf       	rjmp	.-22     	; 0xeac <vfprintf+0x384>
     ec2:	22 20       	and	r2, r2
     ec4:	09 f4       	brne	.+2      	; 0xec8 <vfprintf+0x3a0>
     ec6:	42 ce       	rjmp	.-892    	; 0xb4c <vfprintf+0x24>
     ec8:	b6 01       	movw	r22, r12
     eca:	80 e2       	ldi	r24, 0x20	; 32
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	0e 94 cf 08 	call	0x119e	; 0x119e <fputc>
     ed2:	2a 94       	dec	r2
     ed4:	f6 cf       	rjmp	.-20     	; 0xec2 <vfprintf+0x39a>
     ed6:	f6 01       	movw	r30, r12
     ed8:	86 81       	ldd	r24, Z+6	; 0x06
     eda:	97 81       	ldd	r25, Z+7	; 0x07
     edc:	02 c0       	rjmp	.+4      	; 0xee2 <vfprintf+0x3ba>
     ede:	8f ef       	ldi	r24, 0xFF	; 255
     ee0:	9f ef       	ldi	r25, 0xFF	; 255
     ee2:	2b 96       	adiw	r28, 0x0b	; 11
     ee4:	e2 e1       	ldi	r30, 0x12	; 18
     ee6:	0c 94 85 09 	jmp	0x130a	; 0x130a <__epilogue_restores__>

00000eea <calloc>:
     eea:	0f 93       	push	r16
     eec:	1f 93       	push	r17
     eee:	cf 93       	push	r28
     ef0:	df 93       	push	r29
     ef2:	86 9f       	mul	r24, r22
     ef4:	80 01       	movw	r16, r0
     ef6:	87 9f       	mul	r24, r23
     ef8:	10 0d       	add	r17, r0
     efa:	96 9f       	mul	r25, r22
     efc:	10 0d       	add	r17, r0
     efe:	11 24       	eor	r1, r1
     f00:	c8 01       	movw	r24, r16
     f02:	0e 94 91 07 	call	0xf22	; 0xf22 <malloc>
     f06:	ec 01       	movw	r28, r24
     f08:	00 97       	sbiw	r24, 0x00	; 0
     f0a:	29 f0       	breq	.+10     	; 0xf16 <calloc+0x2c>
     f0c:	a8 01       	movw	r20, r16
     f0e:	60 e0       	ldi	r22, 0x00	; 0
     f10:	70 e0       	ldi	r23, 0x00	; 0
     f12:	0e 94 bd 08 	call	0x117a	; 0x117a <memset>
     f16:	ce 01       	movw	r24, r28
     f18:	df 91       	pop	r29
     f1a:	cf 91       	pop	r28
     f1c:	1f 91       	pop	r17
     f1e:	0f 91       	pop	r16
     f20:	08 95       	ret

00000f22 <malloc>:
     f22:	0f 93       	push	r16
     f24:	1f 93       	push	r17
     f26:	cf 93       	push	r28
     f28:	df 93       	push	r29
     f2a:	82 30       	cpi	r24, 0x02	; 2
     f2c:	91 05       	cpc	r25, r1
     f2e:	10 f4       	brcc	.+4      	; 0xf34 <malloc+0x12>
     f30:	82 e0       	ldi	r24, 0x02	; 2
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <__flp>
     f38:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <__flp+0x1>
     f3c:	20 e0       	ldi	r18, 0x00	; 0
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	a0 e0       	ldi	r26, 0x00	; 0
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	30 97       	sbiw	r30, 0x00	; 0
     f46:	19 f1       	breq	.+70     	; 0xf8e <malloc+0x6c>
     f48:	40 81       	ld	r20, Z
     f4a:	51 81       	ldd	r21, Z+1	; 0x01
     f4c:	02 81       	ldd	r16, Z+2	; 0x02
     f4e:	13 81       	ldd	r17, Z+3	; 0x03
     f50:	48 17       	cp	r20, r24
     f52:	59 07       	cpc	r21, r25
     f54:	c8 f0       	brcs	.+50     	; 0xf88 <malloc+0x66>
     f56:	84 17       	cp	r24, r20
     f58:	95 07       	cpc	r25, r21
     f5a:	69 f4       	brne	.+26     	; 0xf76 <malloc+0x54>
     f5c:	10 97       	sbiw	r26, 0x00	; 0
     f5e:	31 f0       	breq	.+12     	; 0xf6c <malloc+0x4a>
     f60:	12 96       	adiw	r26, 0x02	; 2
     f62:	0c 93       	st	X, r16
     f64:	12 97       	sbiw	r26, 0x02	; 2
     f66:	13 96       	adiw	r26, 0x03	; 3
     f68:	1c 93       	st	X, r17
     f6a:	27 c0       	rjmp	.+78     	; 0xfba <malloc+0x98>
     f6c:	00 93 c2 02 	sts	0x02C2, r16	; 0x8002c2 <__flp>
     f70:	10 93 c3 02 	sts	0x02C3, r17	; 0x8002c3 <__flp+0x1>
     f74:	22 c0       	rjmp	.+68     	; 0xfba <malloc+0x98>
     f76:	21 15       	cp	r18, r1
     f78:	31 05       	cpc	r19, r1
     f7a:	19 f0       	breq	.+6      	; 0xf82 <malloc+0x60>
     f7c:	42 17       	cp	r20, r18
     f7e:	53 07       	cpc	r21, r19
     f80:	18 f4       	brcc	.+6      	; 0xf88 <malloc+0x66>
     f82:	9a 01       	movw	r18, r20
     f84:	bd 01       	movw	r22, r26
     f86:	ef 01       	movw	r28, r30
     f88:	df 01       	movw	r26, r30
     f8a:	f8 01       	movw	r30, r16
     f8c:	db cf       	rjmp	.-74     	; 0xf44 <malloc+0x22>
     f8e:	21 15       	cp	r18, r1
     f90:	31 05       	cpc	r19, r1
     f92:	f9 f0       	breq	.+62     	; 0xfd2 <malloc+0xb0>
     f94:	28 1b       	sub	r18, r24
     f96:	39 0b       	sbc	r19, r25
     f98:	24 30       	cpi	r18, 0x04	; 4
     f9a:	31 05       	cpc	r19, r1
     f9c:	80 f4       	brcc	.+32     	; 0xfbe <malloc+0x9c>
     f9e:	8a 81       	ldd	r24, Y+2	; 0x02
     fa0:	9b 81       	ldd	r25, Y+3	; 0x03
     fa2:	61 15       	cp	r22, r1
     fa4:	71 05       	cpc	r23, r1
     fa6:	21 f0       	breq	.+8      	; 0xfb0 <malloc+0x8e>
     fa8:	fb 01       	movw	r30, r22
     faa:	93 83       	std	Z+3, r25	; 0x03
     fac:	82 83       	std	Z+2, r24	; 0x02
     fae:	04 c0       	rjmp	.+8      	; 0xfb8 <malloc+0x96>
     fb0:	90 93 c3 02 	sts	0x02C3, r25	; 0x8002c3 <__flp+0x1>
     fb4:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <__flp>
     fb8:	fe 01       	movw	r30, r28
     fba:	32 96       	adiw	r30, 0x02	; 2
     fbc:	44 c0       	rjmp	.+136    	; 0x1046 <malloc+0x124>
     fbe:	fe 01       	movw	r30, r28
     fc0:	e2 0f       	add	r30, r18
     fc2:	f3 1f       	adc	r31, r19
     fc4:	81 93       	st	Z+, r24
     fc6:	91 93       	st	Z+, r25
     fc8:	22 50       	subi	r18, 0x02	; 2
     fca:	31 09       	sbc	r19, r1
     fcc:	39 83       	std	Y+1, r19	; 0x01
     fce:	28 83       	st	Y, r18
     fd0:	3a c0       	rjmp	.+116    	; 0x1046 <malloc+0x124>
     fd2:	20 91 c0 02 	lds	r18, 0x02C0	; 0x8002c0 <__brkval>
     fd6:	30 91 c1 02 	lds	r19, 0x02C1	; 0x8002c1 <__brkval+0x1>
     fda:	23 2b       	or	r18, r19
     fdc:	41 f4       	brne	.+16     	; 0xfee <malloc+0xcc>
     fde:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
     fe2:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
     fe6:	30 93 c1 02 	sts	0x02C1, r19	; 0x8002c1 <__brkval+0x1>
     fea:	20 93 c0 02 	sts	0x02C0, r18	; 0x8002c0 <__brkval>
     fee:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     ff2:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     ff6:	21 15       	cp	r18, r1
     ff8:	31 05       	cpc	r19, r1
     ffa:	41 f4       	brne	.+16     	; 0x100c <malloc+0xea>
     ffc:	2d b7       	in	r18, 0x3d	; 61
     ffe:	3e b7       	in	r19, 0x3e	; 62
    1000:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1004:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1008:	24 1b       	sub	r18, r20
    100a:	35 0b       	sbc	r19, r21
    100c:	e0 91 c0 02 	lds	r30, 0x02C0	; 0x8002c0 <__brkval>
    1010:	f0 91 c1 02 	lds	r31, 0x02C1	; 0x8002c1 <__brkval+0x1>
    1014:	e2 17       	cp	r30, r18
    1016:	f3 07       	cpc	r31, r19
    1018:	a0 f4       	brcc	.+40     	; 0x1042 <malloc+0x120>
    101a:	2e 1b       	sub	r18, r30
    101c:	3f 0b       	sbc	r19, r31
    101e:	28 17       	cp	r18, r24
    1020:	39 07       	cpc	r19, r25
    1022:	78 f0       	brcs	.+30     	; 0x1042 <malloc+0x120>
    1024:	ac 01       	movw	r20, r24
    1026:	4e 5f       	subi	r20, 0xFE	; 254
    1028:	5f 4f       	sbci	r21, 0xFF	; 255
    102a:	24 17       	cp	r18, r20
    102c:	35 07       	cpc	r19, r21
    102e:	48 f0       	brcs	.+18     	; 0x1042 <malloc+0x120>
    1030:	4e 0f       	add	r20, r30
    1032:	5f 1f       	adc	r21, r31
    1034:	50 93 c1 02 	sts	0x02C1, r21	; 0x8002c1 <__brkval+0x1>
    1038:	40 93 c0 02 	sts	0x02C0, r20	; 0x8002c0 <__brkval>
    103c:	81 93       	st	Z+, r24
    103e:	91 93       	st	Z+, r25
    1040:	02 c0       	rjmp	.+4      	; 0x1046 <malloc+0x124>
    1042:	e0 e0       	ldi	r30, 0x00	; 0
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	cf 01       	movw	r24, r30
    1048:	df 91       	pop	r29
    104a:	cf 91       	pop	r28
    104c:	1f 91       	pop	r17
    104e:	0f 91       	pop	r16
    1050:	08 95       	ret

00001052 <free>:
    1052:	cf 93       	push	r28
    1054:	df 93       	push	r29
    1056:	00 97       	sbiw	r24, 0x00	; 0
    1058:	09 f4       	brne	.+2      	; 0x105c <free+0xa>
    105a:	81 c0       	rjmp	.+258    	; 0x115e <free+0x10c>
    105c:	fc 01       	movw	r30, r24
    105e:	32 97       	sbiw	r30, 0x02	; 2
    1060:	13 82       	std	Z+3, r1	; 0x03
    1062:	12 82       	std	Z+2, r1	; 0x02
    1064:	a0 91 c2 02 	lds	r26, 0x02C2	; 0x8002c2 <__flp>
    1068:	b0 91 c3 02 	lds	r27, 0x02C3	; 0x8002c3 <__flp+0x1>
    106c:	10 97       	sbiw	r26, 0x00	; 0
    106e:	81 f4       	brne	.+32     	; 0x1090 <free+0x3e>
    1070:	20 81       	ld	r18, Z
    1072:	31 81       	ldd	r19, Z+1	; 0x01
    1074:	82 0f       	add	r24, r18
    1076:	93 1f       	adc	r25, r19
    1078:	20 91 c0 02 	lds	r18, 0x02C0	; 0x8002c0 <__brkval>
    107c:	30 91 c1 02 	lds	r19, 0x02C1	; 0x8002c1 <__brkval+0x1>
    1080:	28 17       	cp	r18, r24
    1082:	39 07       	cpc	r19, r25
    1084:	51 f5       	brne	.+84     	; 0x10da <free+0x88>
    1086:	f0 93 c1 02 	sts	0x02C1, r31	; 0x8002c1 <__brkval+0x1>
    108a:	e0 93 c0 02 	sts	0x02C0, r30	; 0x8002c0 <__brkval>
    108e:	67 c0       	rjmp	.+206    	; 0x115e <free+0x10c>
    1090:	ed 01       	movw	r28, r26
    1092:	20 e0       	ldi	r18, 0x00	; 0
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	ce 17       	cp	r28, r30
    1098:	df 07       	cpc	r29, r31
    109a:	40 f4       	brcc	.+16     	; 0x10ac <free+0x5a>
    109c:	4a 81       	ldd	r20, Y+2	; 0x02
    109e:	5b 81       	ldd	r21, Y+3	; 0x03
    10a0:	9e 01       	movw	r18, r28
    10a2:	41 15       	cp	r20, r1
    10a4:	51 05       	cpc	r21, r1
    10a6:	f1 f0       	breq	.+60     	; 0x10e4 <free+0x92>
    10a8:	ea 01       	movw	r28, r20
    10aa:	f5 cf       	rjmp	.-22     	; 0x1096 <free+0x44>
    10ac:	d3 83       	std	Z+3, r29	; 0x03
    10ae:	c2 83       	std	Z+2, r28	; 0x02
    10b0:	40 81       	ld	r20, Z
    10b2:	51 81       	ldd	r21, Z+1	; 0x01
    10b4:	84 0f       	add	r24, r20
    10b6:	95 1f       	adc	r25, r21
    10b8:	c8 17       	cp	r28, r24
    10ba:	d9 07       	cpc	r29, r25
    10bc:	59 f4       	brne	.+22     	; 0x10d4 <free+0x82>
    10be:	88 81       	ld	r24, Y
    10c0:	99 81       	ldd	r25, Y+1	; 0x01
    10c2:	84 0f       	add	r24, r20
    10c4:	95 1f       	adc	r25, r21
    10c6:	02 96       	adiw	r24, 0x02	; 2
    10c8:	91 83       	std	Z+1, r25	; 0x01
    10ca:	80 83       	st	Z, r24
    10cc:	8a 81       	ldd	r24, Y+2	; 0x02
    10ce:	9b 81       	ldd	r25, Y+3	; 0x03
    10d0:	93 83       	std	Z+3, r25	; 0x03
    10d2:	82 83       	std	Z+2, r24	; 0x02
    10d4:	21 15       	cp	r18, r1
    10d6:	31 05       	cpc	r19, r1
    10d8:	29 f4       	brne	.+10     	; 0x10e4 <free+0x92>
    10da:	f0 93 c3 02 	sts	0x02C3, r31	; 0x8002c3 <__flp+0x1>
    10de:	e0 93 c2 02 	sts	0x02C2, r30	; 0x8002c2 <__flp>
    10e2:	3d c0       	rjmp	.+122    	; 0x115e <free+0x10c>
    10e4:	e9 01       	movw	r28, r18
    10e6:	fb 83       	std	Y+3, r31	; 0x03
    10e8:	ea 83       	std	Y+2, r30	; 0x02
    10ea:	49 91       	ld	r20, Y+
    10ec:	59 91       	ld	r21, Y+
    10ee:	c4 0f       	add	r28, r20
    10f0:	d5 1f       	adc	r29, r21
    10f2:	ec 17       	cp	r30, r28
    10f4:	fd 07       	cpc	r31, r29
    10f6:	61 f4       	brne	.+24     	; 0x1110 <free+0xbe>
    10f8:	80 81       	ld	r24, Z
    10fa:	91 81       	ldd	r25, Z+1	; 0x01
    10fc:	84 0f       	add	r24, r20
    10fe:	95 1f       	adc	r25, r21
    1100:	02 96       	adiw	r24, 0x02	; 2
    1102:	e9 01       	movw	r28, r18
    1104:	99 83       	std	Y+1, r25	; 0x01
    1106:	88 83       	st	Y, r24
    1108:	82 81       	ldd	r24, Z+2	; 0x02
    110a:	93 81       	ldd	r25, Z+3	; 0x03
    110c:	9b 83       	std	Y+3, r25	; 0x03
    110e:	8a 83       	std	Y+2, r24	; 0x02
    1110:	e0 e0       	ldi	r30, 0x00	; 0
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	12 96       	adiw	r26, 0x02	; 2
    1116:	8d 91       	ld	r24, X+
    1118:	9c 91       	ld	r25, X
    111a:	13 97       	sbiw	r26, 0x03	; 3
    111c:	00 97       	sbiw	r24, 0x00	; 0
    111e:	19 f0       	breq	.+6      	; 0x1126 <free+0xd4>
    1120:	fd 01       	movw	r30, r26
    1122:	dc 01       	movw	r26, r24
    1124:	f7 cf       	rjmp	.-18     	; 0x1114 <free+0xc2>
    1126:	8d 91       	ld	r24, X+
    1128:	9c 91       	ld	r25, X
    112a:	11 97       	sbiw	r26, 0x01	; 1
    112c:	9d 01       	movw	r18, r26
    112e:	2e 5f       	subi	r18, 0xFE	; 254
    1130:	3f 4f       	sbci	r19, 0xFF	; 255
    1132:	82 0f       	add	r24, r18
    1134:	93 1f       	adc	r25, r19
    1136:	20 91 c0 02 	lds	r18, 0x02C0	; 0x8002c0 <__brkval>
    113a:	30 91 c1 02 	lds	r19, 0x02C1	; 0x8002c1 <__brkval+0x1>
    113e:	28 17       	cp	r18, r24
    1140:	39 07       	cpc	r19, r25
    1142:	69 f4       	brne	.+26     	; 0x115e <free+0x10c>
    1144:	30 97       	sbiw	r30, 0x00	; 0
    1146:	29 f4       	brne	.+10     	; 0x1152 <free+0x100>
    1148:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <__flp+0x1>
    114c:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <__flp>
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <free+0x104>
    1152:	13 82       	std	Z+3, r1	; 0x03
    1154:	12 82       	std	Z+2, r1	; 0x02
    1156:	b0 93 c1 02 	sts	0x02C1, r27	; 0x8002c1 <__brkval+0x1>
    115a:	a0 93 c0 02 	sts	0x02C0, r26	; 0x8002c0 <__brkval>
    115e:	df 91       	pop	r29
    1160:	cf 91       	pop	r28
    1162:	08 95       	ret

00001164 <strnlen_P>:
    1164:	fc 01       	movw	r30, r24
    1166:	05 90       	lpm	r0, Z+
    1168:	61 50       	subi	r22, 0x01	; 1
    116a:	70 40       	sbci	r23, 0x00	; 0
    116c:	01 10       	cpse	r0, r1
    116e:	d8 f7       	brcc	.-10     	; 0x1166 <strnlen_P+0x2>
    1170:	80 95       	com	r24
    1172:	90 95       	com	r25
    1174:	8e 0f       	add	r24, r30
    1176:	9f 1f       	adc	r25, r31
    1178:	08 95       	ret

0000117a <memset>:
    117a:	dc 01       	movw	r26, r24
    117c:	01 c0       	rjmp	.+2      	; 0x1180 <memset+0x6>
    117e:	6d 93       	st	X+, r22
    1180:	41 50       	subi	r20, 0x01	; 1
    1182:	50 40       	sbci	r21, 0x00	; 0
    1184:	e0 f7       	brcc	.-8      	; 0x117e <memset+0x4>
    1186:	08 95       	ret

00001188 <strnlen>:
    1188:	fc 01       	movw	r30, r24
    118a:	61 50       	subi	r22, 0x01	; 1
    118c:	70 40       	sbci	r23, 0x00	; 0
    118e:	01 90       	ld	r0, Z+
    1190:	01 10       	cpse	r0, r1
    1192:	d8 f7       	brcc	.-10     	; 0x118a <strnlen+0x2>
    1194:	80 95       	com	r24
    1196:	90 95       	com	r25
    1198:	8e 0f       	add	r24, r30
    119a:	9f 1f       	adc	r25, r31
    119c:	08 95       	ret

0000119e <fputc>:
    119e:	0f 93       	push	r16
    11a0:	1f 93       	push	r17
    11a2:	cf 93       	push	r28
    11a4:	df 93       	push	r29
    11a6:	fb 01       	movw	r30, r22
    11a8:	23 81       	ldd	r18, Z+3	; 0x03
    11aa:	21 fd       	sbrc	r18, 1
    11ac:	03 c0       	rjmp	.+6      	; 0x11b4 <fputc+0x16>
    11ae:	8f ef       	ldi	r24, 0xFF	; 255
    11b0:	9f ef       	ldi	r25, 0xFF	; 255
    11b2:	2c c0       	rjmp	.+88     	; 0x120c <fputc+0x6e>
    11b4:	22 ff       	sbrs	r18, 2
    11b6:	16 c0       	rjmp	.+44     	; 0x11e4 <fputc+0x46>
    11b8:	46 81       	ldd	r20, Z+6	; 0x06
    11ba:	57 81       	ldd	r21, Z+7	; 0x07
    11bc:	24 81       	ldd	r18, Z+4	; 0x04
    11be:	35 81       	ldd	r19, Z+5	; 0x05
    11c0:	42 17       	cp	r20, r18
    11c2:	53 07       	cpc	r21, r19
    11c4:	44 f4       	brge	.+16     	; 0x11d6 <fputc+0x38>
    11c6:	a0 81       	ld	r26, Z
    11c8:	b1 81       	ldd	r27, Z+1	; 0x01
    11ca:	9d 01       	movw	r18, r26
    11cc:	2f 5f       	subi	r18, 0xFF	; 255
    11ce:	3f 4f       	sbci	r19, 0xFF	; 255
    11d0:	31 83       	std	Z+1, r19	; 0x01
    11d2:	20 83       	st	Z, r18
    11d4:	8c 93       	st	X, r24
    11d6:	26 81       	ldd	r18, Z+6	; 0x06
    11d8:	37 81       	ldd	r19, Z+7	; 0x07
    11da:	2f 5f       	subi	r18, 0xFF	; 255
    11dc:	3f 4f       	sbci	r19, 0xFF	; 255
    11de:	37 83       	std	Z+7, r19	; 0x07
    11e0:	26 83       	std	Z+6, r18	; 0x06
    11e2:	14 c0       	rjmp	.+40     	; 0x120c <fputc+0x6e>
    11e4:	8b 01       	movw	r16, r22
    11e6:	ec 01       	movw	r28, r24
    11e8:	fb 01       	movw	r30, r22
    11ea:	00 84       	ldd	r0, Z+8	; 0x08
    11ec:	f1 85       	ldd	r31, Z+9	; 0x09
    11ee:	e0 2d       	mov	r30, r0
    11f0:	09 95       	icall
    11f2:	89 2b       	or	r24, r25
    11f4:	e1 f6       	brne	.-72     	; 0x11ae <fputc+0x10>
    11f6:	d8 01       	movw	r26, r16
    11f8:	16 96       	adiw	r26, 0x06	; 6
    11fa:	8d 91       	ld	r24, X+
    11fc:	9c 91       	ld	r25, X
    11fe:	17 97       	sbiw	r26, 0x07	; 7
    1200:	01 96       	adiw	r24, 0x01	; 1
    1202:	17 96       	adiw	r26, 0x07	; 7
    1204:	9c 93       	st	X, r25
    1206:	8e 93       	st	-X, r24
    1208:	16 97       	sbiw	r26, 0x06	; 6
    120a:	ce 01       	movw	r24, r28
    120c:	df 91       	pop	r29
    120e:	cf 91       	pop	r28
    1210:	1f 91       	pop	r17
    1212:	0f 91       	pop	r16
    1214:	08 95       	ret

00001216 <__ultoa_invert>:
    1216:	fa 01       	movw	r30, r20
    1218:	aa 27       	eor	r26, r26
    121a:	28 30       	cpi	r18, 0x08	; 8
    121c:	51 f1       	breq	.+84     	; 0x1272 <__ultoa_invert+0x5c>
    121e:	20 31       	cpi	r18, 0x10	; 16
    1220:	81 f1       	breq	.+96     	; 0x1282 <__ultoa_invert+0x6c>
    1222:	e8 94       	clt
    1224:	6f 93       	push	r22
    1226:	6e 7f       	andi	r22, 0xFE	; 254
    1228:	6e 5f       	subi	r22, 0xFE	; 254
    122a:	7f 4f       	sbci	r23, 0xFF	; 255
    122c:	8f 4f       	sbci	r24, 0xFF	; 255
    122e:	9f 4f       	sbci	r25, 0xFF	; 255
    1230:	af 4f       	sbci	r26, 0xFF	; 255
    1232:	b1 e0       	ldi	r27, 0x01	; 1
    1234:	3e d0       	rcall	.+124    	; 0x12b2 <__ultoa_invert+0x9c>
    1236:	b4 e0       	ldi	r27, 0x04	; 4
    1238:	3c d0       	rcall	.+120    	; 0x12b2 <__ultoa_invert+0x9c>
    123a:	67 0f       	add	r22, r23
    123c:	78 1f       	adc	r23, r24
    123e:	89 1f       	adc	r24, r25
    1240:	9a 1f       	adc	r25, r26
    1242:	a1 1d       	adc	r26, r1
    1244:	68 0f       	add	r22, r24
    1246:	79 1f       	adc	r23, r25
    1248:	8a 1f       	adc	r24, r26
    124a:	91 1d       	adc	r25, r1
    124c:	a1 1d       	adc	r26, r1
    124e:	6a 0f       	add	r22, r26
    1250:	71 1d       	adc	r23, r1
    1252:	81 1d       	adc	r24, r1
    1254:	91 1d       	adc	r25, r1
    1256:	a1 1d       	adc	r26, r1
    1258:	20 d0       	rcall	.+64     	; 0x129a <__ultoa_invert+0x84>
    125a:	09 f4       	brne	.+2      	; 0x125e <__ultoa_invert+0x48>
    125c:	68 94       	set
    125e:	3f 91       	pop	r19
    1260:	2a e0       	ldi	r18, 0x0A	; 10
    1262:	26 9f       	mul	r18, r22
    1264:	11 24       	eor	r1, r1
    1266:	30 19       	sub	r19, r0
    1268:	30 5d       	subi	r19, 0xD0	; 208
    126a:	31 93       	st	Z+, r19
    126c:	de f6       	brtc	.-74     	; 0x1224 <__ultoa_invert+0xe>
    126e:	cf 01       	movw	r24, r30
    1270:	08 95       	ret
    1272:	46 2f       	mov	r20, r22
    1274:	47 70       	andi	r20, 0x07	; 7
    1276:	40 5d       	subi	r20, 0xD0	; 208
    1278:	41 93       	st	Z+, r20
    127a:	b3 e0       	ldi	r27, 0x03	; 3
    127c:	0f d0       	rcall	.+30     	; 0x129c <__ultoa_invert+0x86>
    127e:	c9 f7       	brne	.-14     	; 0x1272 <__ultoa_invert+0x5c>
    1280:	f6 cf       	rjmp	.-20     	; 0x126e <__ultoa_invert+0x58>
    1282:	46 2f       	mov	r20, r22
    1284:	4f 70       	andi	r20, 0x0F	; 15
    1286:	40 5d       	subi	r20, 0xD0	; 208
    1288:	4a 33       	cpi	r20, 0x3A	; 58
    128a:	18 f0       	brcs	.+6      	; 0x1292 <__ultoa_invert+0x7c>
    128c:	49 5d       	subi	r20, 0xD9	; 217
    128e:	31 fd       	sbrc	r19, 1
    1290:	40 52       	subi	r20, 0x20	; 32
    1292:	41 93       	st	Z+, r20
    1294:	02 d0       	rcall	.+4      	; 0x129a <__ultoa_invert+0x84>
    1296:	a9 f7       	brne	.-22     	; 0x1282 <__ultoa_invert+0x6c>
    1298:	ea cf       	rjmp	.-44     	; 0x126e <__ultoa_invert+0x58>
    129a:	b4 e0       	ldi	r27, 0x04	; 4
    129c:	a6 95       	lsr	r26
    129e:	97 95       	ror	r25
    12a0:	87 95       	ror	r24
    12a2:	77 95       	ror	r23
    12a4:	67 95       	ror	r22
    12a6:	ba 95       	dec	r27
    12a8:	c9 f7       	brne	.-14     	; 0x129c <__ultoa_invert+0x86>
    12aa:	00 97       	sbiw	r24, 0x00	; 0
    12ac:	61 05       	cpc	r22, r1
    12ae:	71 05       	cpc	r23, r1
    12b0:	08 95       	ret
    12b2:	9b 01       	movw	r18, r22
    12b4:	ac 01       	movw	r20, r24
    12b6:	0a 2e       	mov	r0, r26
    12b8:	06 94       	lsr	r0
    12ba:	57 95       	ror	r21
    12bc:	47 95       	ror	r20
    12be:	37 95       	ror	r19
    12c0:	27 95       	ror	r18
    12c2:	ba 95       	dec	r27
    12c4:	c9 f7       	brne	.-14     	; 0x12b8 <__ultoa_invert+0xa2>
    12c6:	62 0f       	add	r22, r18
    12c8:	73 1f       	adc	r23, r19
    12ca:	84 1f       	adc	r24, r20
    12cc:	95 1f       	adc	r25, r21
    12ce:	a0 1d       	adc	r26, r0
    12d0:	08 95       	ret

000012d2 <__prologue_saves__>:
    12d2:	2f 92       	push	r2
    12d4:	3f 92       	push	r3
    12d6:	4f 92       	push	r4
    12d8:	5f 92       	push	r5
    12da:	6f 92       	push	r6
    12dc:	7f 92       	push	r7
    12de:	8f 92       	push	r8
    12e0:	9f 92       	push	r9
    12e2:	af 92       	push	r10
    12e4:	bf 92       	push	r11
    12e6:	cf 92       	push	r12
    12e8:	df 92       	push	r13
    12ea:	ef 92       	push	r14
    12ec:	ff 92       	push	r15
    12ee:	0f 93       	push	r16
    12f0:	1f 93       	push	r17
    12f2:	cf 93       	push	r28
    12f4:	df 93       	push	r29
    12f6:	cd b7       	in	r28, 0x3d	; 61
    12f8:	de b7       	in	r29, 0x3e	; 62
    12fa:	ca 1b       	sub	r28, r26
    12fc:	db 0b       	sbc	r29, r27
    12fe:	0f b6       	in	r0, 0x3f	; 63
    1300:	f8 94       	cli
    1302:	de bf       	out	0x3e, r29	; 62
    1304:	0f be       	out	0x3f, r0	; 63
    1306:	cd bf       	out	0x3d, r28	; 61
    1308:	09 94       	ijmp

0000130a <__epilogue_restores__>:
    130a:	2a 88       	ldd	r2, Y+18	; 0x12
    130c:	39 88       	ldd	r3, Y+17	; 0x11
    130e:	48 88       	ldd	r4, Y+16	; 0x10
    1310:	5f 84       	ldd	r5, Y+15	; 0x0f
    1312:	6e 84       	ldd	r6, Y+14	; 0x0e
    1314:	7d 84       	ldd	r7, Y+13	; 0x0d
    1316:	8c 84       	ldd	r8, Y+12	; 0x0c
    1318:	9b 84       	ldd	r9, Y+11	; 0x0b
    131a:	aa 84       	ldd	r10, Y+10	; 0x0a
    131c:	b9 84       	ldd	r11, Y+9	; 0x09
    131e:	c8 84       	ldd	r12, Y+8	; 0x08
    1320:	df 80       	ldd	r13, Y+7	; 0x07
    1322:	ee 80       	ldd	r14, Y+6	; 0x06
    1324:	fd 80       	ldd	r15, Y+5	; 0x05
    1326:	0c 81       	ldd	r16, Y+4	; 0x04
    1328:	1b 81       	ldd	r17, Y+3	; 0x03
    132a:	aa 81       	ldd	r26, Y+2	; 0x02
    132c:	b9 81       	ldd	r27, Y+1	; 0x01
    132e:	ce 0f       	add	r28, r30
    1330:	d1 1d       	adc	r29, r1
    1332:	0f b6       	in	r0, 0x3f	; 63
    1334:	f8 94       	cli
    1336:	de bf       	out	0x3e, r29	; 62
    1338:	0f be       	out	0x3f, r0	; 63
    133a:	cd bf       	out	0x3d, r28	; 61
    133c:	ed 01       	movw	r28, r26
    133e:	08 95       	ret

00001340 <_exit>:
    1340:	f8 94       	cli

00001342 <__stop_program>:
    1342:	ff cf       	rjmp	.-2      	; 0x1342 <__stop_program>
