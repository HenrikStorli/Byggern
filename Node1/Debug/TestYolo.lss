
TestYolo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000164  00800100  00002330  000023c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002330  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000009c  00800264  00800264  00002528  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002528  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002584  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000308  00000000  00000000  000025c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003705  00000000  00000000  000028c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001541  00000000  00000000  00005fcd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000018f0  00000000  00000000  0000750e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000848  00000000  00000000  00008e00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cad  00000000  00000000  00009648  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000020c9  00000000  00000000  0000a2f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000288  00000000  00000000  0000c3be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cb 01 	jmp	0x396	; 0x396 <__ctors_end>
       4:	0c 94 3c 02 	jmp	0x478	; 0x478 <__vector_1>
       8:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
       c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      10:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      14:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      18:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      1c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      20:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      24:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      28:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      2c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      30:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      34:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      38:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      3c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      40:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      44:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      48:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      4c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      50:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      54:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      58:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      5c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      60:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      64:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      68:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      6c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      70:	08 4a       	sbci	r16, 0xA8	; 168
      72:	d7 3b       	cpi	r29, 0xB7	; 183
      74:	3b ce       	rjmp	.-906    	; 0xfffffcec <__eeprom_end+0xff7efcec>
      76:	01 6e       	ori	r16, 0xE1	; 225
      78:	84 bc       	out	0x24, r8	; 36
      7a:	bf fd       	.word	0xfdbf	; ????
      7c:	c1 2f       	mov	r28, r17
      7e:	3d 6c       	ori	r19, 0xCD	; 205
      80:	74 31       	cpi	r23, 0x14	; 20
      82:	9a bd       	out	0x2a, r25	; 42
      84:	56 83       	std	Z+6, r21	; 0x06
      86:	3d da       	rcall	.-2950   	; 0xfffff502 <__eeprom_end+0xff7ef502>
      88:	3d 00       	.word	0x003d	; ????
      8a:	c7 7f       	andi	r28, 0xF7	; 247
      8c:	11 be       	out	0x31, r1	; 49
      8e:	d9 e4       	ldi	r29, 0x49	; 73
      90:	bb 4c       	sbci	r27, 0xCB	; 203
      92:	3e 91       	ld	r19, -X
      94:	6b aa       	std	Y+51, r6	; 0x33
      96:	aa be       	out	0x3a, r10	; 58
      98:	00 00       	nop
      9a:	00 80       	ld	r0, Z
      9c:	3f 00       	.word	0x003f	; ????

0000009e <__trampolines_end>:
	...
      a6:	00 06       	cpc	r0, r16
      a8:	5f 5f       	subi	r21, 0xFF	; 255
      aa:	06 00       	.word	0x0006	; ????
      ac:	00 00       	nop
      ae:	00 07       	cpc	r16, r16
      b0:	07 00       	.word	0x0007	; ????
      b2:	07 07       	cpc	r16, r23
      b4:	00 00       	nop
      b6:	14 7f       	andi	r17, 0xF4	; 244
      b8:	7f 14       	cp	r7, r15
      ba:	7f 7f       	andi	r23, 0xFF	; 255
      bc:	14 00       	.word	0x0014	; ????
      be:	24 2e       	mov	r2, r20
      c0:	6b 6b       	ori	r22, 0xBB	; 187
      c2:	3a 12       	cpse	r3, r26
      c4:	00 00       	nop
      c6:	46 66       	ori	r20, 0x66	; 102
      c8:	30 18       	sub	r3, r0
      ca:	0c 66       	ori	r16, 0x6C	; 108
      cc:	62 00       	.word	0x0062	; ????
      ce:	30 7a       	andi	r19, 0xA0	; 160
      d0:	4f 5d       	subi	r20, 0xDF	; 223
      d2:	37 7a       	andi	r19, 0xA7	; 167
      d4:	48 00       	.word	0x0048	; ????
      d6:	04 07       	cpc	r16, r20
      d8:	03 00       	.word	0x0003	; ????
      da:	00 00       	nop
      dc:	00 00       	nop
      de:	00 1c       	adc	r0, r0
      e0:	3e 63       	ori	r19, 0x3E	; 62
      e2:	41 00       	.word	0x0041	; ????
      e4:	00 00       	nop
      e6:	00 41       	sbci	r16, 0x10	; 16
      e8:	63 3e       	cpi	r22, 0xE3	; 227
      ea:	1c 00       	.word	0x001c	; ????
      ec:	00 00       	nop
      ee:	08 2a       	or	r0, r24
      f0:	3e 1c       	adc	r3, r14
      f2:	1c 3e       	cpi	r17, 0xEC	; 236
      f4:	2a 08       	sbc	r2, r10
      f6:	08 08       	sbc	r0, r8
      f8:	3e 3e       	cpi	r19, 0xEE	; 238
      fa:	08 08       	sbc	r0, r8
      fc:	00 00       	nop
      fe:	00 a0       	ldd	r0, Z+32	; 0x20
     100:	e0 60       	ori	r30, 0x00	; 0
     102:	00 00       	nop
     104:	00 00       	nop
     106:	08 08       	sbc	r0, r8
     108:	08 08       	sbc	r0, r8
     10a:	08 08       	sbc	r0, r8
     10c:	00 00       	nop
     10e:	00 00       	nop
     110:	60 60       	ori	r22, 0x00	; 0
     112:	00 00       	nop
     114:	00 00       	nop
     116:	60 30       	cpi	r22, 0x00	; 0
     118:	18 0c       	add	r1, r8
     11a:	06 03       	mulsu	r16, r22
     11c:	01 00       	.word	0x0001	; ????
     11e:	3e 7f       	andi	r19, 0xFE	; 254
     120:	59 4d       	sbci	r21, 0xD9	; 217
     122:	7f 3e       	cpi	r23, 0xEF	; 239
     124:	00 00       	nop
     126:	42 42       	sbci	r20, 0x22	; 34
     128:	7f 7f       	andi	r23, 0xFF	; 255
     12a:	40 40       	sbci	r20, 0x00	; 0
     12c:	00 00       	nop
     12e:	62 73       	andi	r22, 0x32	; 50
     130:	59 49       	sbci	r21, 0x99	; 153
     132:	6f 66       	ori	r22, 0x6F	; 111
     134:	00 00       	nop
     136:	22 63       	ori	r18, 0x32	; 50
     138:	49 49       	sbci	r20, 0x99	; 153
     13a:	7f 36       	cpi	r23, 0x6F	; 111
     13c:	00 00       	nop
     13e:	18 1c       	adc	r1, r8
     140:	16 13       	cpse	r17, r22
     142:	7f 7f       	andi	r23, 0xFF	; 255
     144:	10 00       	.word	0x0010	; ????
     146:	27 67       	ori	r18, 0x77	; 119
     148:	45 45       	sbci	r20, 0x55	; 85
     14a:	7d 39       	cpi	r23, 0x9D	; 157
     14c:	00 00       	nop
     14e:	3c 7e       	andi	r19, 0xEC	; 236
     150:	4b 49       	sbci	r20, 0x9B	; 155
     152:	79 30       	cpi	r23, 0x09	; 9
     154:	00 00       	nop
     156:	03 63       	ori	r16, 0x33	; 51
     158:	71 19       	sub	r23, r1
     15a:	0f 07       	cpc	r16, r31
     15c:	00 00       	nop
     15e:	36 7f       	andi	r19, 0xF6	; 246
     160:	49 49       	sbci	r20, 0x99	; 153
     162:	7f 36       	cpi	r23, 0x6F	; 111
     164:	00 00       	nop
     166:	06 4f       	sbci	r16, 0xF6	; 246
     168:	49 69       	ori	r20, 0x99	; 153
     16a:	3f 1e       	adc	r3, r31
     16c:	00 00       	nop
     16e:	00 00       	nop
     170:	6c 6c       	ori	r22, 0xCC	; 204
     172:	00 00       	nop
     174:	00 00       	nop
     176:	00 a0       	ldd	r0, Z+32	; 0x20
     178:	ec 6c       	ori	r30, 0xCC	; 204
     17a:	00 00       	nop
     17c:	00 00       	nop
     17e:	08 1c       	adc	r0, r8
     180:	36 63       	ori	r19, 0x36	; 54
     182:	41 00       	.word	0x0041	; ????
     184:	00 00       	nop
     186:	14 14       	cp	r1, r4
     188:	14 14       	cp	r1, r4
     18a:	14 14       	cp	r1, r4
     18c:	00 00       	nop
     18e:	00 41       	sbci	r16, 0x10	; 16
     190:	63 36       	cpi	r22, 0x63	; 99
     192:	1c 08       	sbc	r1, r12
     194:	00 00       	nop
     196:	02 03       	mulsu	r16, r18
     198:	51 59       	subi	r21, 0x91	; 145
     19a:	0f 06       	cpc	r0, r31
     19c:	00 00       	nop
     19e:	3e 7f       	andi	r19, 0xFE	; 254
     1a0:	41 5d       	subi	r20, 0xD1	; 209
     1a2:	5d 1f       	adc	r21, r29
     1a4:	1e 00       	.word	0x001e	; ????
     1a6:	7c 7e       	andi	r23, 0xEC	; 236
     1a8:	13 13       	cpse	r17, r19
     1aa:	7e 7c       	andi	r23, 0xCE	; 206
     1ac:	00 00       	nop
     1ae:	41 7f       	andi	r20, 0xF1	; 241
     1b0:	7f 49       	sbci	r23, 0x9F	; 159
     1b2:	49 7f       	andi	r20, 0xF9	; 249
     1b4:	36 00       	.word	0x0036	; ????
     1b6:	1c 3e       	cpi	r17, 0xEC	; 236
     1b8:	63 41       	sbci	r22, 0x13	; 19
     1ba:	41 63       	ori	r20, 0x31	; 49
     1bc:	22 00       	.word	0x0022	; ????
     1be:	41 7f       	andi	r20, 0xF1	; 241
     1c0:	7f 41       	sbci	r23, 0x1F	; 31
     1c2:	63 7f       	andi	r22, 0xF3	; 243
     1c4:	1c 00       	.word	0x001c	; ????
     1c6:	41 7f       	andi	r20, 0xF1	; 241
     1c8:	7f 49       	sbci	r23, 0x9F	; 159
     1ca:	5d 41       	sbci	r21, 0x1D	; 29
     1cc:	63 00       	.word	0x0063	; ????
     1ce:	41 7f       	andi	r20, 0xF1	; 241
     1d0:	7f 49       	sbci	r23, 0x9F	; 159
     1d2:	1d 01       	movw	r2, r26
     1d4:	03 00       	.word	0x0003	; ????
     1d6:	1c 3e       	cpi	r17, 0xEC	; 236
     1d8:	63 41       	sbci	r22, 0x13	; 19
     1da:	51 73       	andi	r21, 0x31	; 49
     1dc:	72 00       	.word	0x0072	; ????
     1de:	7f 7f       	andi	r23, 0xFF	; 255
     1e0:	08 08       	sbc	r0, r8
     1e2:	7f 7f       	andi	r23, 0xFF	; 255
     1e4:	00 00       	nop
     1e6:	00 41       	sbci	r16, 0x10	; 16
     1e8:	7f 7f       	andi	r23, 0xFF	; 255
     1ea:	41 00       	.word	0x0041	; ????
     1ec:	00 00       	nop
     1ee:	30 70       	andi	r19, 0x00	; 0
     1f0:	40 41       	sbci	r20, 0x10	; 16
     1f2:	7f 3f       	cpi	r23, 0xFF	; 255
     1f4:	01 00       	.word	0x0001	; ????
     1f6:	41 7f       	andi	r20, 0xF1	; 241
     1f8:	7f 08       	sbc	r7, r15
     1fa:	1c 77       	andi	r17, 0x7C	; 124
     1fc:	63 00       	.word	0x0063	; ????
     1fe:	41 7f       	andi	r20, 0xF1	; 241
     200:	7f 41       	sbci	r23, 0x1F	; 31
     202:	40 60       	ori	r20, 0x00	; 0
     204:	70 00       	.word	0x0070	; ????
     206:	7f 7f       	andi	r23, 0xFF	; 255
     208:	06 0c       	add	r0, r6
     20a:	06 7f       	andi	r16, 0xF6	; 246
     20c:	7f 00       	.word	0x007f	; ????
     20e:	7f 7f       	andi	r23, 0xFF	; 255
     210:	06 0c       	add	r0, r6
     212:	18 7f       	andi	r17, 0xF8	; 248
     214:	7f 00       	.word	0x007f	; ????
     216:	1c 3e       	cpi	r17, 0xEC	; 236
     218:	63 41       	sbci	r22, 0x13	; 19
     21a:	63 3e       	cpi	r22, 0xE3	; 227
     21c:	1c 00       	.word	0x001c	; ????
     21e:	41 7f       	andi	r20, 0xF1	; 241
     220:	7f 49       	sbci	r23, 0x9F	; 159
     222:	09 0f       	add	r16, r25
     224:	06 00       	.word	0x0006	; ????
     226:	1e 3f       	cpi	r17, 0xFE	; 254
     228:	21 71       	andi	r18, 0x11	; 17
     22a:	7f 5e       	subi	r23, 0xEF	; 239
     22c:	00 00       	nop
     22e:	41 7f       	andi	r20, 0xF1	; 241
     230:	7f 19       	sub	r23, r15
     232:	39 6f       	ori	r19, 0xF9	; 249
     234:	46 00       	.word	0x0046	; ????
     236:	26 67       	ori	r18, 0x76	; 118
     238:	4d 59       	subi	r20, 0x9D	; 157
     23a:	7b 32       	cpi	r23, 0x2B	; 43
     23c:	00 00       	nop
     23e:	03 41       	sbci	r16, 0x13	; 19
     240:	7f 7f       	andi	r23, 0xFF	; 255
     242:	41 03       	mulsu	r20, r17
     244:	00 00       	nop
     246:	7f 7f       	andi	r23, 0xFF	; 255
     248:	40 40       	sbci	r20, 0x00	; 0
     24a:	7f 7f       	andi	r23, 0xFF	; 255
     24c:	00 00       	nop
     24e:	1f 3f       	cpi	r17, 0xFF	; 255
     250:	60 60       	ori	r22, 0x00	; 0
     252:	3f 1f       	adc	r19, r31
     254:	00 00       	nop
     256:	7f 7f       	andi	r23, 0xFF	; 255
     258:	30 18       	sub	r3, r0
     25a:	30 7f       	andi	r19, 0xF0	; 240
     25c:	7f 00       	.word	0x007f	; ????
     25e:	63 77       	andi	r22, 0x73	; 115
     260:	1c 08       	sbc	r1, r12
     262:	1c 77       	andi	r17, 0x7C	; 124
     264:	63 00       	.word	0x0063	; ????
     266:	07 4f       	sbci	r16, 0xF7	; 247
     268:	78 78       	andi	r23, 0x88	; 136
     26a:	4f 07       	cpc	r20, r31
     26c:	00 00       	nop
     26e:	67 73       	andi	r22, 0x37	; 55
     270:	59 4d       	sbci	r21, 0xD9	; 217
     272:	47 63       	ori	r20, 0x37	; 55
     274:	71 00       	.word	0x0071	; ????
     276:	00 7f       	andi	r16, 0xF0	; 240
     278:	7f 41       	sbci	r23, 0x1F	; 31
     27a:	41 00       	.word	0x0041	; ????
     27c:	00 00       	nop
     27e:	01 03       	mulsu	r16, r17
     280:	06 0c       	add	r0, r6
     282:	18 30       	cpi	r17, 0x08	; 8
     284:	60 00       	.word	0x0060	; ????
     286:	00 41       	sbci	r16, 0x10	; 16
     288:	41 7f       	andi	r20, 0xF1	; 241
     28a:	7f 00       	.word	0x007f	; ????
     28c:	00 00       	nop
     28e:	08 0c       	add	r0, r8
     290:	06 03       	mulsu	r16, r22
     292:	06 0c       	add	r0, r6
     294:	08 00       	.word	0x0008	; ????
     296:	80 80       	ld	r8, Z
     298:	80 80       	ld	r8, Z
     29a:	80 80       	ld	r8, Z
     29c:	80 80       	ld	r8, Z
     29e:	00 00       	nop
     2a0:	03 07       	cpc	r16, r19
     2a2:	04 00       	.word	0x0004	; ????
     2a4:	00 00       	nop
     2a6:	20 74       	andi	r18, 0x40	; 64
     2a8:	54 54       	subi	r21, 0x44	; 68
     2aa:	3c 78       	andi	r19, 0x8C	; 140
     2ac:	40 00       	.word	0x0040	; ????
     2ae:	41 3f       	cpi	r20, 0xF1	; 241
     2b0:	7f 44       	sbci	r23, 0x4F	; 79
     2b2:	44 7c       	andi	r20, 0xC4	; 196
     2b4:	38 00       	.word	0x0038	; ????
     2b6:	38 7c       	andi	r19, 0xC8	; 200
     2b8:	44 44       	sbci	r20, 0x44	; 68
     2ba:	6c 28       	or	r6, r12
     2bc:	00 00       	nop
     2be:	30 78       	andi	r19, 0x80	; 128
     2c0:	48 49       	sbci	r20, 0x98	; 152
     2c2:	3f 7f       	andi	r19, 0xFF	; 255
     2c4:	40 00       	.word	0x0040	; ????
     2c6:	38 7c       	andi	r19, 0xC8	; 200
     2c8:	54 54       	subi	r21, 0x44	; 68
     2ca:	5c 18       	sub	r5, r12
     2cc:	00 00       	nop
     2ce:	48 7e       	andi	r20, 0xE8	; 232
     2d0:	7f 49       	sbci	r23, 0x9F	; 159
     2d2:	03 02       	muls	r16, r19
     2d4:	00 00       	nop
     2d6:	98 bc       	out	0x28, r9	; 40
     2d8:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2da:	f8 7c       	andi	r31, 0xC8	; 200
     2dc:	04 00       	.word	0x0004	; ????
     2de:	41 7f       	andi	r20, 0xF1	; 241
     2e0:	7f 08       	sbc	r7, r15
     2e2:	04 7c       	andi	r16, 0xC4	; 196
     2e4:	78 00       	.word	0x0078	; ????
     2e6:	00 44       	sbci	r16, 0x40	; 64
     2e8:	7d 7d       	andi	r23, 0xDD	; 221
     2ea:	40 00       	.word	0x0040	; ????
     2ec:	00 00       	nop
     2ee:	40 c4       	rjmp	.+2176   	; 0xb70 <check_highscore+0x2>
     2f0:	84 fd       	sbrc	r24, 4
     2f2:	7d 00       	.word	0x007d	; ????
     2f4:	00 00       	nop
     2f6:	41 7f       	andi	r20, 0xF1	; 241
     2f8:	7f 10       	cpse	r7, r15
     2fa:	38 6c       	ori	r19, 0xC8	; 200
     2fc:	44 00       	.word	0x0044	; ????
     2fe:	00 41       	sbci	r16, 0x10	; 16
     300:	7f 7f       	andi	r23, 0xFF	; 255
     302:	40 00       	.word	0x0040	; ????
     304:	00 00       	nop
     306:	7c 7c       	andi	r23, 0xCC	; 204
     308:	0c 18       	sub	r0, r12
     30a:	0c 7c       	andi	r16, 0xCC	; 204
     30c:	78 00       	.word	0x0078	; ????
     30e:	7c 7c       	andi	r23, 0xCC	; 204
     310:	04 04       	cpc	r0, r4
     312:	7c 78       	andi	r23, 0x8C	; 140
     314:	00 00       	nop
     316:	38 7c       	andi	r19, 0xC8	; 200
     318:	44 44       	sbci	r20, 0x44	; 68
     31a:	7c 38       	cpi	r23, 0x8C	; 140
     31c:	00 00       	nop
     31e:	84 fc       	sbrc	r8, 4
     320:	f8 a4       	ldd	r15, Y+40	; 0x28
     322:	24 3c       	cpi	r18, 0xC4	; 196
     324:	18 00       	.word	0x0018	; ????
     326:	18 3c       	cpi	r17, 0xC8	; 200
     328:	24 a4       	ldd	r2, Z+44	; 0x2c
     32a:	f8 fc       	.word	0xfcf8	; ????
     32c:	84 00       	.word	0x0084	; ????
     32e:	44 7c       	andi	r20, 0xC4	; 196
     330:	78 44       	sbci	r23, 0x48	; 72
     332:	1c 18       	sub	r1, r12
     334:	00 00       	nop
     336:	48 5c       	subi	r20, 0xC8	; 200
     338:	54 54       	subi	r21, 0x44	; 68
     33a:	74 24       	eor	r7, r4
     33c:	00 00       	nop
     33e:	00 04       	cpc	r0, r0
     340:	3e 7f       	andi	r19, 0xFE	; 254
     342:	44 24       	eor	r4, r4
     344:	00 00       	nop
     346:	3c 7c       	andi	r19, 0xCC	; 204
     348:	40 40       	sbci	r20, 0x00	; 0
     34a:	3c 7c       	andi	r19, 0xCC	; 204
     34c:	40 00       	.word	0x0040	; ????
     34e:	1c 3c       	cpi	r17, 0xCC	; 204
     350:	60 60       	ori	r22, 0x00	; 0
     352:	3c 1c       	adc	r3, r12
     354:	00 00       	nop
     356:	3c 7c       	andi	r19, 0xCC	; 204
     358:	60 30       	cpi	r22, 0x00	; 0
     35a:	60 7c       	andi	r22, 0xC0	; 192
     35c:	3c 00       	.word	0x003c	; ????
     35e:	44 6c       	ori	r20, 0xC4	; 196
     360:	38 10       	cpse	r3, r8
     362:	38 6c       	ori	r19, 0xC8	; 200
     364:	44 00       	.word	0x0044	; ????
     366:	9c bc       	out	0x2c, r9	; 44
     368:	a0 a0       	ldd	r10, Z+32	; 0x20
     36a:	fc 7c       	andi	r31, 0xCC	; 204
     36c:	00 00       	nop
     36e:	4c 64       	ori	r20, 0x4C	; 76
     370:	74 5c       	subi	r23, 0xC4	; 196
     372:	4c 64       	ori	r20, 0x4C	; 76
     374:	00 00       	nop
     376:	08 08       	sbc	r0, r8
     378:	3e 77       	andi	r19, 0x7E	; 126
     37a:	41 41       	sbci	r20, 0x11	; 17
     37c:	00 00       	nop
     37e:	00 00       	nop
     380:	00 77       	andi	r16, 0x70	; 112
     382:	77 00       	.word	0x0077	; ????
     384:	00 00       	nop
     386:	41 41       	sbci	r20, 0x11	; 17
     388:	77 3e       	cpi	r23, 0xE7	; 231
     38a:	08 08       	sbc	r0, r8
     38c:	00 00       	nop
     38e:	02 03       	mulsu	r16, r18
     390:	01 03       	mulsu	r16, r17
     392:	02 03       	mulsu	r16, r18
     394:	01 00       	.word	0x0001	; ????

00000396 <__ctors_end>:
     396:	11 24       	eor	r1, r1
     398:	1f be       	out	0x3f, r1	; 63
     39a:	cf ef       	ldi	r28, 0xFF	; 255
     39c:	d4 e0       	ldi	r29, 0x04	; 4
     39e:	de bf       	out	0x3e, r29	; 62
     3a0:	cd bf       	out	0x3d, r28	; 61

000003a2 <__do_copy_data>:
     3a2:	12 e0       	ldi	r17, 0x02	; 2
     3a4:	a0 e0       	ldi	r26, 0x00	; 0
     3a6:	b1 e0       	ldi	r27, 0x01	; 1
     3a8:	e0 e3       	ldi	r30, 0x30	; 48
     3aa:	f3 e2       	ldi	r31, 0x23	; 35
     3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <__do_copy_data+0x10>
     3ae:	05 90       	lpm	r0, Z+
     3b0:	0d 92       	st	X+, r0
     3b2:	a4 36       	cpi	r26, 0x64	; 100
     3b4:	b1 07       	cpc	r27, r17
     3b6:	d9 f7       	brne	.-10     	; 0x3ae <__do_copy_data+0xc>

000003b8 <__do_clear_bss>:
     3b8:	23 e0       	ldi	r18, 0x03	; 3
     3ba:	a4 e6       	ldi	r26, 0x64	; 100
     3bc:	b2 e0       	ldi	r27, 0x02	; 2
     3be:	01 c0       	rjmp	.+2      	; 0x3c2 <.do_clear_bss_start>

000003c0 <.do_clear_bss_loop>:
     3c0:	1d 92       	st	X+, r1

000003c2 <.do_clear_bss_start>:
     3c2:	a0 30       	cpi	r26, 0x00	; 0
     3c4:	b2 07       	cpc	r27, r18
     3c6:	e1 f7       	brne	.-8      	; 0x3c0 <.do_clear_bss_loop>
     3c8:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <main>
     3cc:	0c 94 96 11 	jmp	0x232c	; 0x232c <_exit>

000003d0 <__bad_interrupt>:
     3d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003d4 <ADC_read>:
    uint8_t retreived_value = ext_ram1[adrs];
    if (retreived_value != 0b01010101) {
        printf("ADC error, ext_ram1[%4d] = %02X  \n\r", adrs, retreived_value);
    }
    else{
        printf("ADC success, ext_ram1[%4d] = %02X  \n\r", adrs, retreived_value);
     3d4:	80 68       	ori	r24, 0x80	; 128
     3d6:	e1 e0       	ldi	r30, 0x01	; 1
     3d8:	f4 e1       	ldi	r31, 0x14	; 20
     3da:	80 83       	st	Z, r24
     3dc:	86 ef       	ldi	r24, 0xF6	; 246
     3de:	8a 95       	dec	r24
     3e0:	f1 f7       	brne	.-4      	; 0x3de <ADC_read+0xa>
     3e2:	80 81       	ld	r24, Z
     3e4:	08 95       	ret

000003e6 <ADC_calibrate>:
     3e6:	e1 e0       	ldi	r30, 0x01	; 1
     3e8:	f4 e1       	ldi	r31, 0x14	; 20
     3ea:	20 e8       	ldi	r18, 0x80	; 128
     3ec:	20 83       	st	Z, r18
     3ee:	26 ef       	ldi	r18, 0xF6	; 246
     3f0:	2a 95       	dec	r18
     3f2:	f1 f7       	brne	.-4      	; 0x3f0 <ADC_calibrate+0xa>
     3f4:	20 81       	ld	r18, Z
     3f6:	30 e0       	ldi	r19, 0x00	; 0
     3f8:	dc 01       	movw	r26, r24
     3fa:	2d 93       	st	X+, r18
     3fc:	3c 93       	st	X, r19
     3fe:	21 e8       	ldi	r18, 0x81	; 129
     400:	20 83       	st	Z, r18
     402:	b6 ef       	ldi	r27, 0xF6	; 246
     404:	ba 95       	dec	r27
     406:	f1 f7       	brne	.-4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     408:	20 81       	ld	r18, Z
     40a:	30 e0       	ldi	r19, 0x00	; 0
     40c:	fc 01       	movw	r30, r24
     40e:	33 83       	std	Z+3, r19	; 0x03
     410:	22 83       	std	Z+2, r18	; 0x02
     412:	08 95       	ret

00000414 <ADC_timer_init>:
}


void ADC_timer_init(void) {

    DDRB|=(1<<PB0);  /*set OC0 pin as output*/
     414:	b8 9a       	sbi	0x17, 0	; 23

    TCCR0 |= (1<<WGM01) | (0<<WGM00);
     416:	83 b7       	in	r24, 0x33	; 51
     418:	88 60       	ori	r24, 0x08	; 8
     41a:	83 bf       	out	0x33, r24	; 51
    TCCR0 |= (1<<COM00);
     41c:	83 b7       	in	r24, 0x33	; 51
     41e:	80 61       	ori	r24, 0x10	; 16
     420:	83 bf       	out	0x33, r24	; 51
    TCCR0 |= (1<<CS00);
     422:	83 b7       	in	r24, 0x33	; 51
     424:	81 60       	ori	r24, 0x01	; 1
     426:	83 bf       	out	0x33, r24	; 51

    OCR0 = 0b00000001;
     428:	81 e0       	ldi	r24, 0x01	; 1
     42a:	81 bf       	out	0x31, r24	; 49
     42c:	08 95       	ret

0000042e <CAN_init>:
    for(uint8_t i = 0; i < message.data_length; i++){
        (message.data)[i] = mcp_read(MCP_RXB0DM +i + 16);
    }
    
    return message;
}
     42e:	cf 93       	push	r28
     430:	c8 2f       	mov	r28, r24
     432:	f8 94       	cli
     434:	85 b7       	in	r24, 0x35	; 53
     436:	82 60       	ori	r24, 0x02	; 2
     438:	85 bf       	out	0x35, r24	; 53
     43a:	85 b7       	in	r24, 0x35	; 53
     43c:	8e 7f       	andi	r24, 0xFE	; 254
     43e:	85 bf       	out	0x35, r24	; 53
     440:	8b b7       	in	r24, 0x3b	; 59
     442:	80 64       	ori	r24, 0x40	; 64
     444:	8b bf       	out	0x3b, r24	; 59
     446:	78 94       	sei
     448:	80 e8       	ldi	r24, 0x80	; 128
     44a:	0e 94 87 03 	call	0x70e	; 0x70e <mcp_init>
     44e:	61 e0       	ldi	r22, 0x01	; 1
     450:	8b e2       	ldi	r24, 0x2B	; 43
     452:	0e 94 4e 03 	call	0x69c	; 0x69c <mcp_write>
     456:	61 e8       	ldi	r22, 0x81	; 129
     458:	8a e2       	ldi	r24, 0x2A	; 42
     45a:	0e 94 4e 03 	call	0x69c	; 0x69c <mcp_write>
     45e:	6d ea       	ldi	r22, 0xAD	; 173
     460:	89 e2       	ldi	r24, 0x29	; 41
     462:	0e 94 4e 03 	call	0x69c	; 0x69c <mcp_write>
     466:	65 e0       	ldi	r22, 0x05	; 5
     468:	88 e2       	ldi	r24, 0x28	; 40
     46a:	0e 94 4e 03 	call	0x69c	; 0x69c <mcp_write>
     46e:	8c 2f       	mov	r24, r28
     470:	0e 94 64 03 	call	0x6c8	; 0x6c8 <mcp_set_mode>
     474:	cf 91       	pop	r28
     476:	08 95       	ret

00000478 <__vector_1>:
     478:	1f 92       	push	r1
     47a:	0f 92       	push	r0
     47c:	0f b6       	in	r0, 0x3f	; 63
     47e:	0f 92       	push	r0
     480:	11 24       	eor	r1, r1
     482:	8f 93       	push	r24
     484:	9f 93       	push	r25
     486:	81 e0       	ldi	r24, 0x01	; 1
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	90 93 65 02 	sts	0x0265, r25	; 0x800265 <__data_end+0x1>
     48e:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <__data_end>
     492:	9f 91       	pop	r25
     494:	8f 91       	pop	r24
     496:	0f 90       	pop	r0
     498:	0f be       	out	0x3f, r0	; 63
     49a:	0f 90       	pop	r0
     49c:	1f 90       	pop	r1
     49e:	18 95       	reti

000004a0 <CAN_message_transmission>:
     4a0:	0f 93       	push	r16
     4a2:	1f 93       	push	r17
     4a4:	cf 93       	push	r28
     4a6:	df 93       	push	r29
     4a8:	8c 01       	movw	r16, r24
     4aa:	fc 01       	movw	r30, r24
     4ac:	c0 81       	ld	r28, Z
     4ae:	d1 81       	ldd	r29, Z+1	; 0x01
     4b0:	6c 2f       	mov	r22, r28
     4b2:	62 95       	swap	r22
     4b4:	66 0f       	add	r22, r22
     4b6:	60 7e       	andi	r22, 0xE0	; 224
     4b8:	82 e3       	ldi	r24, 0x32	; 50
     4ba:	0e 94 4e 03 	call	0x69c	; 0x69c <mcp_write>
     4be:	be 01       	movw	r22, r28
     4c0:	76 95       	lsr	r23
     4c2:	67 95       	ror	r22
     4c4:	76 95       	lsr	r23
     4c6:	67 95       	ror	r22
     4c8:	76 95       	lsr	r23
     4ca:	67 95       	ror	r22
     4cc:	81 e3       	ldi	r24, 0x31	; 49
     4ce:	0e 94 4e 03 	call	0x69c	; 0x69c <mcp_write>
     4d2:	f8 01       	movw	r30, r16
     4d4:	62 81       	ldd	r22, Z+2	; 0x02
     4d6:	85 e3       	ldi	r24, 0x35	; 53
     4d8:	0e 94 4e 03 	call	0x69c	; 0x69c <mcp_write>
     4dc:	f8 01       	movw	r30, r16
     4de:	82 81       	ldd	r24, Z+2	; 0x02
     4e0:	88 23       	and	r24, r24
     4e2:	71 f0       	breq	.+28     	; 0x500 <__stack+0x1>
     4e4:	c0 e0       	ldi	r28, 0x00	; 0
     4e6:	f8 01       	movw	r30, r16
     4e8:	ec 0f       	add	r30, r28
     4ea:	f1 1d       	adc	r31, r1
     4ec:	63 81       	ldd	r22, Z+3	; 0x03
     4ee:	86 e3       	ldi	r24, 0x36	; 54
     4f0:	8c 0f       	add	r24, r28
     4f2:	0e 94 4e 03 	call	0x69c	; 0x69c <mcp_write>
     4f6:	cf 5f       	subi	r28, 0xFF	; 255
     4f8:	f8 01       	movw	r30, r16
     4fa:	82 81       	ldd	r24, Z+2	; 0x02
     4fc:	c8 17       	cp	r28, r24
     4fe:	98 f3       	brcs	.-26     	; 0x4e6 <CAN_message_transmission+0x46>
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	0e 94 df 03 	call	0x7be	; 0x7be <mcp_request_to_send>
     506:	df 91       	pop	r29
     508:	cf 91       	pop	r28
     50a:	1f 91       	pop	r17
     50c:	0f 91       	pop	r16
     50e:	08 95       	ret

00000510 <CAN_meessage_reception>:
     510:	9f 92       	push	r9
     512:	af 92       	push	r10
     514:	bf 92       	push	r11
     516:	cf 92       	push	r12
     518:	df 92       	push	r13
     51a:	ef 92       	push	r14
     51c:	ff 92       	push	r15
     51e:	0f 93       	push	r16
     520:	1f 93       	push	r17
     522:	cf 93       	push	r28
     524:	df 93       	push	r29
     526:	cd b7       	in	r28, 0x3d	; 61
     528:	de b7       	in	r29, 0x3e	; 62
     52a:	2b 97       	sbiw	r28, 0x0b	; 11
     52c:	0f b6       	in	r0, 0x3f	; 63
     52e:	f8 94       	cli
     530:	de bf       	out	0x3e, r29	; 62
     532:	0f be       	out	0x3f, r0	; 63
     534:	cd bf       	out	0x3d, r28	; 61
     536:	5c 01       	movw	r10, r24
     538:	81 e6       	ldi	r24, 0x61	; 97
     53a:	0e 94 69 03 	call	0x6d2	; 0x6d2 <mcp_read>
     53e:	c8 2e       	mov	r12, r24
     540:	d1 2c       	mov	r13, r1
     542:	82 e6       	ldi	r24, 0x62	; 98
     544:	0e 94 69 03 	call	0x6d2	; 0x6d2 <mcp_read>
     548:	dc 2c       	mov	r13, r12
     54a:	cc 24       	eor	r12, r12
     54c:	80 7e       	andi	r24, 0xE0	; 224
     54e:	c8 0e       	add	r12, r24
     550:	d1 1c       	adc	r13, r1
     552:	85 e6       	ldi	r24, 0x65	; 101
     554:	0e 94 69 03 	call	0x6d2	; 0x6d2 <mcp_read>
     558:	8f 70       	andi	r24, 0x0F	; 15
     55a:	98 2e       	mov	r9, r24
     55c:	81 f0       	breq	.+32     	; 0x57e <CAN_meessage_reception+0x6e>
     55e:	7e 01       	movw	r14, r28
     560:	84 e0       	ldi	r24, 0x04	; 4
     562:	e8 0e       	add	r14, r24
     564:	f1 1c       	adc	r15, r1
     566:	06 e6       	ldi	r16, 0x66	; 102
     568:	09 0d       	add	r16, r9
     56a:	16 e6       	ldi	r17, 0x66	; 102
     56c:	81 2f       	mov	r24, r17
     56e:	0e 94 69 03 	call	0x6d2	; 0x6d2 <mcp_read>
     572:	f7 01       	movw	r30, r14
     574:	81 93       	st	Z+, r24
     576:	7f 01       	movw	r14, r30
     578:	1f 5f       	subi	r17, 0xFF	; 255
     57a:	10 13       	cpse	r17, r16
     57c:	f7 cf       	rjmp	.-18     	; 0x56c <CAN_meessage_reception+0x5c>
     57e:	da 82       	std	Y+2, r13	; 0x02
     580:	c9 82       	std	Y+1, r12	; 0x01
     582:	9b 82       	std	Y+3, r9	; 0x03
     584:	8b e0       	ldi	r24, 0x0B	; 11
     586:	fe 01       	movw	r30, r28
     588:	31 96       	adiw	r30, 0x01	; 1
     58a:	d5 01       	movw	r26, r10
     58c:	01 90       	ld	r0, Z+
     58e:	0d 92       	st	X+, r0
     590:	8a 95       	dec	r24
     592:	e1 f7       	brne	.-8      	; 0x58c <CAN_meessage_reception+0x7c>
     594:	c5 01       	movw	r24, r10
     596:	2b 96       	adiw	r28, 0x0b	; 11
     598:	0f b6       	in	r0, 0x3f	; 63
     59a:	f8 94       	cli
     59c:	de bf       	out	0x3e, r29	; 62
     59e:	0f be       	out	0x3f, r0	; 63
     5a0:	cd bf       	out	0x3d, r28	; 61
     5a2:	df 91       	pop	r29
     5a4:	cf 91       	pop	r28
     5a6:	1f 91       	pop	r17
     5a8:	0f 91       	pop	r16
     5aa:	ff 90       	pop	r15
     5ac:	ef 90       	pop	r14
     5ae:	df 90       	pop	r13
     5b0:	cf 90       	pop	r12
     5b2:	bf 90       	pop	r11
     5b4:	af 90       	pop	r10
     5b6:	9f 90       	pop	r9
     5b8:	08 95       	ret

000005ba <message_handler>:

CAN_message_t message_handler(){
     5ba:	cf 93       	push	r28
     5bc:	df 93       	push	r29
     5be:	ec 01       	movw	r28, r24
    CAN_message_t message;
    
	if(flag){
     5c0:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <__data_end>
     5c4:	90 91 65 02 	lds	r25, 0x0265	; 0x800265 <__data_end+0x1>
     5c8:	89 2b       	or	r24, r25
     5ca:	61 f0       	breq	.+24     	; 0x5e4 <message_handler+0x2a>
        message = CAN_meessage_reception(); //reads buffer 2 register
     5cc:	ce 01       	movw	r24, r28
     5ce:	0e 94 88 02 	call	0x510	; 0x510 <CAN_meessage_reception>

		flag = 0;
     5d2:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <__data_end+0x1>
     5d6:	10 92 64 02 	sts	0x0264, r1	; 0x800264 <__data_end>
        mcp_bit_modify(MCP_CANINTF, 1, 0);  // resets can interrupt flag bit for buffer 1
     5da:	40 e0       	ldi	r20, 0x00	; 0
     5dc:	61 e0       	ldi	r22, 0x01	; 1
     5de:	8c e2       	ldi	r24, 0x2C	; 44
     5e0:	0e 94 c3 03 	call	0x786	; 0x786 <mcp_bit_modify>

    }
    
    printf("FALG STATUS: %d\n\r", flag);
     5e4:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <__data_end>
     5e8:	90 91 65 02 	lds	r25, 0x0265	; 0x800265 <__data_end+0x1>
     5ec:	9f 93       	push	r25
     5ee:	8f 93       	push	r24
     5f0:	8a e1       	ldi	r24, 0x1A	; 26
     5f2:	91 e0       	ldi	r25, 0x01	; 1
     5f4:	9f 93       	push	r25
     5f6:	8f 93       	push	r24
     5f8:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <printf>
return message;
     5fc:	0f 90       	pop	r0
     5fe:	0f 90       	pop	r0
     600:	0f 90       	pop	r0
     602:	0f 90       	pop	r0
}
     604:	ce 01       	movw	r24, r28
     606:	df 91       	pop	r29
     608:	cf 91       	pop	r28
     60a:	08 95       	ret

0000060c <joyStick_Can_Message>:
 *  Author: Herbe
 */ 
#include "CAN_joystick_messages.h"


void joyStick_Can_Message(){
     60c:	ef 92       	push	r14
     60e:	ff 92       	push	r15
     610:	0f 93       	push	r16
     612:	1f 93       	push	r17
     614:	cf 93       	push	r28
     616:	df 93       	push	r29
     618:	cd b7       	in	r28, 0x3d	; 61
     61a:	de b7       	in	r29, 0x3e	; 62
     61c:	2b 97       	sbiw	r28, 0x0b	; 11
     61e:	0f b6       	in	r0, 0x3f	; 63
     620:	f8 94       	cli
     622:	de bf       	out	0x3e, r29	; 62
     624:	0f be       	out	0x3f, r0	; 63
     626:	cd bf       	out	0x3d, r28	; 61
	
pos_read(&P_pos); //Reads the current position of the joystick
     628:	8c ee       	ldi	r24, 0xEC	; 236
     62a:	92 e0       	ldi	r25, 0x02	; 2
     62c:	0e 94 a1 07 	call	0xf42	; 0xf42 <pos_read>

uint8_t sendSliderRight = ADC_read(2);  
     630:	82 e0       	ldi	r24, 0x02	; 2
     632:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ADC_read>
     636:	e8 2e       	mov	r14, r24
uint8_t sendPosX = 128 + P_pos.posX;  //Adding 128 to not have negative a number
     638:	ec ee       	ldi	r30, 0xEC	; 236
     63a:	f2 e0       	ldi	r31, 0x02	; 2
     63c:	80 81       	ld	r24, Z
     63e:	68 94       	set
     640:	ff 24       	eor	r15, r15
     642:	f7 f8       	bld	r15, 7
     644:	f8 0e       	add	r15, r24
uint8_t sendPosY = 128 + P_pos.posY;  //Adding 128 to not have negative a number
     646:	02 81       	ldd	r16, Z+2	; 0x02
     648:	00 58       	subi	r16, 0x80	; 128
uint8_t sendJoyButton = usb_button_pushed(JOYSTICK_BUTTON);
     64a:	82 e0       	ldi	r24, 0x02	; 2
     64c:	0e 94 56 09 	call	0x12ac	; 0x12ac <usb_button_pushed>
     650:	18 2f       	mov	r17, r24
uint8_t sendJoyDirection = (joystick_direction()) << 1; //shift right to not disturb rest of message
     652:	0e 94 90 08 	call	0x1120	; 0x1120 <joystick_direction>

uint8_t sendJoyData = sendJoyDirection + sendJoyButton;  //Combining button-bushed and joystick-direction in one byte.

CAN_message_t joyStickData;
joyStickData.identifier = 0b11111111;
     656:	2f ef       	ldi	r18, 0xFF	; 255
     658:	30 e0       	ldi	r19, 0x00	; 0
     65a:	3a 83       	std	Y+2, r19	; 0x02
     65c:	29 83       	std	Y+1, r18	; 0x01
joyStickData.data[0] = sendPosX;
     65e:	fc 82       	std	Y+4, r15	; 0x04
joyStickData.data[1] = sendPosY;
     660:	0d 83       	std	Y+5, r16	; 0x05
joyStickData.data[2] = sendJoyData;
     662:	88 0f       	add	r24, r24
     664:	18 0f       	add	r17, r24
     666:	1e 83       	std	Y+6, r17	; 0x06
joyStickData.data[3] = sendSliderRight;
     668:	ef 82       	std	Y+7, r14	; 0x07
joyStickData.data_length = 4;
     66a:	84 e0       	ldi	r24, 0x04	; 4
     66c:	8b 83       	std	Y+3, r24	; 0x03

CAN_message_transmission(&joyStickData);
     66e:	ce 01       	movw	r24, r28
     670:	01 96       	adiw	r24, 0x01	; 1
     672:	0e 94 50 02 	call	0x4a0	; 0x4a0 <CAN_message_transmission>
     676:	2b 96       	adiw	r28, 0x0b	; 11
     678:	0f b6       	in	r0, 0x3f	; 63
     67a:	f8 94       	cli
     67c:	de bf       	out	0x3e, r29	; 62
     67e:	0f be       	out	0x3f, r0	; 63
     680:	cd bf       	out	0x3d, r28	; 61
     682:	df 91       	pop	r29
     684:	cf 91       	pop	r28
     686:	1f 91       	pop	r17
     688:	0f 91       	pop	r16
     68a:	ff 90       	pop	r15
     68c:	ef 90       	pop	r14
     68e:	08 95       	ret

00000690 <spi_master_CS>:
    status_value = spi_read();

    spi_master_CS(1);

    return status_value;
}
     690:	81 11       	cpse	r24, r1
     692:	02 c0       	rjmp	.+4      	; 0x698 <spi_master_CS+0x8>
     694:	c4 98       	cbi	0x18, 4	; 24
     696:	08 95       	ret
     698:	c4 9a       	sbi	0x18, 4	; 24
     69a:	08 95       	ret

0000069c <mcp_write>:
     69c:	cf 93       	push	r28
     69e:	df 93       	push	r29
     6a0:	d8 2f       	mov	r29, r24
     6a2:	c6 2f       	mov	r28, r22
     6a4:	80 e0       	ldi	r24, 0x00	; 0
     6a6:	0e 94 48 03 	call	0x690	; 0x690 <spi_master_CS>
     6aa:	82 e0       	ldi	r24, 0x02	; 2
     6ac:	0e 94 b3 09 	call	0x1366	; 0x1366 <spi_write>
     6b0:	8d 2f       	mov	r24, r29
     6b2:	0e 94 b3 09 	call	0x1366	; 0x1366 <spi_write>
     6b6:	8c 2f       	mov	r24, r28
     6b8:	0e 94 b3 09 	call	0x1366	; 0x1366 <spi_write>
     6bc:	81 e0       	ldi	r24, 0x01	; 1
     6be:	0e 94 48 03 	call	0x690	; 0x690 <spi_master_CS>
     6c2:	df 91       	pop	r29
     6c4:	cf 91       	pop	r28
     6c6:	08 95       	ret

000006c8 <mcp_set_mode>:
     6c8:	68 2f       	mov	r22, r24
     6ca:	8f e0       	ldi	r24, 0x0F	; 15
     6cc:	0e 94 4e 03 	call	0x69c	; 0x69c <mcp_write>
     6d0:	08 95       	ret

000006d2 <mcp_read>:
     6d2:	cf 93       	push	r28
     6d4:	c8 2f       	mov	r28, r24
     6d6:	80 e0       	ldi	r24, 0x00	; 0
     6d8:	0e 94 48 03 	call	0x690	; 0x690 <spi_master_CS>
     6dc:	83 e0       	ldi	r24, 0x03	; 3
     6de:	0e 94 b3 09 	call	0x1366	; 0x1366 <spi_write>
     6e2:	8c 2f       	mov	r24, r28
     6e4:	0e 94 b3 09 	call	0x1366	; 0x1366 <spi_write>
     6e8:	0e 94 b7 09 	call	0x136e	; 0x136e <spi_read>
     6ec:	c8 2f       	mov	r28, r24
     6ee:	81 e0       	ldi	r24, 0x01	; 1
     6f0:	0e 94 48 03 	call	0x690	; 0x690 <spi_master_CS>
     6f4:	8c 2f       	mov	r24, r28
     6f6:	cf 91       	pop	r28
     6f8:	08 95       	ret

000006fa <mcp_reset>:
     6fa:	80 e0       	ldi	r24, 0x00	; 0
     6fc:	0e 94 48 03 	call	0x690	; 0x690 <spi_master_CS>
     700:	80 ec       	ldi	r24, 0xC0	; 192
     702:	0e 94 b3 09 	call	0x1366	; 0x1366 <spi_write>
     706:	81 e0       	ldi	r24, 0x01	; 1
     708:	0e 94 48 03 	call	0x690	; 0x690 <spi_master_CS>
     70c:	08 95       	ret

0000070e <mcp_init>:
     70e:	cf 93       	push	r28
     710:	df 93       	push	r29
     712:	d8 2f       	mov	r29, r24
     714:	0e 94 bc 09 	call	0x1378	; 0x1378 <spi_init>
     718:	0e 94 7d 03 	call	0x6fa	; 0x6fa <mcp_reset>
     71c:	80 e8       	ldi	r24, 0x80	; 128
     71e:	0e 94 64 03 	call	0x6c8	; 0x6c8 <mcp_set_mode>
     722:	8f ef       	ldi	r24, 0xFF	; 255
     724:	9f e8       	ldi	r25, 0x8F	; 143
     726:	01 97       	sbiw	r24, 0x01	; 1
     728:	f1 f7       	brne	.-4      	; 0x726 <mcp_init+0x18>
     72a:	00 c0       	rjmp	.+0      	; 0x72c <mcp_init+0x1e>
     72c:	00 00       	nop
     72e:	8e e0       	ldi	r24, 0x0E	; 14
     730:	0e 94 69 03 	call	0x6d2	; 0x6d2 <mcp_read>
     734:	c8 2f       	mov	r28, r24
     736:	1f 92       	push	r1
     738:	8f 93       	push	r24
     73a:	8c e2       	ldi	r24, 0x2C	; 44
     73c:	91 e0       	ldi	r25, 0x01	; 1
     73e:	9f 93       	push	r25
     740:	8f 93       	push	r24
     742:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <printf>
     746:	c0 7e       	andi	r28, 0xE0	; 224
     748:	0f 90       	pop	r0
     74a:	0f 90       	pop	r0
     74c:	0f 90       	pop	r0
     74e:	0f 90       	pop	r0
     750:	c0 38       	cpi	r28, 0x80	; 128
     752:	31 f0       	breq	.+12     	; 0x760 <mcp_init+0x52>
     754:	88 e3       	ldi	r24, 0x38	; 56
     756:	91 e0       	ldi	r25, 0x01	; 1
     758:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <puts>
     75c:	81 e0       	ldi	r24, 0x01	; 1
     75e:	10 c0       	rjmp	.+32     	; 0x780 <mcp_init+0x72>
     760:	8d 2f       	mov	r24, r29
     762:	0e 94 64 03 	call	0x6c8	; 0x6c8 <mcp_set_mode>
     766:	8e e0       	ldi	r24, 0x0E	; 14
     768:	0e 94 69 03 	call	0x6d2	; 0x6d2 <mcp_read>
     76c:	80 7e       	andi	r24, 0xE0	; 224
     76e:	8d 17       	cp	r24, r29
     770:	31 f0       	breq	.+12     	; 0x77e <mcp_init+0x70>
     772:	8a e6       	ldi	r24, 0x6A	; 106
     774:	91 e0       	ldi	r25, 0x01	; 1
     776:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <puts>
     77a:	81 e0       	ldi	r24, 0x01	; 1
     77c:	01 c0       	rjmp	.+2      	; 0x780 <mcp_init+0x72>
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	df 91       	pop	r29
     782:	cf 91       	pop	r28
     784:	08 95       	ret

00000786 <mcp_bit_modify>:
     786:	1f 93       	push	r17
     788:	cf 93       	push	r28
     78a:	df 93       	push	r29
     78c:	18 2f       	mov	r17, r24
     78e:	d6 2f       	mov	r29, r22
     790:	c4 2f       	mov	r28, r20
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	0e 94 48 03 	call	0x690	; 0x690 <spi_master_CS>
     798:	85 e0       	ldi	r24, 0x05	; 5
     79a:	0e 94 b3 09 	call	0x1366	; 0x1366 <spi_write>
     79e:	81 2f       	mov	r24, r17
     7a0:	0e 94 b3 09 	call	0x1366	; 0x1366 <spi_write>
     7a4:	8d 2f       	mov	r24, r29
     7a6:	0e 94 b3 09 	call	0x1366	; 0x1366 <spi_write>
     7aa:	8c 2f       	mov	r24, r28
     7ac:	0e 94 b3 09 	call	0x1366	; 0x1366 <spi_write>
     7b0:	81 e0       	ldi	r24, 0x01	; 1
     7b2:	0e 94 48 03 	call	0x690	; 0x690 <spi_master_CS>
     7b6:	df 91       	pop	r29
     7b8:	cf 91       	pop	r28
     7ba:	1f 91       	pop	r17
     7bc:	08 95       	ret

000007be <mcp_request_to_send>:

void mcp_request_to_send(uint8_t buffer){
     7be:	cf 93       	push	r28
     7c0:	c8 2f       	mov	r28, r24
    spi_master_CS(0);
     7c2:	80 e0       	ldi	r24, 0x00	; 0
     7c4:	0e 94 48 03 	call	0x690	; 0x690 <spi_master_CS>

    switch (buffer) {
     7c8:	c1 30       	cpi	r28, 0x01	; 1
     7ca:	41 f0       	breq	.+16     	; 0x7dc <mcp_request_to_send+0x1e>
     7cc:	18 f0       	brcs	.+6      	; 0x7d4 <mcp_request_to_send+0x16>
     7ce:	c2 30       	cpi	r28, 0x02	; 2
     7d0:	49 f0       	breq	.+18     	; 0x7e4 <mcp_request_to_send+0x26>
     7d2:	0c c0       	rjmp	.+24     	; 0x7ec <mcp_request_to_send+0x2e>
      case 0:
          spi_write(MCP_RTS_TX0);
     7d4:	81 e8       	ldi	r24, 0x81	; 129
     7d6:	0e 94 b3 09 	call	0x1366	; 0x1366 <spi_write>
          break;
     7da:	0b c0       	rjmp	.+22     	; 0x7f2 <mcp_request_to_send+0x34>
      case 1:
          spi_write(MCP_RTS_TX1);
     7dc:	82 e8       	ldi	r24, 0x82	; 130
     7de:	0e 94 b3 09 	call	0x1366	; 0x1366 <spi_write>
          break;
     7e2:	07 c0       	rjmp	.+14     	; 0x7f2 <mcp_request_to_send+0x34>
      case 2:
          spi_write(MCP_RTS_TX2);
     7e4:	84 e8       	ldi	r24, 0x84	; 132
     7e6:	0e 94 b3 09 	call	0x1366	; 0x1366 <spi_write>
          break;
     7ea:	03 c0       	rjmp	.+6      	; 0x7f2 <mcp_request_to_send+0x34>
      default:
        spi_write(MCP_RTS_ALL);
     7ec:	87 e8       	ldi	r24, 0x87	; 135
     7ee:	0e 94 b3 09 	call	0x1366	; 0x1366 <spi_write>
    }

    spi_master_CS(1);
     7f2:	81 e0       	ldi	r24, 0x01	; 1
     7f4:	0e 94 48 03 	call	0x690	; 0x690 <spi_master_CS>
}
     7f8:	cf 91       	pop	r28
     7fa:	08 95       	ret

000007fc <oled_sel_row>:
     7fc:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <oled_position>
     800:	87 70       	andi	r24, 0x07	; 7
     802:	80 55       	subi	r24, 0x50	; 80
     804:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     808:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     80c:	80 83       	st	Z, r24
     80e:	08 95       	ret

00000810 <oled_sel_col>:
     810:	80 93 f1 02 	sts	0x02F1, r24	; 0x8002f1 <oled_position+0x1>
     814:	98 2f       	mov	r25, r24
     816:	9f 70       	andi	r25, 0x0F	; 15
     818:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     81c:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     820:	90 83       	st	Z, r25
     822:	82 95       	swap	r24
     824:	8f 70       	andi	r24, 0x0F	; 15
     826:	80 5f       	subi	r24, 0xF0	; 240
     828:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     82c:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     830:	80 83       	st	Z, r24
     832:	08 95       	ret

00000834 <oled_line_down>:
     834:	80 55       	subi	r24, 0x50	; 80
     836:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     83a:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     83e:	80 83       	st	Z, r24
     840:	08 95       	ret

00000842 <oled_pos_set>:
     842:	cf 93       	push	r28
     844:	c6 2f       	mov	r28, r22
     846:	0e 94 fe 03 	call	0x7fc	; 0x7fc <oled_sel_row>
     84a:	8c 2f       	mov	r24, r28
     84c:	0e 94 08 04 	call	0x810	; 0x810 <oled_sel_col>
     850:	cf 91       	pop	r28
     852:	08 95       	ret

00000854 <oled_home>:
     854:	60 e0       	ldi	r22, 0x00	; 0
     856:	80 e0       	ldi	r24, 0x00	; 0
     858:	0e 94 21 04 	call	0x842	; 0x842 <oled_pos_set>
     85c:	08 95       	ret

0000085e <oled_clear>:
     85e:	1f 93       	push	r17
     860:	cf 93       	push	r28
     862:	df 93       	push	r29
     864:	10 e0       	ldi	r17, 0x00	; 0
     866:	c6 ea       	ldi	r28, 0xA6	; 166
     868:	d0 e0       	ldi	r29, 0x00	; 0
     86a:	81 2f       	mov	r24, r17
     86c:	0e 94 1a 04 	call	0x834	; 0x834 <oled_line_down>
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	0d c0       	rjmp	.+26     	; 0x88e <oled_clear+0x30>
     874:	84 91       	lpm	r24, Z
     876:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <oled_write_data>
     87a:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <oled_write_data+0x1>
     87e:	8c 93       	st	X, r24
     880:	31 96       	adiw	r30, 0x01	; 1
     882:	ec 17       	cp	r30, r28
     884:	fd 07       	cpc	r31, r29
     886:	b1 f7       	brne	.-20     	; 0x874 <oled_clear+0x16>
     888:	9f 5f       	subi	r25, 0xFF	; 255
     88a:	90 38       	cpi	r25, 0x80	; 128
     88c:	19 f0       	breq	.+6      	; 0x894 <oled_clear+0x36>
     88e:	ee e9       	ldi	r30, 0x9E	; 158
     890:	f0 e0       	ldi	r31, 0x00	; 0
     892:	f0 cf       	rjmp	.-32     	; 0x874 <oled_clear+0x16>
     894:	1f 5f       	subi	r17, 0xFF	; 255
     896:	18 30       	cpi	r17, 0x08	; 8
     898:	41 f7       	brne	.-48     	; 0x86a <oled_clear+0xc>
     89a:	0e 94 2a 04 	call	0x854	; 0x854 <oled_home>
     89e:	df 91       	pop	r29
     8a0:	cf 91       	pop	r28
     8a2:	1f 91       	pop	r17
     8a4:	08 95       	ret

000008a6 <OLED_init>:
     8a6:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     8aa:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     8ae:	8e ea       	ldi	r24, 0xAE	; 174
     8b0:	80 83       	st	Z, r24
     8b2:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     8b6:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     8ba:	81 ea       	ldi	r24, 0xA1	; 161
     8bc:	80 83       	st	Z, r24
     8be:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     8c2:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     8c6:	8a ed       	ldi	r24, 0xDA	; 218
     8c8:	80 83       	st	Z, r24
     8ca:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     8ce:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     8d2:	82 e1       	ldi	r24, 0x12	; 18
     8d4:	80 83       	st	Z, r24
     8d6:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     8da:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     8de:	88 ec       	ldi	r24, 0xC8	; 200
     8e0:	80 83       	st	Z, r24
     8e2:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     8e6:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     8ea:	88 ea       	ldi	r24, 0xA8	; 168
     8ec:	80 83       	st	Z, r24
     8ee:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     8f2:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     8f6:	8f e3       	ldi	r24, 0x3F	; 63
     8f8:	80 83       	st	Z, r24
     8fa:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     8fe:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     902:	85 ed       	ldi	r24, 0xD5	; 213
     904:	80 83       	st	Z, r24
     906:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     90a:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     90e:	80 e8       	ldi	r24, 0x80	; 128
     910:	80 83       	st	Z, r24
     912:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     916:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     91a:	81 e8       	ldi	r24, 0x81	; 129
     91c:	80 83       	st	Z, r24
     91e:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     922:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     926:	80 e5       	ldi	r24, 0x50	; 80
     928:	80 83       	st	Z, r24
     92a:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     92e:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     932:	89 ed       	ldi	r24, 0xD9	; 217
     934:	80 83       	st	Z, r24
     936:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     93a:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     93e:	81 e2       	ldi	r24, 0x21	; 33
     940:	80 83       	st	Z, r24
     942:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     946:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     94a:	80 e2       	ldi	r24, 0x20	; 32
     94c:	80 83       	st	Z, r24
     94e:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     952:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     956:	82 e0       	ldi	r24, 0x02	; 2
     958:	80 83       	st	Z, r24
     95a:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     95e:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     962:	8b ed       	ldi	r24, 0xDB	; 219
     964:	80 83       	st	Z, r24
     966:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     96a:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     96e:	80 e3       	ldi	r24, 0x30	; 48
     970:	80 83       	st	Z, r24
     972:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     976:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     97a:	8d ea       	ldi	r24, 0xAD	; 173
     97c:	80 83       	st	Z, r24
     97e:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     982:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     986:	10 82       	st	Z, r1
     988:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     98c:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     990:	84 ea       	ldi	r24, 0xA4	; 164
     992:	80 83       	st	Z, r24
     994:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     998:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     99c:	86 ea       	ldi	r24, 0xA6	; 166
     99e:	80 83       	st	Z, r24
     9a0:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     9a4:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     9a8:	8f ea       	ldi	r24, 0xAF	; 175
     9aa:	80 83       	st	Z, r24
     9ac:	0e 94 2f 04 	call	0x85e	; 0x85e <oled_clear>
     9b0:	0e 94 2a 04 	call	0x854	; 0x854 <oled_home>
     9b4:	08 95       	ret

000009b6 <oled_write_character>:
     9b6:	28 2f       	mov	r18, r24
     9b8:	30 e0       	ldi	r19, 0x00	; 0
     9ba:	f9 01       	movw	r30, r18
     9bc:	ee 0f       	add	r30, r30
     9be:	ff 1f       	adc	r31, r31
     9c0:	ee 0f       	add	r30, r30
     9c2:	ff 1f       	adc	r31, r31
     9c4:	ee 0f       	add	r30, r30
     9c6:	ff 1f       	adc	r31, r31
     9c8:	e2 56       	subi	r30, 0x62	; 98
     9ca:	f0 40       	sbci	r31, 0x00	; 0
     9cc:	22 0f       	add	r18, r18
     9ce:	33 1f       	adc	r19, r19
     9d0:	22 0f       	add	r18, r18
     9d2:	33 1f       	adc	r19, r19
     9d4:	22 0f       	add	r18, r18
     9d6:	33 1f       	adc	r19, r19
     9d8:	2a 55       	subi	r18, 0x5A	; 90
     9da:	30 40       	sbci	r19, 0x00	; 0
     9dc:	94 91       	lpm	r25, Z
     9de:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <oled_write_data>
     9e2:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <oled_write_data+0x1>
     9e6:	9c 93       	st	X, r25
     9e8:	31 96       	adiw	r30, 0x01	; 1
     9ea:	e2 17       	cp	r30, r18
     9ec:	f3 07       	cpc	r31, r19
     9ee:	b1 f7       	brne	.-20     	; 0x9dc <oled_write_character+0x26>
     9f0:	08 95       	ret

000009f2 <oled_print>:
     9f2:	0f 93       	push	r16
     9f4:	1f 93       	push	r17
     9f6:	cf 93       	push	r28
     9f8:	df 93       	push	r29
     9fa:	fc 01       	movw	r30, r24
     9fc:	01 90       	ld	r0, Z+
     9fe:	00 20       	and	r0, r0
     a00:	e9 f7       	brne	.-6      	; 0x9fc <oled_print+0xa>
     a02:	31 97       	sbiw	r30, 0x01	; 1
     a04:	e8 1b       	sub	r30, r24
     a06:	f9 0b       	sbc	r31, r25
     a08:	1e 16       	cp	r1, r30
     a0a:	1f 06       	cpc	r1, r31
     a0c:	54 f4       	brge	.+20     	; 0xa22 <oled_print+0x30>
     a0e:	ec 01       	movw	r28, r24
     a10:	8c 01       	movw	r16, r24
     a12:	0e 0f       	add	r16, r30
     a14:	1f 1f       	adc	r17, r31
     a16:	89 91       	ld	r24, Y+
     a18:	0e 94 db 04 	call	0x9b6	; 0x9b6 <oled_write_character>
     a1c:	c0 17       	cp	r28, r16
     a1e:	d1 07       	cpc	r29, r17
     a20:	d1 f7       	brne	.-12     	; 0xa16 <oled_print+0x24>
     a22:	df 91       	pop	r29
     a24:	cf 91       	pop	r28
     a26:	1f 91       	pop	r17
     a28:	0f 91       	pop	r16
     a2a:	08 95       	ret

00000a2c <oled_print_arrow>:
     a2c:	0e 94 21 04 	call	0x842	; 0x842 <oled_pos_set>
     a30:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <oled_write_data>
     a34:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <oled_write_data+0x1>
     a38:	88 e1       	ldi	r24, 0x18	; 24
     a3a:	80 83       	st	Z, r24
     a3c:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <oled_write_data>
     a40:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <oled_write_data+0x1>
     a44:	80 83       	st	Z, r24
     a46:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <oled_write_data>
     a4a:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <oled_write_data+0x1>
     a4e:	9e e7       	ldi	r25, 0x7E	; 126
     a50:	90 83       	st	Z, r25
     a52:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <oled_write_data>
     a56:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <oled_write_data+0x1>
     a5a:	9c e3       	ldi	r25, 0x3C	; 60
     a5c:	90 83       	st	Z, r25
     a5e:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <oled_write_data>
     a62:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <oled_write_data+0x1>
     a66:	80 83       	st	Z, r24
     a68:	08 95       	ret

00000a6a <build_node>:
    if(child == 0){
        child = current_node->elements_on_screen;
    }

    return child;
}
     a6a:	cf 92       	push	r12
     a6c:	df 92       	push	r13
     a6e:	ef 92       	push	r14
     a70:	ff 92       	push	r15
     a72:	0f 93       	push	r16
     a74:	1f 93       	push	r17
     a76:	cf 93       	push	r28
     a78:	df 93       	push	r29
     a7a:	ec 01       	movw	r28, r24
     a7c:	69 01       	movw	r12, r18
     a7e:	79 83       	std	Y+1, r23	; 0x01
     a80:	68 83       	st	Y, r22
     a82:	ba 01       	movw	r22, r20
     a84:	46 96       	adiw	r24, 0x16	; 22
     a86:	0e 94 bd 0c 	call	0x197a	; 0x197a <strcpy>
     a8a:	dd 8a       	std	Y+21, r13	; 0x15
     a8c:	cc 8a       	std	Y+20, r12	; 0x14
     a8e:	fb 8a       	std	Y+19, r15	; 0x13
     a90:	ea 8a       	std	Y+18, r14	; 0x12
     a92:	a0 2f       	mov	r26, r16
     a94:	b1 2f       	mov	r27, r17
     a96:	fe 01       	movw	r30, r28
     a98:	32 96       	adiw	r30, 0x02	; 2
     a9a:	ce 01       	movw	r24, r28
     a9c:	42 96       	adiw	r24, 0x12	; 18
     a9e:	2d 91       	ld	r18, X+
     aa0:	3d 91       	ld	r19, X+
     aa2:	21 93       	st	Z+, r18
     aa4:	31 93       	st	Z+, r19
     aa6:	e8 17       	cp	r30, r24
     aa8:	f9 07       	cpc	r31, r25
     aaa:	c9 f7       	brne	.-14     	; 0xa9e <build_node+0x34>
     aac:	df 91       	pop	r29
     aae:	cf 91       	pop	r28
     ab0:	1f 91       	pop	r17
     ab2:	0f 91       	pop	r16
     ab4:	ff 90       	pop	r15
     ab6:	ef 90       	pop	r14
     ab8:	df 90       	pop	r13
     aba:	cf 90       	pop	r12
     abc:	08 95       	ret

00000abe <go_up>:
     abe:	dc 01       	movw	r26, r24
     ac0:	ed 91       	ld	r30, X+
     ac2:	fc 91       	ld	r31, X
     ac4:	11 97       	sbiw	r26, 0x01	; 1
     ac6:	20 81       	ld	r18, Z
     ac8:	31 81       	ldd	r19, Z+1	; 0x01
     aca:	21 15       	cp	r18, r1
     acc:	31 05       	cpc	r19, r1
     ace:	11 f0       	breq	.+4      	; 0xad4 <go_up+0x16>
     ad0:	2d 93       	st	X+, r18
     ad2:	3c 93       	st	X, r19
     ad4:	08 95       	ret

00000ad6 <go_down>:
     ad6:	fc 01       	movw	r30, r24
     ad8:	a0 81       	ld	r26, Z
     ada:	b1 81       	ldd	r27, Z+1	; 0x01
     adc:	fb 01       	movw	r30, r22
     ade:	ee 0f       	add	r30, r30
     ae0:	ff 1f       	adc	r31, r31
     ae2:	ea 0f       	add	r30, r26
     ae4:	fb 1f       	adc	r31, r27
     ae6:	20 81       	ld	r18, Z
     ae8:	31 81       	ldd	r19, Z+1	; 0x01
     aea:	21 15       	cp	r18, r1
     aec:	31 05       	cpc	r19, r1
     aee:	21 f0       	breq	.+8      	; 0xaf8 <go_down+0x22>
     af0:	fc 01       	movw	r30, r24
     af2:	31 83       	std	Z+1, r19	; 0x01
     af4:	20 83       	st	Z, r18
     af6:	08 95       	ret
     af8:	54 96       	adiw	r26, 0x14	; 20
     afa:	ed 91       	ld	r30, X+
     afc:	fc 91       	ld	r31, X
     afe:	55 97       	sbiw	r26, 0x15	; 21
     b00:	30 97       	sbiw	r30, 0x00	; 0
     b02:	09 f0       	breq	.+2      	; 0xb06 <go_down+0x30>
     b04:	09 95       	icall
     b06:	08 95       	ret

00000b08 <wait_for_action>:
     b08:	0e 94 90 08 	call	0x1120	; 0x1120 <joystick_direction>
     b0c:	84 30       	cpi	r24, 0x04	; 4
     b0e:	29 f4       	brne	.+10     	; 0xb1a <wait_for_action+0x12>
     b10:	82 e0       	ldi	r24, 0x02	; 2
     b12:	0e 94 56 09 	call	0x12ac	; 0x12ac <usb_button_pushed>
     b16:	88 23       	and	r24, r24
     b18:	b9 f3       	breq	.-18     	; 0xb08 <wait_for_action>
     b1a:	0e 94 90 08 	call	0x1120	; 0x1120 <joystick_direction>
     b1e:	82 30       	cpi	r24, 0x02	; 2
     b20:	99 f0       	breq	.+38     	; 0xb48 <wait_for_action+0x40>
     b22:	0e 94 90 08 	call	0x1120	; 0x1120 <joystick_direction>
     b26:	83 30       	cpi	r24, 0x03	; 3
     b28:	79 f0       	breq	.+30     	; 0xb48 <wait_for_action+0x40>
     b2a:	0e 94 90 08 	call	0x1120	; 0x1120 <joystick_direction>
     b2e:	81 30       	cpi	r24, 0x01	; 1
     b30:	59 f0       	breq	.+22     	; 0xb48 <wait_for_action+0x40>
     b32:	0e 94 90 08 	call	0x1120	; 0x1120 <joystick_direction>
     b36:	88 23       	and	r24, r24
     b38:	39 f0       	breq	.+14     	; 0xb48 <wait_for_action+0x40>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	0e 94 56 09 	call	0x12ac	; 0x12ac <usb_button_pushed>
     b40:	81 11       	cpse	r24, r1
     b42:	01 c0       	rjmp	.+2      	; 0xb46 <wait_for_action+0x3e>
     b44:	08 95       	ret
     b46:	85 e0       	ldi	r24, 0x05	; 5
     b48:	08 95       	ret

00000b4a <wait_for_neutral_joystick_position>:
     b4a:	0e 94 90 08 	call	0x1120	; 0x1120 <joystick_direction>
     b4e:	84 30       	cpi	r24, 0x04	; 4
     b50:	e1 f7       	brne	.-8      	; 0xb4a <wait_for_neutral_joystick_position>
     b52:	08 95       	ret

00000b54 <update_element_down>:

int update_element_down(Node *current_node, int child){

    child++;
     b54:	6f 5f       	subi	r22, 0xFF	; 255
     b56:	7f 4f       	sbci	r23, 0xFF	; 255

    if(child == current_node->elements_on_screen + 1){
     b58:	fc 01       	movw	r30, r24
     b5a:	82 89       	ldd	r24, Z+18	; 0x12
     b5c:	93 89       	ldd	r25, Z+19	; 0x13
     b5e:	01 96       	adiw	r24, 0x01	; 1
     b60:	68 17       	cp	r22, r24
     b62:	79 07       	cpc	r23, r25
     b64:	11 f4       	brne	.+4      	; 0xb6a <update_element_down+0x16>
        child = 1;
     b66:	61 e0       	ldi	r22, 0x01	; 1
     b68:	70 e0       	ldi	r23, 0x00	; 0
    }

    return child;
    
}
     b6a:	cb 01       	movw	r24, r22
     b6c:	08 95       	ret

00000b6e <check_highscore>:

    print_selecting_arrow(child);
}

void check_highscore(int highscore){
    if(highscore >= _1ST){   //check if new highscore
     b6e:	20 91 f4 02 	lds	r18, 0x02F4	; 0x8002f4 <_1ST>
     b72:	30 91 f5 02 	lds	r19, 0x02F5	; 0x8002f5 <_1ST+0x1>
     b76:	82 17       	cp	r24, r18
     b78:	93 07       	cpc	r25, r19
     b7a:	2c f0       	brlt	.+10     	; 0xb86 <check_highscore+0x18>
        _1ST = highscore;
     b7c:	90 93 f5 02 	sts	0x02F5, r25	; 0x8002f5 <_1ST+0x1>
     b80:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <_1ST>
     b84:	08 95       	ret
    }
    else if(    (highscore < _1ST) && (highscore > _2ND)    )    {  //check if new second best
     b86:	20 91 f2 02 	lds	r18, 0x02F2	; 0x8002f2 <_2ND>
     b8a:	30 91 f3 02 	lds	r19, 0x02F3	; 0x8002f3 <_2ND+0x1>
     b8e:	28 17       	cp	r18, r24
     b90:	39 07       	cpc	r19, r25
     b92:	2c f4       	brge	.+10     	; 0xb9e <check_highscore+0x30>
        _2ND = highscore;
     b94:	90 93 f3 02 	sts	0x02F3, r25	; 0x8002f3 <_2ND+0x1>
     b98:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <_2ND>
     b9c:	08 95       	ret
    }
    else if(    (highscore < _2ND) && (highscore > _3RD)    ){ //check if new third best
     b9e:	82 17       	cp	r24, r18
     ba0:	93 07       	cpc	r25, r19
     ba2:	5c f4       	brge	.+22     	; 0xbba <check_highscore+0x4c>
     ba4:	20 91 e6 02 	lds	r18, 0x02E6	; 0x8002e6 <_3RD>
     ba8:	30 91 e7 02 	lds	r19, 0x02E7	; 0x8002e7 <_3RD+0x1>
     bac:	28 17       	cp	r18, r24
     bae:	39 07       	cpc	r19, r25
     bb0:	24 f4       	brge	.+8      	; 0xbba <check_highscore+0x4c>
        _3RD = highscore;
     bb2:	90 93 e7 02 	sts	0x02E7, r25	; 0x8002e7 <_3RD+0x1>
     bb6:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <_3RD>
     bba:	08 95       	ret

00000bbc <play_game>:
    oled_print_arrow(child - 1, 5);
	
}


void play_game(){
     bbc:	cf 93       	push	r28
     bbe:	df 93       	push	r29
     bc0:	cd b7       	in	r28, 0x3d	; 61
     bc2:	de b7       	in	r29, 0x3e	; 62
     bc4:	66 97       	sbiw	r28, 0x16	; 22
     bc6:	0f b6       	in	r0, 0x3f	; 63
     bc8:	f8 94       	cli
     bca:	de bf       	out	0x3e, r29	; 62
     bcc:	0f be       	out	0x3f, r0	; 63
     bce:	cd bf       	out	0x3d, r28	; 61
	
	message_handler();
     bd0:	ce 01       	movw	r24, r28
     bd2:	0c 96       	adiw	r24, 0x0c	; 12
     bd4:	0e 94 dd 02 	call	0x5ba	; 0x5ba <message_handler>
	message_handler();
     bd8:	ce 01       	movw	r24, r28
     bda:	0c 96       	adiw	r24, 0x0c	; 12
     bdc:	0e 94 dd 02 	call	0x5ba	; 0x5ba <message_handler>
	CAN_message_t game_status;
	game_status.data[0] = 0;
	uint8_t game_on = 1;
		
	while(game_on){
		joyStick_Can_Message();
     be0:	0e 94 06 03 	call	0x60c	; 0x60c <joyStick_Can_Message>
		
		game_status = message_handler();
     be4:	ce 01       	movw	r24, r28
     be6:	01 96       	adiw	r24, 0x01	; 1
     be8:	0e 94 dd 02 	call	0x5ba	; 0x5ba <message_handler>
		
		if(game_status.data[0] == 0b10101011){
     bec:	8c 81       	ldd	r24, Y+4	; 0x04
     bee:	8b 3a       	cpi	r24, 0xAB	; 171
     bf0:	b9 f7       	brne	.-18     	; 0xbe0 <play_game+0x24>
			game_on = 0;
			
			printf("GameStatusData: %d", game_status.data[0]);
     bf2:	1f 92       	push	r1
     bf4:	8f 93       	push	r24
     bf6:	85 ea       	ldi	r24, 0xA5	; 165
     bf8:	91 e0       	ldi	r25, 0x01	; 1
     bfa:	9f 93       	push	r25
     bfc:	8f 93       	push	r24
     bfe:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <printf>
	}
	int highscore = game_status.data[1];
	
	//printf("Highscore is: %d", highscore);
	
	check_highscore(highscore);
     c02:	8d 81       	ldd	r24, Y+5	; 0x05
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	0e 94 b7 05 	call	0xb6e	; 0xb6e <check_highscore>
	
}
     c0a:	0f 90       	pop	r0
     c0c:	0f 90       	pop	r0
     c0e:	0f 90       	pop	r0
     c10:	0f 90       	pop	r0
     c12:	66 96       	adiw	r28, 0x16	; 22
     c14:	0f b6       	in	r0, 0x3f	; 63
     c16:	f8 94       	cli
     c18:	de bf       	out	0x3e, r29	; 62
     c1a:	0f be       	out	0x3f, r0	; 63
     c1c:	cd bf       	out	0x3d, r28	; 61
     c1e:	df 91       	pop	r29
     c20:	cf 91       	pop	r28
     c22:	08 95       	ret

00000c24 <print_selecting_arrow>:

}


void print_selecting_arrow(int child){
    oled_print_arrow(child - 1, 5);
     c24:	65 e0       	ldi	r22, 0x05	; 5
     c26:	81 50       	subi	r24, 0x01	; 1
     c28:	0e 94 16 05 	call	0xa2c	; 0xa2c <oled_print_arrow>
     c2c:	08 95       	ret

00000c2e <print_main_menu_objects>:
        wait_for_neutral_joystick_position();
    }
}


void print_main_menu_objects(int child){
     c2e:	0f 93       	push	r16
     c30:	1f 93       	push	r17
     c32:	cf 93       	push	r28
     c34:	df 93       	push	r29
     c36:	cd b7       	in	r28, 0x3d	; 61
     c38:	de b7       	in	r29, 0x3e	; 62
     c3a:	2b 97       	sbiw	r28, 0x0b	; 11
     c3c:	0f b6       	in	r0, 0x3f	; 63
     c3e:	f8 94       	cli
     c40:	de bf       	out	0x3e, r29	; 62
     c42:	0f be       	out	0x3f, r0	; 63
     c44:	cd bf       	out	0x3d, r28	; 61
     c46:	8c 01       	movw	r16, r24
    char line1[] = "play";
     c48:	85 e0       	ldi	r24, 0x05	; 5
     c4a:	e8 eb       	ldi	r30, 0xB8	; 184
     c4c:	f1 e0       	ldi	r31, 0x01	; 1
     c4e:	de 01       	movw	r26, r28
     c50:	11 96       	adiw	r26, 0x01	; 1
     c52:	01 90       	ld	r0, Z+
     c54:	0d 92       	st	X+, r0
     c56:	8a 95       	dec	r24
     c58:	e1 f7       	brne	.-8      	; 0xc52 <print_main_menu_objects+0x24>
    char line2[] = "Score";
     c5a:	86 e0       	ldi	r24, 0x06	; 6
     c5c:	ed eb       	ldi	r30, 0xBD	; 189
     c5e:	f1 e0       	ldi	r31, 0x01	; 1
     c60:	de 01       	movw	r26, r28
     c62:	16 96       	adiw	r26, 0x06	; 6
     c64:	01 90       	ld	r0, Z+
     c66:	0d 92       	st	X+, r0
     c68:	8a 95       	dec	r24
     c6a:	e1 f7       	brne	.-8      	; 0xc64 <print_main_menu_objects+0x36>

    oled_pos_set(0, 12);
     c6c:	6c e0       	ldi	r22, 0x0C	; 12
     c6e:	80 e0       	ldi	r24, 0x00	; 0
     c70:	0e 94 21 04 	call	0x842	; 0x842 <oled_pos_set>
    oled_print(&line1);
     c74:	ce 01       	movw	r24, r28
     c76:	01 96       	adiw	r24, 0x01	; 1
     c78:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <oled_print>

    oled_pos_set(1, 12);
     c7c:	6c e0       	ldi	r22, 0x0C	; 12
     c7e:	81 e0       	ldi	r24, 0x01	; 1
     c80:	0e 94 21 04 	call	0x842	; 0x842 <oled_pos_set>
    oled_print(&line2);
     c84:	ce 01       	movw	r24, r28
     c86:	06 96       	adiw	r24, 0x06	; 6
     c88:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <oled_print>

    print_selecting_arrow(child);       //Draw the arrow that selects the preferable option.
     c8c:	c8 01       	movw	r24, r16
     c8e:	0e 94 12 06 	call	0xc24	; 0xc24 <print_selecting_arrow>
    
}
     c92:	2b 96       	adiw	r28, 0x0b	; 11
     c94:	0f b6       	in	r0, 0x3f	; 63
     c96:	f8 94       	cli
     c98:	de bf       	out	0x3e, r29	; 62
     c9a:	0f be       	out	0x3f, r0	; 63
     c9c:	cd bf       	out	0x3d, r28	; 61
     c9e:	df 91       	pop	r29
     ca0:	cf 91       	pop	r28
     ca2:	1f 91       	pop	r17
     ca4:	0f 91       	pop	r16
     ca6:	08 95       	ret

00000ca8 <print_new_game_menu_objects>:

void print_new_game_menu_objects(int child){
     ca8:	0f 93       	push	r16
     caa:	1f 93       	push	r17
     cac:	cf 93       	push	r28
     cae:	df 93       	push	r29
     cb0:	cd b7       	in	r28, 0x3d	; 61
     cb2:	de b7       	in	r29, 0x3e	; 62
     cb4:	2b 97       	sbiw	r28, 0x0b	; 11
     cb6:	0f b6       	in	r0, 0x3f	; 63
     cb8:	f8 94       	cli
     cba:	de bf       	out	0x3e, r29	; 62
     cbc:	0f be       	out	0x3f, r0	; 63
     cbe:	cd bf       	out	0x3d, r28	; 61
     cc0:	8c 01       	movw	r16, r24

    char line1[] = "Start game";
     cc2:	8b e0       	ldi	r24, 0x0B	; 11
     cc4:	e3 ec       	ldi	r30, 0xC3	; 195
     cc6:	f1 e0       	ldi	r31, 0x01	; 1
     cc8:	de 01       	movw	r26, r28
     cca:	11 96       	adiw	r26, 0x01	; 1
     ccc:	01 90       	ld	r0, Z+
     cce:	0d 92       	st	X+, r0
     cd0:	8a 95       	dec	r24
     cd2:	e1 f7       	brne	.-8      	; 0xccc <print_new_game_menu_objects+0x24>

    oled_pos_set(0, 12);
     cd4:	6c e0       	ldi	r22, 0x0C	; 12
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	0e 94 21 04 	call	0x842	; 0x842 <oled_pos_set>
    oled_print(&line1);
     cdc:	ce 01       	movw	r24, r28
     cde:	01 96       	adiw	r24, 0x01	; 1
     ce0:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <oled_print>

    print_selecting_arrow(child);
     ce4:	c8 01       	movw	r24, r16
     ce6:	0e 94 12 06 	call	0xc24	; 0xc24 <print_selecting_arrow>
}
     cea:	2b 96       	adiw	r28, 0x0b	; 11
     cec:	0f b6       	in	r0, 0x3f	; 63
     cee:	f8 94       	cli
     cf0:	de bf       	out	0x3e, r29	; 62
     cf2:	0f be       	out	0x3f, r0	; 63
     cf4:	cd bf       	out	0x3d, r28	; 61
     cf6:	df 91       	pop	r29
     cf8:	cf 91       	pop	r28
     cfa:	1f 91       	pop	r17
     cfc:	0f 91       	pop	r16
     cfe:	08 95       	ret

00000d00 <print_score_menu_objects>:
        _3RD = highscore;
    }
    
}

void print_score_menu_objects(int child){
     d00:	0f 93       	push	r16
     d02:	1f 93       	push	r17
     d04:	cf 93       	push	r28
     d06:	df 93       	push	r29
     d08:	cd b7       	in	r28, 0x3d	; 61
     d0a:	de b7       	in	r29, 0x3e	; 62
     d0c:	e7 97       	sbiw	r28, 0x37	; 55
     d0e:	0f b6       	in	r0, 0x3f	; 63
     d10:	f8 94       	cli
     d12:	de bf       	out	0x3e, r29	; 62
     d14:	0f be       	out	0x3f, r0	; 63
     d16:	cd bf       	out	0x3d, r28	; 61
     d18:	8c 01       	movw	r16, r24

char line1[] = "Top score";
     d1a:	8a e0       	ldi	r24, 0x0A	; 10
     d1c:	e0 ee       	ldi	r30, 0xE0	; 224
     d1e:	f1 e0       	ldi	r31, 0x01	; 1
     d20:	de 01       	movw	r26, r28
     d22:	11 96       	adiw	r26, 0x01	; 1
     d24:	01 90       	ld	r0, Z+
     d26:	0d 92       	st	X+, r0
     d28:	8a 95       	dec	r24
     d2a:	e1 f7       	brne	.-8      	; 0xd24 <print_score_menu_objects+0x24>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     d2c:	4a e0       	ldi	r20, 0x0A	; 10
     d2e:	be 01       	movw	r22, r28
     d30:	65 5f       	subi	r22, 0xF5	; 245
     d32:	7f 4f       	sbci	r23, 0xFF	; 255
     d34:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <_1ST>
     d38:	90 91 f5 02 	lds	r25, 0x02F5	; 0x8002f5 <_1ST+0x1>
     d3c:	0e 94 c4 0c 	call	0x1988	; 0x1988 <__itoa_ncheck>
     d40:	4a e0       	ldi	r20, 0x0A	; 10
     d42:	be 01       	movw	r22, r28
     d44:	66 5e       	subi	r22, 0xE6	; 230
     d46:	7f 4f       	sbci	r23, 0xFF	; 255
     d48:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <_2ND>
     d4c:	90 91 f3 02 	lds	r25, 0x02F3	; 0x8002f3 <_2ND+0x1>
     d50:	0e 94 c4 0c 	call	0x1988	; 0x1988 <__itoa_ncheck>
     d54:	4a e0       	ldi	r20, 0x0A	; 10
     d56:	be 01       	movw	r22, r28
     d58:	67 5d       	subi	r22, 0xD7	; 215
     d5a:	7f 4f       	sbci	r23, 0xFF	; 255
     d5c:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <_3RD>
     d60:	90 91 e7 02 	lds	r25, 0x02E7	; 0x8002e7 <_3RD+0x1>
     d64:	0e 94 c4 0c 	call	0x1988	; 0x1988 <__itoa_ncheck>
itoa(_1ST, score_string1, 10);
itoa(_2ND, score_string2, 10);
itoa(_3RD, score_string3, 10);    

    
    oled_pos_set(0, 12);
     d68:	6c e0       	ldi	r22, 0x0C	; 12
     d6a:	80 e0       	ldi	r24, 0x00	; 0
     d6c:	0e 94 21 04 	call	0x842	; 0x842 <oled_pos_set>
    oled_print(&line1);
     d70:	ce 01       	movw	r24, r28
     d72:	01 96       	adiw	r24, 0x01	; 1
     d74:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <oled_print>

    oled_pos_set(2, 12);
     d78:	6c e0       	ldi	r22, 0x0C	; 12
     d7a:	82 e0       	ldi	r24, 0x02	; 2
     d7c:	0e 94 21 04 	call	0x842	; 0x842 <oled_pos_set>
    oled_print("1ST  ");
     d80:	8e ec       	ldi	r24, 0xCE	; 206
     d82:	91 e0       	ldi	r25, 0x01	; 1
     d84:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <oled_print>
    oled_print(&score_string1);
     d88:	ce 01       	movw	r24, r28
     d8a:	0b 96       	adiw	r24, 0x0b	; 11
     d8c:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <oled_print>
    
    oled_pos_set(4, 12);
     d90:	6c e0       	ldi	r22, 0x0C	; 12
     d92:	84 e0       	ldi	r24, 0x04	; 4
     d94:	0e 94 21 04 	call	0x842	; 0x842 <oled_pos_set>
    oled_print("2ND  ");
     d98:	84 ed       	ldi	r24, 0xD4	; 212
     d9a:	91 e0       	ldi	r25, 0x01	; 1
     d9c:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <oled_print>
    oled_print(&score_string2);
     da0:	ce 01       	movw	r24, r28
     da2:	4a 96       	adiw	r24, 0x1a	; 26
     da4:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <oled_print>

    oled_pos_set(6, 12);
     da8:	6c e0       	ldi	r22, 0x0C	; 12
     daa:	86 e0       	ldi	r24, 0x06	; 6
     dac:	0e 94 21 04 	call	0x842	; 0x842 <oled_pos_set>
    oled_print("3RD  ");
     db0:	8a ed       	ldi	r24, 0xDA	; 218
     db2:	91 e0       	ldi	r25, 0x01	; 1
     db4:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <oled_print>
    oled_print(&score_string3);
     db8:	ce 01       	movw	r24, r28
     dba:	89 96       	adiw	r24, 0x29	; 41
     dbc:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <oled_print>
    
    print_selecting_arrow(child);
     dc0:	c8 01       	movw	r24, r16
     dc2:	0e 94 12 06 	call	0xc24	; 0xc24 <print_selecting_arrow>

}
     dc6:	e7 96       	adiw	r28, 0x37	; 55
     dc8:	0f b6       	in	r0, 0x3f	; 63
     dca:	f8 94       	cli
     dcc:	de bf       	out	0x3e, r29	; 62
     dce:	0f be       	out	0x3f, r0	; 63
     dd0:	cd bf       	out	0x3d, r28	; 61
     dd2:	df 91       	pop	r29
     dd4:	cf 91       	pop	r28
     dd6:	1f 91       	pop	r17
     dd8:	0f 91       	pop	r16
     dda:	08 95       	ret

00000ddc <update_screen>:
    while(joystick_direction() != NEUTRAL);
}

void update_screen(Node *current_node, int child){

    if(((*current_node).name[1]) == 'a'){
     ddc:	fc 01       	movw	r30, r24
     dde:	87 89       	ldd	r24, Z+23	; 0x17
     de0:	81 36       	cpi	r24, 0x61	; 97
     de2:	21 f4       	brne	.+8      	; 0xdec <update_screen+0x10>
        //printf("Update  MAIN_MENU screen\t\n");
        print_main_menu_objects(child);
     de4:	cb 01       	movw	r24, r22
     de6:	0e 94 17 06 	call	0xc2e	; 0xc2e <print_main_menu_objects>
     dea:	08 95       	ret
        //Skal oppdatere skjermen som passer til main-menu. I tillegg skal pilen howre over riktg barn.
    }
    else if(((*current_node).name[1]) == 'l'){
     dec:	8c 36       	cpi	r24, 0x6C	; 108
     dee:	21 f4       	brne	.+8      	; 0xdf8 <update_screen+0x1c>
       // printf("Update PLAY menu\t\n");
        print_new_game_menu_objects(child);
     df0:	cb 01       	movw	r24, r22
     df2:	0e 94 54 06 	call	0xca8	; 0xca8 <print_new_game_menu_objects>
     df6:	08 95       	ret
    }
    else if(((*current_node).name[1]) == 'h'){
     df8:	88 36       	cpi	r24, 0x68	; 104
     dfa:	19 f4       	brne	.+6      	; 0xe02 <update_screen+0x26>
        print_score_menu_objects(child);
     dfc:	cb 01       	movw	r24, r22
     dfe:	0e 94 80 06 	call	0xd00	; 0xd00 <print_score_menu_objects>
     e02:	08 95       	ret

00000e04 <menu>:
    return child;
    
}
//Node Main_menu, Score, Play, Settings, Difficulty, Debugging, *current_node;

void menu(){
     e04:	cf 93       	push	r28
     e06:	df 93       	push	r29
     e08:	cd b7       	in	r28, 0x3d	; 61
     e0a:	de b7       	in	r29, 0x3e	; 62
     e0c:	e0 97       	sbiw	r28, 0x30	; 48
     e0e:	0f b6       	in	r0, 0x3f	; 63
     e10:	f8 94       	cli
     e12:	de bf       	out	0x3e, r29	; 62
     e14:	0f be       	out	0x3f, r0	; 63
     e16:	cd bf       	out	0x3d, r28	; 61

    static Node Main_menu, Score, Play, Settings, Difficulty, Debugging, *current_node;

    current_node = &Main_menu; //Startnoden
     e18:	8a eb       	ldi	r24, 0xBA	; 186
     e1a:	92 e0       	ldi	r25, 0x02	; 2
     e1c:	90 93 e5 02 	sts	0x02E5, r25	; 0x8002e5 <current_node.2444+0x1>
     e20:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <current_node.2444>
    DIRECTION action; //Handling som er gjort på Joysticken
    int child = 1; //Barnet som man "howrer" over på skjermen. Default er øverste barnet.

    //Bygger nodestrukturen
    Node* children1[8] = {&Play, &Score,0 ,0 ,0 ,0 ,0 ,0};
     e24:	80 e1       	ldi	r24, 0x10	; 16
     e26:	ea e0       	ldi	r30, 0x0A	; 10
     e28:	f1 e0       	ldi	r31, 0x01	; 1
     e2a:	de 01       	movw	r26, r28
     e2c:	11 96       	adiw	r26, 0x01	; 1
     e2e:	01 90       	ld	r0, Z+
     e30:	0d 92       	st	X+, r0
     e32:	8a 95       	dec	r24
     e34:	e1 f7       	brne	.-8      	; 0xe2e <menu+0x2a>
    Node* children2[8] = {0, 0, 0, 0, 0, 0, 0, 0};
     e36:	80 e1       	ldi	r24, 0x10	; 16
     e38:	5e 01       	movw	r10, r28
     e3a:	91 e1       	ldi	r25, 0x11	; 17
     e3c:	a9 0e       	add	r10, r25
     e3e:	b1 1c       	adc	r11, r1
     e40:	f5 01       	movw	r30, r10
     e42:	98 2f       	mov	r25, r24
     e44:	11 92       	st	Z+, r1
     e46:	9a 95       	dec	r25
     e48:	e9 f7       	brne	.-6      	; 0xe44 <menu+0x40>
    Node* children3[8] = {0, 0, 0, 0, 0, 0, 0, 0};
     e4a:	6e 01       	movw	r12, r28
     e4c:	e1 e2       	ldi	r30, 0x21	; 33
     e4e:	ce 0e       	add	r12, r30
     e50:	d1 1c       	adc	r13, r1
     e52:	f6 01       	movw	r30, r12
     e54:	11 92       	st	Z+, r1
     e56:	8a 95       	dec	r24
     e58:	e9 f7       	brne	.-6      	; 0xe54 <menu+0x50>



    build_node(&Main_menu, NULL, "Main menu", NULL, &children1,2);
     e5a:	68 94       	set
     e5c:	ee 24       	eor	r14, r14
     e5e:	e1 f8       	bld	r14, 1
     e60:	f1 2c       	mov	r15, r1
     e62:	8e 01       	movw	r16, r28
     e64:	0f 5f       	subi	r16, 0xFF	; 255
     e66:	1f 4f       	sbci	r17, 0xFF	; 255
     e68:	20 e0       	ldi	r18, 0x00	; 0
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	4a ee       	ldi	r20, 0xEA	; 234
     e6e:	51 e0       	ldi	r21, 0x01	; 1
     e70:	60 e0       	ldi	r22, 0x00	; 0
     e72:	70 e0       	ldi	r23, 0x00	; 0
     e74:	8a eb       	ldi	r24, 0xBA	; 186
     e76:	92 e0       	ldi	r25, 0x02	; 2
     e78:	0e 94 35 05 	call	0xa6a	; 0xa6a <build_node>
    build_node(&Play, &Main_menu, "Play game", play_game, &children2,1);
     e7c:	ee 24       	eor	r14, r14
     e7e:	e3 94       	inc	r14
     e80:	f1 2c       	mov	r15, r1
     e82:	85 01       	movw	r16, r10
     e84:	2e ed       	ldi	r18, 0xDE	; 222
     e86:	35 e0       	ldi	r19, 0x05	; 5
     e88:	44 ef       	ldi	r20, 0xF4	; 244
     e8a:	51 e0       	ldi	r21, 0x01	; 1
     e8c:	6a eb       	ldi	r22, 0xBA	; 186
     e8e:	72 e0       	ldi	r23, 0x02	; 2
     e90:	80 e9       	ldi	r24, 0x90	; 144
     e92:	92 e0       	ldi	r25, 0x02	; 2
     e94:	0e 94 35 05 	call	0xa6a	; 0xa6a <build_node>
    build_node(&Score, &Main_menu, "Show score", NULL, &children3,8);
     e98:	68 94       	set
     e9a:	ee 24       	eor	r14, r14
     e9c:	e3 f8       	bld	r14, 3
     e9e:	f1 2c       	mov	r15, r1
     ea0:	86 01       	movw	r16, r12
     ea2:	20 e0       	ldi	r18, 0x00	; 0
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	4e ef       	ldi	r20, 0xFE	; 254
     ea8:	51 e0       	ldi	r21, 0x01	; 1
     eaa:	6a eb       	ldi	r22, 0xBA	; 186
     eac:	72 e0       	ldi	r23, 0x02	; 2
     eae:	86 e6       	ldi	r24, 0x66	; 102
     eb0:	92 e0       	ldi	r25, 0x02	; 2
     eb2:	0e 94 35 05 	call	0xa6a	; 0xa6a <build_node>

    update_screen(current_node, child);
     eb6:	61 e0       	ldi	r22, 0x01	; 1
     eb8:	70 e0       	ldi	r23, 0x00	; 0
     eba:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <current_node.2444>
     ebe:	90 91 e5 02 	lds	r25, 0x02E5	; 0x8002e5 <current_node.2444+0x1>
     ec2:	0e 94 ee 06 	call	0xddc	; 0xddc <update_screen>

    static Node Main_menu, Score, Play, Settings, Difficulty, Debugging, *current_node;

    current_node = &Main_menu; //Startnoden
    DIRECTION action; //Handling som er gjort på Joysticken
    int child = 1; //Barnet som man "howrer" over på skjermen. Default er øverste barnet.
     ec6:	ee 24       	eor	r14, r14
     ec8:	e3 94       	inc	r14
     eca:	f1 2c       	mov	r15, r1
    build_node(&Score, &Main_menu, "Show score", NULL, &children3,8);

    update_screen(current_node, child);

    while(1){
        action = wait_for_action();  //Wait for user to move the joystick
     ecc:	0e 94 84 05 	call	0xb08	; 0xb08 <wait_for_action>
     ed0:	18 2f       	mov	r17, r24
        oled_clear();  //Clears the screen.
     ed2:	0e 94 2f 04 	call	0x85e	; 0x85e <oled_clear>

        switch(action)
     ed6:	11 30       	cpi	r17, 0x01	; 1
     ed8:	11 f1       	breq	.+68     	; 0xf1e <menu+0x11a>
     eda:	c8 f0       	brcs	.+50     	; 0xf0e <menu+0x10a>
     edc:	12 30       	cpi	r17, 0x02	; 2
     ede:	19 f0       	breq	.+6      	; 0xee6 <menu+0xe2>
     ee0:	13 30       	cpi	r17, 0x03	; 3
     ee2:	61 f0       	breq	.+24     	; 0xefc <menu+0xf8>
     ee4:	24 c0       	rjmp	.+72     	; 0xf2e <menu+0x12a>

}

int update_element_up(Node *current_node, int child){

    child--;
     ee6:	f1 e0       	ldi	r31, 0x01	; 1
     ee8:	ef 1a       	sub	r14, r31
     eea:	f1 08       	sbc	r15, r1

    if(child == 0){
     eec:	01 f5       	brne	.+64     	; 0xf2e <menu+0x12a>
        child = current_node->elements_on_screen;
     eee:	e0 91 e4 02 	lds	r30, 0x02E4	; 0x8002e4 <current_node.2444>
     ef2:	f0 91 e5 02 	lds	r31, 0x02E5	; 0x8002e5 <current_node.2444+0x1>
     ef6:	e2 88       	ldd	r14, Z+18	; 0x12
     ef8:	f3 88       	ldd	r15, Z+19	; 0x13
     efa:	19 c0       	rjmp	.+50     	; 0xf2e <menu+0x12a>
          case UP:
                //update_screen(current_node, child);
                child = update_element_up(current_node, child);
              break;
          case DOWN:
                child = update_element_down(current_node, child);
     efc:	b7 01       	movw	r22, r14
     efe:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <current_node.2444>
     f02:	90 91 e5 02 	lds	r25, 0x02E5	; 0x8002e5 <current_node.2444+0x1>
     f06:	0e 94 aa 05 	call	0xb54	; 0xb54 <update_element_down>
     f0a:	7c 01       	movw	r14, r24
              break;
     f0c:	10 c0       	rjmp	.+32     	; 0xf2e <menu+0x12a>
          case LEFT:
                go_up(&current_node);
     f0e:	84 ee       	ldi	r24, 0xE4	; 228
     f10:	92 e0       	ldi	r25, 0x02	; 2
     f12:	0e 94 5f 05 	call	0xabe	; 0xabe <go_up>
                child = 1;
     f16:	ee 24       	eor	r14, r14
     f18:	e3 94       	inc	r14
     f1a:	f1 2c       	mov	r15, r1
              break;
     f1c:	08 c0       	rjmp	.+16     	; 0xf2e <menu+0x12a>
          case RIGHT:
                go_down(&current_node, child);
     f1e:	b7 01       	movw	r22, r14
     f20:	84 ee       	ldi	r24, 0xE4	; 228
     f22:	92 e0       	ldi	r25, 0x02	; 2
     f24:	0e 94 6b 05 	call	0xad6	; 0xad6 <go_down>
                child = 1;
     f28:	ee 24       	eor	r14, r14
     f2a:	e3 94       	inc	r14
     f2c:	f1 2c       	mov	r15, r1
              break;
        }

        //printf("After switch\t\n");
        //printf("Nodenavn %c \t\n",((*current_node).name[0]));
        update_screen(current_node, child);
     f2e:	b7 01       	movw	r22, r14
     f30:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <current_node.2444>
     f34:	90 91 e5 02 	lds	r25, 0x02E5	; 0x8002e5 <current_node.2444+0x1>
     f38:	0e 94 ee 06 	call	0xddc	; 0xddc <update_screen>
        wait_for_neutral_joystick_position();
     f3c:	0e 94 a5 05 	call	0xb4a	; 0xb4a <wait_for_neutral_joystick_position>
    }
     f40:	c5 cf       	rjmp	.-118    	; 0xecc <menu+0xc8>

00000f42 <pos_read>:
#include <avr/io.h>
#include <stdio.h>
#include "pos_read.h"


void pos_read(position* pos){
     f42:	8f 92       	push	r8
     f44:	9f 92       	push	r9
     f46:	af 92       	push	r10
     f48:	bf 92       	push	r11
     f4a:	cf 92       	push	r12
     f4c:	df 92       	push	r13
     f4e:	ef 92       	push	r14
     f50:	ff 92       	push	r15
     f52:	0f 93       	push	r16
     f54:	1f 93       	push	r17
     f56:	cf 93       	push	r28
     f58:	df 93       	push	r29
     f5a:	7c 01       	movw	r14, r24

    int ADC_Y = ADC_read(0);
     f5c:	80 e0       	ldi	r24, 0x00	; 0
     f5e:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ADC_read>
     f62:	c8 2f       	mov	r28, r24
     f64:	d0 e0       	ldi	r29, 0x00	; 0
    int ADC_X = ADC_read(1);
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ADC_read>
     f6c:	68 2f       	mov	r22, r24
     f6e:	70 e0       	ldi	r23, 0x00	; 0

    // X read

    if((ADC_X >= (P_cal.center_X - 10)) && (ADC_X <= (P_cal.center_X + 10))){ //Deadspace for joystick
     f70:	00 91 e8 02 	lds	r16, 0x02E8	; 0x8002e8 <P_cal>
     f74:	10 91 e9 02 	lds	r17, 0x02E9	; 0x8002e9 <P_cal+0x1>
     f78:	c8 01       	movw	r24, r16
     f7a:	0a 97       	sbiw	r24, 0x0a	; 10
     f7c:	68 17       	cp	r22, r24
     f7e:	79 07       	cpc	r23, r25
     f80:	0c f4       	brge	.+2      	; 0xf84 <pos_read+0x42>
     f82:	b4 c0       	rjmp	.+360    	; 0x10ec <pos_read+0x1aa>
     f84:	44 96       	adiw	r24, 0x14	; 20
     f86:	86 17       	cp	r24, r22
     f88:	97 07       	cpc	r25, r23
     f8a:	0c f0       	brlt	.+2      	; 0xf8e <pos_read+0x4c>
     f8c:	4c c0       	rjmp	.+152    	; 0x1026 <pos_read+0xe4>
        ADC_X = 0;
    }
    else if(ADC_X > (P_cal.center_X + 10)){
        ADC_X = (ADC_X - P_cal.center_X) * 100.0 / (255.0 - P_cal.center_X);  //
     f8e:	60 1b       	sub	r22, r16
     f90:	71 0b       	sbc	r23, r17
     f92:	07 2e       	mov	r0, r23
     f94:	00 0c       	add	r0, r0
     f96:	88 0b       	sbc	r24, r24
     f98:	99 0b       	sbc	r25, r25
     f9a:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <__floatsisf>
     f9e:	20 e0       	ldi	r18, 0x00	; 0
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	48 ec       	ldi	r20, 0xC8	; 200
     fa4:	52 e4       	ldi	r21, 0x42	; 66
     fa6:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__mulsf3>
     faa:	4b 01       	movw	r8, r22
     fac:	5c 01       	movw	r10, r24
     fae:	b8 01       	movw	r22, r16
     fb0:	11 0f       	add	r17, r17
     fb2:	88 0b       	sbc	r24, r24
     fb4:	99 0b       	sbc	r25, r25
     fb6:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <__floatsisf>
     fba:	9b 01       	movw	r18, r22
     fbc:	ac 01       	movw	r20, r24
     fbe:	60 e0       	ldi	r22, 0x00	; 0
     fc0:	70 e0       	ldi	r23, 0x00	; 0
     fc2:	8f e7       	ldi	r24, 0x7F	; 127
     fc4:	93 e4       	ldi	r25, 0x43	; 67
     fc6:	0e 94 da 09 	call	0x13b4	; 0x13b4 <__subsf3>
     fca:	9b 01       	movw	r18, r22
     fcc:	ac 01       	movw	r20, r24
     fce:	c5 01       	movw	r24, r10
     fd0:	b4 01       	movw	r22, r8
     fd2:	0e 94 be 0a 	call	0x157c	; 0x157c <__divsf3>
     fd6:	0e 94 30 0b 	call	0x1660	; 0x1660 <__fixsfsi>
     fda:	6b 01       	movw	r12, r22
     fdc:	26 c0       	rjmp	.+76     	; 0x102a <pos_read+0xe8>
    }

    else if (ADC_X < (P_cal.center_X - 10)){
        ADC_X = (ADC_X / ((float)P_cal.center_X)) * 100 - 100;   // // Scaling when value is larger then center value
     fde:	07 2e       	mov	r0, r23
     fe0:	00 0c       	add	r0, r0
     fe2:	88 0b       	sbc	r24, r24
     fe4:	99 0b       	sbc	r25, r25
     fe6:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <__floatsisf>
     fea:	4b 01       	movw	r8, r22
     fec:	5c 01       	movw	r10, r24
     fee:	b8 01       	movw	r22, r16
     ff0:	11 0f       	add	r17, r17
     ff2:	88 0b       	sbc	r24, r24
     ff4:	99 0b       	sbc	r25, r25
     ff6:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <__floatsisf>
     ffa:	9b 01       	movw	r18, r22
     ffc:	ac 01       	movw	r20, r24
     ffe:	c5 01       	movw	r24, r10
    1000:	b4 01       	movw	r22, r8
    1002:	0e 94 be 0a 	call	0x157c	; 0x157c <__divsf3>
    1006:	20 e0       	ldi	r18, 0x00	; 0
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	48 ec       	ldi	r20, 0xC8	; 200
    100c:	52 e4       	ldi	r21, 0x42	; 66
    100e:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__mulsf3>
    1012:	20 e0       	ldi	r18, 0x00	; 0
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	48 ec       	ldi	r20, 0xC8	; 200
    1018:	52 e4       	ldi	r21, 0x42	; 66
    101a:	0e 94 da 09 	call	0x13b4	; 0x13b4 <__subsf3>
    101e:	0e 94 30 0b 	call	0x1660	; 0x1660 <__fixsfsi>
    1022:	6b 01       	movw	r12, r22
    1024:	02 c0       	rjmp	.+4      	; 0x102a <pos_read+0xe8>
    int ADC_X = ADC_read(1);

    // X read

    if((ADC_X >= (P_cal.center_X - 10)) && (ADC_X <= (P_cal.center_X + 10))){ //Deadspace for joystick
        ADC_X = 0;
    1026:	c1 2c       	mov	r12, r1
    1028:	d1 2c       	mov	r13, r1
        ADC_X = (ADC_X / ((float)P_cal.center_X)) * 100 - 100;   // // Scaling when value is larger then center value
    }

    // Y read

    if(ADC_Y >= (P_cal.center_Y - 10) && ADC_Y <= (P_cal.center_Y + 10)){  //Deadspace for joystick
    102a:	00 91 ea 02 	lds	r16, 0x02EA	; 0x8002ea <P_cal+0x2>
    102e:	10 91 eb 02 	lds	r17, 0x02EB	; 0x8002eb <P_cal+0x3>
    1032:	c8 01       	movw	r24, r16
    1034:	0a 97       	sbiw	r24, 0x0a	; 10
    1036:	c8 17       	cp	r28, r24
    1038:	d9 07       	cpc	r29, r25
    103a:	0c f4       	brge	.+2      	; 0x103e <pos_read+0xfc>
    103c:	5e c0       	rjmp	.+188    	; 0x10fa <pos_read+0x1b8>
    103e:	44 96       	adiw	r24, 0x14	; 20
    1040:	8c 17       	cp	r24, r28
    1042:	9d 07       	cpc	r25, r29
    1044:	0c f0       	brlt	.+2      	; 0x1048 <pos_read+0x106>
    1046:	4a c0       	rjmp	.+148    	; 0x10dc <pos_read+0x19a>
        ADC_Y = 0;
    }
    else if(ADC_Y > (P_cal.center_Y + 10)){
        ADC_Y = (ADC_Y - (P_cal.center_Y)) * 100.0 / (255.0 - P_cal.center_Y);  // Scaling when value is larger then center value
    1048:	c0 1b       	sub	r28, r16
    104a:	d1 0b       	sbc	r29, r17
    104c:	be 01       	movw	r22, r28
    104e:	dd 0f       	add	r29, r29
    1050:	88 0b       	sbc	r24, r24
    1052:	99 0b       	sbc	r25, r25
    1054:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <__floatsisf>
    1058:	20 e0       	ldi	r18, 0x00	; 0
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	48 ec       	ldi	r20, 0xC8	; 200
    105e:	52 e4       	ldi	r21, 0x42	; 66
    1060:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__mulsf3>
    1064:	4b 01       	movw	r8, r22
    1066:	5c 01       	movw	r10, r24
    1068:	b8 01       	movw	r22, r16
    106a:	11 0f       	add	r17, r17
    106c:	88 0b       	sbc	r24, r24
    106e:	99 0b       	sbc	r25, r25
    1070:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <__floatsisf>
    1074:	9b 01       	movw	r18, r22
    1076:	ac 01       	movw	r20, r24
    1078:	60 e0       	ldi	r22, 0x00	; 0
    107a:	70 e0       	ldi	r23, 0x00	; 0
    107c:	8f e7       	ldi	r24, 0x7F	; 127
    107e:	93 e4       	ldi	r25, 0x43	; 67
    1080:	0e 94 da 09 	call	0x13b4	; 0x13b4 <__subsf3>
    1084:	9b 01       	movw	r18, r22
    1086:	ac 01       	movw	r20, r24
    1088:	c5 01       	movw	r24, r10
    108a:	b4 01       	movw	r22, r8
    108c:	0e 94 be 0a 	call	0x157c	; 0x157c <__divsf3>
    1090:	0e 94 30 0b 	call	0x1660	; 0x1660 <__fixsfsi>
    1094:	25 c0       	rjmp	.+74     	; 0x10e0 <pos_read+0x19e>
    }

    else if (ADC_Y < (P_cal.center_Y - 10)){
        ADC_Y = (ADC_Y / ((float)P_cal.center_Y)) * 100 - 100;   // Scaling when value is smaller then center value
    1096:	be 01       	movw	r22, r28
    1098:	dd 0f       	add	r29, r29
    109a:	88 0b       	sbc	r24, r24
    109c:	99 0b       	sbc	r25, r25
    109e:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <__floatsisf>
    10a2:	4b 01       	movw	r8, r22
    10a4:	5c 01       	movw	r10, r24
    10a6:	b8 01       	movw	r22, r16
    10a8:	11 0f       	add	r17, r17
    10aa:	88 0b       	sbc	r24, r24
    10ac:	99 0b       	sbc	r25, r25
    10ae:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <__floatsisf>
    10b2:	9b 01       	movw	r18, r22
    10b4:	ac 01       	movw	r20, r24
    10b6:	c5 01       	movw	r24, r10
    10b8:	b4 01       	movw	r22, r8
    10ba:	0e 94 be 0a 	call	0x157c	; 0x157c <__divsf3>
    10be:	20 e0       	ldi	r18, 0x00	; 0
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	48 ec       	ldi	r20, 0xC8	; 200
    10c4:	52 e4       	ldi	r21, 0x42	; 66
    10c6:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__mulsf3>
    10ca:	20 e0       	ldi	r18, 0x00	; 0
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	48 ec       	ldi	r20, 0xC8	; 200
    10d0:	52 e4       	ldi	r21, 0x42	; 66
    10d2:	0e 94 da 09 	call	0x13b4	; 0x13b4 <__subsf3>
    10d6:	0e 94 30 0b 	call	0x1660	; 0x1660 <__fixsfsi>
    10da:	02 c0       	rjmp	.+4      	; 0x10e0 <pos_read+0x19e>
    }

    // Y read

    if(ADC_Y >= (P_cal.center_Y - 10) && ADC_Y <= (P_cal.center_Y + 10)){  //Deadspace for joystick
        ADC_Y = 0;
    10dc:	60 e0       	ldi	r22, 0x00	; 0
    10de:	70 e0       	ldi	r23, 0x00	; 0

    else if (ADC_Y < (P_cal.center_Y - 10)){
        ADC_Y = (ADC_Y / ((float)P_cal.center_Y)) * 100 - 100;   // Scaling when value is smaller then center value
    }

    pos -> posX = ADC_X;
    10e0:	f7 01       	movw	r30, r14
    10e2:	d1 82       	std	Z+1, r13	; 0x01
    10e4:	c0 82       	st	Z, r12
    pos -> posY = ADC_Y;
    10e6:	73 83       	std	Z+3, r23	; 0x03
    10e8:	62 83       	std	Z+2, r22	; 0x02
}
    10ea:	0d c0       	rjmp	.+26     	; 0x1106 <pos_read+0x1c4>
    // X read

    if((ADC_X >= (P_cal.center_X - 10)) && (ADC_X <= (P_cal.center_X + 10))){ //Deadspace for joystick
        ADC_X = 0;
    }
    else if(ADC_X > (P_cal.center_X + 10)){
    10ec:	c8 01       	movw	r24, r16
    10ee:	0a 96       	adiw	r24, 0x0a	; 10
    10f0:	86 17       	cp	r24, r22
    10f2:	97 07       	cpc	r25, r23
    10f4:	0c f4       	brge	.+2      	; 0x10f8 <pos_read+0x1b6>
    10f6:	4b cf       	rjmp	.-362    	; 0xf8e <pos_read+0x4c>
    10f8:	72 cf       	rjmp	.-284    	; 0xfde <pos_read+0x9c>
    // Y read

    if(ADC_Y >= (P_cal.center_Y - 10) && ADC_Y <= (P_cal.center_Y + 10)){  //Deadspace for joystick
        ADC_Y = 0;
    }
    else if(ADC_Y > (P_cal.center_Y + 10)){
    10fa:	c8 01       	movw	r24, r16
    10fc:	0a 96       	adiw	r24, 0x0a	; 10
    10fe:	8c 17       	cp	r24, r28
    1100:	9d 07       	cpc	r25, r29
    1102:	4c f6       	brge	.-110    	; 0x1096 <pos_read+0x154>
    1104:	a1 cf       	rjmp	.-190    	; 0x1048 <pos_read+0x106>
        ADC_Y = (ADC_Y / ((float)P_cal.center_Y)) * 100 - 100;   // Scaling when value is smaller then center value
    }

    pos -> posX = ADC_X;
    pos -> posY = ADC_Y;
}
    1106:	df 91       	pop	r29
    1108:	cf 91       	pop	r28
    110a:	1f 91       	pop	r17
    110c:	0f 91       	pop	r16
    110e:	ff 90       	pop	r15
    1110:	ef 90       	pop	r14
    1112:	df 90       	pop	r13
    1114:	cf 90       	pop	r12
    1116:	bf 90       	pop	r11
    1118:	af 90       	pop	r10
    111a:	9f 90       	pop	r9
    111c:	8f 90       	pop	r8
    111e:	08 95       	ret

00001120 <joystick_direction>:

DIRECTION joystick_direction(void){
    1120:	8f 92       	push	r8
    1122:	9f 92       	push	r9
    1124:	af 92       	push	r10
    1126:	bf 92       	push	r11
    1128:	cf 92       	push	r12
    112a:	df 92       	push	r13
    112c:	ef 92       	push	r14
    112e:	ff 92       	push	r15
    1130:	cf 93       	push	r28
    1132:	df 93       	push	r29

    pos_read(&P_pos);
    1134:	8c ee       	ldi	r24, 0xEC	; 236
    1136:	92 e0       	ldi	r25, 0x02	; 2
    1138:	0e 94 a1 07 	call	0xf42	; 0xf42 <pos_read>

    int angle = atan2(P_pos.posY, P_pos.posX);
    113c:	ec ee       	ldi	r30, 0xEC	; 236
    113e:	f2 e0       	ldi	r31, 0x02	; 2
    1140:	e0 80       	ld	r14, Z
    1142:	f1 80       	ldd	r15, Z+1	; 0x01
    1144:	c2 81       	ldd	r28, Z+2	; 0x02
    1146:	d3 81       	ldd	r29, Z+3	; 0x03
    1148:	b7 01       	movw	r22, r14
    114a:	0f 2c       	mov	r0, r15
    114c:	00 0c       	add	r0, r0
    114e:	88 0b       	sbc	r24, r24
    1150:	99 0b       	sbc	r25, r25
    1152:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <__floatsisf>
    1156:	4b 01       	movw	r8, r22
    1158:	5c 01       	movw	r10, r24
    115a:	be 01       	movw	r22, r28
    115c:	0d 2e       	mov	r0, r29
    115e:	00 0c       	add	r0, r0
    1160:	88 0b       	sbc	r24, r24
    1162:	99 0b       	sbc	r25, r25
    1164:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <__floatsisf>
    1168:	a5 01       	movw	r20, r10
    116a:	94 01       	movw	r18, r8
    116c:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <atan2>

    if(!P_pos.posY & !P_pos.posX){
    1170:	21 e0       	ldi	r18, 0x01	; 1
    1172:	cd 2b       	or	r28, r29
    1174:	09 f0       	breq	.+2      	; 0x1178 <joystick_direction+0x58>
    1176:	20 e0       	ldi	r18, 0x00	; 0
    1178:	22 23       	and	r18, r18
    117a:	31 f0       	breq	.+12     	; 0x1188 <joystick_direction+0x68>
    117c:	21 e0       	ldi	r18, 0x01	; 1
    117e:	ef 28       	or	r14, r15
    1180:	09 f0       	breq	.+2      	; 0x1184 <joystick_direction+0x64>
    1182:	20 e0       	ldi	r18, 0x00	; 0
    1184:	21 11       	cpse	r18, r1
    1186:	79 c0       	rjmp	.+242    	; 0x127a <joystick_direction+0x15a>
        return NEUTRAL;
    }

    else if(angle >= -PI / 4.0 & angle <= PI/4.0){
    1188:	0e 94 30 0b 	call	0x1660	; 0x1660 <__fixsfsi>
    118c:	07 2e       	mov	r0, r23
    118e:	00 0c       	add	r0, r0
    1190:	88 0b       	sbc	r24, r24
    1192:	99 0b       	sbc	r25, r25
    1194:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <__floatsisf>
    1198:	6b 01       	movw	r12, r22
    119a:	7c 01       	movw	r14, r24
    119c:	c1 e0       	ldi	r28, 0x01	; 1
    119e:	2b ed       	ldi	r18, 0xDB	; 219
    11a0:	3f e0       	ldi	r19, 0x0F	; 15
    11a2:	49 e4       	ldi	r20, 0x49	; 73
    11a4:	5f eb       	ldi	r21, 0xBF	; 191
    11a6:	0e 94 3f 0c 	call	0x187e	; 0x187e <__gesf2>
    11aa:	88 23       	and	r24, r24
    11ac:	0c f4       	brge	.+2      	; 0x11b0 <joystick_direction+0x90>
    11ae:	c0 e0       	ldi	r28, 0x00	; 0
    11b0:	cc 23       	and	r28, r28
    11b2:	71 f0       	breq	.+28     	; 0x11d0 <joystick_direction+0xb0>
    11b4:	c1 e0       	ldi	r28, 0x01	; 1
    11b6:	2b ed       	ldi	r18, 0xDB	; 219
    11b8:	3f e0       	ldi	r19, 0x0F	; 15
    11ba:	49 e4       	ldi	r20, 0x49	; 73
    11bc:	5f e3       	ldi	r21, 0x3F	; 63
    11be:	c7 01       	movw	r24, r14
    11c0:	b6 01       	movw	r22, r12
    11c2:	0e 94 b9 0a 	call	0x1572	; 0x1572 <__cmpsf2>
    11c6:	18 16       	cp	r1, r24
    11c8:	0c f4       	brge	.+2      	; 0x11cc <joystick_direction+0xac>
    11ca:	c0 e0       	ldi	r28, 0x00	; 0
    11cc:	c1 11       	cpse	r28, r1
    11ce:	57 c0       	rjmp	.+174    	; 0x127e <joystick_direction+0x15e>
        return RIGHT;
    }

    else if(angle >= -3 * PI/4.0 & angle <= -PI / 4.0){
    11d0:	c1 e0       	ldi	r28, 0x01	; 1
    11d2:	24 ee       	ldi	r18, 0xE4	; 228
    11d4:	3b ec       	ldi	r19, 0xCB	; 203
    11d6:	46 e1       	ldi	r20, 0x16	; 22
    11d8:	50 ec       	ldi	r21, 0xC0	; 192
    11da:	c7 01       	movw	r24, r14
    11dc:	b6 01       	movw	r22, r12
    11de:	0e 94 3f 0c 	call	0x187e	; 0x187e <__gesf2>
    11e2:	88 23       	and	r24, r24
    11e4:	0c f4       	brge	.+2      	; 0x11e8 <joystick_direction+0xc8>
    11e6:	c0 e0       	ldi	r28, 0x00	; 0
    11e8:	cc 23       	and	r28, r28
    11ea:	71 f0       	breq	.+28     	; 0x1208 <joystick_direction+0xe8>
    11ec:	c1 e0       	ldi	r28, 0x01	; 1
    11ee:	2b ed       	ldi	r18, 0xDB	; 219
    11f0:	3f e0       	ldi	r19, 0x0F	; 15
    11f2:	49 e4       	ldi	r20, 0x49	; 73
    11f4:	5f eb       	ldi	r21, 0xBF	; 191
    11f6:	c7 01       	movw	r24, r14
    11f8:	b6 01       	movw	r22, r12
    11fa:	0e 94 b9 0a 	call	0x1572	; 0x1572 <__cmpsf2>
    11fe:	18 16       	cp	r1, r24
    1200:	0c f4       	brge	.+2      	; 0x1204 <joystick_direction+0xe4>
    1202:	c0 e0       	ldi	r28, 0x00	; 0
    1204:	c1 11       	cpse	r28, r1
    1206:	3d c0       	rjmp	.+122    	; 0x1282 <joystick_direction+0x162>
        return DOWN;
    }

    else if(angle >= 3 * PI/4 | angle <= -3* PI / 4.0){
    1208:	c1 e0       	ldi	r28, 0x01	; 1
    120a:	24 ee       	ldi	r18, 0xE4	; 228
    120c:	3b ec       	ldi	r19, 0xCB	; 203
    120e:	46 e1       	ldi	r20, 0x16	; 22
    1210:	50 e4       	ldi	r21, 0x40	; 64
    1212:	c7 01       	movw	r24, r14
    1214:	b6 01       	movw	r22, r12
    1216:	0e 94 3f 0c 	call	0x187e	; 0x187e <__gesf2>
    121a:	88 23       	and	r24, r24
    121c:	0c f4       	brge	.+2      	; 0x1220 <joystick_direction+0x100>
    121e:	c0 e0       	ldi	r28, 0x00	; 0
    1220:	c1 11       	cpse	r28, r1
    1222:	31 c0       	rjmp	.+98     	; 0x1286 <joystick_direction+0x166>
    1224:	c1 e0       	ldi	r28, 0x01	; 1
    1226:	24 ee       	ldi	r18, 0xE4	; 228
    1228:	3b ec       	ldi	r19, 0xCB	; 203
    122a:	46 e1       	ldi	r20, 0x16	; 22
    122c:	50 ec       	ldi	r21, 0xC0	; 192
    122e:	c7 01       	movw	r24, r14
    1230:	b6 01       	movw	r22, r12
    1232:	0e 94 b9 0a 	call	0x1572	; 0x1572 <__cmpsf2>
    1236:	18 16       	cp	r1, r24
    1238:	0c f4       	brge	.+2      	; 0x123c <joystick_direction+0x11c>
    123a:	c0 e0       	ldi	r28, 0x00	; 0
    123c:	c1 11       	cpse	r28, r1
    123e:	23 c0       	rjmp	.+70     	; 0x1286 <joystick_direction+0x166>
        return LEFT;
    }

    else if(angle >= PI / 4 & angle <= 3*PI / 4.0){
    1240:	c1 e0       	ldi	r28, 0x01	; 1
    1242:	2b ed       	ldi	r18, 0xDB	; 219
    1244:	3f e0       	ldi	r19, 0x0F	; 15
    1246:	49 e4       	ldi	r20, 0x49	; 73
    1248:	5f e3       	ldi	r21, 0x3F	; 63
    124a:	c7 01       	movw	r24, r14
    124c:	b6 01       	movw	r22, r12
    124e:	0e 94 3f 0c 	call	0x187e	; 0x187e <__gesf2>
    1252:	88 23       	and	r24, r24
    1254:	0c f4       	brge	.+2      	; 0x1258 <joystick_direction+0x138>
    1256:	c0 e0       	ldi	r28, 0x00	; 0
    1258:	cc 23       	and	r28, r28
    125a:	71 f0       	breq	.+28     	; 0x1278 <joystick_direction+0x158>
    125c:	c1 e0       	ldi	r28, 0x01	; 1
    125e:	24 ee       	ldi	r18, 0xE4	; 228
    1260:	3b ec       	ldi	r19, 0xCB	; 203
    1262:	46 e1       	ldi	r20, 0x16	; 22
    1264:	50 e4       	ldi	r21, 0x40	; 64
    1266:	c7 01       	movw	r24, r14
    1268:	b6 01       	movw	r22, r12
    126a:	0e 94 b9 0a 	call	0x1572	; 0x1572 <__cmpsf2>
    126e:	18 16       	cp	r1, r24
    1270:	0c f4       	brge	.+2      	; 0x1274 <joystick_direction+0x154>
    1272:	c0 e0       	ldi	r28, 0x00	; 0
    1274:	c1 11       	cpse	r28, r1
    1276:	09 c0       	rjmp	.+18     	; 0x128a <joystick_direction+0x16a>
        return UP;
    }
}
    1278:	09 c0       	rjmp	.+18     	; 0x128c <joystick_direction+0x16c>
    pos_read(&P_pos);

    int angle = atan2(P_pos.posY, P_pos.posX);

    if(!P_pos.posY & !P_pos.posX){
        return NEUTRAL;
    127a:	84 e0       	ldi	r24, 0x04	; 4
    127c:	07 c0       	rjmp	.+14     	; 0x128c <joystick_direction+0x16c>
    }

    else if(angle >= -PI / 4.0 & angle <= PI/4.0){
        return RIGHT;
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	05 c0       	rjmp	.+10     	; 0x128c <joystick_direction+0x16c>
    }

    else if(angle >= -3 * PI/4.0 & angle <= -PI / 4.0){
        return DOWN;
    1282:	83 e0       	ldi	r24, 0x03	; 3
    1284:	03 c0       	rjmp	.+6      	; 0x128c <joystick_direction+0x16c>
    }

    else if(angle >= 3 * PI/4 | angle <= -3* PI / 4.0){
        return LEFT;
    1286:	80 e0       	ldi	r24, 0x00	; 0
    1288:	01 c0       	rjmp	.+2      	; 0x128c <joystick_direction+0x16c>
    }

    else if(angle >= PI / 4 & angle <= 3*PI / 4.0){
        return UP;
    128a:	82 e0       	ldi	r24, 0x02	; 2
    }
}
    128c:	df 91       	pop	r29
    128e:	cf 91       	pop	r28
    1290:	ff 90       	pop	r15
    1292:	ef 90       	pop	r14
    1294:	df 90       	pop	r13
    1296:	cf 90       	pop	r12
    1298:	bf 90       	pop	r11
    129a:	af 90       	pop	r10
    129c:	9f 90       	pop	r9
    129e:	8f 90       	pop	r8
    12a0:	08 95       	ret

000012a2 <pos_readSettings>:

void pos_readSettings(void){
	
	DDRB &= ~(1 << PB1);
    12a2:	b9 98       	cbi	0x17, 1	; 23
	DDRD &= ~(1 << PD4);
    12a4:	8c 98       	cbi	0x11, 4	; 17
	DDRD &= ~(1 << PD5);
    12a6:	8d 98       	cbi	0x11, 5	; 17

	PORTB |= (1 << PB1); // internal pull up enable
    12a8:	c1 9a       	sbi	0x18, 1	; 24
    12aa:	08 95       	ret

000012ac <usb_button_pushed>:

uint8_t usb_button_pushed(USB_BUTTON BUTTON){

    uint8_t pressed;

    if(BUTTON == LEFT_BUTTON){
    12ac:	81 30       	cpi	r24, 0x01	; 1
    12ae:	19 f4       	brne	.+6      	; 0x12b6 <usb_button_pushed+0xa>
        pressed = (PIND & (1 << PD4) );
    12b0:	80 b3       	in	r24, 0x10	; 16
    12b2:	80 71       	andi	r24, 0x10	; 16
    12b4:	08 95       	ret

		}

    if(BUTTON == RIGHT_BUTTON){
    12b6:	81 11       	cpse	r24, r1
    12b8:	03 c0       	rjmp	.+6      	; 0x12c0 <usb_button_pushed+0x14>
        pressed =  (PIND & (1 << PD5) );
    12ba:	80 b3       	in	r24, 0x10	; 16
    12bc:	80 72       	andi	r24, 0x20	; 32
    12be:	08 95       	ret
		}

    if(BUTTON == JOYSTICK_BUTTON){
    12c0:	82 30       	cpi	r24, 0x02	; 2
    12c2:	31 f4       	brne	.+12     	; 0x12d0 <usb_button_pushed+0x24>
        pressed =  (PINB & (1 << PB1) );
    12c4:	86 b3       	in	r24, 0x16	; 22
        return !pressed;
    12c6:	86 95       	lsr	r24
    12c8:	81 70       	andi	r24, 0x01	; 1
    12ca:	91 e0       	ldi	r25, 0x01	; 1
    12cc:	89 27       	eor	r24, r25
    12ce:	08 95       	ret
    12d0:	80 e0       	ldi	r24, 0x00	; 0
		}

    return pressed;
}
    12d2:	08 95       	ret

000012d4 <main>:
    12d4:	0e 94 c3 09 	call	0x1386	; 0x1386 <SRAM_init>
    12d8:	0e 94 0a 02 	call	0x414	; 0x414 <ADC_timer_init>
    12dc:	0e 94 ca 09 	call	0x1394	; 0x1394 <USART_init>
    12e0:	62 ed       	ldi	r22, 0xD2	; 210
    12e2:	79 e0       	ldi	r23, 0x09	; 9
    12e4:	86 ed       	ldi	r24, 0xD6	; 214
    12e6:	99 e0       	ldi	r25, 0x09	; 9
    12e8:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <fdevopen>
    12ec:	88 ee       	ldi	r24, 0xE8	; 232
    12ee:	92 e0       	ldi	r25, 0x02	; 2
    12f0:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <ADC_calibrate>
    12f4:	0e 94 53 04 	call	0x8a6	; 0x8a6 <OLED_init>
    12f8:	0e 94 51 09 	call	0x12a2	; 0x12a2 <pos_readSettings>
    12fc:	0e 94 2f 04 	call	0x85e	; 0x85e <oled_clear>
    1300:	80 e0       	ldi	r24, 0x00	; 0
    1302:	0e 94 17 02 	call	0x42e	; 0x42e <CAN_init>
    1306:	0e 94 02 07 	call	0xe04	; 0xe04 <menu>
    130a:	89 e0       	ldi	r24, 0x09	; 9
    130c:	92 e0       	ldi	r25, 0x02	; 2
    130e:	9f 93       	push	r25
    1310:	8f 93       	push	r24
    1312:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <printf>
    1316:	0f 90       	pop	r0
    1318:	0f 90       	pop	r0
    131a:	cc ee       	ldi	r28, 0xEC	; 236
    131c:	d2 e0       	ldi	r29, 0x02	; 2
    131e:	0e e1       	ldi	r16, 0x1E	; 30
    1320:	12 e0       	ldi	r17, 0x02	; 2
    1322:	0e 94 06 03 	call	0x60c	; 0x60c <joyStick_Can_Message>
    1326:	83 e0       	ldi	r24, 0x03	; 3
    1328:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ADC_read>
    132c:	f8 2e       	mov	r15, r24
    132e:	82 e0       	ldi	r24, 0x02	; 2
    1330:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ADC_read>
    1334:	1f 92       	push	r1
    1336:	8f 93       	push	r24
    1338:	1f 92       	push	r1
    133a:	ff 92       	push	r15
    133c:	8b 81       	ldd	r24, Y+3	; 0x03
    133e:	8f 93       	push	r24
    1340:	8a 81       	ldd	r24, Y+2	; 0x02
    1342:	8f 93       	push	r24
    1344:	89 81       	ldd	r24, Y+1	; 0x01
    1346:	8f 93       	push	r24
    1348:	88 81       	ld	r24, Y
    134a:	8f 93       	push	r24
    134c:	1f 93       	push	r17
    134e:	0f 93       	push	r16
    1350:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <printf>
    1354:	8d b7       	in	r24, 0x3d	; 61
    1356:	9e b7       	in	r25, 0x3e	; 62
    1358:	0a 96       	adiw	r24, 0x0a	; 10
    135a:	0f b6       	in	r0, 0x3f	; 63
    135c:	f8 94       	cli
    135e:	9e bf       	out	0x3e, r25	; 62
    1360:	0f be       	out	0x3f, r0	; 63
    1362:	8d bf       	out	0x3d, r24	; 61
    1364:	de cf       	rjmp	.-68     	; 0x1322 <main+0x4e>

00001366 <spi_write>:
#include "spi_driver.h"


void spi_write(char data){

    SPDR = data;
    1366:	8f b9       	out	0x0f, r24	; 15
    while( !(SPSR & (1<<SPIF)) );
    1368:	77 9b       	sbis	0x0e, 7	; 14
    136a:	fe cf       	rjmp	.-4      	; 0x1368 <spi_write+0x2>

}
    136c:	08 95       	ret

0000136e <spi_read>:

char spi_read(void){

    spi_write(DUMMY);
    136e:	86 e5       	ldi	r24, 0x56	; 86
    1370:	0e 94 b3 09 	call	0x1366	; 0x1366 <spi_write>
    //printf("SPI data sent is");
    return SPDR;
    1374:	8f b1       	in	r24, 0x0f	; 15
}
    1376:	08 95       	ret

00001378 <spi_init>:

void spi_init(void){
    DDR_SPI |= (1 << SCK) | (1 << MOSI) | (1 << SS);
    1378:	87 b3       	in	r24, 0x17	; 23
    137a:	80 6b       	ori	r24, 0xB0	; 176
    137c:	87 bb       	out	0x17, r24	; 23

    SPCR |= (1 << SPE) | (1 << MSTR) | (1<<SPR0);  // Enable SPI and set as master
    137e:	8d b1       	in	r24, 0x0d	; 13
    1380:	81 65       	ori	r24, 0x51	; 81
    1382:	8d b9       	out	0x0d, r24	; 13
    1384:	08 95       	ret

00001386 <SRAM_init>:
 */

#include "SRAM_driver.h"

void SRAM_init(void){
    MCUCR |= (1 << SRE);     //external SRAM enable (mcu control register)
    1386:	85 b7       	in	r24, 0x35	; 53
    1388:	80 68       	ori	r24, 0x80	; 128
    138a:	85 bf       	out	0x35, r24	; 53
    SFIOR |= (1 << XMM2);    //excludes memory occupied by JTAG
    138c:	80 b7       	in	r24, 0x30	; 48
    138e:	80 62       	ori	r24, 0x20	; 32
    1390:	80 bf       	out	0x30, r24	; 48
    1392:	08 95       	ret

00001394 <USART_init>:
 */
#include "UART_driver.h"


void USART_init(void){
    UBRR0L = (uint8_t)(BAUD_PRESCALER);
    1394:	8f e1       	ldi	r24, 0x1F	; 31
    1396:	89 b9       	out	0x09, r24	; 9
    UBRR0H = (uint8_t)((uint8_t) BAUD_PRESCALER>>8);
    1398:	10 bc       	out	0x20, r1	; 32
    UCSR0B = (1 << RXEN0)|(1 << TXEN0);
    139a:	88 e1       	ldi	r24, 0x18	; 24
    139c:	8a b9       	out	0x0a, r24	; 10
    UCSR0C = (1 << URSEL0)|(1 << USBS0)|(3 << UCSZ00);
    139e:	8e e8       	ldi	r24, 0x8E	; 142
    13a0:	80 bd       	out	0x20, r24	; 32
    13a2:	08 95       	ret

000013a4 <USART_receive>:
}

unsigned char USART_receive(void){
    while(!(UCSR0A & (1 << RXC0)));
    13a4:	5f 9b       	sbis	0x0b, 7	; 11
    13a6:	fe cf       	rjmp	.-4      	; 0x13a4 <USART_receive>
    return UDR0;
    13a8:	8c b1       	in	r24, 0x0c	; 12
}
    13aa:	08 95       	ret

000013ac <USART_send>:

void USART_send( unsigned char data){
    while(!(UCSR0A & (1 << UDRE0)));
    13ac:	5d 9b       	sbis	0x0b, 5	; 11
    13ae:	fe cf       	rjmp	.-4      	; 0x13ac <USART_send>
    UDR0 = data;
    13b0:	8c b9       	out	0x0c, r24	; 12
    13b2:	08 95       	ret

000013b4 <__subsf3>:
    13b4:	50 58       	subi	r21, 0x80	; 128

000013b6 <__addsf3>:
    13b6:	bb 27       	eor	r27, r27
    13b8:	aa 27       	eor	r26, r26
    13ba:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <__addsf3x>
    13be:	0c 94 05 0c 	jmp	0x180a	; 0x180a <__fp_round>
    13c2:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <__fp_pscA>
    13c6:	38 f0       	brcs	.+14     	; 0x13d6 <__addsf3+0x20>
    13c8:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__fp_pscB>
    13cc:	20 f0       	brcs	.+8      	; 0x13d6 <__addsf3+0x20>
    13ce:	39 f4       	brne	.+14     	; 0x13de <__addsf3+0x28>
    13d0:	9f 3f       	cpi	r25, 0xFF	; 255
    13d2:	19 f4       	brne	.+6      	; 0x13da <__addsf3+0x24>
    13d4:	26 f4       	brtc	.+8      	; 0x13de <__addsf3+0x28>
    13d6:	0c 94 cd 0b 	jmp	0x179a	; 0x179a <__fp_nan>
    13da:	0e f4       	brtc	.+2      	; 0x13de <__addsf3+0x28>
    13dc:	e0 95       	com	r30
    13de:	e7 fb       	bst	r30, 7
    13e0:	0c 94 c7 0b 	jmp	0x178e	; 0x178e <__fp_inf>

000013e4 <__addsf3x>:
    13e4:	e9 2f       	mov	r30, r25
    13e6:	0e 94 16 0c 	call	0x182c	; 0x182c <__fp_split3>
    13ea:	58 f3       	brcs	.-42     	; 0x13c2 <__addsf3+0xc>
    13ec:	ba 17       	cp	r27, r26
    13ee:	62 07       	cpc	r22, r18
    13f0:	73 07       	cpc	r23, r19
    13f2:	84 07       	cpc	r24, r20
    13f4:	95 07       	cpc	r25, r21
    13f6:	20 f0       	brcs	.+8      	; 0x1400 <__addsf3x+0x1c>
    13f8:	79 f4       	brne	.+30     	; 0x1418 <__addsf3x+0x34>
    13fa:	a6 f5       	brtc	.+104    	; 0x1464 <__addsf3x+0x80>
    13fc:	0c 94 38 0c 	jmp	0x1870	; 0x1870 <__fp_zero>
    1400:	0e f4       	brtc	.+2      	; 0x1404 <__addsf3x+0x20>
    1402:	e0 95       	com	r30
    1404:	0b 2e       	mov	r0, r27
    1406:	ba 2f       	mov	r27, r26
    1408:	a0 2d       	mov	r26, r0
    140a:	0b 01       	movw	r0, r22
    140c:	b9 01       	movw	r22, r18
    140e:	90 01       	movw	r18, r0
    1410:	0c 01       	movw	r0, r24
    1412:	ca 01       	movw	r24, r20
    1414:	a0 01       	movw	r20, r0
    1416:	11 24       	eor	r1, r1
    1418:	ff 27       	eor	r31, r31
    141a:	59 1b       	sub	r21, r25
    141c:	99 f0       	breq	.+38     	; 0x1444 <__addsf3x+0x60>
    141e:	59 3f       	cpi	r21, 0xF9	; 249
    1420:	50 f4       	brcc	.+20     	; 0x1436 <__addsf3x+0x52>
    1422:	50 3e       	cpi	r21, 0xE0	; 224
    1424:	68 f1       	brcs	.+90     	; 0x1480 <__addsf3x+0x9c>
    1426:	1a 16       	cp	r1, r26
    1428:	f0 40       	sbci	r31, 0x00	; 0
    142a:	a2 2f       	mov	r26, r18
    142c:	23 2f       	mov	r18, r19
    142e:	34 2f       	mov	r19, r20
    1430:	44 27       	eor	r20, r20
    1432:	58 5f       	subi	r21, 0xF8	; 248
    1434:	f3 cf       	rjmp	.-26     	; 0x141c <__addsf3x+0x38>
    1436:	46 95       	lsr	r20
    1438:	37 95       	ror	r19
    143a:	27 95       	ror	r18
    143c:	a7 95       	ror	r26
    143e:	f0 40       	sbci	r31, 0x00	; 0
    1440:	53 95       	inc	r21
    1442:	c9 f7       	brne	.-14     	; 0x1436 <__addsf3x+0x52>
    1444:	7e f4       	brtc	.+30     	; 0x1464 <__addsf3x+0x80>
    1446:	1f 16       	cp	r1, r31
    1448:	ba 0b       	sbc	r27, r26
    144a:	62 0b       	sbc	r22, r18
    144c:	73 0b       	sbc	r23, r19
    144e:	84 0b       	sbc	r24, r20
    1450:	ba f0       	brmi	.+46     	; 0x1480 <__addsf3x+0x9c>
    1452:	91 50       	subi	r25, 0x01	; 1
    1454:	a1 f0       	breq	.+40     	; 0x147e <__addsf3x+0x9a>
    1456:	ff 0f       	add	r31, r31
    1458:	bb 1f       	adc	r27, r27
    145a:	66 1f       	adc	r22, r22
    145c:	77 1f       	adc	r23, r23
    145e:	88 1f       	adc	r24, r24
    1460:	c2 f7       	brpl	.-16     	; 0x1452 <__addsf3x+0x6e>
    1462:	0e c0       	rjmp	.+28     	; 0x1480 <__addsf3x+0x9c>
    1464:	ba 0f       	add	r27, r26
    1466:	62 1f       	adc	r22, r18
    1468:	73 1f       	adc	r23, r19
    146a:	84 1f       	adc	r24, r20
    146c:	48 f4       	brcc	.+18     	; 0x1480 <__addsf3x+0x9c>
    146e:	87 95       	ror	r24
    1470:	77 95       	ror	r23
    1472:	67 95       	ror	r22
    1474:	b7 95       	ror	r27
    1476:	f7 95       	ror	r31
    1478:	9e 3f       	cpi	r25, 0xFE	; 254
    147a:	08 f0       	brcs	.+2      	; 0x147e <__addsf3x+0x9a>
    147c:	b0 cf       	rjmp	.-160    	; 0x13de <__addsf3+0x28>
    147e:	93 95       	inc	r25
    1480:	88 0f       	add	r24, r24
    1482:	08 f0       	brcs	.+2      	; 0x1486 <__addsf3x+0xa2>
    1484:	99 27       	eor	r25, r25
    1486:	ee 0f       	add	r30, r30
    1488:	97 95       	ror	r25
    148a:	87 95       	ror	r24
    148c:	08 95       	ret
    148e:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <__fp_pscA>
    1492:	60 f0       	brcs	.+24     	; 0x14ac <__addsf3x+0xc8>
    1494:	80 e8       	ldi	r24, 0x80	; 128
    1496:	91 e0       	ldi	r25, 0x01	; 1
    1498:	09 f4       	brne	.+2      	; 0x149c <__addsf3x+0xb8>
    149a:	9e ef       	ldi	r25, 0xFE	; 254
    149c:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__fp_pscB>
    14a0:	28 f0       	brcs	.+10     	; 0x14ac <__addsf3x+0xc8>
    14a2:	40 e8       	ldi	r20, 0x80	; 128
    14a4:	51 e0       	ldi	r21, 0x01	; 1
    14a6:	71 f4       	brne	.+28     	; 0x14c4 <atan2+0x10>
    14a8:	5e ef       	ldi	r21, 0xFE	; 254
    14aa:	0c c0       	rjmp	.+24     	; 0x14c4 <atan2+0x10>
    14ac:	0c 94 cd 0b 	jmp	0x179a	; 0x179a <__fp_nan>
    14b0:	0c 94 38 0c 	jmp	0x1870	; 0x1870 <__fp_zero>

000014b4 <atan2>:
    14b4:	e9 2f       	mov	r30, r25
    14b6:	e0 78       	andi	r30, 0x80	; 128
    14b8:	0e 94 16 0c 	call	0x182c	; 0x182c <__fp_split3>
    14bc:	40 f3       	brcs	.-48     	; 0x148e <__addsf3x+0xaa>
    14be:	09 2e       	mov	r0, r25
    14c0:	05 2a       	or	r0, r21
    14c2:	b1 f3       	breq	.-20     	; 0x14b0 <__addsf3x+0xcc>
    14c4:	26 17       	cp	r18, r22
    14c6:	37 07       	cpc	r19, r23
    14c8:	48 07       	cpc	r20, r24
    14ca:	59 07       	cpc	r21, r25
    14cc:	38 f0       	brcs	.+14     	; 0x14dc <atan2+0x28>
    14ce:	0e 2e       	mov	r0, r30
    14d0:	07 f8       	bld	r0, 7
    14d2:	e0 25       	eor	r30, r0
    14d4:	69 f0       	breq	.+26     	; 0x14f0 <atan2+0x3c>
    14d6:	e0 25       	eor	r30, r0
    14d8:	e0 64       	ori	r30, 0x40	; 64
    14da:	0a c0       	rjmp	.+20     	; 0x14f0 <atan2+0x3c>
    14dc:	ef 63       	ori	r30, 0x3F	; 63
    14de:	07 f8       	bld	r0, 7
    14e0:	00 94       	com	r0
    14e2:	07 fa       	bst	r0, 7
    14e4:	db 01       	movw	r26, r22
    14e6:	b9 01       	movw	r22, r18
    14e8:	9d 01       	movw	r18, r26
    14ea:	dc 01       	movw	r26, r24
    14ec:	ca 01       	movw	r24, r20
    14ee:	ad 01       	movw	r20, r26
    14f0:	ef 93       	push	r30
    14f2:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__divsf3_pse>
    14f6:	0e 94 05 0c 	call	0x180a	; 0x180a <__fp_round>
    14fa:	0e 94 8a 0a 	call	0x1514	; 0x1514 <atan>
    14fe:	5f 91       	pop	r21
    1500:	55 23       	and	r21, r21
    1502:	39 f0       	breq	.+14     	; 0x1512 <atan2+0x5e>
    1504:	2b ed       	ldi	r18, 0xDB	; 219
    1506:	3f e0       	ldi	r19, 0x0F	; 15
    1508:	49 e4       	ldi	r20, 0x49	; 73
    150a:	50 fd       	sbrc	r21, 0
    150c:	49 ec       	ldi	r20, 0xC9	; 201
    150e:	0c 94 db 09 	jmp	0x13b6	; 0x13b6 <__addsf3>
    1512:	08 95       	ret

00001514 <atan>:
    1514:	df 93       	push	r29
    1516:	dd 27       	eor	r29, r29
    1518:	b9 2f       	mov	r27, r25
    151a:	bf 77       	andi	r27, 0x7F	; 127
    151c:	40 e8       	ldi	r20, 0x80	; 128
    151e:	5f e3       	ldi	r21, 0x3F	; 63
    1520:	16 16       	cp	r1, r22
    1522:	17 06       	cpc	r1, r23
    1524:	48 07       	cpc	r20, r24
    1526:	5b 07       	cpc	r21, r27
    1528:	18 f4       	brcc	.+6      	; 0x1530 <atan+0x1c>
    152a:	d9 2f       	mov	r29, r25
    152c:	0e 94 44 0c 	call	0x1888	; 0x1888 <inverse>
    1530:	9f 93       	push	r25
    1532:	8f 93       	push	r24
    1534:	7f 93       	push	r23
    1536:	6f 93       	push	r22
    1538:	0e 94 b9 0c 	call	0x1972	; 0x1972 <square>
    153c:	e0 e7       	ldi	r30, 0x70	; 112
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <__fp_powser>
    1544:	0e 94 05 0c 	call	0x180a	; 0x180a <__fp_round>
    1548:	2f 91       	pop	r18
    154a:	3f 91       	pop	r19
    154c:	4f 91       	pop	r20
    154e:	5f 91       	pop	r21
    1550:	0e 94 5f 0c 	call	0x18be	; 0x18be <__mulsf3x>
    1554:	dd 23       	and	r29, r29
    1556:	51 f0       	breq	.+20     	; 0x156c <atan+0x58>
    1558:	90 58       	subi	r25, 0x80	; 128
    155a:	a2 ea       	ldi	r26, 0xA2	; 162
    155c:	2a ed       	ldi	r18, 0xDA	; 218
    155e:	3f e0       	ldi	r19, 0x0F	; 15
    1560:	49 ec       	ldi	r20, 0xC9	; 201
    1562:	5f e3       	ldi	r21, 0x3F	; 63
    1564:	d0 78       	andi	r29, 0x80	; 128
    1566:	5d 27       	eor	r21, r29
    1568:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <__addsf3x>
    156c:	df 91       	pop	r29
    156e:	0c 94 05 0c 	jmp	0x180a	; 0x180a <__fp_round>

00001572 <__cmpsf2>:
    1572:	0e 94 a3 0b 	call	0x1746	; 0x1746 <__fp_cmp>
    1576:	08 f4       	brcc	.+2      	; 0x157a <__cmpsf2+0x8>
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	08 95       	ret

0000157c <__divsf3>:
    157c:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <__divsf3x>
    1580:	0c 94 05 0c 	jmp	0x180a	; 0x180a <__fp_round>
    1584:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__fp_pscB>
    1588:	58 f0       	brcs	.+22     	; 0x15a0 <__divsf3+0x24>
    158a:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <__fp_pscA>
    158e:	40 f0       	brcs	.+16     	; 0x15a0 <__divsf3+0x24>
    1590:	29 f4       	brne	.+10     	; 0x159c <__divsf3+0x20>
    1592:	5f 3f       	cpi	r21, 0xFF	; 255
    1594:	29 f0       	breq	.+10     	; 0x15a0 <__divsf3+0x24>
    1596:	0c 94 c7 0b 	jmp	0x178e	; 0x178e <__fp_inf>
    159a:	51 11       	cpse	r21, r1
    159c:	0c 94 39 0c 	jmp	0x1872	; 0x1872 <__fp_szero>
    15a0:	0c 94 cd 0b 	jmp	0x179a	; 0x179a <__fp_nan>

000015a4 <__divsf3x>:
    15a4:	0e 94 16 0c 	call	0x182c	; 0x182c <__fp_split3>
    15a8:	68 f3       	brcs	.-38     	; 0x1584 <__divsf3+0x8>

000015aa <__divsf3_pse>:
    15aa:	99 23       	and	r25, r25
    15ac:	b1 f3       	breq	.-20     	; 0x159a <__divsf3+0x1e>
    15ae:	55 23       	and	r21, r21
    15b0:	91 f3       	breq	.-28     	; 0x1596 <__divsf3+0x1a>
    15b2:	95 1b       	sub	r25, r21
    15b4:	55 0b       	sbc	r21, r21
    15b6:	bb 27       	eor	r27, r27
    15b8:	aa 27       	eor	r26, r26
    15ba:	62 17       	cp	r22, r18
    15bc:	73 07       	cpc	r23, r19
    15be:	84 07       	cpc	r24, r20
    15c0:	38 f0       	brcs	.+14     	; 0x15d0 <__divsf3_pse+0x26>
    15c2:	9f 5f       	subi	r25, 0xFF	; 255
    15c4:	5f 4f       	sbci	r21, 0xFF	; 255
    15c6:	22 0f       	add	r18, r18
    15c8:	33 1f       	adc	r19, r19
    15ca:	44 1f       	adc	r20, r20
    15cc:	aa 1f       	adc	r26, r26
    15ce:	a9 f3       	breq	.-22     	; 0x15ba <__divsf3_pse+0x10>
    15d0:	35 d0       	rcall	.+106    	; 0x163c <__divsf3_pse+0x92>
    15d2:	0e 2e       	mov	r0, r30
    15d4:	3a f0       	brmi	.+14     	; 0x15e4 <__divsf3_pse+0x3a>
    15d6:	e0 e8       	ldi	r30, 0x80	; 128
    15d8:	32 d0       	rcall	.+100    	; 0x163e <__divsf3_pse+0x94>
    15da:	91 50       	subi	r25, 0x01	; 1
    15dc:	50 40       	sbci	r21, 0x00	; 0
    15de:	e6 95       	lsr	r30
    15e0:	00 1c       	adc	r0, r0
    15e2:	ca f7       	brpl	.-14     	; 0x15d6 <__divsf3_pse+0x2c>
    15e4:	2b d0       	rcall	.+86     	; 0x163c <__divsf3_pse+0x92>
    15e6:	fe 2f       	mov	r31, r30
    15e8:	29 d0       	rcall	.+82     	; 0x163c <__divsf3_pse+0x92>
    15ea:	66 0f       	add	r22, r22
    15ec:	77 1f       	adc	r23, r23
    15ee:	88 1f       	adc	r24, r24
    15f0:	bb 1f       	adc	r27, r27
    15f2:	26 17       	cp	r18, r22
    15f4:	37 07       	cpc	r19, r23
    15f6:	48 07       	cpc	r20, r24
    15f8:	ab 07       	cpc	r26, r27
    15fa:	b0 e8       	ldi	r27, 0x80	; 128
    15fc:	09 f0       	breq	.+2      	; 0x1600 <__divsf3_pse+0x56>
    15fe:	bb 0b       	sbc	r27, r27
    1600:	80 2d       	mov	r24, r0
    1602:	bf 01       	movw	r22, r30
    1604:	ff 27       	eor	r31, r31
    1606:	93 58       	subi	r25, 0x83	; 131
    1608:	5f 4f       	sbci	r21, 0xFF	; 255
    160a:	3a f0       	brmi	.+14     	; 0x161a <__divsf3_pse+0x70>
    160c:	9e 3f       	cpi	r25, 0xFE	; 254
    160e:	51 05       	cpc	r21, r1
    1610:	78 f0       	brcs	.+30     	; 0x1630 <__divsf3_pse+0x86>
    1612:	0c 94 c7 0b 	jmp	0x178e	; 0x178e <__fp_inf>
    1616:	0c 94 39 0c 	jmp	0x1872	; 0x1872 <__fp_szero>
    161a:	5f 3f       	cpi	r21, 0xFF	; 255
    161c:	e4 f3       	brlt	.-8      	; 0x1616 <__divsf3_pse+0x6c>
    161e:	98 3e       	cpi	r25, 0xE8	; 232
    1620:	d4 f3       	brlt	.-12     	; 0x1616 <__divsf3_pse+0x6c>
    1622:	86 95       	lsr	r24
    1624:	77 95       	ror	r23
    1626:	67 95       	ror	r22
    1628:	b7 95       	ror	r27
    162a:	f7 95       	ror	r31
    162c:	9f 5f       	subi	r25, 0xFF	; 255
    162e:	c9 f7       	brne	.-14     	; 0x1622 <__divsf3_pse+0x78>
    1630:	88 0f       	add	r24, r24
    1632:	91 1d       	adc	r25, r1
    1634:	96 95       	lsr	r25
    1636:	87 95       	ror	r24
    1638:	97 f9       	bld	r25, 7
    163a:	08 95       	ret
    163c:	e1 e0       	ldi	r30, 0x01	; 1
    163e:	66 0f       	add	r22, r22
    1640:	77 1f       	adc	r23, r23
    1642:	88 1f       	adc	r24, r24
    1644:	bb 1f       	adc	r27, r27
    1646:	62 17       	cp	r22, r18
    1648:	73 07       	cpc	r23, r19
    164a:	84 07       	cpc	r24, r20
    164c:	ba 07       	cpc	r27, r26
    164e:	20 f0       	brcs	.+8      	; 0x1658 <__divsf3_pse+0xae>
    1650:	62 1b       	sub	r22, r18
    1652:	73 0b       	sbc	r23, r19
    1654:	84 0b       	sbc	r24, r20
    1656:	ba 0b       	sbc	r27, r26
    1658:	ee 1f       	adc	r30, r30
    165a:	88 f7       	brcc	.-30     	; 0x163e <__divsf3_pse+0x94>
    165c:	e0 95       	com	r30
    165e:	08 95       	ret

00001660 <__fixsfsi>:
    1660:	0e 94 37 0b 	call	0x166e	; 0x166e <__fixunssfsi>
    1664:	68 94       	set
    1666:	b1 11       	cpse	r27, r1
    1668:	0c 94 39 0c 	jmp	0x1872	; 0x1872 <__fp_szero>
    166c:	08 95       	ret

0000166e <__fixunssfsi>:
    166e:	0e 94 1e 0c 	call	0x183c	; 0x183c <__fp_splitA>
    1672:	88 f0       	brcs	.+34     	; 0x1696 <__fixunssfsi+0x28>
    1674:	9f 57       	subi	r25, 0x7F	; 127
    1676:	98 f0       	brcs	.+38     	; 0x169e <__fixunssfsi+0x30>
    1678:	b9 2f       	mov	r27, r25
    167a:	99 27       	eor	r25, r25
    167c:	b7 51       	subi	r27, 0x17	; 23
    167e:	b0 f0       	brcs	.+44     	; 0x16ac <__fixunssfsi+0x3e>
    1680:	e1 f0       	breq	.+56     	; 0x16ba <__fixunssfsi+0x4c>
    1682:	66 0f       	add	r22, r22
    1684:	77 1f       	adc	r23, r23
    1686:	88 1f       	adc	r24, r24
    1688:	99 1f       	adc	r25, r25
    168a:	1a f0       	brmi	.+6      	; 0x1692 <__fixunssfsi+0x24>
    168c:	ba 95       	dec	r27
    168e:	c9 f7       	brne	.-14     	; 0x1682 <__fixunssfsi+0x14>
    1690:	14 c0       	rjmp	.+40     	; 0x16ba <__fixunssfsi+0x4c>
    1692:	b1 30       	cpi	r27, 0x01	; 1
    1694:	91 f0       	breq	.+36     	; 0x16ba <__fixunssfsi+0x4c>
    1696:	0e 94 38 0c 	call	0x1870	; 0x1870 <__fp_zero>
    169a:	b1 e0       	ldi	r27, 0x01	; 1
    169c:	08 95       	ret
    169e:	0c 94 38 0c 	jmp	0x1870	; 0x1870 <__fp_zero>
    16a2:	67 2f       	mov	r22, r23
    16a4:	78 2f       	mov	r23, r24
    16a6:	88 27       	eor	r24, r24
    16a8:	b8 5f       	subi	r27, 0xF8	; 248
    16aa:	39 f0       	breq	.+14     	; 0x16ba <__fixunssfsi+0x4c>
    16ac:	b9 3f       	cpi	r27, 0xF9	; 249
    16ae:	cc f3       	brlt	.-14     	; 0x16a2 <__fixunssfsi+0x34>
    16b0:	86 95       	lsr	r24
    16b2:	77 95       	ror	r23
    16b4:	67 95       	ror	r22
    16b6:	b3 95       	inc	r27
    16b8:	d9 f7       	brne	.-10     	; 0x16b0 <__fixunssfsi+0x42>
    16ba:	3e f4       	brtc	.+14     	; 0x16ca <__fixunssfsi+0x5c>
    16bc:	90 95       	com	r25
    16be:	80 95       	com	r24
    16c0:	70 95       	com	r23
    16c2:	61 95       	neg	r22
    16c4:	7f 4f       	sbci	r23, 0xFF	; 255
    16c6:	8f 4f       	sbci	r24, 0xFF	; 255
    16c8:	9f 4f       	sbci	r25, 0xFF	; 255
    16ca:	08 95       	ret

000016cc <__floatunsisf>:
    16cc:	e8 94       	clt
    16ce:	09 c0       	rjmp	.+18     	; 0x16e2 <__floatsisf+0x12>

000016d0 <__floatsisf>:
    16d0:	97 fb       	bst	r25, 7
    16d2:	3e f4       	brtc	.+14     	; 0x16e2 <__floatsisf+0x12>
    16d4:	90 95       	com	r25
    16d6:	80 95       	com	r24
    16d8:	70 95       	com	r23
    16da:	61 95       	neg	r22
    16dc:	7f 4f       	sbci	r23, 0xFF	; 255
    16de:	8f 4f       	sbci	r24, 0xFF	; 255
    16e0:	9f 4f       	sbci	r25, 0xFF	; 255
    16e2:	99 23       	and	r25, r25
    16e4:	a9 f0       	breq	.+42     	; 0x1710 <__floatsisf+0x40>
    16e6:	f9 2f       	mov	r31, r25
    16e8:	96 e9       	ldi	r25, 0x96	; 150
    16ea:	bb 27       	eor	r27, r27
    16ec:	93 95       	inc	r25
    16ee:	f6 95       	lsr	r31
    16f0:	87 95       	ror	r24
    16f2:	77 95       	ror	r23
    16f4:	67 95       	ror	r22
    16f6:	b7 95       	ror	r27
    16f8:	f1 11       	cpse	r31, r1
    16fa:	f8 cf       	rjmp	.-16     	; 0x16ec <__floatsisf+0x1c>
    16fc:	fa f4       	brpl	.+62     	; 0x173c <__floatsisf+0x6c>
    16fe:	bb 0f       	add	r27, r27
    1700:	11 f4       	brne	.+4      	; 0x1706 <__floatsisf+0x36>
    1702:	60 ff       	sbrs	r22, 0
    1704:	1b c0       	rjmp	.+54     	; 0x173c <__floatsisf+0x6c>
    1706:	6f 5f       	subi	r22, 0xFF	; 255
    1708:	7f 4f       	sbci	r23, 0xFF	; 255
    170a:	8f 4f       	sbci	r24, 0xFF	; 255
    170c:	9f 4f       	sbci	r25, 0xFF	; 255
    170e:	16 c0       	rjmp	.+44     	; 0x173c <__floatsisf+0x6c>
    1710:	88 23       	and	r24, r24
    1712:	11 f0       	breq	.+4      	; 0x1718 <__floatsisf+0x48>
    1714:	96 e9       	ldi	r25, 0x96	; 150
    1716:	11 c0       	rjmp	.+34     	; 0x173a <__floatsisf+0x6a>
    1718:	77 23       	and	r23, r23
    171a:	21 f0       	breq	.+8      	; 0x1724 <__floatsisf+0x54>
    171c:	9e e8       	ldi	r25, 0x8E	; 142
    171e:	87 2f       	mov	r24, r23
    1720:	76 2f       	mov	r23, r22
    1722:	05 c0       	rjmp	.+10     	; 0x172e <__floatsisf+0x5e>
    1724:	66 23       	and	r22, r22
    1726:	71 f0       	breq	.+28     	; 0x1744 <__floatsisf+0x74>
    1728:	96 e8       	ldi	r25, 0x86	; 134
    172a:	86 2f       	mov	r24, r22
    172c:	70 e0       	ldi	r23, 0x00	; 0
    172e:	60 e0       	ldi	r22, 0x00	; 0
    1730:	2a f0       	brmi	.+10     	; 0x173c <__floatsisf+0x6c>
    1732:	9a 95       	dec	r25
    1734:	66 0f       	add	r22, r22
    1736:	77 1f       	adc	r23, r23
    1738:	88 1f       	adc	r24, r24
    173a:	da f7       	brpl	.-10     	; 0x1732 <__floatsisf+0x62>
    173c:	88 0f       	add	r24, r24
    173e:	96 95       	lsr	r25
    1740:	87 95       	ror	r24
    1742:	97 f9       	bld	r25, 7
    1744:	08 95       	ret

00001746 <__fp_cmp>:
    1746:	99 0f       	add	r25, r25
    1748:	00 08       	sbc	r0, r0
    174a:	55 0f       	add	r21, r21
    174c:	aa 0b       	sbc	r26, r26
    174e:	e0 e8       	ldi	r30, 0x80	; 128
    1750:	fe ef       	ldi	r31, 0xFE	; 254
    1752:	16 16       	cp	r1, r22
    1754:	17 06       	cpc	r1, r23
    1756:	e8 07       	cpc	r30, r24
    1758:	f9 07       	cpc	r31, r25
    175a:	c0 f0       	brcs	.+48     	; 0x178c <__fp_cmp+0x46>
    175c:	12 16       	cp	r1, r18
    175e:	13 06       	cpc	r1, r19
    1760:	e4 07       	cpc	r30, r20
    1762:	f5 07       	cpc	r31, r21
    1764:	98 f0       	brcs	.+38     	; 0x178c <__fp_cmp+0x46>
    1766:	62 1b       	sub	r22, r18
    1768:	73 0b       	sbc	r23, r19
    176a:	84 0b       	sbc	r24, r20
    176c:	95 0b       	sbc	r25, r21
    176e:	39 f4       	brne	.+14     	; 0x177e <__fp_cmp+0x38>
    1770:	0a 26       	eor	r0, r26
    1772:	61 f0       	breq	.+24     	; 0x178c <__fp_cmp+0x46>
    1774:	23 2b       	or	r18, r19
    1776:	24 2b       	or	r18, r20
    1778:	25 2b       	or	r18, r21
    177a:	21 f4       	brne	.+8      	; 0x1784 <__fp_cmp+0x3e>
    177c:	08 95       	ret
    177e:	0a 26       	eor	r0, r26
    1780:	09 f4       	brne	.+2      	; 0x1784 <__fp_cmp+0x3e>
    1782:	a1 40       	sbci	r26, 0x01	; 1
    1784:	a6 95       	lsr	r26
    1786:	8f ef       	ldi	r24, 0xFF	; 255
    1788:	81 1d       	adc	r24, r1
    178a:	81 1d       	adc	r24, r1
    178c:	08 95       	ret

0000178e <__fp_inf>:
    178e:	97 f9       	bld	r25, 7
    1790:	9f 67       	ori	r25, 0x7F	; 127
    1792:	80 e8       	ldi	r24, 0x80	; 128
    1794:	70 e0       	ldi	r23, 0x00	; 0
    1796:	60 e0       	ldi	r22, 0x00	; 0
    1798:	08 95       	ret

0000179a <__fp_nan>:
    179a:	9f ef       	ldi	r25, 0xFF	; 255
    179c:	80 ec       	ldi	r24, 0xC0	; 192
    179e:	08 95       	ret

000017a0 <__fp_powser>:
    17a0:	df 93       	push	r29
    17a2:	cf 93       	push	r28
    17a4:	1f 93       	push	r17
    17a6:	0f 93       	push	r16
    17a8:	ff 92       	push	r15
    17aa:	ef 92       	push	r14
    17ac:	df 92       	push	r13
    17ae:	7b 01       	movw	r14, r22
    17b0:	8c 01       	movw	r16, r24
    17b2:	68 94       	set
    17b4:	06 c0       	rjmp	.+12     	; 0x17c2 <__fp_powser+0x22>
    17b6:	da 2e       	mov	r13, r26
    17b8:	ef 01       	movw	r28, r30
    17ba:	0e 94 5f 0c 	call	0x18be	; 0x18be <__mulsf3x>
    17be:	fe 01       	movw	r30, r28
    17c0:	e8 94       	clt
    17c2:	a5 91       	lpm	r26, Z+
    17c4:	25 91       	lpm	r18, Z+
    17c6:	35 91       	lpm	r19, Z+
    17c8:	45 91       	lpm	r20, Z+
    17ca:	55 91       	lpm	r21, Z+
    17cc:	a6 f3       	brts	.-24     	; 0x17b6 <__fp_powser+0x16>
    17ce:	ef 01       	movw	r28, r30
    17d0:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <__addsf3x>
    17d4:	fe 01       	movw	r30, r28
    17d6:	97 01       	movw	r18, r14
    17d8:	a8 01       	movw	r20, r16
    17da:	da 94       	dec	r13
    17dc:	69 f7       	brne	.-38     	; 0x17b8 <__fp_powser+0x18>
    17de:	df 90       	pop	r13
    17e0:	ef 90       	pop	r14
    17e2:	ff 90       	pop	r15
    17e4:	0f 91       	pop	r16
    17e6:	1f 91       	pop	r17
    17e8:	cf 91       	pop	r28
    17ea:	df 91       	pop	r29
    17ec:	08 95       	ret

000017ee <__fp_pscA>:
    17ee:	00 24       	eor	r0, r0
    17f0:	0a 94       	dec	r0
    17f2:	16 16       	cp	r1, r22
    17f4:	17 06       	cpc	r1, r23
    17f6:	18 06       	cpc	r1, r24
    17f8:	09 06       	cpc	r0, r25
    17fa:	08 95       	ret

000017fc <__fp_pscB>:
    17fc:	00 24       	eor	r0, r0
    17fe:	0a 94       	dec	r0
    1800:	12 16       	cp	r1, r18
    1802:	13 06       	cpc	r1, r19
    1804:	14 06       	cpc	r1, r20
    1806:	05 06       	cpc	r0, r21
    1808:	08 95       	ret

0000180a <__fp_round>:
    180a:	09 2e       	mov	r0, r25
    180c:	03 94       	inc	r0
    180e:	00 0c       	add	r0, r0
    1810:	11 f4       	brne	.+4      	; 0x1816 <__fp_round+0xc>
    1812:	88 23       	and	r24, r24
    1814:	52 f0       	brmi	.+20     	; 0x182a <__fp_round+0x20>
    1816:	bb 0f       	add	r27, r27
    1818:	40 f4       	brcc	.+16     	; 0x182a <__fp_round+0x20>
    181a:	bf 2b       	or	r27, r31
    181c:	11 f4       	brne	.+4      	; 0x1822 <__fp_round+0x18>
    181e:	60 ff       	sbrs	r22, 0
    1820:	04 c0       	rjmp	.+8      	; 0x182a <__fp_round+0x20>
    1822:	6f 5f       	subi	r22, 0xFF	; 255
    1824:	7f 4f       	sbci	r23, 0xFF	; 255
    1826:	8f 4f       	sbci	r24, 0xFF	; 255
    1828:	9f 4f       	sbci	r25, 0xFF	; 255
    182a:	08 95       	ret

0000182c <__fp_split3>:
    182c:	57 fd       	sbrc	r21, 7
    182e:	90 58       	subi	r25, 0x80	; 128
    1830:	44 0f       	add	r20, r20
    1832:	55 1f       	adc	r21, r21
    1834:	59 f0       	breq	.+22     	; 0x184c <__fp_splitA+0x10>
    1836:	5f 3f       	cpi	r21, 0xFF	; 255
    1838:	71 f0       	breq	.+28     	; 0x1856 <__fp_splitA+0x1a>
    183a:	47 95       	ror	r20

0000183c <__fp_splitA>:
    183c:	88 0f       	add	r24, r24
    183e:	97 fb       	bst	r25, 7
    1840:	99 1f       	adc	r25, r25
    1842:	61 f0       	breq	.+24     	; 0x185c <__fp_splitA+0x20>
    1844:	9f 3f       	cpi	r25, 0xFF	; 255
    1846:	79 f0       	breq	.+30     	; 0x1866 <__fp_splitA+0x2a>
    1848:	87 95       	ror	r24
    184a:	08 95       	ret
    184c:	12 16       	cp	r1, r18
    184e:	13 06       	cpc	r1, r19
    1850:	14 06       	cpc	r1, r20
    1852:	55 1f       	adc	r21, r21
    1854:	f2 cf       	rjmp	.-28     	; 0x183a <__fp_split3+0xe>
    1856:	46 95       	lsr	r20
    1858:	f1 df       	rcall	.-30     	; 0x183c <__fp_splitA>
    185a:	08 c0       	rjmp	.+16     	; 0x186c <__fp_splitA+0x30>
    185c:	16 16       	cp	r1, r22
    185e:	17 06       	cpc	r1, r23
    1860:	18 06       	cpc	r1, r24
    1862:	99 1f       	adc	r25, r25
    1864:	f1 cf       	rjmp	.-30     	; 0x1848 <__fp_splitA+0xc>
    1866:	86 95       	lsr	r24
    1868:	71 05       	cpc	r23, r1
    186a:	61 05       	cpc	r22, r1
    186c:	08 94       	sec
    186e:	08 95       	ret

00001870 <__fp_zero>:
    1870:	e8 94       	clt

00001872 <__fp_szero>:
    1872:	bb 27       	eor	r27, r27
    1874:	66 27       	eor	r22, r22
    1876:	77 27       	eor	r23, r23
    1878:	cb 01       	movw	r24, r22
    187a:	97 f9       	bld	r25, 7
    187c:	08 95       	ret

0000187e <__gesf2>:
    187e:	0e 94 a3 0b 	call	0x1746	; 0x1746 <__fp_cmp>
    1882:	08 f4       	brcc	.+2      	; 0x1886 <__gesf2+0x8>
    1884:	8f ef       	ldi	r24, 0xFF	; 255
    1886:	08 95       	ret

00001888 <inverse>:
    1888:	9b 01       	movw	r18, r22
    188a:	ac 01       	movw	r20, r24
    188c:	60 e0       	ldi	r22, 0x00	; 0
    188e:	70 e0       	ldi	r23, 0x00	; 0
    1890:	80 e8       	ldi	r24, 0x80	; 128
    1892:	9f e3       	ldi	r25, 0x3F	; 63
    1894:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__divsf3>

00001898 <__mulsf3>:
    1898:	0e 94 5f 0c 	call	0x18be	; 0x18be <__mulsf3x>
    189c:	0c 94 05 0c 	jmp	0x180a	; 0x180a <__fp_round>
    18a0:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <__fp_pscA>
    18a4:	38 f0       	brcs	.+14     	; 0x18b4 <__mulsf3+0x1c>
    18a6:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__fp_pscB>
    18aa:	20 f0       	brcs	.+8      	; 0x18b4 <__mulsf3+0x1c>
    18ac:	95 23       	and	r25, r21
    18ae:	11 f0       	breq	.+4      	; 0x18b4 <__mulsf3+0x1c>
    18b0:	0c 94 c7 0b 	jmp	0x178e	; 0x178e <__fp_inf>
    18b4:	0c 94 cd 0b 	jmp	0x179a	; 0x179a <__fp_nan>
    18b8:	11 24       	eor	r1, r1
    18ba:	0c 94 39 0c 	jmp	0x1872	; 0x1872 <__fp_szero>

000018be <__mulsf3x>:
    18be:	0e 94 16 0c 	call	0x182c	; 0x182c <__fp_split3>
    18c2:	70 f3       	brcs	.-36     	; 0x18a0 <__mulsf3+0x8>

000018c4 <__mulsf3_pse>:
    18c4:	95 9f       	mul	r25, r21
    18c6:	c1 f3       	breq	.-16     	; 0x18b8 <__mulsf3+0x20>
    18c8:	95 0f       	add	r25, r21
    18ca:	50 e0       	ldi	r21, 0x00	; 0
    18cc:	55 1f       	adc	r21, r21
    18ce:	62 9f       	mul	r22, r18
    18d0:	f0 01       	movw	r30, r0
    18d2:	72 9f       	mul	r23, r18
    18d4:	bb 27       	eor	r27, r27
    18d6:	f0 0d       	add	r31, r0
    18d8:	b1 1d       	adc	r27, r1
    18da:	63 9f       	mul	r22, r19
    18dc:	aa 27       	eor	r26, r26
    18de:	f0 0d       	add	r31, r0
    18e0:	b1 1d       	adc	r27, r1
    18e2:	aa 1f       	adc	r26, r26
    18e4:	64 9f       	mul	r22, r20
    18e6:	66 27       	eor	r22, r22
    18e8:	b0 0d       	add	r27, r0
    18ea:	a1 1d       	adc	r26, r1
    18ec:	66 1f       	adc	r22, r22
    18ee:	82 9f       	mul	r24, r18
    18f0:	22 27       	eor	r18, r18
    18f2:	b0 0d       	add	r27, r0
    18f4:	a1 1d       	adc	r26, r1
    18f6:	62 1f       	adc	r22, r18
    18f8:	73 9f       	mul	r23, r19
    18fa:	b0 0d       	add	r27, r0
    18fc:	a1 1d       	adc	r26, r1
    18fe:	62 1f       	adc	r22, r18
    1900:	83 9f       	mul	r24, r19
    1902:	a0 0d       	add	r26, r0
    1904:	61 1d       	adc	r22, r1
    1906:	22 1f       	adc	r18, r18
    1908:	74 9f       	mul	r23, r20
    190a:	33 27       	eor	r19, r19
    190c:	a0 0d       	add	r26, r0
    190e:	61 1d       	adc	r22, r1
    1910:	23 1f       	adc	r18, r19
    1912:	84 9f       	mul	r24, r20
    1914:	60 0d       	add	r22, r0
    1916:	21 1d       	adc	r18, r1
    1918:	82 2f       	mov	r24, r18
    191a:	76 2f       	mov	r23, r22
    191c:	6a 2f       	mov	r22, r26
    191e:	11 24       	eor	r1, r1
    1920:	9f 57       	subi	r25, 0x7F	; 127
    1922:	50 40       	sbci	r21, 0x00	; 0
    1924:	9a f0       	brmi	.+38     	; 0x194c <__mulsf3_pse+0x88>
    1926:	f1 f0       	breq	.+60     	; 0x1964 <__mulsf3_pse+0xa0>
    1928:	88 23       	and	r24, r24
    192a:	4a f0       	brmi	.+18     	; 0x193e <__mulsf3_pse+0x7a>
    192c:	ee 0f       	add	r30, r30
    192e:	ff 1f       	adc	r31, r31
    1930:	bb 1f       	adc	r27, r27
    1932:	66 1f       	adc	r22, r22
    1934:	77 1f       	adc	r23, r23
    1936:	88 1f       	adc	r24, r24
    1938:	91 50       	subi	r25, 0x01	; 1
    193a:	50 40       	sbci	r21, 0x00	; 0
    193c:	a9 f7       	brne	.-22     	; 0x1928 <__mulsf3_pse+0x64>
    193e:	9e 3f       	cpi	r25, 0xFE	; 254
    1940:	51 05       	cpc	r21, r1
    1942:	80 f0       	brcs	.+32     	; 0x1964 <__mulsf3_pse+0xa0>
    1944:	0c 94 c7 0b 	jmp	0x178e	; 0x178e <__fp_inf>
    1948:	0c 94 39 0c 	jmp	0x1872	; 0x1872 <__fp_szero>
    194c:	5f 3f       	cpi	r21, 0xFF	; 255
    194e:	e4 f3       	brlt	.-8      	; 0x1948 <__mulsf3_pse+0x84>
    1950:	98 3e       	cpi	r25, 0xE8	; 232
    1952:	d4 f3       	brlt	.-12     	; 0x1948 <__mulsf3_pse+0x84>
    1954:	86 95       	lsr	r24
    1956:	77 95       	ror	r23
    1958:	67 95       	ror	r22
    195a:	b7 95       	ror	r27
    195c:	f7 95       	ror	r31
    195e:	e7 95       	ror	r30
    1960:	9f 5f       	subi	r25, 0xFF	; 255
    1962:	c1 f7       	brne	.-16     	; 0x1954 <__mulsf3_pse+0x90>
    1964:	fe 2b       	or	r31, r30
    1966:	88 0f       	add	r24, r24
    1968:	91 1d       	adc	r25, r1
    196a:	96 95       	lsr	r25
    196c:	87 95       	ror	r24
    196e:	97 f9       	bld	r25, 7
    1970:	08 95       	ret

00001972 <square>:
    1972:	9b 01       	movw	r18, r22
    1974:	ac 01       	movw	r20, r24
    1976:	0c 94 4c 0c 	jmp	0x1898	; 0x1898 <__mulsf3>

0000197a <strcpy>:
    197a:	fb 01       	movw	r30, r22
    197c:	dc 01       	movw	r26, r24
    197e:	01 90       	ld	r0, Z+
    1980:	0d 92       	st	X+, r0
    1982:	00 20       	and	r0, r0
    1984:	e1 f7       	brne	.-8      	; 0x197e <strcpy+0x4>
    1986:	08 95       	ret

00001988 <__itoa_ncheck>:
    1988:	bb 27       	eor	r27, r27
    198a:	4a 30       	cpi	r20, 0x0A	; 10
    198c:	31 f4       	brne	.+12     	; 0x199a <__itoa_ncheck+0x12>
    198e:	99 23       	and	r25, r25
    1990:	22 f4       	brpl	.+8      	; 0x199a <__itoa_ncheck+0x12>
    1992:	bd e2       	ldi	r27, 0x2D	; 45
    1994:	90 95       	com	r25
    1996:	81 95       	neg	r24
    1998:	9f 4f       	sbci	r25, 0xFF	; 255
    199a:	0c 94 d0 0c 	jmp	0x19a0	; 0x19a0 <__utoa_common>

0000199e <__utoa_ncheck>:
    199e:	bb 27       	eor	r27, r27

000019a0 <__utoa_common>:
    19a0:	fb 01       	movw	r30, r22
    19a2:	55 27       	eor	r21, r21
    19a4:	aa 27       	eor	r26, r26
    19a6:	88 0f       	add	r24, r24
    19a8:	99 1f       	adc	r25, r25
    19aa:	aa 1f       	adc	r26, r26
    19ac:	a4 17       	cp	r26, r20
    19ae:	10 f0       	brcs	.+4      	; 0x19b4 <__utoa_common+0x14>
    19b0:	a4 1b       	sub	r26, r20
    19b2:	83 95       	inc	r24
    19b4:	50 51       	subi	r21, 0x10	; 16
    19b6:	b9 f7       	brne	.-18     	; 0x19a6 <__utoa_common+0x6>
    19b8:	a0 5d       	subi	r26, 0xD0	; 208
    19ba:	aa 33       	cpi	r26, 0x3A	; 58
    19bc:	08 f0       	brcs	.+2      	; 0x19c0 <__utoa_common+0x20>
    19be:	a9 5d       	subi	r26, 0xD9	; 217
    19c0:	a1 93       	st	Z+, r26
    19c2:	00 97       	sbiw	r24, 0x00	; 0
    19c4:	79 f7       	brne	.-34     	; 0x19a4 <__utoa_common+0x4>
    19c6:	b1 11       	cpse	r27, r1
    19c8:	b1 93       	st	Z+, r27
    19ca:	11 92       	st	Z+, r1
    19cc:	cb 01       	movw	r24, r22
    19ce:	0c 94 b5 10 	jmp	0x216a	; 0x216a <strrev>

000019d2 <fdevopen>:
    19d2:	0f 93       	push	r16
    19d4:	1f 93       	push	r17
    19d6:	cf 93       	push	r28
    19d8:	df 93       	push	r29
    19da:	00 97       	sbiw	r24, 0x00	; 0
    19dc:	31 f4       	brne	.+12     	; 0x19ea <fdevopen+0x18>
    19de:	61 15       	cp	r22, r1
    19e0:	71 05       	cpc	r23, r1
    19e2:	19 f4       	brne	.+6      	; 0x19ea <fdevopen+0x18>
    19e4:	80 e0       	ldi	r24, 0x00	; 0
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	3a c0       	rjmp	.+116    	; 0x1a5e <fdevopen+0x8c>
    19ea:	8b 01       	movw	r16, r22
    19ec:	ec 01       	movw	r28, r24
    19ee:	6e e0       	ldi	r22, 0x0E	; 14
    19f0:	70 e0       	ldi	r23, 0x00	; 0
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <calloc>
    19fa:	fc 01       	movw	r30, r24
    19fc:	89 2b       	or	r24, r25
    19fe:	91 f3       	breq	.-28     	; 0x19e4 <fdevopen+0x12>
    1a00:	80 e8       	ldi	r24, 0x80	; 128
    1a02:	83 83       	std	Z+3, r24	; 0x03
    1a04:	01 15       	cp	r16, r1
    1a06:	11 05       	cpc	r17, r1
    1a08:	71 f0       	breq	.+28     	; 0x1a26 <fdevopen+0x54>
    1a0a:	13 87       	std	Z+11, r17	; 0x0b
    1a0c:	02 87       	std	Z+10, r16	; 0x0a
    1a0e:	81 e8       	ldi	r24, 0x81	; 129
    1a10:	83 83       	std	Z+3, r24	; 0x03
    1a12:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <__iob>
    1a16:	90 91 f7 02 	lds	r25, 0x02F7	; 0x8002f7 <__iob+0x1>
    1a1a:	89 2b       	or	r24, r25
    1a1c:	21 f4       	brne	.+8      	; 0x1a26 <fdevopen+0x54>
    1a1e:	f0 93 f7 02 	sts	0x02F7, r31	; 0x8002f7 <__iob+0x1>
    1a22:	e0 93 f6 02 	sts	0x02F6, r30	; 0x8002f6 <__iob>
    1a26:	20 97       	sbiw	r28, 0x00	; 0
    1a28:	c9 f0       	breq	.+50     	; 0x1a5c <fdevopen+0x8a>
    1a2a:	d1 87       	std	Z+9, r29	; 0x09
    1a2c:	c0 87       	std	Z+8, r28	; 0x08
    1a2e:	83 81       	ldd	r24, Z+3	; 0x03
    1a30:	82 60       	ori	r24, 0x02	; 2
    1a32:	83 83       	std	Z+3, r24	; 0x03
    1a34:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <__iob+0x2>
    1a38:	90 91 f9 02 	lds	r25, 0x02F9	; 0x8002f9 <__iob+0x3>
    1a3c:	89 2b       	or	r24, r25
    1a3e:	71 f4       	brne	.+28     	; 0x1a5c <fdevopen+0x8a>
    1a40:	f0 93 f9 02 	sts	0x02F9, r31	; 0x8002f9 <__iob+0x3>
    1a44:	e0 93 f8 02 	sts	0x02F8, r30	; 0x8002f8 <__iob+0x2>
    1a48:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <__iob+0x4>
    1a4c:	90 91 fb 02 	lds	r25, 0x02FB	; 0x8002fb <__iob+0x5>
    1a50:	89 2b       	or	r24, r25
    1a52:	21 f4       	brne	.+8      	; 0x1a5c <fdevopen+0x8a>
    1a54:	f0 93 fb 02 	sts	0x02FB, r31	; 0x8002fb <__iob+0x5>
    1a58:	e0 93 fa 02 	sts	0x02FA, r30	; 0x8002fa <__iob+0x4>
    1a5c:	cf 01       	movw	r24, r30
    1a5e:	df 91       	pop	r29
    1a60:	cf 91       	pop	r28
    1a62:	1f 91       	pop	r17
    1a64:	0f 91       	pop	r16
    1a66:	08 95       	ret

00001a68 <printf>:
    1a68:	a0 e0       	ldi	r26, 0x00	; 0
    1a6a:	b0 e0       	ldi	r27, 0x00	; 0
    1a6c:	ea e3       	ldi	r30, 0x3A	; 58
    1a6e:	fd e0       	ldi	r31, 0x0D	; 13
    1a70:	0c 94 6f 11 	jmp	0x22de	; 0x22de <__prologue_saves__+0x20>
    1a74:	ae 01       	movw	r20, r28
    1a76:	4b 5f       	subi	r20, 0xFB	; 251
    1a78:	5f 4f       	sbci	r21, 0xFF	; 255
    1a7a:	fa 01       	movw	r30, r20
    1a7c:	61 91       	ld	r22, Z+
    1a7e:	71 91       	ld	r23, Z+
    1a80:	af 01       	movw	r20, r30
    1a82:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <__iob+0x2>
    1a86:	90 91 f9 02 	lds	r25, 0x02F9	; 0x8002f9 <__iob+0x3>
    1a8a:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <vfprintf>
    1a8e:	e2 e0       	ldi	r30, 0x02	; 2
    1a90:	0c 94 8b 11 	jmp	0x2316	; 0x2316 <__epilogue_restores__+0x20>

00001a94 <puts>:
    1a94:	0f 93       	push	r16
    1a96:	1f 93       	push	r17
    1a98:	cf 93       	push	r28
    1a9a:	df 93       	push	r29
    1a9c:	e0 91 f8 02 	lds	r30, 0x02F8	; 0x8002f8 <__iob+0x2>
    1aa0:	f0 91 f9 02 	lds	r31, 0x02F9	; 0x8002f9 <__iob+0x3>
    1aa4:	23 81       	ldd	r18, Z+3	; 0x03
    1aa6:	21 ff       	sbrs	r18, 1
    1aa8:	1b c0       	rjmp	.+54     	; 0x1ae0 <puts+0x4c>
    1aaa:	8c 01       	movw	r16, r24
    1aac:	d0 e0       	ldi	r29, 0x00	; 0
    1aae:	c0 e0       	ldi	r28, 0x00	; 0
    1ab0:	f8 01       	movw	r30, r16
    1ab2:	81 91       	ld	r24, Z+
    1ab4:	8f 01       	movw	r16, r30
    1ab6:	60 91 f8 02 	lds	r22, 0x02F8	; 0x8002f8 <__iob+0x2>
    1aba:	70 91 f9 02 	lds	r23, 0x02F9	; 0x8002f9 <__iob+0x3>
    1abe:	db 01       	movw	r26, r22
    1ac0:	18 96       	adiw	r26, 0x08	; 8
    1ac2:	ed 91       	ld	r30, X+
    1ac4:	fc 91       	ld	r31, X
    1ac6:	19 97       	sbiw	r26, 0x09	; 9
    1ac8:	88 23       	and	r24, r24
    1aca:	31 f0       	breq	.+12     	; 0x1ad8 <puts+0x44>
    1acc:	09 95       	icall
    1ace:	89 2b       	or	r24, r25
    1ad0:	79 f3       	breq	.-34     	; 0x1ab0 <puts+0x1c>
    1ad2:	df ef       	ldi	r29, 0xFF	; 255
    1ad4:	cf ef       	ldi	r28, 0xFF	; 255
    1ad6:	ec cf       	rjmp	.-40     	; 0x1ab0 <puts+0x1c>
    1ad8:	8a e0       	ldi	r24, 0x0A	; 10
    1ada:	09 95       	icall
    1adc:	89 2b       	or	r24, r25
    1ade:	19 f0       	breq	.+6      	; 0x1ae6 <puts+0x52>
    1ae0:	8f ef       	ldi	r24, 0xFF	; 255
    1ae2:	9f ef       	ldi	r25, 0xFF	; 255
    1ae4:	02 c0       	rjmp	.+4      	; 0x1aea <puts+0x56>
    1ae6:	8d 2f       	mov	r24, r29
    1ae8:	9c 2f       	mov	r25, r28
    1aea:	df 91       	pop	r29
    1aec:	cf 91       	pop	r28
    1aee:	1f 91       	pop	r17
    1af0:	0f 91       	pop	r16
    1af2:	08 95       	ret

00001af4 <vfprintf>:
    1af4:	ab e0       	ldi	r26, 0x0B	; 11
    1af6:	b0 e0       	ldi	r27, 0x00	; 0
    1af8:	e0 e8       	ldi	r30, 0x80	; 128
    1afa:	fd e0       	ldi	r31, 0x0D	; 13
    1afc:	0c 94 5f 11 	jmp	0x22be	; 0x22be <__prologue_saves__>
    1b00:	6c 01       	movw	r12, r24
    1b02:	7b 01       	movw	r14, r22
    1b04:	8a 01       	movw	r16, r20
    1b06:	fc 01       	movw	r30, r24
    1b08:	17 82       	std	Z+7, r1	; 0x07
    1b0a:	16 82       	std	Z+6, r1	; 0x06
    1b0c:	83 81       	ldd	r24, Z+3	; 0x03
    1b0e:	81 ff       	sbrs	r24, 1
    1b10:	cc c1       	rjmp	.+920    	; 0x1eaa <vfprintf+0x3b6>
    1b12:	ce 01       	movw	r24, r28
    1b14:	01 96       	adiw	r24, 0x01	; 1
    1b16:	3c 01       	movw	r6, r24
    1b18:	f6 01       	movw	r30, r12
    1b1a:	93 81       	ldd	r25, Z+3	; 0x03
    1b1c:	f7 01       	movw	r30, r14
    1b1e:	93 fd       	sbrc	r25, 3
    1b20:	85 91       	lpm	r24, Z+
    1b22:	93 ff       	sbrs	r25, 3
    1b24:	81 91       	ld	r24, Z+
    1b26:	7f 01       	movw	r14, r30
    1b28:	88 23       	and	r24, r24
    1b2a:	09 f4       	brne	.+2      	; 0x1b2e <vfprintf+0x3a>
    1b2c:	ba c1       	rjmp	.+884    	; 0x1ea2 <vfprintf+0x3ae>
    1b2e:	85 32       	cpi	r24, 0x25	; 37
    1b30:	39 f4       	brne	.+14     	; 0x1b40 <vfprintf+0x4c>
    1b32:	93 fd       	sbrc	r25, 3
    1b34:	85 91       	lpm	r24, Z+
    1b36:	93 ff       	sbrs	r25, 3
    1b38:	81 91       	ld	r24, Z+
    1b3a:	7f 01       	movw	r14, r30
    1b3c:	85 32       	cpi	r24, 0x25	; 37
    1b3e:	29 f4       	brne	.+10     	; 0x1b4a <vfprintf+0x56>
    1b40:	b6 01       	movw	r22, r12
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	0e 94 c5 10 	call	0x218a	; 0x218a <fputc>
    1b48:	e7 cf       	rjmp	.-50     	; 0x1b18 <vfprintf+0x24>
    1b4a:	91 2c       	mov	r9, r1
    1b4c:	21 2c       	mov	r2, r1
    1b4e:	31 2c       	mov	r3, r1
    1b50:	ff e1       	ldi	r31, 0x1F	; 31
    1b52:	f3 15       	cp	r31, r3
    1b54:	d8 f0       	brcs	.+54     	; 0x1b8c <vfprintf+0x98>
    1b56:	8b 32       	cpi	r24, 0x2B	; 43
    1b58:	79 f0       	breq	.+30     	; 0x1b78 <vfprintf+0x84>
    1b5a:	38 f4       	brcc	.+14     	; 0x1b6a <vfprintf+0x76>
    1b5c:	80 32       	cpi	r24, 0x20	; 32
    1b5e:	79 f0       	breq	.+30     	; 0x1b7e <vfprintf+0x8a>
    1b60:	83 32       	cpi	r24, 0x23	; 35
    1b62:	a1 f4       	brne	.+40     	; 0x1b8c <vfprintf+0x98>
    1b64:	23 2d       	mov	r18, r3
    1b66:	20 61       	ori	r18, 0x10	; 16
    1b68:	1d c0       	rjmp	.+58     	; 0x1ba4 <vfprintf+0xb0>
    1b6a:	8d 32       	cpi	r24, 0x2D	; 45
    1b6c:	61 f0       	breq	.+24     	; 0x1b86 <vfprintf+0x92>
    1b6e:	80 33       	cpi	r24, 0x30	; 48
    1b70:	69 f4       	brne	.+26     	; 0x1b8c <vfprintf+0x98>
    1b72:	23 2d       	mov	r18, r3
    1b74:	21 60       	ori	r18, 0x01	; 1
    1b76:	16 c0       	rjmp	.+44     	; 0x1ba4 <vfprintf+0xb0>
    1b78:	83 2d       	mov	r24, r3
    1b7a:	82 60       	ori	r24, 0x02	; 2
    1b7c:	38 2e       	mov	r3, r24
    1b7e:	e3 2d       	mov	r30, r3
    1b80:	e4 60       	ori	r30, 0x04	; 4
    1b82:	3e 2e       	mov	r3, r30
    1b84:	2a c0       	rjmp	.+84     	; 0x1bda <vfprintf+0xe6>
    1b86:	f3 2d       	mov	r31, r3
    1b88:	f8 60       	ori	r31, 0x08	; 8
    1b8a:	1d c0       	rjmp	.+58     	; 0x1bc6 <vfprintf+0xd2>
    1b8c:	37 fc       	sbrc	r3, 7
    1b8e:	2d c0       	rjmp	.+90     	; 0x1bea <vfprintf+0xf6>
    1b90:	20 ed       	ldi	r18, 0xD0	; 208
    1b92:	28 0f       	add	r18, r24
    1b94:	2a 30       	cpi	r18, 0x0A	; 10
    1b96:	40 f0       	brcs	.+16     	; 0x1ba8 <vfprintf+0xb4>
    1b98:	8e 32       	cpi	r24, 0x2E	; 46
    1b9a:	b9 f4       	brne	.+46     	; 0x1bca <vfprintf+0xd6>
    1b9c:	36 fc       	sbrc	r3, 6
    1b9e:	81 c1       	rjmp	.+770    	; 0x1ea2 <vfprintf+0x3ae>
    1ba0:	23 2d       	mov	r18, r3
    1ba2:	20 64       	ori	r18, 0x40	; 64
    1ba4:	32 2e       	mov	r3, r18
    1ba6:	19 c0       	rjmp	.+50     	; 0x1bda <vfprintf+0xe6>
    1ba8:	36 fe       	sbrs	r3, 6
    1baa:	06 c0       	rjmp	.+12     	; 0x1bb8 <vfprintf+0xc4>
    1bac:	8a e0       	ldi	r24, 0x0A	; 10
    1bae:	98 9e       	mul	r9, r24
    1bb0:	20 0d       	add	r18, r0
    1bb2:	11 24       	eor	r1, r1
    1bb4:	92 2e       	mov	r9, r18
    1bb6:	11 c0       	rjmp	.+34     	; 0x1bda <vfprintf+0xe6>
    1bb8:	ea e0       	ldi	r30, 0x0A	; 10
    1bba:	2e 9e       	mul	r2, r30
    1bbc:	20 0d       	add	r18, r0
    1bbe:	11 24       	eor	r1, r1
    1bc0:	22 2e       	mov	r2, r18
    1bc2:	f3 2d       	mov	r31, r3
    1bc4:	f0 62       	ori	r31, 0x20	; 32
    1bc6:	3f 2e       	mov	r3, r31
    1bc8:	08 c0       	rjmp	.+16     	; 0x1bda <vfprintf+0xe6>
    1bca:	8c 36       	cpi	r24, 0x6C	; 108
    1bcc:	21 f4       	brne	.+8      	; 0x1bd6 <vfprintf+0xe2>
    1bce:	83 2d       	mov	r24, r3
    1bd0:	80 68       	ori	r24, 0x80	; 128
    1bd2:	38 2e       	mov	r3, r24
    1bd4:	02 c0       	rjmp	.+4      	; 0x1bda <vfprintf+0xe6>
    1bd6:	88 36       	cpi	r24, 0x68	; 104
    1bd8:	41 f4       	brne	.+16     	; 0x1bea <vfprintf+0xf6>
    1bda:	f7 01       	movw	r30, r14
    1bdc:	93 fd       	sbrc	r25, 3
    1bde:	85 91       	lpm	r24, Z+
    1be0:	93 ff       	sbrs	r25, 3
    1be2:	81 91       	ld	r24, Z+
    1be4:	7f 01       	movw	r14, r30
    1be6:	81 11       	cpse	r24, r1
    1be8:	b3 cf       	rjmp	.-154    	; 0x1b50 <vfprintf+0x5c>
    1bea:	98 2f       	mov	r25, r24
    1bec:	9f 7d       	andi	r25, 0xDF	; 223
    1bee:	95 54       	subi	r25, 0x45	; 69
    1bf0:	93 30       	cpi	r25, 0x03	; 3
    1bf2:	28 f4       	brcc	.+10     	; 0x1bfe <vfprintf+0x10a>
    1bf4:	0c 5f       	subi	r16, 0xFC	; 252
    1bf6:	1f 4f       	sbci	r17, 0xFF	; 255
    1bf8:	9f e3       	ldi	r25, 0x3F	; 63
    1bfa:	99 83       	std	Y+1, r25	; 0x01
    1bfc:	0d c0       	rjmp	.+26     	; 0x1c18 <vfprintf+0x124>
    1bfe:	83 36       	cpi	r24, 0x63	; 99
    1c00:	31 f0       	breq	.+12     	; 0x1c0e <vfprintf+0x11a>
    1c02:	83 37       	cpi	r24, 0x73	; 115
    1c04:	71 f0       	breq	.+28     	; 0x1c22 <vfprintf+0x12e>
    1c06:	83 35       	cpi	r24, 0x53	; 83
    1c08:	09 f0       	breq	.+2      	; 0x1c0c <vfprintf+0x118>
    1c0a:	59 c0       	rjmp	.+178    	; 0x1cbe <vfprintf+0x1ca>
    1c0c:	21 c0       	rjmp	.+66     	; 0x1c50 <vfprintf+0x15c>
    1c0e:	f8 01       	movw	r30, r16
    1c10:	80 81       	ld	r24, Z
    1c12:	89 83       	std	Y+1, r24	; 0x01
    1c14:	0e 5f       	subi	r16, 0xFE	; 254
    1c16:	1f 4f       	sbci	r17, 0xFF	; 255
    1c18:	88 24       	eor	r8, r8
    1c1a:	83 94       	inc	r8
    1c1c:	91 2c       	mov	r9, r1
    1c1e:	53 01       	movw	r10, r6
    1c20:	13 c0       	rjmp	.+38     	; 0x1c48 <vfprintf+0x154>
    1c22:	28 01       	movw	r4, r16
    1c24:	f2 e0       	ldi	r31, 0x02	; 2
    1c26:	4f 0e       	add	r4, r31
    1c28:	51 1c       	adc	r5, r1
    1c2a:	f8 01       	movw	r30, r16
    1c2c:	a0 80       	ld	r10, Z
    1c2e:	b1 80       	ldd	r11, Z+1	; 0x01
    1c30:	36 fe       	sbrs	r3, 6
    1c32:	03 c0       	rjmp	.+6      	; 0x1c3a <vfprintf+0x146>
    1c34:	69 2d       	mov	r22, r9
    1c36:	70 e0       	ldi	r23, 0x00	; 0
    1c38:	02 c0       	rjmp	.+4      	; 0x1c3e <vfprintf+0x14a>
    1c3a:	6f ef       	ldi	r22, 0xFF	; 255
    1c3c:	7f ef       	ldi	r23, 0xFF	; 255
    1c3e:	c5 01       	movw	r24, r10
    1c40:	0e 94 aa 10 	call	0x2154	; 0x2154 <strnlen>
    1c44:	4c 01       	movw	r8, r24
    1c46:	82 01       	movw	r16, r4
    1c48:	f3 2d       	mov	r31, r3
    1c4a:	ff 77       	andi	r31, 0x7F	; 127
    1c4c:	3f 2e       	mov	r3, r31
    1c4e:	16 c0       	rjmp	.+44     	; 0x1c7c <vfprintf+0x188>
    1c50:	28 01       	movw	r4, r16
    1c52:	22 e0       	ldi	r18, 0x02	; 2
    1c54:	42 0e       	add	r4, r18
    1c56:	51 1c       	adc	r5, r1
    1c58:	f8 01       	movw	r30, r16
    1c5a:	a0 80       	ld	r10, Z
    1c5c:	b1 80       	ldd	r11, Z+1	; 0x01
    1c5e:	36 fe       	sbrs	r3, 6
    1c60:	03 c0       	rjmp	.+6      	; 0x1c68 <vfprintf+0x174>
    1c62:	69 2d       	mov	r22, r9
    1c64:	70 e0       	ldi	r23, 0x00	; 0
    1c66:	02 c0       	rjmp	.+4      	; 0x1c6c <vfprintf+0x178>
    1c68:	6f ef       	ldi	r22, 0xFF	; 255
    1c6a:	7f ef       	ldi	r23, 0xFF	; 255
    1c6c:	c5 01       	movw	r24, r10
    1c6e:	0e 94 98 10 	call	0x2130	; 0x2130 <strnlen_P>
    1c72:	4c 01       	movw	r8, r24
    1c74:	f3 2d       	mov	r31, r3
    1c76:	f0 68       	ori	r31, 0x80	; 128
    1c78:	3f 2e       	mov	r3, r31
    1c7a:	82 01       	movw	r16, r4
    1c7c:	33 fc       	sbrc	r3, 3
    1c7e:	1b c0       	rjmp	.+54     	; 0x1cb6 <vfprintf+0x1c2>
    1c80:	82 2d       	mov	r24, r2
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	88 16       	cp	r8, r24
    1c86:	99 06       	cpc	r9, r25
    1c88:	b0 f4       	brcc	.+44     	; 0x1cb6 <vfprintf+0x1c2>
    1c8a:	b6 01       	movw	r22, r12
    1c8c:	80 e2       	ldi	r24, 0x20	; 32
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	0e 94 c5 10 	call	0x218a	; 0x218a <fputc>
    1c94:	2a 94       	dec	r2
    1c96:	f4 cf       	rjmp	.-24     	; 0x1c80 <vfprintf+0x18c>
    1c98:	f5 01       	movw	r30, r10
    1c9a:	37 fc       	sbrc	r3, 7
    1c9c:	85 91       	lpm	r24, Z+
    1c9e:	37 fe       	sbrs	r3, 7
    1ca0:	81 91       	ld	r24, Z+
    1ca2:	5f 01       	movw	r10, r30
    1ca4:	b6 01       	movw	r22, r12
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	0e 94 c5 10 	call	0x218a	; 0x218a <fputc>
    1cac:	21 10       	cpse	r2, r1
    1cae:	2a 94       	dec	r2
    1cb0:	21 e0       	ldi	r18, 0x01	; 1
    1cb2:	82 1a       	sub	r8, r18
    1cb4:	91 08       	sbc	r9, r1
    1cb6:	81 14       	cp	r8, r1
    1cb8:	91 04       	cpc	r9, r1
    1cba:	71 f7       	brne	.-36     	; 0x1c98 <vfprintf+0x1a4>
    1cbc:	e8 c0       	rjmp	.+464    	; 0x1e8e <vfprintf+0x39a>
    1cbe:	84 36       	cpi	r24, 0x64	; 100
    1cc0:	11 f0       	breq	.+4      	; 0x1cc6 <vfprintf+0x1d2>
    1cc2:	89 36       	cpi	r24, 0x69	; 105
    1cc4:	41 f5       	brne	.+80     	; 0x1d16 <vfprintf+0x222>
    1cc6:	f8 01       	movw	r30, r16
    1cc8:	37 fe       	sbrs	r3, 7
    1cca:	07 c0       	rjmp	.+14     	; 0x1cda <vfprintf+0x1e6>
    1ccc:	60 81       	ld	r22, Z
    1cce:	71 81       	ldd	r23, Z+1	; 0x01
    1cd0:	82 81       	ldd	r24, Z+2	; 0x02
    1cd2:	93 81       	ldd	r25, Z+3	; 0x03
    1cd4:	0c 5f       	subi	r16, 0xFC	; 252
    1cd6:	1f 4f       	sbci	r17, 0xFF	; 255
    1cd8:	08 c0       	rjmp	.+16     	; 0x1cea <vfprintf+0x1f6>
    1cda:	60 81       	ld	r22, Z
    1cdc:	71 81       	ldd	r23, Z+1	; 0x01
    1cde:	07 2e       	mov	r0, r23
    1ce0:	00 0c       	add	r0, r0
    1ce2:	88 0b       	sbc	r24, r24
    1ce4:	99 0b       	sbc	r25, r25
    1ce6:	0e 5f       	subi	r16, 0xFE	; 254
    1ce8:	1f 4f       	sbci	r17, 0xFF	; 255
    1cea:	f3 2d       	mov	r31, r3
    1cec:	ff 76       	andi	r31, 0x6F	; 111
    1cee:	3f 2e       	mov	r3, r31
    1cf0:	97 ff       	sbrs	r25, 7
    1cf2:	09 c0       	rjmp	.+18     	; 0x1d06 <vfprintf+0x212>
    1cf4:	90 95       	com	r25
    1cf6:	80 95       	com	r24
    1cf8:	70 95       	com	r23
    1cfa:	61 95       	neg	r22
    1cfc:	7f 4f       	sbci	r23, 0xFF	; 255
    1cfe:	8f 4f       	sbci	r24, 0xFF	; 255
    1d00:	9f 4f       	sbci	r25, 0xFF	; 255
    1d02:	f0 68       	ori	r31, 0x80	; 128
    1d04:	3f 2e       	mov	r3, r31
    1d06:	2a e0       	ldi	r18, 0x0A	; 10
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	a3 01       	movw	r20, r6
    1d0c:	0e 94 01 11 	call	0x2202	; 0x2202 <__ultoa_invert>
    1d10:	88 2e       	mov	r8, r24
    1d12:	86 18       	sub	r8, r6
    1d14:	45 c0       	rjmp	.+138    	; 0x1da0 <vfprintf+0x2ac>
    1d16:	85 37       	cpi	r24, 0x75	; 117
    1d18:	31 f4       	brne	.+12     	; 0x1d26 <vfprintf+0x232>
    1d1a:	23 2d       	mov	r18, r3
    1d1c:	2f 7e       	andi	r18, 0xEF	; 239
    1d1e:	b2 2e       	mov	r11, r18
    1d20:	2a e0       	ldi	r18, 0x0A	; 10
    1d22:	30 e0       	ldi	r19, 0x00	; 0
    1d24:	25 c0       	rjmp	.+74     	; 0x1d70 <vfprintf+0x27c>
    1d26:	93 2d       	mov	r25, r3
    1d28:	99 7f       	andi	r25, 0xF9	; 249
    1d2a:	b9 2e       	mov	r11, r25
    1d2c:	8f 36       	cpi	r24, 0x6F	; 111
    1d2e:	c1 f0       	breq	.+48     	; 0x1d60 <vfprintf+0x26c>
    1d30:	18 f4       	brcc	.+6      	; 0x1d38 <vfprintf+0x244>
    1d32:	88 35       	cpi	r24, 0x58	; 88
    1d34:	79 f0       	breq	.+30     	; 0x1d54 <vfprintf+0x260>
    1d36:	b5 c0       	rjmp	.+362    	; 0x1ea2 <vfprintf+0x3ae>
    1d38:	80 37       	cpi	r24, 0x70	; 112
    1d3a:	19 f0       	breq	.+6      	; 0x1d42 <vfprintf+0x24e>
    1d3c:	88 37       	cpi	r24, 0x78	; 120
    1d3e:	21 f0       	breq	.+8      	; 0x1d48 <vfprintf+0x254>
    1d40:	b0 c0       	rjmp	.+352    	; 0x1ea2 <vfprintf+0x3ae>
    1d42:	e9 2f       	mov	r30, r25
    1d44:	e0 61       	ori	r30, 0x10	; 16
    1d46:	be 2e       	mov	r11, r30
    1d48:	b4 fe       	sbrs	r11, 4
    1d4a:	0d c0       	rjmp	.+26     	; 0x1d66 <vfprintf+0x272>
    1d4c:	fb 2d       	mov	r31, r11
    1d4e:	f4 60       	ori	r31, 0x04	; 4
    1d50:	bf 2e       	mov	r11, r31
    1d52:	09 c0       	rjmp	.+18     	; 0x1d66 <vfprintf+0x272>
    1d54:	34 fe       	sbrs	r3, 4
    1d56:	0a c0       	rjmp	.+20     	; 0x1d6c <vfprintf+0x278>
    1d58:	29 2f       	mov	r18, r25
    1d5a:	26 60       	ori	r18, 0x06	; 6
    1d5c:	b2 2e       	mov	r11, r18
    1d5e:	06 c0       	rjmp	.+12     	; 0x1d6c <vfprintf+0x278>
    1d60:	28 e0       	ldi	r18, 0x08	; 8
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	05 c0       	rjmp	.+10     	; 0x1d70 <vfprintf+0x27c>
    1d66:	20 e1       	ldi	r18, 0x10	; 16
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	02 c0       	rjmp	.+4      	; 0x1d70 <vfprintf+0x27c>
    1d6c:	20 e1       	ldi	r18, 0x10	; 16
    1d6e:	32 e0       	ldi	r19, 0x02	; 2
    1d70:	f8 01       	movw	r30, r16
    1d72:	b7 fe       	sbrs	r11, 7
    1d74:	07 c0       	rjmp	.+14     	; 0x1d84 <vfprintf+0x290>
    1d76:	60 81       	ld	r22, Z
    1d78:	71 81       	ldd	r23, Z+1	; 0x01
    1d7a:	82 81       	ldd	r24, Z+2	; 0x02
    1d7c:	93 81       	ldd	r25, Z+3	; 0x03
    1d7e:	0c 5f       	subi	r16, 0xFC	; 252
    1d80:	1f 4f       	sbci	r17, 0xFF	; 255
    1d82:	06 c0       	rjmp	.+12     	; 0x1d90 <vfprintf+0x29c>
    1d84:	60 81       	ld	r22, Z
    1d86:	71 81       	ldd	r23, Z+1	; 0x01
    1d88:	80 e0       	ldi	r24, 0x00	; 0
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	0e 5f       	subi	r16, 0xFE	; 254
    1d8e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d90:	a3 01       	movw	r20, r6
    1d92:	0e 94 01 11 	call	0x2202	; 0x2202 <__ultoa_invert>
    1d96:	88 2e       	mov	r8, r24
    1d98:	86 18       	sub	r8, r6
    1d9a:	fb 2d       	mov	r31, r11
    1d9c:	ff 77       	andi	r31, 0x7F	; 127
    1d9e:	3f 2e       	mov	r3, r31
    1da0:	36 fe       	sbrs	r3, 6
    1da2:	0d c0       	rjmp	.+26     	; 0x1dbe <vfprintf+0x2ca>
    1da4:	23 2d       	mov	r18, r3
    1da6:	2e 7f       	andi	r18, 0xFE	; 254
    1da8:	a2 2e       	mov	r10, r18
    1daa:	89 14       	cp	r8, r9
    1dac:	58 f4       	brcc	.+22     	; 0x1dc4 <vfprintf+0x2d0>
    1dae:	34 fe       	sbrs	r3, 4
    1db0:	0b c0       	rjmp	.+22     	; 0x1dc8 <vfprintf+0x2d4>
    1db2:	32 fc       	sbrc	r3, 2
    1db4:	09 c0       	rjmp	.+18     	; 0x1dc8 <vfprintf+0x2d4>
    1db6:	83 2d       	mov	r24, r3
    1db8:	8e 7e       	andi	r24, 0xEE	; 238
    1dba:	a8 2e       	mov	r10, r24
    1dbc:	05 c0       	rjmp	.+10     	; 0x1dc8 <vfprintf+0x2d4>
    1dbe:	b8 2c       	mov	r11, r8
    1dc0:	a3 2c       	mov	r10, r3
    1dc2:	03 c0       	rjmp	.+6      	; 0x1dca <vfprintf+0x2d6>
    1dc4:	b8 2c       	mov	r11, r8
    1dc6:	01 c0       	rjmp	.+2      	; 0x1dca <vfprintf+0x2d6>
    1dc8:	b9 2c       	mov	r11, r9
    1dca:	a4 fe       	sbrs	r10, 4
    1dcc:	0f c0       	rjmp	.+30     	; 0x1dec <vfprintf+0x2f8>
    1dce:	fe 01       	movw	r30, r28
    1dd0:	e8 0d       	add	r30, r8
    1dd2:	f1 1d       	adc	r31, r1
    1dd4:	80 81       	ld	r24, Z
    1dd6:	80 33       	cpi	r24, 0x30	; 48
    1dd8:	21 f4       	brne	.+8      	; 0x1de2 <vfprintf+0x2ee>
    1dda:	9a 2d       	mov	r25, r10
    1ddc:	99 7e       	andi	r25, 0xE9	; 233
    1dde:	a9 2e       	mov	r10, r25
    1de0:	09 c0       	rjmp	.+18     	; 0x1df4 <vfprintf+0x300>
    1de2:	a2 fe       	sbrs	r10, 2
    1de4:	06 c0       	rjmp	.+12     	; 0x1df2 <vfprintf+0x2fe>
    1de6:	b3 94       	inc	r11
    1de8:	b3 94       	inc	r11
    1dea:	04 c0       	rjmp	.+8      	; 0x1df4 <vfprintf+0x300>
    1dec:	8a 2d       	mov	r24, r10
    1dee:	86 78       	andi	r24, 0x86	; 134
    1df0:	09 f0       	breq	.+2      	; 0x1df4 <vfprintf+0x300>
    1df2:	b3 94       	inc	r11
    1df4:	a3 fc       	sbrc	r10, 3
    1df6:	11 c0       	rjmp	.+34     	; 0x1e1a <vfprintf+0x326>
    1df8:	a0 fe       	sbrs	r10, 0
    1dfa:	06 c0       	rjmp	.+12     	; 0x1e08 <vfprintf+0x314>
    1dfc:	b2 14       	cp	r11, r2
    1dfe:	88 f4       	brcc	.+34     	; 0x1e22 <vfprintf+0x32e>
    1e00:	28 0c       	add	r2, r8
    1e02:	92 2c       	mov	r9, r2
    1e04:	9b 18       	sub	r9, r11
    1e06:	0e c0       	rjmp	.+28     	; 0x1e24 <vfprintf+0x330>
    1e08:	b2 14       	cp	r11, r2
    1e0a:	60 f4       	brcc	.+24     	; 0x1e24 <vfprintf+0x330>
    1e0c:	b6 01       	movw	r22, r12
    1e0e:	80 e2       	ldi	r24, 0x20	; 32
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	0e 94 c5 10 	call	0x218a	; 0x218a <fputc>
    1e16:	b3 94       	inc	r11
    1e18:	f7 cf       	rjmp	.-18     	; 0x1e08 <vfprintf+0x314>
    1e1a:	b2 14       	cp	r11, r2
    1e1c:	18 f4       	brcc	.+6      	; 0x1e24 <vfprintf+0x330>
    1e1e:	2b 18       	sub	r2, r11
    1e20:	02 c0       	rjmp	.+4      	; 0x1e26 <vfprintf+0x332>
    1e22:	98 2c       	mov	r9, r8
    1e24:	21 2c       	mov	r2, r1
    1e26:	a4 fe       	sbrs	r10, 4
    1e28:	10 c0       	rjmp	.+32     	; 0x1e4a <vfprintf+0x356>
    1e2a:	b6 01       	movw	r22, r12
    1e2c:	80 e3       	ldi	r24, 0x30	; 48
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	0e 94 c5 10 	call	0x218a	; 0x218a <fputc>
    1e34:	a2 fe       	sbrs	r10, 2
    1e36:	17 c0       	rjmp	.+46     	; 0x1e66 <vfprintf+0x372>
    1e38:	a1 fc       	sbrc	r10, 1
    1e3a:	03 c0       	rjmp	.+6      	; 0x1e42 <vfprintf+0x34e>
    1e3c:	88 e7       	ldi	r24, 0x78	; 120
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	02 c0       	rjmp	.+4      	; 0x1e46 <vfprintf+0x352>
    1e42:	88 e5       	ldi	r24, 0x58	; 88
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	b6 01       	movw	r22, r12
    1e48:	0c c0       	rjmp	.+24     	; 0x1e62 <vfprintf+0x36e>
    1e4a:	8a 2d       	mov	r24, r10
    1e4c:	86 78       	andi	r24, 0x86	; 134
    1e4e:	59 f0       	breq	.+22     	; 0x1e66 <vfprintf+0x372>
    1e50:	a1 fe       	sbrs	r10, 1
    1e52:	02 c0       	rjmp	.+4      	; 0x1e58 <vfprintf+0x364>
    1e54:	8b e2       	ldi	r24, 0x2B	; 43
    1e56:	01 c0       	rjmp	.+2      	; 0x1e5a <vfprintf+0x366>
    1e58:	80 e2       	ldi	r24, 0x20	; 32
    1e5a:	a7 fc       	sbrc	r10, 7
    1e5c:	8d e2       	ldi	r24, 0x2D	; 45
    1e5e:	b6 01       	movw	r22, r12
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	0e 94 c5 10 	call	0x218a	; 0x218a <fputc>
    1e66:	89 14       	cp	r8, r9
    1e68:	38 f4       	brcc	.+14     	; 0x1e78 <vfprintf+0x384>
    1e6a:	b6 01       	movw	r22, r12
    1e6c:	80 e3       	ldi	r24, 0x30	; 48
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	0e 94 c5 10 	call	0x218a	; 0x218a <fputc>
    1e74:	9a 94       	dec	r9
    1e76:	f7 cf       	rjmp	.-18     	; 0x1e66 <vfprintf+0x372>
    1e78:	8a 94       	dec	r8
    1e7a:	f3 01       	movw	r30, r6
    1e7c:	e8 0d       	add	r30, r8
    1e7e:	f1 1d       	adc	r31, r1
    1e80:	80 81       	ld	r24, Z
    1e82:	b6 01       	movw	r22, r12
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	0e 94 c5 10 	call	0x218a	; 0x218a <fputc>
    1e8a:	81 10       	cpse	r8, r1
    1e8c:	f5 cf       	rjmp	.-22     	; 0x1e78 <vfprintf+0x384>
    1e8e:	22 20       	and	r2, r2
    1e90:	09 f4       	brne	.+2      	; 0x1e94 <vfprintf+0x3a0>
    1e92:	42 ce       	rjmp	.-892    	; 0x1b18 <vfprintf+0x24>
    1e94:	b6 01       	movw	r22, r12
    1e96:	80 e2       	ldi	r24, 0x20	; 32
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	0e 94 c5 10 	call	0x218a	; 0x218a <fputc>
    1e9e:	2a 94       	dec	r2
    1ea0:	f6 cf       	rjmp	.-20     	; 0x1e8e <vfprintf+0x39a>
    1ea2:	f6 01       	movw	r30, r12
    1ea4:	86 81       	ldd	r24, Z+6	; 0x06
    1ea6:	97 81       	ldd	r25, Z+7	; 0x07
    1ea8:	02 c0       	rjmp	.+4      	; 0x1eae <vfprintf+0x3ba>
    1eaa:	8f ef       	ldi	r24, 0xFF	; 255
    1eac:	9f ef       	ldi	r25, 0xFF	; 255
    1eae:	2b 96       	adiw	r28, 0x0b	; 11
    1eb0:	e2 e1       	ldi	r30, 0x12	; 18
    1eb2:	0c 94 7b 11 	jmp	0x22f6	; 0x22f6 <__epilogue_restores__>

00001eb6 <calloc>:
    1eb6:	0f 93       	push	r16
    1eb8:	1f 93       	push	r17
    1eba:	cf 93       	push	r28
    1ebc:	df 93       	push	r29
    1ebe:	86 9f       	mul	r24, r22
    1ec0:	80 01       	movw	r16, r0
    1ec2:	87 9f       	mul	r24, r23
    1ec4:	10 0d       	add	r17, r0
    1ec6:	96 9f       	mul	r25, r22
    1ec8:	10 0d       	add	r17, r0
    1eca:	11 24       	eor	r1, r1
    1ecc:	c8 01       	movw	r24, r16
    1ece:	0e 94 77 0f 	call	0x1eee	; 0x1eee <malloc>
    1ed2:	ec 01       	movw	r28, r24
    1ed4:	00 97       	sbiw	r24, 0x00	; 0
    1ed6:	29 f0       	breq	.+10     	; 0x1ee2 <calloc+0x2c>
    1ed8:	a8 01       	movw	r20, r16
    1eda:	60 e0       	ldi	r22, 0x00	; 0
    1edc:	70 e0       	ldi	r23, 0x00	; 0
    1ede:	0e 94 a3 10 	call	0x2146	; 0x2146 <memset>
    1ee2:	ce 01       	movw	r24, r28
    1ee4:	df 91       	pop	r29
    1ee6:	cf 91       	pop	r28
    1ee8:	1f 91       	pop	r17
    1eea:	0f 91       	pop	r16
    1eec:	08 95       	ret

00001eee <malloc>:
    1eee:	0f 93       	push	r16
    1ef0:	1f 93       	push	r17
    1ef2:	cf 93       	push	r28
    1ef4:	df 93       	push	r29
    1ef6:	82 30       	cpi	r24, 0x02	; 2
    1ef8:	91 05       	cpc	r25, r1
    1efa:	10 f4       	brcc	.+4      	; 0x1f00 <malloc+0x12>
    1efc:	82 e0       	ldi	r24, 0x02	; 2
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	e0 91 fe 02 	lds	r30, 0x02FE	; 0x8002fe <__flp>
    1f04:	f0 91 ff 02 	lds	r31, 0x02FF	; 0x8002ff <__flp+0x1>
    1f08:	20 e0       	ldi	r18, 0x00	; 0
    1f0a:	30 e0       	ldi	r19, 0x00	; 0
    1f0c:	a0 e0       	ldi	r26, 0x00	; 0
    1f0e:	b0 e0       	ldi	r27, 0x00	; 0
    1f10:	30 97       	sbiw	r30, 0x00	; 0
    1f12:	19 f1       	breq	.+70     	; 0x1f5a <malloc+0x6c>
    1f14:	40 81       	ld	r20, Z
    1f16:	51 81       	ldd	r21, Z+1	; 0x01
    1f18:	02 81       	ldd	r16, Z+2	; 0x02
    1f1a:	13 81       	ldd	r17, Z+3	; 0x03
    1f1c:	48 17       	cp	r20, r24
    1f1e:	59 07       	cpc	r21, r25
    1f20:	c8 f0       	brcs	.+50     	; 0x1f54 <malloc+0x66>
    1f22:	84 17       	cp	r24, r20
    1f24:	95 07       	cpc	r25, r21
    1f26:	69 f4       	brne	.+26     	; 0x1f42 <malloc+0x54>
    1f28:	10 97       	sbiw	r26, 0x00	; 0
    1f2a:	31 f0       	breq	.+12     	; 0x1f38 <malloc+0x4a>
    1f2c:	12 96       	adiw	r26, 0x02	; 2
    1f2e:	0c 93       	st	X, r16
    1f30:	12 97       	sbiw	r26, 0x02	; 2
    1f32:	13 96       	adiw	r26, 0x03	; 3
    1f34:	1c 93       	st	X, r17
    1f36:	27 c0       	rjmp	.+78     	; 0x1f86 <malloc+0x98>
    1f38:	00 93 fe 02 	sts	0x02FE, r16	; 0x8002fe <__flp>
    1f3c:	10 93 ff 02 	sts	0x02FF, r17	; 0x8002ff <__flp+0x1>
    1f40:	22 c0       	rjmp	.+68     	; 0x1f86 <malloc+0x98>
    1f42:	21 15       	cp	r18, r1
    1f44:	31 05       	cpc	r19, r1
    1f46:	19 f0       	breq	.+6      	; 0x1f4e <malloc+0x60>
    1f48:	42 17       	cp	r20, r18
    1f4a:	53 07       	cpc	r21, r19
    1f4c:	18 f4       	brcc	.+6      	; 0x1f54 <malloc+0x66>
    1f4e:	9a 01       	movw	r18, r20
    1f50:	bd 01       	movw	r22, r26
    1f52:	ef 01       	movw	r28, r30
    1f54:	df 01       	movw	r26, r30
    1f56:	f8 01       	movw	r30, r16
    1f58:	db cf       	rjmp	.-74     	; 0x1f10 <malloc+0x22>
    1f5a:	21 15       	cp	r18, r1
    1f5c:	31 05       	cpc	r19, r1
    1f5e:	f9 f0       	breq	.+62     	; 0x1f9e <malloc+0xb0>
    1f60:	28 1b       	sub	r18, r24
    1f62:	39 0b       	sbc	r19, r25
    1f64:	24 30       	cpi	r18, 0x04	; 4
    1f66:	31 05       	cpc	r19, r1
    1f68:	80 f4       	brcc	.+32     	; 0x1f8a <malloc+0x9c>
    1f6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f6e:	61 15       	cp	r22, r1
    1f70:	71 05       	cpc	r23, r1
    1f72:	21 f0       	breq	.+8      	; 0x1f7c <malloc+0x8e>
    1f74:	fb 01       	movw	r30, r22
    1f76:	93 83       	std	Z+3, r25	; 0x03
    1f78:	82 83       	std	Z+2, r24	; 0x02
    1f7a:	04 c0       	rjmp	.+8      	; 0x1f84 <malloc+0x96>
    1f7c:	90 93 ff 02 	sts	0x02FF, r25	; 0x8002ff <__flp+0x1>
    1f80:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <__flp>
    1f84:	fe 01       	movw	r30, r28
    1f86:	32 96       	adiw	r30, 0x02	; 2
    1f88:	44 c0       	rjmp	.+136    	; 0x2012 <malloc+0x124>
    1f8a:	fe 01       	movw	r30, r28
    1f8c:	e2 0f       	add	r30, r18
    1f8e:	f3 1f       	adc	r31, r19
    1f90:	81 93       	st	Z+, r24
    1f92:	91 93       	st	Z+, r25
    1f94:	22 50       	subi	r18, 0x02	; 2
    1f96:	31 09       	sbc	r19, r1
    1f98:	39 83       	std	Y+1, r19	; 0x01
    1f9a:	28 83       	st	Y, r18
    1f9c:	3a c0       	rjmp	.+116    	; 0x2012 <malloc+0x124>
    1f9e:	20 91 fc 02 	lds	r18, 0x02FC	; 0x8002fc <__brkval>
    1fa2:	30 91 fd 02 	lds	r19, 0x02FD	; 0x8002fd <__brkval+0x1>
    1fa6:	23 2b       	or	r18, r19
    1fa8:	41 f4       	brne	.+16     	; 0x1fba <malloc+0xcc>
    1faa:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1fae:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1fb2:	30 93 fd 02 	sts	0x02FD, r19	; 0x8002fd <__brkval+0x1>
    1fb6:	20 93 fc 02 	sts	0x02FC, r18	; 0x8002fc <__brkval>
    1fba:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1fbe:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1fc2:	21 15       	cp	r18, r1
    1fc4:	31 05       	cpc	r19, r1
    1fc6:	41 f4       	brne	.+16     	; 0x1fd8 <malloc+0xea>
    1fc8:	2d b7       	in	r18, 0x3d	; 61
    1fca:	3e b7       	in	r19, 0x3e	; 62
    1fcc:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1fd0:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1fd4:	24 1b       	sub	r18, r20
    1fd6:	35 0b       	sbc	r19, r21
    1fd8:	e0 91 fc 02 	lds	r30, 0x02FC	; 0x8002fc <__brkval>
    1fdc:	f0 91 fd 02 	lds	r31, 0x02FD	; 0x8002fd <__brkval+0x1>
    1fe0:	e2 17       	cp	r30, r18
    1fe2:	f3 07       	cpc	r31, r19
    1fe4:	a0 f4       	brcc	.+40     	; 0x200e <malloc+0x120>
    1fe6:	2e 1b       	sub	r18, r30
    1fe8:	3f 0b       	sbc	r19, r31
    1fea:	28 17       	cp	r18, r24
    1fec:	39 07       	cpc	r19, r25
    1fee:	78 f0       	brcs	.+30     	; 0x200e <malloc+0x120>
    1ff0:	ac 01       	movw	r20, r24
    1ff2:	4e 5f       	subi	r20, 0xFE	; 254
    1ff4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ff6:	24 17       	cp	r18, r20
    1ff8:	35 07       	cpc	r19, r21
    1ffa:	48 f0       	brcs	.+18     	; 0x200e <malloc+0x120>
    1ffc:	4e 0f       	add	r20, r30
    1ffe:	5f 1f       	adc	r21, r31
    2000:	50 93 fd 02 	sts	0x02FD, r21	; 0x8002fd <__brkval+0x1>
    2004:	40 93 fc 02 	sts	0x02FC, r20	; 0x8002fc <__brkval>
    2008:	81 93       	st	Z+, r24
    200a:	91 93       	st	Z+, r25
    200c:	02 c0       	rjmp	.+4      	; 0x2012 <malloc+0x124>
    200e:	e0 e0       	ldi	r30, 0x00	; 0
    2010:	f0 e0       	ldi	r31, 0x00	; 0
    2012:	cf 01       	movw	r24, r30
    2014:	df 91       	pop	r29
    2016:	cf 91       	pop	r28
    2018:	1f 91       	pop	r17
    201a:	0f 91       	pop	r16
    201c:	08 95       	ret

0000201e <free>:
    201e:	cf 93       	push	r28
    2020:	df 93       	push	r29
    2022:	00 97       	sbiw	r24, 0x00	; 0
    2024:	09 f4       	brne	.+2      	; 0x2028 <free+0xa>
    2026:	81 c0       	rjmp	.+258    	; 0x212a <free+0x10c>
    2028:	fc 01       	movw	r30, r24
    202a:	32 97       	sbiw	r30, 0x02	; 2
    202c:	13 82       	std	Z+3, r1	; 0x03
    202e:	12 82       	std	Z+2, r1	; 0x02
    2030:	a0 91 fe 02 	lds	r26, 0x02FE	; 0x8002fe <__flp>
    2034:	b0 91 ff 02 	lds	r27, 0x02FF	; 0x8002ff <__flp+0x1>
    2038:	10 97       	sbiw	r26, 0x00	; 0
    203a:	81 f4       	brne	.+32     	; 0x205c <free+0x3e>
    203c:	20 81       	ld	r18, Z
    203e:	31 81       	ldd	r19, Z+1	; 0x01
    2040:	82 0f       	add	r24, r18
    2042:	93 1f       	adc	r25, r19
    2044:	20 91 fc 02 	lds	r18, 0x02FC	; 0x8002fc <__brkval>
    2048:	30 91 fd 02 	lds	r19, 0x02FD	; 0x8002fd <__brkval+0x1>
    204c:	28 17       	cp	r18, r24
    204e:	39 07       	cpc	r19, r25
    2050:	51 f5       	brne	.+84     	; 0x20a6 <free+0x88>
    2052:	f0 93 fd 02 	sts	0x02FD, r31	; 0x8002fd <__brkval+0x1>
    2056:	e0 93 fc 02 	sts	0x02FC, r30	; 0x8002fc <__brkval>
    205a:	67 c0       	rjmp	.+206    	; 0x212a <free+0x10c>
    205c:	ed 01       	movw	r28, r26
    205e:	20 e0       	ldi	r18, 0x00	; 0
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	ce 17       	cp	r28, r30
    2064:	df 07       	cpc	r29, r31
    2066:	40 f4       	brcc	.+16     	; 0x2078 <free+0x5a>
    2068:	4a 81       	ldd	r20, Y+2	; 0x02
    206a:	5b 81       	ldd	r21, Y+3	; 0x03
    206c:	9e 01       	movw	r18, r28
    206e:	41 15       	cp	r20, r1
    2070:	51 05       	cpc	r21, r1
    2072:	f1 f0       	breq	.+60     	; 0x20b0 <free+0x92>
    2074:	ea 01       	movw	r28, r20
    2076:	f5 cf       	rjmp	.-22     	; 0x2062 <free+0x44>
    2078:	d3 83       	std	Z+3, r29	; 0x03
    207a:	c2 83       	std	Z+2, r28	; 0x02
    207c:	40 81       	ld	r20, Z
    207e:	51 81       	ldd	r21, Z+1	; 0x01
    2080:	84 0f       	add	r24, r20
    2082:	95 1f       	adc	r25, r21
    2084:	c8 17       	cp	r28, r24
    2086:	d9 07       	cpc	r29, r25
    2088:	59 f4       	brne	.+22     	; 0x20a0 <free+0x82>
    208a:	88 81       	ld	r24, Y
    208c:	99 81       	ldd	r25, Y+1	; 0x01
    208e:	84 0f       	add	r24, r20
    2090:	95 1f       	adc	r25, r21
    2092:	02 96       	adiw	r24, 0x02	; 2
    2094:	91 83       	std	Z+1, r25	; 0x01
    2096:	80 83       	st	Z, r24
    2098:	8a 81       	ldd	r24, Y+2	; 0x02
    209a:	9b 81       	ldd	r25, Y+3	; 0x03
    209c:	93 83       	std	Z+3, r25	; 0x03
    209e:	82 83       	std	Z+2, r24	; 0x02
    20a0:	21 15       	cp	r18, r1
    20a2:	31 05       	cpc	r19, r1
    20a4:	29 f4       	brne	.+10     	; 0x20b0 <free+0x92>
    20a6:	f0 93 ff 02 	sts	0x02FF, r31	; 0x8002ff <__flp+0x1>
    20aa:	e0 93 fe 02 	sts	0x02FE, r30	; 0x8002fe <__flp>
    20ae:	3d c0       	rjmp	.+122    	; 0x212a <free+0x10c>
    20b0:	e9 01       	movw	r28, r18
    20b2:	fb 83       	std	Y+3, r31	; 0x03
    20b4:	ea 83       	std	Y+2, r30	; 0x02
    20b6:	49 91       	ld	r20, Y+
    20b8:	59 91       	ld	r21, Y+
    20ba:	c4 0f       	add	r28, r20
    20bc:	d5 1f       	adc	r29, r21
    20be:	ec 17       	cp	r30, r28
    20c0:	fd 07       	cpc	r31, r29
    20c2:	61 f4       	brne	.+24     	; 0x20dc <free+0xbe>
    20c4:	80 81       	ld	r24, Z
    20c6:	91 81       	ldd	r25, Z+1	; 0x01
    20c8:	84 0f       	add	r24, r20
    20ca:	95 1f       	adc	r25, r21
    20cc:	02 96       	adiw	r24, 0x02	; 2
    20ce:	e9 01       	movw	r28, r18
    20d0:	99 83       	std	Y+1, r25	; 0x01
    20d2:	88 83       	st	Y, r24
    20d4:	82 81       	ldd	r24, Z+2	; 0x02
    20d6:	93 81       	ldd	r25, Z+3	; 0x03
    20d8:	9b 83       	std	Y+3, r25	; 0x03
    20da:	8a 83       	std	Y+2, r24	; 0x02
    20dc:	e0 e0       	ldi	r30, 0x00	; 0
    20de:	f0 e0       	ldi	r31, 0x00	; 0
    20e0:	12 96       	adiw	r26, 0x02	; 2
    20e2:	8d 91       	ld	r24, X+
    20e4:	9c 91       	ld	r25, X
    20e6:	13 97       	sbiw	r26, 0x03	; 3
    20e8:	00 97       	sbiw	r24, 0x00	; 0
    20ea:	19 f0       	breq	.+6      	; 0x20f2 <free+0xd4>
    20ec:	fd 01       	movw	r30, r26
    20ee:	dc 01       	movw	r26, r24
    20f0:	f7 cf       	rjmp	.-18     	; 0x20e0 <free+0xc2>
    20f2:	8d 91       	ld	r24, X+
    20f4:	9c 91       	ld	r25, X
    20f6:	11 97       	sbiw	r26, 0x01	; 1
    20f8:	9d 01       	movw	r18, r26
    20fa:	2e 5f       	subi	r18, 0xFE	; 254
    20fc:	3f 4f       	sbci	r19, 0xFF	; 255
    20fe:	82 0f       	add	r24, r18
    2100:	93 1f       	adc	r25, r19
    2102:	20 91 fc 02 	lds	r18, 0x02FC	; 0x8002fc <__brkval>
    2106:	30 91 fd 02 	lds	r19, 0x02FD	; 0x8002fd <__brkval+0x1>
    210a:	28 17       	cp	r18, r24
    210c:	39 07       	cpc	r19, r25
    210e:	69 f4       	brne	.+26     	; 0x212a <free+0x10c>
    2110:	30 97       	sbiw	r30, 0x00	; 0
    2112:	29 f4       	brne	.+10     	; 0x211e <free+0x100>
    2114:	10 92 ff 02 	sts	0x02FF, r1	; 0x8002ff <__flp+0x1>
    2118:	10 92 fe 02 	sts	0x02FE, r1	; 0x8002fe <__flp>
    211c:	02 c0       	rjmp	.+4      	; 0x2122 <free+0x104>
    211e:	13 82       	std	Z+3, r1	; 0x03
    2120:	12 82       	std	Z+2, r1	; 0x02
    2122:	b0 93 fd 02 	sts	0x02FD, r27	; 0x8002fd <__brkval+0x1>
    2126:	a0 93 fc 02 	sts	0x02FC, r26	; 0x8002fc <__brkval>
    212a:	df 91       	pop	r29
    212c:	cf 91       	pop	r28
    212e:	08 95       	ret

00002130 <strnlen_P>:
    2130:	fc 01       	movw	r30, r24
    2132:	05 90       	lpm	r0, Z+
    2134:	61 50       	subi	r22, 0x01	; 1
    2136:	70 40       	sbci	r23, 0x00	; 0
    2138:	01 10       	cpse	r0, r1
    213a:	d8 f7       	brcc	.-10     	; 0x2132 <strnlen_P+0x2>
    213c:	80 95       	com	r24
    213e:	90 95       	com	r25
    2140:	8e 0f       	add	r24, r30
    2142:	9f 1f       	adc	r25, r31
    2144:	08 95       	ret

00002146 <memset>:
    2146:	dc 01       	movw	r26, r24
    2148:	01 c0       	rjmp	.+2      	; 0x214c <memset+0x6>
    214a:	6d 93       	st	X+, r22
    214c:	41 50       	subi	r20, 0x01	; 1
    214e:	50 40       	sbci	r21, 0x00	; 0
    2150:	e0 f7       	brcc	.-8      	; 0x214a <memset+0x4>
    2152:	08 95       	ret

00002154 <strnlen>:
    2154:	fc 01       	movw	r30, r24
    2156:	61 50       	subi	r22, 0x01	; 1
    2158:	70 40       	sbci	r23, 0x00	; 0
    215a:	01 90       	ld	r0, Z+
    215c:	01 10       	cpse	r0, r1
    215e:	d8 f7       	brcc	.-10     	; 0x2156 <strnlen+0x2>
    2160:	80 95       	com	r24
    2162:	90 95       	com	r25
    2164:	8e 0f       	add	r24, r30
    2166:	9f 1f       	adc	r25, r31
    2168:	08 95       	ret

0000216a <strrev>:
    216a:	dc 01       	movw	r26, r24
    216c:	fc 01       	movw	r30, r24
    216e:	67 2f       	mov	r22, r23
    2170:	71 91       	ld	r23, Z+
    2172:	77 23       	and	r23, r23
    2174:	e1 f7       	brne	.-8      	; 0x216e <strrev+0x4>
    2176:	32 97       	sbiw	r30, 0x02	; 2
    2178:	04 c0       	rjmp	.+8      	; 0x2182 <strrev+0x18>
    217a:	7c 91       	ld	r23, X
    217c:	6d 93       	st	X+, r22
    217e:	70 83       	st	Z, r23
    2180:	62 91       	ld	r22, -Z
    2182:	ae 17       	cp	r26, r30
    2184:	bf 07       	cpc	r27, r31
    2186:	c8 f3       	brcs	.-14     	; 0x217a <strrev+0x10>
    2188:	08 95       	ret

0000218a <fputc>:
    218a:	0f 93       	push	r16
    218c:	1f 93       	push	r17
    218e:	cf 93       	push	r28
    2190:	df 93       	push	r29
    2192:	fb 01       	movw	r30, r22
    2194:	23 81       	ldd	r18, Z+3	; 0x03
    2196:	21 fd       	sbrc	r18, 1
    2198:	03 c0       	rjmp	.+6      	; 0x21a0 <fputc+0x16>
    219a:	8f ef       	ldi	r24, 0xFF	; 255
    219c:	9f ef       	ldi	r25, 0xFF	; 255
    219e:	2c c0       	rjmp	.+88     	; 0x21f8 <fputc+0x6e>
    21a0:	22 ff       	sbrs	r18, 2
    21a2:	16 c0       	rjmp	.+44     	; 0x21d0 <fputc+0x46>
    21a4:	46 81       	ldd	r20, Z+6	; 0x06
    21a6:	57 81       	ldd	r21, Z+7	; 0x07
    21a8:	24 81       	ldd	r18, Z+4	; 0x04
    21aa:	35 81       	ldd	r19, Z+5	; 0x05
    21ac:	42 17       	cp	r20, r18
    21ae:	53 07       	cpc	r21, r19
    21b0:	44 f4       	brge	.+16     	; 0x21c2 <fputc+0x38>
    21b2:	a0 81       	ld	r26, Z
    21b4:	b1 81       	ldd	r27, Z+1	; 0x01
    21b6:	9d 01       	movw	r18, r26
    21b8:	2f 5f       	subi	r18, 0xFF	; 255
    21ba:	3f 4f       	sbci	r19, 0xFF	; 255
    21bc:	31 83       	std	Z+1, r19	; 0x01
    21be:	20 83       	st	Z, r18
    21c0:	8c 93       	st	X, r24
    21c2:	26 81       	ldd	r18, Z+6	; 0x06
    21c4:	37 81       	ldd	r19, Z+7	; 0x07
    21c6:	2f 5f       	subi	r18, 0xFF	; 255
    21c8:	3f 4f       	sbci	r19, 0xFF	; 255
    21ca:	37 83       	std	Z+7, r19	; 0x07
    21cc:	26 83       	std	Z+6, r18	; 0x06
    21ce:	14 c0       	rjmp	.+40     	; 0x21f8 <fputc+0x6e>
    21d0:	8b 01       	movw	r16, r22
    21d2:	ec 01       	movw	r28, r24
    21d4:	fb 01       	movw	r30, r22
    21d6:	00 84       	ldd	r0, Z+8	; 0x08
    21d8:	f1 85       	ldd	r31, Z+9	; 0x09
    21da:	e0 2d       	mov	r30, r0
    21dc:	09 95       	icall
    21de:	89 2b       	or	r24, r25
    21e0:	e1 f6       	brne	.-72     	; 0x219a <fputc+0x10>
    21e2:	d8 01       	movw	r26, r16
    21e4:	16 96       	adiw	r26, 0x06	; 6
    21e6:	8d 91       	ld	r24, X+
    21e8:	9c 91       	ld	r25, X
    21ea:	17 97       	sbiw	r26, 0x07	; 7
    21ec:	01 96       	adiw	r24, 0x01	; 1
    21ee:	17 96       	adiw	r26, 0x07	; 7
    21f0:	9c 93       	st	X, r25
    21f2:	8e 93       	st	-X, r24
    21f4:	16 97       	sbiw	r26, 0x06	; 6
    21f6:	ce 01       	movw	r24, r28
    21f8:	df 91       	pop	r29
    21fa:	cf 91       	pop	r28
    21fc:	1f 91       	pop	r17
    21fe:	0f 91       	pop	r16
    2200:	08 95       	ret

00002202 <__ultoa_invert>:
    2202:	fa 01       	movw	r30, r20
    2204:	aa 27       	eor	r26, r26
    2206:	28 30       	cpi	r18, 0x08	; 8
    2208:	51 f1       	breq	.+84     	; 0x225e <__ultoa_invert+0x5c>
    220a:	20 31       	cpi	r18, 0x10	; 16
    220c:	81 f1       	breq	.+96     	; 0x226e <__ultoa_invert+0x6c>
    220e:	e8 94       	clt
    2210:	6f 93       	push	r22
    2212:	6e 7f       	andi	r22, 0xFE	; 254
    2214:	6e 5f       	subi	r22, 0xFE	; 254
    2216:	7f 4f       	sbci	r23, 0xFF	; 255
    2218:	8f 4f       	sbci	r24, 0xFF	; 255
    221a:	9f 4f       	sbci	r25, 0xFF	; 255
    221c:	af 4f       	sbci	r26, 0xFF	; 255
    221e:	b1 e0       	ldi	r27, 0x01	; 1
    2220:	3e d0       	rcall	.+124    	; 0x229e <__ultoa_invert+0x9c>
    2222:	b4 e0       	ldi	r27, 0x04	; 4
    2224:	3c d0       	rcall	.+120    	; 0x229e <__ultoa_invert+0x9c>
    2226:	67 0f       	add	r22, r23
    2228:	78 1f       	adc	r23, r24
    222a:	89 1f       	adc	r24, r25
    222c:	9a 1f       	adc	r25, r26
    222e:	a1 1d       	adc	r26, r1
    2230:	68 0f       	add	r22, r24
    2232:	79 1f       	adc	r23, r25
    2234:	8a 1f       	adc	r24, r26
    2236:	91 1d       	adc	r25, r1
    2238:	a1 1d       	adc	r26, r1
    223a:	6a 0f       	add	r22, r26
    223c:	71 1d       	adc	r23, r1
    223e:	81 1d       	adc	r24, r1
    2240:	91 1d       	adc	r25, r1
    2242:	a1 1d       	adc	r26, r1
    2244:	20 d0       	rcall	.+64     	; 0x2286 <__ultoa_invert+0x84>
    2246:	09 f4       	brne	.+2      	; 0x224a <__ultoa_invert+0x48>
    2248:	68 94       	set
    224a:	3f 91       	pop	r19
    224c:	2a e0       	ldi	r18, 0x0A	; 10
    224e:	26 9f       	mul	r18, r22
    2250:	11 24       	eor	r1, r1
    2252:	30 19       	sub	r19, r0
    2254:	30 5d       	subi	r19, 0xD0	; 208
    2256:	31 93       	st	Z+, r19
    2258:	de f6       	brtc	.-74     	; 0x2210 <__ultoa_invert+0xe>
    225a:	cf 01       	movw	r24, r30
    225c:	08 95       	ret
    225e:	46 2f       	mov	r20, r22
    2260:	47 70       	andi	r20, 0x07	; 7
    2262:	40 5d       	subi	r20, 0xD0	; 208
    2264:	41 93       	st	Z+, r20
    2266:	b3 e0       	ldi	r27, 0x03	; 3
    2268:	0f d0       	rcall	.+30     	; 0x2288 <__ultoa_invert+0x86>
    226a:	c9 f7       	brne	.-14     	; 0x225e <__ultoa_invert+0x5c>
    226c:	f6 cf       	rjmp	.-20     	; 0x225a <__ultoa_invert+0x58>
    226e:	46 2f       	mov	r20, r22
    2270:	4f 70       	andi	r20, 0x0F	; 15
    2272:	40 5d       	subi	r20, 0xD0	; 208
    2274:	4a 33       	cpi	r20, 0x3A	; 58
    2276:	18 f0       	brcs	.+6      	; 0x227e <__ultoa_invert+0x7c>
    2278:	49 5d       	subi	r20, 0xD9	; 217
    227a:	31 fd       	sbrc	r19, 1
    227c:	40 52       	subi	r20, 0x20	; 32
    227e:	41 93       	st	Z+, r20
    2280:	02 d0       	rcall	.+4      	; 0x2286 <__ultoa_invert+0x84>
    2282:	a9 f7       	brne	.-22     	; 0x226e <__ultoa_invert+0x6c>
    2284:	ea cf       	rjmp	.-44     	; 0x225a <__ultoa_invert+0x58>
    2286:	b4 e0       	ldi	r27, 0x04	; 4
    2288:	a6 95       	lsr	r26
    228a:	97 95       	ror	r25
    228c:	87 95       	ror	r24
    228e:	77 95       	ror	r23
    2290:	67 95       	ror	r22
    2292:	ba 95       	dec	r27
    2294:	c9 f7       	brne	.-14     	; 0x2288 <__ultoa_invert+0x86>
    2296:	00 97       	sbiw	r24, 0x00	; 0
    2298:	61 05       	cpc	r22, r1
    229a:	71 05       	cpc	r23, r1
    229c:	08 95       	ret
    229e:	9b 01       	movw	r18, r22
    22a0:	ac 01       	movw	r20, r24
    22a2:	0a 2e       	mov	r0, r26
    22a4:	06 94       	lsr	r0
    22a6:	57 95       	ror	r21
    22a8:	47 95       	ror	r20
    22aa:	37 95       	ror	r19
    22ac:	27 95       	ror	r18
    22ae:	ba 95       	dec	r27
    22b0:	c9 f7       	brne	.-14     	; 0x22a4 <__ultoa_invert+0xa2>
    22b2:	62 0f       	add	r22, r18
    22b4:	73 1f       	adc	r23, r19
    22b6:	84 1f       	adc	r24, r20
    22b8:	95 1f       	adc	r25, r21
    22ba:	a0 1d       	adc	r26, r0
    22bc:	08 95       	ret

000022be <__prologue_saves__>:
    22be:	2f 92       	push	r2
    22c0:	3f 92       	push	r3
    22c2:	4f 92       	push	r4
    22c4:	5f 92       	push	r5
    22c6:	6f 92       	push	r6
    22c8:	7f 92       	push	r7
    22ca:	8f 92       	push	r8
    22cc:	9f 92       	push	r9
    22ce:	af 92       	push	r10
    22d0:	bf 92       	push	r11
    22d2:	cf 92       	push	r12
    22d4:	df 92       	push	r13
    22d6:	ef 92       	push	r14
    22d8:	ff 92       	push	r15
    22da:	0f 93       	push	r16
    22dc:	1f 93       	push	r17
    22de:	cf 93       	push	r28
    22e0:	df 93       	push	r29
    22e2:	cd b7       	in	r28, 0x3d	; 61
    22e4:	de b7       	in	r29, 0x3e	; 62
    22e6:	ca 1b       	sub	r28, r26
    22e8:	db 0b       	sbc	r29, r27
    22ea:	0f b6       	in	r0, 0x3f	; 63
    22ec:	f8 94       	cli
    22ee:	de bf       	out	0x3e, r29	; 62
    22f0:	0f be       	out	0x3f, r0	; 63
    22f2:	cd bf       	out	0x3d, r28	; 61
    22f4:	09 94       	ijmp

000022f6 <__epilogue_restores__>:
    22f6:	2a 88       	ldd	r2, Y+18	; 0x12
    22f8:	39 88       	ldd	r3, Y+17	; 0x11
    22fa:	48 88       	ldd	r4, Y+16	; 0x10
    22fc:	5f 84       	ldd	r5, Y+15	; 0x0f
    22fe:	6e 84       	ldd	r6, Y+14	; 0x0e
    2300:	7d 84       	ldd	r7, Y+13	; 0x0d
    2302:	8c 84       	ldd	r8, Y+12	; 0x0c
    2304:	9b 84       	ldd	r9, Y+11	; 0x0b
    2306:	aa 84       	ldd	r10, Y+10	; 0x0a
    2308:	b9 84       	ldd	r11, Y+9	; 0x09
    230a:	c8 84       	ldd	r12, Y+8	; 0x08
    230c:	df 80       	ldd	r13, Y+7	; 0x07
    230e:	ee 80       	ldd	r14, Y+6	; 0x06
    2310:	fd 80       	ldd	r15, Y+5	; 0x05
    2312:	0c 81       	ldd	r16, Y+4	; 0x04
    2314:	1b 81       	ldd	r17, Y+3	; 0x03
    2316:	aa 81       	ldd	r26, Y+2	; 0x02
    2318:	b9 81       	ldd	r27, Y+1	; 0x01
    231a:	ce 0f       	add	r28, r30
    231c:	d1 1d       	adc	r29, r1
    231e:	0f b6       	in	r0, 0x3f	; 63
    2320:	f8 94       	cli
    2322:	de bf       	out	0x3e, r29	; 62
    2324:	0f be       	out	0x3f, r0	; 63
    2326:	cd bf       	out	0x3d, r28	; 61
    2328:	ed 01       	movw	r28, r26
    232a:	08 95       	ret

0000232c <_exit>:
    232c:	f8 94       	cli

0000232e <__stop_program>:
    232e:	ff cf       	rjmp	.-2      	; 0x232e <__stop_program>
