
TestYolo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000194  00800100  00002558  000025ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002558  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c6  00800294  00800294  00002780  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002780  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000027dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000340  00000000  00000000  00002818  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003c4b  00000000  00000000  00002b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000169f  00000000  00000000  000067a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b67  00000000  00000000  00007e42  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008c8  00000000  00000000  000099ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000dbb  00000000  00000000  0000a274  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000223f  00000000  00000000  0000b02f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b0  00000000  00000000  0000d26e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cb 01 	jmp	0x396	; 0x396 <__ctors_end>
       4:	0c 94 3c 02 	jmp	0x478	; 0x478 <__vector_1>
       8:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
       c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      10:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      14:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      18:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      1c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      20:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      24:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      28:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      2c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      30:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      34:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      38:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      3c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      40:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      44:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      48:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      4c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      50:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      54:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      58:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      5c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      60:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      64:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      68:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      6c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      70:	08 4a       	sbci	r16, 0xA8	; 168
      72:	d7 3b       	cpi	r29, 0xB7	; 183
      74:	3b ce       	rjmp	.-906    	; 0xfffffcec <__eeprom_end+0xff7efcec>
      76:	01 6e       	ori	r16, 0xE1	; 225
      78:	84 bc       	out	0x24, r8	; 36
      7a:	bf fd       	.word	0xfdbf	; ????
      7c:	c1 2f       	mov	r28, r17
      7e:	3d 6c       	ori	r19, 0xCD	; 205
      80:	74 31       	cpi	r23, 0x14	; 20
      82:	9a bd       	out	0x2a, r25	; 42
      84:	56 83       	std	Z+6, r21	; 0x06
      86:	3d da       	rcall	.-2950   	; 0xfffff502 <__eeprom_end+0xff7ef502>
      88:	3d 00       	.word	0x003d	; ????
      8a:	c7 7f       	andi	r28, 0xF7	; 247
      8c:	11 be       	out	0x31, r1	; 49
      8e:	d9 e4       	ldi	r29, 0x49	; 73
      90:	bb 4c       	sbci	r27, 0xCB	; 203
      92:	3e 91       	ld	r19, -X
      94:	6b aa       	std	Y+51, r6	; 0x33
      96:	aa be       	out	0x3a, r10	; 58
      98:	00 00       	nop
      9a:	00 80       	ld	r0, Z
      9c:	3f 00       	.word	0x003f	; ????

0000009e <__trampolines_end>:
	...
      a6:	00 06       	cpc	r0, r16
      a8:	5f 5f       	subi	r21, 0xFF	; 255
      aa:	06 00       	.word	0x0006	; ????
      ac:	00 00       	nop
      ae:	00 07       	cpc	r16, r16
      b0:	07 00       	.word	0x0007	; ????
      b2:	07 07       	cpc	r16, r23
      b4:	00 00       	nop
      b6:	14 7f       	andi	r17, 0xF4	; 244
      b8:	7f 14       	cp	r7, r15
      ba:	7f 7f       	andi	r23, 0xFF	; 255
      bc:	14 00       	.word	0x0014	; ????
      be:	24 2e       	mov	r2, r20
      c0:	6b 6b       	ori	r22, 0xBB	; 187
      c2:	3a 12       	cpse	r3, r26
      c4:	00 00       	nop
      c6:	46 66       	ori	r20, 0x66	; 102
      c8:	30 18       	sub	r3, r0
      ca:	0c 66       	ori	r16, 0x6C	; 108
      cc:	62 00       	.word	0x0062	; ????
      ce:	30 7a       	andi	r19, 0xA0	; 160
      d0:	4f 5d       	subi	r20, 0xDF	; 223
      d2:	37 7a       	andi	r19, 0xA7	; 167
      d4:	48 00       	.word	0x0048	; ????
      d6:	04 07       	cpc	r16, r20
      d8:	03 00       	.word	0x0003	; ????
      da:	00 00       	nop
      dc:	00 00       	nop
      de:	00 1c       	adc	r0, r0
      e0:	3e 63       	ori	r19, 0x3E	; 62
      e2:	41 00       	.word	0x0041	; ????
      e4:	00 00       	nop
      e6:	00 41       	sbci	r16, 0x10	; 16
      e8:	63 3e       	cpi	r22, 0xE3	; 227
      ea:	1c 00       	.word	0x001c	; ????
      ec:	00 00       	nop
      ee:	08 2a       	or	r0, r24
      f0:	3e 1c       	adc	r3, r14
      f2:	1c 3e       	cpi	r17, 0xEC	; 236
      f4:	2a 08       	sbc	r2, r10
      f6:	08 08       	sbc	r0, r8
      f8:	3e 3e       	cpi	r19, 0xEE	; 238
      fa:	08 08       	sbc	r0, r8
      fc:	00 00       	nop
      fe:	00 a0       	ldd	r0, Z+32	; 0x20
     100:	e0 60       	ori	r30, 0x00	; 0
     102:	00 00       	nop
     104:	00 00       	nop
     106:	08 08       	sbc	r0, r8
     108:	08 08       	sbc	r0, r8
     10a:	08 08       	sbc	r0, r8
     10c:	00 00       	nop
     10e:	00 00       	nop
     110:	60 60       	ori	r22, 0x00	; 0
     112:	00 00       	nop
     114:	00 00       	nop
     116:	60 30       	cpi	r22, 0x00	; 0
     118:	18 0c       	add	r1, r8
     11a:	06 03       	mulsu	r16, r22
     11c:	01 00       	.word	0x0001	; ????
     11e:	3e 7f       	andi	r19, 0xFE	; 254
     120:	59 4d       	sbci	r21, 0xD9	; 217
     122:	7f 3e       	cpi	r23, 0xEF	; 239
     124:	00 00       	nop
     126:	42 42       	sbci	r20, 0x22	; 34
     128:	7f 7f       	andi	r23, 0xFF	; 255
     12a:	40 40       	sbci	r20, 0x00	; 0
     12c:	00 00       	nop
     12e:	62 73       	andi	r22, 0x32	; 50
     130:	59 49       	sbci	r21, 0x99	; 153
     132:	6f 66       	ori	r22, 0x6F	; 111
     134:	00 00       	nop
     136:	22 63       	ori	r18, 0x32	; 50
     138:	49 49       	sbci	r20, 0x99	; 153
     13a:	7f 36       	cpi	r23, 0x6F	; 111
     13c:	00 00       	nop
     13e:	18 1c       	adc	r1, r8
     140:	16 13       	cpse	r17, r22
     142:	7f 7f       	andi	r23, 0xFF	; 255
     144:	10 00       	.word	0x0010	; ????
     146:	27 67       	ori	r18, 0x77	; 119
     148:	45 45       	sbci	r20, 0x55	; 85
     14a:	7d 39       	cpi	r23, 0x9D	; 157
     14c:	00 00       	nop
     14e:	3c 7e       	andi	r19, 0xEC	; 236
     150:	4b 49       	sbci	r20, 0x9B	; 155
     152:	79 30       	cpi	r23, 0x09	; 9
     154:	00 00       	nop
     156:	03 63       	ori	r16, 0x33	; 51
     158:	71 19       	sub	r23, r1
     15a:	0f 07       	cpc	r16, r31
     15c:	00 00       	nop
     15e:	36 7f       	andi	r19, 0xF6	; 246
     160:	49 49       	sbci	r20, 0x99	; 153
     162:	7f 36       	cpi	r23, 0x6F	; 111
     164:	00 00       	nop
     166:	06 4f       	sbci	r16, 0xF6	; 246
     168:	49 69       	ori	r20, 0x99	; 153
     16a:	3f 1e       	adc	r3, r31
     16c:	00 00       	nop
     16e:	00 00       	nop
     170:	6c 6c       	ori	r22, 0xCC	; 204
     172:	00 00       	nop
     174:	00 00       	nop
     176:	00 a0       	ldd	r0, Z+32	; 0x20
     178:	ec 6c       	ori	r30, 0xCC	; 204
     17a:	00 00       	nop
     17c:	00 00       	nop
     17e:	08 1c       	adc	r0, r8
     180:	36 63       	ori	r19, 0x36	; 54
     182:	41 00       	.word	0x0041	; ????
     184:	00 00       	nop
     186:	14 14       	cp	r1, r4
     188:	14 14       	cp	r1, r4
     18a:	14 14       	cp	r1, r4
     18c:	00 00       	nop
     18e:	00 41       	sbci	r16, 0x10	; 16
     190:	63 36       	cpi	r22, 0x63	; 99
     192:	1c 08       	sbc	r1, r12
     194:	00 00       	nop
     196:	02 03       	mulsu	r16, r18
     198:	51 59       	subi	r21, 0x91	; 145
     19a:	0f 06       	cpc	r0, r31
     19c:	00 00       	nop
     19e:	3e 7f       	andi	r19, 0xFE	; 254
     1a0:	41 5d       	subi	r20, 0xD1	; 209
     1a2:	5d 1f       	adc	r21, r29
     1a4:	1e 00       	.word	0x001e	; ????
     1a6:	7c 7e       	andi	r23, 0xEC	; 236
     1a8:	13 13       	cpse	r17, r19
     1aa:	7e 7c       	andi	r23, 0xCE	; 206
     1ac:	00 00       	nop
     1ae:	41 7f       	andi	r20, 0xF1	; 241
     1b0:	7f 49       	sbci	r23, 0x9F	; 159
     1b2:	49 7f       	andi	r20, 0xF9	; 249
     1b4:	36 00       	.word	0x0036	; ????
     1b6:	1c 3e       	cpi	r17, 0xEC	; 236
     1b8:	63 41       	sbci	r22, 0x13	; 19
     1ba:	41 63       	ori	r20, 0x31	; 49
     1bc:	22 00       	.word	0x0022	; ????
     1be:	41 7f       	andi	r20, 0xF1	; 241
     1c0:	7f 41       	sbci	r23, 0x1F	; 31
     1c2:	63 7f       	andi	r22, 0xF3	; 243
     1c4:	1c 00       	.word	0x001c	; ????
     1c6:	41 7f       	andi	r20, 0xF1	; 241
     1c8:	7f 49       	sbci	r23, 0x9F	; 159
     1ca:	5d 41       	sbci	r21, 0x1D	; 29
     1cc:	63 00       	.word	0x0063	; ????
     1ce:	41 7f       	andi	r20, 0xF1	; 241
     1d0:	7f 49       	sbci	r23, 0x9F	; 159
     1d2:	1d 01       	movw	r2, r26
     1d4:	03 00       	.word	0x0003	; ????
     1d6:	1c 3e       	cpi	r17, 0xEC	; 236
     1d8:	63 41       	sbci	r22, 0x13	; 19
     1da:	51 73       	andi	r21, 0x31	; 49
     1dc:	72 00       	.word	0x0072	; ????
     1de:	7f 7f       	andi	r23, 0xFF	; 255
     1e0:	08 08       	sbc	r0, r8
     1e2:	7f 7f       	andi	r23, 0xFF	; 255
     1e4:	00 00       	nop
     1e6:	00 41       	sbci	r16, 0x10	; 16
     1e8:	7f 7f       	andi	r23, 0xFF	; 255
     1ea:	41 00       	.word	0x0041	; ????
     1ec:	00 00       	nop
     1ee:	30 70       	andi	r19, 0x00	; 0
     1f0:	40 41       	sbci	r20, 0x10	; 16
     1f2:	7f 3f       	cpi	r23, 0xFF	; 255
     1f4:	01 00       	.word	0x0001	; ????
     1f6:	41 7f       	andi	r20, 0xF1	; 241
     1f8:	7f 08       	sbc	r7, r15
     1fa:	1c 77       	andi	r17, 0x7C	; 124
     1fc:	63 00       	.word	0x0063	; ????
     1fe:	41 7f       	andi	r20, 0xF1	; 241
     200:	7f 41       	sbci	r23, 0x1F	; 31
     202:	40 60       	ori	r20, 0x00	; 0
     204:	70 00       	.word	0x0070	; ????
     206:	7f 7f       	andi	r23, 0xFF	; 255
     208:	06 0c       	add	r0, r6
     20a:	06 7f       	andi	r16, 0xF6	; 246
     20c:	7f 00       	.word	0x007f	; ????
     20e:	7f 7f       	andi	r23, 0xFF	; 255
     210:	06 0c       	add	r0, r6
     212:	18 7f       	andi	r17, 0xF8	; 248
     214:	7f 00       	.word	0x007f	; ????
     216:	1c 3e       	cpi	r17, 0xEC	; 236
     218:	63 41       	sbci	r22, 0x13	; 19
     21a:	63 3e       	cpi	r22, 0xE3	; 227
     21c:	1c 00       	.word	0x001c	; ????
     21e:	41 7f       	andi	r20, 0xF1	; 241
     220:	7f 49       	sbci	r23, 0x9F	; 159
     222:	09 0f       	add	r16, r25
     224:	06 00       	.word	0x0006	; ????
     226:	1e 3f       	cpi	r17, 0xFE	; 254
     228:	21 71       	andi	r18, 0x11	; 17
     22a:	7f 5e       	subi	r23, 0xEF	; 239
     22c:	00 00       	nop
     22e:	41 7f       	andi	r20, 0xF1	; 241
     230:	7f 19       	sub	r23, r15
     232:	39 6f       	ori	r19, 0xF9	; 249
     234:	46 00       	.word	0x0046	; ????
     236:	26 67       	ori	r18, 0x76	; 118
     238:	4d 59       	subi	r20, 0x9D	; 157
     23a:	7b 32       	cpi	r23, 0x2B	; 43
     23c:	00 00       	nop
     23e:	03 41       	sbci	r16, 0x13	; 19
     240:	7f 7f       	andi	r23, 0xFF	; 255
     242:	41 03       	mulsu	r20, r17
     244:	00 00       	nop
     246:	7f 7f       	andi	r23, 0xFF	; 255
     248:	40 40       	sbci	r20, 0x00	; 0
     24a:	7f 7f       	andi	r23, 0xFF	; 255
     24c:	00 00       	nop
     24e:	1f 3f       	cpi	r17, 0xFF	; 255
     250:	60 60       	ori	r22, 0x00	; 0
     252:	3f 1f       	adc	r19, r31
     254:	00 00       	nop
     256:	7f 7f       	andi	r23, 0xFF	; 255
     258:	30 18       	sub	r3, r0
     25a:	30 7f       	andi	r19, 0xF0	; 240
     25c:	7f 00       	.word	0x007f	; ????
     25e:	63 77       	andi	r22, 0x73	; 115
     260:	1c 08       	sbc	r1, r12
     262:	1c 77       	andi	r17, 0x7C	; 124
     264:	63 00       	.word	0x0063	; ????
     266:	07 4f       	sbci	r16, 0xF7	; 247
     268:	78 78       	andi	r23, 0x88	; 136
     26a:	4f 07       	cpc	r20, r31
     26c:	00 00       	nop
     26e:	67 73       	andi	r22, 0x37	; 55
     270:	59 4d       	sbci	r21, 0xD9	; 217
     272:	47 63       	ori	r20, 0x37	; 55
     274:	71 00       	.word	0x0071	; ????
     276:	00 7f       	andi	r16, 0xF0	; 240
     278:	7f 41       	sbci	r23, 0x1F	; 31
     27a:	41 00       	.word	0x0041	; ????
     27c:	00 00       	nop
     27e:	01 03       	mulsu	r16, r17
     280:	06 0c       	add	r0, r6
     282:	18 30       	cpi	r17, 0x08	; 8
     284:	60 00       	.word	0x0060	; ????
     286:	00 41       	sbci	r16, 0x10	; 16
     288:	41 7f       	andi	r20, 0xF1	; 241
     28a:	7f 00       	.word	0x007f	; ????
     28c:	00 00       	nop
     28e:	08 0c       	add	r0, r8
     290:	06 03       	mulsu	r16, r22
     292:	06 0c       	add	r0, r6
     294:	08 00       	.word	0x0008	; ????
     296:	80 80       	ld	r8, Z
     298:	80 80       	ld	r8, Z
     29a:	80 80       	ld	r8, Z
     29c:	80 80       	ld	r8, Z
     29e:	00 00       	nop
     2a0:	03 07       	cpc	r16, r19
     2a2:	04 00       	.word	0x0004	; ????
     2a4:	00 00       	nop
     2a6:	20 74       	andi	r18, 0x40	; 64
     2a8:	54 54       	subi	r21, 0x44	; 68
     2aa:	3c 78       	andi	r19, 0x8C	; 140
     2ac:	40 00       	.word	0x0040	; ????
     2ae:	41 3f       	cpi	r20, 0xF1	; 241
     2b0:	7f 44       	sbci	r23, 0x4F	; 79
     2b2:	44 7c       	andi	r20, 0xC4	; 196
     2b4:	38 00       	.word	0x0038	; ????
     2b6:	38 7c       	andi	r19, 0xC8	; 200
     2b8:	44 44       	sbci	r20, 0x44	; 68
     2ba:	6c 28       	or	r6, r12
     2bc:	00 00       	nop
     2be:	30 78       	andi	r19, 0x80	; 128
     2c0:	48 49       	sbci	r20, 0x98	; 152
     2c2:	3f 7f       	andi	r19, 0xFF	; 255
     2c4:	40 00       	.word	0x0040	; ????
     2c6:	38 7c       	andi	r19, 0xC8	; 200
     2c8:	54 54       	subi	r21, 0x44	; 68
     2ca:	5c 18       	sub	r5, r12
     2cc:	00 00       	nop
     2ce:	48 7e       	andi	r20, 0xE8	; 232
     2d0:	7f 49       	sbci	r23, 0x9F	; 159
     2d2:	03 02       	muls	r16, r19
     2d4:	00 00       	nop
     2d6:	98 bc       	out	0x28, r9	; 40
     2d8:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2da:	f8 7c       	andi	r31, 0xC8	; 200
     2dc:	04 00       	.word	0x0004	; ????
     2de:	41 7f       	andi	r20, 0xF1	; 241
     2e0:	7f 08       	sbc	r7, r15
     2e2:	04 7c       	andi	r16, 0xC4	; 196
     2e4:	78 00       	.word	0x0078	; ????
     2e6:	00 44       	sbci	r16, 0x40	; 64
     2e8:	7d 7d       	andi	r23, 0xDD	; 221
     2ea:	40 00       	.word	0x0040	; ????
     2ec:	00 00       	nop
     2ee:	40 c4       	rjmp	.+2176   	; 0xb70 <build_node+0x40>
     2f0:	84 fd       	sbrc	r24, 4
     2f2:	7d 00       	.word	0x007d	; ????
     2f4:	00 00       	nop
     2f6:	41 7f       	andi	r20, 0xF1	; 241
     2f8:	7f 10       	cpse	r7, r15
     2fa:	38 6c       	ori	r19, 0xC8	; 200
     2fc:	44 00       	.word	0x0044	; ????
     2fe:	00 41       	sbci	r16, 0x10	; 16
     300:	7f 7f       	andi	r23, 0xFF	; 255
     302:	40 00       	.word	0x0040	; ????
     304:	00 00       	nop
     306:	7c 7c       	andi	r23, 0xCC	; 204
     308:	0c 18       	sub	r0, r12
     30a:	0c 7c       	andi	r16, 0xCC	; 204
     30c:	78 00       	.word	0x0078	; ????
     30e:	7c 7c       	andi	r23, 0xCC	; 204
     310:	04 04       	cpc	r0, r4
     312:	7c 78       	andi	r23, 0x8C	; 140
     314:	00 00       	nop
     316:	38 7c       	andi	r19, 0xC8	; 200
     318:	44 44       	sbci	r20, 0x44	; 68
     31a:	7c 38       	cpi	r23, 0x8C	; 140
     31c:	00 00       	nop
     31e:	84 fc       	sbrc	r8, 4
     320:	f8 a4       	ldd	r15, Y+40	; 0x28
     322:	24 3c       	cpi	r18, 0xC4	; 196
     324:	18 00       	.word	0x0018	; ????
     326:	18 3c       	cpi	r17, 0xC8	; 200
     328:	24 a4       	ldd	r2, Z+44	; 0x2c
     32a:	f8 fc       	.word	0xfcf8	; ????
     32c:	84 00       	.word	0x0084	; ????
     32e:	44 7c       	andi	r20, 0xC4	; 196
     330:	78 44       	sbci	r23, 0x48	; 72
     332:	1c 18       	sub	r1, r12
     334:	00 00       	nop
     336:	48 5c       	subi	r20, 0xC8	; 200
     338:	54 54       	subi	r21, 0x44	; 68
     33a:	74 24       	eor	r7, r4
     33c:	00 00       	nop
     33e:	00 04       	cpc	r0, r0
     340:	3e 7f       	andi	r19, 0xFE	; 254
     342:	44 24       	eor	r4, r4
     344:	00 00       	nop
     346:	3c 7c       	andi	r19, 0xCC	; 204
     348:	40 40       	sbci	r20, 0x00	; 0
     34a:	3c 7c       	andi	r19, 0xCC	; 204
     34c:	40 00       	.word	0x0040	; ????
     34e:	1c 3c       	cpi	r17, 0xCC	; 204
     350:	60 60       	ori	r22, 0x00	; 0
     352:	3c 1c       	adc	r3, r12
     354:	00 00       	nop
     356:	3c 7c       	andi	r19, 0xCC	; 204
     358:	60 30       	cpi	r22, 0x00	; 0
     35a:	60 7c       	andi	r22, 0xC0	; 192
     35c:	3c 00       	.word	0x003c	; ????
     35e:	44 6c       	ori	r20, 0xC4	; 196
     360:	38 10       	cpse	r3, r8
     362:	38 6c       	ori	r19, 0xC8	; 200
     364:	44 00       	.word	0x0044	; ????
     366:	9c bc       	out	0x2c, r9	; 44
     368:	a0 a0       	ldd	r10, Z+32	; 0x20
     36a:	fc 7c       	andi	r31, 0xCC	; 204
     36c:	00 00       	nop
     36e:	4c 64       	ori	r20, 0x4C	; 76
     370:	74 5c       	subi	r23, 0xC4	; 196
     372:	4c 64       	ori	r20, 0x4C	; 76
     374:	00 00       	nop
     376:	08 08       	sbc	r0, r8
     378:	3e 77       	andi	r19, 0x7E	; 126
     37a:	41 41       	sbci	r20, 0x11	; 17
     37c:	00 00       	nop
     37e:	00 00       	nop
     380:	00 77       	andi	r16, 0x70	; 112
     382:	77 00       	.word	0x0077	; ????
     384:	00 00       	nop
     386:	41 41       	sbci	r20, 0x11	; 17
     388:	77 3e       	cpi	r23, 0xE7	; 231
     38a:	08 08       	sbc	r0, r8
     38c:	00 00       	nop
     38e:	02 03       	mulsu	r16, r18
     390:	01 03       	mulsu	r16, r17
     392:	02 03       	mulsu	r16, r18
     394:	01 00       	.word	0x0001	; ????

00000396 <__ctors_end>:
     396:	11 24       	eor	r1, r1
     398:	1f be       	out	0x3f, r1	; 63
     39a:	cf ef       	ldi	r28, 0xFF	; 255
     39c:	d4 e0       	ldi	r29, 0x04	; 4
     39e:	de bf       	out	0x3e, r29	; 62
     3a0:	cd bf       	out	0x3d, r28	; 61

000003a2 <__do_copy_data>:
     3a2:	12 e0       	ldi	r17, 0x02	; 2
     3a4:	a0 e0       	ldi	r26, 0x00	; 0
     3a6:	b1 e0       	ldi	r27, 0x01	; 1
     3a8:	e8 e5       	ldi	r30, 0x58	; 88
     3aa:	f5 e2       	ldi	r31, 0x25	; 37
     3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <__do_copy_data+0x10>
     3ae:	05 90       	lpm	r0, Z+
     3b0:	0d 92       	st	X+, r0
     3b2:	a4 39       	cpi	r26, 0x94	; 148
     3b4:	b1 07       	cpc	r27, r17
     3b6:	d9 f7       	brne	.-10     	; 0x3ae <__do_copy_data+0xc>

000003b8 <__do_clear_bss>:
     3b8:	23 e0       	ldi	r18, 0x03	; 3
     3ba:	a4 e9       	ldi	r26, 0x94	; 148
     3bc:	b2 e0       	ldi	r27, 0x02	; 2
     3be:	01 c0       	rjmp	.+2      	; 0x3c2 <.do_clear_bss_start>

000003c0 <.do_clear_bss_loop>:
     3c0:	1d 92       	st	X+, r1

000003c2 <.do_clear_bss_start>:
     3c2:	aa 35       	cpi	r26, 0x5A	; 90
     3c4:	b2 07       	cpc	r27, r18
     3c6:	e1 f7       	brne	.-8      	; 0x3c0 <.do_clear_bss_loop>
     3c8:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <main>
     3cc:	0c 94 aa 12 	jmp	0x2554	; 0x2554 <_exit>

000003d0 <__bad_interrupt>:
     3d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003d4 <ADC_read>:
    uint8_t retreived_value = ext_ram1[adrs];
    if (retreived_value != 0b01010101) {
        printf("ADC error, ext_ram1[%4d] = %02X  \n\r", adrs, retreived_value);
    }
    else{
        printf("ADC success, ext_ram1[%4d] = %02X  \n\r", adrs, retreived_value);
     3d4:	80 68       	ori	r24, 0x80	; 128
     3d6:	e1 e0       	ldi	r30, 0x01	; 1
     3d8:	f4 e1       	ldi	r31, 0x14	; 20
     3da:	80 83       	st	Z, r24
     3dc:	86 ef       	ldi	r24, 0xF6	; 246
     3de:	8a 95       	dec	r24
     3e0:	f1 f7       	brne	.-4      	; 0x3de <ADC_read+0xa>
     3e2:	80 81       	ld	r24, Z
     3e4:	08 95       	ret

000003e6 <ADC_calibrate>:
     3e6:	e1 e0       	ldi	r30, 0x01	; 1
     3e8:	f4 e1       	ldi	r31, 0x14	; 20
     3ea:	20 e8       	ldi	r18, 0x80	; 128
     3ec:	20 83       	st	Z, r18
     3ee:	26 ef       	ldi	r18, 0xF6	; 246
     3f0:	2a 95       	dec	r18
     3f2:	f1 f7       	brne	.-4      	; 0x3f0 <ADC_calibrate+0xa>
     3f4:	20 81       	ld	r18, Z
     3f6:	30 e0       	ldi	r19, 0x00	; 0
     3f8:	dc 01       	movw	r26, r24
     3fa:	2d 93       	st	X+, r18
     3fc:	3c 93       	st	X, r19
     3fe:	21 e8       	ldi	r18, 0x81	; 129
     400:	20 83       	st	Z, r18
     402:	b6 ef       	ldi	r27, 0xF6	; 246
     404:	ba 95       	dec	r27
     406:	f1 f7       	brne	.-4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     408:	20 81       	ld	r18, Z
     40a:	30 e0       	ldi	r19, 0x00	; 0
     40c:	fc 01       	movw	r30, r24
     40e:	33 83       	std	Z+3, r19	; 0x03
     410:	22 83       	std	Z+2, r18	; 0x02
     412:	08 95       	ret

00000414 <ADC_timer_init>:
}


void ADC_timer_init(void) {

    DDRB|=(1<<PB0);  /*set OC0 pin as output*/
     414:	b8 9a       	sbi	0x17, 0	; 23

    TCCR0 |= (1<<WGM01) | (0<<WGM00);
     416:	83 b7       	in	r24, 0x33	; 51
     418:	88 60       	ori	r24, 0x08	; 8
     41a:	83 bf       	out	0x33, r24	; 51
    TCCR0 |= (1<<COM00);
     41c:	83 b7       	in	r24, 0x33	; 51
     41e:	80 61       	ori	r24, 0x10	; 16
     420:	83 bf       	out	0x33, r24	; 51
    TCCR0 |= (1<<CS00);
     422:	83 b7       	in	r24, 0x33	; 51
     424:	81 60       	ori	r24, 0x01	; 1
     426:	83 bf       	out	0x33, r24	; 51

    OCR0 = 0b00000001;
     428:	81 e0       	ldi	r24, 0x01	; 1
     42a:	81 bf       	out	0x31, r24	; 49
     42c:	08 95       	ret

0000042e <CAN_init>:
    for(uint8_t i = 0; i < message.data_length; i++){
        (message.data)[i] = mcp_read(MCP_RXB0DM +i + 16);
    }
    
    return message;
}
     42e:	cf 93       	push	r28
     430:	c8 2f       	mov	r28, r24
     432:	f8 94       	cli
     434:	85 b7       	in	r24, 0x35	; 53
     436:	82 60       	ori	r24, 0x02	; 2
     438:	85 bf       	out	0x35, r24	; 53
     43a:	85 b7       	in	r24, 0x35	; 53
     43c:	8e 7f       	andi	r24, 0xFE	; 254
     43e:	85 bf       	out	0x35, r24	; 53
     440:	8b b7       	in	r24, 0x3b	; 59
     442:	80 64       	ori	r24, 0x40	; 64
     444:	8b bf       	out	0x3b, r24	; 59
     446:	78 94       	sei
     448:	80 e8       	ldi	r24, 0x80	; 128
     44a:	0e 94 87 03 	call	0x70e	; 0x70e <mcp_init>
     44e:	61 e0       	ldi	r22, 0x01	; 1
     450:	8b e2       	ldi	r24, 0x2B	; 43
     452:	0e 94 4e 03 	call	0x69c	; 0x69c <mcp_write>
     456:	61 e8       	ldi	r22, 0x81	; 129
     458:	8a e2       	ldi	r24, 0x2A	; 42
     45a:	0e 94 4e 03 	call	0x69c	; 0x69c <mcp_write>
     45e:	6d ea       	ldi	r22, 0xAD	; 173
     460:	89 e2       	ldi	r24, 0x29	; 41
     462:	0e 94 4e 03 	call	0x69c	; 0x69c <mcp_write>
     466:	65 e0       	ldi	r22, 0x05	; 5
     468:	88 e2       	ldi	r24, 0x28	; 40
     46a:	0e 94 4e 03 	call	0x69c	; 0x69c <mcp_write>
     46e:	8c 2f       	mov	r24, r28
     470:	0e 94 64 03 	call	0x6c8	; 0x6c8 <mcp_set_mode>
     474:	cf 91       	pop	r28
     476:	08 95       	ret

00000478 <__vector_1>:
     478:	1f 92       	push	r1
     47a:	0f 92       	push	r0
     47c:	0f b6       	in	r0, 0x3f	; 63
     47e:	0f 92       	push	r0
     480:	11 24       	eor	r1, r1
     482:	8f 93       	push	r24
     484:	9f 93       	push	r25
     486:	81 e0       	ldi	r24, 0x01	; 1
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	90 93 95 02 	sts	0x0295, r25	; 0x800295 <__data_end+0x1>
     48e:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <__data_end>
     492:	9f 91       	pop	r25
     494:	8f 91       	pop	r24
     496:	0f 90       	pop	r0
     498:	0f be       	out	0x3f, r0	; 63
     49a:	0f 90       	pop	r0
     49c:	1f 90       	pop	r1
     49e:	18 95       	reti

000004a0 <CAN_message_transmission>:
     4a0:	0f 93       	push	r16
     4a2:	1f 93       	push	r17
     4a4:	cf 93       	push	r28
     4a6:	df 93       	push	r29
     4a8:	8c 01       	movw	r16, r24
     4aa:	fc 01       	movw	r30, r24
     4ac:	c0 81       	ld	r28, Z
     4ae:	d1 81       	ldd	r29, Z+1	; 0x01
     4b0:	6c 2f       	mov	r22, r28
     4b2:	62 95       	swap	r22
     4b4:	66 0f       	add	r22, r22
     4b6:	60 7e       	andi	r22, 0xE0	; 224
     4b8:	82 e3       	ldi	r24, 0x32	; 50
     4ba:	0e 94 4e 03 	call	0x69c	; 0x69c <mcp_write>
     4be:	be 01       	movw	r22, r28
     4c0:	76 95       	lsr	r23
     4c2:	67 95       	ror	r22
     4c4:	76 95       	lsr	r23
     4c6:	67 95       	ror	r22
     4c8:	76 95       	lsr	r23
     4ca:	67 95       	ror	r22
     4cc:	81 e3       	ldi	r24, 0x31	; 49
     4ce:	0e 94 4e 03 	call	0x69c	; 0x69c <mcp_write>
     4d2:	f8 01       	movw	r30, r16
     4d4:	62 81       	ldd	r22, Z+2	; 0x02
     4d6:	85 e3       	ldi	r24, 0x35	; 53
     4d8:	0e 94 4e 03 	call	0x69c	; 0x69c <mcp_write>
     4dc:	f8 01       	movw	r30, r16
     4de:	82 81       	ldd	r24, Z+2	; 0x02
     4e0:	88 23       	and	r24, r24
     4e2:	71 f0       	breq	.+28     	; 0x500 <__stack+0x1>
     4e4:	c0 e0       	ldi	r28, 0x00	; 0
     4e6:	f8 01       	movw	r30, r16
     4e8:	ec 0f       	add	r30, r28
     4ea:	f1 1d       	adc	r31, r1
     4ec:	63 81       	ldd	r22, Z+3	; 0x03
     4ee:	86 e3       	ldi	r24, 0x36	; 54
     4f0:	8c 0f       	add	r24, r28
     4f2:	0e 94 4e 03 	call	0x69c	; 0x69c <mcp_write>
     4f6:	cf 5f       	subi	r28, 0xFF	; 255
     4f8:	f8 01       	movw	r30, r16
     4fa:	82 81       	ldd	r24, Z+2	; 0x02
     4fc:	c8 17       	cp	r28, r24
     4fe:	98 f3       	brcs	.-26     	; 0x4e6 <CAN_message_transmission+0x46>
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	0e 94 df 03 	call	0x7be	; 0x7be <mcp_request_to_send>
     506:	df 91       	pop	r29
     508:	cf 91       	pop	r28
     50a:	1f 91       	pop	r17
     50c:	0f 91       	pop	r16
     50e:	08 95       	ret

00000510 <CAN_meessage_reception>:
     510:	9f 92       	push	r9
     512:	af 92       	push	r10
     514:	bf 92       	push	r11
     516:	cf 92       	push	r12
     518:	df 92       	push	r13
     51a:	ef 92       	push	r14
     51c:	ff 92       	push	r15
     51e:	0f 93       	push	r16
     520:	1f 93       	push	r17
     522:	cf 93       	push	r28
     524:	df 93       	push	r29
     526:	cd b7       	in	r28, 0x3d	; 61
     528:	de b7       	in	r29, 0x3e	; 62
     52a:	2b 97       	sbiw	r28, 0x0b	; 11
     52c:	0f b6       	in	r0, 0x3f	; 63
     52e:	f8 94       	cli
     530:	de bf       	out	0x3e, r29	; 62
     532:	0f be       	out	0x3f, r0	; 63
     534:	cd bf       	out	0x3d, r28	; 61
     536:	5c 01       	movw	r10, r24
     538:	81 e6       	ldi	r24, 0x61	; 97
     53a:	0e 94 69 03 	call	0x6d2	; 0x6d2 <mcp_read>
     53e:	c8 2e       	mov	r12, r24
     540:	d1 2c       	mov	r13, r1
     542:	82 e6       	ldi	r24, 0x62	; 98
     544:	0e 94 69 03 	call	0x6d2	; 0x6d2 <mcp_read>
     548:	dc 2c       	mov	r13, r12
     54a:	cc 24       	eor	r12, r12
     54c:	80 7e       	andi	r24, 0xE0	; 224
     54e:	c8 0e       	add	r12, r24
     550:	d1 1c       	adc	r13, r1
     552:	85 e6       	ldi	r24, 0x65	; 101
     554:	0e 94 69 03 	call	0x6d2	; 0x6d2 <mcp_read>
     558:	8f 70       	andi	r24, 0x0F	; 15
     55a:	98 2e       	mov	r9, r24
     55c:	81 f0       	breq	.+32     	; 0x57e <CAN_meessage_reception+0x6e>
     55e:	7e 01       	movw	r14, r28
     560:	84 e0       	ldi	r24, 0x04	; 4
     562:	e8 0e       	add	r14, r24
     564:	f1 1c       	adc	r15, r1
     566:	06 e6       	ldi	r16, 0x66	; 102
     568:	09 0d       	add	r16, r9
     56a:	16 e6       	ldi	r17, 0x66	; 102
     56c:	81 2f       	mov	r24, r17
     56e:	0e 94 69 03 	call	0x6d2	; 0x6d2 <mcp_read>
     572:	f7 01       	movw	r30, r14
     574:	81 93       	st	Z+, r24
     576:	7f 01       	movw	r14, r30
     578:	1f 5f       	subi	r17, 0xFF	; 255
     57a:	10 13       	cpse	r17, r16
     57c:	f7 cf       	rjmp	.-18     	; 0x56c <CAN_meessage_reception+0x5c>
     57e:	da 82       	std	Y+2, r13	; 0x02
     580:	c9 82       	std	Y+1, r12	; 0x01
     582:	9b 82       	std	Y+3, r9	; 0x03
     584:	8b e0       	ldi	r24, 0x0B	; 11
     586:	fe 01       	movw	r30, r28
     588:	31 96       	adiw	r30, 0x01	; 1
     58a:	d5 01       	movw	r26, r10
     58c:	01 90       	ld	r0, Z+
     58e:	0d 92       	st	X+, r0
     590:	8a 95       	dec	r24
     592:	e1 f7       	brne	.-8      	; 0x58c <CAN_meessage_reception+0x7c>
     594:	c5 01       	movw	r24, r10
     596:	2b 96       	adiw	r28, 0x0b	; 11
     598:	0f b6       	in	r0, 0x3f	; 63
     59a:	f8 94       	cli
     59c:	de bf       	out	0x3e, r29	; 62
     59e:	0f be       	out	0x3f, r0	; 63
     5a0:	cd bf       	out	0x3d, r28	; 61
     5a2:	df 91       	pop	r29
     5a4:	cf 91       	pop	r28
     5a6:	1f 91       	pop	r17
     5a8:	0f 91       	pop	r16
     5aa:	ff 90       	pop	r15
     5ac:	ef 90       	pop	r14
     5ae:	df 90       	pop	r13
     5b0:	cf 90       	pop	r12
     5b2:	bf 90       	pop	r11
     5b4:	af 90       	pop	r10
     5b6:	9f 90       	pop	r9
     5b8:	08 95       	ret

000005ba <message_handler>:

CAN_message_t message_handler(){
     5ba:	cf 93       	push	r28
     5bc:	df 93       	push	r29
     5be:	ec 01       	movw	r28, r24
    CAN_message_t message;
    
	if(flag){
     5c0:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <__data_end>
     5c4:	90 91 95 02 	lds	r25, 0x0295	; 0x800295 <__data_end+0x1>
     5c8:	89 2b       	or	r24, r25
     5ca:	61 f0       	breq	.+24     	; 0x5e4 <message_handler+0x2a>
        message = CAN_meessage_reception(); //reads buffer 2 register
     5cc:	ce 01       	movw	r24, r28
     5ce:	0e 94 88 02 	call	0x510	; 0x510 <CAN_meessage_reception>

		flag = 0;
     5d2:	10 92 95 02 	sts	0x0295, r1	; 0x800295 <__data_end+0x1>
     5d6:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <__data_end>
        mcp_bit_modify(MCP_CANINTF, 1, 0);  // resets can interrupt flag bit for buffer 1
     5da:	40 e0       	ldi	r20, 0x00	; 0
     5dc:	61 e0       	ldi	r22, 0x01	; 1
     5de:	8c e2       	ldi	r24, 0x2C	; 44
     5e0:	0e 94 c3 03 	call	0x786	; 0x786 <mcp_bit_modify>

    }
return message;
}
     5e4:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <__data_end>
     5e8:	90 91 95 02 	lds	r25, 0x0295	; 0x800295 <__data_end+0x1>
     5ec:	9f 93       	push	r25
     5ee:	8f 93       	push	r24
     5f0:	80 e4       	ldi	r24, 0x40	; 64
     5f2:	91 e0       	ldi	r25, 0x01	; 1
     5f4:	9f 93       	push	r25
     5f6:	8f 93       	push	r24
     5f8:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <printf>

     5fc:	0f 90       	pop	r0
     5fe:	0f 90       	pop	r0
     600:	0f 90       	pop	r0
     602:	0f 90       	pop	r0
void CAN_communication_test(){ 
     604:	ce 01       	movw	r24, r28
     606:	df 91       	pop	r29
     608:	cf 91       	pop	r28
     60a:	08 95       	ret

0000060c <joyStick_Can_Message>:
 *  Author: Herbe
 */ 
#include "CAN_joystick_messages.h"


void joyStick_Can_Message(){
     60c:	ef 92       	push	r14
     60e:	ff 92       	push	r15
     610:	0f 93       	push	r16
     612:	1f 93       	push	r17
     614:	cf 93       	push	r28
     616:	df 93       	push	r29
     618:	cd b7       	in	r28, 0x3d	; 61
     61a:	de b7       	in	r29, 0x3e	; 62
     61c:	2b 97       	sbiw	r28, 0x0b	; 11
     61e:	0f b6       	in	r0, 0x3f	; 63
     620:	f8 94       	cli
     622:	de bf       	out	0x3e, r29	; 62
     624:	0f be       	out	0x3f, r0	; 63
     626:	cd bf       	out	0x3d, r28	; 61
	
pos_read(&P_pos); //Reads the current position of the joystick
     628:	86 e4       	ldi	r24, 0x46	; 70
     62a:	93 e0       	ldi	r25, 0x03	; 3
     62c:	0e 94 b0 08 	call	0x1160	; 0x1160 <pos_read>

uint8_t sendSliderRight = ADC_read(2);  
     630:	82 e0       	ldi	r24, 0x02	; 2
     632:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ADC_read>
     636:	e8 2e       	mov	r14, r24
uint8_t sendPosX = 128 + P_pos.posX;  //Adding 128 to not have negative a number
     638:	e6 e4       	ldi	r30, 0x46	; 70
     63a:	f3 e0       	ldi	r31, 0x03	; 3
     63c:	80 81       	ld	r24, Z
     63e:	68 94       	set
     640:	ff 24       	eor	r15, r15
     642:	f7 f8       	bld	r15, 7
     644:	f8 0e       	add	r15, r24
uint8_t sendPosY = 128 + P_pos.posY;  //Adding 128 to not have negative a number
     646:	02 81       	ldd	r16, Z+2	; 0x02
     648:	00 58       	subi	r16, 0x80	; 128
uint8_t sendJoyButton = usb_button_pushed(JOYSTICK_BUTTON);
     64a:	82 e0       	ldi	r24, 0x02	; 2
     64c:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <usb_button_pushed>
     650:	18 2f       	mov	r17, r24
uint8_t sendJoyDirection = (joystick_direction()) << 1; //shift right to not disturb rest of message
     652:	0e 94 a2 09 	call	0x1344	; 0x1344 <joystick_direction>

uint8_t sendJoyData = sendJoyDirection + sendJoyButton;  //Combining button-bushed and joystick-direction in one byte.

CAN_message_t joyStickData;
joyStickData.identifier = 0b11111111;
     656:	2f ef       	ldi	r18, 0xFF	; 255
     658:	30 e0       	ldi	r19, 0x00	; 0
     65a:	3a 83       	std	Y+2, r19	; 0x02
     65c:	29 83       	std	Y+1, r18	; 0x01
joyStickData.data[0] = sendPosX;
     65e:	fc 82       	std	Y+4, r15	; 0x04
joyStickData.data[1] = sendPosY;
     660:	0d 83       	std	Y+5, r16	; 0x05
joyStickData.data[2] = sendJoyData;
     662:	88 0f       	add	r24, r24
     664:	18 0f       	add	r17, r24
     666:	1e 83       	std	Y+6, r17	; 0x06
joyStickData.data[3] = sendSliderRight;
     668:	ef 82       	std	Y+7, r14	; 0x07
joyStickData.data_length = 4;
     66a:	84 e0       	ldi	r24, 0x04	; 4
     66c:	8b 83       	std	Y+3, r24	; 0x03

CAN_message_transmission(&joyStickData);
     66e:	ce 01       	movw	r24, r28
     670:	01 96       	adiw	r24, 0x01	; 1
     672:	0e 94 50 02 	call	0x4a0	; 0x4a0 <CAN_message_transmission>
     676:	2b 96       	adiw	r28, 0x0b	; 11
     678:	0f b6       	in	r0, 0x3f	; 63
     67a:	f8 94       	cli
     67c:	de bf       	out	0x3e, r29	; 62
     67e:	0f be       	out	0x3f, r0	; 63
     680:	cd bf       	out	0x3d, r28	; 61
     682:	df 91       	pop	r29
     684:	cf 91       	pop	r28
     686:	1f 91       	pop	r17
     688:	0f 91       	pop	r16
     68a:	ff 90       	pop	r15
     68c:	ef 90       	pop	r14
     68e:	08 95       	ret

00000690 <spi_master_CS>:

    spi_master_CS(1);

    return status_value;
}

     690:	81 11       	cpse	r24, r1
     692:	02 c0       	rjmp	.+4      	; 0x698 <spi_master_CS+0x8>
     694:	c4 98       	cbi	0x18, 4	; 24
     696:	08 95       	ret
     698:	c4 9a       	sbi	0x18, 4	; 24
     69a:	08 95       	ret

0000069c <mcp_write>:
     69c:	cf 93       	push	r28
     69e:	df 93       	push	r29
     6a0:	d8 2f       	mov	r29, r24
     6a2:	c6 2f       	mov	r28, r22
     6a4:	80 e0       	ldi	r24, 0x00	; 0
     6a6:	0e 94 48 03 	call	0x690	; 0x690 <spi_master_CS>
     6aa:	82 e0       	ldi	r24, 0x02	; 2
     6ac:	0e 94 c7 0a 	call	0x158e	; 0x158e <spi_write>
     6b0:	8d 2f       	mov	r24, r29
     6b2:	0e 94 c7 0a 	call	0x158e	; 0x158e <spi_write>
     6b6:	8c 2f       	mov	r24, r28
     6b8:	0e 94 c7 0a 	call	0x158e	; 0x158e <spi_write>
     6bc:	81 e0       	ldi	r24, 0x01	; 1
     6be:	0e 94 48 03 	call	0x690	; 0x690 <spi_master_CS>
     6c2:	df 91       	pop	r29
     6c4:	cf 91       	pop	r28
     6c6:	08 95       	ret

000006c8 <mcp_set_mode>:
     6c8:	68 2f       	mov	r22, r24
     6ca:	8f e0       	ldi	r24, 0x0F	; 15
     6cc:	0e 94 4e 03 	call	0x69c	; 0x69c <mcp_write>
     6d0:	08 95       	ret

000006d2 <mcp_read>:
     6d2:	cf 93       	push	r28
     6d4:	c8 2f       	mov	r28, r24
     6d6:	80 e0       	ldi	r24, 0x00	; 0
     6d8:	0e 94 48 03 	call	0x690	; 0x690 <spi_master_CS>
     6dc:	83 e0       	ldi	r24, 0x03	; 3
     6de:	0e 94 c7 0a 	call	0x158e	; 0x158e <spi_write>
     6e2:	8c 2f       	mov	r24, r28
     6e4:	0e 94 c7 0a 	call	0x158e	; 0x158e <spi_write>
     6e8:	0e 94 cb 0a 	call	0x1596	; 0x1596 <spi_read>
     6ec:	c8 2f       	mov	r28, r24
     6ee:	81 e0       	ldi	r24, 0x01	; 1
     6f0:	0e 94 48 03 	call	0x690	; 0x690 <spi_master_CS>
     6f4:	8c 2f       	mov	r24, r28
     6f6:	cf 91       	pop	r28
     6f8:	08 95       	ret

000006fa <mcp_reset>:
     6fa:	80 e0       	ldi	r24, 0x00	; 0
     6fc:	0e 94 48 03 	call	0x690	; 0x690 <spi_master_CS>
     700:	80 ec       	ldi	r24, 0xC0	; 192
     702:	0e 94 c7 0a 	call	0x158e	; 0x158e <spi_write>
     706:	81 e0       	ldi	r24, 0x01	; 1
     708:	0e 94 48 03 	call	0x690	; 0x690 <spi_master_CS>
     70c:	08 95       	ret

0000070e <mcp_init>:
     70e:	cf 93       	push	r28
     710:	df 93       	push	r29
     712:	d8 2f       	mov	r29, r24
     714:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <spi_init>
     718:	0e 94 7d 03 	call	0x6fa	; 0x6fa <mcp_reset>
     71c:	80 e8       	ldi	r24, 0x80	; 128
     71e:	0e 94 64 03 	call	0x6c8	; 0x6c8 <mcp_set_mode>
     722:	8f ef       	ldi	r24, 0xFF	; 255
     724:	9f e8       	ldi	r25, 0x8F	; 143
     726:	01 97       	sbiw	r24, 0x01	; 1
     728:	f1 f7       	brne	.-4      	; 0x726 <mcp_init+0x18>
     72a:	00 c0       	rjmp	.+0      	; 0x72c <mcp_init+0x1e>
     72c:	00 00       	nop
     72e:	8e e0       	ldi	r24, 0x0E	; 14
     730:	0e 94 69 03 	call	0x6d2	; 0x6d2 <mcp_read>
     734:	c8 2f       	mov	r28, r24
     736:	1f 92       	push	r1
     738:	8f 93       	push	r24
     73a:	82 e5       	ldi	r24, 0x52	; 82
     73c:	91 e0       	ldi	r25, 0x01	; 1
     73e:	9f 93       	push	r25
     740:	8f 93       	push	r24
     742:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <printf>
     746:	c0 7e       	andi	r28, 0xE0	; 224
     748:	0f 90       	pop	r0
     74a:	0f 90       	pop	r0
     74c:	0f 90       	pop	r0
     74e:	0f 90       	pop	r0
     750:	c0 38       	cpi	r28, 0x80	; 128
     752:	31 f0       	breq	.+12     	; 0x760 <mcp_init+0x52>
     754:	8e e5       	ldi	r24, 0x5E	; 94
     756:	91 e0       	ldi	r25, 0x01	; 1
     758:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <puts>
     75c:	81 e0       	ldi	r24, 0x01	; 1
     75e:	10 c0       	rjmp	.+32     	; 0x780 <mcp_init+0x72>
     760:	8d 2f       	mov	r24, r29
     762:	0e 94 64 03 	call	0x6c8	; 0x6c8 <mcp_set_mode>
     766:	8e e0       	ldi	r24, 0x0E	; 14
     768:	0e 94 69 03 	call	0x6d2	; 0x6d2 <mcp_read>
     76c:	80 7e       	andi	r24, 0xE0	; 224
     76e:	8d 17       	cp	r24, r29
     770:	31 f0       	breq	.+12     	; 0x77e <mcp_init+0x70>
     772:	80 e9       	ldi	r24, 0x90	; 144
     774:	91 e0       	ldi	r25, 0x01	; 1
     776:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <puts>
     77a:	81 e0       	ldi	r24, 0x01	; 1
     77c:	01 c0       	rjmp	.+2      	; 0x780 <mcp_init+0x72>
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	df 91       	pop	r29
     782:	cf 91       	pop	r28
     784:	08 95       	ret

00000786 <mcp_bit_modify>:
     786:	1f 93       	push	r17
     788:	cf 93       	push	r28
     78a:	df 93       	push	r29
     78c:	18 2f       	mov	r17, r24
     78e:	d6 2f       	mov	r29, r22
     790:	c4 2f       	mov	r28, r20
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	0e 94 48 03 	call	0x690	; 0x690 <spi_master_CS>
     798:	85 e0       	ldi	r24, 0x05	; 5
     79a:	0e 94 c7 0a 	call	0x158e	; 0x158e <spi_write>
     79e:	81 2f       	mov	r24, r17
     7a0:	0e 94 c7 0a 	call	0x158e	; 0x158e <spi_write>
     7a4:	8d 2f       	mov	r24, r29
     7a6:	0e 94 c7 0a 	call	0x158e	; 0x158e <spi_write>
     7aa:	8c 2f       	mov	r24, r28
     7ac:	0e 94 c7 0a 	call	0x158e	; 0x158e <spi_write>
     7b0:	81 e0       	ldi	r24, 0x01	; 1
     7b2:	0e 94 48 03 	call	0x690	; 0x690 <spi_master_CS>
     7b6:	df 91       	pop	r29
     7b8:	cf 91       	pop	r28
     7ba:	1f 91       	pop	r17
     7bc:	08 95       	ret

000007be <mcp_request_to_send>:
void mcp_request_to_send(uint8_t buffer){
    spi_master_CS(0);
     7be:	cf 93       	push	r28
     7c0:	c8 2f       	mov	r28, r24

     7c2:	80 e0       	ldi	r24, 0x00	; 0
     7c4:	0e 94 48 03 	call	0x690	; 0x690 <spi_master_CS>
    switch (buffer) {
      case 0:
     7c8:	c1 30       	cpi	r28, 0x01	; 1
     7ca:	41 f0       	breq	.+16     	; 0x7dc <mcp_request_to_send+0x1e>
     7cc:	18 f0       	brcs	.+6      	; 0x7d4 <mcp_request_to_send+0x16>
     7ce:	c2 30       	cpi	r28, 0x02	; 2
     7d0:	49 f0       	breq	.+18     	; 0x7e4 <mcp_request_to_send+0x26>
     7d2:	0c c0       	rjmp	.+24     	; 0x7ec <mcp_request_to_send+0x2e>
          spi_write(MCP_RTS_TX0);
          break;
     7d4:	81 e8       	ldi	r24, 0x81	; 129
     7d6:	0e 94 c7 0a 	call	0x158e	; 0x158e <spi_write>
      case 1:
     7da:	0b c0       	rjmp	.+22     	; 0x7f2 <mcp_request_to_send+0x34>
          spi_write(MCP_RTS_TX1);
          break;
     7dc:	82 e8       	ldi	r24, 0x82	; 130
     7de:	0e 94 c7 0a 	call	0x158e	; 0x158e <spi_write>
      case 2:
     7e2:	07 c0       	rjmp	.+14     	; 0x7f2 <mcp_request_to_send+0x34>
          spi_write(MCP_RTS_TX2);
          break;
     7e4:	84 e8       	ldi	r24, 0x84	; 132
     7e6:	0e 94 c7 0a 	call	0x158e	; 0x158e <spi_write>
      default:
     7ea:	03 c0       	rjmp	.+6      	; 0x7f2 <mcp_request_to_send+0x34>
        spi_write(MCP_RTS_ALL);
    }
     7ec:	87 e8       	ldi	r24, 0x87	; 135
     7ee:	0e 94 c7 0a 	call	0x158e	; 0x158e <spi_write>

    spi_master_CS(1);
}
     7f2:	81 e0       	ldi	r24, 0x01	; 1
     7f4:	0e 94 48 03 	call	0x690	; 0x690 <spi_master_CS>
     7f8:	cf 91       	pop	r28
     7fa:	08 95       	ret

000007fc <InitMusic>:

void InitMusic()
{
	// Configure OC1B pin as output

	DDRE |= (1 << PE2); //OC1B as output
     7fc:	32 9a       	sbi	0x06, 2	; 6

	// timer1 configuration (for pWM)
    TCCR1A = (1 << COM1B1);  // Clear OC1A/OC1B on compare match
     7fe:	80 e2       	ldi	r24, 0x20	; 32
     800:	8f bd       	out	0x2f, r24	; 47

	
	TCCR1B = (1 << WGM13) 	//mode 8, pWM, phase and Frequency Correct (TOp value is ICR1)
     802:	82 e1       	ldi	r24, 0x12	; 18
     804:	8e bd       	out	0x2e, r24	; 46
     806:	08 95       	ret

00000808 <playMusic>:

/**
	plays music.
*/

void playMusic( int* p_notes, uint8_t scale)	{							 /** paying tempo from 0 to 100. Higher value = slower playback*/
     808:	fc 01       	movw	r30, r24

	int duration;
	int note;
	uint8_t i = 0;
   
	while( *p_notes )
     80a:	80 81       	ld	r24, Z
     80c:	91 81       	ldd	r25, Z+1	; 0x01
     80e:	00 97       	sbiw	r24, 0x00	; 0
     810:	21 f1       	breq	.+72     	; 0x85a <playMusic+0x52>
	{
		*p_notes = scale* (*p_notes);
     812:	70 e0       	ldi	r23, 0x00	; 0
		}

		else
		{
			//not a pause, generate tone
			OCR1B = DEFAULT_VOLUME;
     814:	44 e6       	ldi	r20, 0x64	; 100
     816:	50 e0       	ldi	r21, 0x00	; 0
	int note;
	uint8_t i = 0;
   
	while( *p_notes )
	{
		*p_notes = scale* (*p_notes);
     818:	68 9f       	mul	r22, r24
     81a:	90 01       	movw	r18, r0
     81c:	69 9f       	mul	r22, r25
     81e:	30 0d       	add	r19, r0
     820:	78 9f       	mul	r23, r24
     822:	30 0d       	add	r19, r0
     824:	11 24       	eor	r1, r1
     826:	31 83       	std	Z+1, r19	; 0x01
     828:	20 83       	st	Z, r18
     82a:	34 96       	adiw	r30, 0x04	; 4
		p_notes++;

		duration = *p_notes;
		p_notes++;

		if( p == note )
     82c:	21 30       	cpi	r18, 0x01	; 1
     82e:	31 05       	cpc	r19, r1
     830:	19 f4       	brne	.+6      	; 0x838 <playMusic+0x30>
		{
			//pause, do not generate any sound
			OCR1B = 0;
     832:	19 bc       	out	0x29, r1	; 41
     834:	18 bc       	out	0x28, r1	; 40
     836:	04 c0       	rjmp	.+8      	; 0x840 <playMusic+0x38>
		}

		else
		{
			//not a pause, generate tone
			OCR1B = DEFAULT_VOLUME;
     838:	59 bd       	out	0x29, r21	; 41
     83a:	48 bd       	out	0x28, r20	; 40

			//set frequency
			ICR1H = (note >> 8);
     83c:	35 bd       	out	0x25, r19	; 37
			ICR1L = note;
     83e:	24 bd       	out	0x24, r18	; 36
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     840:	2f ef       	ldi	r18, 0xFF	; 255
     842:	8f e3       	ldi	r24, 0x3F	; 63
     844:	92 e0       	ldi	r25, 0x02	; 2
     846:	21 50       	subi	r18, 0x01	; 1
     848:	80 40       	sbci	r24, 0x00	; 0
     84a:	90 40       	sbci	r25, 0x00	; 0
     84c:	e1 f7       	brne	.-8      	; 0x846 <playMusic+0x3e>
     84e:	00 c0       	rjmp	.+0      	; 0x850 <playMusic+0x48>
     850:	00 00       	nop

	int duration;
	int note;
	uint8_t i = 0;
   
	while( *p_notes )
     852:	80 81       	ld	r24, Z
     854:	91 81       	ldd	r25, Z+1	; 0x01
     856:	00 97       	sbiw	r24, 0x00	; 0
     858:	f9 f6       	brne	.-66     	; 0x818 <playMusic+0x10>
		_delay_ms(150);
	}
	

	//turn off any sound
	OCR1B = 0;
     85a:	19 bc       	out	0x29, r1	; 41
     85c:	18 bc       	out	0x28, r1	; 40
     85e:	08 95       	ret

00000860 <oled_sel_row>:
     860:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <oled_position>
     864:	87 70       	andi	r24, 0x07	; 7
     866:	80 55       	subi	r24, 0x50	; 80
     868:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     86c:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     870:	80 83       	st	Z, r24
     872:	08 95       	ret

00000874 <oled_sel_col>:
     874:	80 93 4b 03 	sts	0x034B, r24	; 0x80034b <oled_position+0x1>
     878:	98 2f       	mov	r25, r24
     87a:	9f 70       	andi	r25, 0x0F	; 15
     87c:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     880:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     884:	90 83       	st	Z, r25
     886:	82 95       	swap	r24
     888:	8f 70       	andi	r24, 0x0F	; 15
     88a:	80 5f       	subi	r24, 0xF0	; 240
     88c:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     890:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     894:	80 83       	st	Z, r24
     896:	08 95       	ret

00000898 <oled_line_down>:
     898:	80 55       	subi	r24, 0x50	; 80
     89a:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     89e:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     8a2:	80 83       	st	Z, r24
     8a4:	08 95       	ret

000008a6 <oled_pos_set>:
     8a6:	cf 93       	push	r28
     8a8:	c6 2f       	mov	r28, r22
     8aa:	0e 94 30 04 	call	0x860	; 0x860 <oled_sel_row>
     8ae:	8c 2f       	mov	r24, r28
     8b0:	0e 94 3a 04 	call	0x874	; 0x874 <oled_sel_col>
     8b4:	cf 91       	pop	r28
     8b6:	08 95       	ret

000008b8 <oled_home>:
     8b8:	60 e0       	ldi	r22, 0x00	; 0
     8ba:	80 e0       	ldi	r24, 0x00	; 0
     8bc:	0e 94 53 04 	call	0x8a6	; 0x8a6 <oled_pos_set>
     8c0:	08 95       	ret

000008c2 <oled_clear>:
     8c2:	1f 93       	push	r17
     8c4:	cf 93       	push	r28
     8c6:	df 93       	push	r29
     8c8:	10 e0       	ldi	r17, 0x00	; 0
     8ca:	c6 ea       	ldi	r28, 0xA6	; 166
     8cc:	d0 e0       	ldi	r29, 0x00	; 0
     8ce:	81 2f       	mov	r24, r17
     8d0:	0e 94 4c 04 	call	0x898	; 0x898 <oled_line_down>
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	0d c0       	rjmp	.+26     	; 0x8f2 <oled_clear+0x30>
     8d8:	84 91       	lpm	r24, Z
     8da:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <oled_write_data>
     8de:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <oled_write_data+0x1>
     8e2:	8c 93       	st	X, r24
     8e4:	31 96       	adiw	r30, 0x01	; 1
     8e6:	ec 17       	cp	r30, r28
     8e8:	fd 07       	cpc	r31, r29
     8ea:	b1 f7       	brne	.-20     	; 0x8d8 <oled_clear+0x16>
     8ec:	9f 5f       	subi	r25, 0xFF	; 255
     8ee:	90 38       	cpi	r25, 0x80	; 128
     8f0:	19 f0       	breq	.+6      	; 0x8f8 <oled_clear+0x36>
     8f2:	ee e9       	ldi	r30, 0x9E	; 158
     8f4:	f0 e0       	ldi	r31, 0x00	; 0
     8f6:	f0 cf       	rjmp	.-32     	; 0x8d8 <oled_clear+0x16>
     8f8:	1f 5f       	subi	r17, 0xFF	; 255
     8fa:	18 30       	cpi	r17, 0x08	; 8
     8fc:	41 f7       	brne	.-48     	; 0x8ce <oled_clear+0xc>
     8fe:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <oled_home>
     902:	df 91       	pop	r29
     904:	cf 91       	pop	r28
     906:	1f 91       	pop	r17
     908:	08 95       	ret

0000090a <OLED_init>:
     90a:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     90e:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     912:	8e ea       	ldi	r24, 0xAE	; 174
     914:	80 83       	st	Z, r24
     916:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     91a:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     91e:	81 ea       	ldi	r24, 0xA1	; 161
     920:	80 83       	st	Z, r24
     922:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     926:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     92a:	8a ed       	ldi	r24, 0xDA	; 218
     92c:	80 83       	st	Z, r24
     92e:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     932:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     936:	82 e1       	ldi	r24, 0x12	; 18
     938:	80 83       	st	Z, r24
     93a:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     93e:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     942:	88 ec       	ldi	r24, 0xC8	; 200
     944:	80 83       	st	Z, r24
     946:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     94a:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     94e:	88 ea       	ldi	r24, 0xA8	; 168
     950:	80 83       	st	Z, r24
     952:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     956:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     95a:	8f e3       	ldi	r24, 0x3F	; 63
     95c:	80 83       	st	Z, r24
     95e:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     962:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     966:	85 ed       	ldi	r24, 0xD5	; 213
     968:	80 83       	st	Z, r24
     96a:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     96e:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     972:	80 e8       	ldi	r24, 0x80	; 128
     974:	80 83       	st	Z, r24
     976:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     97a:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     97e:	81 e8       	ldi	r24, 0x81	; 129
     980:	80 83       	st	Z, r24
     982:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     986:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     98a:	80 e5       	ldi	r24, 0x50	; 80
     98c:	80 83       	st	Z, r24
     98e:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     992:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     996:	89 ed       	ldi	r24, 0xD9	; 217
     998:	80 83       	st	Z, r24
     99a:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     99e:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     9a2:	81 e2       	ldi	r24, 0x21	; 33
     9a4:	80 83       	st	Z, r24
     9a6:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     9aa:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     9ae:	80 e2       	ldi	r24, 0x20	; 32
     9b0:	80 83       	st	Z, r24
     9b2:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     9b6:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     9ba:	82 e0       	ldi	r24, 0x02	; 2
     9bc:	80 83       	st	Z, r24
     9be:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     9c2:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     9c6:	8b ed       	ldi	r24, 0xDB	; 219
     9c8:	80 83       	st	Z, r24
     9ca:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     9ce:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     9d2:	80 e3       	ldi	r24, 0x30	; 48
     9d4:	80 83       	st	Z, r24
     9d6:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     9da:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     9de:	8d ea       	ldi	r24, 0xAD	; 173
     9e0:	80 83       	st	Z, r24
     9e2:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     9e6:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     9ea:	10 82       	st	Z, r1
     9ec:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     9f0:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     9f4:	84 ea       	ldi	r24, 0xA4	; 164
     9f6:	80 83       	st	Z, r24
     9f8:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     9fc:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     a00:	86 ea       	ldi	r24, 0xA6	; 166
     a02:	80 83       	st	Z, r24
     a04:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     a08:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     a0c:	8f ea       	ldi	r24, 0xAF	; 175
     a0e:	80 83       	st	Z, r24
     a10:	0e 94 61 04 	call	0x8c2	; 0x8c2 <oled_clear>
     a14:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <oled_home>
     a18:	08 95       	ret

00000a1a <oled_write_character>:
     a1a:	28 2f       	mov	r18, r24
     a1c:	30 e0       	ldi	r19, 0x00	; 0
     a1e:	f9 01       	movw	r30, r18
     a20:	ee 0f       	add	r30, r30
     a22:	ff 1f       	adc	r31, r31
     a24:	ee 0f       	add	r30, r30
     a26:	ff 1f       	adc	r31, r31
     a28:	ee 0f       	add	r30, r30
     a2a:	ff 1f       	adc	r31, r31
     a2c:	e2 56       	subi	r30, 0x62	; 98
     a2e:	f0 40       	sbci	r31, 0x00	; 0
     a30:	22 0f       	add	r18, r18
     a32:	33 1f       	adc	r19, r19
     a34:	22 0f       	add	r18, r18
     a36:	33 1f       	adc	r19, r19
     a38:	22 0f       	add	r18, r18
     a3a:	33 1f       	adc	r19, r19
     a3c:	2a 55       	subi	r18, 0x5A	; 90
     a3e:	30 40       	sbci	r19, 0x00	; 0
     a40:	94 91       	lpm	r25, Z
     a42:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <oled_write_data>
     a46:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <oled_write_data+0x1>
     a4a:	9c 93       	st	X, r25
     a4c:	31 96       	adiw	r30, 0x01	; 1
     a4e:	e2 17       	cp	r30, r18
     a50:	f3 07       	cpc	r31, r19
     a52:	b1 f7       	brne	.-20     	; 0xa40 <oled_write_character+0x26>
     a54:	08 95       	ret

00000a56 <oled_print>:
     a56:	0f 93       	push	r16
     a58:	1f 93       	push	r17
     a5a:	cf 93       	push	r28
     a5c:	df 93       	push	r29
     a5e:	fc 01       	movw	r30, r24
     a60:	01 90       	ld	r0, Z+
     a62:	00 20       	and	r0, r0
     a64:	e9 f7       	brne	.-6      	; 0xa60 <oled_print+0xa>
     a66:	31 97       	sbiw	r30, 0x01	; 1
     a68:	e8 1b       	sub	r30, r24
     a6a:	f9 0b       	sbc	r31, r25
     a6c:	1e 16       	cp	r1, r30
     a6e:	1f 06       	cpc	r1, r31
     a70:	54 f4       	brge	.+20     	; 0xa86 <oled_print+0x30>
     a72:	ec 01       	movw	r28, r24
     a74:	8c 01       	movw	r16, r24
     a76:	0e 0f       	add	r16, r30
     a78:	1f 1f       	adc	r17, r31
     a7a:	89 91       	ld	r24, Y+
     a7c:	0e 94 0d 05 	call	0xa1a	; 0xa1a <oled_write_character>
     a80:	c0 17       	cp	r28, r16
     a82:	d1 07       	cpc	r29, r17
     a84:	d1 f7       	brne	.-12     	; 0xa7a <oled_print+0x24>
     a86:	df 91       	pop	r29
     a88:	cf 91       	pop	r28
     a8a:	1f 91       	pop	r17
     a8c:	0f 91       	pop	r16
     a8e:	08 95       	ret

00000a90 <oled_print_arrow>:
     a90:	0e 94 53 04 	call	0x8a6	; 0x8a6 <oled_pos_set>
     a94:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <oled_write_data>
     a98:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <oled_write_data+0x1>
     a9c:	88 e1       	ldi	r24, 0x18	; 24
     a9e:	80 83       	st	Z, r24
     aa0:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <oled_write_data>
     aa4:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <oled_write_data+0x1>
     aa8:	80 83       	st	Z, r24
     aaa:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <oled_write_data>
     aae:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <oled_write_data+0x1>
     ab2:	9e e7       	ldi	r25, 0x7E	; 126
     ab4:	90 83       	st	Z, r25
     ab6:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <oled_write_data>
     aba:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <oled_write_data+0x1>
     abe:	9c e3       	ldi	r25, 0x3C	; 60
     ac0:	90 83       	st	Z, r25
     ac2:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <oled_write_data>
     ac6:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <oled_write_data+0x1>
     aca:	80 83       	st	Z, r24
     acc:	08 95       	ret

00000ace <set_difficulty>:
    if(child == 0){
        child = current_node->elements_on_screen;
    }

    return child;
}
     ace:	cf 93       	push	r28
     ad0:	df 93       	push	r29
     ad2:	cd b7       	in	r28, 0x3d	; 61
     ad4:	de b7       	in	r29, 0x3e	; 62
     ad6:	2b 97       	sbiw	r28, 0x0b	; 11
     ad8:	0f b6       	in	r0, 0x3f	; 63
     ada:	f8 94       	cli
     adc:	de bf       	out	0x3e, r29	; 62
     ade:	0f be       	out	0x3f, r0	; 63
     ae0:	cd bf       	out	0x3d, r28	; 61
     ae2:	85 e0       	ldi	r24, 0x05	; 5
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	9a 83       	std	Y+2, r25	; 0x02
     ae8:	89 83       	std	Y+1, r24	; 0x01
     aea:	81 e0       	ldi	r24, 0x01	; 1
     aec:	8b 83       	std	Y+3, r24	; 0x03
     aee:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <child>
     af2:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <child+0x1>
     af6:	81 30       	cpi	r24, 0x01	; 1
     af8:	91 05       	cpc	r25, r1
     afa:	19 f4       	brne	.+6      	; 0xb02 <set_difficulty+0x34>
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	8c 83       	std	Y+4, r24	; 0x04
     b00:	0a c0       	rjmp	.+20     	; 0xb16 <set_difficulty+0x48>
     b02:	82 30       	cpi	r24, 0x02	; 2
     b04:	91 05       	cpc	r25, r1
     b06:	19 f4       	brne	.+6      	; 0xb0e <set_difficulty+0x40>
     b08:	82 e0       	ldi	r24, 0x02	; 2
     b0a:	8c 83       	std	Y+4, r24	; 0x04
     b0c:	04 c0       	rjmp	.+8      	; 0xb16 <set_difficulty+0x48>
     b0e:	03 97       	sbiw	r24, 0x03	; 3
     b10:	11 f4       	brne	.+4      	; 0xb16 <set_difficulty+0x48>
     b12:	83 e0       	ldi	r24, 0x03	; 3
     b14:	8c 83       	std	Y+4, r24	; 0x04
     b16:	ce 01       	movw	r24, r28
     b18:	01 96       	adiw	r24, 0x01	; 1
     b1a:	0e 94 50 02 	call	0x4a0	; 0x4a0 <CAN_message_transmission>
     b1e:	2b 96       	adiw	r28, 0x0b	; 11
     b20:	0f b6       	in	r0, 0x3f	; 63
     b22:	f8 94       	cli
     b24:	de bf       	out	0x3e, r29	; 62
     b26:	0f be       	out	0x3f, r0	; 63
     b28:	cd bf       	out	0x3d, r28	; 61
     b2a:	df 91       	pop	r29
     b2c:	cf 91       	pop	r28
     b2e:	08 95       	ret

00000b30 <build_node>:
     b30:	cf 92       	push	r12
     b32:	df 92       	push	r13
     b34:	ef 92       	push	r14
     b36:	ff 92       	push	r15
     b38:	0f 93       	push	r16
     b3a:	1f 93       	push	r17
     b3c:	cf 93       	push	r28
     b3e:	df 93       	push	r29
     b40:	ec 01       	movw	r28, r24
     b42:	69 01       	movw	r12, r18
     b44:	79 83       	std	Y+1, r23	; 0x01
     b46:	68 83       	st	Y, r22
     b48:	ba 01       	movw	r22, r20
     b4a:	46 96       	adiw	r24, 0x16	; 22
     b4c:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <strcpy>
     b50:	dd 8a       	std	Y+21, r13	; 0x15
     b52:	cc 8a       	std	Y+20, r12	; 0x14
     b54:	fb 8a       	std	Y+19, r15	; 0x13
     b56:	ea 8a       	std	Y+18, r14	; 0x12
     b58:	a0 2f       	mov	r26, r16
     b5a:	b1 2f       	mov	r27, r17
     b5c:	fe 01       	movw	r30, r28
     b5e:	32 96       	adiw	r30, 0x02	; 2
     b60:	ce 01       	movw	r24, r28
     b62:	42 96       	adiw	r24, 0x12	; 18
     b64:	2d 91       	ld	r18, X+
     b66:	3d 91       	ld	r19, X+
     b68:	21 93       	st	Z+, r18
     b6a:	31 93       	st	Z+, r19
     b6c:	e8 17       	cp	r30, r24
     b6e:	f9 07       	cpc	r31, r25
     b70:	c9 f7       	brne	.-14     	; 0xb64 <build_node+0x34>
     b72:	df 91       	pop	r29
     b74:	cf 91       	pop	r28
     b76:	1f 91       	pop	r17
     b78:	0f 91       	pop	r16
     b7a:	ff 90       	pop	r15
     b7c:	ef 90       	pop	r14
     b7e:	df 90       	pop	r13
     b80:	cf 90       	pop	r12
     b82:	08 95       	ret

00000b84 <go_up>:
     b84:	dc 01       	movw	r26, r24
     b86:	ed 91       	ld	r30, X+
     b88:	fc 91       	ld	r31, X
     b8a:	11 97       	sbiw	r26, 0x01	; 1
     b8c:	20 81       	ld	r18, Z
     b8e:	31 81       	ldd	r19, Z+1	; 0x01
     b90:	21 15       	cp	r18, r1
     b92:	31 05       	cpc	r19, r1
     b94:	11 f0       	breq	.+4      	; 0xb9a <go_up+0x16>
     b96:	2d 93       	st	X+, r18
     b98:	3c 93       	st	X, r19
     b9a:	08 95       	ret

00000b9c <go_down>:
     b9c:	fc 01       	movw	r30, r24
     b9e:	a0 81       	ld	r26, Z
     ba0:	b1 81       	ldd	r27, Z+1	; 0x01
     ba2:	fb 01       	movw	r30, r22
     ba4:	ee 0f       	add	r30, r30
     ba6:	ff 1f       	adc	r31, r31
     ba8:	ea 0f       	add	r30, r26
     baa:	fb 1f       	adc	r31, r27
     bac:	20 81       	ld	r18, Z
     bae:	31 81       	ldd	r19, Z+1	; 0x01
     bb0:	21 15       	cp	r18, r1
     bb2:	31 05       	cpc	r19, r1
     bb4:	21 f0       	breq	.+8      	; 0xbbe <go_down+0x22>
     bb6:	fc 01       	movw	r30, r24
     bb8:	31 83       	std	Z+1, r19	; 0x01
     bba:	20 83       	st	Z, r18
     bbc:	08 95       	ret
     bbe:	54 96       	adiw	r26, 0x14	; 20
     bc0:	ed 91       	ld	r30, X+
     bc2:	fc 91       	ld	r31, X
     bc4:	55 97       	sbiw	r26, 0x15	; 21
     bc6:	30 97       	sbiw	r30, 0x00	; 0
     bc8:	09 f0       	breq	.+2      	; 0xbcc <go_down+0x30>
     bca:	09 95       	icall
     bcc:	08 95       	ret

00000bce <wait_for_action>:
     bce:	0e 94 a2 09 	call	0x1344	; 0x1344 <joystick_direction>
     bd2:	84 30       	cpi	r24, 0x04	; 4
     bd4:	29 f4       	brne	.+10     	; 0xbe0 <wait_for_action+0x12>
     bd6:	82 e0       	ldi	r24, 0x02	; 2
     bd8:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <usb_button_pushed>
     bdc:	88 23       	and	r24, r24
     bde:	b9 f3       	breq	.-18     	; 0xbce <wait_for_action>
     be0:	0e 94 a2 09 	call	0x1344	; 0x1344 <joystick_direction>
     be4:	82 30       	cpi	r24, 0x02	; 2
     be6:	99 f0       	breq	.+38     	; 0xc0e <wait_for_action+0x40>
     be8:	0e 94 a2 09 	call	0x1344	; 0x1344 <joystick_direction>
     bec:	83 30       	cpi	r24, 0x03	; 3
     bee:	79 f0       	breq	.+30     	; 0xc0e <wait_for_action+0x40>
     bf0:	0e 94 a2 09 	call	0x1344	; 0x1344 <joystick_direction>
     bf4:	81 30       	cpi	r24, 0x01	; 1
     bf6:	59 f0       	breq	.+22     	; 0xc0e <wait_for_action+0x40>
     bf8:	0e 94 a2 09 	call	0x1344	; 0x1344 <joystick_direction>
     bfc:	88 23       	and	r24, r24
     bfe:	39 f0       	breq	.+14     	; 0xc0e <wait_for_action+0x40>
     c00:	82 e0       	ldi	r24, 0x02	; 2
     c02:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <usb_button_pushed>
     c06:	81 11       	cpse	r24, r1
     c08:	01 c0       	rjmp	.+2      	; 0xc0c <wait_for_action+0x3e>
     c0a:	08 95       	ret
     c0c:	85 e0       	ldi	r24, 0x05	; 5
     c0e:	08 95       	ret

00000c10 <wait_for_neutral_joystick_position>:
     c10:	0e 94 a2 09 	call	0x1344	; 0x1344 <joystick_direction>
     c14:	84 30       	cpi	r24, 0x04	; 4
     c16:	e1 f7       	brne	.-8      	; 0xc10 <wait_for_neutral_joystick_position>
     c18:	08 95       	ret

00000c1a <update_element_down>:

int update_element_down(Node *current_node, int child){

    child++;
     c1a:	6f 5f       	subi	r22, 0xFF	; 255
     c1c:	7f 4f       	sbci	r23, 0xFF	; 255

    if(child == current_node->elements_on_screen + 1){
     c1e:	fc 01       	movw	r30, r24
     c20:	82 89       	ldd	r24, Z+18	; 0x12
     c22:	93 89       	ldd	r25, Z+19	; 0x13
     c24:	01 96       	adiw	r24, 0x01	; 1
     c26:	68 17       	cp	r22, r24
     c28:	79 07       	cpc	r23, r25
     c2a:	11 f4       	brne	.+4      	; 0xc30 <update_element_down+0x16>
        child = 1;
     c2c:	61 e0       	ldi	r22, 0x01	; 1
     c2e:	70 e0       	ldi	r23, 0x00	; 0
    }

    return child;
    
}
     c30:	cb 01       	movw	r24, r22
     c32:	08 95       	ret

00000c34 <check_highscore>:

    print_selecting_arrow(child);
}

void check_highscore(int highscore){
    if(highscore >= _1ST){   //check if new highscore
     c34:	20 91 4e 03 	lds	r18, 0x034E	; 0x80034e <_1ST>
     c38:	30 91 4f 03 	lds	r19, 0x034F	; 0x80034f <_1ST+0x1>
     c3c:	82 17       	cp	r24, r18
     c3e:	93 07       	cpc	r25, r19
     c40:	8c f0       	brlt	.+34     	; 0xc64 <check_highscore+0x30>
		_3RD = _2ND;
     c42:	40 91 4c 03 	lds	r20, 0x034C	; 0x80034c <_2ND>
     c46:	50 91 4d 03 	lds	r21, 0x034D	; 0x80034d <_2ND+0x1>
     c4a:	50 93 41 03 	sts	0x0341, r21	; 0x800341 <_3RD+0x1>
     c4e:	40 93 40 03 	sts	0x0340, r20	; 0x800340 <_3RD>
		_2ND = _1ST;
     c52:	30 93 4d 03 	sts	0x034D, r19	; 0x80034d <_2ND+0x1>
     c56:	20 93 4c 03 	sts	0x034C, r18	; 0x80034c <_2ND>
        _1ST = highscore;
     c5a:	90 93 4f 03 	sts	0x034F, r25	; 0x80034f <_1ST+0x1>
     c5e:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <_1ST>
     c62:	08 95       	ret
		
    }
    else if(    (highscore < _1ST) && (highscore > _2ND)    )    {  //check if new second best
     c64:	20 91 4c 03 	lds	r18, 0x034C	; 0x80034c <_2ND>
     c68:	30 91 4d 03 	lds	r19, 0x034D	; 0x80034d <_2ND+0x1>
     c6c:	28 17       	cp	r18, r24
     c6e:	39 07       	cpc	r19, r25
     c70:	4c f4       	brge	.+18     	; 0xc84 <check_highscore+0x50>
		_3RD = _2ND;
     c72:	30 93 41 03 	sts	0x0341, r19	; 0x800341 <_3RD+0x1>
     c76:	20 93 40 03 	sts	0x0340, r18	; 0x800340 <_3RD>
        _2ND = highscore;
     c7a:	90 93 4d 03 	sts	0x034D, r25	; 0x80034d <_2ND+0x1>
     c7e:	80 93 4c 03 	sts	0x034C, r24	; 0x80034c <_2ND>
     c82:	08 95       	ret
    }
    else if(    (highscore < _2ND) && (highscore > _3RD)    ){ //check if new third best
     c84:	82 17       	cp	r24, r18
     c86:	93 07       	cpc	r25, r19
     c88:	5c f4       	brge	.+22     	; 0xca0 <check_highscore+0x6c>
     c8a:	20 91 40 03 	lds	r18, 0x0340	; 0x800340 <_3RD>
     c8e:	30 91 41 03 	lds	r19, 0x0341	; 0x800341 <_3RD+0x1>
     c92:	28 17       	cp	r18, r24
     c94:	39 07       	cpc	r19, r25
     c96:	24 f4       	brge	.+8      	; 0xca0 <check_highscore+0x6c>
        _3RD = highscore;
     c98:	90 93 41 03 	sts	0x0341, r25	; 0x800341 <_3RD+0x1>
     c9c:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <_3RD>
     ca0:	08 95       	ret

00000ca2 <play_game>:
    oled_print_arrow(child - 1, 5);
	
}


void play_game(){
     ca2:	cf 93       	push	r28
     ca4:	df 93       	push	r29
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
     caa:	a1 97       	sbiw	r28, 0x21	; 33
     cac:	0f b6       	in	r0, 0x3f	; 63
     cae:	f8 94       	cli
     cb0:	de bf       	out	0x3e, r29	; 62
     cb2:	0f be       	out	0x3f, r0	; 63
     cb4:	cd bf       	out	0x3d, r28	; 61
	
	// Play start music
	playMusic(start_melody, 1, 2);
     cb6:	42 e0       	ldi	r20, 0x02	; 2
     cb8:	50 e0       	ldi	r21, 0x00	; 0
     cba:	61 e0       	ldi	r22, 0x01	; 1
     cbc:	70 e0       	ldi	r23, 0x00	; 0
     cbe:	8c e0       	ldi	r24, 0x0C	; 12
     cc0:	91 e0       	ldi	r25, 0x01	; 1
     cc2:	0e 94 04 04 	call	0x808	; 0x808 <playMusic>
	
	// Empties buffer if needed
	message_handler();
     cc6:	ce 01       	movw	r24, r28
     cc8:	47 96       	adiw	r24, 0x17	; 23
     cca:	0e 94 dd 02 	call	0x5ba	; 0x5ba <message_handler>
	message_handler();
     cce:	ce 01       	movw	r24, r28
     cd0:	47 96       	adiw	r24, 0x17	; 23
     cd2:	0e 94 dd 02 	call	0x5ba	; 0x5ba <message_handler>
	game_status.data[0] = 0;
	uint8_t game_on = 1;
	
	// Create message that is to be sent when game starts
	CAN_message_t start_game;
	start_game.identifier = 9;
     cd6:	89 e0       	ldi	r24, 0x09	; 9
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	9d 87       	std	Y+13, r25	; 0x0d
     cdc:	8c 87       	std	Y+12, r24	; 0x0c
	start_game.data[0] = 7;
     cde:	87 e0       	ldi	r24, 0x07	; 7
     ce0:	8f 87       	std	Y+15, r24	; 0x0f
	start_game.data_length = 1;
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	8e 87       	std	Y+14, r24	; 0x0e
	
	// Sends game start message
	CAN_message_transmission(&start_game);
     ce6:	ce 01       	movw	r24, r28
     ce8:	0c 96       	adiw	r24, 0x0c	; 12
     cea:	0e 94 50 02 	call	0x4a0	; 0x4a0 <CAN_message_transmission>
		
		
	while(game_on){
		joyStick_Can_Message();
     cee:	0e 94 06 03 	call	0x60c	; 0x60c <joyStick_Can_Message>
		
		game_status = message_handler();
     cf2:	ce 01       	movw	r24, r28
     cf4:	01 96       	adiw	r24, 0x01	; 1
     cf6:	0e 94 dd 02 	call	0x5ba	; 0x5ba <message_handler>
		
		// Checks if game over message is received
		if(game_status.data[0] == 0b10101011){
     cfa:	8c 81       	ldd	r24, Y+4	; 0x04
     cfc:	8b 3a       	cpi	r24, 0xAB	; 171
     cfe:	b9 f7       	brne	.-18     	; 0xcee <play_game+0x4c>
	}
	
	
	// Update highscore
	int highscore = game_status.data[1];
	check_highscore(highscore);
     d00:	8d 81       	ldd	r24, Y+5	; 0x05
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	0e 94 1a 06 	call	0xc34	; 0xc34 <check_highscore>
	
	// Play end song
	playMusic(end_melody2, 1, 2);
     d08:	42 e0       	ldi	r20, 0x02	; 2
     d0a:	50 e0       	ldi	r21, 0x00	; 0
     d0c:	61 e0       	ldi	r22, 0x01	; 1
     d0e:	70 e0       	ldi	r23, 0x00	; 0
     d10:	8e e1       	ldi	r24, 0x1E	; 30
     d12:	91 e0       	ldi	r25, 0x01	; 1
     d14:	0e 94 04 04 	call	0x808	; 0x808 <playMusic>
	
}
     d18:	a1 96       	adiw	r28, 0x21	; 33
     d1a:	0f b6       	in	r0, 0x3f	; 63
     d1c:	f8 94       	cli
     d1e:	de bf       	out	0x3e, r29	; 62
     d20:	0f be       	out	0x3f, r0	; 63
     d22:	cd bf       	out	0x3d, r28	; 61
     d24:	df 91       	pop	r29
     d26:	cf 91       	pop	r28
     d28:	08 95       	ret

00000d2a <print_selecting_arrow>:
	
}


void print_selecting_arrow(int child){
    oled_print_arrow(child - 1, 5);
     d2a:	65 e0       	ldi	r22, 0x05	; 5
     d2c:	81 50       	subi	r24, 0x01	; 1
     d2e:	0e 94 48 05 	call	0xa90	; 0xa90 <oled_print_arrow>
     d32:	08 95       	ret

00000d34 <print_main_menu_objects>:
        wait_for_neutral_joystick_position();
    }
}


void print_main_menu_objects(int child){
     d34:	0f 93       	push	r16
     d36:	1f 93       	push	r17
     d38:	cf 93       	push	r28
     d3a:	df 93       	push	r29
     d3c:	cd b7       	in	r28, 0x3d	; 61
     d3e:	de b7       	in	r29, 0x3e	; 62
     d40:	66 97       	sbiw	r28, 0x16	; 22
     d42:	0f b6       	in	r0, 0x3f	; 63
     d44:	f8 94       	cli
     d46:	de bf       	out	0x3e, r29	; 62
     d48:	0f be       	out	0x3f, r0	; 63
     d4a:	cd bf       	out	0x3d, r28	; 61
     d4c:	8c 01       	movw	r16, r24
    char line1[] = "play";
     d4e:	85 e0       	ldi	r24, 0x05	; 5
     d50:	eb ec       	ldi	r30, 0xCB	; 203
     d52:	f1 e0       	ldi	r31, 0x01	; 1
     d54:	de 01       	movw	r26, r28
     d56:	11 96       	adiw	r26, 0x01	; 1
     d58:	01 90       	ld	r0, Z+
     d5a:	0d 92       	st	X+, r0
     d5c:	8a 95       	dec	r24
     d5e:	e1 f7       	brne	.-8      	; 0xd58 <print_main_menu_objects+0x24>
    char line2[] = "Score";
     d60:	86 e0       	ldi	r24, 0x06	; 6
     d62:	e0 ed       	ldi	r30, 0xD0	; 208
     d64:	f1 e0       	ldi	r31, 0x01	; 1
     d66:	de 01       	movw	r26, r28
     d68:	16 96       	adiw	r26, 0x06	; 6
     d6a:	01 90       	ld	r0, Z+
     d6c:	0d 92       	st	X+, r0
     d6e:	8a 95       	dec	r24
     d70:	e1 f7       	brne	.-8      	; 0xd6a <print_main_menu_objects+0x36>
	char line3[] = "Difficulty";
     d72:	8b e0       	ldi	r24, 0x0B	; 11
     d74:	e6 ed       	ldi	r30, 0xD6	; 214
     d76:	f1 e0       	ldi	r31, 0x01	; 1
     d78:	de 01       	movw	r26, r28
     d7a:	1c 96       	adiw	r26, 0x0c	; 12
     d7c:	01 90       	ld	r0, Z+
     d7e:	0d 92       	st	X+, r0
     d80:	8a 95       	dec	r24
     d82:	e1 f7       	brne	.-8      	; 0xd7c <print_main_menu_objects+0x48>

    oled_pos_set(0, 12);
     d84:	6c e0       	ldi	r22, 0x0C	; 12
     d86:	80 e0       	ldi	r24, 0x00	; 0
     d88:	0e 94 53 04 	call	0x8a6	; 0x8a6 <oled_pos_set>
    oled_print(&line1);
     d8c:	ce 01       	movw	r24, r28
     d8e:	01 96       	adiw	r24, 0x01	; 1
     d90:	0e 94 2b 05 	call	0xa56	; 0xa56 <oled_print>

    oled_pos_set(1, 12);
     d94:	6c e0       	ldi	r22, 0x0C	; 12
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	0e 94 53 04 	call	0x8a6	; 0x8a6 <oled_pos_set>
    oled_print(&line2);
     d9c:	ce 01       	movw	r24, r28
     d9e:	06 96       	adiw	r24, 0x06	; 6
     da0:	0e 94 2b 05 	call	0xa56	; 0xa56 <oled_print>
	
	oled_pos_set(2, 12);
     da4:	6c e0       	ldi	r22, 0x0C	; 12
     da6:	82 e0       	ldi	r24, 0x02	; 2
     da8:	0e 94 53 04 	call	0x8a6	; 0x8a6 <oled_pos_set>
	oled_print(&line3);
     dac:	ce 01       	movw	r24, r28
     dae:	0c 96       	adiw	r24, 0x0c	; 12
     db0:	0e 94 2b 05 	call	0xa56	; 0xa56 <oled_print>
	
	

    print_selecting_arrow(child);       //Draw the arrow that selects the preferable option.
     db4:	c8 01       	movw	r24, r16
     db6:	0e 94 95 06 	call	0xd2a	; 0xd2a <print_selecting_arrow>
    
}
     dba:	66 96       	adiw	r28, 0x16	; 22
     dbc:	0f b6       	in	r0, 0x3f	; 63
     dbe:	f8 94       	cli
     dc0:	de bf       	out	0x3e, r29	; 62
     dc2:	0f be       	out	0x3f, r0	; 63
     dc4:	cd bf       	out	0x3d, r28	; 61
     dc6:	df 91       	pop	r29
     dc8:	cf 91       	pop	r28
     dca:	1f 91       	pop	r17
     dcc:	0f 91       	pop	r16
     dce:	08 95       	ret

00000dd0 <print_new_game_menu_objects>:

void print_new_game_menu_objects(int child){
     dd0:	0f 93       	push	r16
     dd2:	1f 93       	push	r17
     dd4:	cf 93       	push	r28
     dd6:	df 93       	push	r29
     dd8:	cd b7       	in	r28, 0x3d	; 61
     dda:	de b7       	in	r29, 0x3e	; 62
     ddc:	2b 97       	sbiw	r28, 0x0b	; 11
     dde:	0f b6       	in	r0, 0x3f	; 63
     de0:	f8 94       	cli
     de2:	de bf       	out	0x3e, r29	; 62
     de4:	0f be       	out	0x3f, r0	; 63
     de6:	cd bf       	out	0x3d, r28	; 61
     de8:	8c 01       	movw	r16, r24

    char line1[] = "Start game";
     dea:	8b e0       	ldi	r24, 0x0B	; 11
     dec:	e1 ee       	ldi	r30, 0xE1	; 225
     dee:	f1 e0       	ldi	r31, 0x01	; 1
     df0:	de 01       	movw	r26, r28
     df2:	11 96       	adiw	r26, 0x01	; 1
     df4:	01 90       	ld	r0, Z+
     df6:	0d 92       	st	X+, r0
     df8:	8a 95       	dec	r24
     dfa:	e1 f7       	brne	.-8      	; 0xdf4 <print_new_game_menu_objects+0x24>

    oled_pos_set(0, 12);
     dfc:	6c e0       	ldi	r22, 0x0C	; 12
     dfe:	80 e0       	ldi	r24, 0x00	; 0
     e00:	0e 94 53 04 	call	0x8a6	; 0x8a6 <oled_pos_set>
    oled_print(&line1);
     e04:	ce 01       	movw	r24, r28
     e06:	01 96       	adiw	r24, 0x01	; 1
     e08:	0e 94 2b 05 	call	0xa56	; 0xa56 <oled_print>

    print_selecting_arrow(child);
     e0c:	c8 01       	movw	r24, r16
     e0e:	0e 94 95 06 	call	0xd2a	; 0xd2a <print_selecting_arrow>
}
     e12:	2b 96       	adiw	r28, 0x0b	; 11
     e14:	0f b6       	in	r0, 0x3f	; 63
     e16:	f8 94       	cli
     e18:	de bf       	out	0x3e, r29	; 62
     e1a:	0f be       	out	0x3f, r0	; 63
     e1c:	cd bf       	out	0x3d, r28	; 61
     e1e:	df 91       	pop	r29
     e20:	cf 91       	pop	r28
     e22:	1f 91       	pop	r17
     e24:	0f 91       	pop	r16
     e26:	08 95       	ret

00000e28 <print_score_menu_objects>:
        _3RD = highscore;
    }
    
}

void print_score_menu_objects(int child){
     e28:	0f 93       	push	r16
     e2a:	1f 93       	push	r17
     e2c:	cf 93       	push	r28
     e2e:	df 93       	push	r29
     e30:	cd b7       	in	r28, 0x3d	; 61
     e32:	de b7       	in	r29, 0x3e	; 62
     e34:	e7 97       	sbiw	r28, 0x37	; 55
     e36:	0f b6       	in	r0, 0x3f	; 63
     e38:	f8 94       	cli
     e3a:	de bf       	out	0x3e, r29	; 62
     e3c:	0f be       	out	0x3f, r0	; 63
     e3e:	cd bf       	out	0x3d, r28	; 61
     e40:	8c 01       	movw	r16, r24

char line1[] = "Top score";
     e42:	8a e0       	ldi	r24, 0x0A	; 10
     e44:	ee ef       	ldi	r30, 0xFE	; 254
     e46:	f1 e0       	ldi	r31, 0x01	; 1
     e48:	de 01       	movw	r26, r28
     e4a:	11 96       	adiw	r26, 0x01	; 1
     e4c:	01 90       	ld	r0, Z+
     e4e:	0d 92       	st	X+, r0
     e50:	8a 95       	dec	r24
     e52:	e1 f7       	brne	.-8      	; 0xe4c <print_score_menu_objects+0x24>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     e54:	4a e0       	ldi	r20, 0x0A	; 10
     e56:	be 01       	movw	r22, r28
     e58:	65 5f       	subi	r22, 0xF5	; 245
     e5a:	7f 4f       	sbci	r23, 0xFF	; 255
     e5c:	80 91 4e 03 	lds	r24, 0x034E	; 0x80034e <_1ST>
     e60:	90 91 4f 03 	lds	r25, 0x034F	; 0x80034f <_1ST+0x1>
     e64:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <__itoa_ncheck>
     e68:	4a e0       	ldi	r20, 0x0A	; 10
     e6a:	be 01       	movw	r22, r28
     e6c:	66 5e       	subi	r22, 0xE6	; 230
     e6e:	7f 4f       	sbci	r23, 0xFF	; 255
     e70:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <_2ND>
     e74:	90 91 4d 03 	lds	r25, 0x034D	; 0x80034d <_2ND+0x1>
     e78:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <__itoa_ncheck>
     e7c:	4a e0       	ldi	r20, 0x0A	; 10
     e7e:	be 01       	movw	r22, r28
     e80:	67 5d       	subi	r22, 0xD7	; 215
     e82:	7f 4f       	sbci	r23, 0xFF	; 255
     e84:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <_3RD>
     e88:	90 91 41 03 	lds	r25, 0x0341	; 0x800341 <_3RD+0x1>
     e8c:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <__itoa_ncheck>
itoa(_1ST, score_string1, 10);
itoa(_2ND, score_string2, 10);
itoa(_3RD, score_string3, 10);    

    
    oled_pos_set(0, 12);
     e90:	6c e0       	ldi	r22, 0x0C	; 12
     e92:	80 e0       	ldi	r24, 0x00	; 0
     e94:	0e 94 53 04 	call	0x8a6	; 0x8a6 <oled_pos_set>
    oled_print(&line1);
     e98:	ce 01       	movw	r24, r28
     e9a:	01 96       	adiw	r24, 0x01	; 1
     e9c:	0e 94 2b 05 	call	0xa56	; 0xa56 <oled_print>

    oled_pos_set(2, 12);
     ea0:	6c e0       	ldi	r22, 0x0C	; 12
     ea2:	82 e0       	ldi	r24, 0x02	; 2
     ea4:	0e 94 53 04 	call	0x8a6	; 0x8a6 <oled_pos_set>
    oled_print("1ST  ");
     ea8:	8c ee       	ldi	r24, 0xEC	; 236
     eaa:	91 e0       	ldi	r25, 0x01	; 1
     eac:	0e 94 2b 05 	call	0xa56	; 0xa56 <oled_print>
    oled_print(&score_string1);
     eb0:	ce 01       	movw	r24, r28
     eb2:	0b 96       	adiw	r24, 0x0b	; 11
     eb4:	0e 94 2b 05 	call	0xa56	; 0xa56 <oled_print>
    
    oled_pos_set(4, 12);
     eb8:	6c e0       	ldi	r22, 0x0C	; 12
     eba:	84 e0       	ldi	r24, 0x04	; 4
     ebc:	0e 94 53 04 	call	0x8a6	; 0x8a6 <oled_pos_set>
    oled_print("2ND  ");
     ec0:	82 ef       	ldi	r24, 0xF2	; 242
     ec2:	91 e0       	ldi	r25, 0x01	; 1
     ec4:	0e 94 2b 05 	call	0xa56	; 0xa56 <oled_print>
    oled_print(&score_string2);
     ec8:	ce 01       	movw	r24, r28
     eca:	4a 96       	adiw	r24, 0x1a	; 26
     ecc:	0e 94 2b 05 	call	0xa56	; 0xa56 <oled_print>

    oled_pos_set(6, 12);
     ed0:	6c e0       	ldi	r22, 0x0C	; 12
     ed2:	86 e0       	ldi	r24, 0x06	; 6
     ed4:	0e 94 53 04 	call	0x8a6	; 0x8a6 <oled_pos_set>
    oled_print("3RD  ");
     ed8:	88 ef       	ldi	r24, 0xF8	; 248
     eda:	91 e0       	ldi	r25, 0x01	; 1
     edc:	0e 94 2b 05 	call	0xa56	; 0xa56 <oled_print>
    oled_print(&score_string3);
     ee0:	ce 01       	movw	r24, r28
     ee2:	89 96       	adiw	r24, 0x29	; 41
     ee4:	0e 94 2b 05 	call	0xa56	; 0xa56 <oled_print>
    
    print_selecting_arrow(child);
     ee8:	c8 01       	movw	r24, r16
     eea:	0e 94 95 06 	call	0xd2a	; 0xd2a <print_selecting_arrow>

}
     eee:	e7 96       	adiw	r28, 0x37	; 55
     ef0:	0f b6       	in	r0, 0x3f	; 63
     ef2:	f8 94       	cli
     ef4:	de bf       	out	0x3e, r29	; 62
     ef6:	0f be       	out	0x3f, r0	; 63
     ef8:	cd bf       	out	0x3d, r28	; 61
     efa:	df 91       	pop	r29
     efc:	cf 91       	pop	r28
     efe:	1f 91       	pop	r17
     f00:	0f 91       	pop	r16
     f02:	08 95       	ret

00000f04 <print_difficulty_menu_objects>:

void print_difficulty_menu_objects(int child){
     f04:	0f 93       	push	r16
     f06:	1f 93       	push	r17
     f08:	cf 93       	push	r28
     f0a:	df 93       	push	r29
     f0c:	cd b7       	in	r28, 0x3d	; 61
     f0e:	de b7       	in	r29, 0x3e	; 62
     f10:	61 97       	sbiw	r28, 0x11	; 17
     f12:	0f b6       	in	r0, 0x3f	; 63
     f14:	f8 94       	cli
     f16:	de bf       	out	0x3e, r29	; 62
     f18:	0f be       	out	0x3f, r0	; 63
     f1a:	cd bf       	out	0x3d, r28	; 61
     f1c:	8c 01       	movw	r16, r24
	char line1[] = "Easy";
     f1e:	85 e0       	ldi	r24, 0x05	; 5
     f20:	e8 e0       	ldi	r30, 0x08	; 8
     f22:	f2 e0       	ldi	r31, 0x02	; 2
     f24:	de 01       	movw	r26, r28
     f26:	11 96       	adiw	r26, 0x01	; 1
     f28:	01 90       	ld	r0, Z+
     f2a:	0d 92       	st	X+, r0
     f2c:	8a 95       	dec	r24
     f2e:	e1 f7       	brne	.-8      	; 0xf28 <print_difficulty_menu_objects+0x24>
	char line2[] = "Medium";
     f30:	87 e0       	ldi	r24, 0x07	; 7
     f32:	ed e0       	ldi	r30, 0x0D	; 13
     f34:	f2 e0       	ldi	r31, 0x02	; 2
     f36:	de 01       	movw	r26, r28
     f38:	16 96       	adiw	r26, 0x06	; 6
     f3a:	01 90       	ld	r0, Z+
     f3c:	0d 92       	st	X+, r0
     f3e:	8a 95       	dec	r24
     f40:	e1 f7       	brne	.-8      	; 0xf3a <print_difficulty_menu_objects+0x36>
	char line3[] = "Hard";
     f42:	85 e0       	ldi	r24, 0x05	; 5
     f44:	e4 e1       	ldi	r30, 0x14	; 20
     f46:	f2 e0       	ldi	r31, 0x02	; 2
     f48:	de 01       	movw	r26, r28
     f4a:	1d 96       	adiw	r26, 0x0d	; 13
     f4c:	01 90       	ld	r0, Z+
     f4e:	0d 92       	st	X+, r0
     f50:	8a 95       	dec	r24
     f52:	e1 f7       	brne	.-8      	; 0xf4c <print_difficulty_menu_objects+0x48>

	oled_pos_set(0, 12);
     f54:	6c e0       	ldi	r22, 0x0C	; 12
     f56:	80 e0       	ldi	r24, 0x00	; 0
     f58:	0e 94 53 04 	call	0x8a6	; 0x8a6 <oled_pos_set>
	oled_print(&line1);
     f5c:	ce 01       	movw	r24, r28
     f5e:	01 96       	adiw	r24, 0x01	; 1
     f60:	0e 94 2b 05 	call	0xa56	; 0xa56 <oled_print>

	oled_pos_set(1, 12);
     f64:	6c e0       	ldi	r22, 0x0C	; 12
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	0e 94 53 04 	call	0x8a6	; 0x8a6 <oled_pos_set>
	oled_print(&line2);
     f6c:	ce 01       	movw	r24, r28
     f6e:	06 96       	adiw	r24, 0x06	; 6
     f70:	0e 94 2b 05 	call	0xa56	; 0xa56 <oled_print>
	
	oled_pos_set(2, 12);
     f74:	6c e0       	ldi	r22, 0x0C	; 12
     f76:	82 e0       	ldi	r24, 0x02	; 2
     f78:	0e 94 53 04 	call	0x8a6	; 0x8a6 <oled_pos_set>
	oled_print(&line3);
     f7c:	ce 01       	movw	r24, r28
     f7e:	0d 96       	adiw	r24, 0x0d	; 13
     f80:	0e 94 2b 05 	call	0xa56	; 0xa56 <oled_print>
	
	print_selecting_arrow(child);       //Draw the arrow that selects the preferable option.
     f84:	c8 01       	movw	r24, r16
     f86:	0e 94 95 06 	call	0xd2a	; 0xd2a <print_selecting_arrow>
	
}
     f8a:	61 96       	adiw	r28, 0x11	; 17
     f8c:	0f b6       	in	r0, 0x3f	; 63
     f8e:	f8 94       	cli
     f90:	de bf       	out	0x3e, r29	; 62
     f92:	0f be       	out	0x3f, r0	; 63
     f94:	cd bf       	out	0x3d, r28	; 61
     f96:	df 91       	pop	r29
     f98:	cf 91       	pop	r28
     f9a:	1f 91       	pop	r17
     f9c:	0f 91       	pop	r16
     f9e:	08 95       	ret

00000fa0 <update_screen>:
}

void update_screen(Node *current_node, int child){
	
	// Checks the second letter in the name of the child node.
    if(((*current_node).name[1]) == 'a'){
     fa0:	fc 01       	movw	r30, r24
     fa2:	87 89       	ldd	r24, Z+23	; 0x17
     fa4:	81 36       	cpi	r24, 0x61	; 97
     fa6:	21 f4       	brne	.+8      	; 0xfb0 <update_screen+0x10>
        print_main_menu_objects(child);
     fa8:	cb 01       	movw	r24, r22
     faa:	0e 94 9a 06 	call	0xd34	; 0xd34 <print_main_menu_objects>
     fae:	08 95       	ret
    }
    else if(((*current_node).name[1]) == 'l'){
     fb0:	8c 36       	cpi	r24, 0x6C	; 108
     fb2:	21 f4       	brne	.+8      	; 0xfbc <update_screen+0x1c>
        print_new_game_menu_objects(child);
     fb4:	cb 01       	movw	r24, r22
     fb6:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <print_new_game_menu_objects>
     fba:	08 95       	ret
    }
    else if(((*current_node).name[1]) == 'h'){
     fbc:	88 36       	cpi	r24, 0x68	; 104
     fbe:	21 f4       	brne	.+8      	; 0xfc8 <update_screen+0x28>
        print_score_menu_objects(child);
     fc0:	cb 01       	movw	r24, r22
     fc2:	0e 94 14 07 	call	0xe28	; 0xe28 <print_score_menu_objects>
     fc6:	08 95       	ret
    }
	else if(((*current_node).name[1]) == 'i'){
     fc8:	89 36       	cpi	r24, 0x69	; 105
     fca:	19 f4       	brne	.+6      	; 0xfd2 <update_screen+0x32>
		print_difficulty_menu_objects(child);
     fcc:	cb 01       	movw	r24, r22
     fce:	0e 94 82 07 	call	0xf04	; 0xf04 <print_difficulty_menu_objects>
     fd2:	08 95       	ret

00000fd4 <menu>:
    return child;
    
}


void menu(){
     fd4:	cf 93       	push	r28
     fd6:	df 93       	push	r29
     fd8:	cd b7       	in	r28, 0x3d	; 61
     fda:	de b7       	in	r29, 0x3e	; 62
     fdc:	e0 97       	sbiw	r28, 0x30	; 48
     fde:	0f b6       	in	r0, 0x3f	; 63
     fe0:	f8 94       	cli
     fe2:	de bf       	out	0x3e, r29	; 62
     fe4:	0f be       	out	0x3f, r0	; 63
     fe6:	cd bf       	out	0x3d, r28	; 61
    static Node Main_menu, Score, Play, Difficulty, Easy, Medium, Hard, *current_node;

    current_node = &Main_menu; 
     fe8:	84 e1       	ldi	r24, 0x14	; 20
     fea:	93 e0       	ldi	r25, 0x03	; 3
     fec:	90 93 3f 03 	sts	0x033F, r25	; 0x80033f <current_node.2458+0x1>
     ff0:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <current_node.2458>
    DIRECTION action; // Action from joystick

    // Build node structure
    Node* children1[8] = {&Play, &Score, &Difficulty ,0 ,0 ,0 ,0 ,0};
     ff4:	80 e1       	ldi	r24, 0x10	; 16
     ff6:	e0 e3       	ldi	r30, 0x30	; 48
     ff8:	f1 e0       	ldi	r31, 0x01	; 1
     ffa:	de 01       	movw	r26, r28
     ffc:	11 96       	adiw	r26, 0x01	; 1
     ffe:	01 90       	ld	r0, Z+
    1000:	0d 92       	st	X+, r0
    1002:	8a 95       	dec	r24
    1004:	e1 f7       	brne	.-8      	; 0xffe <menu+0x2a>
    Node* children2[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    1006:	80 e1       	ldi	r24, 0x10	; 16
    1008:	6e 01       	movw	r12, r28
    100a:	91 e1       	ldi	r25, 0x11	; 17
    100c:	c9 0e       	add	r12, r25
    100e:	d1 1c       	adc	r13, r1
    1010:	f6 01       	movw	r30, r12
    1012:	98 2f       	mov	r25, r24
    1014:	11 92       	st	Z+, r1
    1016:	9a 95       	dec	r25
    1018:	e9 f7       	brne	.-6      	; 0x1014 <menu+0x40>
    Node* children3[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    101a:	5e 01       	movw	r10, r28
    101c:	e1 e2       	ldi	r30, 0x21	; 33
    101e:	ae 0e       	add	r10, r30
    1020:	b1 1c       	adc	r11, r1
    1022:	f5 01       	movw	r30, r10
    1024:	11 92       	st	Z+, r1
    1026:	8a 95       	dec	r24
    1028:	e9 f7       	brne	.-6      	; 0x1024 <menu+0x50>
		
		



    build_node(&Main_menu, NULL, "Main menu", NULL, &children1,3);
    102a:	0f 2e       	mov	r0, r31
    102c:	f3 e0       	ldi	r31, 0x03	; 3
    102e:	ef 2e       	mov	r14, r31
    1030:	f1 2c       	mov	r15, r1
    1032:	f0 2d       	mov	r31, r0
    1034:	8e 01       	movw	r16, r28
    1036:	0f 5f       	subi	r16, 0xFF	; 255
    1038:	1f 4f       	sbci	r17, 0xFF	; 255
    103a:	20 e0       	ldi	r18, 0x00	; 0
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	49 e1       	ldi	r20, 0x19	; 25
    1040:	52 e0       	ldi	r21, 0x02	; 2
    1042:	60 e0       	ldi	r22, 0x00	; 0
    1044:	70 e0       	ldi	r23, 0x00	; 0
    1046:	84 e1       	ldi	r24, 0x14	; 20
    1048:	93 e0       	ldi	r25, 0x03	; 3
    104a:	0e 94 98 05 	call	0xb30	; 0xb30 <build_node>
    build_node(&Play, &Main_menu, "Play game", play_game, &children2,1);
    104e:	ee 24       	eor	r14, r14
    1050:	e3 94       	inc	r14
    1052:	f1 2c       	mov	r15, r1
    1054:	86 01       	movw	r16, r12
    1056:	21 e5       	ldi	r18, 0x51	; 81
    1058:	36 e0       	ldi	r19, 0x06	; 6
    105a:	43 e2       	ldi	r20, 0x23	; 35
    105c:	52 e0       	ldi	r21, 0x02	; 2
    105e:	64 e1       	ldi	r22, 0x14	; 20
    1060:	73 e0       	ldi	r23, 0x03	; 3
    1062:	8a ee       	ldi	r24, 0xEA	; 234
    1064:	92 e0       	ldi	r25, 0x02	; 2
    1066:	0e 94 98 05 	call	0xb30	; 0xb30 <build_node>
    build_node(&Score, &Main_menu, "Show score", NULL, &children3,8);
    106a:	68 94       	set
    106c:	ee 24       	eor	r14, r14
    106e:	e3 f8       	bld	r14, 3
    1070:	f1 2c       	mov	r15, r1
    1072:	85 01       	movw	r16, r10
    1074:	20 e0       	ldi	r18, 0x00	; 0
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	4d e2       	ldi	r20, 0x2D	; 45
    107a:	52 e0       	ldi	r21, 0x02	; 2
    107c:	64 e1       	ldi	r22, 0x14	; 20
    107e:	73 e0       	ldi	r23, 0x03	; 3
    1080:	80 ec       	ldi	r24, 0xC0	; 192
    1082:	92 e0       	ldi	r25, 0x02	; 2
    1084:	0e 94 98 05 	call	0xb30	; 0xb30 <build_node>
	build_node(&Difficulty, &Main_menu, "Difficulty", set_difficulty, &children2, 3);
    1088:	0f 2e       	mov	r0, r31
    108a:	f3 e0       	ldi	r31, 0x03	; 3
    108c:	ef 2e       	mov	r14, r31
    108e:	f1 2c       	mov	r15, r1
    1090:	f0 2d       	mov	r31, r0
    1092:	86 01       	movw	r16, r12
    1094:	27 e6       	ldi	r18, 0x67	; 103
    1096:	35 e0       	ldi	r19, 0x05	; 5
    1098:	46 ed       	ldi	r20, 0xD6	; 214
    109a:	51 e0       	ldi	r21, 0x01	; 1
    109c:	64 e1       	ldi	r22, 0x14	; 20
    109e:	73 e0       	ldi	r23, 0x03	; 3
    10a0:	86 e9       	ldi	r24, 0x96	; 150
    10a2:	92 e0       	ldi	r25, 0x02	; 2
    10a4:	0e 94 98 05 	call	0xb30	; 0xb30 <build_node>
	
    update_screen(current_node, child);
    10a8:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <child>
    10ac:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <child+0x1>
    10b0:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <current_node.2458>
    10b4:	90 91 3f 03 	lds	r25, 0x033F	; 0x80033f <current_node.2458+0x1>
    10b8:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <update_screen>
                go_up(&current_node);
                child = 1;
              break;
          case RIGHT:
                go_down(&current_node, child);
                child = 1;
    10bc:	ee 24       	eor	r14, r14
    10be:	e3 94       	inc	r14
    10c0:	f1 2c       	mov	r15, r1
	build_node(&Difficulty, &Main_menu, "Difficulty", set_difficulty, &children2, 3);
	
    update_screen(current_node, child);

    while(1){
        action = wait_for_action();  //Wait for user to move the joystick
    10c2:	0e 94 e7 05 	call	0xbce	; 0xbce <wait_for_action>
    10c6:	18 2f       	mov	r17, r24
        oled_clear();  //Clears the screen.
    10c8:	0e 94 61 04 	call	0x8c2	; 0x8c2 <oled_clear>

        switch(action)
    10cc:	11 30       	cpi	r17, 0x01	; 1
    10ce:	79 f1       	breq	.+94     	; 0x112e <menu+0x15a>
    10d0:	28 f1       	brcs	.+74     	; 0x111c <menu+0x148>
    10d2:	12 30       	cpi	r17, 0x02	; 2
    10d4:	19 f0       	breq	.+6      	; 0x10dc <menu+0x108>
    10d6:	13 30       	cpi	r17, 0x03	; 3
    10d8:	91 f0       	breq	.+36     	; 0x10fe <menu+0x12a>
    10da:	35 c0       	rjmp	.+106    	; 0x1146 <menu+0x172>

}

int update_element_up(Node *current_node, int child){

    child--;
    10dc:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <child>
    10e0:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <child+0x1>
    10e4:	01 97       	sbiw	r24, 0x01	; 1

    if(child == 0){
    10e6:	31 f4       	brne	.+12     	; 0x10f4 <menu+0x120>
        child = current_node->elements_on_screen;
    10e8:	e0 91 3e 03 	lds	r30, 0x033E	; 0x80033e <current_node.2458>
    10ec:	f0 91 3f 03 	lds	r31, 0x033F	; 0x80033f <current_node.2458+0x1>
    10f0:	82 89       	ldd	r24, Z+18	; 0x12
    10f2:	93 89       	ldd	r25, Z+19	; 0x13
        {
          case BUTTON_PRESS:
              break;
          case UP:
                //update_screen(current_node, child);
                child = update_element_up(current_node, child);
    10f4:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <child+0x1>
    10f8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <child>
              break;
    10fc:	24 c0       	rjmp	.+72     	; 0x1146 <menu+0x172>
          case DOWN:
                child = update_element_down(current_node, child);
    10fe:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <child>
    1102:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <child+0x1>
    1106:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <current_node.2458>
    110a:	90 91 3f 03 	lds	r25, 0x033F	; 0x80033f <current_node.2458+0x1>
    110e:	0e 94 0d 06 	call	0xc1a	; 0xc1a <update_element_down>
    1112:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <child+0x1>
    1116:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <child>
              break;
    111a:	15 c0       	rjmp	.+42     	; 0x1146 <menu+0x172>
          case LEFT:
                go_up(&current_node);
    111c:	8e e3       	ldi	r24, 0x3E	; 62
    111e:	93 e0       	ldi	r25, 0x03	; 3
    1120:	0e 94 c2 05 	call	0xb84	; 0xb84 <go_up>
                child = 1;
    1124:	f0 92 0b 01 	sts	0x010B, r15	; 0x80010b <child+0x1>
    1128:	e0 92 0a 01 	sts	0x010A, r14	; 0x80010a <child>
              break;
    112c:	0c c0       	rjmp	.+24     	; 0x1146 <menu+0x172>
          case RIGHT:
                go_down(&current_node, child);
    112e:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <child>
    1132:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <child+0x1>
    1136:	8e e3       	ldi	r24, 0x3E	; 62
    1138:	93 e0       	ldi	r25, 0x03	; 3
    113a:	0e 94 ce 05 	call	0xb9c	; 0xb9c <go_down>
                child = 1;
    113e:	f0 92 0b 01 	sts	0x010B, r15	; 0x80010b <child+0x1>
    1142:	e0 92 0a 01 	sts	0x010A, r14	; 0x80010a <child>
              break;
          default:
              break;
        }
        update_screen(current_node, child);
    1146:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <child>
    114a:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <child+0x1>
    114e:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <current_node.2458>
    1152:	90 91 3f 03 	lds	r25, 0x033F	; 0x80033f <current_node.2458+0x1>
    1156:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <update_screen>
        wait_for_neutral_joystick_position();
    115a:	0e 94 08 06 	call	0xc10	; 0xc10 <wait_for_neutral_joystick_position>
    }
    115e:	b1 cf       	rjmp	.-158    	; 0x10c2 <menu+0xee>

00001160 <pos_read>:
#include <avr/io.h>
#include <stdio.h>
#include "pos_read.h"


void pos_read(position* pos){
    1160:	8f 92       	push	r8
    1162:	9f 92       	push	r9
    1164:	af 92       	push	r10
    1166:	bf 92       	push	r11
    1168:	cf 92       	push	r12
    116a:	df 92       	push	r13
    116c:	ef 92       	push	r14
    116e:	ff 92       	push	r15
    1170:	0f 93       	push	r16
    1172:	1f 93       	push	r17
    1174:	cf 93       	push	r28
    1176:	df 93       	push	r29
    1178:	7c 01       	movw	r14, r24

    int ADC_Y = ADC_read(0);
    117a:	80 e0       	ldi	r24, 0x00	; 0
    117c:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ADC_read>
    1180:	c8 2f       	mov	r28, r24
    1182:	d0 e0       	ldi	r29, 0x00	; 0
    int ADC_X = ADC_read(1);
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ADC_read>
    118a:	68 2f       	mov	r22, r24
    118c:	70 e0       	ldi	r23, 0x00	; 0

    // X read

    if((ADC_X >= (P_cal.center_X - 20)) && (ADC_X <= (P_cal.center_X + 20))){ //Deadspace for joystick
    118e:	00 91 42 03 	lds	r16, 0x0342	; 0x800342 <P_cal>
    1192:	10 91 43 03 	lds	r17, 0x0343	; 0x800343 <P_cal+0x1>
    1196:	c8 01       	movw	r24, r16
    1198:	44 97       	sbiw	r24, 0x14	; 20
    119a:	68 17       	cp	r22, r24
    119c:	79 07       	cpc	r23, r25
    119e:	0c f4       	brge	.+2      	; 0x11a2 <pos_read+0x42>
    11a0:	b6 c0       	rjmp	.+364    	; 0x130e <pos_read+0x1ae>
    11a2:	88 96       	adiw	r24, 0x28	; 40
    11a4:	86 17       	cp	r24, r22
    11a6:	97 07       	cpc	r25, r23
    11a8:	0c f0       	brlt	.+2      	; 0x11ac <pos_read+0x4c>
    11aa:	4c c0       	rjmp	.+152    	; 0x1244 <pos_read+0xe4>
        ADC_X = 0;
    }
    else if(ADC_X > (P_cal.center_X + 20)){
        ADC_X = (ADC_X - P_cal.center_X) * 100.0 / (255.0 - P_cal.center_X);  //
    11ac:	60 1b       	sub	r22, r16
    11ae:	71 0b       	sbc	r23, r17
    11b0:	07 2e       	mov	r0, r23
    11b2:	00 0c       	add	r0, r0
    11b4:	88 0b       	sbc	r24, r24
    11b6:	99 0b       	sbc	r25, r25
    11b8:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <__floatsisf>
    11bc:	20 e0       	ldi	r18, 0x00	; 0
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	48 ec       	ldi	r20, 0xC8	; 200
    11c2:	52 e4       	ldi	r21, 0x42	; 66
    11c4:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <__mulsf3>
    11c8:	4b 01       	movw	r8, r22
    11ca:	5c 01       	movw	r10, r24
    11cc:	b8 01       	movw	r22, r16
    11ce:	11 0f       	add	r17, r17
    11d0:	88 0b       	sbc	r24, r24
    11d2:	99 0b       	sbc	r25, r25
    11d4:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <__floatsisf>
    11d8:	9b 01       	movw	r18, r22
    11da:	ac 01       	movw	r20, r24
    11dc:	60 e0       	ldi	r22, 0x00	; 0
    11de:	70 e0       	ldi	r23, 0x00	; 0
    11e0:	8f e7       	ldi	r24, 0x7F	; 127
    11e2:	93 e4       	ldi	r25, 0x43	; 67
    11e4:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <__subsf3>
    11e8:	9b 01       	movw	r18, r22
    11ea:	ac 01       	movw	r20, r24
    11ec:	c5 01       	movw	r24, r10
    11ee:	b4 01       	movw	r22, r8
    11f0:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <__divsf3>
    11f4:	0e 94 44 0c 	call	0x1888	; 0x1888 <__fixsfsi>
    11f8:	6b 01       	movw	r12, r22
    11fa:	26 c0       	rjmp	.+76     	; 0x1248 <pos_read+0xe8>
    }

    else if (ADC_X < (P_cal.center_X - 20)){
        ADC_X = (ADC_X / ((float)P_cal.center_X)) * 100 - 100;   // // Scaling when value is larger then center value
    11fc:	07 2e       	mov	r0, r23
    11fe:	00 0c       	add	r0, r0
    1200:	88 0b       	sbc	r24, r24
    1202:	99 0b       	sbc	r25, r25
    1204:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <__floatsisf>
    1208:	4b 01       	movw	r8, r22
    120a:	5c 01       	movw	r10, r24
    120c:	b8 01       	movw	r22, r16
    120e:	11 0f       	add	r17, r17
    1210:	88 0b       	sbc	r24, r24
    1212:	99 0b       	sbc	r25, r25
    1214:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <__floatsisf>
    1218:	9b 01       	movw	r18, r22
    121a:	ac 01       	movw	r20, r24
    121c:	c5 01       	movw	r24, r10
    121e:	b4 01       	movw	r22, r8
    1220:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <__divsf3>
    1224:	20 e0       	ldi	r18, 0x00	; 0
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	48 ec       	ldi	r20, 0xC8	; 200
    122a:	52 e4       	ldi	r21, 0x42	; 66
    122c:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <__mulsf3>
    1230:	20 e0       	ldi	r18, 0x00	; 0
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	48 ec       	ldi	r20, 0xC8	; 200
    1236:	52 e4       	ldi	r21, 0x42	; 66
    1238:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <__subsf3>
    123c:	0e 94 44 0c 	call	0x1888	; 0x1888 <__fixsfsi>
    1240:	6b 01       	movw	r12, r22
    1242:	02 c0       	rjmp	.+4      	; 0x1248 <pos_read+0xe8>
    int ADC_X = ADC_read(1);

    // X read

    if((ADC_X >= (P_cal.center_X - 20)) && (ADC_X <= (P_cal.center_X + 20))){ //Deadspace for joystick
        ADC_X = 0;
    1244:	c1 2c       	mov	r12, r1
    1246:	d1 2c       	mov	r13, r1
        ADC_X = (ADC_X / ((float)P_cal.center_X)) * 100 - 100;   // // Scaling when value is larger then center value
    }

    // Y read

    if(ADC_Y >= (P_cal.center_Y - 80) && ADC_Y <= (P_cal.center_Y + 80)){  //Deadspace for joystick
    1248:	00 91 44 03 	lds	r16, 0x0344	; 0x800344 <P_cal+0x2>
    124c:	10 91 45 03 	lds	r17, 0x0345	; 0x800345 <P_cal+0x3>
    1250:	c8 01       	movw	r24, r16
    1252:	80 55       	subi	r24, 0x50	; 80
    1254:	91 09       	sbc	r25, r1
    1256:	c8 17       	cp	r28, r24
    1258:	d9 07       	cpc	r29, r25
    125a:	0c f4       	brge	.+2      	; 0x125e <pos_read+0xfe>
    125c:	5f c0       	rjmp	.+190    	; 0x131c <pos_read+0x1bc>
    125e:	80 56       	subi	r24, 0x60	; 96
    1260:	9f 4f       	sbci	r25, 0xFF	; 255
    1262:	8c 17       	cp	r24, r28
    1264:	9d 07       	cpc	r25, r29
    1266:	0c f0       	brlt	.+2      	; 0x126a <pos_read+0x10a>
    1268:	4a c0       	rjmp	.+148    	; 0x12fe <pos_read+0x19e>
        ADC_Y = 0;
    }
    else if(ADC_Y > (P_cal.center_Y + 80)){
        ADC_Y = (ADC_Y - (P_cal.center_Y)) * 100.0 / (255.0 - P_cal.center_Y);  // Scaling when value is larger then center value
    126a:	c0 1b       	sub	r28, r16
    126c:	d1 0b       	sbc	r29, r17
    126e:	be 01       	movw	r22, r28
    1270:	dd 0f       	add	r29, r29
    1272:	88 0b       	sbc	r24, r24
    1274:	99 0b       	sbc	r25, r25
    1276:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <__floatsisf>
    127a:	20 e0       	ldi	r18, 0x00	; 0
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	48 ec       	ldi	r20, 0xC8	; 200
    1280:	52 e4       	ldi	r21, 0x42	; 66
    1282:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <__mulsf3>
    1286:	4b 01       	movw	r8, r22
    1288:	5c 01       	movw	r10, r24
    128a:	b8 01       	movw	r22, r16
    128c:	11 0f       	add	r17, r17
    128e:	88 0b       	sbc	r24, r24
    1290:	99 0b       	sbc	r25, r25
    1292:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <__floatsisf>
    1296:	9b 01       	movw	r18, r22
    1298:	ac 01       	movw	r20, r24
    129a:	60 e0       	ldi	r22, 0x00	; 0
    129c:	70 e0       	ldi	r23, 0x00	; 0
    129e:	8f e7       	ldi	r24, 0x7F	; 127
    12a0:	93 e4       	ldi	r25, 0x43	; 67
    12a2:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <__subsf3>
    12a6:	9b 01       	movw	r18, r22
    12a8:	ac 01       	movw	r20, r24
    12aa:	c5 01       	movw	r24, r10
    12ac:	b4 01       	movw	r22, r8
    12ae:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <__divsf3>
    12b2:	0e 94 44 0c 	call	0x1888	; 0x1888 <__fixsfsi>
    12b6:	25 c0       	rjmp	.+74     	; 0x1302 <pos_read+0x1a2>
    }

    else if (ADC_Y < (P_cal.center_Y - 80)){
        ADC_Y = (ADC_Y / ((float)P_cal.center_Y)) * 100 - 100;   // Scaling when value is smaller then center value
    12b8:	be 01       	movw	r22, r28
    12ba:	dd 0f       	add	r29, r29
    12bc:	88 0b       	sbc	r24, r24
    12be:	99 0b       	sbc	r25, r25
    12c0:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <__floatsisf>
    12c4:	4b 01       	movw	r8, r22
    12c6:	5c 01       	movw	r10, r24
    12c8:	b8 01       	movw	r22, r16
    12ca:	11 0f       	add	r17, r17
    12cc:	88 0b       	sbc	r24, r24
    12ce:	99 0b       	sbc	r25, r25
    12d0:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <__floatsisf>
    12d4:	9b 01       	movw	r18, r22
    12d6:	ac 01       	movw	r20, r24
    12d8:	c5 01       	movw	r24, r10
    12da:	b4 01       	movw	r22, r8
    12dc:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <__divsf3>
    12e0:	20 e0       	ldi	r18, 0x00	; 0
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	48 ec       	ldi	r20, 0xC8	; 200
    12e6:	52 e4       	ldi	r21, 0x42	; 66
    12e8:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <__mulsf3>
    12ec:	20 e0       	ldi	r18, 0x00	; 0
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	48 ec       	ldi	r20, 0xC8	; 200
    12f2:	52 e4       	ldi	r21, 0x42	; 66
    12f4:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <__subsf3>
    12f8:	0e 94 44 0c 	call	0x1888	; 0x1888 <__fixsfsi>
    12fc:	02 c0       	rjmp	.+4      	; 0x1302 <pos_read+0x1a2>
    }

    // Y read

    if(ADC_Y >= (P_cal.center_Y - 80) && ADC_Y <= (P_cal.center_Y + 80)){  //Deadspace for joystick
        ADC_Y = 0;
    12fe:	60 e0       	ldi	r22, 0x00	; 0
    1300:	70 e0       	ldi	r23, 0x00	; 0

    else if (ADC_Y < (P_cal.center_Y - 80)){
        ADC_Y = (ADC_Y / ((float)P_cal.center_Y)) * 100 - 100;   // Scaling when value is smaller then center value
    }

    pos -> posX = ADC_X;
    1302:	f7 01       	movw	r30, r14
    1304:	d1 82       	std	Z+1, r13	; 0x01
    1306:	c0 82       	st	Z, r12
    pos -> posY = ADC_Y;
    1308:	73 83       	std	Z+3, r23	; 0x03
    130a:	62 83       	std	Z+2, r22	; 0x02
}
    130c:	0e c0       	rjmp	.+28     	; 0x132a <pos_read+0x1ca>
    // X read

    if((ADC_X >= (P_cal.center_X - 20)) && (ADC_X <= (P_cal.center_X + 20))){ //Deadspace for joystick
        ADC_X = 0;
    }
    else if(ADC_X > (P_cal.center_X + 20)){
    130e:	c8 01       	movw	r24, r16
    1310:	44 96       	adiw	r24, 0x14	; 20
    1312:	86 17       	cp	r24, r22
    1314:	97 07       	cpc	r25, r23
    1316:	0c f4       	brge	.+2      	; 0x131a <pos_read+0x1ba>
    1318:	49 cf       	rjmp	.-366    	; 0x11ac <pos_read+0x4c>
    131a:	70 cf       	rjmp	.-288    	; 0x11fc <pos_read+0x9c>
    // Y read

    if(ADC_Y >= (P_cal.center_Y - 80) && ADC_Y <= (P_cal.center_Y + 80)){  //Deadspace for joystick
        ADC_Y = 0;
    }
    else if(ADC_Y > (P_cal.center_Y + 80)){
    131c:	c8 01       	movw	r24, r16
    131e:	80 5b       	subi	r24, 0xB0	; 176
    1320:	9f 4f       	sbci	r25, 0xFF	; 255
    1322:	8c 17       	cp	r24, r28
    1324:	9d 07       	cpc	r25, r29
    1326:	44 f6       	brge	.-112    	; 0x12b8 <pos_read+0x158>
    1328:	a0 cf       	rjmp	.-192    	; 0x126a <pos_read+0x10a>
        ADC_Y = (ADC_Y / ((float)P_cal.center_Y)) * 100 - 100;   // Scaling when value is smaller then center value
    }

    pos -> posX = ADC_X;
    pos -> posY = ADC_Y;
}
    132a:	df 91       	pop	r29
    132c:	cf 91       	pop	r28
    132e:	1f 91       	pop	r17
    1330:	0f 91       	pop	r16
    1332:	ff 90       	pop	r15
    1334:	ef 90       	pop	r14
    1336:	df 90       	pop	r13
    1338:	cf 90       	pop	r12
    133a:	bf 90       	pop	r11
    133c:	af 90       	pop	r10
    133e:	9f 90       	pop	r9
    1340:	8f 90       	pop	r8
    1342:	08 95       	ret

00001344 <joystick_direction>:

DIRECTION joystick_direction(void){
    1344:	8f 92       	push	r8
    1346:	9f 92       	push	r9
    1348:	af 92       	push	r10
    134a:	bf 92       	push	r11
    134c:	cf 92       	push	r12
    134e:	df 92       	push	r13
    1350:	ef 92       	push	r14
    1352:	ff 92       	push	r15
    1354:	cf 93       	push	r28
    1356:	df 93       	push	r29

    pos_read(&P_pos);
    1358:	86 e4       	ldi	r24, 0x46	; 70
    135a:	93 e0       	ldi	r25, 0x03	; 3
    135c:	0e 94 b0 08 	call	0x1160	; 0x1160 <pos_read>

    int angle = atan2(P_pos.posY, P_pos.posX);
    1360:	e6 e4       	ldi	r30, 0x46	; 70
    1362:	f3 e0       	ldi	r31, 0x03	; 3
    1364:	e0 80       	ld	r14, Z
    1366:	f1 80       	ldd	r15, Z+1	; 0x01
    1368:	c2 81       	ldd	r28, Z+2	; 0x02
    136a:	d3 81       	ldd	r29, Z+3	; 0x03
    136c:	b7 01       	movw	r22, r14
    136e:	0f 2c       	mov	r0, r15
    1370:	00 0c       	add	r0, r0
    1372:	88 0b       	sbc	r24, r24
    1374:	99 0b       	sbc	r25, r25
    1376:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <__floatsisf>
    137a:	4b 01       	movw	r8, r22
    137c:	5c 01       	movw	r10, r24
    137e:	be 01       	movw	r22, r28
    1380:	0d 2e       	mov	r0, r29
    1382:	00 0c       	add	r0, r0
    1384:	88 0b       	sbc	r24, r24
    1386:	99 0b       	sbc	r25, r25
    1388:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <__floatsisf>
    138c:	a5 01       	movw	r20, r10
    138e:	94 01       	movw	r18, r8
    1390:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <atan2>

    if(!P_pos.posY & !P_pos.posX){
    1394:	21 e0       	ldi	r18, 0x01	; 1
    1396:	cd 2b       	or	r28, r29
    1398:	09 f0       	breq	.+2      	; 0x139c <joystick_direction+0x58>
    139a:	20 e0       	ldi	r18, 0x00	; 0
    139c:	22 23       	and	r18, r18
    139e:	31 f0       	breq	.+12     	; 0x13ac <joystick_direction+0x68>
    13a0:	21 e0       	ldi	r18, 0x01	; 1
    13a2:	ef 28       	or	r14, r15
    13a4:	09 f0       	breq	.+2      	; 0x13a8 <joystick_direction+0x64>
    13a6:	20 e0       	ldi	r18, 0x00	; 0
    13a8:	21 11       	cpse	r18, r1
    13aa:	79 c0       	rjmp	.+242    	; 0x149e <joystick_direction+0x15a>
        return NEUTRAL;
    }

    else if(angle >= -PI / 4.0 & angle <= PI/4.0){
    13ac:	0e 94 44 0c 	call	0x1888	; 0x1888 <__fixsfsi>
    13b0:	07 2e       	mov	r0, r23
    13b2:	00 0c       	add	r0, r0
    13b4:	88 0b       	sbc	r24, r24
    13b6:	99 0b       	sbc	r25, r25
    13b8:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <__floatsisf>
    13bc:	6b 01       	movw	r12, r22
    13be:	7c 01       	movw	r14, r24
    13c0:	c1 e0       	ldi	r28, 0x01	; 1
    13c2:	2b ed       	ldi	r18, 0xDB	; 219
    13c4:	3f e0       	ldi	r19, 0x0F	; 15
    13c6:	49 e4       	ldi	r20, 0x49	; 73
    13c8:	5f eb       	ldi	r21, 0xBF	; 191
    13ca:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <__gesf2>
    13ce:	88 23       	and	r24, r24
    13d0:	0c f4       	brge	.+2      	; 0x13d4 <joystick_direction+0x90>
    13d2:	c0 e0       	ldi	r28, 0x00	; 0
    13d4:	cc 23       	and	r28, r28
    13d6:	71 f0       	breq	.+28     	; 0x13f4 <joystick_direction+0xb0>
    13d8:	c1 e0       	ldi	r28, 0x01	; 1
    13da:	2b ed       	ldi	r18, 0xDB	; 219
    13dc:	3f e0       	ldi	r19, 0x0F	; 15
    13de:	49 e4       	ldi	r20, 0x49	; 73
    13e0:	5f e3       	ldi	r21, 0x3F	; 63
    13e2:	c7 01       	movw	r24, r14
    13e4:	b6 01       	movw	r22, r12
    13e6:	0e 94 cd 0b 	call	0x179a	; 0x179a <__cmpsf2>
    13ea:	18 16       	cp	r1, r24
    13ec:	0c f4       	brge	.+2      	; 0x13f0 <joystick_direction+0xac>
    13ee:	c0 e0       	ldi	r28, 0x00	; 0
    13f0:	c1 11       	cpse	r28, r1
    13f2:	57 c0       	rjmp	.+174    	; 0x14a2 <joystick_direction+0x15e>
        return RIGHT;
    }

    else if(angle >= -3 * PI/4.0 & angle <= -PI / 4.0){
    13f4:	c1 e0       	ldi	r28, 0x01	; 1
    13f6:	24 ee       	ldi	r18, 0xE4	; 228
    13f8:	3b ec       	ldi	r19, 0xCB	; 203
    13fa:	46 e1       	ldi	r20, 0x16	; 22
    13fc:	50 ec       	ldi	r21, 0xC0	; 192
    13fe:	c7 01       	movw	r24, r14
    1400:	b6 01       	movw	r22, r12
    1402:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <__gesf2>
    1406:	88 23       	and	r24, r24
    1408:	0c f4       	brge	.+2      	; 0x140c <joystick_direction+0xc8>
    140a:	c0 e0       	ldi	r28, 0x00	; 0
    140c:	cc 23       	and	r28, r28
    140e:	71 f0       	breq	.+28     	; 0x142c <joystick_direction+0xe8>
    1410:	c1 e0       	ldi	r28, 0x01	; 1
    1412:	2b ed       	ldi	r18, 0xDB	; 219
    1414:	3f e0       	ldi	r19, 0x0F	; 15
    1416:	49 e4       	ldi	r20, 0x49	; 73
    1418:	5f eb       	ldi	r21, 0xBF	; 191
    141a:	c7 01       	movw	r24, r14
    141c:	b6 01       	movw	r22, r12
    141e:	0e 94 cd 0b 	call	0x179a	; 0x179a <__cmpsf2>
    1422:	18 16       	cp	r1, r24
    1424:	0c f4       	brge	.+2      	; 0x1428 <joystick_direction+0xe4>
    1426:	c0 e0       	ldi	r28, 0x00	; 0
    1428:	c1 11       	cpse	r28, r1
    142a:	3d c0       	rjmp	.+122    	; 0x14a6 <joystick_direction+0x162>
        return DOWN;
    }

    else if(angle >= 3 * PI/4 | angle <= -3* PI / 4.0){
    142c:	c1 e0       	ldi	r28, 0x01	; 1
    142e:	24 ee       	ldi	r18, 0xE4	; 228
    1430:	3b ec       	ldi	r19, 0xCB	; 203
    1432:	46 e1       	ldi	r20, 0x16	; 22
    1434:	50 e4       	ldi	r21, 0x40	; 64
    1436:	c7 01       	movw	r24, r14
    1438:	b6 01       	movw	r22, r12
    143a:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <__gesf2>
    143e:	88 23       	and	r24, r24
    1440:	0c f4       	brge	.+2      	; 0x1444 <joystick_direction+0x100>
    1442:	c0 e0       	ldi	r28, 0x00	; 0
    1444:	c1 11       	cpse	r28, r1
    1446:	31 c0       	rjmp	.+98     	; 0x14aa <joystick_direction+0x166>
    1448:	c1 e0       	ldi	r28, 0x01	; 1
    144a:	24 ee       	ldi	r18, 0xE4	; 228
    144c:	3b ec       	ldi	r19, 0xCB	; 203
    144e:	46 e1       	ldi	r20, 0x16	; 22
    1450:	50 ec       	ldi	r21, 0xC0	; 192
    1452:	c7 01       	movw	r24, r14
    1454:	b6 01       	movw	r22, r12
    1456:	0e 94 cd 0b 	call	0x179a	; 0x179a <__cmpsf2>
    145a:	18 16       	cp	r1, r24
    145c:	0c f4       	brge	.+2      	; 0x1460 <joystick_direction+0x11c>
    145e:	c0 e0       	ldi	r28, 0x00	; 0
    1460:	c1 11       	cpse	r28, r1
    1462:	23 c0       	rjmp	.+70     	; 0x14aa <joystick_direction+0x166>
        return LEFT;
    }

    else if(angle >= PI / 4 & angle <= 3*PI / 4.0){
    1464:	c1 e0       	ldi	r28, 0x01	; 1
    1466:	2b ed       	ldi	r18, 0xDB	; 219
    1468:	3f e0       	ldi	r19, 0x0F	; 15
    146a:	49 e4       	ldi	r20, 0x49	; 73
    146c:	5f e3       	ldi	r21, 0x3F	; 63
    146e:	c7 01       	movw	r24, r14
    1470:	b6 01       	movw	r22, r12
    1472:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <__gesf2>
    1476:	88 23       	and	r24, r24
    1478:	0c f4       	brge	.+2      	; 0x147c <joystick_direction+0x138>
    147a:	c0 e0       	ldi	r28, 0x00	; 0
    147c:	cc 23       	and	r28, r28
    147e:	71 f0       	breq	.+28     	; 0x149c <joystick_direction+0x158>
    1480:	c1 e0       	ldi	r28, 0x01	; 1
    1482:	24 ee       	ldi	r18, 0xE4	; 228
    1484:	3b ec       	ldi	r19, 0xCB	; 203
    1486:	46 e1       	ldi	r20, 0x16	; 22
    1488:	50 e4       	ldi	r21, 0x40	; 64
    148a:	c7 01       	movw	r24, r14
    148c:	b6 01       	movw	r22, r12
    148e:	0e 94 cd 0b 	call	0x179a	; 0x179a <__cmpsf2>
    1492:	18 16       	cp	r1, r24
    1494:	0c f4       	brge	.+2      	; 0x1498 <joystick_direction+0x154>
    1496:	c0 e0       	ldi	r28, 0x00	; 0
    1498:	c1 11       	cpse	r28, r1
    149a:	09 c0       	rjmp	.+18     	; 0x14ae <joystick_direction+0x16a>
        return UP;
    }
}
    149c:	09 c0       	rjmp	.+18     	; 0x14b0 <joystick_direction+0x16c>
    pos_read(&P_pos);

    int angle = atan2(P_pos.posY, P_pos.posX);

    if(!P_pos.posY & !P_pos.posX){
        return NEUTRAL;
    149e:	84 e0       	ldi	r24, 0x04	; 4
    14a0:	07 c0       	rjmp	.+14     	; 0x14b0 <joystick_direction+0x16c>
    }

    else if(angle >= -PI / 4.0 & angle <= PI/4.0){
        return RIGHT;
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	05 c0       	rjmp	.+10     	; 0x14b0 <joystick_direction+0x16c>
    }

    else if(angle >= -3 * PI/4.0 & angle <= -PI / 4.0){
        return DOWN;
    14a6:	83 e0       	ldi	r24, 0x03	; 3
    14a8:	03 c0       	rjmp	.+6      	; 0x14b0 <joystick_direction+0x16c>
    }

    else if(angle >= 3 * PI/4 | angle <= -3* PI / 4.0){
        return LEFT;
    14aa:	80 e0       	ldi	r24, 0x00	; 0
    14ac:	01 c0       	rjmp	.+2      	; 0x14b0 <joystick_direction+0x16c>
    }

    else if(angle >= PI / 4 & angle <= 3*PI / 4.0){
        return UP;
    14ae:	82 e0       	ldi	r24, 0x02	; 2
    }
}
    14b0:	df 91       	pop	r29
    14b2:	cf 91       	pop	r28
    14b4:	ff 90       	pop	r15
    14b6:	ef 90       	pop	r14
    14b8:	df 90       	pop	r13
    14ba:	cf 90       	pop	r12
    14bc:	bf 90       	pop	r11
    14be:	af 90       	pop	r10
    14c0:	9f 90       	pop	r9
    14c2:	8f 90       	pop	r8
    14c4:	08 95       	ret

000014c6 <pos_readSettings>:

void pos_readSettings(void){
	
	DDRB &= ~(1 << PB1);
    14c6:	b9 98       	cbi	0x17, 1	; 23
	DDRD &= ~(1 << PD4);
    14c8:	8c 98       	cbi	0x11, 4	; 17
	DDRD &= ~(1 << PD5);
    14ca:	8d 98       	cbi	0x11, 5	; 17

	PORTB |= (1 << PB1); // internal pull up enable
    14cc:	c1 9a       	sbi	0x18, 1	; 24
    14ce:	08 95       	ret

000014d0 <usb_button_pushed>:

uint8_t usb_button_pushed(USB_BUTTON BUTTON){

    uint8_t pressed;

    if(BUTTON == LEFT_BUTTON){
    14d0:	81 30       	cpi	r24, 0x01	; 1
    14d2:	19 f4       	brne	.+6      	; 0x14da <usb_button_pushed+0xa>
        pressed = (PIND & (1 << PD4) );
    14d4:	80 b3       	in	r24, 0x10	; 16
    14d6:	80 71       	andi	r24, 0x10	; 16
    14d8:	08 95       	ret

		}

    if(BUTTON == RIGHT_BUTTON){
    14da:	81 11       	cpse	r24, r1
    14dc:	03 c0       	rjmp	.+6      	; 0x14e4 <usb_button_pushed+0x14>
        pressed =  (PIND & (1 << PD5) );
    14de:	80 b3       	in	r24, 0x10	; 16
    14e0:	80 72       	andi	r24, 0x20	; 32
    14e2:	08 95       	ret
		}

    if(BUTTON == JOYSTICK_BUTTON){
    14e4:	82 30       	cpi	r24, 0x02	; 2
    14e6:	31 f4       	brne	.+12     	; 0x14f4 <usb_button_pushed+0x24>
        pressed =  (PINB & (1 << PB1) );
    14e8:	86 b3       	in	r24, 0x16	; 22
        return !pressed;
    14ea:	86 95       	lsr	r24
    14ec:	81 70       	andi	r24, 0x01	; 1
    14ee:	91 e0       	ldi	r25, 0x01	; 1
    14f0:	89 27       	eor	r24, r25
    14f2:	08 95       	ret
    14f4:	80 e0       	ldi	r24, 0x00	; 0
		}

    return pressed;
}
    14f6:	08 95       	ret

000014f8 <main>:
//#include "notes.h"


int main(void)
{
    InitMusic();
    14f8:	0e 94 fe 03 	call	0x7fc	; 0x7fc <InitMusic>
	//playMusic(end_melody2, 1, 2);
	
    SRAM_init();
    14fc:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <SRAM_init>
    ADC_timer_init();
    1500:	0e 94 0a 02 	call	0x414	; 0x414 <ADC_timer_init>
    USART_init();
    1504:	0e 94 de 0a 	call	0x15bc	; 0x15bc <USART_init>
    fdevopen(USART_send, USART_receive);
    1508:	66 ee       	ldi	r22, 0xE6	; 230
    150a:	7a e0       	ldi	r23, 0x0A	; 10
    150c:	8a ee       	ldi	r24, 0xEA	; 234
    150e:	9a e0       	ldi	r25, 0x0A	; 10
    1510:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <fdevopen>
    ADC_calibrate(&P_cal);
    1514:	82 e4       	ldi	r24, 0x42	; 66
    1516:	93 e0       	ldi	r25, 0x03	; 3
    1518:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <ADC_calibrate>
    OLED_init();
    151c:	0e 94 85 04 	call	0x90a	; 0x90a <OLED_init>
    pos_readSettings();
    1520:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <pos_readSettings>
    oled_clear();
    1524:	0e 94 61 04 	call	0x8c2	; 0x8c2 <oled_clear>
	CAN_init(MODE_NORMAL);
    1528:	80 e0       	ldi	r24, 0x00	; 0
    152a:	0e 94 17 02 	call	0x42e	; 0x42e <CAN_init>
	
    menu();
    152e:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <menu>

    printf("Initiating node 1 \n\r");
    1532:	88 e3       	ldi	r24, 0x38	; 56
    1534:	92 e0       	ldi	r25, 0x02	; 2
    1536:	9f 93       	push	r25
    1538:	8f 93       	push	r24
    153a:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <printf>
    153e:	0f 90       	pop	r0
    1540:	0f 90       	pop	r0
	   joyStick_Can_Message();
        
        uint8_t sliderX = ADC_read(3);
        uint8_t sliderY = ADC_read(2);
  
        printf("Pos X val is %4d , Pos Y is %4d, sliderX is %4d,  sliderY is %4d  \n \r", P_pos.posX, P_pos.posY, sliderX, sliderY);
    1542:	c6 e4       	ldi	r28, 0x46	; 70
    1544:	d3 e0       	ldi	r29, 0x03	; 3
    1546:	0d e4       	ldi	r16, 0x4D	; 77
    1548:	12 e0       	ldi	r17, 0x02	; 2
    printf("Initiating node 1 \n\r");
    
    //printf("showscore is: %c")
    while (1) {

	   joyStick_Can_Message();
    154a:	0e 94 06 03 	call	0x60c	; 0x60c <joyStick_Can_Message>
        
        uint8_t sliderX = ADC_read(3);
    154e:	83 e0       	ldi	r24, 0x03	; 3
    1550:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ADC_read>
    1554:	f8 2e       	mov	r15, r24
        uint8_t sliderY = ADC_read(2);
    1556:	82 e0       	ldi	r24, 0x02	; 2
    1558:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ADC_read>
  
        printf("Pos X val is %4d , Pos Y is %4d, sliderX is %4d,  sliderY is %4d  \n \r", P_pos.posX, P_pos.posY, sliderX, sliderY);
    155c:	1f 92       	push	r1
    155e:	8f 93       	push	r24
    1560:	1f 92       	push	r1
    1562:	ff 92       	push	r15
    1564:	8b 81       	ldd	r24, Y+3	; 0x03
    1566:	8f 93       	push	r24
    1568:	8a 81       	ldd	r24, Y+2	; 0x02
    156a:	8f 93       	push	r24
    156c:	89 81       	ldd	r24, Y+1	; 0x01
    156e:	8f 93       	push	r24
    1570:	88 81       	ld	r24, Y
    1572:	8f 93       	push	r24
    1574:	1f 93       	push	r17
    1576:	0f 93       	push	r16
    1578:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <printf>
    157c:	8d b7       	in	r24, 0x3d	; 61
    157e:	9e b7       	in	r25, 0x3e	; 62
    1580:	0a 96       	adiw	r24, 0x0a	; 10
    1582:	0f b6       	in	r0, 0x3f	; 63
    1584:	f8 94       	cli
    1586:	9e bf       	out	0x3e, r25	; 62
    1588:	0f be       	out	0x3f, r0	; 63
    158a:	8d bf       	out	0x3d, r24	; 61
    158c:	de cf       	rjmp	.-68     	; 0x154a <main+0x52>

0000158e <spi_write>:
#include "spi_driver.h"


void spi_write(char data){

    SPDR = data;
    158e:	8f b9       	out	0x0f, r24	; 15
    while( !(SPSR & (1<<SPIF)) );
    1590:	77 9b       	sbis	0x0e, 7	; 14
    1592:	fe cf       	rjmp	.-4      	; 0x1590 <spi_write+0x2>

}
    1594:	08 95       	ret

00001596 <spi_read>:

char spi_read(void){

    spi_write(DUMMY);
    1596:	86 e5       	ldi	r24, 0x56	; 86
    1598:	0e 94 c7 0a 	call	0x158e	; 0x158e <spi_write>
    return SPDR;
}
    159c:	8f b1       	in	r24, 0x0f	; 15

    159e:	08 95       	ret

000015a0 <spi_init>:
void spi_init(void){
    DDR_SPI |= (1 << SCK) | (1 << MOSI) | (1 << SS);

    15a0:	87 b3       	in	r24, 0x17	; 23
    15a2:	80 6b       	ori	r24, 0xB0	; 176
    15a4:	87 bb       	out	0x17, r24	; 23
    SPCR |= (1 << SPE) | (1 << MSTR) | (1<<SPR0);  // Enable SPI and set as master

    15a6:	8d b1       	in	r24, 0x0d	; 13
    15a8:	81 65       	ori	r24, 0x51	; 81
    15aa:	8d b9       	out	0x0d, r24	; 13
    15ac:	08 95       	ret

000015ae <SRAM_init>:
 */

#include "SRAM_driver.h"

void SRAM_init(void){
    MCUCR |= (1 << SRE);     //external SRAM enable (mcu control register)
    15ae:	85 b7       	in	r24, 0x35	; 53
    15b0:	80 68       	ori	r24, 0x80	; 128
    15b2:	85 bf       	out	0x35, r24	; 53
    SFIOR |= (1 << XMM2);    //excludes memory occupied by JTAG
    15b4:	80 b7       	in	r24, 0x30	; 48
    15b6:	80 62       	ori	r24, 0x20	; 32
    15b8:	80 bf       	out	0x30, r24	; 48
    15ba:	08 95       	ret

000015bc <USART_init>:
 */
#include "UART_driver.h"


void USART_init(void){
    UBRR0L = (uint8_t)(BAUD_PRESCALER);
    15bc:	8f e1       	ldi	r24, 0x1F	; 31
    15be:	89 b9       	out	0x09, r24	; 9
    UBRR0H = (uint8_t)((uint8_t) BAUD_PRESCALER>>8);
    15c0:	10 bc       	out	0x20, r1	; 32
    UCSR0B = (1 << RXEN0)|(1 << TXEN0);
    15c2:	88 e1       	ldi	r24, 0x18	; 24
    15c4:	8a b9       	out	0x0a, r24	; 10
    UCSR0C = (1 << URSEL0)|(1 << USBS0)|(3 << UCSZ00);
    15c6:	8e e8       	ldi	r24, 0x8E	; 142
    15c8:	80 bd       	out	0x20, r24	; 32
    15ca:	08 95       	ret

000015cc <USART_receive>:
}

unsigned char USART_receive(void){
    while(!(UCSR0A & (1 << RXC0)));
    15cc:	5f 9b       	sbis	0x0b, 7	; 11
    15ce:	fe cf       	rjmp	.-4      	; 0x15cc <USART_receive>
    return UDR0;
    15d0:	8c b1       	in	r24, 0x0c	; 12
}
    15d2:	08 95       	ret

000015d4 <USART_send>:

void USART_send( unsigned char data){
    while(!(UCSR0A & (1 << UDRE0)));
    15d4:	5d 9b       	sbis	0x0b, 5	; 11
    15d6:	fe cf       	rjmp	.-4      	; 0x15d4 <USART_send>
    UDR0 = data;
    15d8:	8c b9       	out	0x0c, r24	; 12
    15da:	08 95       	ret

000015dc <__subsf3>:
    15dc:	50 58       	subi	r21, 0x80	; 128

000015de <__addsf3>:
    15de:	bb 27       	eor	r27, r27
    15e0:	aa 27       	eor	r26, r26
    15e2:	0e 94 06 0b 	call	0x160c	; 0x160c <__addsf3x>
    15e6:	0c 94 19 0d 	jmp	0x1a32	; 0x1a32 <__fp_round>
    15ea:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <__fp_pscA>
    15ee:	38 f0       	brcs	.+14     	; 0x15fe <__addsf3+0x20>
    15f0:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <__fp_pscB>
    15f4:	20 f0       	brcs	.+8      	; 0x15fe <__addsf3+0x20>
    15f6:	39 f4       	brne	.+14     	; 0x1606 <__addsf3+0x28>
    15f8:	9f 3f       	cpi	r25, 0xFF	; 255
    15fa:	19 f4       	brne	.+6      	; 0x1602 <__addsf3+0x24>
    15fc:	26 f4       	brtc	.+8      	; 0x1606 <__addsf3+0x28>
    15fe:	0c 94 e1 0c 	jmp	0x19c2	; 0x19c2 <__fp_nan>
    1602:	0e f4       	brtc	.+2      	; 0x1606 <__addsf3+0x28>
    1604:	e0 95       	com	r30
    1606:	e7 fb       	bst	r30, 7
    1608:	0c 94 db 0c 	jmp	0x19b6	; 0x19b6 <__fp_inf>

0000160c <__addsf3x>:
    160c:	e9 2f       	mov	r30, r25
    160e:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__fp_split3>
    1612:	58 f3       	brcs	.-42     	; 0x15ea <__addsf3+0xc>
    1614:	ba 17       	cp	r27, r26
    1616:	62 07       	cpc	r22, r18
    1618:	73 07       	cpc	r23, r19
    161a:	84 07       	cpc	r24, r20
    161c:	95 07       	cpc	r25, r21
    161e:	20 f0       	brcs	.+8      	; 0x1628 <__addsf3x+0x1c>
    1620:	79 f4       	brne	.+30     	; 0x1640 <__addsf3x+0x34>
    1622:	a6 f5       	brtc	.+104    	; 0x168c <__addsf3x+0x80>
    1624:	0c 94 4c 0d 	jmp	0x1a98	; 0x1a98 <__fp_zero>
    1628:	0e f4       	brtc	.+2      	; 0x162c <__addsf3x+0x20>
    162a:	e0 95       	com	r30
    162c:	0b 2e       	mov	r0, r27
    162e:	ba 2f       	mov	r27, r26
    1630:	a0 2d       	mov	r26, r0
    1632:	0b 01       	movw	r0, r22
    1634:	b9 01       	movw	r22, r18
    1636:	90 01       	movw	r18, r0
    1638:	0c 01       	movw	r0, r24
    163a:	ca 01       	movw	r24, r20
    163c:	a0 01       	movw	r20, r0
    163e:	11 24       	eor	r1, r1
    1640:	ff 27       	eor	r31, r31
    1642:	59 1b       	sub	r21, r25
    1644:	99 f0       	breq	.+38     	; 0x166c <__addsf3x+0x60>
    1646:	59 3f       	cpi	r21, 0xF9	; 249
    1648:	50 f4       	brcc	.+20     	; 0x165e <__addsf3x+0x52>
    164a:	50 3e       	cpi	r21, 0xE0	; 224
    164c:	68 f1       	brcs	.+90     	; 0x16a8 <__addsf3x+0x9c>
    164e:	1a 16       	cp	r1, r26
    1650:	f0 40       	sbci	r31, 0x00	; 0
    1652:	a2 2f       	mov	r26, r18
    1654:	23 2f       	mov	r18, r19
    1656:	34 2f       	mov	r19, r20
    1658:	44 27       	eor	r20, r20
    165a:	58 5f       	subi	r21, 0xF8	; 248
    165c:	f3 cf       	rjmp	.-26     	; 0x1644 <__addsf3x+0x38>
    165e:	46 95       	lsr	r20
    1660:	37 95       	ror	r19
    1662:	27 95       	ror	r18
    1664:	a7 95       	ror	r26
    1666:	f0 40       	sbci	r31, 0x00	; 0
    1668:	53 95       	inc	r21
    166a:	c9 f7       	brne	.-14     	; 0x165e <__addsf3x+0x52>
    166c:	7e f4       	brtc	.+30     	; 0x168c <__addsf3x+0x80>
    166e:	1f 16       	cp	r1, r31
    1670:	ba 0b       	sbc	r27, r26
    1672:	62 0b       	sbc	r22, r18
    1674:	73 0b       	sbc	r23, r19
    1676:	84 0b       	sbc	r24, r20
    1678:	ba f0       	brmi	.+46     	; 0x16a8 <__addsf3x+0x9c>
    167a:	91 50       	subi	r25, 0x01	; 1
    167c:	a1 f0       	breq	.+40     	; 0x16a6 <__addsf3x+0x9a>
    167e:	ff 0f       	add	r31, r31
    1680:	bb 1f       	adc	r27, r27
    1682:	66 1f       	adc	r22, r22
    1684:	77 1f       	adc	r23, r23
    1686:	88 1f       	adc	r24, r24
    1688:	c2 f7       	brpl	.-16     	; 0x167a <__addsf3x+0x6e>
    168a:	0e c0       	rjmp	.+28     	; 0x16a8 <__addsf3x+0x9c>
    168c:	ba 0f       	add	r27, r26
    168e:	62 1f       	adc	r22, r18
    1690:	73 1f       	adc	r23, r19
    1692:	84 1f       	adc	r24, r20
    1694:	48 f4       	brcc	.+18     	; 0x16a8 <__addsf3x+0x9c>
    1696:	87 95       	ror	r24
    1698:	77 95       	ror	r23
    169a:	67 95       	ror	r22
    169c:	b7 95       	ror	r27
    169e:	f7 95       	ror	r31
    16a0:	9e 3f       	cpi	r25, 0xFE	; 254
    16a2:	08 f0       	brcs	.+2      	; 0x16a6 <__addsf3x+0x9a>
    16a4:	b0 cf       	rjmp	.-160    	; 0x1606 <__addsf3+0x28>
    16a6:	93 95       	inc	r25
    16a8:	88 0f       	add	r24, r24
    16aa:	08 f0       	brcs	.+2      	; 0x16ae <__addsf3x+0xa2>
    16ac:	99 27       	eor	r25, r25
    16ae:	ee 0f       	add	r30, r30
    16b0:	97 95       	ror	r25
    16b2:	87 95       	ror	r24
    16b4:	08 95       	ret
    16b6:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <__fp_pscA>
    16ba:	60 f0       	brcs	.+24     	; 0x16d4 <__addsf3x+0xc8>
    16bc:	80 e8       	ldi	r24, 0x80	; 128
    16be:	91 e0       	ldi	r25, 0x01	; 1
    16c0:	09 f4       	brne	.+2      	; 0x16c4 <__addsf3x+0xb8>
    16c2:	9e ef       	ldi	r25, 0xFE	; 254
    16c4:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <__fp_pscB>
    16c8:	28 f0       	brcs	.+10     	; 0x16d4 <__addsf3x+0xc8>
    16ca:	40 e8       	ldi	r20, 0x80	; 128
    16cc:	51 e0       	ldi	r21, 0x01	; 1
    16ce:	71 f4       	brne	.+28     	; 0x16ec <atan2+0x10>
    16d0:	5e ef       	ldi	r21, 0xFE	; 254
    16d2:	0c c0       	rjmp	.+24     	; 0x16ec <atan2+0x10>
    16d4:	0c 94 e1 0c 	jmp	0x19c2	; 0x19c2 <__fp_nan>
    16d8:	0c 94 4c 0d 	jmp	0x1a98	; 0x1a98 <__fp_zero>

000016dc <atan2>:
    16dc:	e9 2f       	mov	r30, r25
    16de:	e0 78       	andi	r30, 0x80	; 128
    16e0:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__fp_split3>
    16e4:	40 f3       	brcs	.-48     	; 0x16b6 <__addsf3x+0xaa>
    16e6:	09 2e       	mov	r0, r25
    16e8:	05 2a       	or	r0, r21
    16ea:	b1 f3       	breq	.-20     	; 0x16d8 <__addsf3x+0xcc>
    16ec:	26 17       	cp	r18, r22
    16ee:	37 07       	cpc	r19, r23
    16f0:	48 07       	cpc	r20, r24
    16f2:	59 07       	cpc	r21, r25
    16f4:	38 f0       	brcs	.+14     	; 0x1704 <atan2+0x28>
    16f6:	0e 2e       	mov	r0, r30
    16f8:	07 f8       	bld	r0, 7
    16fa:	e0 25       	eor	r30, r0
    16fc:	69 f0       	breq	.+26     	; 0x1718 <atan2+0x3c>
    16fe:	e0 25       	eor	r30, r0
    1700:	e0 64       	ori	r30, 0x40	; 64
    1702:	0a c0       	rjmp	.+20     	; 0x1718 <atan2+0x3c>
    1704:	ef 63       	ori	r30, 0x3F	; 63
    1706:	07 f8       	bld	r0, 7
    1708:	00 94       	com	r0
    170a:	07 fa       	bst	r0, 7
    170c:	db 01       	movw	r26, r22
    170e:	b9 01       	movw	r22, r18
    1710:	9d 01       	movw	r18, r26
    1712:	dc 01       	movw	r26, r24
    1714:	ca 01       	movw	r24, r20
    1716:	ad 01       	movw	r20, r26
    1718:	ef 93       	push	r30
    171a:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <__divsf3_pse>
    171e:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <__fp_round>
    1722:	0e 94 9e 0b 	call	0x173c	; 0x173c <atan>
    1726:	5f 91       	pop	r21
    1728:	55 23       	and	r21, r21
    172a:	39 f0       	breq	.+14     	; 0x173a <atan2+0x5e>
    172c:	2b ed       	ldi	r18, 0xDB	; 219
    172e:	3f e0       	ldi	r19, 0x0F	; 15
    1730:	49 e4       	ldi	r20, 0x49	; 73
    1732:	50 fd       	sbrc	r21, 0
    1734:	49 ec       	ldi	r20, 0xC9	; 201
    1736:	0c 94 ef 0a 	jmp	0x15de	; 0x15de <__addsf3>
    173a:	08 95       	ret

0000173c <atan>:
    173c:	df 93       	push	r29
    173e:	dd 27       	eor	r29, r29
    1740:	b9 2f       	mov	r27, r25
    1742:	bf 77       	andi	r27, 0x7F	; 127
    1744:	40 e8       	ldi	r20, 0x80	; 128
    1746:	5f e3       	ldi	r21, 0x3F	; 63
    1748:	16 16       	cp	r1, r22
    174a:	17 06       	cpc	r1, r23
    174c:	48 07       	cpc	r20, r24
    174e:	5b 07       	cpc	r21, r27
    1750:	18 f4       	brcc	.+6      	; 0x1758 <atan+0x1c>
    1752:	d9 2f       	mov	r29, r25
    1754:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <inverse>
    1758:	9f 93       	push	r25
    175a:	8f 93       	push	r24
    175c:	7f 93       	push	r23
    175e:	6f 93       	push	r22
    1760:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <square>
    1764:	e0 e7       	ldi	r30, 0x70	; 112
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <__fp_powser>
    176c:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <__fp_round>
    1770:	2f 91       	pop	r18
    1772:	3f 91       	pop	r19
    1774:	4f 91       	pop	r20
    1776:	5f 91       	pop	r21
    1778:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <__mulsf3x>
    177c:	dd 23       	and	r29, r29
    177e:	51 f0       	breq	.+20     	; 0x1794 <atan+0x58>
    1780:	90 58       	subi	r25, 0x80	; 128
    1782:	a2 ea       	ldi	r26, 0xA2	; 162
    1784:	2a ed       	ldi	r18, 0xDA	; 218
    1786:	3f e0       	ldi	r19, 0x0F	; 15
    1788:	49 ec       	ldi	r20, 0xC9	; 201
    178a:	5f e3       	ldi	r21, 0x3F	; 63
    178c:	d0 78       	andi	r29, 0x80	; 128
    178e:	5d 27       	eor	r21, r29
    1790:	0e 94 06 0b 	call	0x160c	; 0x160c <__addsf3x>
    1794:	df 91       	pop	r29
    1796:	0c 94 19 0d 	jmp	0x1a32	; 0x1a32 <__fp_round>

0000179a <__cmpsf2>:
    179a:	0e 94 b7 0c 	call	0x196e	; 0x196e <__fp_cmp>
    179e:	08 f4       	brcc	.+2      	; 0x17a2 <__cmpsf2+0x8>
    17a0:	81 e0       	ldi	r24, 0x01	; 1
    17a2:	08 95       	ret

000017a4 <__divsf3>:
    17a4:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <__divsf3x>
    17a8:	0c 94 19 0d 	jmp	0x1a32	; 0x1a32 <__fp_round>
    17ac:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <__fp_pscB>
    17b0:	58 f0       	brcs	.+22     	; 0x17c8 <__divsf3+0x24>
    17b2:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <__fp_pscA>
    17b6:	40 f0       	brcs	.+16     	; 0x17c8 <__divsf3+0x24>
    17b8:	29 f4       	brne	.+10     	; 0x17c4 <__divsf3+0x20>
    17ba:	5f 3f       	cpi	r21, 0xFF	; 255
    17bc:	29 f0       	breq	.+10     	; 0x17c8 <__divsf3+0x24>
    17be:	0c 94 db 0c 	jmp	0x19b6	; 0x19b6 <__fp_inf>
    17c2:	51 11       	cpse	r21, r1
    17c4:	0c 94 4d 0d 	jmp	0x1a9a	; 0x1a9a <__fp_szero>
    17c8:	0c 94 e1 0c 	jmp	0x19c2	; 0x19c2 <__fp_nan>

000017cc <__divsf3x>:
    17cc:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__fp_split3>
    17d0:	68 f3       	brcs	.-38     	; 0x17ac <__divsf3+0x8>

000017d2 <__divsf3_pse>:
    17d2:	99 23       	and	r25, r25
    17d4:	b1 f3       	breq	.-20     	; 0x17c2 <__divsf3+0x1e>
    17d6:	55 23       	and	r21, r21
    17d8:	91 f3       	breq	.-28     	; 0x17be <__divsf3+0x1a>
    17da:	95 1b       	sub	r25, r21
    17dc:	55 0b       	sbc	r21, r21
    17de:	bb 27       	eor	r27, r27
    17e0:	aa 27       	eor	r26, r26
    17e2:	62 17       	cp	r22, r18
    17e4:	73 07       	cpc	r23, r19
    17e6:	84 07       	cpc	r24, r20
    17e8:	38 f0       	brcs	.+14     	; 0x17f8 <__divsf3_pse+0x26>
    17ea:	9f 5f       	subi	r25, 0xFF	; 255
    17ec:	5f 4f       	sbci	r21, 0xFF	; 255
    17ee:	22 0f       	add	r18, r18
    17f0:	33 1f       	adc	r19, r19
    17f2:	44 1f       	adc	r20, r20
    17f4:	aa 1f       	adc	r26, r26
    17f6:	a9 f3       	breq	.-22     	; 0x17e2 <__divsf3_pse+0x10>
    17f8:	35 d0       	rcall	.+106    	; 0x1864 <__divsf3_pse+0x92>
    17fa:	0e 2e       	mov	r0, r30
    17fc:	3a f0       	brmi	.+14     	; 0x180c <__divsf3_pse+0x3a>
    17fe:	e0 e8       	ldi	r30, 0x80	; 128
    1800:	32 d0       	rcall	.+100    	; 0x1866 <__divsf3_pse+0x94>
    1802:	91 50       	subi	r25, 0x01	; 1
    1804:	50 40       	sbci	r21, 0x00	; 0
    1806:	e6 95       	lsr	r30
    1808:	00 1c       	adc	r0, r0
    180a:	ca f7       	brpl	.-14     	; 0x17fe <__divsf3_pse+0x2c>
    180c:	2b d0       	rcall	.+86     	; 0x1864 <__divsf3_pse+0x92>
    180e:	fe 2f       	mov	r31, r30
    1810:	29 d0       	rcall	.+82     	; 0x1864 <__divsf3_pse+0x92>
    1812:	66 0f       	add	r22, r22
    1814:	77 1f       	adc	r23, r23
    1816:	88 1f       	adc	r24, r24
    1818:	bb 1f       	adc	r27, r27
    181a:	26 17       	cp	r18, r22
    181c:	37 07       	cpc	r19, r23
    181e:	48 07       	cpc	r20, r24
    1820:	ab 07       	cpc	r26, r27
    1822:	b0 e8       	ldi	r27, 0x80	; 128
    1824:	09 f0       	breq	.+2      	; 0x1828 <__divsf3_pse+0x56>
    1826:	bb 0b       	sbc	r27, r27
    1828:	80 2d       	mov	r24, r0
    182a:	bf 01       	movw	r22, r30
    182c:	ff 27       	eor	r31, r31
    182e:	93 58       	subi	r25, 0x83	; 131
    1830:	5f 4f       	sbci	r21, 0xFF	; 255
    1832:	3a f0       	brmi	.+14     	; 0x1842 <__divsf3_pse+0x70>
    1834:	9e 3f       	cpi	r25, 0xFE	; 254
    1836:	51 05       	cpc	r21, r1
    1838:	78 f0       	brcs	.+30     	; 0x1858 <__divsf3_pse+0x86>
    183a:	0c 94 db 0c 	jmp	0x19b6	; 0x19b6 <__fp_inf>
    183e:	0c 94 4d 0d 	jmp	0x1a9a	; 0x1a9a <__fp_szero>
    1842:	5f 3f       	cpi	r21, 0xFF	; 255
    1844:	e4 f3       	brlt	.-8      	; 0x183e <__divsf3_pse+0x6c>
    1846:	98 3e       	cpi	r25, 0xE8	; 232
    1848:	d4 f3       	brlt	.-12     	; 0x183e <__divsf3_pse+0x6c>
    184a:	86 95       	lsr	r24
    184c:	77 95       	ror	r23
    184e:	67 95       	ror	r22
    1850:	b7 95       	ror	r27
    1852:	f7 95       	ror	r31
    1854:	9f 5f       	subi	r25, 0xFF	; 255
    1856:	c9 f7       	brne	.-14     	; 0x184a <__divsf3_pse+0x78>
    1858:	88 0f       	add	r24, r24
    185a:	91 1d       	adc	r25, r1
    185c:	96 95       	lsr	r25
    185e:	87 95       	ror	r24
    1860:	97 f9       	bld	r25, 7
    1862:	08 95       	ret
    1864:	e1 e0       	ldi	r30, 0x01	; 1
    1866:	66 0f       	add	r22, r22
    1868:	77 1f       	adc	r23, r23
    186a:	88 1f       	adc	r24, r24
    186c:	bb 1f       	adc	r27, r27
    186e:	62 17       	cp	r22, r18
    1870:	73 07       	cpc	r23, r19
    1872:	84 07       	cpc	r24, r20
    1874:	ba 07       	cpc	r27, r26
    1876:	20 f0       	brcs	.+8      	; 0x1880 <__divsf3_pse+0xae>
    1878:	62 1b       	sub	r22, r18
    187a:	73 0b       	sbc	r23, r19
    187c:	84 0b       	sbc	r24, r20
    187e:	ba 0b       	sbc	r27, r26
    1880:	ee 1f       	adc	r30, r30
    1882:	88 f7       	brcc	.-30     	; 0x1866 <__divsf3_pse+0x94>
    1884:	e0 95       	com	r30
    1886:	08 95       	ret

00001888 <__fixsfsi>:
    1888:	0e 94 4b 0c 	call	0x1896	; 0x1896 <__fixunssfsi>
    188c:	68 94       	set
    188e:	b1 11       	cpse	r27, r1
    1890:	0c 94 4d 0d 	jmp	0x1a9a	; 0x1a9a <__fp_szero>
    1894:	08 95       	ret

00001896 <__fixunssfsi>:
    1896:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <__fp_splitA>
    189a:	88 f0       	brcs	.+34     	; 0x18be <__fixunssfsi+0x28>
    189c:	9f 57       	subi	r25, 0x7F	; 127
    189e:	98 f0       	brcs	.+38     	; 0x18c6 <__fixunssfsi+0x30>
    18a0:	b9 2f       	mov	r27, r25
    18a2:	99 27       	eor	r25, r25
    18a4:	b7 51       	subi	r27, 0x17	; 23
    18a6:	b0 f0       	brcs	.+44     	; 0x18d4 <__fixunssfsi+0x3e>
    18a8:	e1 f0       	breq	.+56     	; 0x18e2 <__fixunssfsi+0x4c>
    18aa:	66 0f       	add	r22, r22
    18ac:	77 1f       	adc	r23, r23
    18ae:	88 1f       	adc	r24, r24
    18b0:	99 1f       	adc	r25, r25
    18b2:	1a f0       	brmi	.+6      	; 0x18ba <__fixunssfsi+0x24>
    18b4:	ba 95       	dec	r27
    18b6:	c9 f7       	brne	.-14     	; 0x18aa <__fixunssfsi+0x14>
    18b8:	14 c0       	rjmp	.+40     	; 0x18e2 <__fixunssfsi+0x4c>
    18ba:	b1 30       	cpi	r27, 0x01	; 1
    18bc:	91 f0       	breq	.+36     	; 0x18e2 <__fixunssfsi+0x4c>
    18be:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <__fp_zero>
    18c2:	b1 e0       	ldi	r27, 0x01	; 1
    18c4:	08 95       	ret
    18c6:	0c 94 4c 0d 	jmp	0x1a98	; 0x1a98 <__fp_zero>
    18ca:	67 2f       	mov	r22, r23
    18cc:	78 2f       	mov	r23, r24
    18ce:	88 27       	eor	r24, r24
    18d0:	b8 5f       	subi	r27, 0xF8	; 248
    18d2:	39 f0       	breq	.+14     	; 0x18e2 <__fixunssfsi+0x4c>
    18d4:	b9 3f       	cpi	r27, 0xF9	; 249
    18d6:	cc f3       	brlt	.-14     	; 0x18ca <__fixunssfsi+0x34>
    18d8:	86 95       	lsr	r24
    18da:	77 95       	ror	r23
    18dc:	67 95       	ror	r22
    18de:	b3 95       	inc	r27
    18e0:	d9 f7       	brne	.-10     	; 0x18d8 <__fixunssfsi+0x42>
    18e2:	3e f4       	brtc	.+14     	; 0x18f2 <__fixunssfsi+0x5c>
    18e4:	90 95       	com	r25
    18e6:	80 95       	com	r24
    18e8:	70 95       	com	r23
    18ea:	61 95       	neg	r22
    18ec:	7f 4f       	sbci	r23, 0xFF	; 255
    18ee:	8f 4f       	sbci	r24, 0xFF	; 255
    18f0:	9f 4f       	sbci	r25, 0xFF	; 255
    18f2:	08 95       	ret

000018f4 <__floatunsisf>:
    18f4:	e8 94       	clt
    18f6:	09 c0       	rjmp	.+18     	; 0x190a <__floatsisf+0x12>

000018f8 <__floatsisf>:
    18f8:	97 fb       	bst	r25, 7
    18fa:	3e f4       	brtc	.+14     	; 0x190a <__floatsisf+0x12>
    18fc:	90 95       	com	r25
    18fe:	80 95       	com	r24
    1900:	70 95       	com	r23
    1902:	61 95       	neg	r22
    1904:	7f 4f       	sbci	r23, 0xFF	; 255
    1906:	8f 4f       	sbci	r24, 0xFF	; 255
    1908:	9f 4f       	sbci	r25, 0xFF	; 255
    190a:	99 23       	and	r25, r25
    190c:	a9 f0       	breq	.+42     	; 0x1938 <__floatsisf+0x40>
    190e:	f9 2f       	mov	r31, r25
    1910:	96 e9       	ldi	r25, 0x96	; 150
    1912:	bb 27       	eor	r27, r27
    1914:	93 95       	inc	r25
    1916:	f6 95       	lsr	r31
    1918:	87 95       	ror	r24
    191a:	77 95       	ror	r23
    191c:	67 95       	ror	r22
    191e:	b7 95       	ror	r27
    1920:	f1 11       	cpse	r31, r1
    1922:	f8 cf       	rjmp	.-16     	; 0x1914 <__floatsisf+0x1c>
    1924:	fa f4       	brpl	.+62     	; 0x1964 <__floatsisf+0x6c>
    1926:	bb 0f       	add	r27, r27
    1928:	11 f4       	brne	.+4      	; 0x192e <__floatsisf+0x36>
    192a:	60 ff       	sbrs	r22, 0
    192c:	1b c0       	rjmp	.+54     	; 0x1964 <__floatsisf+0x6c>
    192e:	6f 5f       	subi	r22, 0xFF	; 255
    1930:	7f 4f       	sbci	r23, 0xFF	; 255
    1932:	8f 4f       	sbci	r24, 0xFF	; 255
    1934:	9f 4f       	sbci	r25, 0xFF	; 255
    1936:	16 c0       	rjmp	.+44     	; 0x1964 <__floatsisf+0x6c>
    1938:	88 23       	and	r24, r24
    193a:	11 f0       	breq	.+4      	; 0x1940 <__floatsisf+0x48>
    193c:	96 e9       	ldi	r25, 0x96	; 150
    193e:	11 c0       	rjmp	.+34     	; 0x1962 <__floatsisf+0x6a>
    1940:	77 23       	and	r23, r23
    1942:	21 f0       	breq	.+8      	; 0x194c <__floatsisf+0x54>
    1944:	9e e8       	ldi	r25, 0x8E	; 142
    1946:	87 2f       	mov	r24, r23
    1948:	76 2f       	mov	r23, r22
    194a:	05 c0       	rjmp	.+10     	; 0x1956 <__floatsisf+0x5e>
    194c:	66 23       	and	r22, r22
    194e:	71 f0       	breq	.+28     	; 0x196c <__floatsisf+0x74>
    1950:	96 e8       	ldi	r25, 0x86	; 134
    1952:	86 2f       	mov	r24, r22
    1954:	70 e0       	ldi	r23, 0x00	; 0
    1956:	60 e0       	ldi	r22, 0x00	; 0
    1958:	2a f0       	brmi	.+10     	; 0x1964 <__floatsisf+0x6c>
    195a:	9a 95       	dec	r25
    195c:	66 0f       	add	r22, r22
    195e:	77 1f       	adc	r23, r23
    1960:	88 1f       	adc	r24, r24
    1962:	da f7       	brpl	.-10     	; 0x195a <__floatsisf+0x62>
    1964:	88 0f       	add	r24, r24
    1966:	96 95       	lsr	r25
    1968:	87 95       	ror	r24
    196a:	97 f9       	bld	r25, 7
    196c:	08 95       	ret

0000196e <__fp_cmp>:
    196e:	99 0f       	add	r25, r25
    1970:	00 08       	sbc	r0, r0
    1972:	55 0f       	add	r21, r21
    1974:	aa 0b       	sbc	r26, r26
    1976:	e0 e8       	ldi	r30, 0x80	; 128
    1978:	fe ef       	ldi	r31, 0xFE	; 254
    197a:	16 16       	cp	r1, r22
    197c:	17 06       	cpc	r1, r23
    197e:	e8 07       	cpc	r30, r24
    1980:	f9 07       	cpc	r31, r25
    1982:	c0 f0       	brcs	.+48     	; 0x19b4 <__fp_cmp+0x46>
    1984:	12 16       	cp	r1, r18
    1986:	13 06       	cpc	r1, r19
    1988:	e4 07       	cpc	r30, r20
    198a:	f5 07       	cpc	r31, r21
    198c:	98 f0       	brcs	.+38     	; 0x19b4 <__fp_cmp+0x46>
    198e:	62 1b       	sub	r22, r18
    1990:	73 0b       	sbc	r23, r19
    1992:	84 0b       	sbc	r24, r20
    1994:	95 0b       	sbc	r25, r21
    1996:	39 f4       	brne	.+14     	; 0x19a6 <__fp_cmp+0x38>
    1998:	0a 26       	eor	r0, r26
    199a:	61 f0       	breq	.+24     	; 0x19b4 <__fp_cmp+0x46>
    199c:	23 2b       	or	r18, r19
    199e:	24 2b       	or	r18, r20
    19a0:	25 2b       	or	r18, r21
    19a2:	21 f4       	brne	.+8      	; 0x19ac <__fp_cmp+0x3e>
    19a4:	08 95       	ret
    19a6:	0a 26       	eor	r0, r26
    19a8:	09 f4       	brne	.+2      	; 0x19ac <__fp_cmp+0x3e>
    19aa:	a1 40       	sbci	r26, 0x01	; 1
    19ac:	a6 95       	lsr	r26
    19ae:	8f ef       	ldi	r24, 0xFF	; 255
    19b0:	81 1d       	adc	r24, r1
    19b2:	81 1d       	adc	r24, r1
    19b4:	08 95       	ret

000019b6 <__fp_inf>:
    19b6:	97 f9       	bld	r25, 7
    19b8:	9f 67       	ori	r25, 0x7F	; 127
    19ba:	80 e8       	ldi	r24, 0x80	; 128
    19bc:	70 e0       	ldi	r23, 0x00	; 0
    19be:	60 e0       	ldi	r22, 0x00	; 0
    19c0:	08 95       	ret

000019c2 <__fp_nan>:
    19c2:	9f ef       	ldi	r25, 0xFF	; 255
    19c4:	80 ec       	ldi	r24, 0xC0	; 192
    19c6:	08 95       	ret

000019c8 <__fp_powser>:
    19c8:	df 93       	push	r29
    19ca:	cf 93       	push	r28
    19cc:	1f 93       	push	r17
    19ce:	0f 93       	push	r16
    19d0:	ff 92       	push	r15
    19d2:	ef 92       	push	r14
    19d4:	df 92       	push	r13
    19d6:	7b 01       	movw	r14, r22
    19d8:	8c 01       	movw	r16, r24
    19da:	68 94       	set
    19dc:	06 c0       	rjmp	.+12     	; 0x19ea <__fp_powser+0x22>
    19de:	da 2e       	mov	r13, r26
    19e0:	ef 01       	movw	r28, r30
    19e2:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <__mulsf3x>
    19e6:	fe 01       	movw	r30, r28
    19e8:	e8 94       	clt
    19ea:	a5 91       	lpm	r26, Z+
    19ec:	25 91       	lpm	r18, Z+
    19ee:	35 91       	lpm	r19, Z+
    19f0:	45 91       	lpm	r20, Z+
    19f2:	55 91       	lpm	r21, Z+
    19f4:	a6 f3       	brts	.-24     	; 0x19de <__fp_powser+0x16>
    19f6:	ef 01       	movw	r28, r30
    19f8:	0e 94 06 0b 	call	0x160c	; 0x160c <__addsf3x>
    19fc:	fe 01       	movw	r30, r28
    19fe:	97 01       	movw	r18, r14
    1a00:	a8 01       	movw	r20, r16
    1a02:	da 94       	dec	r13
    1a04:	69 f7       	brne	.-38     	; 0x19e0 <__fp_powser+0x18>
    1a06:	df 90       	pop	r13
    1a08:	ef 90       	pop	r14
    1a0a:	ff 90       	pop	r15
    1a0c:	0f 91       	pop	r16
    1a0e:	1f 91       	pop	r17
    1a10:	cf 91       	pop	r28
    1a12:	df 91       	pop	r29
    1a14:	08 95       	ret

00001a16 <__fp_pscA>:
    1a16:	00 24       	eor	r0, r0
    1a18:	0a 94       	dec	r0
    1a1a:	16 16       	cp	r1, r22
    1a1c:	17 06       	cpc	r1, r23
    1a1e:	18 06       	cpc	r1, r24
    1a20:	09 06       	cpc	r0, r25
    1a22:	08 95       	ret

00001a24 <__fp_pscB>:
    1a24:	00 24       	eor	r0, r0
    1a26:	0a 94       	dec	r0
    1a28:	12 16       	cp	r1, r18
    1a2a:	13 06       	cpc	r1, r19
    1a2c:	14 06       	cpc	r1, r20
    1a2e:	05 06       	cpc	r0, r21
    1a30:	08 95       	ret

00001a32 <__fp_round>:
    1a32:	09 2e       	mov	r0, r25
    1a34:	03 94       	inc	r0
    1a36:	00 0c       	add	r0, r0
    1a38:	11 f4       	brne	.+4      	; 0x1a3e <__fp_round+0xc>
    1a3a:	88 23       	and	r24, r24
    1a3c:	52 f0       	brmi	.+20     	; 0x1a52 <__fp_round+0x20>
    1a3e:	bb 0f       	add	r27, r27
    1a40:	40 f4       	brcc	.+16     	; 0x1a52 <__fp_round+0x20>
    1a42:	bf 2b       	or	r27, r31
    1a44:	11 f4       	brne	.+4      	; 0x1a4a <__fp_round+0x18>
    1a46:	60 ff       	sbrs	r22, 0
    1a48:	04 c0       	rjmp	.+8      	; 0x1a52 <__fp_round+0x20>
    1a4a:	6f 5f       	subi	r22, 0xFF	; 255
    1a4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a4e:	8f 4f       	sbci	r24, 0xFF	; 255
    1a50:	9f 4f       	sbci	r25, 0xFF	; 255
    1a52:	08 95       	ret

00001a54 <__fp_split3>:
    1a54:	57 fd       	sbrc	r21, 7
    1a56:	90 58       	subi	r25, 0x80	; 128
    1a58:	44 0f       	add	r20, r20
    1a5a:	55 1f       	adc	r21, r21
    1a5c:	59 f0       	breq	.+22     	; 0x1a74 <__fp_splitA+0x10>
    1a5e:	5f 3f       	cpi	r21, 0xFF	; 255
    1a60:	71 f0       	breq	.+28     	; 0x1a7e <__fp_splitA+0x1a>
    1a62:	47 95       	ror	r20

00001a64 <__fp_splitA>:
    1a64:	88 0f       	add	r24, r24
    1a66:	97 fb       	bst	r25, 7
    1a68:	99 1f       	adc	r25, r25
    1a6a:	61 f0       	breq	.+24     	; 0x1a84 <__fp_splitA+0x20>
    1a6c:	9f 3f       	cpi	r25, 0xFF	; 255
    1a6e:	79 f0       	breq	.+30     	; 0x1a8e <__fp_splitA+0x2a>
    1a70:	87 95       	ror	r24
    1a72:	08 95       	ret
    1a74:	12 16       	cp	r1, r18
    1a76:	13 06       	cpc	r1, r19
    1a78:	14 06       	cpc	r1, r20
    1a7a:	55 1f       	adc	r21, r21
    1a7c:	f2 cf       	rjmp	.-28     	; 0x1a62 <__fp_split3+0xe>
    1a7e:	46 95       	lsr	r20
    1a80:	f1 df       	rcall	.-30     	; 0x1a64 <__fp_splitA>
    1a82:	08 c0       	rjmp	.+16     	; 0x1a94 <__fp_splitA+0x30>
    1a84:	16 16       	cp	r1, r22
    1a86:	17 06       	cpc	r1, r23
    1a88:	18 06       	cpc	r1, r24
    1a8a:	99 1f       	adc	r25, r25
    1a8c:	f1 cf       	rjmp	.-30     	; 0x1a70 <__fp_splitA+0xc>
    1a8e:	86 95       	lsr	r24
    1a90:	71 05       	cpc	r23, r1
    1a92:	61 05       	cpc	r22, r1
    1a94:	08 94       	sec
    1a96:	08 95       	ret

00001a98 <__fp_zero>:
    1a98:	e8 94       	clt

00001a9a <__fp_szero>:
    1a9a:	bb 27       	eor	r27, r27
    1a9c:	66 27       	eor	r22, r22
    1a9e:	77 27       	eor	r23, r23
    1aa0:	cb 01       	movw	r24, r22
    1aa2:	97 f9       	bld	r25, 7
    1aa4:	08 95       	ret

00001aa6 <__gesf2>:
    1aa6:	0e 94 b7 0c 	call	0x196e	; 0x196e <__fp_cmp>
    1aaa:	08 f4       	brcc	.+2      	; 0x1aae <__gesf2+0x8>
    1aac:	8f ef       	ldi	r24, 0xFF	; 255
    1aae:	08 95       	ret

00001ab0 <inverse>:
    1ab0:	9b 01       	movw	r18, r22
    1ab2:	ac 01       	movw	r20, r24
    1ab4:	60 e0       	ldi	r22, 0x00	; 0
    1ab6:	70 e0       	ldi	r23, 0x00	; 0
    1ab8:	80 e8       	ldi	r24, 0x80	; 128
    1aba:	9f e3       	ldi	r25, 0x3F	; 63
    1abc:	0c 94 d2 0b 	jmp	0x17a4	; 0x17a4 <__divsf3>

00001ac0 <__mulsf3>:
    1ac0:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <__mulsf3x>
    1ac4:	0c 94 19 0d 	jmp	0x1a32	; 0x1a32 <__fp_round>
    1ac8:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <__fp_pscA>
    1acc:	38 f0       	brcs	.+14     	; 0x1adc <__mulsf3+0x1c>
    1ace:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <__fp_pscB>
    1ad2:	20 f0       	brcs	.+8      	; 0x1adc <__mulsf3+0x1c>
    1ad4:	95 23       	and	r25, r21
    1ad6:	11 f0       	breq	.+4      	; 0x1adc <__mulsf3+0x1c>
    1ad8:	0c 94 db 0c 	jmp	0x19b6	; 0x19b6 <__fp_inf>
    1adc:	0c 94 e1 0c 	jmp	0x19c2	; 0x19c2 <__fp_nan>
    1ae0:	11 24       	eor	r1, r1
    1ae2:	0c 94 4d 0d 	jmp	0x1a9a	; 0x1a9a <__fp_szero>

00001ae6 <__mulsf3x>:
    1ae6:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__fp_split3>
    1aea:	70 f3       	brcs	.-36     	; 0x1ac8 <__mulsf3+0x8>

00001aec <__mulsf3_pse>:
    1aec:	95 9f       	mul	r25, r21
    1aee:	c1 f3       	breq	.-16     	; 0x1ae0 <__mulsf3+0x20>
    1af0:	95 0f       	add	r25, r21
    1af2:	50 e0       	ldi	r21, 0x00	; 0
    1af4:	55 1f       	adc	r21, r21
    1af6:	62 9f       	mul	r22, r18
    1af8:	f0 01       	movw	r30, r0
    1afa:	72 9f       	mul	r23, r18
    1afc:	bb 27       	eor	r27, r27
    1afe:	f0 0d       	add	r31, r0
    1b00:	b1 1d       	adc	r27, r1
    1b02:	63 9f       	mul	r22, r19
    1b04:	aa 27       	eor	r26, r26
    1b06:	f0 0d       	add	r31, r0
    1b08:	b1 1d       	adc	r27, r1
    1b0a:	aa 1f       	adc	r26, r26
    1b0c:	64 9f       	mul	r22, r20
    1b0e:	66 27       	eor	r22, r22
    1b10:	b0 0d       	add	r27, r0
    1b12:	a1 1d       	adc	r26, r1
    1b14:	66 1f       	adc	r22, r22
    1b16:	82 9f       	mul	r24, r18
    1b18:	22 27       	eor	r18, r18
    1b1a:	b0 0d       	add	r27, r0
    1b1c:	a1 1d       	adc	r26, r1
    1b1e:	62 1f       	adc	r22, r18
    1b20:	73 9f       	mul	r23, r19
    1b22:	b0 0d       	add	r27, r0
    1b24:	a1 1d       	adc	r26, r1
    1b26:	62 1f       	adc	r22, r18
    1b28:	83 9f       	mul	r24, r19
    1b2a:	a0 0d       	add	r26, r0
    1b2c:	61 1d       	adc	r22, r1
    1b2e:	22 1f       	adc	r18, r18
    1b30:	74 9f       	mul	r23, r20
    1b32:	33 27       	eor	r19, r19
    1b34:	a0 0d       	add	r26, r0
    1b36:	61 1d       	adc	r22, r1
    1b38:	23 1f       	adc	r18, r19
    1b3a:	84 9f       	mul	r24, r20
    1b3c:	60 0d       	add	r22, r0
    1b3e:	21 1d       	adc	r18, r1
    1b40:	82 2f       	mov	r24, r18
    1b42:	76 2f       	mov	r23, r22
    1b44:	6a 2f       	mov	r22, r26
    1b46:	11 24       	eor	r1, r1
    1b48:	9f 57       	subi	r25, 0x7F	; 127
    1b4a:	50 40       	sbci	r21, 0x00	; 0
    1b4c:	9a f0       	brmi	.+38     	; 0x1b74 <__mulsf3_pse+0x88>
    1b4e:	f1 f0       	breq	.+60     	; 0x1b8c <__mulsf3_pse+0xa0>
    1b50:	88 23       	and	r24, r24
    1b52:	4a f0       	brmi	.+18     	; 0x1b66 <__mulsf3_pse+0x7a>
    1b54:	ee 0f       	add	r30, r30
    1b56:	ff 1f       	adc	r31, r31
    1b58:	bb 1f       	adc	r27, r27
    1b5a:	66 1f       	adc	r22, r22
    1b5c:	77 1f       	adc	r23, r23
    1b5e:	88 1f       	adc	r24, r24
    1b60:	91 50       	subi	r25, 0x01	; 1
    1b62:	50 40       	sbci	r21, 0x00	; 0
    1b64:	a9 f7       	brne	.-22     	; 0x1b50 <__mulsf3_pse+0x64>
    1b66:	9e 3f       	cpi	r25, 0xFE	; 254
    1b68:	51 05       	cpc	r21, r1
    1b6a:	80 f0       	brcs	.+32     	; 0x1b8c <__mulsf3_pse+0xa0>
    1b6c:	0c 94 db 0c 	jmp	0x19b6	; 0x19b6 <__fp_inf>
    1b70:	0c 94 4d 0d 	jmp	0x1a9a	; 0x1a9a <__fp_szero>
    1b74:	5f 3f       	cpi	r21, 0xFF	; 255
    1b76:	e4 f3       	brlt	.-8      	; 0x1b70 <__mulsf3_pse+0x84>
    1b78:	98 3e       	cpi	r25, 0xE8	; 232
    1b7a:	d4 f3       	brlt	.-12     	; 0x1b70 <__mulsf3_pse+0x84>
    1b7c:	86 95       	lsr	r24
    1b7e:	77 95       	ror	r23
    1b80:	67 95       	ror	r22
    1b82:	b7 95       	ror	r27
    1b84:	f7 95       	ror	r31
    1b86:	e7 95       	ror	r30
    1b88:	9f 5f       	subi	r25, 0xFF	; 255
    1b8a:	c1 f7       	brne	.-16     	; 0x1b7c <__mulsf3_pse+0x90>
    1b8c:	fe 2b       	or	r31, r30
    1b8e:	88 0f       	add	r24, r24
    1b90:	91 1d       	adc	r25, r1
    1b92:	96 95       	lsr	r25
    1b94:	87 95       	ror	r24
    1b96:	97 f9       	bld	r25, 7
    1b98:	08 95       	ret

00001b9a <square>:
    1b9a:	9b 01       	movw	r18, r22
    1b9c:	ac 01       	movw	r20, r24
    1b9e:	0c 94 60 0d 	jmp	0x1ac0	; 0x1ac0 <__mulsf3>

00001ba2 <strcpy>:
    1ba2:	fb 01       	movw	r30, r22
    1ba4:	dc 01       	movw	r26, r24
    1ba6:	01 90       	ld	r0, Z+
    1ba8:	0d 92       	st	X+, r0
    1baa:	00 20       	and	r0, r0
    1bac:	e1 f7       	brne	.-8      	; 0x1ba6 <strcpy+0x4>
    1bae:	08 95       	ret

00001bb0 <__itoa_ncheck>:
    1bb0:	bb 27       	eor	r27, r27
    1bb2:	4a 30       	cpi	r20, 0x0A	; 10
    1bb4:	31 f4       	brne	.+12     	; 0x1bc2 <__itoa_ncheck+0x12>
    1bb6:	99 23       	and	r25, r25
    1bb8:	22 f4       	brpl	.+8      	; 0x1bc2 <__itoa_ncheck+0x12>
    1bba:	bd e2       	ldi	r27, 0x2D	; 45
    1bbc:	90 95       	com	r25
    1bbe:	81 95       	neg	r24
    1bc0:	9f 4f       	sbci	r25, 0xFF	; 255
    1bc2:	0c 94 e4 0d 	jmp	0x1bc8	; 0x1bc8 <__utoa_common>

00001bc6 <__utoa_ncheck>:
    1bc6:	bb 27       	eor	r27, r27

00001bc8 <__utoa_common>:
    1bc8:	fb 01       	movw	r30, r22
    1bca:	55 27       	eor	r21, r21
    1bcc:	aa 27       	eor	r26, r26
    1bce:	88 0f       	add	r24, r24
    1bd0:	99 1f       	adc	r25, r25
    1bd2:	aa 1f       	adc	r26, r26
    1bd4:	a4 17       	cp	r26, r20
    1bd6:	10 f0       	brcs	.+4      	; 0x1bdc <__utoa_common+0x14>
    1bd8:	a4 1b       	sub	r26, r20
    1bda:	83 95       	inc	r24
    1bdc:	50 51       	subi	r21, 0x10	; 16
    1bde:	b9 f7       	brne	.-18     	; 0x1bce <__utoa_common+0x6>
    1be0:	a0 5d       	subi	r26, 0xD0	; 208
    1be2:	aa 33       	cpi	r26, 0x3A	; 58
    1be4:	08 f0       	brcs	.+2      	; 0x1be8 <__utoa_common+0x20>
    1be6:	a9 5d       	subi	r26, 0xD9	; 217
    1be8:	a1 93       	st	Z+, r26
    1bea:	00 97       	sbiw	r24, 0x00	; 0
    1bec:	79 f7       	brne	.-34     	; 0x1bcc <__utoa_common+0x4>
    1bee:	b1 11       	cpse	r27, r1
    1bf0:	b1 93       	st	Z+, r27
    1bf2:	11 92       	st	Z+, r1
    1bf4:	cb 01       	movw	r24, r22
    1bf6:	0c 94 c9 11 	jmp	0x2392	; 0x2392 <strrev>

00001bfa <fdevopen>:
    1bfa:	0f 93       	push	r16
    1bfc:	1f 93       	push	r17
    1bfe:	cf 93       	push	r28
    1c00:	df 93       	push	r29
    1c02:	00 97       	sbiw	r24, 0x00	; 0
    1c04:	31 f4       	brne	.+12     	; 0x1c12 <fdevopen+0x18>
    1c06:	61 15       	cp	r22, r1
    1c08:	71 05       	cpc	r23, r1
    1c0a:	19 f4       	brne	.+6      	; 0x1c12 <fdevopen+0x18>
    1c0c:	80 e0       	ldi	r24, 0x00	; 0
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	3a c0       	rjmp	.+116    	; 0x1c86 <fdevopen+0x8c>
    1c12:	8b 01       	movw	r16, r22
    1c14:	ec 01       	movw	r28, r24
    1c16:	6e e0       	ldi	r22, 0x0E	; 14
    1c18:	70 e0       	ldi	r23, 0x00	; 0
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	0e 94 6f 10 	call	0x20de	; 0x20de <calloc>
    1c22:	fc 01       	movw	r30, r24
    1c24:	89 2b       	or	r24, r25
    1c26:	91 f3       	breq	.-28     	; 0x1c0c <fdevopen+0x12>
    1c28:	80 e8       	ldi	r24, 0x80	; 128
    1c2a:	83 83       	std	Z+3, r24	; 0x03
    1c2c:	01 15       	cp	r16, r1
    1c2e:	11 05       	cpc	r17, r1
    1c30:	71 f0       	breq	.+28     	; 0x1c4e <fdevopen+0x54>
    1c32:	13 87       	std	Z+11, r17	; 0x0b
    1c34:	02 87       	std	Z+10, r16	; 0x0a
    1c36:	81 e8       	ldi	r24, 0x81	; 129
    1c38:	83 83       	std	Z+3, r24	; 0x03
    1c3a:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <__iob>
    1c3e:	90 91 51 03 	lds	r25, 0x0351	; 0x800351 <__iob+0x1>
    1c42:	89 2b       	or	r24, r25
    1c44:	21 f4       	brne	.+8      	; 0x1c4e <fdevopen+0x54>
    1c46:	f0 93 51 03 	sts	0x0351, r31	; 0x800351 <__iob+0x1>
    1c4a:	e0 93 50 03 	sts	0x0350, r30	; 0x800350 <__iob>
    1c4e:	20 97       	sbiw	r28, 0x00	; 0
    1c50:	c9 f0       	breq	.+50     	; 0x1c84 <fdevopen+0x8a>
    1c52:	d1 87       	std	Z+9, r29	; 0x09
    1c54:	c0 87       	std	Z+8, r28	; 0x08
    1c56:	83 81       	ldd	r24, Z+3	; 0x03
    1c58:	82 60       	ori	r24, 0x02	; 2
    1c5a:	83 83       	std	Z+3, r24	; 0x03
    1c5c:	80 91 52 03 	lds	r24, 0x0352	; 0x800352 <__iob+0x2>
    1c60:	90 91 53 03 	lds	r25, 0x0353	; 0x800353 <__iob+0x3>
    1c64:	89 2b       	or	r24, r25
    1c66:	71 f4       	brne	.+28     	; 0x1c84 <fdevopen+0x8a>
    1c68:	f0 93 53 03 	sts	0x0353, r31	; 0x800353 <__iob+0x3>
    1c6c:	e0 93 52 03 	sts	0x0352, r30	; 0x800352 <__iob+0x2>
    1c70:	80 91 54 03 	lds	r24, 0x0354	; 0x800354 <__iob+0x4>
    1c74:	90 91 55 03 	lds	r25, 0x0355	; 0x800355 <__iob+0x5>
    1c78:	89 2b       	or	r24, r25
    1c7a:	21 f4       	brne	.+8      	; 0x1c84 <fdevopen+0x8a>
    1c7c:	f0 93 55 03 	sts	0x0355, r31	; 0x800355 <__iob+0x5>
    1c80:	e0 93 54 03 	sts	0x0354, r30	; 0x800354 <__iob+0x4>
    1c84:	cf 01       	movw	r24, r30
    1c86:	df 91       	pop	r29
    1c88:	cf 91       	pop	r28
    1c8a:	1f 91       	pop	r17
    1c8c:	0f 91       	pop	r16
    1c8e:	08 95       	ret

00001c90 <printf>:
    1c90:	a0 e0       	ldi	r26, 0x00	; 0
    1c92:	b0 e0       	ldi	r27, 0x00	; 0
    1c94:	ee e4       	ldi	r30, 0x4E	; 78
    1c96:	fe e0       	ldi	r31, 0x0E	; 14
    1c98:	0c 94 83 12 	jmp	0x2506	; 0x2506 <__prologue_saves__+0x20>
    1c9c:	ae 01       	movw	r20, r28
    1c9e:	4b 5f       	subi	r20, 0xFB	; 251
    1ca0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ca2:	fa 01       	movw	r30, r20
    1ca4:	61 91       	ld	r22, Z+
    1ca6:	71 91       	ld	r23, Z+
    1ca8:	af 01       	movw	r20, r30
    1caa:	80 91 52 03 	lds	r24, 0x0352	; 0x800352 <__iob+0x2>
    1cae:	90 91 53 03 	lds	r25, 0x0353	; 0x800353 <__iob+0x3>
    1cb2:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <vfprintf>
    1cb6:	e2 e0       	ldi	r30, 0x02	; 2
    1cb8:	0c 94 9f 12 	jmp	0x253e	; 0x253e <__epilogue_restores__+0x20>

00001cbc <puts>:
    1cbc:	0f 93       	push	r16
    1cbe:	1f 93       	push	r17
    1cc0:	cf 93       	push	r28
    1cc2:	df 93       	push	r29
    1cc4:	e0 91 52 03 	lds	r30, 0x0352	; 0x800352 <__iob+0x2>
    1cc8:	f0 91 53 03 	lds	r31, 0x0353	; 0x800353 <__iob+0x3>
    1ccc:	23 81       	ldd	r18, Z+3	; 0x03
    1cce:	21 ff       	sbrs	r18, 1
    1cd0:	1b c0       	rjmp	.+54     	; 0x1d08 <puts+0x4c>
    1cd2:	8c 01       	movw	r16, r24
    1cd4:	d0 e0       	ldi	r29, 0x00	; 0
    1cd6:	c0 e0       	ldi	r28, 0x00	; 0
    1cd8:	f8 01       	movw	r30, r16
    1cda:	81 91       	ld	r24, Z+
    1cdc:	8f 01       	movw	r16, r30
    1cde:	60 91 52 03 	lds	r22, 0x0352	; 0x800352 <__iob+0x2>
    1ce2:	70 91 53 03 	lds	r23, 0x0353	; 0x800353 <__iob+0x3>
    1ce6:	db 01       	movw	r26, r22
    1ce8:	18 96       	adiw	r26, 0x08	; 8
    1cea:	ed 91       	ld	r30, X+
    1cec:	fc 91       	ld	r31, X
    1cee:	19 97       	sbiw	r26, 0x09	; 9
    1cf0:	88 23       	and	r24, r24
    1cf2:	31 f0       	breq	.+12     	; 0x1d00 <puts+0x44>
    1cf4:	09 95       	icall
    1cf6:	89 2b       	or	r24, r25
    1cf8:	79 f3       	breq	.-34     	; 0x1cd8 <puts+0x1c>
    1cfa:	df ef       	ldi	r29, 0xFF	; 255
    1cfc:	cf ef       	ldi	r28, 0xFF	; 255
    1cfe:	ec cf       	rjmp	.-40     	; 0x1cd8 <puts+0x1c>
    1d00:	8a e0       	ldi	r24, 0x0A	; 10
    1d02:	09 95       	icall
    1d04:	89 2b       	or	r24, r25
    1d06:	19 f0       	breq	.+6      	; 0x1d0e <puts+0x52>
    1d08:	8f ef       	ldi	r24, 0xFF	; 255
    1d0a:	9f ef       	ldi	r25, 0xFF	; 255
    1d0c:	02 c0       	rjmp	.+4      	; 0x1d12 <puts+0x56>
    1d0e:	8d 2f       	mov	r24, r29
    1d10:	9c 2f       	mov	r25, r28
    1d12:	df 91       	pop	r29
    1d14:	cf 91       	pop	r28
    1d16:	1f 91       	pop	r17
    1d18:	0f 91       	pop	r16
    1d1a:	08 95       	ret

00001d1c <vfprintf>:
    1d1c:	ab e0       	ldi	r26, 0x0B	; 11
    1d1e:	b0 e0       	ldi	r27, 0x00	; 0
    1d20:	e4 e9       	ldi	r30, 0x94	; 148
    1d22:	fe e0       	ldi	r31, 0x0E	; 14
    1d24:	0c 94 73 12 	jmp	0x24e6	; 0x24e6 <__prologue_saves__>
    1d28:	6c 01       	movw	r12, r24
    1d2a:	7b 01       	movw	r14, r22
    1d2c:	8a 01       	movw	r16, r20
    1d2e:	fc 01       	movw	r30, r24
    1d30:	17 82       	std	Z+7, r1	; 0x07
    1d32:	16 82       	std	Z+6, r1	; 0x06
    1d34:	83 81       	ldd	r24, Z+3	; 0x03
    1d36:	81 ff       	sbrs	r24, 1
    1d38:	cc c1       	rjmp	.+920    	; 0x20d2 <vfprintf+0x3b6>
    1d3a:	ce 01       	movw	r24, r28
    1d3c:	01 96       	adiw	r24, 0x01	; 1
    1d3e:	3c 01       	movw	r6, r24
    1d40:	f6 01       	movw	r30, r12
    1d42:	93 81       	ldd	r25, Z+3	; 0x03
    1d44:	f7 01       	movw	r30, r14
    1d46:	93 fd       	sbrc	r25, 3
    1d48:	85 91       	lpm	r24, Z+
    1d4a:	93 ff       	sbrs	r25, 3
    1d4c:	81 91       	ld	r24, Z+
    1d4e:	7f 01       	movw	r14, r30
    1d50:	88 23       	and	r24, r24
    1d52:	09 f4       	brne	.+2      	; 0x1d56 <vfprintf+0x3a>
    1d54:	ba c1       	rjmp	.+884    	; 0x20ca <vfprintf+0x3ae>
    1d56:	85 32       	cpi	r24, 0x25	; 37
    1d58:	39 f4       	brne	.+14     	; 0x1d68 <vfprintf+0x4c>
    1d5a:	93 fd       	sbrc	r25, 3
    1d5c:	85 91       	lpm	r24, Z+
    1d5e:	93 ff       	sbrs	r25, 3
    1d60:	81 91       	ld	r24, Z+
    1d62:	7f 01       	movw	r14, r30
    1d64:	85 32       	cpi	r24, 0x25	; 37
    1d66:	29 f4       	brne	.+10     	; 0x1d72 <vfprintf+0x56>
    1d68:	b6 01       	movw	r22, r12
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <fputc>
    1d70:	e7 cf       	rjmp	.-50     	; 0x1d40 <vfprintf+0x24>
    1d72:	91 2c       	mov	r9, r1
    1d74:	21 2c       	mov	r2, r1
    1d76:	31 2c       	mov	r3, r1
    1d78:	ff e1       	ldi	r31, 0x1F	; 31
    1d7a:	f3 15       	cp	r31, r3
    1d7c:	d8 f0       	brcs	.+54     	; 0x1db4 <vfprintf+0x98>
    1d7e:	8b 32       	cpi	r24, 0x2B	; 43
    1d80:	79 f0       	breq	.+30     	; 0x1da0 <vfprintf+0x84>
    1d82:	38 f4       	brcc	.+14     	; 0x1d92 <vfprintf+0x76>
    1d84:	80 32       	cpi	r24, 0x20	; 32
    1d86:	79 f0       	breq	.+30     	; 0x1da6 <vfprintf+0x8a>
    1d88:	83 32       	cpi	r24, 0x23	; 35
    1d8a:	a1 f4       	brne	.+40     	; 0x1db4 <vfprintf+0x98>
    1d8c:	23 2d       	mov	r18, r3
    1d8e:	20 61       	ori	r18, 0x10	; 16
    1d90:	1d c0       	rjmp	.+58     	; 0x1dcc <vfprintf+0xb0>
    1d92:	8d 32       	cpi	r24, 0x2D	; 45
    1d94:	61 f0       	breq	.+24     	; 0x1dae <vfprintf+0x92>
    1d96:	80 33       	cpi	r24, 0x30	; 48
    1d98:	69 f4       	brne	.+26     	; 0x1db4 <vfprintf+0x98>
    1d9a:	23 2d       	mov	r18, r3
    1d9c:	21 60       	ori	r18, 0x01	; 1
    1d9e:	16 c0       	rjmp	.+44     	; 0x1dcc <vfprintf+0xb0>
    1da0:	83 2d       	mov	r24, r3
    1da2:	82 60       	ori	r24, 0x02	; 2
    1da4:	38 2e       	mov	r3, r24
    1da6:	e3 2d       	mov	r30, r3
    1da8:	e4 60       	ori	r30, 0x04	; 4
    1daa:	3e 2e       	mov	r3, r30
    1dac:	2a c0       	rjmp	.+84     	; 0x1e02 <vfprintf+0xe6>
    1dae:	f3 2d       	mov	r31, r3
    1db0:	f8 60       	ori	r31, 0x08	; 8
    1db2:	1d c0       	rjmp	.+58     	; 0x1dee <vfprintf+0xd2>
    1db4:	37 fc       	sbrc	r3, 7
    1db6:	2d c0       	rjmp	.+90     	; 0x1e12 <vfprintf+0xf6>
    1db8:	20 ed       	ldi	r18, 0xD0	; 208
    1dba:	28 0f       	add	r18, r24
    1dbc:	2a 30       	cpi	r18, 0x0A	; 10
    1dbe:	40 f0       	brcs	.+16     	; 0x1dd0 <vfprintf+0xb4>
    1dc0:	8e 32       	cpi	r24, 0x2E	; 46
    1dc2:	b9 f4       	brne	.+46     	; 0x1df2 <vfprintf+0xd6>
    1dc4:	36 fc       	sbrc	r3, 6
    1dc6:	81 c1       	rjmp	.+770    	; 0x20ca <vfprintf+0x3ae>
    1dc8:	23 2d       	mov	r18, r3
    1dca:	20 64       	ori	r18, 0x40	; 64
    1dcc:	32 2e       	mov	r3, r18
    1dce:	19 c0       	rjmp	.+50     	; 0x1e02 <vfprintf+0xe6>
    1dd0:	36 fe       	sbrs	r3, 6
    1dd2:	06 c0       	rjmp	.+12     	; 0x1de0 <vfprintf+0xc4>
    1dd4:	8a e0       	ldi	r24, 0x0A	; 10
    1dd6:	98 9e       	mul	r9, r24
    1dd8:	20 0d       	add	r18, r0
    1dda:	11 24       	eor	r1, r1
    1ddc:	92 2e       	mov	r9, r18
    1dde:	11 c0       	rjmp	.+34     	; 0x1e02 <vfprintf+0xe6>
    1de0:	ea e0       	ldi	r30, 0x0A	; 10
    1de2:	2e 9e       	mul	r2, r30
    1de4:	20 0d       	add	r18, r0
    1de6:	11 24       	eor	r1, r1
    1de8:	22 2e       	mov	r2, r18
    1dea:	f3 2d       	mov	r31, r3
    1dec:	f0 62       	ori	r31, 0x20	; 32
    1dee:	3f 2e       	mov	r3, r31
    1df0:	08 c0       	rjmp	.+16     	; 0x1e02 <vfprintf+0xe6>
    1df2:	8c 36       	cpi	r24, 0x6C	; 108
    1df4:	21 f4       	brne	.+8      	; 0x1dfe <vfprintf+0xe2>
    1df6:	83 2d       	mov	r24, r3
    1df8:	80 68       	ori	r24, 0x80	; 128
    1dfa:	38 2e       	mov	r3, r24
    1dfc:	02 c0       	rjmp	.+4      	; 0x1e02 <vfprintf+0xe6>
    1dfe:	88 36       	cpi	r24, 0x68	; 104
    1e00:	41 f4       	brne	.+16     	; 0x1e12 <vfprintf+0xf6>
    1e02:	f7 01       	movw	r30, r14
    1e04:	93 fd       	sbrc	r25, 3
    1e06:	85 91       	lpm	r24, Z+
    1e08:	93 ff       	sbrs	r25, 3
    1e0a:	81 91       	ld	r24, Z+
    1e0c:	7f 01       	movw	r14, r30
    1e0e:	81 11       	cpse	r24, r1
    1e10:	b3 cf       	rjmp	.-154    	; 0x1d78 <vfprintf+0x5c>
    1e12:	98 2f       	mov	r25, r24
    1e14:	9f 7d       	andi	r25, 0xDF	; 223
    1e16:	95 54       	subi	r25, 0x45	; 69
    1e18:	93 30       	cpi	r25, 0x03	; 3
    1e1a:	28 f4       	brcc	.+10     	; 0x1e26 <vfprintf+0x10a>
    1e1c:	0c 5f       	subi	r16, 0xFC	; 252
    1e1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e20:	9f e3       	ldi	r25, 0x3F	; 63
    1e22:	99 83       	std	Y+1, r25	; 0x01
    1e24:	0d c0       	rjmp	.+26     	; 0x1e40 <vfprintf+0x124>
    1e26:	83 36       	cpi	r24, 0x63	; 99
    1e28:	31 f0       	breq	.+12     	; 0x1e36 <vfprintf+0x11a>
    1e2a:	83 37       	cpi	r24, 0x73	; 115
    1e2c:	71 f0       	breq	.+28     	; 0x1e4a <vfprintf+0x12e>
    1e2e:	83 35       	cpi	r24, 0x53	; 83
    1e30:	09 f0       	breq	.+2      	; 0x1e34 <vfprintf+0x118>
    1e32:	59 c0       	rjmp	.+178    	; 0x1ee6 <vfprintf+0x1ca>
    1e34:	21 c0       	rjmp	.+66     	; 0x1e78 <vfprintf+0x15c>
    1e36:	f8 01       	movw	r30, r16
    1e38:	80 81       	ld	r24, Z
    1e3a:	89 83       	std	Y+1, r24	; 0x01
    1e3c:	0e 5f       	subi	r16, 0xFE	; 254
    1e3e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e40:	88 24       	eor	r8, r8
    1e42:	83 94       	inc	r8
    1e44:	91 2c       	mov	r9, r1
    1e46:	53 01       	movw	r10, r6
    1e48:	13 c0       	rjmp	.+38     	; 0x1e70 <vfprintf+0x154>
    1e4a:	28 01       	movw	r4, r16
    1e4c:	f2 e0       	ldi	r31, 0x02	; 2
    1e4e:	4f 0e       	add	r4, r31
    1e50:	51 1c       	adc	r5, r1
    1e52:	f8 01       	movw	r30, r16
    1e54:	a0 80       	ld	r10, Z
    1e56:	b1 80       	ldd	r11, Z+1	; 0x01
    1e58:	36 fe       	sbrs	r3, 6
    1e5a:	03 c0       	rjmp	.+6      	; 0x1e62 <vfprintf+0x146>
    1e5c:	69 2d       	mov	r22, r9
    1e5e:	70 e0       	ldi	r23, 0x00	; 0
    1e60:	02 c0       	rjmp	.+4      	; 0x1e66 <vfprintf+0x14a>
    1e62:	6f ef       	ldi	r22, 0xFF	; 255
    1e64:	7f ef       	ldi	r23, 0xFF	; 255
    1e66:	c5 01       	movw	r24, r10
    1e68:	0e 94 be 11 	call	0x237c	; 0x237c <strnlen>
    1e6c:	4c 01       	movw	r8, r24
    1e6e:	82 01       	movw	r16, r4
    1e70:	f3 2d       	mov	r31, r3
    1e72:	ff 77       	andi	r31, 0x7F	; 127
    1e74:	3f 2e       	mov	r3, r31
    1e76:	16 c0       	rjmp	.+44     	; 0x1ea4 <vfprintf+0x188>
    1e78:	28 01       	movw	r4, r16
    1e7a:	22 e0       	ldi	r18, 0x02	; 2
    1e7c:	42 0e       	add	r4, r18
    1e7e:	51 1c       	adc	r5, r1
    1e80:	f8 01       	movw	r30, r16
    1e82:	a0 80       	ld	r10, Z
    1e84:	b1 80       	ldd	r11, Z+1	; 0x01
    1e86:	36 fe       	sbrs	r3, 6
    1e88:	03 c0       	rjmp	.+6      	; 0x1e90 <vfprintf+0x174>
    1e8a:	69 2d       	mov	r22, r9
    1e8c:	70 e0       	ldi	r23, 0x00	; 0
    1e8e:	02 c0       	rjmp	.+4      	; 0x1e94 <vfprintf+0x178>
    1e90:	6f ef       	ldi	r22, 0xFF	; 255
    1e92:	7f ef       	ldi	r23, 0xFF	; 255
    1e94:	c5 01       	movw	r24, r10
    1e96:	0e 94 ac 11 	call	0x2358	; 0x2358 <strnlen_P>
    1e9a:	4c 01       	movw	r8, r24
    1e9c:	f3 2d       	mov	r31, r3
    1e9e:	f0 68       	ori	r31, 0x80	; 128
    1ea0:	3f 2e       	mov	r3, r31
    1ea2:	82 01       	movw	r16, r4
    1ea4:	33 fc       	sbrc	r3, 3
    1ea6:	1b c0       	rjmp	.+54     	; 0x1ede <vfprintf+0x1c2>
    1ea8:	82 2d       	mov	r24, r2
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	88 16       	cp	r8, r24
    1eae:	99 06       	cpc	r9, r25
    1eb0:	b0 f4       	brcc	.+44     	; 0x1ede <vfprintf+0x1c2>
    1eb2:	b6 01       	movw	r22, r12
    1eb4:	80 e2       	ldi	r24, 0x20	; 32
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <fputc>
    1ebc:	2a 94       	dec	r2
    1ebe:	f4 cf       	rjmp	.-24     	; 0x1ea8 <vfprintf+0x18c>
    1ec0:	f5 01       	movw	r30, r10
    1ec2:	37 fc       	sbrc	r3, 7
    1ec4:	85 91       	lpm	r24, Z+
    1ec6:	37 fe       	sbrs	r3, 7
    1ec8:	81 91       	ld	r24, Z+
    1eca:	5f 01       	movw	r10, r30
    1ecc:	b6 01       	movw	r22, r12
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <fputc>
    1ed4:	21 10       	cpse	r2, r1
    1ed6:	2a 94       	dec	r2
    1ed8:	21 e0       	ldi	r18, 0x01	; 1
    1eda:	82 1a       	sub	r8, r18
    1edc:	91 08       	sbc	r9, r1
    1ede:	81 14       	cp	r8, r1
    1ee0:	91 04       	cpc	r9, r1
    1ee2:	71 f7       	brne	.-36     	; 0x1ec0 <vfprintf+0x1a4>
    1ee4:	e8 c0       	rjmp	.+464    	; 0x20b6 <vfprintf+0x39a>
    1ee6:	84 36       	cpi	r24, 0x64	; 100
    1ee8:	11 f0       	breq	.+4      	; 0x1eee <vfprintf+0x1d2>
    1eea:	89 36       	cpi	r24, 0x69	; 105
    1eec:	41 f5       	brne	.+80     	; 0x1f3e <vfprintf+0x222>
    1eee:	f8 01       	movw	r30, r16
    1ef0:	37 fe       	sbrs	r3, 7
    1ef2:	07 c0       	rjmp	.+14     	; 0x1f02 <vfprintf+0x1e6>
    1ef4:	60 81       	ld	r22, Z
    1ef6:	71 81       	ldd	r23, Z+1	; 0x01
    1ef8:	82 81       	ldd	r24, Z+2	; 0x02
    1efa:	93 81       	ldd	r25, Z+3	; 0x03
    1efc:	0c 5f       	subi	r16, 0xFC	; 252
    1efe:	1f 4f       	sbci	r17, 0xFF	; 255
    1f00:	08 c0       	rjmp	.+16     	; 0x1f12 <vfprintf+0x1f6>
    1f02:	60 81       	ld	r22, Z
    1f04:	71 81       	ldd	r23, Z+1	; 0x01
    1f06:	07 2e       	mov	r0, r23
    1f08:	00 0c       	add	r0, r0
    1f0a:	88 0b       	sbc	r24, r24
    1f0c:	99 0b       	sbc	r25, r25
    1f0e:	0e 5f       	subi	r16, 0xFE	; 254
    1f10:	1f 4f       	sbci	r17, 0xFF	; 255
    1f12:	f3 2d       	mov	r31, r3
    1f14:	ff 76       	andi	r31, 0x6F	; 111
    1f16:	3f 2e       	mov	r3, r31
    1f18:	97 ff       	sbrs	r25, 7
    1f1a:	09 c0       	rjmp	.+18     	; 0x1f2e <vfprintf+0x212>
    1f1c:	90 95       	com	r25
    1f1e:	80 95       	com	r24
    1f20:	70 95       	com	r23
    1f22:	61 95       	neg	r22
    1f24:	7f 4f       	sbci	r23, 0xFF	; 255
    1f26:	8f 4f       	sbci	r24, 0xFF	; 255
    1f28:	9f 4f       	sbci	r25, 0xFF	; 255
    1f2a:	f0 68       	ori	r31, 0x80	; 128
    1f2c:	3f 2e       	mov	r3, r31
    1f2e:	2a e0       	ldi	r18, 0x0A	; 10
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	a3 01       	movw	r20, r6
    1f34:	0e 94 15 12 	call	0x242a	; 0x242a <__ultoa_invert>
    1f38:	88 2e       	mov	r8, r24
    1f3a:	86 18       	sub	r8, r6
    1f3c:	45 c0       	rjmp	.+138    	; 0x1fc8 <vfprintf+0x2ac>
    1f3e:	85 37       	cpi	r24, 0x75	; 117
    1f40:	31 f4       	brne	.+12     	; 0x1f4e <vfprintf+0x232>
    1f42:	23 2d       	mov	r18, r3
    1f44:	2f 7e       	andi	r18, 0xEF	; 239
    1f46:	b2 2e       	mov	r11, r18
    1f48:	2a e0       	ldi	r18, 0x0A	; 10
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	25 c0       	rjmp	.+74     	; 0x1f98 <vfprintf+0x27c>
    1f4e:	93 2d       	mov	r25, r3
    1f50:	99 7f       	andi	r25, 0xF9	; 249
    1f52:	b9 2e       	mov	r11, r25
    1f54:	8f 36       	cpi	r24, 0x6F	; 111
    1f56:	c1 f0       	breq	.+48     	; 0x1f88 <vfprintf+0x26c>
    1f58:	18 f4       	brcc	.+6      	; 0x1f60 <vfprintf+0x244>
    1f5a:	88 35       	cpi	r24, 0x58	; 88
    1f5c:	79 f0       	breq	.+30     	; 0x1f7c <vfprintf+0x260>
    1f5e:	b5 c0       	rjmp	.+362    	; 0x20ca <vfprintf+0x3ae>
    1f60:	80 37       	cpi	r24, 0x70	; 112
    1f62:	19 f0       	breq	.+6      	; 0x1f6a <vfprintf+0x24e>
    1f64:	88 37       	cpi	r24, 0x78	; 120
    1f66:	21 f0       	breq	.+8      	; 0x1f70 <vfprintf+0x254>
    1f68:	b0 c0       	rjmp	.+352    	; 0x20ca <vfprintf+0x3ae>
    1f6a:	e9 2f       	mov	r30, r25
    1f6c:	e0 61       	ori	r30, 0x10	; 16
    1f6e:	be 2e       	mov	r11, r30
    1f70:	b4 fe       	sbrs	r11, 4
    1f72:	0d c0       	rjmp	.+26     	; 0x1f8e <vfprintf+0x272>
    1f74:	fb 2d       	mov	r31, r11
    1f76:	f4 60       	ori	r31, 0x04	; 4
    1f78:	bf 2e       	mov	r11, r31
    1f7a:	09 c0       	rjmp	.+18     	; 0x1f8e <vfprintf+0x272>
    1f7c:	34 fe       	sbrs	r3, 4
    1f7e:	0a c0       	rjmp	.+20     	; 0x1f94 <vfprintf+0x278>
    1f80:	29 2f       	mov	r18, r25
    1f82:	26 60       	ori	r18, 0x06	; 6
    1f84:	b2 2e       	mov	r11, r18
    1f86:	06 c0       	rjmp	.+12     	; 0x1f94 <vfprintf+0x278>
    1f88:	28 e0       	ldi	r18, 0x08	; 8
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	05 c0       	rjmp	.+10     	; 0x1f98 <vfprintf+0x27c>
    1f8e:	20 e1       	ldi	r18, 0x10	; 16
    1f90:	30 e0       	ldi	r19, 0x00	; 0
    1f92:	02 c0       	rjmp	.+4      	; 0x1f98 <vfprintf+0x27c>
    1f94:	20 e1       	ldi	r18, 0x10	; 16
    1f96:	32 e0       	ldi	r19, 0x02	; 2
    1f98:	f8 01       	movw	r30, r16
    1f9a:	b7 fe       	sbrs	r11, 7
    1f9c:	07 c0       	rjmp	.+14     	; 0x1fac <vfprintf+0x290>
    1f9e:	60 81       	ld	r22, Z
    1fa0:	71 81       	ldd	r23, Z+1	; 0x01
    1fa2:	82 81       	ldd	r24, Z+2	; 0x02
    1fa4:	93 81       	ldd	r25, Z+3	; 0x03
    1fa6:	0c 5f       	subi	r16, 0xFC	; 252
    1fa8:	1f 4f       	sbci	r17, 0xFF	; 255
    1faa:	06 c0       	rjmp	.+12     	; 0x1fb8 <vfprintf+0x29c>
    1fac:	60 81       	ld	r22, Z
    1fae:	71 81       	ldd	r23, Z+1	; 0x01
    1fb0:	80 e0       	ldi	r24, 0x00	; 0
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	0e 5f       	subi	r16, 0xFE	; 254
    1fb6:	1f 4f       	sbci	r17, 0xFF	; 255
    1fb8:	a3 01       	movw	r20, r6
    1fba:	0e 94 15 12 	call	0x242a	; 0x242a <__ultoa_invert>
    1fbe:	88 2e       	mov	r8, r24
    1fc0:	86 18       	sub	r8, r6
    1fc2:	fb 2d       	mov	r31, r11
    1fc4:	ff 77       	andi	r31, 0x7F	; 127
    1fc6:	3f 2e       	mov	r3, r31
    1fc8:	36 fe       	sbrs	r3, 6
    1fca:	0d c0       	rjmp	.+26     	; 0x1fe6 <vfprintf+0x2ca>
    1fcc:	23 2d       	mov	r18, r3
    1fce:	2e 7f       	andi	r18, 0xFE	; 254
    1fd0:	a2 2e       	mov	r10, r18
    1fd2:	89 14       	cp	r8, r9
    1fd4:	58 f4       	brcc	.+22     	; 0x1fec <vfprintf+0x2d0>
    1fd6:	34 fe       	sbrs	r3, 4
    1fd8:	0b c0       	rjmp	.+22     	; 0x1ff0 <vfprintf+0x2d4>
    1fda:	32 fc       	sbrc	r3, 2
    1fdc:	09 c0       	rjmp	.+18     	; 0x1ff0 <vfprintf+0x2d4>
    1fde:	83 2d       	mov	r24, r3
    1fe0:	8e 7e       	andi	r24, 0xEE	; 238
    1fe2:	a8 2e       	mov	r10, r24
    1fe4:	05 c0       	rjmp	.+10     	; 0x1ff0 <vfprintf+0x2d4>
    1fe6:	b8 2c       	mov	r11, r8
    1fe8:	a3 2c       	mov	r10, r3
    1fea:	03 c0       	rjmp	.+6      	; 0x1ff2 <vfprintf+0x2d6>
    1fec:	b8 2c       	mov	r11, r8
    1fee:	01 c0       	rjmp	.+2      	; 0x1ff2 <vfprintf+0x2d6>
    1ff0:	b9 2c       	mov	r11, r9
    1ff2:	a4 fe       	sbrs	r10, 4
    1ff4:	0f c0       	rjmp	.+30     	; 0x2014 <vfprintf+0x2f8>
    1ff6:	fe 01       	movw	r30, r28
    1ff8:	e8 0d       	add	r30, r8
    1ffa:	f1 1d       	adc	r31, r1
    1ffc:	80 81       	ld	r24, Z
    1ffe:	80 33       	cpi	r24, 0x30	; 48
    2000:	21 f4       	brne	.+8      	; 0x200a <vfprintf+0x2ee>
    2002:	9a 2d       	mov	r25, r10
    2004:	99 7e       	andi	r25, 0xE9	; 233
    2006:	a9 2e       	mov	r10, r25
    2008:	09 c0       	rjmp	.+18     	; 0x201c <vfprintf+0x300>
    200a:	a2 fe       	sbrs	r10, 2
    200c:	06 c0       	rjmp	.+12     	; 0x201a <vfprintf+0x2fe>
    200e:	b3 94       	inc	r11
    2010:	b3 94       	inc	r11
    2012:	04 c0       	rjmp	.+8      	; 0x201c <vfprintf+0x300>
    2014:	8a 2d       	mov	r24, r10
    2016:	86 78       	andi	r24, 0x86	; 134
    2018:	09 f0       	breq	.+2      	; 0x201c <vfprintf+0x300>
    201a:	b3 94       	inc	r11
    201c:	a3 fc       	sbrc	r10, 3
    201e:	11 c0       	rjmp	.+34     	; 0x2042 <vfprintf+0x326>
    2020:	a0 fe       	sbrs	r10, 0
    2022:	06 c0       	rjmp	.+12     	; 0x2030 <vfprintf+0x314>
    2024:	b2 14       	cp	r11, r2
    2026:	88 f4       	brcc	.+34     	; 0x204a <vfprintf+0x32e>
    2028:	28 0c       	add	r2, r8
    202a:	92 2c       	mov	r9, r2
    202c:	9b 18       	sub	r9, r11
    202e:	0e c0       	rjmp	.+28     	; 0x204c <vfprintf+0x330>
    2030:	b2 14       	cp	r11, r2
    2032:	60 f4       	brcc	.+24     	; 0x204c <vfprintf+0x330>
    2034:	b6 01       	movw	r22, r12
    2036:	80 e2       	ldi	r24, 0x20	; 32
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <fputc>
    203e:	b3 94       	inc	r11
    2040:	f7 cf       	rjmp	.-18     	; 0x2030 <vfprintf+0x314>
    2042:	b2 14       	cp	r11, r2
    2044:	18 f4       	brcc	.+6      	; 0x204c <vfprintf+0x330>
    2046:	2b 18       	sub	r2, r11
    2048:	02 c0       	rjmp	.+4      	; 0x204e <vfprintf+0x332>
    204a:	98 2c       	mov	r9, r8
    204c:	21 2c       	mov	r2, r1
    204e:	a4 fe       	sbrs	r10, 4
    2050:	10 c0       	rjmp	.+32     	; 0x2072 <vfprintf+0x356>
    2052:	b6 01       	movw	r22, r12
    2054:	80 e3       	ldi	r24, 0x30	; 48
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <fputc>
    205c:	a2 fe       	sbrs	r10, 2
    205e:	17 c0       	rjmp	.+46     	; 0x208e <vfprintf+0x372>
    2060:	a1 fc       	sbrc	r10, 1
    2062:	03 c0       	rjmp	.+6      	; 0x206a <vfprintf+0x34e>
    2064:	88 e7       	ldi	r24, 0x78	; 120
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	02 c0       	rjmp	.+4      	; 0x206e <vfprintf+0x352>
    206a:	88 e5       	ldi	r24, 0x58	; 88
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	b6 01       	movw	r22, r12
    2070:	0c c0       	rjmp	.+24     	; 0x208a <vfprintf+0x36e>
    2072:	8a 2d       	mov	r24, r10
    2074:	86 78       	andi	r24, 0x86	; 134
    2076:	59 f0       	breq	.+22     	; 0x208e <vfprintf+0x372>
    2078:	a1 fe       	sbrs	r10, 1
    207a:	02 c0       	rjmp	.+4      	; 0x2080 <vfprintf+0x364>
    207c:	8b e2       	ldi	r24, 0x2B	; 43
    207e:	01 c0       	rjmp	.+2      	; 0x2082 <vfprintf+0x366>
    2080:	80 e2       	ldi	r24, 0x20	; 32
    2082:	a7 fc       	sbrc	r10, 7
    2084:	8d e2       	ldi	r24, 0x2D	; 45
    2086:	b6 01       	movw	r22, r12
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <fputc>
    208e:	89 14       	cp	r8, r9
    2090:	38 f4       	brcc	.+14     	; 0x20a0 <vfprintf+0x384>
    2092:	b6 01       	movw	r22, r12
    2094:	80 e3       	ldi	r24, 0x30	; 48
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <fputc>
    209c:	9a 94       	dec	r9
    209e:	f7 cf       	rjmp	.-18     	; 0x208e <vfprintf+0x372>
    20a0:	8a 94       	dec	r8
    20a2:	f3 01       	movw	r30, r6
    20a4:	e8 0d       	add	r30, r8
    20a6:	f1 1d       	adc	r31, r1
    20a8:	80 81       	ld	r24, Z
    20aa:	b6 01       	movw	r22, r12
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <fputc>
    20b2:	81 10       	cpse	r8, r1
    20b4:	f5 cf       	rjmp	.-22     	; 0x20a0 <vfprintf+0x384>
    20b6:	22 20       	and	r2, r2
    20b8:	09 f4       	brne	.+2      	; 0x20bc <vfprintf+0x3a0>
    20ba:	42 ce       	rjmp	.-892    	; 0x1d40 <vfprintf+0x24>
    20bc:	b6 01       	movw	r22, r12
    20be:	80 e2       	ldi	r24, 0x20	; 32
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <fputc>
    20c6:	2a 94       	dec	r2
    20c8:	f6 cf       	rjmp	.-20     	; 0x20b6 <vfprintf+0x39a>
    20ca:	f6 01       	movw	r30, r12
    20cc:	86 81       	ldd	r24, Z+6	; 0x06
    20ce:	97 81       	ldd	r25, Z+7	; 0x07
    20d0:	02 c0       	rjmp	.+4      	; 0x20d6 <vfprintf+0x3ba>
    20d2:	8f ef       	ldi	r24, 0xFF	; 255
    20d4:	9f ef       	ldi	r25, 0xFF	; 255
    20d6:	2b 96       	adiw	r28, 0x0b	; 11
    20d8:	e2 e1       	ldi	r30, 0x12	; 18
    20da:	0c 94 8f 12 	jmp	0x251e	; 0x251e <__epilogue_restores__>

000020de <calloc>:
    20de:	0f 93       	push	r16
    20e0:	1f 93       	push	r17
    20e2:	cf 93       	push	r28
    20e4:	df 93       	push	r29
    20e6:	86 9f       	mul	r24, r22
    20e8:	80 01       	movw	r16, r0
    20ea:	87 9f       	mul	r24, r23
    20ec:	10 0d       	add	r17, r0
    20ee:	96 9f       	mul	r25, r22
    20f0:	10 0d       	add	r17, r0
    20f2:	11 24       	eor	r1, r1
    20f4:	c8 01       	movw	r24, r16
    20f6:	0e 94 8b 10 	call	0x2116	; 0x2116 <malloc>
    20fa:	ec 01       	movw	r28, r24
    20fc:	00 97       	sbiw	r24, 0x00	; 0
    20fe:	29 f0       	breq	.+10     	; 0x210a <calloc+0x2c>
    2100:	a8 01       	movw	r20, r16
    2102:	60 e0       	ldi	r22, 0x00	; 0
    2104:	70 e0       	ldi	r23, 0x00	; 0
    2106:	0e 94 b7 11 	call	0x236e	; 0x236e <memset>
    210a:	ce 01       	movw	r24, r28
    210c:	df 91       	pop	r29
    210e:	cf 91       	pop	r28
    2110:	1f 91       	pop	r17
    2112:	0f 91       	pop	r16
    2114:	08 95       	ret

00002116 <malloc>:
    2116:	0f 93       	push	r16
    2118:	1f 93       	push	r17
    211a:	cf 93       	push	r28
    211c:	df 93       	push	r29
    211e:	82 30       	cpi	r24, 0x02	; 2
    2120:	91 05       	cpc	r25, r1
    2122:	10 f4       	brcc	.+4      	; 0x2128 <malloc+0x12>
    2124:	82 e0       	ldi	r24, 0x02	; 2
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	e0 91 58 03 	lds	r30, 0x0358	; 0x800358 <__flp>
    212c:	f0 91 59 03 	lds	r31, 0x0359	; 0x800359 <__flp+0x1>
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	a0 e0       	ldi	r26, 0x00	; 0
    2136:	b0 e0       	ldi	r27, 0x00	; 0
    2138:	30 97       	sbiw	r30, 0x00	; 0
    213a:	19 f1       	breq	.+70     	; 0x2182 <malloc+0x6c>
    213c:	40 81       	ld	r20, Z
    213e:	51 81       	ldd	r21, Z+1	; 0x01
    2140:	02 81       	ldd	r16, Z+2	; 0x02
    2142:	13 81       	ldd	r17, Z+3	; 0x03
    2144:	48 17       	cp	r20, r24
    2146:	59 07       	cpc	r21, r25
    2148:	c8 f0       	brcs	.+50     	; 0x217c <malloc+0x66>
    214a:	84 17       	cp	r24, r20
    214c:	95 07       	cpc	r25, r21
    214e:	69 f4       	brne	.+26     	; 0x216a <malloc+0x54>
    2150:	10 97       	sbiw	r26, 0x00	; 0
    2152:	31 f0       	breq	.+12     	; 0x2160 <malloc+0x4a>
    2154:	12 96       	adiw	r26, 0x02	; 2
    2156:	0c 93       	st	X, r16
    2158:	12 97       	sbiw	r26, 0x02	; 2
    215a:	13 96       	adiw	r26, 0x03	; 3
    215c:	1c 93       	st	X, r17
    215e:	27 c0       	rjmp	.+78     	; 0x21ae <malloc+0x98>
    2160:	00 93 58 03 	sts	0x0358, r16	; 0x800358 <__flp>
    2164:	10 93 59 03 	sts	0x0359, r17	; 0x800359 <__flp+0x1>
    2168:	22 c0       	rjmp	.+68     	; 0x21ae <malloc+0x98>
    216a:	21 15       	cp	r18, r1
    216c:	31 05       	cpc	r19, r1
    216e:	19 f0       	breq	.+6      	; 0x2176 <malloc+0x60>
    2170:	42 17       	cp	r20, r18
    2172:	53 07       	cpc	r21, r19
    2174:	18 f4       	brcc	.+6      	; 0x217c <malloc+0x66>
    2176:	9a 01       	movw	r18, r20
    2178:	bd 01       	movw	r22, r26
    217a:	ef 01       	movw	r28, r30
    217c:	df 01       	movw	r26, r30
    217e:	f8 01       	movw	r30, r16
    2180:	db cf       	rjmp	.-74     	; 0x2138 <malloc+0x22>
    2182:	21 15       	cp	r18, r1
    2184:	31 05       	cpc	r19, r1
    2186:	f9 f0       	breq	.+62     	; 0x21c6 <malloc+0xb0>
    2188:	28 1b       	sub	r18, r24
    218a:	39 0b       	sbc	r19, r25
    218c:	24 30       	cpi	r18, 0x04	; 4
    218e:	31 05       	cpc	r19, r1
    2190:	80 f4       	brcc	.+32     	; 0x21b2 <malloc+0x9c>
    2192:	8a 81       	ldd	r24, Y+2	; 0x02
    2194:	9b 81       	ldd	r25, Y+3	; 0x03
    2196:	61 15       	cp	r22, r1
    2198:	71 05       	cpc	r23, r1
    219a:	21 f0       	breq	.+8      	; 0x21a4 <malloc+0x8e>
    219c:	fb 01       	movw	r30, r22
    219e:	93 83       	std	Z+3, r25	; 0x03
    21a0:	82 83       	std	Z+2, r24	; 0x02
    21a2:	04 c0       	rjmp	.+8      	; 0x21ac <malloc+0x96>
    21a4:	90 93 59 03 	sts	0x0359, r25	; 0x800359 <__flp+0x1>
    21a8:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <__flp>
    21ac:	fe 01       	movw	r30, r28
    21ae:	32 96       	adiw	r30, 0x02	; 2
    21b0:	44 c0       	rjmp	.+136    	; 0x223a <malloc+0x124>
    21b2:	fe 01       	movw	r30, r28
    21b4:	e2 0f       	add	r30, r18
    21b6:	f3 1f       	adc	r31, r19
    21b8:	81 93       	st	Z+, r24
    21ba:	91 93       	st	Z+, r25
    21bc:	22 50       	subi	r18, 0x02	; 2
    21be:	31 09       	sbc	r19, r1
    21c0:	39 83       	std	Y+1, r19	; 0x01
    21c2:	28 83       	st	Y, r18
    21c4:	3a c0       	rjmp	.+116    	; 0x223a <malloc+0x124>
    21c6:	20 91 56 03 	lds	r18, 0x0356	; 0x800356 <__brkval>
    21ca:	30 91 57 03 	lds	r19, 0x0357	; 0x800357 <__brkval+0x1>
    21ce:	23 2b       	or	r18, r19
    21d0:	41 f4       	brne	.+16     	; 0x21e2 <malloc+0xcc>
    21d2:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    21d6:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    21da:	30 93 57 03 	sts	0x0357, r19	; 0x800357 <__brkval+0x1>
    21de:	20 93 56 03 	sts	0x0356, r18	; 0x800356 <__brkval>
    21e2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    21e6:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    21ea:	21 15       	cp	r18, r1
    21ec:	31 05       	cpc	r19, r1
    21ee:	41 f4       	brne	.+16     	; 0x2200 <malloc+0xea>
    21f0:	2d b7       	in	r18, 0x3d	; 61
    21f2:	3e b7       	in	r19, 0x3e	; 62
    21f4:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    21f8:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    21fc:	24 1b       	sub	r18, r20
    21fe:	35 0b       	sbc	r19, r21
    2200:	e0 91 56 03 	lds	r30, 0x0356	; 0x800356 <__brkval>
    2204:	f0 91 57 03 	lds	r31, 0x0357	; 0x800357 <__brkval+0x1>
    2208:	e2 17       	cp	r30, r18
    220a:	f3 07       	cpc	r31, r19
    220c:	a0 f4       	brcc	.+40     	; 0x2236 <malloc+0x120>
    220e:	2e 1b       	sub	r18, r30
    2210:	3f 0b       	sbc	r19, r31
    2212:	28 17       	cp	r18, r24
    2214:	39 07       	cpc	r19, r25
    2216:	78 f0       	brcs	.+30     	; 0x2236 <malloc+0x120>
    2218:	ac 01       	movw	r20, r24
    221a:	4e 5f       	subi	r20, 0xFE	; 254
    221c:	5f 4f       	sbci	r21, 0xFF	; 255
    221e:	24 17       	cp	r18, r20
    2220:	35 07       	cpc	r19, r21
    2222:	48 f0       	brcs	.+18     	; 0x2236 <malloc+0x120>
    2224:	4e 0f       	add	r20, r30
    2226:	5f 1f       	adc	r21, r31
    2228:	50 93 57 03 	sts	0x0357, r21	; 0x800357 <__brkval+0x1>
    222c:	40 93 56 03 	sts	0x0356, r20	; 0x800356 <__brkval>
    2230:	81 93       	st	Z+, r24
    2232:	91 93       	st	Z+, r25
    2234:	02 c0       	rjmp	.+4      	; 0x223a <malloc+0x124>
    2236:	e0 e0       	ldi	r30, 0x00	; 0
    2238:	f0 e0       	ldi	r31, 0x00	; 0
    223a:	cf 01       	movw	r24, r30
    223c:	df 91       	pop	r29
    223e:	cf 91       	pop	r28
    2240:	1f 91       	pop	r17
    2242:	0f 91       	pop	r16
    2244:	08 95       	ret

00002246 <free>:
    2246:	cf 93       	push	r28
    2248:	df 93       	push	r29
    224a:	00 97       	sbiw	r24, 0x00	; 0
    224c:	09 f4       	brne	.+2      	; 0x2250 <free+0xa>
    224e:	81 c0       	rjmp	.+258    	; 0x2352 <free+0x10c>
    2250:	fc 01       	movw	r30, r24
    2252:	32 97       	sbiw	r30, 0x02	; 2
    2254:	13 82       	std	Z+3, r1	; 0x03
    2256:	12 82       	std	Z+2, r1	; 0x02
    2258:	a0 91 58 03 	lds	r26, 0x0358	; 0x800358 <__flp>
    225c:	b0 91 59 03 	lds	r27, 0x0359	; 0x800359 <__flp+0x1>
    2260:	10 97       	sbiw	r26, 0x00	; 0
    2262:	81 f4       	brne	.+32     	; 0x2284 <free+0x3e>
    2264:	20 81       	ld	r18, Z
    2266:	31 81       	ldd	r19, Z+1	; 0x01
    2268:	82 0f       	add	r24, r18
    226a:	93 1f       	adc	r25, r19
    226c:	20 91 56 03 	lds	r18, 0x0356	; 0x800356 <__brkval>
    2270:	30 91 57 03 	lds	r19, 0x0357	; 0x800357 <__brkval+0x1>
    2274:	28 17       	cp	r18, r24
    2276:	39 07       	cpc	r19, r25
    2278:	51 f5       	brne	.+84     	; 0x22ce <free+0x88>
    227a:	f0 93 57 03 	sts	0x0357, r31	; 0x800357 <__brkval+0x1>
    227e:	e0 93 56 03 	sts	0x0356, r30	; 0x800356 <__brkval>
    2282:	67 c0       	rjmp	.+206    	; 0x2352 <free+0x10c>
    2284:	ed 01       	movw	r28, r26
    2286:	20 e0       	ldi	r18, 0x00	; 0
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	ce 17       	cp	r28, r30
    228c:	df 07       	cpc	r29, r31
    228e:	40 f4       	brcc	.+16     	; 0x22a0 <free+0x5a>
    2290:	4a 81       	ldd	r20, Y+2	; 0x02
    2292:	5b 81       	ldd	r21, Y+3	; 0x03
    2294:	9e 01       	movw	r18, r28
    2296:	41 15       	cp	r20, r1
    2298:	51 05       	cpc	r21, r1
    229a:	f1 f0       	breq	.+60     	; 0x22d8 <free+0x92>
    229c:	ea 01       	movw	r28, r20
    229e:	f5 cf       	rjmp	.-22     	; 0x228a <free+0x44>
    22a0:	d3 83       	std	Z+3, r29	; 0x03
    22a2:	c2 83       	std	Z+2, r28	; 0x02
    22a4:	40 81       	ld	r20, Z
    22a6:	51 81       	ldd	r21, Z+1	; 0x01
    22a8:	84 0f       	add	r24, r20
    22aa:	95 1f       	adc	r25, r21
    22ac:	c8 17       	cp	r28, r24
    22ae:	d9 07       	cpc	r29, r25
    22b0:	59 f4       	brne	.+22     	; 0x22c8 <free+0x82>
    22b2:	88 81       	ld	r24, Y
    22b4:	99 81       	ldd	r25, Y+1	; 0x01
    22b6:	84 0f       	add	r24, r20
    22b8:	95 1f       	adc	r25, r21
    22ba:	02 96       	adiw	r24, 0x02	; 2
    22bc:	91 83       	std	Z+1, r25	; 0x01
    22be:	80 83       	st	Z, r24
    22c0:	8a 81       	ldd	r24, Y+2	; 0x02
    22c2:	9b 81       	ldd	r25, Y+3	; 0x03
    22c4:	93 83       	std	Z+3, r25	; 0x03
    22c6:	82 83       	std	Z+2, r24	; 0x02
    22c8:	21 15       	cp	r18, r1
    22ca:	31 05       	cpc	r19, r1
    22cc:	29 f4       	brne	.+10     	; 0x22d8 <free+0x92>
    22ce:	f0 93 59 03 	sts	0x0359, r31	; 0x800359 <__flp+0x1>
    22d2:	e0 93 58 03 	sts	0x0358, r30	; 0x800358 <__flp>
    22d6:	3d c0       	rjmp	.+122    	; 0x2352 <free+0x10c>
    22d8:	e9 01       	movw	r28, r18
    22da:	fb 83       	std	Y+3, r31	; 0x03
    22dc:	ea 83       	std	Y+2, r30	; 0x02
    22de:	49 91       	ld	r20, Y+
    22e0:	59 91       	ld	r21, Y+
    22e2:	c4 0f       	add	r28, r20
    22e4:	d5 1f       	adc	r29, r21
    22e6:	ec 17       	cp	r30, r28
    22e8:	fd 07       	cpc	r31, r29
    22ea:	61 f4       	brne	.+24     	; 0x2304 <free+0xbe>
    22ec:	80 81       	ld	r24, Z
    22ee:	91 81       	ldd	r25, Z+1	; 0x01
    22f0:	84 0f       	add	r24, r20
    22f2:	95 1f       	adc	r25, r21
    22f4:	02 96       	adiw	r24, 0x02	; 2
    22f6:	e9 01       	movw	r28, r18
    22f8:	99 83       	std	Y+1, r25	; 0x01
    22fa:	88 83       	st	Y, r24
    22fc:	82 81       	ldd	r24, Z+2	; 0x02
    22fe:	93 81       	ldd	r25, Z+3	; 0x03
    2300:	9b 83       	std	Y+3, r25	; 0x03
    2302:	8a 83       	std	Y+2, r24	; 0x02
    2304:	e0 e0       	ldi	r30, 0x00	; 0
    2306:	f0 e0       	ldi	r31, 0x00	; 0
    2308:	12 96       	adiw	r26, 0x02	; 2
    230a:	8d 91       	ld	r24, X+
    230c:	9c 91       	ld	r25, X
    230e:	13 97       	sbiw	r26, 0x03	; 3
    2310:	00 97       	sbiw	r24, 0x00	; 0
    2312:	19 f0       	breq	.+6      	; 0x231a <free+0xd4>
    2314:	fd 01       	movw	r30, r26
    2316:	dc 01       	movw	r26, r24
    2318:	f7 cf       	rjmp	.-18     	; 0x2308 <free+0xc2>
    231a:	8d 91       	ld	r24, X+
    231c:	9c 91       	ld	r25, X
    231e:	11 97       	sbiw	r26, 0x01	; 1
    2320:	9d 01       	movw	r18, r26
    2322:	2e 5f       	subi	r18, 0xFE	; 254
    2324:	3f 4f       	sbci	r19, 0xFF	; 255
    2326:	82 0f       	add	r24, r18
    2328:	93 1f       	adc	r25, r19
    232a:	20 91 56 03 	lds	r18, 0x0356	; 0x800356 <__brkval>
    232e:	30 91 57 03 	lds	r19, 0x0357	; 0x800357 <__brkval+0x1>
    2332:	28 17       	cp	r18, r24
    2334:	39 07       	cpc	r19, r25
    2336:	69 f4       	brne	.+26     	; 0x2352 <free+0x10c>
    2338:	30 97       	sbiw	r30, 0x00	; 0
    233a:	29 f4       	brne	.+10     	; 0x2346 <free+0x100>
    233c:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <__flp+0x1>
    2340:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <__flp>
    2344:	02 c0       	rjmp	.+4      	; 0x234a <free+0x104>
    2346:	13 82       	std	Z+3, r1	; 0x03
    2348:	12 82       	std	Z+2, r1	; 0x02
    234a:	b0 93 57 03 	sts	0x0357, r27	; 0x800357 <__brkval+0x1>
    234e:	a0 93 56 03 	sts	0x0356, r26	; 0x800356 <__brkval>
    2352:	df 91       	pop	r29
    2354:	cf 91       	pop	r28
    2356:	08 95       	ret

00002358 <strnlen_P>:
    2358:	fc 01       	movw	r30, r24
    235a:	05 90       	lpm	r0, Z+
    235c:	61 50       	subi	r22, 0x01	; 1
    235e:	70 40       	sbci	r23, 0x00	; 0
    2360:	01 10       	cpse	r0, r1
    2362:	d8 f7       	brcc	.-10     	; 0x235a <strnlen_P+0x2>
    2364:	80 95       	com	r24
    2366:	90 95       	com	r25
    2368:	8e 0f       	add	r24, r30
    236a:	9f 1f       	adc	r25, r31
    236c:	08 95       	ret

0000236e <memset>:
    236e:	dc 01       	movw	r26, r24
    2370:	01 c0       	rjmp	.+2      	; 0x2374 <memset+0x6>
    2372:	6d 93       	st	X+, r22
    2374:	41 50       	subi	r20, 0x01	; 1
    2376:	50 40       	sbci	r21, 0x00	; 0
    2378:	e0 f7       	brcc	.-8      	; 0x2372 <memset+0x4>
    237a:	08 95       	ret

0000237c <strnlen>:
    237c:	fc 01       	movw	r30, r24
    237e:	61 50       	subi	r22, 0x01	; 1
    2380:	70 40       	sbci	r23, 0x00	; 0
    2382:	01 90       	ld	r0, Z+
    2384:	01 10       	cpse	r0, r1
    2386:	d8 f7       	brcc	.-10     	; 0x237e <strnlen+0x2>
    2388:	80 95       	com	r24
    238a:	90 95       	com	r25
    238c:	8e 0f       	add	r24, r30
    238e:	9f 1f       	adc	r25, r31
    2390:	08 95       	ret

00002392 <strrev>:
    2392:	dc 01       	movw	r26, r24
    2394:	fc 01       	movw	r30, r24
    2396:	67 2f       	mov	r22, r23
    2398:	71 91       	ld	r23, Z+
    239a:	77 23       	and	r23, r23
    239c:	e1 f7       	brne	.-8      	; 0x2396 <strrev+0x4>
    239e:	32 97       	sbiw	r30, 0x02	; 2
    23a0:	04 c0       	rjmp	.+8      	; 0x23aa <strrev+0x18>
    23a2:	7c 91       	ld	r23, X
    23a4:	6d 93       	st	X+, r22
    23a6:	70 83       	st	Z, r23
    23a8:	62 91       	ld	r22, -Z
    23aa:	ae 17       	cp	r26, r30
    23ac:	bf 07       	cpc	r27, r31
    23ae:	c8 f3       	brcs	.-14     	; 0x23a2 <strrev+0x10>
    23b0:	08 95       	ret

000023b2 <fputc>:
    23b2:	0f 93       	push	r16
    23b4:	1f 93       	push	r17
    23b6:	cf 93       	push	r28
    23b8:	df 93       	push	r29
    23ba:	fb 01       	movw	r30, r22
    23bc:	23 81       	ldd	r18, Z+3	; 0x03
    23be:	21 fd       	sbrc	r18, 1
    23c0:	03 c0       	rjmp	.+6      	; 0x23c8 <fputc+0x16>
    23c2:	8f ef       	ldi	r24, 0xFF	; 255
    23c4:	9f ef       	ldi	r25, 0xFF	; 255
    23c6:	2c c0       	rjmp	.+88     	; 0x2420 <fputc+0x6e>
    23c8:	22 ff       	sbrs	r18, 2
    23ca:	16 c0       	rjmp	.+44     	; 0x23f8 <fputc+0x46>
    23cc:	46 81       	ldd	r20, Z+6	; 0x06
    23ce:	57 81       	ldd	r21, Z+7	; 0x07
    23d0:	24 81       	ldd	r18, Z+4	; 0x04
    23d2:	35 81       	ldd	r19, Z+5	; 0x05
    23d4:	42 17       	cp	r20, r18
    23d6:	53 07       	cpc	r21, r19
    23d8:	44 f4       	brge	.+16     	; 0x23ea <fputc+0x38>
    23da:	a0 81       	ld	r26, Z
    23dc:	b1 81       	ldd	r27, Z+1	; 0x01
    23de:	9d 01       	movw	r18, r26
    23e0:	2f 5f       	subi	r18, 0xFF	; 255
    23e2:	3f 4f       	sbci	r19, 0xFF	; 255
    23e4:	31 83       	std	Z+1, r19	; 0x01
    23e6:	20 83       	st	Z, r18
    23e8:	8c 93       	st	X, r24
    23ea:	26 81       	ldd	r18, Z+6	; 0x06
    23ec:	37 81       	ldd	r19, Z+7	; 0x07
    23ee:	2f 5f       	subi	r18, 0xFF	; 255
    23f0:	3f 4f       	sbci	r19, 0xFF	; 255
    23f2:	37 83       	std	Z+7, r19	; 0x07
    23f4:	26 83       	std	Z+6, r18	; 0x06
    23f6:	14 c0       	rjmp	.+40     	; 0x2420 <fputc+0x6e>
    23f8:	8b 01       	movw	r16, r22
    23fa:	ec 01       	movw	r28, r24
    23fc:	fb 01       	movw	r30, r22
    23fe:	00 84       	ldd	r0, Z+8	; 0x08
    2400:	f1 85       	ldd	r31, Z+9	; 0x09
    2402:	e0 2d       	mov	r30, r0
    2404:	09 95       	icall
    2406:	89 2b       	or	r24, r25
    2408:	e1 f6       	brne	.-72     	; 0x23c2 <fputc+0x10>
    240a:	d8 01       	movw	r26, r16
    240c:	16 96       	adiw	r26, 0x06	; 6
    240e:	8d 91       	ld	r24, X+
    2410:	9c 91       	ld	r25, X
    2412:	17 97       	sbiw	r26, 0x07	; 7
    2414:	01 96       	adiw	r24, 0x01	; 1
    2416:	17 96       	adiw	r26, 0x07	; 7
    2418:	9c 93       	st	X, r25
    241a:	8e 93       	st	-X, r24
    241c:	16 97       	sbiw	r26, 0x06	; 6
    241e:	ce 01       	movw	r24, r28
    2420:	df 91       	pop	r29
    2422:	cf 91       	pop	r28
    2424:	1f 91       	pop	r17
    2426:	0f 91       	pop	r16
    2428:	08 95       	ret

0000242a <__ultoa_invert>:
    242a:	fa 01       	movw	r30, r20
    242c:	aa 27       	eor	r26, r26
    242e:	28 30       	cpi	r18, 0x08	; 8
    2430:	51 f1       	breq	.+84     	; 0x2486 <__ultoa_invert+0x5c>
    2432:	20 31       	cpi	r18, 0x10	; 16
    2434:	81 f1       	breq	.+96     	; 0x2496 <__ultoa_invert+0x6c>
    2436:	e8 94       	clt
    2438:	6f 93       	push	r22
    243a:	6e 7f       	andi	r22, 0xFE	; 254
    243c:	6e 5f       	subi	r22, 0xFE	; 254
    243e:	7f 4f       	sbci	r23, 0xFF	; 255
    2440:	8f 4f       	sbci	r24, 0xFF	; 255
    2442:	9f 4f       	sbci	r25, 0xFF	; 255
    2444:	af 4f       	sbci	r26, 0xFF	; 255
    2446:	b1 e0       	ldi	r27, 0x01	; 1
    2448:	3e d0       	rcall	.+124    	; 0x24c6 <__ultoa_invert+0x9c>
    244a:	b4 e0       	ldi	r27, 0x04	; 4
    244c:	3c d0       	rcall	.+120    	; 0x24c6 <__ultoa_invert+0x9c>
    244e:	67 0f       	add	r22, r23
    2450:	78 1f       	adc	r23, r24
    2452:	89 1f       	adc	r24, r25
    2454:	9a 1f       	adc	r25, r26
    2456:	a1 1d       	adc	r26, r1
    2458:	68 0f       	add	r22, r24
    245a:	79 1f       	adc	r23, r25
    245c:	8a 1f       	adc	r24, r26
    245e:	91 1d       	adc	r25, r1
    2460:	a1 1d       	adc	r26, r1
    2462:	6a 0f       	add	r22, r26
    2464:	71 1d       	adc	r23, r1
    2466:	81 1d       	adc	r24, r1
    2468:	91 1d       	adc	r25, r1
    246a:	a1 1d       	adc	r26, r1
    246c:	20 d0       	rcall	.+64     	; 0x24ae <__ultoa_invert+0x84>
    246e:	09 f4       	brne	.+2      	; 0x2472 <__ultoa_invert+0x48>
    2470:	68 94       	set
    2472:	3f 91       	pop	r19
    2474:	2a e0       	ldi	r18, 0x0A	; 10
    2476:	26 9f       	mul	r18, r22
    2478:	11 24       	eor	r1, r1
    247a:	30 19       	sub	r19, r0
    247c:	30 5d       	subi	r19, 0xD0	; 208
    247e:	31 93       	st	Z+, r19
    2480:	de f6       	brtc	.-74     	; 0x2438 <__ultoa_invert+0xe>
    2482:	cf 01       	movw	r24, r30
    2484:	08 95       	ret
    2486:	46 2f       	mov	r20, r22
    2488:	47 70       	andi	r20, 0x07	; 7
    248a:	40 5d       	subi	r20, 0xD0	; 208
    248c:	41 93       	st	Z+, r20
    248e:	b3 e0       	ldi	r27, 0x03	; 3
    2490:	0f d0       	rcall	.+30     	; 0x24b0 <__ultoa_invert+0x86>
    2492:	c9 f7       	brne	.-14     	; 0x2486 <__ultoa_invert+0x5c>
    2494:	f6 cf       	rjmp	.-20     	; 0x2482 <__ultoa_invert+0x58>
    2496:	46 2f       	mov	r20, r22
    2498:	4f 70       	andi	r20, 0x0F	; 15
    249a:	40 5d       	subi	r20, 0xD0	; 208
    249c:	4a 33       	cpi	r20, 0x3A	; 58
    249e:	18 f0       	brcs	.+6      	; 0x24a6 <__ultoa_invert+0x7c>
    24a0:	49 5d       	subi	r20, 0xD9	; 217
    24a2:	31 fd       	sbrc	r19, 1
    24a4:	40 52       	subi	r20, 0x20	; 32
    24a6:	41 93       	st	Z+, r20
    24a8:	02 d0       	rcall	.+4      	; 0x24ae <__ultoa_invert+0x84>
    24aa:	a9 f7       	brne	.-22     	; 0x2496 <__ultoa_invert+0x6c>
    24ac:	ea cf       	rjmp	.-44     	; 0x2482 <__ultoa_invert+0x58>
    24ae:	b4 e0       	ldi	r27, 0x04	; 4
    24b0:	a6 95       	lsr	r26
    24b2:	97 95       	ror	r25
    24b4:	87 95       	ror	r24
    24b6:	77 95       	ror	r23
    24b8:	67 95       	ror	r22
    24ba:	ba 95       	dec	r27
    24bc:	c9 f7       	brne	.-14     	; 0x24b0 <__ultoa_invert+0x86>
    24be:	00 97       	sbiw	r24, 0x00	; 0
    24c0:	61 05       	cpc	r22, r1
    24c2:	71 05       	cpc	r23, r1
    24c4:	08 95       	ret
    24c6:	9b 01       	movw	r18, r22
    24c8:	ac 01       	movw	r20, r24
    24ca:	0a 2e       	mov	r0, r26
    24cc:	06 94       	lsr	r0
    24ce:	57 95       	ror	r21
    24d0:	47 95       	ror	r20
    24d2:	37 95       	ror	r19
    24d4:	27 95       	ror	r18
    24d6:	ba 95       	dec	r27
    24d8:	c9 f7       	brne	.-14     	; 0x24cc <__ultoa_invert+0xa2>
    24da:	62 0f       	add	r22, r18
    24dc:	73 1f       	adc	r23, r19
    24de:	84 1f       	adc	r24, r20
    24e0:	95 1f       	adc	r25, r21
    24e2:	a0 1d       	adc	r26, r0
    24e4:	08 95       	ret

000024e6 <__prologue_saves__>:
    24e6:	2f 92       	push	r2
    24e8:	3f 92       	push	r3
    24ea:	4f 92       	push	r4
    24ec:	5f 92       	push	r5
    24ee:	6f 92       	push	r6
    24f0:	7f 92       	push	r7
    24f2:	8f 92       	push	r8
    24f4:	9f 92       	push	r9
    24f6:	af 92       	push	r10
    24f8:	bf 92       	push	r11
    24fa:	cf 92       	push	r12
    24fc:	df 92       	push	r13
    24fe:	ef 92       	push	r14
    2500:	ff 92       	push	r15
    2502:	0f 93       	push	r16
    2504:	1f 93       	push	r17
    2506:	cf 93       	push	r28
    2508:	df 93       	push	r29
    250a:	cd b7       	in	r28, 0x3d	; 61
    250c:	de b7       	in	r29, 0x3e	; 62
    250e:	ca 1b       	sub	r28, r26
    2510:	db 0b       	sbc	r29, r27
    2512:	0f b6       	in	r0, 0x3f	; 63
    2514:	f8 94       	cli
    2516:	de bf       	out	0x3e, r29	; 62
    2518:	0f be       	out	0x3f, r0	; 63
    251a:	cd bf       	out	0x3d, r28	; 61
    251c:	09 94       	ijmp

0000251e <__epilogue_restores__>:
    251e:	2a 88       	ldd	r2, Y+18	; 0x12
    2520:	39 88       	ldd	r3, Y+17	; 0x11
    2522:	48 88       	ldd	r4, Y+16	; 0x10
    2524:	5f 84       	ldd	r5, Y+15	; 0x0f
    2526:	6e 84       	ldd	r6, Y+14	; 0x0e
    2528:	7d 84       	ldd	r7, Y+13	; 0x0d
    252a:	8c 84       	ldd	r8, Y+12	; 0x0c
    252c:	9b 84       	ldd	r9, Y+11	; 0x0b
    252e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2530:	b9 84       	ldd	r11, Y+9	; 0x09
    2532:	c8 84       	ldd	r12, Y+8	; 0x08
    2534:	df 80       	ldd	r13, Y+7	; 0x07
    2536:	ee 80       	ldd	r14, Y+6	; 0x06
    2538:	fd 80       	ldd	r15, Y+5	; 0x05
    253a:	0c 81       	ldd	r16, Y+4	; 0x04
    253c:	1b 81       	ldd	r17, Y+3	; 0x03
    253e:	aa 81       	ldd	r26, Y+2	; 0x02
    2540:	b9 81       	ldd	r27, Y+1	; 0x01
    2542:	ce 0f       	add	r28, r30
    2544:	d1 1d       	adc	r29, r1
    2546:	0f b6       	in	r0, 0x3f	; 63
    2548:	f8 94       	cli
    254a:	de bf       	out	0x3e, r29	; 62
    254c:	0f be       	out	0x3f, r0	; 63
    254e:	cd bf       	out	0x3d, r28	; 61
    2550:	ed 01       	movw	r28, r26
    2552:	08 95       	ret

00002554 <_exit>:
    2554:	f8 94       	cli

00002556 <__stop_program>:
    2556:	ff cf       	rjmp	.-2      	; 0x2556 <__stop_program>
