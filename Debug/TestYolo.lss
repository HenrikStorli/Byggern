
TestYolo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001ba  00800100  00001f58  00001fec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f58  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000094  008002ba  008002ba  000021a6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000021a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002204  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c0  00000000  00000000  00002240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002f5a  00000000  00000000  00002500  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000137c  00000000  00000000  0000545a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015fa  00000000  00000000  000067d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006d0  00000000  00000000  00007dd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ac7  00000000  00000000  000084a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ac7  00000000  00000000  00008f67  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000250  00000000  00000000  0000aa2e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cb 01 	jmp	0x396	; 0x396 <__ctors_end>
       4:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
       8:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
       c:	0c 94 17 02 	jmp	0x42e	; 0x42e <__vector_3>
      10:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      14:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      18:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      1c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      20:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      24:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      28:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      2c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      30:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      34:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      38:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      3c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      40:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      44:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      48:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      4c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      50:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      54:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      58:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      5c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      60:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      64:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      68:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      6c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
      70:	08 4a       	sbci	r16, 0xA8	; 168
      72:	d7 3b       	cpi	r29, 0xB7	; 183
      74:	3b ce       	rjmp	.-906    	; 0xfffffcec <__eeprom_end+0xff7efcec>
      76:	01 6e       	ori	r16, 0xE1	; 225
      78:	84 bc       	out	0x24, r8	; 36
      7a:	bf fd       	.word	0xfdbf	; ????
      7c:	c1 2f       	mov	r28, r17
      7e:	3d 6c       	ori	r19, 0xCD	; 205
      80:	74 31       	cpi	r23, 0x14	; 20
      82:	9a bd       	out	0x2a, r25	; 42
      84:	56 83       	std	Z+6, r21	; 0x06
      86:	3d da       	rcall	.-2950   	; 0xfffff502 <__eeprom_end+0xff7ef502>
      88:	3d 00       	.word	0x003d	; ????
      8a:	c7 7f       	andi	r28, 0xF7	; 247
      8c:	11 be       	out	0x31, r1	; 49
      8e:	d9 e4       	ldi	r29, 0x49	; 73
      90:	bb 4c       	sbci	r27, 0xCB	; 203
      92:	3e 91       	ld	r19, -X
      94:	6b aa       	std	Y+51, r6	; 0x33
      96:	aa be       	out	0x3a, r10	; 58
      98:	00 00       	nop
      9a:	00 80       	ld	r0, Z
      9c:	3f 00       	.word	0x003f	; ????

0000009e <__trampolines_end>:
	...
      a6:	00 06       	cpc	r0, r16
      a8:	5f 5f       	subi	r21, 0xFF	; 255
      aa:	06 00       	.word	0x0006	; ????
      ac:	00 00       	nop
      ae:	00 07       	cpc	r16, r16
      b0:	07 00       	.word	0x0007	; ????
      b2:	07 07       	cpc	r16, r23
      b4:	00 00       	nop
      b6:	14 7f       	andi	r17, 0xF4	; 244
      b8:	7f 14       	cp	r7, r15
      ba:	7f 7f       	andi	r23, 0xFF	; 255
      bc:	14 00       	.word	0x0014	; ????
      be:	24 2e       	mov	r2, r20
      c0:	6b 6b       	ori	r22, 0xBB	; 187
      c2:	3a 12       	cpse	r3, r26
      c4:	00 00       	nop
      c6:	46 66       	ori	r20, 0x66	; 102
      c8:	30 18       	sub	r3, r0
      ca:	0c 66       	ori	r16, 0x6C	; 108
      cc:	62 00       	.word	0x0062	; ????
      ce:	30 7a       	andi	r19, 0xA0	; 160
      d0:	4f 5d       	subi	r20, 0xDF	; 223
      d2:	37 7a       	andi	r19, 0xA7	; 167
      d4:	48 00       	.word	0x0048	; ????
      d6:	04 07       	cpc	r16, r20
      d8:	03 00       	.word	0x0003	; ????
      da:	00 00       	nop
      dc:	00 00       	nop
      de:	00 1c       	adc	r0, r0
      e0:	3e 63       	ori	r19, 0x3E	; 62
      e2:	41 00       	.word	0x0041	; ????
      e4:	00 00       	nop
      e6:	00 41       	sbci	r16, 0x10	; 16
      e8:	63 3e       	cpi	r22, 0xE3	; 227
      ea:	1c 00       	.word	0x001c	; ????
      ec:	00 00       	nop
      ee:	08 2a       	or	r0, r24
      f0:	3e 1c       	adc	r3, r14
      f2:	1c 3e       	cpi	r17, 0xEC	; 236
      f4:	2a 08       	sbc	r2, r10
      f6:	08 08       	sbc	r0, r8
      f8:	3e 3e       	cpi	r19, 0xEE	; 238
      fa:	08 08       	sbc	r0, r8
      fc:	00 00       	nop
      fe:	00 a0       	ldd	r0, Z+32	; 0x20
     100:	e0 60       	ori	r30, 0x00	; 0
     102:	00 00       	nop
     104:	00 00       	nop
     106:	08 08       	sbc	r0, r8
     108:	08 08       	sbc	r0, r8
     10a:	08 08       	sbc	r0, r8
     10c:	00 00       	nop
     10e:	00 00       	nop
     110:	60 60       	ori	r22, 0x00	; 0
     112:	00 00       	nop
     114:	00 00       	nop
     116:	60 30       	cpi	r22, 0x00	; 0
     118:	18 0c       	add	r1, r8
     11a:	06 03       	mulsu	r16, r22
     11c:	01 00       	.word	0x0001	; ????
     11e:	3e 7f       	andi	r19, 0xFE	; 254
     120:	59 4d       	sbci	r21, 0xD9	; 217
     122:	7f 3e       	cpi	r23, 0xEF	; 239
     124:	00 00       	nop
     126:	42 42       	sbci	r20, 0x22	; 34
     128:	7f 7f       	andi	r23, 0xFF	; 255
     12a:	40 40       	sbci	r20, 0x00	; 0
     12c:	00 00       	nop
     12e:	62 73       	andi	r22, 0x32	; 50
     130:	59 49       	sbci	r21, 0x99	; 153
     132:	6f 66       	ori	r22, 0x6F	; 111
     134:	00 00       	nop
     136:	22 63       	ori	r18, 0x32	; 50
     138:	49 49       	sbci	r20, 0x99	; 153
     13a:	7f 36       	cpi	r23, 0x6F	; 111
     13c:	00 00       	nop
     13e:	18 1c       	adc	r1, r8
     140:	16 13       	cpse	r17, r22
     142:	7f 7f       	andi	r23, 0xFF	; 255
     144:	10 00       	.word	0x0010	; ????
     146:	27 67       	ori	r18, 0x77	; 119
     148:	45 45       	sbci	r20, 0x55	; 85
     14a:	7d 39       	cpi	r23, 0x9D	; 157
     14c:	00 00       	nop
     14e:	3c 7e       	andi	r19, 0xEC	; 236
     150:	4b 49       	sbci	r20, 0x9B	; 155
     152:	79 30       	cpi	r23, 0x09	; 9
     154:	00 00       	nop
     156:	03 63       	ori	r16, 0x33	; 51
     158:	71 19       	sub	r23, r1
     15a:	0f 07       	cpc	r16, r31
     15c:	00 00       	nop
     15e:	36 7f       	andi	r19, 0xF6	; 246
     160:	49 49       	sbci	r20, 0x99	; 153
     162:	7f 36       	cpi	r23, 0x6F	; 111
     164:	00 00       	nop
     166:	06 4f       	sbci	r16, 0xF6	; 246
     168:	49 69       	ori	r20, 0x99	; 153
     16a:	3f 1e       	adc	r3, r31
     16c:	00 00       	nop
     16e:	00 00       	nop
     170:	6c 6c       	ori	r22, 0xCC	; 204
     172:	00 00       	nop
     174:	00 00       	nop
     176:	00 a0       	ldd	r0, Z+32	; 0x20
     178:	ec 6c       	ori	r30, 0xCC	; 204
     17a:	00 00       	nop
     17c:	00 00       	nop
     17e:	08 1c       	adc	r0, r8
     180:	36 63       	ori	r19, 0x36	; 54
     182:	41 00       	.word	0x0041	; ????
     184:	00 00       	nop
     186:	14 14       	cp	r1, r4
     188:	14 14       	cp	r1, r4
     18a:	14 14       	cp	r1, r4
     18c:	00 00       	nop
     18e:	00 41       	sbci	r16, 0x10	; 16
     190:	63 36       	cpi	r22, 0x63	; 99
     192:	1c 08       	sbc	r1, r12
     194:	00 00       	nop
     196:	02 03       	mulsu	r16, r18
     198:	51 59       	subi	r21, 0x91	; 145
     19a:	0f 06       	cpc	r0, r31
     19c:	00 00       	nop
     19e:	3e 7f       	andi	r19, 0xFE	; 254
     1a0:	41 5d       	subi	r20, 0xD1	; 209
     1a2:	5d 1f       	adc	r21, r29
     1a4:	1e 00       	.word	0x001e	; ????
     1a6:	7c 7e       	andi	r23, 0xEC	; 236
     1a8:	13 13       	cpse	r17, r19
     1aa:	7e 7c       	andi	r23, 0xCE	; 206
     1ac:	00 00       	nop
     1ae:	41 7f       	andi	r20, 0xF1	; 241
     1b0:	7f 49       	sbci	r23, 0x9F	; 159
     1b2:	49 7f       	andi	r20, 0xF9	; 249
     1b4:	36 00       	.word	0x0036	; ????
     1b6:	1c 3e       	cpi	r17, 0xEC	; 236
     1b8:	63 41       	sbci	r22, 0x13	; 19
     1ba:	41 63       	ori	r20, 0x31	; 49
     1bc:	22 00       	.word	0x0022	; ????
     1be:	41 7f       	andi	r20, 0xF1	; 241
     1c0:	7f 41       	sbci	r23, 0x1F	; 31
     1c2:	63 7f       	andi	r22, 0xF3	; 243
     1c4:	1c 00       	.word	0x001c	; ????
     1c6:	41 7f       	andi	r20, 0xF1	; 241
     1c8:	7f 49       	sbci	r23, 0x9F	; 159
     1ca:	5d 41       	sbci	r21, 0x1D	; 29
     1cc:	63 00       	.word	0x0063	; ????
     1ce:	41 7f       	andi	r20, 0xF1	; 241
     1d0:	7f 49       	sbci	r23, 0x9F	; 159
     1d2:	1d 01       	movw	r2, r26
     1d4:	03 00       	.word	0x0003	; ????
     1d6:	1c 3e       	cpi	r17, 0xEC	; 236
     1d8:	63 41       	sbci	r22, 0x13	; 19
     1da:	51 73       	andi	r21, 0x31	; 49
     1dc:	72 00       	.word	0x0072	; ????
     1de:	7f 7f       	andi	r23, 0xFF	; 255
     1e0:	08 08       	sbc	r0, r8
     1e2:	7f 7f       	andi	r23, 0xFF	; 255
     1e4:	00 00       	nop
     1e6:	00 41       	sbci	r16, 0x10	; 16
     1e8:	7f 7f       	andi	r23, 0xFF	; 255
     1ea:	41 00       	.word	0x0041	; ????
     1ec:	00 00       	nop
     1ee:	30 70       	andi	r19, 0x00	; 0
     1f0:	40 41       	sbci	r20, 0x10	; 16
     1f2:	7f 3f       	cpi	r23, 0xFF	; 255
     1f4:	01 00       	.word	0x0001	; ????
     1f6:	41 7f       	andi	r20, 0xF1	; 241
     1f8:	7f 08       	sbc	r7, r15
     1fa:	1c 77       	andi	r17, 0x7C	; 124
     1fc:	63 00       	.word	0x0063	; ????
     1fe:	41 7f       	andi	r20, 0xF1	; 241
     200:	7f 41       	sbci	r23, 0x1F	; 31
     202:	40 60       	ori	r20, 0x00	; 0
     204:	70 00       	.word	0x0070	; ????
     206:	7f 7f       	andi	r23, 0xFF	; 255
     208:	06 0c       	add	r0, r6
     20a:	06 7f       	andi	r16, 0xF6	; 246
     20c:	7f 00       	.word	0x007f	; ????
     20e:	7f 7f       	andi	r23, 0xFF	; 255
     210:	06 0c       	add	r0, r6
     212:	18 7f       	andi	r17, 0xF8	; 248
     214:	7f 00       	.word	0x007f	; ????
     216:	1c 3e       	cpi	r17, 0xEC	; 236
     218:	63 41       	sbci	r22, 0x13	; 19
     21a:	63 3e       	cpi	r22, 0xE3	; 227
     21c:	1c 00       	.word	0x001c	; ????
     21e:	41 7f       	andi	r20, 0xF1	; 241
     220:	7f 49       	sbci	r23, 0x9F	; 159
     222:	09 0f       	add	r16, r25
     224:	06 00       	.word	0x0006	; ????
     226:	1e 3f       	cpi	r17, 0xFE	; 254
     228:	21 71       	andi	r18, 0x11	; 17
     22a:	7f 5e       	subi	r23, 0xEF	; 239
     22c:	00 00       	nop
     22e:	41 7f       	andi	r20, 0xF1	; 241
     230:	7f 19       	sub	r23, r15
     232:	39 6f       	ori	r19, 0xF9	; 249
     234:	46 00       	.word	0x0046	; ????
     236:	26 67       	ori	r18, 0x76	; 118
     238:	4d 59       	subi	r20, 0x9D	; 157
     23a:	7b 32       	cpi	r23, 0x2B	; 43
     23c:	00 00       	nop
     23e:	03 41       	sbci	r16, 0x13	; 19
     240:	7f 7f       	andi	r23, 0xFF	; 255
     242:	41 03       	mulsu	r20, r17
     244:	00 00       	nop
     246:	7f 7f       	andi	r23, 0xFF	; 255
     248:	40 40       	sbci	r20, 0x00	; 0
     24a:	7f 7f       	andi	r23, 0xFF	; 255
     24c:	00 00       	nop
     24e:	1f 3f       	cpi	r17, 0xFF	; 255
     250:	60 60       	ori	r22, 0x00	; 0
     252:	3f 1f       	adc	r19, r31
     254:	00 00       	nop
     256:	7f 7f       	andi	r23, 0xFF	; 255
     258:	30 18       	sub	r3, r0
     25a:	30 7f       	andi	r19, 0xF0	; 240
     25c:	7f 00       	.word	0x007f	; ????
     25e:	63 77       	andi	r22, 0x73	; 115
     260:	1c 08       	sbc	r1, r12
     262:	1c 77       	andi	r17, 0x7C	; 124
     264:	63 00       	.word	0x0063	; ????
     266:	07 4f       	sbci	r16, 0xF7	; 247
     268:	78 78       	andi	r23, 0x88	; 136
     26a:	4f 07       	cpc	r20, r31
     26c:	00 00       	nop
     26e:	67 73       	andi	r22, 0x37	; 55
     270:	59 4d       	sbci	r21, 0xD9	; 217
     272:	47 63       	ori	r20, 0x37	; 55
     274:	71 00       	.word	0x0071	; ????
     276:	00 7f       	andi	r16, 0xF0	; 240
     278:	7f 41       	sbci	r23, 0x1F	; 31
     27a:	41 00       	.word	0x0041	; ????
     27c:	00 00       	nop
     27e:	01 03       	mulsu	r16, r17
     280:	06 0c       	add	r0, r6
     282:	18 30       	cpi	r17, 0x08	; 8
     284:	60 00       	.word	0x0060	; ????
     286:	00 41       	sbci	r16, 0x10	; 16
     288:	41 7f       	andi	r20, 0xF1	; 241
     28a:	7f 00       	.word	0x007f	; ????
     28c:	00 00       	nop
     28e:	08 0c       	add	r0, r8
     290:	06 03       	mulsu	r16, r22
     292:	06 0c       	add	r0, r6
     294:	08 00       	.word	0x0008	; ????
     296:	80 80       	ld	r8, Z
     298:	80 80       	ld	r8, Z
     29a:	80 80       	ld	r8, Z
     29c:	80 80       	ld	r8, Z
     29e:	00 00       	nop
     2a0:	03 07       	cpc	r16, r19
     2a2:	04 00       	.word	0x0004	; ????
     2a4:	00 00       	nop
     2a6:	20 74       	andi	r18, 0x40	; 64
     2a8:	54 54       	subi	r21, 0x44	; 68
     2aa:	3c 78       	andi	r19, 0x8C	; 140
     2ac:	40 00       	.word	0x0040	; ????
     2ae:	41 3f       	cpi	r20, 0xF1	; 241
     2b0:	7f 44       	sbci	r23, 0x4F	; 79
     2b2:	44 7c       	andi	r20, 0xC4	; 196
     2b4:	38 00       	.word	0x0038	; ????
     2b6:	38 7c       	andi	r19, 0xC8	; 200
     2b8:	44 44       	sbci	r20, 0x44	; 68
     2ba:	6c 28       	or	r6, r12
     2bc:	00 00       	nop
     2be:	30 78       	andi	r19, 0x80	; 128
     2c0:	48 49       	sbci	r20, 0x98	; 152
     2c2:	3f 7f       	andi	r19, 0xFF	; 255
     2c4:	40 00       	.word	0x0040	; ????
     2c6:	38 7c       	andi	r19, 0xC8	; 200
     2c8:	54 54       	subi	r21, 0x44	; 68
     2ca:	5c 18       	sub	r5, r12
     2cc:	00 00       	nop
     2ce:	48 7e       	andi	r20, 0xE8	; 232
     2d0:	7f 49       	sbci	r23, 0x9F	; 159
     2d2:	03 02       	muls	r16, r19
     2d4:	00 00       	nop
     2d6:	98 bc       	out	0x28, r9	; 40
     2d8:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2da:	f8 7c       	andi	r31, 0xC8	; 200
     2dc:	04 00       	.word	0x0004	; ????
     2de:	41 7f       	andi	r20, 0xF1	; 241
     2e0:	7f 08       	sbc	r7, r15
     2e2:	04 7c       	andi	r16, 0xC4	; 196
     2e4:	78 00       	.word	0x0078	; ????
     2e6:	00 44       	sbci	r16, 0x40	; 64
     2e8:	7d 7d       	andi	r23, 0xDD	; 221
     2ea:	40 00       	.word	0x0040	; ????
     2ec:	00 00       	nop
     2ee:	40 c4       	rjmp	.+2176   	; 0xb70 <menu+0x118>
     2f0:	84 fd       	sbrc	r24, 4
     2f2:	7d 00       	.word	0x007d	; ????
     2f4:	00 00       	nop
     2f6:	41 7f       	andi	r20, 0xF1	; 241
     2f8:	7f 10       	cpse	r7, r15
     2fa:	38 6c       	ori	r19, 0xC8	; 200
     2fc:	44 00       	.word	0x0044	; ????
     2fe:	00 41       	sbci	r16, 0x10	; 16
     300:	7f 7f       	andi	r23, 0xFF	; 255
     302:	40 00       	.word	0x0040	; ????
     304:	00 00       	nop
     306:	7c 7c       	andi	r23, 0xCC	; 204
     308:	0c 18       	sub	r0, r12
     30a:	0c 7c       	andi	r16, 0xCC	; 204
     30c:	78 00       	.word	0x0078	; ????
     30e:	7c 7c       	andi	r23, 0xCC	; 204
     310:	04 04       	cpc	r0, r4
     312:	7c 78       	andi	r23, 0x8C	; 140
     314:	00 00       	nop
     316:	38 7c       	andi	r19, 0xC8	; 200
     318:	44 44       	sbci	r20, 0x44	; 68
     31a:	7c 38       	cpi	r23, 0x8C	; 140
     31c:	00 00       	nop
     31e:	84 fc       	sbrc	r8, 4
     320:	f8 a4       	ldd	r15, Y+40	; 0x28
     322:	24 3c       	cpi	r18, 0xC4	; 196
     324:	18 00       	.word	0x0018	; ????
     326:	18 3c       	cpi	r17, 0xC8	; 200
     328:	24 a4       	ldd	r2, Z+44	; 0x2c
     32a:	f8 fc       	.word	0xfcf8	; ????
     32c:	84 00       	.word	0x0084	; ????
     32e:	44 7c       	andi	r20, 0xC4	; 196
     330:	78 44       	sbci	r23, 0x48	; 72
     332:	1c 18       	sub	r1, r12
     334:	00 00       	nop
     336:	48 5c       	subi	r20, 0xC8	; 200
     338:	54 54       	subi	r21, 0x44	; 68
     33a:	74 24       	eor	r7, r4
     33c:	00 00       	nop
     33e:	00 04       	cpc	r0, r0
     340:	3e 7f       	andi	r19, 0xFE	; 254
     342:	44 24       	eor	r4, r4
     344:	00 00       	nop
     346:	3c 7c       	andi	r19, 0xCC	; 204
     348:	40 40       	sbci	r20, 0x00	; 0
     34a:	3c 7c       	andi	r19, 0xCC	; 204
     34c:	40 00       	.word	0x0040	; ????
     34e:	1c 3c       	cpi	r17, 0xCC	; 204
     350:	60 60       	ori	r22, 0x00	; 0
     352:	3c 1c       	adc	r3, r12
     354:	00 00       	nop
     356:	3c 7c       	andi	r19, 0xCC	; 204
     358:	60 30       	cpi	r22, 0x00	; 0
     35a:	60 7c       	andi	r22, 0xC0	; 192
     35c:	3c 00       	.word	0x003c	; ????
     35e:	44 6c       	ori	r20, 0xC4	; 196
     360:	38 10       	cpse	r3, r8
     362:	38 6c       	ori	r19, 0xC8	; 200
     364:	44 00       	.word	0x0044	; ????
     366:	9c bc       	out	0x2c, r9	; 44
     368:	a0 a0       	ldd	r10, Z+32	; 0x20
     36a:	fc 7c       	andi	r31, 0xCC	; 204
     36c:	00 00       	nop
     36e:	4c 64       	ori	r20, 0x4C	; 76
     370:	74 5c       	subi	r23, 0xC4	; 196
     372:	4c 64       	ori	r20, 0x4C	; 76
     374:	00 00       	nop
     376:	08 08       	sbc	r0, r8
     378:	3e 77       	andi	r19, 0x7E	; 126
     37a:	41 41       	sbci	r20, 0x11	; 17
     37c:	00 00       	nop
     37e:	00 00       	nop
     380:	00 77       	andi	r16, 0x70	; 112
     382:	77 00       	.word	0x0077	; ????
     384:	00 00       	nop
     386:	41 41       	sbci	r20, 0x11	; 17
     388:	77 3e       	cpi	r23, 0xE7	; 231
     38a:	08 08       	sbc	r0, r8
     38c:	00 00       	nop
     38e:	02 03       	mulsu	r16, r18
     390:	01 03       	mulsu	r16, r17
     392:	02 03       	mulsu	r16, r18
     394:	01 00       	.word	0x0001	; ????

00000396 <__ctors_end>:
     396:	11 24       	eor	r1, r1
     398:	1f be       	out	0x3f, r1	; 63
     39a:	cf ef       	ldi	r28, 0xFF	; 255
     39c:	d4 e0       	ldi	r29, 0x04	; 4
     39e:	de bf       	out	0x3e, r29	; 62
     3a0:	cd bf       	out	0x3d, r28	; 61

000003a2 <__do_copy_data>:
     3a2:	12 e0       	ldi	r17, 0x02	; 2
     3a4:	a0 e0       	ldi	r26, 0x00	; 0
     3a6:	b1 e0       	ldi	r27, 0x01	; 1
     3a8:	e8 e5       	ldi	r30, 0x58	; 88
     3aa:	ff e1       	ldi	r31, 0x1F	; 31
     3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <__do_copy_data+0x10>
     3ae:	05 90       	lpm	r0, Z+
     3b0:	0d 92       	st	X+, r0
     3b2:	aa 3b       	cpi	r26, 0xBA	; 186
     3b4:	b1 07       	cpc	r27, r17
     3b6:	d9 f7       	brne	.-10     	; 0x3ae <__do_copy_data+0xc>

000003b8 <__do_clear_bss>:
     3b8:	23 e0       	ldi	r18, 0x03	; 3
     3ba:	aa eb       	ldi	r26, 0xBA	; 186
     3bc:	b2 e0       	ldi	r27, 0x02	; 2
     3be:	01 c0       	rjmp	.+2      	; 0x3c2 <.do_clear_bss_start>

000003c0 <.do_clear_bss_loop>:
     3c0:	1d 92       	st	X+, r1

000003c2 <.do_clear_bss_start>:
     3c2:	ae 34       	cpi	r26, 0x4E	; 78
     3c4:	b2 07       	cpc	r27, r18
     3c6:	e1 f7       	brne	.-8      	; 0x3c0 <.do_clear_bss_loop>
     3c8:	0e 94 c1 07 	call	0xf82	; 0xf82 <main>
     3cc:	0c 94 aa 0f 	jmp	0x1f54	; 0x1f54 <_exit>

000003d0 <__bad_interrupt>:
     3d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003d4 <ADC_read>:
    uint8_t retreived_value = ext_ram1[adrs];
    if (retreived_value != 0b01010101) {
        printf("ADC error, ext_ram1[%4d] = %02X  \n\r", adrs, retreived_value);
    }
    else{
        printf("ADC success, ext_ram1[%4d] = %02X  \n\r", adrs, retreived_value);
     3d4:	80 68       	ori	r24, 0x80	; 128
     3d6:	e1 e0       	ldi	r30, 0x01	; 1
     3d8:	f4 e1       	ldi	r31, 0x14	; 20
     3da:	80 83       	st	Z, r24
     3dc:	86 ef       	ldi	r24, 0xF6	; 246
     3de:	8a 95       	dec	r24
     3e0:	f1 f7       	brne	.-4      	; 0x3de <ADC_read+0xa>
     3e2:	80 81       	ld	r24, Z
     3e4:	08 95       	ret

000003e6 <ADC_calibrate>:
     3e6:	e1 e0       	ldi	r30, 0x01	; 1
     3e8:	f4 e1       	ldi	r31, 0x14	; 20
     3ea:	20 e8       	ldi	r18, 0x80	; 128
     3ec:	20 83       	st	Z, r18
     3ee:	26 ef       	ldi	r18, 0xF6	; 246
     3f0:	2a 95       	dec	r18
     3f2:	f1 f7       	brne	.-4      	; 0x3f0 <ADC_calibrate+0xa>
     3f4:	20 81       	ld	r18, Z
     3f6:	30 e0       	ldi	r19, 0x00	; 0
     3f8:	dc 01       	movw	r26, r24
     3fa:	2d 93       	st	X+, r18
     3fc:	3c 93       	st	X, r19
     3fe:	21 e8       	ldi	r18, 0x81	; 129
     400:	20 83       	st	Z, r18
     402:	b6 ef       	ldi	r27, 0xF6	; 246
     404:	ba 95       	dec	r27
     406:	f1 f7       	brne	.-4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     408:	20 81       	ld	r18, Z
     40a:	30 e0       	ldi	r19, 0x00	; 0
     40c:	fc 01       	movw	r30, r24
     40e:	33 83       	std	Z+3, r19	; 0x03
     410:	22 83       	std	Z+2, r18	; 0x02
     412:	08 95       	ret

00000414 <timer_init>:
}


void timer_init(void) {

    DDRB|=(1<<PB0);  /*set OC0 pin as output*/
     414:	b8 9a       	sbi	0x17, 0	; 23

    TCCR0 |= (1<<WGM01) | (0<<WGM00);
     416:	83 b7       	in	r24, 0x33	; 51
     418:	88 60       	ori	r24, 0x08	; 8
     41a:	83 bf       	out	0x33, r24	; 51
    TCCR0 |= (1<<COM00);
     41c:	83 b7       	in	r24, 0x33	; 51
     41e:	80 61       	ori	r24, 0x10	; 16
     420:	83 bf       	out	0x33, r24	; 51
    TCCR0 |= (1<<CS00);
     422:	83 b7       	in	r24, 0x33	; 51
     424:	81 60       	ori	r24, 0x01	; 1
     426:	83 bf       	out	0x33, r24	; 51

    OCR0 = 0b00000001;
     428:	81 e0       	ldi	r24, 0x01	; 1
     42a:	81 bf       	out	0x31, r24	; 49
     42c:	08 95       	ret

0000042e <__vector_3>:
    sei();

//    MCP_CANINTE |= MCP_RX_INT; //Enable buffer 1 and 0 interrupt.
}

ISR(INT2_vect){
     42e:	1f 92       	push	r1
     430:	0f 92       	push	r0
     432:	0f b6       	in	r0, 0x3f	; 63
     434:	0f 92       	push	r0
     436:	11 24       	eor	r1, r1
    CAN_meessage_reception();
}
     438:	0f 90       	pop	r0
     43a:	0f be       	out	0x3f, r0	; 63
     43c:	0f 90       	pop	r0
     43e:	1f 90       	pop	r1
     440:	18 95       	reti

00000442 <spi_master_CS>:

void spi_master_CS(unsigned char state){

    //DDR_SPI |= (1 << SS);

    if(!state) {
     442:	81 11       	cpse	r24, r1
     444:	02 c0       	rjmp	.+4      	; 0x44a <spi_master_CS+0x8>
        //Lower CS pin
        PORT_SPI &= ~(1 << SS);
     446:	c4 98       	cbi	0x18, 4	; 24
     448:	08 95       	ret
        //_delay_us(40);
        }
    else {
        // Set CS pin
        PORT_SPI |= (1 << SS);
     44a:	c4 9a       	sbi	0x18, 4	; 24
     44c:	08 95       	ret

0000044e <mcp_write>:

void mcp_set_mode(uint8_t mode){
    mcp_write(MCP_CANCTRL, mode);
}

void mcp_write(uint8_t adrs, uint8_t value){
     44e:	cf 93       	push	r28
     450:	df 93       	push	r29
     452:	d8 2f       	mov	r29, r24
     454:	c6 2f       	mov	r28, r22

    spi_master_CS(0); //Select CAN controller
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	0e 94 21 02 	call	0x442	; 0x442 <spi_master_CS>

    //spi_write(MODE_LOOPBACK);
    spi_write(MCP_WRITE); // Instruction
     45c:	82 e0       	ldi	r24, 0x02	; 2
     45e:	0e 94 fc 07 	call	0xff8	; 0xff8 <spi_write>
    spi_write(adrs);    //Adress
     462:	8d 2f       	mov	r24, r29
     464:	0e 94 fc 07 	call	0xff8	; 0xff8 <spi_write>
    spi_write(value);   // Data
     468:	8c 2f       	mov	r24, r28
     46a:	0e 94 fc 07 	call	0xff8	; 0xff8 <spi_write>

    spi_master_CS(1); //Deselect CAN controller
     46e:	81 e0       	ldi	r24, 0x01	; 1
     470:	0e 94 21 02 	call	0x442	; 0x442 <spi_master_CS>
}
     474:	df 91       	pop	r29
     476:	cf 91       	pop	r28
     478:	08 95       	ret

0000047a <mcp_set_mode>:

    return 0;
}

void mcp_set_mode(uint8_t mode){
    mcp_write(MCP_CANCTRL, mode);
     47a:	68 2f       	mov	r22, r24
     47c:	8f e0       	ldi	r24, 0x0F	; 15
     47e:	0e 94 27 02 	call	0x44e	; 0x44e <mcp_write>
     482:	08 95       	ret

00000484 <mcp_read>:

    spi_master_CS(1); //Deselect CAN controller
}


uint8_t mcp_read(uint8_t adrs){
     484:	cf 93       	push	r28
     486:	c8 2f       	mov	r28, r24
   uint8_t result;

   spi_master_CS(0);
     488:	80 e0       	ldi	r24, 0x00	; 0
     48a:	0e 94 21 02 	call	0x442	; 0x442 <spi_master_CS>

   spi_write(MCP_READ); //Instruction
     48e:	83 e0       	ldi	r24, 0x03	; 3
     490:	0e 94 fc 07 	call	0xff8	; 0xff8 <spi_write>
   spi_write(adrs); // Adress
     494:	8c 2f       	mov	r24, r28
     496:	0e 94 fc 07 	call	0xff8	; 0xff8 <spi_write>
   result =  spi_read(); //Read return value
     49a:	0e 94 00 08 	call	0x1000	; 0x1000 <spi_read>
     49e:	c8 2f       	mov	r28, r24

   spi_master_CS(1);
     4a0:	81 e0       	ldi	r24, 0x01	; 1
     4a2:	0e 94 21 02 	call	0x442	; 0x442 <spi_master_CS>

   return result;
}
     4a6:	8c 2f       	mov	r24, r28
     4a8:	cf 91       	pop	r28
     4aa:	08 95       	ret

000004ac <mcp_reset>:
        }
}

void mcp_reset(){

    spi_master_CS(0);
     4ac:	80 e0       	ldi	r24, 0x00	; 0
     4ae:	0e 94 21 02 	call	0x442	; 0x442 <spi_master_CS>
    spi_write(MCP_RESET);
     4b2:	80 ec       	ldi	r24, 0xC0	; 192
     4b4:	0e 94 fc 07 	call	0xff8	; 0xff8 <spi_write>
    spi_master_CS(1);
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	0e 94 21 02 	call	0x442	; 0x442 <spi_master_CS>
     4be:	08 95       	ret

000004c0 <mcp_init>:
 */

#include "mcp2515_driver.h"


uint8_t mcp_init(uint8_t mode){
     4c0:	cf 93       	push	r28
     4c2:	c8 2f       	mov	r28, r24
    uint8_t value;

    spi_init();
     4c4:	0e 94 05 08 	call	0x100a	; 0x100a <spi_init>
    mcp_reset();
     4c8:	0e 94 56 02 	call	0x4ac	; 0x4ac <mcp_reset>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4cc:	8f ef       	ldi	r24, 0xFF	; 255
     4ce:	9f e8       	ldi	r25, 0x8F	; 143
     4d0:	01 97       	sbiw	r24, 0x01	; 1
     4d2:	f1 f7       	brne	.-4      	; 0x4d0 <mcp_init+0x10>
     4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <mcp_init+0x16>
     4d6:	00 00       	nop

    _delay_ms(30);
    value = mcp_read(MCP_CANSTAT);
     4d8:	8e e0       	ldi	r24, 0x0E	; 14
     4da:	0e 94 42 02 	call	0x484	; 0x484 <mcp_read>
    if((value & MODE_MASK) != MODE_CONFIG){
     4de:	80 7e       	andi	r24, 0xE0	; 224
     4e0:	80 38       	cpi	r24, 0x80	; 128
     4e2:	31 f0       	breq	.+12     	; 0x4f0 <mcp_init+0x30>
        printf("MCP2515 is NOT in confiuration mode after reset!\n");
     4e4:	8a e1       	ldi	r24, 0x1A	; 26
     4e6:	91 e0       	ldi	r25, 0x01	; 1
     4e8:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <puts>
        return 1;
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	10 c0       	rjmp	.+32     	; 0x510 <__stack+0x11>
    }

    mcp_set_mode(mode);
     4f0:	8c 2f       	mov	r24, r28
     4f2:	0e 94 3d 02 	call	0x47a	; 0x47a <mcp_set_mode>

    value = mcp_read(MCP_CANSTAT);
     4f6:	8e e0       	ldi	r24, 0x0E	; 14
     4f8:	0e 94 42 02 	call	0x484	; 0x484 <mcp_read>
    if((value & MODE_MASK) != mode){
     4fc:	80 7e       	andi	r24, 0xE0	; 224
     4fe:	8c 17       	cp	r24, r28
     500:	31 f0       	breq	.+12     	; 0x50e <__stack+0xf>
        printf("MCP2515 is NOT in the specified mode after initialization!\n");
     502:	8b e4       	ldi	r24, 0x4B	; 75
     504:	91 e0       	ldi	r25, 0x01	; 1
     506:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <puts>
        return 1;
     50a:	81 e0       	ldi	r24, 0x01	; 1
     50c:	01 c0       	rjmp	.+2      	; 0x510 <__stack+0x11>
    }

    return 0;
     50e:	80 e0       	ldi	r24, 0x00	; 0
}
     510:	cf 91       	pop	r28
     512:	08 95       	ret

00000514 <oled_sel_row>:
    oled_line_down(page);

    for(uint8_t j = 0; j < 128; j++){
        write_data(0b00000000);   // sets bitmask of zero to a line/page
    }
}
     514:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <oled_position>
     518:	87 70       	andi	r24, 0x07	; 7
     51a:	80 55       	subi	r24, 0x50	; 80
     51c:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     520:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     524:	80 83       	st	Z, r24
     526:	08 95       	ret

00000528 <oled_sel_col>:
     528:	80 93 3f 03 	sts	0x033F, r24	; 0x80033f <oled_position+0x1>
     52c:	98 2f       	mov	r25, r24
     52e:	9f 70       	andi	r25, 0x0F	; 15
     530:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     534:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     538:	90 83       	st	Z, r25
     53a:	82 95       	swap	r24
     53c:	8f 70       	andi	r24, 0x0F	; 15
     53e:	80 5f       	subi	r24, 0xF0	; 240
     540:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     544:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     548:	80 83       	st	Z, r24
     54a:	08 95       	ret

0000054c <oled_line_down>:
     54c:	80 55       	subi	r24, 0x50	; 80
     54e:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     552:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     556:	80 83       	st	Z, r24
     558:	08 95       	ret

0000055a <oled_pos_set>:
     55a:	cf 93       	push	r28
     55c:	c6 2f       	mov	r28, r22
     55e:	0e 94 8a 02 	call	0x514	; 0x514 <oled_sel_row>
     562:	8c 2f       	mov	r24, r28
     564:	0e 94 94 02 	call	0x528	; 0x528 <oled_sel_col>
     568:	cf 91       	pop	r28
     56a:	08 95       	ret

0000056c <oled_home>:
     56c:	60 e0       	ldi	r22, 0x00	; 0
     56e:	80 e0       	ldi	r24, 0x00	; 0
     570:	0e 94 ad 02 	call	0x55a	; 0x55a <oled_pos_set>
     574:	08 95       	ret

00000576 <oled_clear>:
     576:	1f 93       	push	r17
     578:	cf 93       	push	r28
     57a:	df 93       	push	r29
     57c:	10 e0       	ldi	r17, 0x00	; 0
     57e:	c6 ea       	ldi	r28, 0xA6	; 166
     580:	d0 e0       	ldi	r29, 0x00	; 0
     582:	81 2f       	mov	r24, r17
     584:	0e 94 a6 02 	call	0x54c	; 0x54c <oled_line_down>
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	0d c0       	rjmp	.+26     	; 0x5a6 <oled_clear+0x30>
     58c:	84 91       	lpm	r24, Z
     58e:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <oled_write_data>
     592:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <oled_write_data+0x1>
     596:	8c 93       	st	X, r24
     598:	31 96       	adiw	r30, 0x01	; 1
     59a:	ec 17       	cp	r30, r28
     59c:	fd 07       	cpc	r31, r29
     59e:	b1 f7       	brne	.-20     	; 0x58c <oled_clear+0x16>
     5a0:	9f 5f       	subi	r25, 0xFF	; 255
     5a2:	90 38       	cpi	r25, 0x80	; 128
     5a4:	19 f0       	breq	.+6      	; 0x5ac <oled_clear+0x36>
     5a6:	ee e9       	ldi	r30, 0x9E	; 158
     5a8:	f0 e0       	ldi	r31, 0x00	; 0
     5aa:	f0 cf       	rjmp	.-32     	; 0x58c <oled_clear+0x16>
     5ac:	1f 5f       	subi	r17, 0xFF	; 255
     5ae:	18 30       	cpi	r17, 0x08	; 8
     5b0:	41 f7       	brne	.-48     	; 0x582 <oled_clear+0xc>
     5b2:	0e 94 b6 02 	call	0x56c	; 0x56c <oled_home>
     5b6:	df 91       	pop	r29
     5b8:	cf 91       	pop	r28
     5ba:	1f 91       	pop	r17
     5bc:	08 95       	ret

000005be <OLED_init>:
     5be:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     5c2:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     5c6:	8e ea       	ldi	r24, 0xAE	; 174
     5c8:	80 83       	st	Z, r24
     5ca:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     5ce:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     5d2:	81 ea       	ldi	r24, 0xA1	; 161
     5d4:	80 83       	st	Z, r24
     5d6:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     5da:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     5de:	8a ed       	ldi	r24, 0xDA	; 218
     5e0:	80 83       	st	Z, r24
     5e2:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     5e6:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     5ea:	82 e1       	ldi	r24, 0x12	; 18
     5ec:	80 83       	st	Z, r24
     5ee:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     5f2:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     5f6:	88 ec       	ldi	r24, 0xC8	; 200
     5f8:	80 83       	st	Z, r24
     5fa:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     5fe:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     602:	88 ea       	ldi	r24, 0xA8	; 168
     604:	80 83       	st	Z, r24
     606:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     60a:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     60e:	8f e3       	ldi	r24, 0x3F	; 63
     610:	80 83       	st	Z, r24
     612:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     616:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     61a:	85 ed       	ldi	r24, 0xD5	; 213
     61c:	80 83       	st	Z, r24
     61e:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     622:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     626:	80 e8       	ldi	r24, 0x80	; 128
     628:	80 83       	st	Z, r24
     62a:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     62e:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     632:	81 e8       	ldi	r24, 0x81	; 129
     634:	80 83       	st	Z, r24
     636:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     63a:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     63e:	80 e5       	ldi	r24, 0x50	; 80
     640:	80 83       	st	Z, r24
     642:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     646:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     64a:	89 ed       	ldi	r24, 0xD9	; 217
     64c:	80 83       	st	Z, r24
     64e:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     652:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     656:	81 e2       	ldi	r24, 0x21	; 33
     658:	80 83       	st	Z, r24
     65a:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     65e:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     662:	80 e2       	ldi	r24, 0x20	; 32
     664:	80 83       	st	Z, r24
     666:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     66a:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     66e:	82 e0       	ldi	r24, 0x02	; 2
     670:	80 83       	st	Z, r24
     672:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     676:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     67a:	8b ed       	ldi	r24, 0xDB	; 219
     67c:	80 83       	st	Z, r24
     67e:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     682:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     686:	80 e3       	ldi	r24, 0x30	; 48
     688:	80 83       	st	Z, r24
     68a:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     68e:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     692:	8d ea       	ldi	r24, 0xAD	; 173
     694:	80 83       	st	Z, r24
     696:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     69a:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     69e:	10 82       	st	Z, r1
     6a0:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     6a4:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     6a8:	84 ea       	ldi	r24, 0xA4	; 164
     6aa:	80 83       	st	Z, r24
     6ac:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     6b0:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     6b4:	86 ea       	ldi	r24, 0xA6	; 166
     6b6:	80 83       	st	Z, r24
     6b8:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_write_cmd>
     6bc:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_write_cmd+0x1>
     6c0:	8f ea       	ldi	r24, 0xAF	; 175
     6c2:	80 83       	st	Z, r24
     6c4:	0e 94 bb 02 	call	0x576	; 0x576 <oled_clear>
     6c8:	0e 94 b6 02 	call	0x56c	; 0x56c <oled_home>
     6cc:	08 95       	ret

000006ce <oled_write_character>:

void oled_write_character(uint8_t c){
     6ce:	28 2f       	mov	r18, r24
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	f9 01       	movw	r30, r18
     6d4:	ee 0f       	add	r30, r30
     6d6:	ff 1f       	adc	r31, r31
     6d8:	ee 0f       	add	r30, r30
     6da:	ff 1f       	adc	r31, r31
     6dc:	ee 0f       	add	r30, r30
     6de:	ff 1f       	adc	r31, r31
     6e0:	e2 56       	subi	r30, 0x62	; 98
     6e2:	f0 40       	sbci	r31, 0x00	; 0
     6e4:	22 0f       	add	r18, r18
     6e6:	33 1f       	adc	r19, r19
     6e8:	22 0f       	add	r18, r18
     6ea:	33 1f       	adc	r19, r19
     6ec:	22 0f       	add	r18, r18
     6ee:	33 1f       	adc	r19, r19
     6f0:	2a 55       	subi	r18, 0x5A	; 90
     6f2:	30 40       	sbci	r19, 0x00	; 0
     for(uint8_t i = 0; i < 8; i++){
         write_data(pgm_read_byte( &font8[c-32][i] ) );
     6f4:	94 91       	lpm	r25, Z
    oled_clear();
    oled_home();
}

void write_data(uint8_t data){
    oled_write_data[0] = data;      // @SRAM location
     6f6:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <oled_write_data>
     6fa:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <oled_write_data+0x1>
     6fe:	9c 93       	st	X, r25
     700:	31 96       	adiw	r30, 0x01	; 1
        write_data(0b00000000);   // sets bitmask of zero to a line/page
    }
}

void oled_write_character(uint8_t c){
     for(uint8_t i = 0; i < 8; i++){
     702:	e2 17       	cp	r30, r18
     704:	f3 07       	cpc	r31, r19
     706:	b1 f7       	brne	.-20     	; 0x6f4 <oled_write_character+0x26>
         write_data(pgm_read_byte( &font8[c-32][i] ) );
     }
}
     708:	08 95       	ret

0000070a <oled_print>:

void oled_print(char* string){
     70a:	0f 93       	push	r16
     70c:	1f 93       	push	r17
     70e:	cf 93       	push	r28
     710:	df 93       	push	r29
    int length = strlen(&string[0]);
     712:	fc 01       	movw	r30, r24
     714:	01 90       	ld	r0, Z+
     716:	00 20       	and	r0, r0
     718:	e9 f7       	brne	.-6      	; 0x714 <oled_print+0xa>
     71a:	31 97       	sbiw	r30, 0x01	; 1
     71c:	e8 1b       	sub	r30, r24
     71e:	f9 0b       	sbc	r31, r25

    for(int i = 0; i < length; i++ ){
     720:	1e 16       	cp	r1, r30
     722:	1f 06       	cpc	r1, r31
     724:	54 f4       	brge	.+20     	; 0x73a <oled_print+0x30>
     726:	ec 01       	movw	r28, r24
     728:	8c 01       	movw	r16, r24
     72a:	0e 0f       	add	r16, r30
     72c:	1f 1f       	adc	r17, r31

        oled_write_character(string[i]);
     72e:	89 91       	ld	r24, Y+
     730:	0e 94 67 03 	call	0x6ce	; 0x6ce <oled_write_character>
}

void oled_print(char* string){
    int length = strlen(&string[0]);

    for(int i = 0; i < length; i++ ){
     734:	c0 17       	cp	r28, r16
     736:	d1 07       	cpc	r29, r17
     738:	d1 f7       	brne	.-12     	; 0x72e <oled_print+0x24>

        oled_write_character(string[i]);
    }
}
     73a:	df 91       	pop	r29
     73c:	cf 91       	pop	r28
     73e:	1f 91       	pop	r17
     740:	0f 91       	pop	r16
     742:	08 95       	ret

00000744 <oled_print_arrow>:


void oled_print_arrow(uint8_t row, uint8_t col){
    oled_pos_set(row, col);
     744:	0e 94 ad 02 	call	0x55a	; 0x55a <oled_pos_set>
    oled_clear();
    oled_home();
}

void write_data(uint8_t data){
    oled_write_data[0] = data;      // @SRAM location
     748:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <oled_write_data>
     74c:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <oled_write_data+0x1>
     750:	88 e1       	ldi	r24, 0x18	; 24
     752:	80 83       	st	Z, r24
     754:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <oled_write_data>
     758:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <oled_write_data+0x1>
     75c:	80 83       	st	Z, r24
     75e:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <oled_write_data>
     762:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <oled_write_data+0x1>
     766:	9e e7       	ldi	r25, 0x7E	; 126
     768:	90 83       	st	Z, r25
     76a:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <oled_write_data>
     76e:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <oled_write_data+0x1>
     772:	9c e3       	ldi	r25, 0x3C	; 60
     774:	90 83       	st	Z, r25
     776:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <oled_write_data>
     77a:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <oled_write_data+0x1>
     77e:	80 83       	st	Z, r24
     780:	08 95       	ret

00000782 <play_game>:
    if(child == 0){
        child = current_node->elements_on_screen;
    }

    return child;
}
     782:	86 e8       	ldi	r24, 0x86	; 134
     784:	91 e0       	ldi	r25, 0x01	; 1
     786:	9f 93       	push	r25
     788:	8f 93       	push	r24
     78a:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <printf>
     78e:	0f 90       	pop	r0
     790:	0f 90       	pop	r0
     792:	08 95       	ret

00000794 <build_node>:
     794:	cf 92       	push	r12
     796:	df 92       	push	r13
     798:	ef 92       	push	r14
     79a:	ff 92       	push	r15
     79c:	0f 93       	push	r16
     79e:	1f 93       	push	r17
     7a0:	cf 93       	push	r28
     7a2:	df 93       	push	r29
     7a4:	ec 01       	movw	r28, r24
     7a6:	69 01       	movw	r12, r18
     7a8:	79 83       	std	Y+1, r23	; 0x01
     7aa:	68 83       	st	Y, r22
     7ac:	ba 01       	movw	r22, r20
     7ae:	46 96       	adiw	r24, 0x16	; 22
     7b0:	0e 94 06 0b 	call	0x160c	; 0x160c <strcpy>
     7b4:	dd 8a       	std	Y+21, r13	; 0x15
     7b6:	cc 8a       	std	Y+20, r12	; 0x14
     7b8:	fb 8a       	std	Y+19, r15	; 0x13
     7ba:	ea 8a       	std	Y+18, r14	; 0x12
     7bc:	a0 2f       	mov	r26, r16
     7be:	b1 2f       	mov	r27, r17
     7c0:	fe 01       	movw	r30, r28
     7c2:	32 96       	adiw	r30, 0x02	; 2
     7c4:	ce 01       	movw	r24, r28
     7c6:	42 96       	adiw	r24, 0x12	; 18
     7c8:	2d 91       	ld	r18, X+
     7ca:	3d 91       	ld	r19, X+
     7cc:	21 93       	st	Z+, r18
     7ce:	31 93       	st	Z+, r19
     7d0:	e8 17       	cp	r30, r24
     7d2:	f9 07       	cpc	r31, r25
     7d4:	c9 f7       	brne	.-14     	; 0x7c8 <build_node+0x34>
     7d6:	df 91       	pop	r29
     7d8:	cf 91       	pop	r28
     7da:	1f 91       	pop	r17
     7dc:	0f 91       	pop	r16
     7de:	ff 90       	pop	r15
     7e0:	ef 90       	pop	r14
     7e2:	df 90       	pop	r13
     7e4:	cf 90       	pop	r12
     7e6:	08 95       	ret

000007e8 <go_up>:
     7e8:	dc 01       	movw	r26, r24
     7ea:	ed 91       	ld	r30, X+
     7ec:	fc 91       	ld	r31, X
     7ee:	20 81       	ld	r18, Z
     7f0:	31 81       	ldd	r19, Z+1	; 0x01
     7f2:	21 15       	cp	r18, r1
     7f4:	31 05       	cpc	r19, r1
     7f6:	59 f0       	breq	.+22     	; 0x80e <go_up+0x26>
     7f8:	fc 01       	movw	r30, r24
     7fa:	31 83       	std	Z+1, r19	; 0x01
     7fc:	20 83       	st	Z, r18
     7fe:	8a e9       	ldi	r24, 0x9A	; 154
     800:	91 e0       	ldi	r25, 0x01	; 1
     802:	9f 93       	push	r25
     804:	8f 93       	push	r24
     806:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <printf>
     80a:	0f 90       	pop	r0
     80c:	0f 90       	pop	r0
     80e:	08 95       	ret

00000810 <go_down>:
     810:	fc 01       	movw	r30, r24
     812:	a0 81       	ld	r26, Z
     814:	b1 81       	ldd	r27, Z+1	; 0x01
     816:	fb 01       	movw	r30, r22
     818:	ee 0f       	add	r30, r30
     81a:	ff 1f       	adc	r31, r31
     81c:	ea 0f       	add	r30, r26
     81e:	fb 1f       	adc	r31, r27
     820:	20 81       	ld	r18, Z
     822:	31 81       	ldd	r19, Z+1	; 0x01
     824:	21 15       	cp	r18, r1
     826:	31 05       	cpc	r19, r1
     828:	41 f0       	breq	.+16     	; 0x83a <go_down+0x2a>
     82a:	fc 01       	movw	r30, r24
     82c:	31 83       	std	Z+1, r19	; 0x01
     82e:	20 83       	st	Z, r18
     830:	8f e9       	ldi	r24, 0x9F	; 159
     832:	91 e0       	ldi	r25, 0x01	; 1
     834:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <puts>
     838:	08 95       	ret
     83a:	54 96       	adiw	r26, 0x14	; 20
     83c:	ed 91       	ld	r30, X+
     83e:	fc 91       	ld	r31, X
     840:	55 97       	sbiw	r26, 0x15	; 21
     842:	30 97       	sbiw	r30, 0x00	; 0
     844:	31 f0       	breq	.+12     	; 0x852 <go_down+0x42>
     846:	09 95       	icall
     848:	8b ea       	ldi	r24, 0xAB	; 171
     84a:	91 e0       	ldi	r25, 0x01	; 1
     84c:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <puts>
     850:	08 95       	ret
     852:	81 ec       	ldi	r24, 0xC1	; 193
     854:	91 e0       	ldi	r25, 0x01	; 1
     856:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <puts>
     85a:	08 95       	ret

0000085c <wait_for_action>:
     85c:	cf 93       	push	r28
     85e:	8d ec       	ldi	r24, 0xCD	; 205
     860:	91 e0       	ldi	r25, 0x01	; 1
     862:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <puts>
     866:	0e 94 e7 06 	call	0xdce	; 0xdce <joystick_direction>
     86a:	84 30       	cpi	r24, 0x04	; 4
     86c:	29 f4       	brne	.+10     	; 0x878 <wait_for_action+0x1c>
     86e:	82 e0       	ldi	r24, 0x02	; 2
     870:	0e 94 ad 07 	call	0xf5a	; 0xf5a <usb_button_pushed>
     874:	88 23       	and	r24, r24
     876:	b9 f3       	breq	.-18     	; 0x866 <wait_for_action+0xa>
     878:	0e 94 e7 06 	call	0xdce	; 0xdce <joystick_direction>
     87c:	c8 2f       	mov	r28, r24
     87e:	82 30       	cpi	r24, 0x02	; 2
     880:	29 f4       	brne	.+10     	; 0x88c <wait_for_action+0x30>
     882:	83 ee       	ldi	r24, 0xE3	; 227
     884:	91 e0       	ldi	r25, 0x01	; 1
     886:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <puts>
     88a:	16 c0       	rjmp	.+44     	; 0x8b8 <wait_for_action+0x5c>
     88c:	0e 94 e7 06 	call	0xdce	; 0xdce <joystick_direction>
     890:	c8 2f       	mov	r28, r24
     892:	83 30       	cpi	r24, 0x03	; 3
     894:	89 f0       	breq	.+34     	; 0x8b8 <wait_for_action+0x5c>
     896:	0e 94 e7 06 	call	0xdce	; 0xdce <joystick_direction>
     89a:	c8 2f       	mov	r28, r24
     89c:	81 30       	cpi	r24, 0x01	; 1
     89e:	61 f0       	breq	.+24     	; 0x8b8 <wait_for_action+0x5c>
     8a0:	0e 94 e7 06 	call	0xdce	; 0xdce <joystick_direction>
     8a4:	c8 2f       	mov	r28, r24
     8a6:	88 23       	and	r24, r24
     8a8:	39 f0       	breq	.+14     	; 0x8b8 <wait_for_action+0x5c>
     8aa:	82 e0       	ldi	r24, 0x02	; 2
     8ac:	0e 94 ad 07 	call	0xf5a	; 0xf5a <usb_button_pushed>
     8b0:	81 11       	cpse	r24, r1
     8b2:	01 c0       	rjmp	.+2      	; 0x8b6 <wait_for_action+0x5a>
     8b4:	02 c0       	rjmp	.+4      	; 0x8ba <wait_for_action+0x5e>
     8b6:	c5 e0       	ldi	r28, 0x05	; 5
     8b8:	8c 2f       	mov	r24, r28
     8ba:	cf 91       	pop	r28
     8bc:	08 95       	ret

000008be <wait_for_neutral_joystick_position>:
     8be:	0e 94 e7 06 	call	0xdce	; 0xdce <joystick_direction>
     8c2:	84 30       	cpi	r24, 0x04	; 4
     8c4:	e1 f7       	brne	.-8      	; 0x8be <wait_for_neutral_joystick_position>
     8c6:	08 95       	ret

000008c8 <update_element_down>:

int update_element_down(Node *current_node, int child){

    child++;
     8c8:	6f 5f       	subi	r22, 0xFF	; 255
     8ca:	7f 4f       	sbci	r23, 0xFF	; 255

    if(child == current_node->elements_on_screen + 1){
     8cc:	fc 01       	movw	r30, r24
     8ce:	82 89       	ldd	r24, Z+18	; 0x12
     8d0:	93 89       	ldd	r25, Z+19	; 0x13
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	68 17       	cp	r22, r24
     8d6:	79 07       	cpc	r23, r25
     8d8:	11 f4       	brne	.+4      	; 0x8de <update_element_down+0x16>
        child = 1;
     8da:	61 e0       	ldi	r22, 0x01	; 1
     8dc:	70 e0       	ldi	r23, 0x00	; 0
    }

    return child;
    
}
     8de:	cb 01       	movw	r24, r22
     8e0:	08 95       	ret

000008e2 <print_selecting_arrow>:

}


void print_selecting_arrow(int child){
    oled_print_arrow(child - 1, 5);
     8e2:	65 e0       	ldi	r22, 0x05	; 5
     8e4:	81 50       	subi	r24, 0x01	; 1
     8e6:	0e 94 a2 03 	call	0x744	; 0x744 <oled_print_arrow>
     8ea:	08 95       	ret

000008ec <print_main_menu_objects>:
        wait_for_neutral_joystick_position();
    }
}


void print_main_menu_objects(int child){
     8ec:	0f 93       	push	r16
     8ee:	1f 93       	push	r17
     8f0:	cf 93       	push	r28
     8f2:	df 93       	push	r29
     8f4:	cd b7       	in	r28, 0x3d	; 61
     8f6:	de b7       	in	r29, 0x3e	; 62
     8f8:	2b 97       	sbiw	r28, 0x0b	; 11
     8fa:	0f b6       	in	r0, 0x3f	; 63
     8fc:	f8 94       	cli
     8fe:	de bf       	out	0x3e, r29	; 62
     900:	0f be       	out	0x3f, r0	; 63
     902:	cd bf       	out	0x3d, r28	; 61
     904:	8c 01       	movw	r16, r24
    char line1[] = "play";
     906:	85 e0       	ldi	r24, 0x05	; 5
     908:	ec ee       	ldi	r30, 0xEC	; 236
     90a:	f1 e0       	ldi	r31, 0x01	; 1
     90c:	de 01       	movw	r26, r28
     90e:	11 96       	adiw	r26, 0x01	; 1
     910:	01 90       	ld	r0, Z+
     912:	0d 92       	st	X+, r0
     914:	8a 95       	dec	r24
     916:	e1 f7       	brne	.-8      	; 0x910 <print_main_menu_objects+0x24>
    char line2[] = "Score";
     918:	86 e0       	ldi	r24, 0x06	; 6
     91a:	e1 ef       	ldi	r30, 0xF1	; 241
     91c:	f1 e0       	ldi	r31, 0x01	; 1
     91e:	de 01       	movw	r26, r28
     920:	16 96       	adiw	r26, 0x06	; 6
     922:	01 90       	ld	r0, Z+
     924:	0d 92       	st	X+, r0
     926:	8a 95       	dec	r24
     928:	e1 f7       	brne	.-8      	; 0x922 <print_main_menu_objects+0x36>

    oled_pos_set(0, 12);
     92a:	6c e0       	ldi	r22, 0x0C	; 12
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	0e 94 ad 02 	call	0x55a	; 0x55a <oled_pos_set>
    oled_print(&line1);
     932:	ce 01       	movw	r24, r28
     934:	01 96       	adiw	r24, 0x01	; 1
     936:	0e 94 85 03 	call	0x70a	; 0x70a <oled_print>

    oled_pos_set(1, 12);
     93a:	6c e0       	ldi	r22, 0x0C	; 12
     93c:	81 e0       	ldi	r24, 0x01	; 1
     93e:	0e 94 ad 02 	call	0x55a	; 0x55a <oled_pos_set>
    oled_print(&line2);
     942:	ce 01       	movw	r24, r28
     944:	06 96       	adiw	r24, 0x06	; 6
     946:	0e 94 85 03 	call	0x70a	; 0x70a <oled_print>

    print_selecting_arrow(child);       //Draw the arrow that selects the preferable option.
     94a:	c8 01       	movw	r24, r16
     94c:	0e 94 71 04 	call	0x8e2	; 0x8e2 <print_selecting_arrow>
    
}
     950:	2b 96       	adiw	r28, 0x0b	; 11
     952:	0f b6       	in	r0, 0x3f	; 63
     954:	f8 94       	cli
     956:	de bf       	out	0x3e, r29	; 62
     958:	0f be       	out	0x3f, r0	; 63
     95a:	cd bf       	out	0x3d, r28	; 61
     95c:	df 91       	pop	r29
     95e:	cf 91       	pop	r28
     960:	1f 91       	pop	r17
     962:	0f 91       	pop	r16
     964:	08 95       	ret

00000966 <print_new_game_menu_objects>:

void print_new_game_menu_objects(int child){
     966:	0f 93       	push	r16
     968:	1f 93       	push	r17
     96a:	cf 93       	push	r28
     96c:	df 93       	push	r29
     96e:	cd b7       	in	r28, 0x3d	; 61
     970:	de b7       	in	r29, 0x3e	; 62
     972:	2b 97       	sbiw	r28, 0x0b	; 11
     974:	0f b6       	in	r0, 0x3f	; 63
     976:	f8 94       	cli
     978:	de bf       	out	0x3e, r29	; 62
     97a:	0f be       	out	0x3f, r0	; 63
     97c:	cd bf       	out	0x3d, r28	; 61
     97e:	8c 01       	movw	r16, r24

    char line1[] = "Start game";
     980:	8b e0       	ldi	r24, 0x0B	; 11
     982:	e7 ef       	ldi	r30, 0xF7	; 247
     984:	f1 e0       	ldi	r31, 0x01	; 1
     986:	de 01       	movw	r26, r28
     988:	11 96       	adiw	r26, 0x01	; 1
     98a:	01 90       	ld	r0, Z+
     98c:	0d 92       	st	X+, r0
     98e:	8a 95       	dec	r24
     990:	e1 f7       	brne	.-8      	; 0x98a <print_new_game_menu_objects+0x24>

    oled_pos_set(0, 12);
     992:	6c e0       	ldi	r22, 0x0C	; 12
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	0e 94 ad 02 	call	0x55a	; 0x55a <oled_pos_set>
    oled_print(&line1);
     99a:	ce 01       	movw	r24, r28
     99c:	01 96       	adiw	r24, 0x01	; 1
     99e:	0e 94 85 03 	call	0x70a	; 0x70a <oled_print>

    print_selecting_arrow(child);
     9a2:	c8 01       	movw	r24, r16
     9a4:	0e 94 71 04 	call	0x8e2	; 0x8e2 <print_selecting_arrow>
}
     9a8:	2b 96       	adiw	r28, 0x0b	; 11
     9aa:	0f b6       	in	r0, 0x3f	; 63
     9ac:	f8 94       	cli
     9ae:	de bf       	out	0x3e, r29	; 62
     9b0:	0f be       	out	0x3f, r0	; 63
     9b2:	cd bf       	out	0x3d, r28	; 61
     9b4:	df 91       	pop	r29
     9b6:	cf 91       	pop	r28
     9b8:	1f 91       	pop	r17
     9ba:	0f 91       	pop	r16
     9bc:	08 95       	ret

000009be <print_score_menu_objects>:

void print_score_menu_objects(int child){
     9be:	0f 93       	push	r16
     9c0:	1f 93       	push	r17
     9c2:	cf 93       	push	r28
     9c4:	df 93       	push	r29
     9c6:	cd b7       	in	r28, 0x3d	; 61
     9c8:	de b7       	in	r29, 0x3e	; 62
     9ca:	2a 97       	sbiw	r28, 0x0a	; 10
     9cc:	0f b6       	in	r0, 0x3f	; 63
     9ce:	f8 94       	cli
     9d0:	de bf       	out	0x3e, r29	; 62
     9d2:	0f be       	out	0x3f, r0	; 63
     9d4:	cd bf       	out	0x3d, r28	; 61
     9d6:	8c 01       	movw	r16, r24

    char line1[] = "Top score";
     9d8:	8a e0       	ldi	r24, 0x0A	; 10
     9da:	e2 e0       	ldi	r30, 0x02	; 2
     9dc:	f2 e0       	ldi	r31, 0x02	; 2
     9de:	de 01       	movw	r26, r28
     9e0:	11 96       	adiw	r26, 0x01	; 1
     9e2:	01 90       	ld	r0, Z+
     9e4:	0d 92       	st	X+, r0
     9e6:	8a 95       	dec	r24
     9e8:	e1 f7       	brne	.-8      	; 0x9e2 <print_score_menu_objects+0x24>

    oled_pos_set(0, 12);
     9ea:	6c e0       	ldi	r22, 0x0C	; 12
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	0e 94 ad 02 	call	0x55a	; 0x55a <oled_pos_set>
    oled_print(&line1);
     9f2:	ce 01       	movw	r24, r28
     9f4:	01 96       	adiw	r24, 0x01	; 1
     9f6:	0e 94 85 03 	call	0x70a	; 0x70a <oled_print>

    print_selecting_arrow(child);
     9fa:	c8 01       	movw	r24, r16
     9fc:	0e 94 71 04 	call	0x8e2	; 0x8e2 <print_selecting_arrow>

}
     a00:	2a 96       	adiw	r28, 0x0a	; 10
     a02:	0f b6       	in	r0, 0x3f	; 63
     a04:	f8 94       	cli
     a06:	de bf       	out	0x3e, r29	; 62
     a08:	0f be       	out	0x3f, r0	; 63
     a0a:	cd bf       	out	0x3d, r28	; 61
     a0c:	df 91       	pop	r29
     a0e:	cf 91       	pop	r28
     a10:	1f 91       	pop	r17
     a12:	0f 91       	pop	r16
     a14:	08 95       	ret

00000a16 <update_screen>:
}
void wait_for_neutral_joystick_position(){
    while(joystick_direction() != NEUTRAL);
}

void update_screen(Node *current_node, int child){
     a16:	cf 93       	push	r28
     a18:	df 93       	push	r29
     a1a:	eb 01       	movw	r28, r22

    if(((*current_node).name[1]) == 'a'){
     a1c:	fc 01       	movw	r30, r24
     a1e:	87 89       	ldd	r24, Z+23	; 0x17
     a20:	81 36       	cpi	r24, 0x61	; 97
     a22:	41 f4       	brne	.+16     	; 0xa34 <update_screen+0x1e>
        printf("Update  MAIN_MENU screen\t\n");
     a24:	8c e0       	ldi	r24, 0x0C	; 12
     a26:	92 e0       	ldi	r25, 0x02	; 2
     a28:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <puts>
        print_main_menu_objects(child);
     a2c:	ce 01       	movw	r24, r28
     a2e:	0e 94 76 04 	call	0x8ec	; 0x8ec <print_main_menu_objects>
     a32:	0f c0       	rjmp	.+30     	; 0xa52 <update_screen+0x3c>
        //Skal oppdatere skjermen som passer til main-menu. I tillegg skal pilen howre over riktg barn.
    }
    else if(((*current_node).name[1]) == 'l'){
     a34:	8c 36       	cpi	r24, 0x6C	; 108
     a36:	41 f4       	brne	.+16     	; 0xa48 <update_screen+0x32>
        printf("Update PLAY menu\t\n");
     a38:	86 e2       	ldi	r24, 0x26	; 38
     a3a:	92 e0       	ldi	r25, 0x02	; 2
     a3c:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <puts>
        print_new_game_menu_objects(child);
     a40:	ce 01       	movw	r24, r28
     a42:	0e 94 b3 04 	call	0x966	; 0x966 <print_new_game_menu_objects>
     a46:	05 c0       	rjmp	.+10     	; 0xa52 <update_screen+0x3c>
    }
    else if(((*current_node).name[1]) == 'h'){
     a48:	88 36       	cpi	r24, 0x68	; 104
     a4a:	19 f4       	brne	.+6      	; 0xa52 <update_screen+0x3c>
        print_score_menu_objects(child);
     a4c:	cb 01       	movw	r24, r22
     a4e:	0e 94 df 04 	call	0x9be	; 0x9be <print_score_menu_objects>
    }

}
     a52:	df 91       	pop	r29
     a54:	cf 91       	pop	r28
     a56:	08 95       	ret

00000a58 <menu>:
    return child;
    
}
//Node Main_menu, Score, Play, Settings, Difficulty, Debugging, *current_node;

void menu(){
     a58:	cf 93       	push	r28
     a5a:	df 93       	push	r29
     a5c:	cd b7       	in	r28, 0x3d	; 61
     a5e:	de b7       	in	r29, 0x3e	; 62
     a60:	e0 97       	sbiw	r28, 0x30	; 48
     a62:	0f b6       	in	r0, 0x3f	; 63
     a64:	f8 94       	cli
     a66:	de bf       	out	0x3e, r29	; 62
     a68:	0f be       	out	0x3f, r0	; 63
     a6a:	cd bf       	out	0x3d, r28	; 61

    static Node Main_menu, Score, Play, Settings, Difficulty, Debugging, *current_node;

    current_node = &Main_menu; //Startnoden
     a6c:	8e e0       	ldi	r24, 0x0E	; 14
     a6e:	93 e0       	ldi	r25, 0x03	; 3
     a70:	90 93 39 03 	sts	0x0339, r25	; 0x800339 <current_node.2399+0x1>
     a74:	80 93 38 03 	sts	0x0338, r24	; 0x800338 <current_node.2399>
    DIRECTION action; //Handling som er gjort på Joysticken
    int child = 1; //Barnet som man "howrer" over på skjermen. Default er øverste barnet.

    //Bygger nodestrukturen
    Node* children1[8] = {&Play, &Score,0 ,0 ,0 ,0 ,0 ,0};
     a78:	80 e1       	ldi	r24, 0x10	; 16
     a7a:	ea e0       	ldi	r30, 0x0A	; 10
     a7c:	f1 e0       	ldi	r31, 0x01	; 1
     a7e:	de 01       	movw	r26, r28
     a80:	11 96       	adiw	r26, 0x01	; 1
     a82:	01 90       	ld	r0, Z+
     a84:	0d 92       	st	X+, r0
     a86:	8a 95       	dec	r24
     a88:	e1 f7       	brne	.-8      	; 0xa82 <menu+0x2a>
    Node* children2[8] = {0, 0, 0, 0, 0, 0, 0, 0};
     a8a:	80 e1       	ldi	r24, 0x10	; 16
     a8c:	5e 01       	movw	r10, r28
     a8e:	91 e1       	ldi	r25, 0x11	; 17
     a90:	a9 0e       	add	r10, r25
     a92:	b1 1c       	adc	r11, r1
     a94:	f5 01       	movw	r30, r10
     a96:	98 2f       	mov	r25, r24
     a98:	11 92       	st	Z+, r1
     a9a:	9a 95       	dec	r25
     a9c:	e9 f7       	brne	.-6      	; 0xa98 <menu+0x40>
    Node* children3[8] = {0, 0, 0, 0, 0, 0, 0, 0};
     a9e:	6e 01       	movw	r12, r28
     aa0:	e1 e2       	ldi	r30, 0x21	; 33
     aa2:	ce 0e       	add	r12, r30
     aa4:	d1 1c       	adc	r13, r1
     aa6:	f6 01       	movw	r30, r12
     aa8:	11 92       	st	Z+, r1
     aaa:	8a 95       	dec	r24
     aac:	e9 f7       	brne	.-6      	; 0xaa8 <menu+0x50>



    build_node(&Main_menu, NULL, "Main menu", NULL, &children1,2);
     aae:	68 94       	set
     ab0:	ee 24       	eor	r14, r14
     ab2:	e1 f8       	bld	r14, 1
     ab4:	f1 2c       	mov	r15, r1
     ab6:	8e 01       	movw	r16, r28
     ab8:	0f 5f       	subi	r16, 0xFF	; 255
     aba:	1f 4f       	sbci	r17, 0xFF	; 255
     abc:	20 e0       	ldi	r18, 0x00	; 0
     abe:	30 e0       	ldi	r19, 0x00	; 0
     ac0:	48 e3       	ldi	r20, 0x38	; 56
     ac2:	52 e0       	ldi	r21, 0x02	; 2
     ac4:	60 e0       	ldi	r22, 0x00	; 0
     ac6:	70 e0       	ldi	r23, 0x00	; 0
     ac8:	8e e0       	ldi	r24, 0x0E	; 14
     aca:	93 e0       	ldi	r25, 0x03	; 3
     acc:	0e 94 ca 03 	call	0x794	; 0x794 <build_node>
    build_node(&Play, &Main_menu, "Play game", play_game, &children2,1);
     ad0:	ee 24       	eor	r14, r14
     ad2:	e3 94       	inc	r14
     ad4:	f1 2c       	mov	r15, r1
     ad6:	85 01       	movw	r16, r10
     ad8:	21 ec       	ldi	r18, 0xC1	; 193
     ada:	33 e0       	ldi	r19, 0x03	; 3
     adc:	42 e4       	ldi	r20, 0x42	; 66
     ade:	52 e0       	ldi	r21, 0x02	; 2
     ae0:	6e e0       	ldi	r22, 0x0E	; 14
     ae2:	73 e0       	ldi	r23, 0x03	; 3
     ae4:	84 ee       	ldi	r24, 0xE4	; 228
     ae6:	92 e0       	ldi	r25, 0x02	; 2
     ae8:	0e 94 ca 03 	call	0x794	; 0x794 <build_node>
    build_node(&Score, &Main_menu, "Show score", NULL, &children3,8);
     aec:	68 94       	set
     aee:	ee 24       	eor	r14, r14
     af0:	e3 f8       	bld	r14, 3
     af2:	f1 2c       	mov	r15, r1
     af4:	86 01       	movw	r16, r12
     af6:	20 e0       	ldi	r18, 0x00	; 0
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	4c e4       	ldi	r20, 0x4C	; 76
     afc:	52 e0       	ldi	r21, 0x02	; 2
     afe:	6e e0       	ldi	r22, 0x0E	; 14
     b00:	73 e0       	ldi	r23, 0x03	; 3
     b02:	8a eb       	ldi	r24, 0xBA	; 186
     b04:	92 e0       	ldi	r25, 0x02	; 2
     b06:	0e 94 ca 03 	call	0x794	; 0x794 <build_node>

    update_screen(current_node, child);
     b0a:	61 e0       	ldi	r22, 0x01	; 1
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <current_node.2399>
     b12:	90 91 39 03 	lds	r25, 0x0339	; 0x800339 <current_node.2399+0x1>
     b16:	0e 94 0b 05 	call	0xa16	; 0xa16 <update_screen>

    static Node Main_menu, Score, Play, Settings, Difficulty, Debugging, *current_node;

    current_node = &Main_menu; //Startnoden
    DIRECTION action; //Handling som er gjort på Joysticken
    int child = 1; //Barnet som man "howrer" over på skjermen. Default er øverste barnet.
     b1a:	ee 24       	eor	r14, r14
     b1c:	e3 94       	inc	r14
     b1e:	f1 2c       	mov	r15, r1
          default:
              break;
        }

        printf("After switch\t\n");
        printf("Nodenavn %c \t\n",((*current_node).name[0]));
     b20:	0f 2e       	mov	r0, r31
     b22:	f6 ea       	ldi	r31, 0xA6	; 166
     b24:	cf 2e       	mov	r12, r31
     b26:	f2 e0       	ldi	r31, 0x02	; 2
     b28:	df 2e       	mov	r13, r31
     b2a:	f0 2d       	mov	r31, r0
    build_node(&Score, &Main_menu, "Show score", NULL, &children3,8);

    update_screen(current_node, child);

    while(1){
        printf("Før Wait for action\t\n");
     b2c:	87 e5       	ldi	r24, 0x57	; 87
     b2e:	92 e0       	ldi	r25, 0x02	; 2
     b30:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <puts>
        action = wait_for_action();  //Wait for user to move the joystick
     b34:	0e 94 2e 04 	call	0x85c	; 0x85c <wait_for_action>
     b38:	18 2f       	mov	r17, r24
        printf("Før oled clear\t\n");
     b3a:	8d e6       	ldi	r24, 0x6D	; 109
     b3c:	92 e0       	ldi	r25, 0x02	; 2
     b3e:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <puts>
        oled_clear();  //Clears the screen.
     b42:	0e 94 bb 02 	call	0x576	; 0x576 <oled_clear>

        printf("Før switch\t\n");
     b46:	8e e7       	ldi	r24, 0x7E	; 126
     b48:	92 e0       	ldi	r25, 0x02	; 2
     b4a:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <puts>
        switch(action)
     b4e:	11 30       	cpi	r17, 0x01	; 1
     b50:	31 f1       	breq	.+76     	; 0xb9e <menu+0x146>
     b52:	c8 f0       	brcs	.+50     	; 0xb86 <menu+0x12e>
     b54:	12 30       	cpi	r17, 0x02	; 2
     b56:	19 f0       	breq	.+6      	; 0xb5e <menu+0x106>
     b58:	13 30       	cpi	r17, 0x03	; 3
     b5a:	61 f0       	breq	.+24     	; 0xb74 <menu+0x11c>
     b5c:	2c c0       	rjmp	.+88     	; 0xbb6 <menu+0x15e>

}

int update_element_up(Node *current_node, int child){

    child--;
     b5e:	f1 e0       	ldi	r31, 0x01	; 1
     b60:	ef 1a       	sub	r14, r31
     b62:	f1 08       	sbc	r15, r1

    if(child == 0){
     b64:	41 f5       	brne	.+80     	; 0xbb6 <menu+0x15e>
        child = current_node->elements_on_screen;
     b66:	e0 91 38 03 	lds	r30, 0x0338	; 0x800338 <current_node.2399>
     b6a:	f0 91 39 03 	lds	r31, 0x0339	; 0x800339 <current_node.2399+0x1>
     b6e:	e2 88       	ldd	r14, Z+18	; 0x12
     b70:	f3 88       	ldd	r15, Z+19	; 0x13
     b72:	21 c0       	rjmp	.+66     	; 0xbb6 <menu+0x15e>
          case UP:
                //update_screen(current_node, child);
                child = update_element_up(current_node, child);
              break;
          case DOWN:
                child = update_element_down(current_node, child);
     b74:	b7 01       	movw	r22, r14
     b76:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <current_node.2399>
     b7a:	90 91 39 03 	lds	r25, 0x0339	; 0x800339 <current_node.2399+0x1>
     b7e:	0e 94 64 04 	call	0x8c8	; 0x8c8 <update_element_down>
     b82:	7c 01       	movw	r14, r24
              break;
     b84:	18 c0       	rjmp	.+48     	; 0xbb6 <menu+0x15e>
          case LEFT:
                printf("Left\t\n");
     b86:	8b e8       	ldi	r24, 0x8B	; 139
     b88:	92 e0       	ldi	r25, 0x02	; 2
     b8a:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <puts>
                go_up(&current_node);
     b8e:	88 e3       	ldi	r24, 0x38	; 56
     b90:	93 e0       	ldi	r25, 0x03	; 3
     b92:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <go_up>
                child = 1;
     b96:	ee 24       	eor	r14, r14
     b98:	e3 94       	inc	r14
     b9a:	f1 2c       	mov	r15, r1
              break;
     b9c:	0c c0       	rjmp	.+24     	; 0xbb6 <menu+0x15e>
          case RIGHT:
                printf("RIGHT\t\n");
     b9e:	81 e9       	ldi	r24, 0x91	; 145
     ba0:	92 e0       	ldi	r25, 0x02	; 2
     ba2:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <puts>
                go_down(&current_node, child);
     ba6:	b7 01       	movw	r22, r14
     ba8:	88 e3       	ldi	r24, 0x38	; 56
     baa:	93 e0       	ldi	r25, 0x03	; 3
     bac:	0e 94 08 04 	call	0x810	; 0x810 <go_down>
                child = 1;
     bb0:	ee 24       	eor	r14, r14
     bb2:	e3 94       	inc	r14
     bb4:	f1 2c       	mov	r15, r1
              break;
          default:
              break;
        }

        printf("After switch\t\n");
     bb6:	88 e9       	ldi	r24, 0x98	; 152
     bb8:	92 e0       	ldi	r25, 0x02	; 2
     bba:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <puts>
        printf("Nodenavn %c \t\n",((*current_node).name[0]));
     bbe:	e0 91 38 03 	lds	r30, 0x0338	; 0x800338 <current_node.2399>
     bc2:	f0 91 39 03 	lds	r31, 0x0339	; 0x800339 <current_node.2399+0x1>
     bc6:	86 89       	ldd	r24, Z+22	; 0x16
     bc8:	1f 92       	push	r1
     bca:	8f 93       	push	r24
     bcc:	df 92       	push	r13
     bce:	cf 92       	push	r12
     bd0:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <printf>
        update_screen(current_node, child);
     bd4:	b7 01       	movw	r22, r14
     bd6:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <current_node.2399>
     bda:	90 91 39 03 	lds	r25, 0x0339	; 0x800339 <current_node.2399+0x1>
     bde:	0e 94 0b 05 	call	0xa16	; 0xa16 <update_screen>
        wait_for_neutral_joystick_position();
     be2:	0e 94 5f 04 	call	0x8be	; 0x8be <wait_for_neutral_joystick_position>
    }
     be6:	0f 90       	pop	r0
     be8:	0f 90       	pop	r0
     bea:	0f 90       	pop	r0
     bec:	0f 90       	pop	r0
     bee:	9e cf       	rjmp	.-196    	; 0xb2c <menu+0xd4>

00000bf0 <pos_read>:
#include <avr/io.h>
#include <stdio.h>
#include "pos_read.h"


void pos_read(position* pos){
     bf0:	8f 92       	push	r8
     bf2:	9f 92       	push	r9
     bf4:	af 92       	push	r10
     bf6:	bf 92       	push	r11
     bf8:	cf 92       	push	r12
     bfa:	df 92       	push	r13
     bfc:	ef 92       	push	r14
     bfe:	ff 92       	push	r15
     c00:	0f 93       	push	r16
     c02:	1f 93       	push	r17
     c04:	cf 93       	push	r28
     c06:	df 93       	push	r29
     c08:	7c 01       	movw	r14, r24

    int ADC_Y = ADC_read(0);
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ADC_read>
     c10:	c8 2f       	mov	r28, r24
     c12:	d0 e0       	ldi	r29, 0x00	; 0
    int ADC_X = ADC_read(1);
     c14:	81 e0       	ldi	r24, 0x01	; 1
     c16:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ADC_read>
     c1a:	68 2f       	mov	r22, r24
     c1c:	70 e0       	ldi	r23, 0x00	; 0

    // X read

    if((ADC_X >= (P_cal.center_X - 10)) && (ADC_X <= (P_cal.center_X + 10))){ //Deadspace for joystick
     c1e:	00 91 3a 03 	lds	r16, 0x033A	; 0x80033a <P_cal>
     c22:	10 91 3b 03 	lds	r17, 0x033B	; 0x80033b <P_cal+0x1>
     c26:	c8 01       	movw	r24, r16
     c28:	0a 97       	sbiw	r24, 0x0a	; 10
     c2a:	68 17       	cp	r22, r24
     c2c:	79 07       	cpc	r23, r25
     c2e:	0c f4       	brge	.+2      	; 0xc32 <pos_read+0x42>
     c30:	b4 c0       	rjmp	.+360    	; 0xd9a <pos_read+0x1aa>
     c32:	44 96       	adiw	r24, 0x14	; 20
     c34:	86 17       	cp	r24, r22
     c36:	97 07       	cpc	r25, r23
     c38:	0c f0       	brlt	.+2      	; 0xc3c <pos_read+0x4c>
     c3a:	4c c0       	rjmp	.+152    	; 0xcd4 <pos_read+0xe4>
        ADC_X = 0;
    }
    else if(ADC_X > (P_cal.center_X + 10)){
        ADC_X = (ADC_X - P_cal.center_X) * 100.0 / (255.0 - P_cal.center_X);  //
     c3c:	60 1b       	sub	r22, r16
     c3e:	71 0b       	sbc	r23, r17
     c40:	07 2e       	mov	r0, r23
     c42:	00 0c       	add	r0, r0
     c44:	88 0b       	sbc	r24, r24
     c46:	99 0b       	sbc	r25, r25
     c48:	0e 94 b1 09 	call	0x1362	; 0x1362 <__floatsisf>
     c4c:	20 e0       	ldi	r18, 0x00	; 0
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	48 ec       	ldi	r20, 0xC8	; 200
     c52:	52 e4       	ldi	r21, 0x42	; 66
     c54:	0e 94 95 0a 	call	0x152a	; 0x152a <__mulsf3>
     c58:	4b 01       	movw	r8, r22
     c5a:	5c 01       	movw	r10, r24
     c5c:	b8 01       	movw	r22, r16
     c5e:	11 0f       	add	r17, r17
     c60:	88 0b       	sbc	r24, r24
     c62:	99 0b       	sbc	r25, r25
     c64:	0e 94 b1 09 	call	0x1362	; 0x1362 <__floatsisf>
     c68:	9b 01       	movw	r18, r22
     c6a:	ac 01       	movw	r20, r24
     c6c:	60 e0       	ldi	r22, 0x00	; 0
     c6e:	70 e0       	ldi	r23, 0x00	; 0
     c70:	8f e7       	ldi	r24, 0x7F	; 127
     c72:	93 e4       	ldi	r25, 0x43	; 67
     c74:	0e 94 23 08 	call	0x1046	; 0x1046 <__subsf3>
     c78:	9b 01       	movw	r18, r22
     c7a:	ac 01       	movw	r20, r24
     c7c:	c5 01       	movw	r24, r10
     c7e:	b4 01       	movw	r22, r8
     c80:	0e 94 07 09 	call	0x120e	; 0x120e <__divsf3>
     c84:	0e 94 79 09 	call	0x12f2	; 0x12f2 <__fixsfsi>
     c88:	6b 01       	movw	r12, r22
     c8a:	26 c0       	rjmp	.+76     	; 0xcd8 <pos_read+0xe8>
    }

    else if (ADC_X < (P_cal.center_X - 10)){
        ADC_X = (ADC_X / ((float)P_cal.center_X)) * 100 - 100;   // // Scaling when value is larger then center value
     c8c:	07 2e       	mov	r0, r23
     c8e:	00 0c       	add	r0, r0
     c90:	88 0b       	sbc	r24, r24
     c92:	99 0b       	sbc	r25, r25
     c94:	0e 94 b1 09 	call	0x1362	; 0x1362 <__floatsisf>
     c98:	4b 01       	movw	r8, r22
     c9a:	5c 01       	movw	r10, r24
     c9c:	b8 01       	movw	r22, r16
     c9e:	11 0f       	add	r17, r17
     ca0:	88 0b       	sbc	r24, r24
     ca2:	99 0b       	sbc	r25, r25
     ca4:	0e 94 b1 09 	call	0x1362	; 0x1362 <__floatsisf>
     ca8:	9b 01       	movw	r18, r22
     caa:	ac 01       	movw	r20, r24
     cac:	c5 01       	movw	r24, r10
     cae:	b4 01       	movw	r22, r8
     cb0:	0e 94 07 09 	call	0x120e	; 0x120e <__divsf3>
     cb4:	20 e0       	ldi	r18, 0x00	; 0
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	48 ec       	ldi	r20, 0xC8	; 200
     cba:	52 e4       	ldi	r21, 0x42	; 66
     cbc:	0e 94 95 0a 	call	0x152a	; 0x152a <__mulsf3>
     cc0:	20 e0       	ldi	r18, 0x00	; 0
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	48 ec       	ldi	r20, 0xC8	; 200
     cc6:	52 e4       	ldi	r21, 0x42	; 66
     cc8:	0e 94 23 08 	call	0x1046	; 0x1046 <__subsf3>
     ccc:	0e 94 79 09 	call	0x12f2	; 0x12f2 <__fixsfsi>
     cd0:	6b 01       	movw	r12, r22
     cd2:	02 c0       	rjmp	.+4      	; 0xcd8 <pos_read+0xe8>
    int ADC_X = ADC_read(1);

    // X read

    if((ADC_X >= (P_cal.center_X - 10)) && (ADC_X <= (P_cal.center_X + 10))){ //Deadspace for joystick
        ADC_X = 0;
     cd4:	c1 2c       	mov	r12, r1
     cd6:	d1 2c       	mov	r13, r1
        ADC_X = (ADC_X / ((float)P_cal.center_X)) * 100 - 100;   // // Scaling when value is larger then center value
    }

    // Y read

    if(ADC_Y >= (P_cal.center_Y - 10) && ADC_Y <= (P_cal.center_Y + 10)){  //Deadspace for joystick
     cd8:	00 91 3c 03 	lds	r16, 0x033C	; 0x80033c <P_cal+0x2>
     cdc:	10 91 3d 03 	lds	r17, 0x033D	; 0x80033d <P_cal+0x3>
     ce0:	c8 01       	movw	r24, r16
     ce2:	0a 97       	sbiw	r24, 0x0a	; 10
     ce4:	c8 17       	cp	r28, r24
     ce6:	d9 07       	cpc	r29, r25
     ce8:	0c f4       	brge	.+2      	; 0xcec <pos_read+0xfc>
     cea:	5e c0       	rjmp	.+188    	; 0xda8 <pos_read+0x1b8>
     cec:	44 96       	adiw	r24, 0x14	; 20
     cee:	8c 17       	cp	r24, r28
     cf0:	9d 07       	cpc	r25, r29
     cf2:	0c f0       	brlt	.+2      	; 0xcf6 <pos_read+0x106>
     cf4:	4a c0       	rjmp	.+148    	; 0xd8a <pos_read+0x19a>
        ADC_Y = 0;
    }
    else if(ADC_Y > (P_cal.center_Y + 10)){
        ADC_Y = (ADC_Y - (P_cal.center_Y)) * 100.0 / (255.0 - P_cal.center_Y);  // Scaling when value is larger then center value
     cf6:	c0 1b       	sub	r28, r16
     cf8:	d1 0b       	sbc	r29, r17
     cfa:	be 01       	movw	r22, r28
     cfc:	dd 0f       	add	r29, r29
     cfe:	88 0b       	sbc	r24, r24
     d00:	99 0b       	sbc	r25, r25
     d02:	0e 94 b1 09 	call	0x1362	; 0x1362 <__floatsisf>
     d06:	20 e0       	ldi	r18, 0x00	; 0
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	48 ec       	ldi	r20, 0xC8	; 200
     d0c:	52 e4       	ldi	r21, 0x42	; 66
     d0e:	0e 94 95 0a 	call	0x152a	; 0x152a <__mulsf3>
     d12:	4b 01       	movw	r8, r22
     d14:	5c 01       	movw	r10, r24
     d16:	b8 01       	movw	r22, r16
     d18:	11 0f       	add	r17, r17
     d1a:	88 0b       	sbc	r24, r24
     d1c:	99 0b       	sbc	r25, r25
     d1e:	0e 94 b1 09 	call	0x1362	; 0x1362 <__floatsisf>
     d22:	9b 01       	movw	r18, r22
     d24:	ac 01       	movw	r20, r24
     d26:	60 e0       	ldi	r22, 0x00	; 0
     d28:	70 e0       	ldi	r23, 0x00	; 0
     d2a:	8f e7       	ldi	r24, 0x7F	; 127
     d2c:	93 e4       	ldi	r25, 0x43	; 67
     d2e:	0e 94 23 08 	call	0x1046	; 0x1046 <__subsf3>
     d32:	9b 01       	movw	r18, r22
     d34:	ac 01       	movw	r20, r24
     d36:	c5 01       	movw	r24, r10
     d38:	b4 01       	movw	r22, r8
     d3a:	0e 94 07 09 	call	0x120e	; 0x120e <__divsf3>
     d3e:	0e 94 79 09 	call	0x12f2	; 0x12f2 <__fixsfsi>
     d42:	25 c0       	rjmp	.+74     	; 0xd8e <pos_read+0x19e>
    }

    else if (ADC_Y < (P_cal.center_Y - 10)){
        ADC_Y = (ADC_Y / ((float)P_cal.center_Y)) * 100 - 100;   // Scaling when value is smaller then center value
     d44:	be 01       	movw	r22, r28
     d46:	dd 0f       	add	r29, r29
     d48:	88 0b       	sbc	r24, r24
     d4a:	99 0b       	sbc	r25, r25
     d4c:	0e 94 b1 09 	call	0x1362	; 0x1362 <__floatsisf>
     d50:	4b 01       	movw	r8, r22
     d52:	5c 01       	movw	r10, r24
     d54:	b8 01       	movw	r22, r16
     d56:	11 0f       	add	r17, r17
     d58:	88 0b       	sbc	r24, r24
     d5a:	99 0b       	sbc	r25, r25
     d5c:	0e 94 b1 09 	call	0x1362	; 0x1362 <__floatsisf>
     d60:	9b 01       	movw	r18, r22
     d62:	ac 01       	movw	r20, r24
     d64:	c5 01       	movw	r24, r10
     d66:	b4 01       	movw	r22, r8
     d68:	0e 94 07 09 	call	0x120e	; 0x120e <__divsf3>
     d6c:	20 e0       	ldi	r18, 0x00	; 0
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	48 ec       	ldi	r20, 0xC8	; 200
     d72:	52 e4       	ldi	r21, 0x42	; 66
     d74:	0e 94 95 0a 	call	0x152a	; 0x152a <__mulsf3>
     d78:	20 e0       	ldi	r18, 0x00	; 0
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	48 ec       	ldi	r20, 0xC8	; 200
     d7e:	52 e4       	ldi	r21, 0x42	; 66
     d80:	0e 94 23 08 	call	0x1046	; 0x1046 <__subsf3>
     d84:	0e 94 79 09 	call	0x12f2	; 0x12f2 <__fixsfsi>
     d88:	02 c0       	rjmp	.+4      	; 0xd8e <pos_read+0x19e>
    }

    // Y read

    if(ADC_Y >= (P_cal.center_Y - 10) && ADC_Y <= (P_cal.center_Y + 10)){  //Deadspace for joystick
        ADC_Y = 0;
     d8a:	60 e0       	ldi	r22, 0x00	; 0
     d8c:	70 e0       	ldi	r23, 0x00	; 0

    else if (ADC_Y < (P_cal.center_Y - 10)){
        ADC_Y = (ADC_Y / ((float)P_cal.center_Y)) * 100 - 100;   // Scaling when value is smaller then center value
    }

    pos -> posX = ADC_X;
     d8e:	f7 01       	movw	r30, r14
     d90:	d1 82       	std	Z+1, r13	; 0x01
     d92:	c0 82       	st	Z, r12
    pos -> posY = ADC_Y;
     d94:	73 83       	std	Z+3, r23	; 0x03
     d96:	62 83       	std	Z+2, r22	; 0x02
}
     d98:	0d c0       	rjmp	.+26     	; 0xdb4 <pos_read+0x1c4>
    // X read

    if((ADC_X >= (P_cal.center_X - 10)) && (ADC_X <= (P_cal.center_X + 10))){ //Deadspace for joystick
        ADC_X = 0;
    }
    else if(ADC_X > (P_cal.center_X + 10)){
     d9a:	c8 01       	movw	r24, r16
     d9c:	0a 96       	adiw	r24, 0x0a	; 10
     d9e:	86 17       	cp	r24, r22
     da0:	97 07       	cpc	r25, r23
     da2:	0c f4       	brge	.+2      	; 0xda6 <pos_read+0x1b6>
     da4:	4b cf       	rjmp	.-362    	; 0xc3c <pos_read+0x4c>
     da6:	72 cf       	rjmp	.-284    	; 0xc8c <pos_read+0x9c>
    // Y read

    if(ADC_Y >= (P_cal.center_Y - 10) && ADC_Y <= (P_cal.center_Y + 10)){  //Deadspace for joystick
        ADC_Y = 0;
    }
    else if(ADC_Y > (P_cal.center_Y + 10)){
     da8:	c8 01       	movw	r24, r16
     daa:	0a 96       	adiw	r24, 0x0a	; 10
     dac:	8c 17       	cp	r24, r28
     dae:	9d 07       	cpc	r25, r29
     db0:	4c f6       	brge	.-110    	; 0xd44 <pos_read+0x154>
     db2:	a1 cf       	rjmp	.-190    	; 0xcf6 <pos_read+0x106>
        ADC_Y = (ADC_Y / ((float)P_cal.center_Y)) * 100 - 100;   // Scaling when value is smaller then center value
    }

    pos -> posX = ADC_X;
    pos -> posY = ADC_Y;
}
     db4:	df 91       	pop	r29
     db6:	cf 91       	pop	r28
     db8:	1f 91       	pop	r17
     dba:	0f 91       	pop	r16
     dbc:	ff 90       	pop	r15
     dbe:	ef 90       	pop	r14
     dc0:	df 90       	pop	r13
     dc2:	cf 90       	pop	r12
     dc4:	bf 90       	pop	r11
     dc6:	af 90       	pop	r10
     dc8:	9f 90       	pop	r9
     dca:	8f 90       	pop	r8
     dcc:	08 95       	ret

00000dce <joystick_direction>:

DIRECTION joystick_direction(void){
     dce:	8f 92       	push	r8
     dd0:	9f 92       	push	r9
     dd2:	af 92       	push	r10
     dd4:	bf 92       	push	r11
     dd6:	cf 92       	push	r12
     dd8:	df 92       	push	r13
     dda:	ef 92       	push	r14
     ddc:	ff 92       	push	r15
     dde:	cf 93       	push	r28
     de0:	df 93       	push	r29

    pos_read(&P_pos);
     de2:	80 e4       	ldi	r24, 0x40	; 64
     de4:	93 e0       	ldi	r25, 0x03	; 3
     de6:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <pos_read>

    int angle = atan2(P_pos.posY, P_pos.posX);
     dea:	e0 e4       	ldi	r30, 0x40	; 64
     dec:	f3 e0       	ldi	r31, 0x03	; 3
     dee:	e0 80       	ld	r14, Z
     df0:	f1 80       	ldd	r15, Z+1	; 0x01
     df2:	c2 81       	ldd	r28, Z+2	; 0x02
     df4:	d3 81       	ldd	r29, Z+3	; 0x03
     df6:	b7 01       	movw	r22, r14
     df8:	0f 2c       	mov	r0, r15
     dfa:	00 0c       	add	r0, r0
     dfc:	88 0b       	sbc	r24, r24
     dfe:	99 0b       	sbc	r25, r25
     e00:	0e 94 b1 09 	call	0x1362	; 0x1362 <__floatsisf>
     e04:	4b 01       	movw	r8, r22
     e06:	5c 01       	movw	r10, r24
     e08:	be 01       	movw	r22, r28
     e0a:	0d 2e       	mov	r0, r29
     e0c:	00 0c       	add	r0, r0
     e0e:	88 0b       	sbc	r24, r24
     e10:	99 0b       	sbc	r25, r25
     e12:	0e 94 b1 09 	call	0x1362	; 0x1362 <__floatsisf>
     e16:	a5 01       	movw	r20, r10
     e18:	94 01       	movw	r18, r8
     e1a:	0e 94 a3 08 	call	0x1146	; 0x1146 <atan2>

    if(!P_pos.posY & !P_pos.posX){
     e1e:	21 e0       	ldi	r18, 0x01	; 1
     e20:	cd 2b       	or	r28, r29
     e22:	09 f0       	breq	.+2      	; 0xe26 <joystick_direction+0x58>
     e24:	20 e0       	ldi	r18, 0x00	; 0
     e26:	22 23       	and	r18, r18
     e28:	31 f0       	breq	.+12     	; 0xe36 <joystick_direction+0x68>
     e2a:	21 e0       	ldi	r18, 0x01	; 1
     e2c:	ef 28       	or	r14, r15
     e2e:	09 f0       	breq	.+2      	; 0xe32 <joystick_direction+0x64>
     e30:	20 e0       	ldi	r18, 0x00	; 0
     e32:	21 11       	cpse	r18, r1
     e34:	79 c0       	rjmp	.+242    	; 0xf28 <joystick_direction+0x15a>
        return NEUTRAL;
    }

    else if(angle >= -PI / 4.0 & angle <= PI/4.0){
     e36:	0e 94 79 09 	call	0x12f2	; 0x12f2 <__fixsfsi>
     e3a:	07 2e       	mov	r0, r23
     e3c:	00 0c       	add	r0, r0
     e3e:	88 0b       	sbc	r24, r24
     e40:	99 0b       	sbc	r25, r25
     e42:	0e 94 b1 09 	call	0x1362	; 0x1362 <__floatsisf>
     e46:	6b 01       	movw	r12, r22
     e48:	7c 01       	movw	r14, r24
     e4a:	c1 e0       	ldi	r28, 0x01	; 1
     e4c:	2b ed       	ldi	r18, 0xDB	; 219
     e4e:	3f e0       	ldi	r19, 0x0F	; 15
     e50:	49 e4       	ldi	r20, 0x49	; 73
     e52:	5f eb       	ldi	r21, 0xBF	; 191
     e54:	0e 94 88 0a 	call	0x1510	; 0x1510 <__gesf2>
     e58:	88 23       	and	r24, r24
     e5a:	0c f4       	brge	.+2      	; 0xe5e <joystick_direction+0x90>
     e5c:	c0 e0       	ldi	r28, 0x00	; 0
     e5e:	cc 23       	and	r28, r28
     e60:	71 f0       	breq	.+28     	; 0xe7e <joystick_direction+0xb0>
     e62:	c1 e0       	ldi	r28, 0x01	; 1
     e64:	2b ed       	ldi	r18, 0xDB	; 219
     e66:	3f e0       	ldi	r19, 0x0F	; 15
     e68:	49 e4       	ldi	r20, 0x49	; 73
     e6a:	5f e3       	ldi	r21, 0x3F	; 63
     e6c:	c7 01       	movw	r24, r14
     e6e:	b6 01       	movw	r22, r12
     e70:	0e 94 02 09 	call	0x1204	; 0x1204 <__cmpsf2>
     e74:	18 16       	cp	r1, r24
     e76:	0c f4       	brge	.+2      	; 0xe7a <joystick_direction+0xac>
     e78:	c0 e0       	ldi	r28, 0x00	; 0
     e7a:	c1 11       	cpse	r28, r1
     e7c:	57 c0       	rjmp	.+174    	; 0xf2c <joystick_direction+0x15e>
        return RIGHT;
    }

    else if(angle >= -3 * PI/4.0 & angle <= -PI / 4.0){
     e7e:	c1 e0       	ldi	r28, 0x01	; 1
     e80:	24 ee       	ldi	r18, 0xE4	; 228
     e82:	3b ec       	ldi	r19, 0xCB	; 203
     e84:	46 e1       	ldi	r20, 0x16	; 22
     e86:	50 ec       	ldi	r21, 0xC0	; 192
     e88:	c7 01       	movw	r24, r14
     e8a:	b6 01       	movw	r22, r12
     e8c:	0e 94 88 0a 	call	0x1510	; 0x1510 <__gesf2>
     e90:	88 23       	and	r24, r24
     e92:	0c f4       	brge	.+2      	; 0xe96 <joystick_direction+0xc8>
     e94:	c0 e0       	ldi	r28, 0x00	; 0
     e96:	cc 23       	and	r28, r28
     e98:	71 f0       	breq	.+28     	; 0xeb6 <joystick_direction+0xe8>
     e9a:	c1 e0       	ldi	r28, 0x01	; 1
     e9c:	2b ed       	ldi	r18, 0xDB	; 219
     e9e:	3f e0       	ldi	r19, 0x0F	; 15
     ea0:	49 e4       	ldi	r20, 0x49	; 73
     ea2:	5f eb       	ldi	r21, 0xBF	; 191
     ea4:	c7 01       	movw	r24, r14
     ea6:	b6 01       	movw	r22, r12
     ea8:	0e 94 02 09 	call	0x1204	; 0x1204 <__cmpsf2>
     eac:	18 16       	cp	r1, r24
     eae:	0c f4       	brge	.+2      	; 0xeb2 <joystick_direction+0xe4>
     eb0:	c0 e0       	ldi	r28, 0x00	; 0
     eb2:	c1 11       	cpse	r28, r1
     eb4:	3d c0       	rjmp	.+122    	; 0xf30 <joystick_direction+0x162>
        return DOWN;
    }

    else if(angle >= 3 * PI/4 | angle <= -3* PI / 4.0){
     eb6:	c1 e0       	ldi	r28, 0x01	; 1
     eb8:	24 ee       	ldi	r18, 0xE4	; 228
     eba:	3b ec       	ldi	r19, 0xCB	; 203
     ebc:	46 e1       	ldi	r20, 0x16	; 22
     ebe:	50 e4       	ldi	r21, 0x40	; 64
     ec0:	c7 01       	movw	r24, r14
     ec2:	b6 01       	movw	r22, r12
     ec4:	0e 94 88 0a 	call	0x1510	; 0x1510 <__gesf2>
     ec8:	88 23       	and	r24, r24
     eca:	0c f4       	brge	.+2      	; 0xece <joystick_direction+0x100>
     ecc:	c0 e0       	ldi	r28, 0x00	; 0
     ece:	c1 11       	cpse	r28, r1
     ed0:	31 c0       	rjmp	.+98     	; 0xf34 <joystick_direction+0x166>
     ed2:	c1 e0       	ldi	r28, 0x01	; 1
     ed4:	24 ee       	ldi	r18, 0xE4	; 228
     ed6:	3b ec       	ldi	r19, 0xCB	; 203
     ed8:	46 e1       	ldi	r20, 0x16	; 22
     eda:	50 ec       	ldi	r21, 0xC0	; 192
     edc:	c7 01       	movw	r24, r14
     ede:	b6 01       	movw	r22, r12
     ee0:	0e 94 02 09 	call	0x1204	; 0x1204 <__cmpsf2>
     ee4:	18 16       	cp	r1, r24
     ee6:	0c f4       	brge	.+2      	; 0xeea <joystick_direction+0x11c>
     ee8:	c0 e0       	ldi	r28, 0x00	; 0
     eea:	c1 11       	cpse	r28, r1
     eec:	23 c0       	rjmp	.+70     	; 0xf34 <joystick_direction+0x166>
        return LEFT;
    }

    else if(angle >= PI / 4 & angle <= 3*PI / 4.0){
     eee:	c1 e0       	ldi	r28, 0x01	; 1
     ef0:	2b ed       	ldi	r18, 0xDB	; 219
     ef2:	3f e0       	ldi	r19, 0x0F	; 15
     ef4:	49 e4       	ldi	r20, 0x49	; 73
     ef6:	5f e3       	ldi	r21, 0x3F	; 63
     ef8:	c7 01       	movw	r24, r14
     efa:	b6 01       	movw	r22, r12
     efc:	0e 94 88 0a 	call	0x1510	; 0x1510 <__gesf2>
     f00:	88 23       	and	r24, r24
     f02:	0c f4       	brge	.+2      	; 0xf06 <joystick_direction+0x138>
     f04:	c0 e0       	ldi	r28, 0x00	; 0
     f06:	cc 23       	and	r28, r28
     f08:	71 f0       	breq	.+28     	; 0xf26 <joystick_direction+0x158>
     f0a:	c1 e0       	ldi	r28, 0x01	; 1
     f0c:	24 ee       	ldi	r18, 0xE4	; 228
     f0e:	3b ec       	ldi	r19, 0xCB	; 203
     f10:	46 e1       	ldi	r20, 0x16	; 22
     f12:	50 e4       	ldi	r21, 0x40	; 64
     f14:	c7 01       	movw	r24, r14
     f16:	b6 01       	movw	r22, r12
     f18:	0e 94 02 09 	call	0x1204	; 0x1204 <__cmpsf2>
     f1c:	18 16       	cp	r1, r24
     f1e:	0c f4       	brge	.+2      	; 0xf22 <joystick_direction+0x154>
     f20:	c0 e0       	ldi	r28, 0x00	; 0
     f22:	c1 11       	cpse	r28, r1
     f24:	09 c0       	rjmp	.+18     	; 0xf38 <joystick_direction+0x16a>
        return UP;
    }
}
     f26:	09 c0       	rjmp	.+18     	; 0xf3a <joystick_direction+0x16c>
    pos_read(&P_pos);

    int angle = atan2(P_pos.posY, P_pos.posX);

    if(!P_pos.posY & !P_pos.posX){
        return NEUTRAL;
     f28:	84 e0       	ldi	r24, 0x04	; 4
     f2a:	07 c0       	rjmp	.+14     	; 0xf3a <joystick_direction+0x16c>
    }

    else if(angle >= -PI / 4.0 & angle <= PI/4.0){
        return RIGHT;
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	05 c0       	rjmp	.+10     	; 0xf3a <joystick_direction+0x16c>
    }

    else if(angle >= -3 * PI/4.0 & angle <= -PI / 4.0){
        return DOWN;
     f30:	83 e0       	ldi	r24, 0x03	; 3
     f32:	03 c0       	rjmp	.+6      	; 0xf3a <joystick_direction+0x16c>
    }

    else if(angle >= 3 * PI/4 | angle <= -3* PI / 4.0){
        return LEFT;
     f34:	80 e0       	ldi	r24, 0x00	; 0
     f36:	01 c0       	rjmp	.+2      	; 0xf3a <joystick_direction+0x16c>
    }

    else if(angle >= PI / 4 & angle <= 3*PI / 4.0){
        return UP;
     f38:	82 e0       	ldi	r24, 0x02	; 2
    }
}
     f3a:	df 91       	pop	r29
     f3c:	cf 91       	pop	r28
     f3e:	ff 90       	pop	r15
     f40:	ef 90       	pop	r14
     f42:	df 90       	pop	r13
     f44:	cf 90       	pop	r12
     f46:	bf 90       	pop	r11
     f48:	af 90       	pop	r10
     f4a:	9f 90       	pop	r9
     f4c:	8f 90       	pop	r8
     f4e:	08 95       	ret

00000f50 <pos_readSettings>:

void pos_readSettings(void){
DDRB &= ~(1 << PB1);
     f50:	b9 98       	cbi	0x17, 1	; 23
DDRD &= ~(1 << PD4);
     f52:	8c 98       	cbi	0x11, 4	; 17
DDRD &= ~(1 << PD5);
     f54:	8d 98       	cbi	0x11, 5	; 17

PORTB |= (1 << PB1); // internal pull up enable
     f56:	c1 9a       	sbi	0x18, 1	; 24
     f58:	08 95       	ret

00000f5a <usb_button_pushed>:

uint8_t usb_button_pushed(USB_BUTTON BUTTON){

    uint8_t pressed;

    if(BUTTON == LEFT_BUTTON){
     f5a:	81 30       	cpi	r24, 0x01	; 1
     f5c:	19 f4       	brne	.+6      	; 0xf64 <usb_button_pushed+0xa>

//        DDRD &= ~(1 << PD4);

        pressed = (PIND & (1 << PD4) );
     f5e:	80 b3       	in	r24, 0x10	; 16
     f60:	80 71       	andi	r24, 0x10	; 16
     f62:	08 95       	ret

    }

    if(BUTTON == RIGHT_BUTTON){
     f64:	81 11       	cpse	r24, r1
     f66:	03 c0       	rjmp	.+6      	; 0xf6e <usb_button_pushed+0x14>

//        DDRD &= ~(1 << PD5);

        pressed =  (PIND & (1 << PD5) );
     f68:	80 b3       	in	r24, 0x10	; 16
     f6a:	80 72       	andi	r24, 0x20	; 32
     f6c:	08 95       	ret
    }

    if(BUTTON == JOYSTICK_BUTTON){
     f6e:	82 30       	cpi	r24, 0x02	; 2
     f70:	31 f4       	brne	.+12     	; 0xf7e <usb_button_pushed+0x24>

        pressed =  (PINB & (1 << PB1) );
     f72:	86 b3       	in	r24, 0x16	; 22
        return !pressed;
     f74:	86 95       	lsr	r24
     f76:	81 70       	andi	r24, 0x01	; 1
     f78:	91 e0       	ldi	r25, 0x01	; 1
     f7a:	89 27       	eor	r24, r25
     f7c:	08 95       	ret
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     }


    return pressed;
}
     f80:	08 95       	ret

00000f82 <main>:


int main(void)
{
    
    SRAM_init();
     f82:	0e 94 0c 08 	call	0x1018	; 0x1018 <SRAM_init>
    timer_init();
     f86:	0e 94 0a 02 	call	0x414	; 0x414 <timer_init>
    USART_init();
     f8a:	0e 94 13 08 	call	0x1026	; 0x1026 <USART_init>
    fdevopen(USART_send, USART_receive);
     f8e:	6b e1       	ldi	r22, 0x1B	; 27
     f90:	78 e0       	ldi	r23, 0x08	; 8
     f92:	8f e1       	ldi	r24, 0x1F	; 31
     f94:	98 e0       	ldi	r25, 0x08	; 8
     f96:	0e 94 0d 0b 	call	0x161a	; 0x161a <fdevopen>
    ADC_calibrate(&P_cal);
     f9a:	8a e3       	ldi	r24, 0x3A	; 58
     f9c:	93 e0       	ldi	r25, 0x03	; 3
     f9e:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <ADC_calibrate>
    OLED_init();
     fa2:	0e 94 df 02 	call	0x5be	; 0x5be <OLED_init>
    pos_readSettings();
     fa6:	0e 94 a8 07 	call	0xf50	; 0xf50 <pos_readSettings>
    oled_clear();
     faa:	0e 94 bb 02 	call	0x576	; 0x576 <oled_clear>
    // char c[] = "derp";
    // oled_pos_set(3, 62);
    // oled_print(&c);
    

    menu();
     fae:	0e 94 2c 05 	call	0xa58	; 0xa58 <menu>

    mcp_init(MODE_LOOPBACK);
     fb2:	80 e4       	ldi	r24, 0x40	; 64
     fb4:	0e 94 60 02 	call	0x4c0	; 0x4c0 <mcp_init>

        mcp_write(MCP_CANCTRL, 0x10);
        _delay_ms(1000);
        r = mcp_read(MCP_CANCTRL);

        printf("%d\n\r", r);
     fb8:	c5 eb       	ldi	r28, 0xB5	; 181
     fba:	d2 e0       	ldi	r29, 0x02	; 2
        //uint8_t sliderY = ADC_read(2);
        //printf("kjører");

        //mcp_init(MODE_LOOPBACK);

        mcp_init(MODE_LOOPBACK);
     fbc:	80 e4       	ldi	r24, 0x40	; 64
     fbe:	0e 94 60 02 	call	0x4c0	; 0x4c0 <mcp_init>


        mcp_write(MCP_CANCTRL, 0x10);
     fc2:	60 e1       	ldi	r22, 0x10	; 16
     fc4:	8f e0       	ldi	r24, 0x0F	; 15
     fc6:	0e 94 27 02 	call	0x44e	; 0x44e <mcp_write>
     fca:	2f ef       	ldi	r18, 0xFF	; 255
     fcc:	8f ef       	ldi	r24, 0xFF	; 255
     fce:	9e e0       	ldi	r25, 0x0E	; 14
     fd0:	21 50       	subi	r18, 0x01	; 1
     fd2:	80 40       	sbci	r24, 0x00	; 0
     fd4:	90 40       	sbci	r25, 0x00	; 0
     fd6:	e1 f7       	brne	.-8      	; 0xfd0 <main+0x4e>
     fd8:	00 c0       	rjmp	.+0      	; 0xfda <main+0x58>
     fda:	00 00       	nop
        _delay_ms(1000);
        r = mcp_read(MCP_CANCTRL);
     fdc:	8f e0       	ldi	r24, 0x0F	; 15
     fde:	0e 94 42 02 	call	0x484	; 0x484 <mcp_read>

        printf("%d\n\r", r);
     fe2:	1f 92       	push	r1
     fe4:	8f 93       	push	r24
     fe6:	df 93       	push	r29
     fe8:	cf 93       	push	r28
     fea:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <printf>
     fee:	0f 90       	pop	r0
     ff0:	0f 90       	pop	r0
     ff2:	0f 90       	pop	r0
     ff4:	0f 90       	pop	r0
     ff6:	e2 cf       	rjmp	.-60     	; 0xfbc <main+0x3a>

00000ff8 <spi_write>:
#include "spi_driver.h"


void spi_write(char data){

    SPDR = data;
     ff8:	8f b9       	out	0x0f, r24	; 15
    while( !(SPSR & (1<<SPIF)) );
     ffa:	77 9b       	sbis	0x0e, 7	; 14
     ffc:	fe cf       	rjmp	.-4      	; 0xffa <spi_write+0x2>

}
     ffe:	08 95       	ret

00001000 <spi_read>:

char spi_read(void){

    spi_write(DUMMY);
    1000:	86 e5       	ldi	r24, 0x56	; 86
    1002:	0e 94 fc 07 	call	0xff8	; 0xff8 <spi_write>
    //printf("SPI data sent is");
    return SPDR;
    1006:	8f b1       	in	r24, 0x0f	; 15
}
    1008:	08 95       	ret

0000100a <spi_init>:

void spi_init(void){
    DDR_SPI |= (1 << SCK) | (1 << MOSI) | (1 << SS);
    100a:	87 b3       	in	r24, 0x17	; 23
    100c:	80 6b       	ori	r24, 0xB0	; 176
    100e:	87 bb       	out	0x17, r24	; 23

    SPCR |= (1 << SPE) | (1 << MSTR) |(1<<SPR0);  // Enable SPI and set as master
    1010:	8d b1       	in	r24, 0x0d	; 13
    1012:	81 65       	ori	r24, 0x51	; 81
    1014:	8d b9       	out	0x0d, r24	; 13
    1016:	08 95       	ret

00001018 <SRAM_init>:
 */

#include "SRAM_driver.h"

void SRAM_init(void){
    MCUCR |= (1 << SRE);     //external SRAM enable (mcu control register)
    1018:	85 b7       	in	r24, 0x35	; 53
    101a:	80 68       	ori	r24, 0x80	; 128
    101c:	85 bf       	out	0x35, r24	; 53
    SFIOR |= (1 << XMM2);    //excludes memory occupied by JTAG
    101e:	80 b7       	in	r24, 0x30	; 48
    1020:	80 62       	ori	r24, 0x20	; 32
    1022:	80 bf       	out	0x30, r24	; 48
    1024:	08 95       	ret

00001026 <USART_init>:
 */
#include "UART_driver.h"


void USART_init(void){
    UBRR0L = (uint8_t)(BAUD_PRESCALER);
    1026:	8f e1       	ldi	r24, 0x1F	; 31
    1028:	89 b9       	out	0x09, r24	; 9
    UBRR0H = (uint8_t)((uint8_t) BAUD_PRESCALER>>8);
    102a:	10 bc       	out	0x20, r1	; 32
    UCSR0B = (1 << RXEN0)|(1 << TXEN0);
    102c:	88 e1       	ldi	r24, 0x18	; 24
    102e:	8a b9       	out	0x0a, r24	; 10
    UCSR0C = (1 << URSEL0)|(1 << USBS0)|(3 << UCSZ00);
    1030:	8e e8       	ldi	r24, 0x8E	; 142
    1032:	80 bd       	out	0x20, r24	; 32
    1034:	08 95       	ret

00001036 <USART_receive>:
}

unsigned char USART_receive(void){
    while(!(UCSR0A & (1 << RXC0)));
    1036:	5f 9b       	sbis	0x0b, 7	; 11
    1038:	fe cf       	rjmp	.-4      	; 0x1036 <USART_receive>
    return UDR0;
    103a:	8c b1       	in	r24, 0x0c	; 12
}
    103c:	08 95       	ret

0000103e <USART_send>:

void USART_send( unsigned char data){
    while(!(UCSR0A & (1 << UDRE0)));
    103e:	5d 9b       	sbis	0x0b, 5	; 11
    1040:	fe cf       	rjmp	.-4      	; 0x103e <USART_send>
    UDR0 = data;
    1042:	8c b9       	out	0x0c, r24	; 12
    1044:	08 95       	ret

00001046 <__subsf3>:
    1046:	50 58       	subi	r21, 0x80	; 128

00001048 <__addsf3>:
    1048:	bb 27       	eor	r27, r27
    104a:	aa 27       	eor	r26, r26
    104c:	0e 94 3b 08 	call	0x1076	; 0x1076 <__addsf3x>
    1050:	0c 94 4e 0a 	jmp	0x149c	; 0x149c <__fp_round>
    1054:	0e 94 40 0a 	call	0x1480	; 0x1480 <__fp_pscA>
    1058:	38 f0       	brcs	.+14     	; 0x1068 <__addsf3+0x20>
    105a:	0e 94 47 0a 	call	0x148e	; 0x148e <__fp_pscB>
    105e:	20 f0       	brcs	.+8      	; 0x1068 <__addsf3+0x20>
    1060:	39 f4       	brne	.+14     	; 0x1070 <__addsf3+0x28>
    1062:	9f 3f       	cpi	r25, 0xFF	; 255
    1064:	19 f4       	brne	.+6      	; 0x106c <__addsf3+0x24>
    1066:	26 f4       	brtc	.+8      	; 0x1070 <__addsf3+0x28>
    1068:	0c 94 16 0a 	jmp	0x142c	; 0x142c <__fp_nan>
    106c:	0e f4       	brtc	.+2      	; 0x1070 <__addsf3+0x28>
    106e:	e0 95       	com	r30
    1070:	e7 fb       	bst	r30, 7
    1072:	0c 94 10 0a 	jmp	0x1420	; 0x1420 <__fp_inf>

00001076 <__addsf3x>:
    1076:	e9 2f       	mov	r30, r25
    1078:	0e 94 5f 0a 	call	0x14be	; 0x14be <__fp_split3>
    107c:	58 f3       	brcs	.-42     	; 0x1054 <__addsf3+0xc>
    107e:	ba 17       	cp	r27, r26
    1080:	62 07       	cpc	r22, r18
    1082:	73 07       	cpc	r23, r19
    1084:	84 07       	cpc	r24, r20
    1086:	95 07       	cpc	r25, r21
    1088:	20 f0       	brcs	.+8      	; 0x1092 <__addsf3x+0x1c>
    108a:	79 f4       	brne	.+30     	; 0x10aa <__addsf3x+0x34>
    108c:	a6 f5       	brtc	.+104    	; 0x10f6 <__addsf3x+0x80>
    108e:	0c 94 81 0a 	jmp	0x1502	; 0x1502 <__fp_zero>
    1092:	0e f4       	brtc	.+2      	; 0x1096 <__addsf3x+0x20>
    1094:	e0 95       	com	r30
    1096:	0b 2e       	mov	r0, r27
    1098:	ba 2f       	mov	r27, r26
    109a:	a0 2d       	mov	r26, r0
    109c:	0b 01       	movw	r0, r22
    109e:	b9 01       	movw	r22, r18
    10a0:	90 01       	movw	r18, r0
    10a2:	0c 01       	movw	r0, r24
    10a4:	ca 01       	movw	r24, r20
    10a6:	a0 01       	movw	r20, r0
    10a8:	11 24       	eor	r1, r1
    10aa:	ff 27       	eor	r31, r31
    10ac:	59 1b       	sub	r21, r25
    10ae:	99 f0       	breq	.+38     	; 0x10d6 <__addsf3x+0x60>
    10b0:	59 3f       	cpi	r21, 0xF9	; 249
    10b2:	50 f4       	brcc	.+20     	; 0x10c8 <__addsf3x+0x52>
    10b4:	50 3e       	cpi	r21, 0xE0	; 224
    10b6:	68 f1       	brcs	.+90     	; 0x1112 <__addsf3x+0x9c>
    10b8:	1a 16       	cp	r1, r26
    10ba:	f0 40       	sbci	r31, 0x00	; 0
    10bc:	a2 2f       	mov	r26, r18
    10be:	23 2f       	mov	r18, r19
    10c0:	34 2f       	mov	r19, r20
    10c2:	44 27       	eor	r20, r20
    10c4:	58 5f       	subi	r21, 0xF8	; 248
    10c6:	f3 cf       	rjmp	.-26     	; 0x10ae <__addsf3x+0x38>
    10c8:	46 95       	lsr	r20
    10ca:	37 95       	ror	r19
    10cc:	27 95       	ror	r18
    10ce:	a7 95       	ror	r26
    10d0:	f0 40       	sbci	r31, 0x00	; 0
    10d2:	53 95       	inc	r21
    10d4:	c9 f7       	brne	.-14     	; 0x10c8 <__addsf3x+0x52>
    10d6:	7e f4       	brtc	.+30     	; 0x10f6 <__addsf3x+0x80>
    10d8:	1f 16       	cp	r1, r31
    10da:	ba 0b       	sbc	r27, r26
    10dc:	62 0b       	sbc	r22, r18
    10de:	73 0b       	sbc	r23, r19
    10e0:	84 0b       	sbc	r24, r20
    10e2:	ba f0       	brmi	.+46     	; 0x1112 <__addsf3x+0x9c>
    10e4:	91 50       	subi	r25, 0x01	; 1
    10e6:	a1 f0       	breq	.+40     	; 0x1110 <__addsf3x+0x9a>
    10e8:	ff 0f       	add	r31, r31
    10ea:	bb 1f       	adc	r27, r27
    10ec:	66 1f       	adc	r22, r22
    10ee:	77 1f       	adc	r23, r23
    10f0:	88 1f       	adc	r24, r24
    10f2:	c2 f7       	brpl	.-16     	; 0x10e4 <__addsf3x+0x6e>
    10f4:	0e c0       	rjmp	.+28     	; 0x1112 <__addsf3x+0x9c>
    10f6:	ba 0f       	add	r27, r26
    10f8:	62 1f       	adc	r22, r18
    10fa:	73 1f       	adc	r23, r19
    10fc:	84 1f       	adc	r24, r20
    10fe:	48 f4       	brcc	.+18     	; 0x1112 <__addsf3x+0x9c>
    1100:	87 95       	ror	r24
    1102:	77 95       	ror	r23
    1104:	67 95       	ror	r22
    1106:	b7 95       	ror	r27
    1108:	f7 95       	ror	r31
    110a:	9e 3f       	cpi	r25, 0xFE	; 254
    110c:	08 f0       	brcs	.+2      	; 0x1110 <__addsf3x+0x9a>
    110e:	b0 cf       	rjmp	.-160    	; 0x1070 <__addsf3+0x28>
    1110:	93 95       	inc	r25
    1112:	88 0f       	add	r24, r24
    1114:	08 f0       	brcs	.+2      	; 0x1118 <__addsf3x+0xa2>
    1116:	99 27       	eor	r25, r25
    1118:	ee 0f       	add	r30, r30
    111a:	97 95       	ror	r25
    111c:	87 95       	ror	r24
    111e:	08 95       	ret
    1120:	0e 94 40 0a 	call	0x1480	; 0x1480 <__fp_pscA>
    1124:	60 f0       	brcs	.+24     	; 0x113e <__addsf3x+0xc8>
    1126:	80 e8       	ldi	r24, 0x80	; 128
    1128:	91 e0       	ldi	r25, 0x01	; 1
    112a:	09 f4       	brne	.+2      	; 0x112e <__addsf3x+0xb8>
    112c:	9e ef       	ldi	r25, 0xFE	; 254
    112e:	0e 94 47 0a 	call	0x148e	; 0x148e <__fp_pscB>
    1132:	28 f0       	brcs	.+10     	; 0x113e <__addsf3x+0xc8>
    1134:	40 e8       	ldi	r20, 0x80	; 128
    1136:	51 e0       	ldi	r21, 0x01	; 1
    1138:	71 f4       	brne	.+28     	; 0x1156 <atan2+0x10>
    113a:	5e ef       	ldi	r21, 0xFE	; 254
    113c:	0c c0       	rjmp	.+24     	; 0x1156 <atan2+0x10>
    113e:	0c 94 16 0a 	jmp	0x142c	; 0x142c <__fp_nan>
    1142:	0c 94 81 0a 	jmp	0x1502	; 0x1502 <__fp_zero>

00001146 <atan2>:
    1146:	e9 2f       	mov	r30, r25
    1148:	e0 78       	andi	r30, 0x80	; 128
    114a:	0e 94 5f 0a 	call	0x14be	; 0x14be <__fp_split3>
    114e:	40 f3       	brcs	.-48     	; 0x1120 <__addsf3x+0xaa>
    1150:	09 2e       	mov	r0, r25
    1152:	05 2a       	or	r0, r21
    1154:	b1 f3       	breq	.-20     	; 0x1142 <__addsf3x+0xcc>
    1156:	26 17       	cp	r18, r22
    1158:	37 07       	cpc	r19, r23
    115a:	48 07       	cpc	r20, r24
    115c:	59 07       	cpc	r21, r25
    115e:	38 f0       	brcs	.+14     	; 0x116e <atan2+0x28>
    1160:	0e 2e       	mov	r0, r30
    1162:	07 f8       	bld	r0, 7
    1164:	e0 25       	eor	r30, r0
    1166:	69 f0       	breq	.+26     	; 0x1182 <atan2+0x3c>
    1168:	e0 25       	eor	r30, r0
    116a:	e0 64       	ori	r30, 0x40	; 64
    116c:	0a c0       	rjmp	.+20     	; 0x1182 <atan2+0x3c>
    116e:	ef 63       	ori	r30, 0x3F	; 63
    1170:	07 f8       	bld	r0, 7
    1172:	00 94       	com	r0
    1174:	07 fa       	bst	r0, 7
    1176:	db 01       	movw	r26, r22
    1178:	b9 01       	movw	r22, r18
    117a:	9d 01       	movw	r18, r26
    117c:	dc 01       	movw	r26, r24
    117e:	ca 01       	movw	r24, r20
    1180:	ad 01       	movw	r20, r26
    1182:	ef 93       	push	r30
    1184:	0e 94 1e 09 	call	0x123c	; 0x123c <__divsf3_pse>
    1188:	0e 94 4e 0a 	call	0x149c	; 0x149c <__fp_round>
    118c:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <atan>
    1190:	5f 91       	pop	r21
    1192:	55 23       	and	r21, r21
    1194:	39 f0       	breq	.+14     	; 0x11a4 <atan2+0x5e>
    1196:	2b ed       	ldi	r18, 0xDB	; 219
    1198:	3f e0       	ldi	r19, 0x0F	; 15
    119a:	49 e4       	ldi	r20, 0x49	; 73
    119c:	50 fd       	sbrc	r21, 0
    119e:	49 ec       	ldi	r20, 0xC9	; 201
    11a0:	0c 94 24 08 	jmp	0x1048	; 0x1048 <__addsf3>
    11a4:	08 95       	ret

000011a6 <atan>:
    11a6:	df 93       	push	r29
    11a8:	dd 27       	eor	r29, r29
    11aa:	b9 2f       	mov	r27, r25
    11ac:	bf 77       	andi	r27, 0x7F	; 127
    11ae:	40 e8       	ldi	r20, 0x80	; 128
    11b0:	5f e3       	ldi	r21, 0x3F	; 63
    11b2:	16 16       	cp	r1, r22
    11b4:	17 06       	cpc	r1, r23
    11b6:	48 07       	cpc	r20, r24
    11b8:	5b 07       	cpc	r21, r27
    11ba:	18 f4       	brcc	.+6      	; 0x11c2 <atan+0x1c>
    11bc:	d9 2f       	mov	r29, r25
    11be:	0e 94 8d 0a 	call	0x151a	; 0x151a <inverse>
    11c2:	9f 93       	push	r25
    11c4:	8f 93       	push	r24
    11c6:	7f 93       	push	r23
    11c8:	6f 93       	push	r22
    11ca:	0e 94 02 0b 	call	0x1604	; 0x1604 <square>
    11ce:	e0 e7       	ldi	r30, 0x70	; 112
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	0e 94 19 0a 	call	0x1432	; 0x1432 <__fp_powser>
    11d6:	0e 94 4e 0a 	call	0x149c	; 0x149c <__fp_round>
    11da:	2f 91       	pop	r18
    11dc:	3f 91       	pop	r19
    11de:	4f 91       	pop	r20
    11e0:	5f 91       	pop	r21
    11e2:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__mulsf3x>
    11e6:	dd 23       	and	r29, r29
    11e8:	51 f0       	breq	.+20     	; 0x11fe <atan+0x58>
    11ea:	90 58       	subi	r25, 0x80	; 128
    11ec:	a2 ea       	ldi	r26, 0xA2	; 162
    11ee:	2a ed       	ldi	r18, 0xDA	; 218
    11f0:	3f e0       	ldi	r19, 0x0F	; 15
    11f2:	49 ec       	ldi	r20, 0xC9	; 201
    11f4:	5f e3       	ldi	r21, 0x3F	; 63
    11f6:	d0 78       	andi	r29, 0x80	; 128
    11f8:	5d 27       	eor	r21, r29
    11fa:	0e 94 3b 08 	call	0x1076	; 0x1076 <__addsf3x>
    11fe:	df 91       	pop	r29
    1200:	0c 94 4e 0a 	jmp	0x149c	; 0x149c <__fp_round>

00001204 <__cmpsf2>:
    1204:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <__fp_cmp>
    1208:	08 f4       	brcc	.+2      	; 0x120c <__cmpsf2+0x8>
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	08 95       	ret

0000120e <__divsf3>:
    120e:	0e 94 1b 09 	call	0x1236	; 0x1236 <__divsf3x>
    1212:	0c 94 4e 0a 	jmp	0x149c	; 0x149c <__fp_round>
    1216:	0e 94 47 0a 	call	0x148e	; 0x148e <__fp_pscB>
    121a:	58 f0       	brcs	.+22     	; 0x1232 <__divsf3+0x24>
    121c:	0e 94 40 0a 	call	0x1480	; 0x1480 <__fp_pscA>
    1220:	40 f0       	brcs	.+16     	; 0x1232 <__divsf3+0x24>
    1222:	29 f4       	brne	.+10     	; 0x122e <__divsf3+0x20>
    1224:	5f 3f       	cpi	r21, 0xFF	; 255
    1226:	29 f0       	breq	.+10     	; 0x1232 <__divsf3+0x24>
    1228:	0c 94 10 0a 	jmp	0x1420	; 0x1420 <__fp_inf>
    122c:	51 11       	cpse	r21, r1
    122e:	0c 94 82 0a 	jmp	0x1504	; 0x1504 <__fp_szero>
    1232:	0c 94 16 0a 	jmp	0x142c	; 0x142c <__fp_nan>

00001236 <__divsf3x>:
    1236:	0e 94 5f 0a 	call	0x14be	; 0x14be <__fp_split3>
    123a:	68 f3       	brcs	.-38     	; 0x1216 <__divsf3+0x8>

0000123c <__divsf3_pse>:
    123c:	99 23       	and	r25, r25
    123e:	b1 f3       	breq	.-20     	; 0x122c <__divsf3+0x1e>
    1240:	55 23       	and	r21, r21
    1242:	91 f3       	breq	.-28     	; 0x1228 <__divsf3+0x1a>
    1244:	95 1b       	sub	r25, r21
    1246:	55 0b       	sbc	r21, r21
    1248:	bb 27       	eor	r27, r27
    124a:	aa 27       	eor	r26, r26
    124c:	62 17       	cp	r22, r18
    124e:	73 07       	cpc	r23, r19
    1250:	84 07       	cpc	r24, r20
    1252:	38 f0       	brcs	.+14     	; 0x1262 <__divsf3_pse+0x26>
    1254:	9f 5f       	subi	r25, 0xFF	; 255
    1256:	5f 4f       	sbci	r21, 0xFF	; 255
    1258:	22 0f       	add	r18, r18
    125a:	33 1f       	adc	r19, r19
    125c:	44 1f       	adc	r20, r20
    125e:	aa 1f       	adc	r26, r26
    1260:	a9 f3       	breq	.-22     	; 0x124c <__divsf3_pse+0x10>
    1262:	35 d0       	rcall	.+106    	; 0x12ce <__divsf3_pse+0x92>
    1264:	0e 2e       	mov	r0, r30
    1266:	3a f0       	brmi	.+14     	; 0x1276 <__divsf3_pse+0x3a>
    1268:	e0 e8       	ldi	r30, 0x80	; 128
    126a:	32 d0       	rcall	.+100    	; 0x12d0 <__divsf3_pse+0x94>
    126c:	91 50       	subi	r25, 0x01	; 1
    126e:	50 40       	sbci	r21, 0x00	; 0
    1270:	e6 95       	lsr	r30
    1272:	00 1c       	adc	r0, r0
    1274:	ca f7       	brpl	.-14     	; 0x1268 <__divsf3_pse+0x2c>
    1276:	2b d0       	rcall	.+86     	; 0x12ce <__divsf3_pse+0x92>
    1278:	fe 2f       	mov	r31, r30
    127a:	29 d0       	rcall	.+82     	; 0x12ce <__divsf3_pse+0x92>
    127c:	66 0f       	add	r22, r22
    127e:	77 1f       	adc	r23, r23
    1280:	88 1f       	adc	r24, r24
    1282:	bb 1f       	adc	r27, r27
    1284:	26 17       	cp	r18, r22
    1286:	37 07       	cpc	r19, r23
    1288:	48 07       	cpc	r20, r24
    128a:	ab 07       	cpc	r26, r27
    128c:	b0 e8       	ldi	r27, 0x80	; 128
    128e:	09 f0       	breq	.+2      	; 0x1292 <__divsf3_pse+0x56>
    1290:	bb 0b       	sbc	r27, r27
    1292:	80 2d       	mov	r24, r0
    1294:	bf 01       	movw	r22, r30
    1296:	ff 27       	eor	r31, r31
    1298:	93 58       	subi	r25, 0x83	; 131
    129a:	5f 4f       	sbci	r21, 0xFF	; 255
    129c:	3a f0       	brmi	.+14     	; 0x12ac <__divsf3_pse+0x70>
    129e:	9e 3f       	cpi	r25, 0xFE	; 254
    12a0:	51 05       	cpc	r21, r1
    12a2:	78 f0       	brcs	.+30     	; 0x12c2 <__divsf3_pse+0x86>
    12a4:	0c 94 10 0a 	jmp	0x1420	; 0x1420 <__fp_inf>
    12a8:	0c 94 82 0a 	jmp	0x1504	; 0x1504 <__fp_szero>
    12ac:	5f 3f       	cpi	r21, 0xFF	; 255
    12ae:	e4 f3       	brlt	.-8      	; 0x12a8 <__divsf3_pse+0x6c>
    12b0:	98 3e       	cpi	r25, 0xE8	; 232
    12b2:	d4 f3       	brlt	.-12     	; 0x12a8 <__divsf3_pse+0x6c>
    12b4:	86 95       	lsr	r24
    12b6:	77 95       	ror	r23
    12b8:	67 95       	ror	r22
    12ba:	b7 95       	ror	r27
    12bc:	f7 95       	ror	r31
    12be:	9f 5f       	subi	r25, 0xFF	; 255
    12c0:	c9 f7       	brne	.-14     	; 0x12b4 <__divsf3_pse+0x78>
    12c2:	88 0f       	add	r24, r24
    12c4:	91 1d       	adc	r25, r1
    12c6:	96 95       	lsr	r25
    12c8:	87 95       	ror	r24
    12ca:	97 f9       	bld	r25, 7
    12cc:	08 95       	ret
    12ce:	e1 e0       	ldi	r30, 0x01	; 1
    12d0:	66 0f       	add	r22, r22
    12d2:	77 1f       	adc	r23, r23
    12d4:	88 1f       	adc	r24, r24
    12d6:	bb 1f       	adc	r27, r27
    12d8:	62 17       	cp	r22, r18
    12da:	73 07       	cpc	r23, r19
    12dc:	84 07       	cpc	r24, r20
    12de:	ba 07       	cpc	r27, r26
    12e0:	20 f0       	brcs	.+8      	; 0x12ea <__divsf3_pse+0xae>
    12e2:	62 1b       	sub	r22, r18
    12e4:	73 0b       	sbc	r23, r19
    12e6:	84 0b       	sbc	r24, r20
    12e8:	ba 0b       	sbc	r27, r26
    12ea:	ee 1f       	adc	r30, r30
    12ec:	88 f7       	brcc	.-30     	; 0x12d0 <__divsf3_pse+0x94>
    12ee:	e0 95       	com	r30
    12f0:	08 95       	ret

000012f2 <__fixsfsi>:
    12f2:	0e 94 80 09 	call	0x1300	; 0x1300 <__fixunssfsi>
    12f6:	68 94       	set
    12f8:	b1 11       	cpse	r27, r1
    12fa:	0c 94 82 0a 	jmp	0x1504	; 0x1504 <__fp_szero>
    12fe:	08 95       	ret

00001300 <__fixunssfsi>:
    1300:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__fp_splitA>
    1304:	88 f0       	brcs	.+34     	; 0x1328 <__fixunssfsi+0x28>
    1306:	9f 57       	subi	r25, 0x7F	; 127
    1308:	98 f0       	brcs	.+38     	; 0x1330 <__fixunssfsi+0x30>
    130a:	b9 2f       	mov	r27, r25
    130c:	99 27       	eor	r25, r25
    130e:	b7 51       	subi	r27, 0x17	; 23
    1310:	b0 f0       	brcs	.+44     	; 0x133e <__fixunssfsi+0x3e>
    1312:	e1 f0       	breq	.+56     	; 0x134c <__fixunssfsi+0x4c>
    1314:	66 0f       	add	r22, r22
    1316:	77 1f       	adc	r23, r23
    1318:	88 1f       	adc	r24, r24
    131a:	99 1f       	adc	r25, r25
    131c:	1a f0       	brmi	.+6      	; 0x1324 <__fixunssfsi+0x24>
    131e:	ba 95       	dec	r27
    1320:	c9 f7       	brne	.-14     	; 0x1314 <__fixunssfsi+0x14>
    1322:	14 c0       	rjmp	.+40     	; 0x134c <__fixunssfsi+0x4c>
    1324:	b1 30       	cpi	r27, 0x01	; 1
    1326:	91 f0       	breq	.+36     	; 0x134c <__fixunssfsi+0x4c>
    1328:	0e 94 81 0a 	call	0x1502	; 0x1502 <__fp_zero>
    132c:	b1 e0       	ldi	r27, 0x01	; 1
    132e:	08 95       	ret
    1330:	0c 94 81 0a 	jmp	0x1502	; 0x1502 <__fp_zero>
    1334:	67 2f       	mov	r22, r23
    1336:	78 2f       	mov	r23, r24
    1338:	88 27       	eor	r24, r24
    133a:	b8 5f       	subi	r27, 0xF8	; 248
    133c:	39 f0       	breq	.+14     	; 0x134c <__fixunssfsi+0x4c>
    133e:	b9 3f       	cpi	r27, 0xF9	; 249
    1340:	cc f3       	brlt	.-14     	; 0x1334 <__fixunssfsi+0x34>
    1342:	86 95       	lsr	r24
    1344:	77 95       	ror	r23
    1346:	67 95       	ror	r22
    1348:	b3 95       	inc	r27
    134a:	d9 f7       	brne	.-10     	; 0x1342 <__fixunssfsi+0x42>
    134c:	3e f4       	brtc	.+14     	; 0x135c <__fixunssfsi+0x5c>
    134e:	90 95       	com	r25
    1350:	80 95       	com	r24
    1352:	70 95       	com	r23
    1354:	61 95       	neg	r22
    1356:	7f 4f       	sbci	r23, 0xFF	; 255
    1358:	8f 4f       	sbci	r24, 0xFF	; 255
    135a:	9f 4f       	sbci	r25, 0xFF	; 255
    135c:	08 95       	ret

0000135e <__floatunsisf>:
    135e:	e8 94       	clt
    1360:	09 c0       	rjmp	.+18     	; 0x1374 <__floatsisf+0x12>

00001362 <__floatsisf>:
    1362:	97 fb       	bst	r25, 7
    1364:	3e f4       	brtc	.+14     	; 0x1374 <__floatsisf+0x12>
    1366:	90 95       	com	r25
    1368:	80 95       	com	r24
    136a:	70 95       	com	r23
    136c:	61 95       	neg	r22
    136e:	7f 4f       	sbci	r23, 0xFF	; 255
    1370:	8f 4f       	sbci	r24, 0xFF	; 255
    1372:	9f 4f       	sbci	r25, 0xFF	; 255
    1374:	99 23       	and	r25, r25
    1376:	a9 f0       	breq	.+42     	; 0x13a2 <__floatsisf+0x40>
    1378:	f9 2f       	mov	r31, r25
    137a:	96 e9       	ldi	r25, 0x96	; 150
    137c:	bb 27       	eor	r27, r27
    137e:	93 95       	inc	r25
    1380:	f6 95       	lsr	r31
    1382:	87 95       	ror	r24
    1384:	77 95       	ror	r23
    1386:	67 95       	ror	r22
    1388:	b7 95       	ror	r27
    138a:	f1 11       	cpse	r31, r1
    138c:	f8 cf       	rjmp	.-16     	; 0x137e <__floatsisf+0x1c>
    138e:	fa f4       	brpl	.+62     	; 0x13ce <__floatsisf+0x6c>
    1390:	bb 0f       	add	r27, r27
    1392:	11 f4       	brne	.+4      	; 0x1398 <__floatsisf+0x36>
    1394:	60 ff       	sbrs	r22, 0
    1396:	1b c0       	rjmp	.+54     	; 0x13ce <__floatsisf+0x6c>
    1398:	6f 5f       	subi	r22, 0xFF	; 255
    139a:	7f 4f       	sbci	r23, 0xFF	; 255
    139c:	8f 4f       	sbci	r24, 0xFF	; 255
    139e:	9f 4f       	sbci	r25, 0xFF	; 255
    13a0:	16 c0       	rjmp	.+44     	; 0x13ce <__floatsisf+0x6c>
    13a2:	88 23       	and	r24, r24
    13a4:	11 f0       	breq	.+4      	; 0x13aa <__floatsisf+0x48>
    13a6:	96 e9       	ldi	r25, 0x96	; 150
    13a8:	11 c0       	rjmp	.+34     	; 0x13cc <__floatsisf+0x6a>
    13aa:	77 23       	and	r23, r23
    13ac:	21 f0       	breq	.+8      	; 0x13b6 <__floatsisf+0x54>
    13ae:	9e e8       	ldi	r25, 0x8E	; 142
    13b0:	87 2f       	mov	r24, r23
    13b2:	76 2f       	mov	r23, r22
    13b4:	05 c0       	rjmp	.+10     	; 0x13c0 <__floatsisf+0x5e>
    13b6:	66 23       	and	r22, r22
    13b8:	71 f0       	breq	.+28     	; 0x13d6 <__floatsisf+0x74>
    13ba:	96 e8       	ldi	r25, 0x86	; 134
    13bc:	86 2f       	mov	r24, r22
    13be:	70 e0       	ldi	r23, 0x00	; 0
    13c0:	60 e0       	ldi	r22, 0x00	; 0
    13c2:	2a f0       	brmi	.+10     	; 0x13ce <__floatsisf+0x6c>
    13c4:	9a 95       	dec	r25
    13c6:	66 0f       	add	r22, r22
    13c8:	77 1f       	adc	r23, r23
    13ca:	88 1f       	adc	r24, r24
    13cc:	da f7       	brpl	.-10     	; 0x13c4 <__floatsisf+0x62>
    13ce:	88 0f       	add	r24, r24
    13d0:	96 95       	lsr	r25
    13d2:	87 95       	ror	r24
    13d4:	97 f9       	bld	r25, 7
    13d6:	08 95       	ret

000013d8 <__fp_cmp>:
    13d8:	99 0f       	add	r25, r25
    13da:	00 08       	sbc	r0, r0
    13dc:	55 0f       	add	r21, r21
    13de:	aa 0b       	sbc	r26, r26
    13e0:	e0 e8       	ldi	r30, 0x80	; 128
    13e2:	fe ef       	ldi	r31, 0xFE	; 254
    13e4:	16 16       	cp	r1, r22
    13e6:	17 06       	cpc	r1, r23
    13e8:	e8 07       	cpc	r30, r24
    13ea:	f9 07       	cpc	r31, r25
    13ec:	c0 f0       	brcs	.+48     	; 0x141e <__fp_cmp+0x46>
    13ee:	12 16       	cp	r1, r18
    13f0:	13 06       	cpc	r1, r19
    13f2:	e4 07       	cpc	r30, r20
    13f4:	f5 07       	cpc	r31, r21
    13f6:	98 f0       	brcs	.+38     	; 0x141e <__fp_cmp+0x46>
    13f8:	62 1b       	sub	r22, r18
    13fa:	73 0b       	sbc	r23, r19
    13fc:	84 0b       	sbc	r24, r20
    13fe:	95 0b       	sbc	r25, r21
    1400:	39 f4       	brne	.+14     	; 0x1410 <__fp_cmp+0x38>
    1402:	0a 26       	eor	r0, r26
    1404:	61 f0       	breq	.+24     	; 0x141e <__fp_cmp+0x46>
    1406:	23 2b       	or	r18, r19
    1408:	24 2b       	or	r18, r20
    140a:	25 2b       	or	r18, r21
    140c:	21 f4       	brne	.+8      	; 0x1416 <__fp_cmp+0x3e>
    140e:	08 95       	ret
    1410:	0a 26       	eor	r0, r26
    1412:	09 f4       	brne	.+2      	; 0x1416 <__fp_cmp+0x3e>
    1414:	a1 40       	sbci	r26, 0x01	; 1
    1416:	a6 95       	lsr	r26
    1418:	8f ef       	ldi	r24, 0xFF	; 255
    141a:	81 1d       	adc	r24, r1
    141c:	81 1d       	adc	r24, r1
    141e:	08 95       	ret

00001420 <__fp_inf>:
    1420:	97 f9       	bld	r25, 7
    1422:	9f 67       	ori	r25, 0x7F	; 127
    1424:	80 e8       	ldi	r24, 0x80	; 128
    1426:	70 e0       	ldi	r23, 0x00	; 0
    1428:	60 e0       	ldi	r22, 0x00	; 0
    142a:	08 95       	ret

0000142c <__fp_nan>:
    142c:	9f ef       	ldi	r25, 0xFF	; 255
    142e:	80 ec       	ldi	r24, 0xC0	; 192
    1430:	08 95       	ret

00001432 <__fp_powser>:
    1432:	df 93       	push	r29
    1434:	cf 93       	push	r28
    1436:	1f 93       	push	r17
    1438:	0f 93       	push	r16
    143a:	ff 92       	push	r15
    143c:	ef 92       	push	r14
    143e:	df 92       	push	r13
    1440:	7b 01       	movw	r14, r22
    1442:	8c 01       	movw	r16, r24
    1444:	68 94       	set
    1446:	06 c0       	rjmp	.+12     	; 0x1454 <__fp_powser+0x22>
    1448:	da 2e       	mov	r13, r26
    144a:	ef 01       	movw	r28, r30
    144c:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__mulsf3x>
    1450:	fe 01       	movw	r30, r28
    1452:	e8 94       	clt
    1454:	a5 91       	lpm	r26, Z+
    1456:	25 91       	lpm	r18, Z+
    1458:	35 91       	lpm	r19, Z+
    145a:	45 91       	lpm	r20, Z+
    145c:	55 91       	lpm	r21, Z+
    145e:	a6 f3       	brts	.-24     	; 0x1448 <__fp_powser+0x16>
    1460:	ef 01       	movw	r28, r30
    1462:	0e 94 3b 08 	call	0x1076	; 0x1076 <__addsf3x>
    1466:	fe 01       	movw	r30, r28
    1468:	97 01       	movw	r18, r14
    146a:	a8 01       	movw	r20, r16
    146c:	da 94       	dec	r13
    146e:	69 f7       	brne	.-38     	; 0x144a <__fp_powser+0x18>
    1470:	df 90       	pop	r13
    1472:	ef 90       	pop	r14
    1474:	ff 90       	pop	r15
    1476:	0f 91       	pop	r16
    1478:	1f 91       	pop	r17
    147a:	cf 91       	pop	r28
    147c:	df 91       	pop	r29
    147e:	08 95       	ret

00001480 <__fp_pscA>:
    1480:	00 24       	eor	r0, r0
    1482:	0a 94       	dec	r0
    1484:	16 16       	cp	r1, r22
    1486:	17 06       	cpc	r1, r23
    1488:	18 06       	cpc	r1, r24
    148a:	09 06       	cpc	r0, r25
    148c:	08 95       	ret

0000148e <__fp_pscB>:
    148e:	00 24       	eor	r0, r0
    1490:	0a 94       	dec	r0
    1492:	12 16       	cp	r1, r18
    1494:	13 06       	cpc	r1, r19
    1496:	14 06       	cpc	r1, r20
    1498:	05 06       	cpc	r0, r21
    149a:	08 95       	ret

0000149c <__fp_round>:
    149c:	09 2e       	mov	r0, r25
    149e:	03 94       	inc	r0
    14a0:	00 0c       	add	r0, r0
    14a2:	11 f4       	brne	.+4      	; 0x14a8 <__fp_round+0xc>
    14a4:	88 23       	and	r24, r24
    14a6:	52 f0       	brmi	.+20     	; 0x14bc <__fp_round+0x20>
    14a8:	bb 0f       	add	r27, r27
    14aa:	40 f4       	brcc	.+16     	; 0x14bc <__fp_round+0x20>
    14ac:	bf 2b       	or	r27, r31
    14ae:	11 f4       	brne	.+4      	; 0x14b4 <__fp_round+0x18>
    14b0:	60 ff       	sbrs	r22, 0
    14b2:	04 c0       	rjmp	.+8      	; 0x14bc <__fp_round+0x20>
    14b4:	6f 5f       	subi	r22, 0xFF	; 255
    14b6:	7f 4f       	sbci	r23, 0xFF	; 255
    14b8:	8f 4f       	sbci	r24, 0xFF	; 255
    14ba:	9f 4f       	sbci	r25, 0xFF	; 255
    14bc:	08 95       	ret

000014be <__fp_split3>:
    14be:	57 fd       	sbrc	r21, 7
    14c0:	90 58       	subi	r25, 0x80	; 128
    14c2:	44 0f       	add	r20, r20
    14c4:	55 1f       	adc	r21, r21
    14c6:	59 f0       	breq	.+22     	; 0x14de <__fp_splitA+0x10>
    14c8:	5f 3f       	cpi	r21, 0xFF	; 255
    14ca:	71 f0       	breq	.+28     	; 0x14e8 <__fp_splitA+0x1a>
    14cc:	47 95       	ror	r20

000014ce <__fp_splitA>:
    14ce:	88 0f       	add	r24, r24
    14d0:	97 fb       	bst	r25, 7
    14d2:	99 1f       	adc	r25, r25
    14d4:	61 f0       	breq	.+24     	; 0x14ee <__fp_splitA+0x20>
    14d6:	9f 3f       	cpi	r25, 0xFF	; 255
    14d8:	79 f0       	breq	.+30     	; 0x14f8 <__fp_splitA+0x2a>
    14da:	87 95       	ror	r24
    14dc:	08 95       	ret
    14de:	12 16       	cp	r1, r18
    14e0:	13 06       	cpc	r1, r19
    14e2:	14 06       	cpc	r1, r20
    14e4:	55 1f       	adc	r21, r21
    14e6:	f2 cf       	rjmp	.-28     	; 0x14cc <__fp_split3+0xe>
    14e8:	46 95       	lsr	r20
    14ea:	f1 df       	rcall	.-30     	; 0x14ce <__fp_splitA>
    14ec:	08 c0       	rjmp	.+16     	; 0x14fe <__fp_splitA+0x30>
    14ee:	16 16       	cp	r1, r22
    14f0:	17 06       	cpc	r1, r23
    14f2:	18 06       	cpc	r1, r24
    14f4:	99 1f       	adc	r25, r25
    14f6:	f1 cf       	rjmp	.-30     	; 0x14da <__fp_splitA+0xc>
    14f8:	86 95       	lsr	r24
    14fa:	71 05       	cpc	r23, r1
    14fc:	61 05       	cpc	r22, r1
    14fe:	08 94       	sec
    1500:	08 95       	ret

00001502 <__fp_zero>:
    1502:	e8 94       	clt

00001504 <__fp_szero>:
    1504:	bb 27       	eor	r27, r27
    1506:	66 27       	eor	r22, r22
    1508:	77 27       	eor	r23, r23
    150a:	cb 01       	movw	r24, r22
    150c:	97 f9       	bld	r25, 7
    150e:	08 95       	ret

00001510 <__gesf2>:
    1510:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <__fp_cmp>
    1514:	08 f4       	brcc	.+2      	; 0x1518 <__gesf2+0x8>
    1516:	8f ef       	ldi	r24, 0xFF	; 255
    1518:	08 95       	ret

0000151a <inverse>:
    151a:	9b 01       	movw	r18, r22
    151c:	ac 01       	movw	r20, r24
    151e:	60 e0       	ldi	r22, 0x00	; 0
    1520:	70 e0       	ldi	r23, 0x00	; 0
    1522:	80 e8       	ldi	r24, 0x80	; 128
    1524:	9f e3       	ldi	r25, 0x3F	; 63
    1526:	0c 94 07 09 	jmp	0x120e	; 0x120e <__divsf3>

0000152a <__mulsf3>:
    152a:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__mulsf3x>
    152e:	0c 94 4e 0a 	jmp	0x149c	; 0x149c <__fp_round>
    1532:	0e 94 40 0a 	call	0x1480	; 0x1480 <__fp_pscA>
    1536:	38 f0       	brcs	.+14     	; 0x1546 <__mulsf3+0x1c>
    1538:	0e 94 47 0a 	call	0x148e	; 0x148e <__fp_pscB>
    153c:	20 f0       	brcs	.+8      	; 0x1546 <__mulsf3+0x1c>
    153e:	95 23       	and	r25, r21
    1540:	11 f0       	breq	.+4      	; 0x1546 <__mulsf3+0x1c>
    1542:	0c 94 10 0a 	jmp	0x1420	; 0x1420 <__fp_inf>
    1546:	0c 94 16 0a 	jmp	0x142c	; 0x142c <__fp_nan>
    154a:	11 24       	eor	r1, r1
    154c:	0c 94 82 0a 	jmp	0x1504	; 0x1504 <__fp_szero>

00001550 <__mulsf3x>:
    1550:	0e 94 5f 0a 	call	0x14be	; 0x14be <__fp_split3>
    1554:	70 f3       	brcs	.-36     	; 0x1532 <__mulsf3+0x8>

00001556 <__mulsf3_pse>:
    1556:	95 9f       	mul	r25, r21
    1558:	c1 f3       	breq	.-16     	; 0x154a <__mulsf3+0x20>
    155a:	95 0f       	add	r25, r21
    155c:	50 e0       	ldi	r21, 0x00	; 0
    155e:	55 1f       	adc	r21, r21
    1560:	62 9f       	mul	r22, r18
    1562:	f0 01       	movw	r30, r0
    1564:	72 9f       	mul	r23, r18
    1566:	bb 27       	eor	r27, r27
    1568:	f0 0d       	add	r31, r0
    156a:	b1 1d       	adc	r27, r1
    156c:	63 9f       	mul	r22, r19
    156e:	aa 27       	eor	r26, r26
    1570:	f0 0d       	add	r31, r0
    1572:	b1 1d       	adc	r27, r1
    1574:	aa 1f       	adc	r26, r26
    1576:	64 9f       	mul	r22, r20
    1578:	66 27       	eor	r22, r22
    157a:	b0 0d       	add	r27, r0
    157c:	a1 1d       	adc	r26, r1
    157e:	66 1f       	adc	r22, r22
    1580:	82 9f       	mul	r24, r18
    1582:	22 27       	eor	r18, r18
    1584:	b0 0d       	add	r27, r0
    1586:	a1 1d       	adc	r26, r1
    1588:	62 1f       	adc	r22, r18
    158a:	73 9f       	mul	r23, r19
    158c:	b0 0d       	add	r27, r0
    158e:	a1 1d       	adc	r26, r1
    1590:	62 1f       	adc	r22, r18
    1592:	83 9f       	mul	r24, r19
    1594:	a0 0d       	add	r26, r0
    1596:	61 1d       	adc	r22, r1
    1598:	22 1f       	adc	r18, r18
    159a:	74 9f       	mul	r23, r20
    159c:	33 27       	eor	r19, r19
    159e:	a0 0d       	add	r26, r0
    15a0:	61 1d       	adc	r22, r1
    15a2:	23 1f       	adc	r18, r19
    15a4:	84 9f       	mul	r24, r20
    15a6:	60 0d       	add	r22, r0
    15a8:	21 1d       	adc	r18, r1
    15aa:	82 2f       	mov	r24, r18
    15ac:	76 2f       	mov	r23, r22
    15ae:	6a 2f       	mov	r22, r26
    15b0:	11 24       	eor	r1, r1
    15b2:	9f 57       	subi	r25, 0x7F	; 127
    15b4:	50 40       	sbci	r21, 0x00	; 0
    15b6:	9a f0       	brmi	.+38     	; 0x15de <__mulsf3_pse+0x88>
    15b8:	f1 f0       	breq	.+60     	; 0x15f6 <__mulsf3_pse+0xa0>
    15ba:	88 23       	and	r24, r24
    15bc:	4a f0       	brmi	.+18     	; 0x15d0 <__mulsf3_pse+0x7a>
    15be:	ee 0f       	add	r30, r30
    15c0:	ff 1f       	adc	r31, r31
    15c2:	bb 1f       	adc	r27, r27
    15c4:	66 1f       	adc	r22, r22
    15c6:	77 1f       	adc	r23, r23
    15c8:	88 1f       	adc	r24, r24
    15ca:	91 50       	subi	r25, 0x01	; 1
    15cc:	50 40       	sbci	r21, 0x00	; 0
    15ce:	a9 f7       	brne	.-22     	; 0x15ba <__mulsf3_pse+0x64>
    15d0:	9e 3f       	cpi	r25, 0xFE	; 254
    15d2:	51 05       	cpc	r21, r1
    15d4:	80 f0       	brcs	.+32     	; 0x15f6 <__mulsf3_pse+0xa0>
    15d6:	0c 94 10 0a 	jmp	0x1420	; 0x1420 <__fp_inf>
    15da:	0c 94 82 0a 	jmp	0x1504	; 0x1504 <__fp_szero>
    15de:	5f 3f       	cpi	r21, 0xFF	; 255
    15e0:	e4 f3       	brlt	.-8      	; 0x15da <__mulsf3_pse+0x84>
    15e2:	98 3e       	cpi	r25, 0xE8	; 232
    15e4:	d4 f3       	brlt	.-12     	; 0x15da <__mulsf3_pse+0x84>
    15e6:	86 95       	lsr	r24
    15e8:	77 95       	ror	r23
    15ea:	67 95       	ror	r22
    15ec:	b7 95       	ror	r27
    15ee:	f7 95       	ror	r31
    15f0:	e7 95       	ror	r30
    15f2:	9f 5f       	subi	r25, 0xFF	; 255
    15f4:	c1 f7       	brne	.-16     	; 0x15e6 <__mulsf3_pse+0x90>
    15f6:	fe 2b       	or	r31, r30
    15f8:	88 0f       	add	r24, r24
    15fa:	91 1d       	adc	r25, r1
    15fc:	96 95       	lsr	r25
    15fe:	87 95       	ror	r24
    1600:	97 f9       	bld	r25, 7
    1602:	08 95       	ret

00001604 <square>:
    1604:	9b 01       	movw	r18, r22
    1606:	ac 01       	movw	r20, r24
    1608:	0c 94 95 0a 	jmp	0x152a	; 0x152a <__mulsf3>

0000160c <strcpy>:
    160c:	fb 01       	movw	r30, r22
    160e:	dc 01       	movw	r26, r24
    1610:	01 90       	ld	r0, Z+
    1612:	0d 92       	st	X+, r0
    1614:	00 20       	and	r0, r0
    1616:	e1 f7       	brne	.-8      	; 0x1610 <strcpy+0x4>
    1618:	08 95       	ret

0000161a <fdevopen>:
    161a:	0f 93       	push	r16
    161c:	1f 93       	push	r17
    161e:	cf 93       	push	r28
    1620:	df 93       	push	r29
    1622:	00 97       	sbiw	r24, 0x00	; 0
    1624:	31 f4       	brne	.+12     	; 0x1632 <fdevopen+0x18>
    1626:	61 15       	cp	r22, r1
    1628:	71 05       	cpc	r23, r1
    162a:	19 f4       	brne	.+6      	; 0x1632 <fdevopen+0x18>
    162c:	80 e0       	ldi	r24, 0x00	; 0
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	3a c0       	rjmp	.+116    	; 0x16a6 <fdevopen+0x8c>
    1632:	8b 01       	movw	r16, r22
    1634:	ec 01       	movw	r28, r24
    1636:	6e e0       	ldi	r22, 0x0E	; 14
    1638:	70 e0       	ldi	r23, 0x00	; 0
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <calloc>
    1642:	fc 01       	movw	r30, r24
    1644:	89 2b       	or	r24, r25
    1646:	91 f3       	breq	.-28     	; 0x162c <fdevopen+0x12>
    1648:	80 e8       	ldi	r24, 0x80	; 128
    164a:	83 83       	std	Z+3, r24	; 0x03
    164c:	01 15       	cp	r16, r1
    164e:	11 05       	cpc	r17, r1
    1650:	71 f0       	breq	.+28     	; 0x166e <fdevopen+0x54>
    1652:	13 87       	std	Z+11, r17	; 0x0b
    1654:	02 87       	std	Z+10, r16	; 0x0a
    1656:	81 e8       	ldi	r24, 0x81	; 129
    1658:	83 83       	std	Z+3, r24	; 0x03
    165a:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <__iob>
    165e:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <__iob+0x1>
    1662:	89 2b       	or	r24, r25
    1664:	21 f4       	brne	.+8      	; 0x166e <fdevopen+0x54>
    1666:	f0 93 45 03 	sts	0x0345, r31	; 0x800345 <__iob+0x1>
    166a:	e0 93 44 03 	sts	0x0344, r30	; 0x800344 <__iob>
    166e:	20 97       	sbiw	r28, 0x00	; 0
    1670:	c9 f0       	breq	.+50     	; 0x16a4 <fdevopen+0x8a>
    1672:	d1 87       	std	Z+9, r29	; 0x09
    1674:	c0 87       	std	Z+8, r28	; 0x08
    1676:	83 81       	ldd	r24, Z+3	; 0x03
    1678:	82 60       	ori	r24, 0x02	; 2
    167a:	83 83       	std	Z+3, r24	; 0x03
    167c:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <__iob+0x2>
    1680:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <__iob+0x3>
    1684:	89 2b       	or	r24, r25
    1686:	71 f4       	brne	.+28     	; 0x16a4 <fdevopen+0x8a>
    1688:	f0 93 47 03 	sts	0x0347, r31	; 0x800347 <__iob+0x3>
    168c:	e0 93 46 03 	sts	0x0346, r30	; 0x800346 <__iob+0x2>
    1690:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <__iob+0x4>
    1694:	90 91 49 03 	lds	r25, 0x0349	; 0x800349 <__iob+0x5>
    1698:	89 2b       	or	r24, r25
    169a:	21 f4       	brne	.+8      	; 0x16a4 <fdevopen+0x8a>
    169c:	f0 93 49 03 	sts	0x0349, r31	; 0x800349 <__iob+0x5>
    16a0:	e0 93 48 03 	sts	0x0348, r30	; 0x800348 <__iob+0x4>
    16a4:	cf 01       	movw	r24, r30
    16a6:	df 91       	pop	r29
    16a8:	cf 91       	pop	r28
    16aa:	1f 91       	pop	r17
    16ac:	0f 91       	pop	r16
    16ae:	08 95       	ret

000016b0 <printf>:
    16b0:	a0 e0       	ldi	r26, 0x00	; 0
    16b2:	b0 e0       	ldi	r27, 0x00	; 0
    16b4:	ee e5       	ldi	r30, 0x5E	; 94
    16b6:	fb e0       	ldi	r31, 0x0B	; 11
    16b8:	0c 94 83 0f 	jmp	0x1f06	; 0x1f06 <__prologue_saves__+0x20>
    16bc:	ae 01       	movw	r20, r28
    16be:	4b 5f       	subi	r20, 0xFB	; 251
    16c0:	5f 4f       	sbci	r21, 0xFF	; 255
    16c2:	fa 01       	movw	r30, r20
    16c4:	61 91       	ld	r22, Z+
    16c6:	71 91       	ld	r23, Z+
    16c8:	af 01       	movw	r20, r30
    16ca:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <__iob+0x2>
    16ce:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <__iob+0x3>
    16d2:	0e 94 9e 0b 	call	0x173c	; 0x173c <vfprintf>
    16d6:	e2 e0       	ldi	r30, 0x02	; 2
    16d8:	0c 94 9f 0f 	jmp	0x1f3e	; 0x1f3e <__epilogue_restores__+0x20>

000016dc <puts>:
    16dc:	0f 93       	push	r16
    16de:	1f 93       	push	r17
    16e0:	cf 93       	push	r28
    16e2:	df 93       	push	r29
    16e4:	e0 91 46 03 	lds	r30, 0x0346	; 0x800346 <__iob+0x2>
    16e8:	f0 91 47 03 	lds	r31, 0x0347	; 0x800347 <__iob+0x3>
    16ec:	23 81       	ldd	r18, Z+3	; 0x03
    16ee:	21 ff       	sbrs	r18, 1
    16f0:	1b c0       	rjmp	.+54     	; 0x1728 <puts+0x4c>
    16f2:	8c 01       	movw	r16, r24
    16f4:	d0 e0       	ldi	r29, 0x00	; 0
    16f6:	c0 e0       	ldi	r28, 0x00	; 0
    16f8:	f8 01       	movw	r30, r16
    16fa:	81 91       	ld	r24, Z+
    16fc:	8f 01       	movw	r16, r30
    16fe:	60 91 46 03 	lds	r22, 0x0346	; 0x800346 <__iob+0x2>
    1702:	70 91 47 03 	lds	r23, 0x0347	; 0x800347 <__iob+0x3>
    1706:	db 01       	movw	r26, r22
    1708:	18 96       	adiw	r26, 0x08	; 8
    170a:	ed 91       	ld	r30, X+
    170c:	fc 91       	ld	r31, X
    170e:	19 97       	sbiw	r26, 0x09	; 9
    1710:	88 23       	and	r24, r24
    1712:	31 f0       	breq	.+12     	; 0x1720 <puts+0x44>
    1714:	09 95       	icall
    1716:	89 2b       	or	r24, r25
    1718:	79 f3       	breq	.-34     	; 0x16f8 <puts+0x1c>
    171a:	df ef       	ldi	r29, 0xFF	; 255
    171c:	cf ef       	ldi	r28, 0xFF	; 255
    171e:	ec cf       	rjmp	.-40     	; 0x16f8 <puts+0x1c>
    1720:	8a e0       	ldi	r24, 0x0A	; 10
    1722:	09 95       	icall
    1724:	89 2b       	or	r24, r25
    1726:	19 f0       	breq	.+6      	; 0x172e <puts+0x52>
    1728:	8f ef       	ldi	r24, 0xFF	; 255
    172a:	9f ef       	ldi	r25, 0xFF	; 255
    172c:	02 c0       	rjmp	.+4      	; 0x1732 <puts+0x56>
    172e:	8d 2f       	mov	r24, r29
    1730:	9c 2f       	mov	r25, r28
    1732:	df 91       	pop	r29
    1734:	cf 91       	pop	r28
    1736:	1f 91       	pop	r17
    1738:	0f 91       	pop	r16
    173a:	08 95       	ret

0000173c <vfprintf>:
    173c:	ab e0       	ldi	r26, 0x0B	; 11
    173e:	b0 e0       	ldi	r27, 0x00	; 0
    1740:	e4 ea       	ldi	r30, 0xA4	; 164
    1742:	fb e0       	ldi	r31, 0x0B	; 11
    1744:	0c 94 73 0f 	jmp	0x1ee6	; 0x1ee6 <__prologue_saves__>
    1748:	6c 01       	movw	r12, r24
    174a:	7b 01       	movw	r14, r22
    174c:	8a 01       	movw	r16, r20
    174e:	fc 01       	movw	r30, r24
    1750:	17 82       	std	Z+7, r1	; 0x07
    1752:	16 82       	std	Z+6, r1	; 0x06
    1754:	83 81       	ldd	r24, Z+3	; 0x03
    1756:	81 ff       	sbrs	r24, 1
    1758:	cc c1       	rjmp	.+920    	; 0x1af2 <vfprintf+0x3b6>
    175a:	ce 01       	movw	r24, r28
    175c:	01 96       	adiw	r24, 0x01	; 1
    175e:	3c 01       	movw	r6, r24
    1760:	f6 01       	movw	r30, r12
    1762:	93 81       	ldd	r25, Z+3	; 0x03
    1764:	f7 01       	movw	r30, r14
    1766:	93 fd       	sbrc	r25, 3
    1768:	85 91       	lpm	r24, Z+
    176a:	93 ff       	sbrs	r25, 3
    176c:	81 91       	ld	r24, Z+
    176e:	7f 01       	movw	r14, r30
    1770:	88 23       	and	r24, r24
    1772:	09 f4       	brne	.+2      	; 0x1776 <vfprintf+0x3a>
    1774:	ba c1       	rjmp	.+884    	; 0x1aea <vfprintf+0x3ae>
    1776:	85 32       	cpi	r24, 0x25	; 37
    1778:	39 f4       	brne	.+14     	; 0x1788 <vfprintf+0x4c>
    177a:	93 fd       	sbrc	r25, 3
    177c:	85 91       	lpm	r24, Z+
    177e:	93 ff       	sbrs	r25, 3
    1780:	81 91       	ld	r24, Z+
    1782:	7f 01       	movw	r14, r30
    1784:	85 32       	cpi	r24, 0x25	; 37
    1786:	29 f4       	brne	.+10     	; 0x1792 <vfprintf+0x56>
    1788:	b6 01       	movw	r22, r12
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <fputc>
    1790:	e7 cf       	rjmp	.-50     	; 0x1760 <vfprintf+0x24>
    1792:	91 2c       	mov	r9, r1
    1794:	21 2c       	mov	r2, r1
    1796:	31 2c       	mov	r3, r1
    1798:	ff e1       	ldi	r31, 0x1F	; 31
    179a:	f3 15       	cp	r31, r3
    179c:	d8 f0       	brcs	.+54     	; 0x17d4 <vfprintf+0x98>
    179e:	8b 32       	cpi	r24, 0x2B	; 43
    17a0:	79 f0       	breq	.+30     	; 0x17c0 <vfprintf+0x84>
    17a2:	38 f4       	brcc	.+14     	; 0x17b2 <vfprintf+0x76>
    17a4:	80 32       	cpi	r24, 0x20	; 32
    17a6:	79 f0       	breq	.+30     	; 0x17c6 <vfprintf+0x8a>
    17a8:	83 32       	cpi	r24, 0x23	; 35
    17aa:	a1 f4       	brne	.+40     	; 0x17d4 <vfprintf+0x98>
    17ac:	23 2d       	mov	r18, r3
    17ae:	20 61       	ori	r18, 0x10	; 16
    17b0:	1d c0       	rjmp	.+58     	; 0x17ec <vfprintf+0xb0>
    17b2:	8d 32       	cpi	r24, 0x2D	; 45
    17b4:	61 f0       	breq	.+24     	; 0x17ce <vfprintf+0x92>
    17b6:	80 33       	cpi	r24, 0x30	; 48
    17b8:	69 f4       	brne	.+26     	; 0x17d4 <vfprintf+0x98>
    17ba:	23 2d       	mov	r18, r3
    17bc:	21 60       	ori	r18, 0x01	; 1
    17be:	16 c0       	rjmp	.+44     	; 0x17ec <vfprintf+0xb0>
    17c0:	83 2d       	mov	r24, r3
    17c2:	82 60       	ori	r24, 0x02	; 2
    17c4:	38 2e       	mov	r3, r24
    17c6:	e3 2d       	mov	r30, r3
    17c8:	e4 60       	ori	r30, 0x04	; 4
    17ca:	3e 2e       	mov	r3, r30
    17cc:	2a c0       	rjmp	.+84     	; 0x1822 <vfprintf+0xe6>
    17ce:	f3 2d       	mov	r31, r3
    17d0:	f8 60       	ori	r31, 0x08	; 8
    17d2:	1d c0       	rjmp	.+58     	; 0x180e <vfprintf+0xd2>
    17d4:	37 fc       	sbrc	r3, 7
    17d6:	2d c0       	rjmp	.+90     	; 0x1832 <vfprintf+0xf6>
    17d8:	20 ed       	ldi	r18, 0xD0	; 208
    17da:	28 0f       	add	r18, r24
    17dc:	2a 30       	cpi	r18, 0x0A	; 10
    17de:	40 f0       	brcs	.+16     	; 0x17f0 <vfprintf+0xb4>
    17e0:	8e 32       	cpi	r24, 0x2E	; 46
    17e2:	b9 f4       	brne	.+46     	; 0x1812 <vfprintf+0xd6>
    17e4:	36 fc       	sbrc	r3, 6
    17e6:	81 c1       	rjmp	.+770    	; 0x1aea <vfprintf+0x3ae>
    17e8:	23 2d       	mov	r18, r3
    17ea:	20 64       	ori	r18, 0x40	; 64
    17ec:	32 2e       	mov	r3, r18
    17ee:	19 c0       	rjmp	.+50     	; 0x1822 <vfprintf+0xe6>
    17f0:	36 fe       	sbrs	r3, 6
    17f2:	06 c0       	rjmp	.+12     	; 0x1800 <vfprintf+0xc4>
    17f4:	8a e0       	ldi	r24, 0x0A	; 10
    17f6:	98 9e       	mul	r9, r24
    17f8:	20 0d       	add	r18, r0
    17fa:	11 24       	eor	r1, r1
    17fc:	92 2e       	mov	r9, r18
    17fe:	11 c0       	rjmp	.+34     	; 0x1822 <vfprintf+0xe6>
    1800:	ea e0       	ldi	r30, 0x0A	; 10
    1802:	2e 9e       	mul	r2, r30
    1804:	20 0d       	add	r18, r0
    1806:	11 24       	eor	r1, r1
    1808:	22 2e       	mov	r2, r18
    180a:	f3 2d       	mov	r31, r3
    180c:	f0 62       	ori	r31, 0x20	; 32
    180e:	3f 2e       	mov	r3, r31
    1810:	08 c0       	rjmp	.+16     	; 0x1822 <vfprintf+0xe6>
    1812:	8c 36       	cpi	r24, 0x6C	; 108
    1814:	21 f4       	brne	.+8      	; 0x181e <vfprintf+0xe2>
    1816:	83 2d       	mov	r24, r3
    1818:	80 68       	ori	r24, 0x80	; 128
    181a:	38 2e       	mov	r3, r24
    181c:	02 c0       	rjmp	.+4      	; 0x1822 <vfprintf+0xe6>
    181e:	88 36       	cpi	r24, 0x68	; 104
    1820:	41 f4       	brne	.+16     	; 0x1832 <vfprintf+0xf6>
    1822:	f7 01       	movw	r30, r14
    1824:	93 fd       	sbrc	r25, 3
    1826:	85 91       	lpm	r24, Z+
    1828:	93 ff       	sbrs	r25, 3
    182a:	81 91       	ld	r24, Z+
    182c:	7f 01       	movw	r14, r30
    182e:	81 11       	cpse	r24, r1
    1830:	b3 cf       	rjmp	.-154    	; 0x1798 <vfprintf+0x5c>
    1832:	98 2f       	mov	r25, r24
    1834:	9f 7d       	andi	r25, 0xDF	; 223
    1836:	95 54       	subi	r25, 0x45	; 69
    1838:	93 30       	cpi	r25, 0x03	; 3
    183a:	28 f4       	brcc	.+10     	; 0x1846 <vfprintf+0x10a>
    183c:	0c 5f       	subi	r16, 0xFC	; 252
    183e:	1f 4f       	sbci	r17, 0xFF	; 255
    1840:	9f e3       	ldi	r25, 0x3F	; 63
    1842:	99 83       	std	Y+1, r25	; 0x01
    1844:	0d c0       	rjmp	.+26     	; 0x1860 <vfprintf+0x124>
    1846:	83 36       	cpi	r24, 0x63	; 99
    1848:	31 f0       	breq	.+12     	; 0x1856 <vfprintf+0x11a>
    184a:	83 37       	cpi	r24, 0x73	; 115
    184c:	71 f0       	breq	.+28     	; 0x186a <vfprintf+0x12e>
    184e:	83 35       	cpi	r24, 0x53	; 83
    1850:	09 f0       	breq	.+2      	; 0x1854 <vfprintf+0x118>
    1852:	59 c0       	rjmp	.+178    	; 0x1906 <vfprintf+0x1ca>
    1854:	21 c0       	rjmp	.+66     	; 0x1898 <vfprintf+0x15c>
    1856:	f8 01       	movw	r30, r16
    1858:	80 81       	ld	r24, Z
    185a:	89 83       	std	Y+1, r24	; 0x01
    185c:	0e 5f       	subi	r16, 0xFE	; 254
    185e:	1f 4f       	sbci	r17, 0xFF	; 255
    1860:	88 24       	eor	r8, r8
    1862:	83 94       	inc	r8
    1864:	91 2c       	mov	r9, r1
    1866:	53 01       	movw	r10, r6
    1868:	13 c0       	rjmp	.+38     	; 0x1890 <vfprintf+0x154>
    186a:	28 01       	movw	r4, r16
    186c:	f2 e0       	ldi	r31, 0x02	; 2
    186e:	4f 0e       	add	r4, r31
    1870:	51 1c       	adc	r5, r1
    1872:	f8 01       	movw	r30, r16
    1874:	a0 80       	ld	r10, Z
    1876:	b1 80       	ldd	r11, Z+1	; 0x01
    1878:	36 fe       	sbrs	r3, 6
    187a:	03 c0       	rjmp	.+6      	; 0x1882 <vfprintf+0x146>
    187c:	69 2d       	mov	r22, r9
    187e:	70 e0       	ldi	r23, 0x00	; 0
    1880:	02 c0       	rjmp	.+4      	; 0x1886 <vfprintf+0x14a>
    1882:	6f ef       	ldi	r22, 0xFF	; 255
    1884:	7f ef       	ldi	r23, 0xFF	; 255
    1886:	c5 01       	movw	r24, r10
    1888:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <strnlen>
    188c:	4c 01       	movw	r8, r24
    188e:	82 01       	movw	r16, r4
    1890:	f3 2d       	mov	r31, r3
    1892:	ff 77       	andi	r31, 0x7F	; 127
    1894:	3f 2e       	mov	r3, r31
    1896:	16 c0       	rjmp	.+44     	; 0x18c4 <vfprintf+0x188>
    1898:	28 01       	movw	r4, r16
    189a:	22 e0       	ldi	r18, 0x02	; 2
    189c:	42 0e       	add	r4, r18
    189e:	51 1c       	adc	r5, r1
    18a0:	f8 01       	movw	r30, r16
    18a2:	a0 80       	ld	r10, Z
    18a4:	b1 80       	ldd	r11, Z+1	; 0x01
    18a6:	36 fe       	sbrs	r3, 6
    18a8:	03 c0       	rjmp	.+6      	; 0x18b0 <vfprintf+0x174>
    18aa:	69 2d       	mov	r22, r9
    18ac:	70 e0       	ldi	r23, 0x00	; 0
    18ae:	02 c0       	rjmp	.+4      	; 0x18b4 <vfprintf+0x178>
    18b0:	6f ef       	ldi	r22, 0xFF	; 255
    18b2:	7f ef       	ldi	r23, 0xFF	; 255
    18b4:	c5 01       	movw	r24, r10
    18b6:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <strnlen_P>
    18ba:	4c 01       	movw	r8, r24
    18bc:	f3 2d       	mov	r31, r3
    18be:	f0 68       	ori	r31, 0x80	; 128
    18c0:	3f 2e       	mov	r3, r31
    18c2:	82 01       	movw	r16, r4
    18c4:	33 fc       	sbrc	r3, 3
    18c6:	1b c0       	rjmp	.+54     	; 0x18fe <vfprintf+0x1c2>
    18c8:	82 2d       	mov	r24, r2
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	88 16       	cp	r8, r24
    18ce:	99 06       	cpc	r9, r25
    18d0:	b0 f4       	brcc	.+44     	; 0x18fe <vfprintf+0x1c2>
    18d2:	b6 01       	movw	r22, r12
    18d4:	80 e2       	ldi	r24, 0x20	; 32
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <fputc>
    18dc:	2a 94       	dec	r2
    18de:	f4 cf       	rjmp	.-24     	; 0x18c8 <vfprintf+0x18c>
    18e0:	f5 01       	movw	r30, r10
    18e2:	37 fc       	sbrc	r3, 7
    18e4:	85 91       	lpm	r24, Z+
    18e6:	37 fe       	sbrs	r3, 7
    18e8:	81 91       	ld	r24, Z+
    18ea:	5f 01       	movw	r10, r30
    18ec:	b6 01       	movw	r22, r12
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <fputc>
    18f4:	21 10       	cpse	r2, r1
    18f6:	2a 94       	dec	r2
    18f8:	21 e0       	ldi	r18, 0x01	; 1
    18fa:	82 1a       	sub	r8, r18
    18fc:	91 08       	sbc	r9, r1
    18fe:	81 14       	cp	r8, r1
    1900:	91 04       	cpc	r9, r1
    1902:	71 f7       	brne	.-36     	; 0x18e0 <vfprintf+0x1a4>
    1904:	e8 c0       	rjmp	.+464    	; 0x1ad6 <vfprintf+0x39a>
    1906:	84 36       	cpi	r24, 0x64	; 100
    1908:	11 f0       	breq	.+4      	; 0x190e <vfprintf+0x1d2>
    190a:	89 36       	cpi	r24, 0x69	; 105
    190c:	41 f5       	brne	.+80     	; 0x195e <vfprintf+0x222>
    190e:	f8 01       	movw	r30, r16
    1910:	37 fe       	sbrs	r3, 7
    1912:	07 c0       	rjmp	.+14     	; 0x1922 <vfprintf+0x1e6>
    1914:	60 81       	ld	r22, Z
    1916:	71 81       	ldd	r23, Z+1	; 0x01
    1918:	82 81       	ldd	r24, Z+2	; 0x02
    191a:	93 81       	ldd	r25, Z+3	; 0x03
    191c:	0c 5f       	subi	r16, 0xFC	; 252
    191e:	1f 4f       	sbci	r17, 0xFF	; 255
    1920:	08 c0       	rjmp	.+16     	; 0x1932 <vfprintf+0x1f6>
    1922:	60 81       	ld	r22, Z
    1924:	71 81       	ldd	r23, Z+1	; 0x01
    1926:	07 2e       	mov	r0, r23
    1928:	00 0c       	add	r0, r0
    192a:	88 0b       	sbc	r24, r24
    192c:	99 0b       	sbc	r25, r25
    192e:	0e 5f       	subi	r16, 0xFE	; 254
    1930:	1f 4f       	sbci	r17, 0xFF	; 255
    1932:	f3 2d       	mov	r31, r3
    1934:	ff 76       	andi	r31, 0x6F	; 111
    1936:	3f 2e       	mov	r3, r31
    1938:	97 ff       	sbrs	r25, 7
    193a:	09 c0       	rjmp	.+18     	; 0x194e <vfprintf+0x212>
    193c:	90 95       	com	r25
    193e:	80 95       	com	r24
    1940:	70 95       	com	r23
    1942:	61 95       	neg	r22
    1944:	7f 4f       	sbci	r23, 0xFF	; 255
    1946:	8f 4f       	sbci	r24, 0xFF	; 255
    1948:	9f 4f       	sbci	r25, 0xFF	; 255
    194a:	f0 68       	ori	r31, 0x80	; 128
    194c:	3f 2e       	mov	r3, r31
    194e:	2a e0       	ldi	r18, 0x0A	; 10
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	a3 01       	movw	r20, r6
    1954:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <__ultoa_invert>
    1958:	88 2e       	mov	r8, r24
    195a:	86 18       	sub	r8, r6
    195c:	45 c0       	rjmp	.+138    	; 0x19e8 <vfprintf+0x2ac>
    195e:	85 37       	cpi	r24, 0x75	; 117
    1960:	31 f4       	brne	.+12     	; 0x196e <vfprintf+0x232>
    1962:	23 2d       	mov	r18, r3
    1964:	2f 7e       	andi	r18, 0xEF	; 239
    1966:	b2 2e       	mov	r11, r18
    1968:	2a e0       	ldi	r18, 0x0A	; 10
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	25 c0       	rjmp	.+74     	; 0x19b8 <vfprintf+0x27c>
    196e:	93 2d       	mov	r25, r3
    1970:	99 7f       	andi	r25, 0xF9	; 249
    1972:	b9 2e       	mov	r11, r25
    1974:	8f 36       	cpi	r24, 0x6F	; 111
    1976:	c1 f0       	breq	.+48     	; 0x19a8 <vfprintf+0x26c>
    1978:	18 f4       	brcc	.+6      	; 0x1980 <vfprintf+0x244>
    197a:	88 35       	cpi	r24, 0x58	; 88
    197c:	79 f0       	breq	.+30     	; 0x199c <vfprintf+0x260>
    197e:	b5 c0       	rjmp	.+362    	; 0x1aea <vfprintf+0x3ae>
    1980:	80 37       	cpi	r24, 0x70	; 112
    1982:	19 f0       	breq	.+6      	; 0x198a <vfprintf+0x24e>
    1984:	88 37       	cpi	r24, 0x78	; 120
    1986:	21 f0       	breq	.+8      	; 0x1990 <vfprintf+0x254>
    1988:	b0 c0       	rjmp	.+352    	; 0x1aea <vfprintf+0x3ae>
    198a:	e9 2f       	mov	r30, r25
    198c:	e0 61       	ori	r30, 0x10	; 16
    198e:	be 2e       	mov	r11, r30
    1990:	b4 fe       	sbrs	r11, 4
    1992:	0d c0       	rjmp	.+26     	; 0x19ae <vfprintf+0x272>
    1994:	fb 2d       	mov	r31, r11
    1996:	f4 60       	ori	r31, 0x04	; 4
    1998:	bf 2e       	mov	r11, r31
    199a:	09 c0       	rjmp	.+18     	; 0x19ae <vfprintf+0x272>
    199c:	34 fe       	sbrs	r3, 4
    199e:	0a c0       	rjmp	.+20     	; 0x19b4 <vfprintf+0x278>
    19a0:	29 2f       	mov	r18, r25
    19a2:	26 60       	ori	r18, 0x06	; 6
    19a4:	b2 2e       	mov	r11, r18
    19a6:	06 c0       	rjmp	.+12     	; 0x19b4 <vfprintf+0x278>
    19a8:	28 e0       	ldi	r18, 0x08	; 8
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	05 c0       	rjmp	.+10     	; 0x19b8 <vfprintf+0x27c>
    19ae:	20 e1       	ldi	r18, 0x10	; 16
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	02 c0       	rjmp	.+4      	; 0x19b8 <vfprintf+0x27c>
    19b4:	20 e1       	ldi	r18, 0x10	; 16
    19b6:	32 e0       	ldi	r19, 0x02	; 2
    19b8:	f8 01       	movw	r30, r16
    19ba:	b7 fe       	sbrs	r11, 7
    19bc:	07 c0       	rjmp	.+14     	; 0x19cc <vfprintf+0x290>
    19be:	60 81       	ld	r22, Z
    19c0:	71 81       	ldd	r23, Z+1	; 0x01
    19c2:	82 81       	ldd	r24, Z+2	; 0x02
    19c4:	93 81       	ldd	r25, Z+3	; 0x03
    19c6:	0c 5f       	subi	r16, 0xFC	; 252
    19c8:	1f 4f       	sbci	r17, 0xFF	; 255
    19ca:	06 c0       	rjmp	.+12     	; 0x19d8 <vfprintf+0x29c>
    19cc:	60 81       	ld	r22, Z
    19ce:	71 81       	ldd	r23, Z+1	; 0x01
    19d0:	80 e0       	ldi	r24, 0x00	; 0
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	0e 5f       	subi	r16, 0xFE	; 254
    19d6:	1f 4f       	sbci	r17, 0xFF	; 255
    19d8:	a3 01       	movw	r20, r6
    19da:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <__ultoa_invert>
    19de:	88 2e       	mov	r8, r24
    19e0:	86 18       	sub	r8, r6
    19e2:	fb 2d       	mov	r31, r11
    19e4:	ff 77       	andi	r31, 0x7F	; 127
    19e6:	3f 2e       	mov	r3, r31
    19e8:	36 fe       	sbrs	r3, 6
    19ea:	0d c0       	rjmp	.+26     	; 0x1a06 <vfprintf+0x2ca>
    19ec:	23 2d       	mov	r18, r3
    19ee:	2e 7f       	andi	r18, 0xFE	; 254
    19f0:	a2 2e       	mov	r10, r18
    19f2:	89 14       	cp	r8, r9
    19f4:	58 f4       	brcc	.+22     	; 0x1a0c <vfprintf+0x2d0>
    19f6:	34 fe       	sbrs	r3, 4
    19f8:	0b c0       	rjmp	.+22     	; 0x1a10 <vfprintf+0x2d4>
    19fa:	32 fc       	sbrc	r3, 2
    19fc:	09 c0       	rjmp	.+18     	; 0x1a10 <vfprintf+0x2d4>
    19fe:	83 2d       	mov	r24, r3
    1a00:	8e 7e       	andi	r24, 0xEE	; 238
    1a02:	a8 2e       	mov	r10, r24
    1a04:	05 c0       	rjmp	.+10     	; 0x1a10 <vfprintf+0x2d4>
    1a06:	b8 2c       	mov	r11, r8
    1a08:	a3 2c       	mov	r10, r3
    1a0a:	03 c0       	rjmp	.+6      	; 0x1a12 <vfprintf+0x2d6>
    1a0c:	b8 2c       	mov	r11, r8
    1a0e:	01 c0       	rjmp	.+2      	; 0x1a12 <vfprintf+0x2d6>
    1a10:	b9 2c       	mov	r11, r9
    1a12:	a4 fe       	sbrs	r10, 4
    1a14:	0f c0       	rjmp	.+30     	; 0x1a34 <vfprintf+0x2f8>
    1a16:	fe 01       	movw	r30, r28
    1a18:	e8 0d       	add	r30, r8
    1a1a:	f1 1d       	adc	r31, r1
    1a1c:	80 81       	ld	r24, Z
    1a1e:	80 33       	cpi	r24, 0x30	; 48
    1a20:	21 f4       	brne	.+8      	; 0x1a2a <vfprintf+0x2ee>
    1a22:	9a 2d       	mov	r25, r10
    1a24:	99 7e       	andi	r25, 0xE9	; 233
    1a26:	a9 2e       	mov	r10, r25
    1a28:	09 c0       	rjmp	.+18     	; 0x1a3c <vfprintf+0x300>
    1a2a:	a2 fe       	sbrs	r10, 2
    1a2c:	06 c0       	rjmp	.+12     	; 0x1a3a <vfprintf+0x2fe>
    1a2e:	b3 94       	inc	r11
    1a30:	b3 94       	inc	r11
    1a32:	04 c0       	rjmp	.+8      	; 0x1a3c <vfprintf+0x300>
    1a34:	8a 2d       	mov	r24, r10
    1a36:	86 78       	andi	r24, 0x86	; 134
    1a38:	09 f0       	breq	.+2      	; 0x1a3c <vfprintf+0x300>
    1a3a:	b3 94       	inc	r11
    1a3c:	a3 fc       	sbrc	r10, 3
    1a3e:	11 c0       	rjmp	.+34     	; 0x1a62 <vfprintf+0x326>
    1a40:	a0 fe       	sbrs	r10, 0
    1a42:	06 c0       	rjmp	.+12     	; 0x1a50 <vfprintf+0x314>
    1a44:	b2 14       	cp	r11, r2
    1a46:	88 f4       	brcc	.+34     	; 0x1a6a <vfprintf+0x32e>
    1a48:	28 0c       	add	r2, r8
    1a4a:	92 2c       	mov	r9, r2
    1a4c:	9b 18       	sub	r9, r11
    1a4e:	0e c0       	rjmp	.+28     	; 0x1a6c <vfprintf+0x330>
    1a50:	b2 14       	cp	r11, r2
    1a52:	60 f4       	brcc	.+24     	; 0x1a6c <vfprintf+0x330>
    1a54:	b6 01       	movw	r22, r12
    1a56:	80 e2       	ldi	r24, 0x20	; 32
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <fputc>
    1a5e:	b3 94       	inc	r11
    1a60:	f7 cf       	rjmp	.-18     	; 0x1a50 <vfprintf+0x314>
    1a62:	b2 14       	cp	r11, r2
    1a64:	18 f4       	brcc	.+6      	; 0x1a6c <vfprintf+0x330>
    1a66:	2b 18       	sub	r2, r11
    1a68:	02 c0       	rjmp	.+4      	; 0x1a6e <vfprintf+0x332>
    1a6a:	98 2c       	mov	r9, r8
    1a6c:	21 2c       	mov	r2, r1
    1a6e:	a4 fe       	sbrs	r10, 4
    1a70:	10 c0       	rjmp	.+32     	; 0x1a92 <vfprintf+0x356>
    1a72:	b6 01       	movw	r22, r12
    1a74:	80 e3       	ldi	r24, 0x30	; 48
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <fputc>
    1a7c:	a2 fe       	sbrs	r10, 2
    1a7e:	17 c0       	rjmp	.+46     	; 0x1aae <vfprintf+0x372>
    1a80:	a1 fc       	sbrc	r10, 1
    1a82:	03 c0       	rjmp	.+6      	; 0x1a8a <vfprintf+0x34e>
    1a84:	88 e7       	ldi	r24, 0x78	; 120
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	02 c0       	rjmp	.+4      	; 0x1a8e <vfprintf+0x352>
    1a8a:	88 e5       	ldi	r24, 0x58	; 88
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	b6 01       	movw	r22, r12
    1a90:	0c c0       	rjmp	.+24     	; 0x1aaa <vfprintf+0x36e>
    1a92:	8a 2d       	mov	r24, r10
    1a94:	86 78       	andi	r24, 0x86	; 134
    1a96:	59 f0       	breq	.+22     	; 0x1aae <vfprintf+0x372>
    1a98:	a1 fe       	sbrs	r10, 1
    1a9a:	02 c0       	rjmp	.+4      	; 0x1aa0 <vfprintf+0x364>
    1a9c:	8b e2       	ldi	r24, 0x2B	; 43
    1a9e:	01 c0       	rjmp	.+2      	; 0x1aa2 <vfprintf+0x366>
    1aa0:	80 e2       	ldi	r24, 0x20	; 32
    1aa2:	a7 fc       	sbrc	r10, 7
    1aa4:	8d e2       	ldi	r24, 0x2D	; 45
    1aa6:	b6 01       	movw	r22, r12
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <fputc>
    1aae:	89 14       	cp	r8, r9
    1ab0:	38 f4       	brcc	.+14     	; 0x1ac0 <vfprintf+0x384>
    1ab2:	b6 01       	movw	r22, r12
    1ab4:	80 e3       	ldi	r24, 0x30	; 48
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <fputc>
    1abc:	9a 94       	dec	r9
    1abe:	f7 cf       	rjmp	.-18     	; 0x1aae <vfprintf+0x372>
    1ac0:	8a 94       	dec	r8
    1ac2:	f3 01       	movw	r30, r6
    1ac4:	e8 0d       	add	r30, r8
    1ac6:	f1 1d       	adc	r31, r1
    1ac8:	80 81       	ld	r24, Z
    1aca:	b6 01       	movw	r22, r12
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <fputc>
    1ad2:	81 10       	cpse	r8, r1
    1ad4:	f5 cf       	rjmp	.-22     	; 0x1ac0 <vfprintf+0x384>
    1ad6:	22 20       	and	r2, r2
    1ad8:	09 f4       	brne	.+2      	; 0x1adc <vfprintf+0x3a0>
    1ada:	42 ce       	rjmp	.-892    	; 0x1760 <vfprintf+0x24>
    1adc:	b6 01       	movw	r22, r12
    1ade:	80 e2       	ldi	r24, 0x20	; 32
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <fputc>
    1ae6:	2a 94       	dec	r2
    1ae8:	f6 cf       	rjmp	.-20     	; 0x1ad6 <vfprintf+0x39a>
    1aea:	f6 01       	movw	r30, r12
    1aec:	86 81       	ldd	r24, Z+6	; 0x06
    1aee:	97 81       	ldd	r25, Z+7	; 0x07
    1af0:	02 c0       	rjmp	.+4      	; 0x1af6 <vfprintf+0x3ba>
    1af2:	8f ef       	ldi	r24, 0xFF	; 255
    1af4:	9f ef       	ldi	r25, 0xFF	; 255
    1af6:	2b 96       	adiw	r28, 0x0b	; 11
    1af8:	e2 e1       	ldi	r30, 0x12	; 18
    1afa:	0c 94 8f 0f 	jmp	0x1f1e	; 0x1f1e <__epilogue_restores__>

00001afe <calloc>:
    1afe:	0f 93       	push	r16
    1b00:	1f 93       	push	r17
    1b02:	cf 93       	push	r28
    1b04:	df 93       	push	r29
    1b06:	86 9f       	mul	r24, r22
    1b08:	80 01       	movw	r16, r0
    1b0a:	87 9f       	mul	r24, r23
    1b0c:	10 0d       	add	r17, r0
    1b0e:	96 9f       	mul	r25, r22
    1b10:	10 0d       	add	r17, r0
    1b12:	11 24       	eor	r1, r1
    1b14:	c8 01       	movw	r24, r16
    1b16:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <malloc>
    1b1a:	ec 01       	movw	r28, r24
    1b1c:	00 97       	sbiw	r24, 0x00	; 0
    1b1e:	29 f0       	breq	.+10     	; 0x1b2a <calloc+0x2c>
    1b20:	a8 01       	movw	r20, r16
    1b22:	60 e0       	ldi	r22, 0x00	; 0
    1b24:	70 e0       	ldi	r23, 0x00	; 0
    1b26:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <memset>
    1b2a:	ce 01       	movw	r24, r28
    1b2c:	df 91       	pop	r29
    1b2e:	cf 91       	pop	r28
    1b30:	1f 91       	pop	r17
    1b32:	0f 91       	pop	r16
    1b34:	08 95       	ret

00001b36 <malloc>:
    1b36:	0f 93       	push	r16
    1b38:	1f 93       	push	r17
    1b3a:	cf 93       	push	r28
    1b3c:	df 93       	push	r29
    1b3e:	82 30       	cpi	r24, 0x02	; 2
    1b40:	91 05       	cpc	r25, r1
    1b42:	10 f4       	brcc	.+4      	; 0x1b48 <malloc+0x12>
    1b44:	82 e0       	ldi	r24, 0x02	; 2
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	e0 91 4c 03 	lds	r30, 0x034C	; 0x80034c <__flp>
    1b4c:	f0 91 4d 03 	lds	r31, 0x034D	; 0x80034d <__flp+0x1>
    1b50:	20 e0       	ldi	r18, 0x00	; 0
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	a0 e0       	ldi	r26, 0x00	; 0
    1b56:	b0 e0       	ldi	r27, 0x00	; 0
    1b58:	30 97       	sbiw	r30, 0x00	; 0
    1b5a:	19 f1       	breq	.+70     	; 0x1ba2 <malloc+0x6c>
    1b5c:	40 81       	ld	r20, Z
    1b5e:	51 81       	ldd	r21, Z+1	; 0x01
    1b60:	02 81       	ldd	r16, Z+2	; 0x02
    1b62:	13 81       	ldd	r17, Z+3	; 0x03
    1b64:	48 17       	cp	r20, r24
    1b66:	59 07       	cpc	r21, r25
    1b68:	c8 f0       	brcs	.+50     	; 0x1b9c <malloc+0x66>
    1b6a:	84 17       	cp	r24, r20
    1b6c:	95 07       	cpc	r25, r21
    1b6e:	69 f4       	brne	.+26     	; 0x1b8a <malloc+0x54>
    1b70:	10 97       	sbiw	r26, 0x00	; 0
    1b72:	31 f0       	breq	.+12     	; 0x1b80 <malloc+0x4a>
    1b74:	12 96       	adiw	r26, 0x02	; 2
    1b76:	0c 93       	st	X, r16
    1b78:	12 97       	sbiw	r26, 0x02	; 2
    1b7a:	13 96       	adiw	r26, 0x03	; 3
    1b7c:	1c 93       	st	X, r17
    1b7e:	27 c0       	rjmp	.+78     	; 0x1bce <malloc+0x98>
    1b80:	00 93 4c 03 	sts	0x034C, r16	; 0x80034c <__flp>
    1b84:	10 93 4d 03 	sts	0x034D, r17	; 0x80034d <__flp+0x1>
    1b88:	22 c0       	rjmp	.+68     	; 0x1bce <malloc+0x98>
    1b8a:	21 15       	cp	r18, r1
    1b8c:	31 05       	cpc	r19, r1
    1b8e:	19 f0       	breq	.+6      	; 0x1b96 <malloc+0x60>
    1b90:	42 17       	cp	r20, r18
    1b92:	53 07       	cpc	r21, r19
    1b94:	18 f4       	brcc	.+6      	; 0x1b9c <malloc+0x66>
    1b96:	9a 01       	movw	r18, r20
    1b98:	bd 01       	movw	r22, r26
    1b9a:	ef 01       	movw	r28, r30
    1b9c:	df 01       	movw	r26, r30
    1b9e:	f8 01       	movw	r30, r16
    1ba0:	db cf       	rjmp	.-74     	; 0x1b58 <malloc+0x22>
    1ba2:	21 15       	cp	r18, r1
    1ba4:	31 05       	cpc	r19, r1
    1ba6:	f9 f0       	breq	.+62     	; 0x1be6 <malloc+0xb0>
    1ba8:	28 1b       	sub	r18, r24
    1baa:	39 0b       	sbc	r19, r25
    1bac:	24 30       	cpi	r18, 0x04	; 4
    1bae:	31 05       	cpc	r19, r1
    1bb0:	80 f4       	brcc	.+32     	; 0x1bd2 <malloc+0x9c>
    1bb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb4:	9b 81       	ldd	r25, Y+3	; 0x03
    1bb6:	61 15       	cp	r22, r1
    1bb8:	71 05       	cpc	r23, r1
    1bba:	21 f0       	breq	.+8      	; 0x1bc4 <malloc+0x8e>
    1bbc:	fb 01       	movw	r30, r22
    1bbe:	93 83       	std	Z+3, r25	; 0x03
    1bc0:	82 83       	std	Z+2, r24	; 0x02
    1bc2:	04 c0       	rjmp	.+8      	; 0x1bcc <malloc+0x96>
    1bc4:	90 93 4d 03 	sts	0x034D, r25	; 0x80034d <__flp+0x1>
    1bc8:	80 93 4c 03 	sts	0x034C, r24	; 0x80034c <__flp>
    1bcc:	fe 01       	movw	r30, r28
    1bce:	32 96       	adiw	r30, 0x02	; 2
    1bd0:	44 c0       	rjmp	.+136    	; 0x1c5a <malloc+0x124>
    1bd2:	fe 01       	movw	r30, r28
    1bd4:	e2 0f       	add	r30, r18
    1bd6:	f3 1f       	adc	r31, r19
    1bd8:	81 93       	st	Z+, r24
    1bda:	91 93       	st	Z+, r25
    1bdc:	22 50       	subi	r18, 0x02	; 2
    1bde:	31 09       	sbc	r19, r1
    1be0:	39 83       	std	Y+1, r19	; 0x01
    1be2:	28 83       	st	Y, r18
    1be4:	3a c0       	rjmp	.+116    	; 0x1c5a <malloc+0x124>
    1be6:	20 91 4a 03 	lds	r18, 0x034A	; 0x80034a <__brkval>
    1bea:	30 91 4b 03 	lds	r19, 0x034B	; 0x80034b <__brkval+0x1>
    1bee:	23 2b       	or	r18, r19
    1bf0:	41 f4       	brne	.+16     	; 0x1c02 <malloc+0xcc>
    1bf2:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1bf6:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1bfa:	30 93 4b 03 	sts	0x034B, r19	; 0x80034b <__brkval+0x1>
    1bfe:	20 93 4a 03 	sts	0x034A, r18	; 0x80034a <__brkval>
    1c02:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1c06:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1c0a:	21 15       	cp	r18, r1
    1c0c:	31 05       	cpc	r19, r1
    1c0e:	41 f4       	brne	.+16     	; 0x1c20 <malloc+0xea>
    1c10:	2d b7       	in	r18, 0x3d	; 61
    1c12:	3e b7       	in	r19, 0x3e	; 62
    1c14:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1c18:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1c1c:	24 1b       	sub	r18, r20
    1c1e:	35 0b       	sbc	r19, r21
    1c20:	e0 91 4a 03 	lds	r30, 0x034A	; 0x80034a <__brkval>
    1c24:	f0 91 4b 03 	lds	r31, 0x034B	; 0x80034b <__brkval+0x1>
    1c28:	e2 17       	cp	r30, r18
    1c2a:	f3 07       	cpc	r31, r19
    1c2c:	a0 f4       	brcc	.+40     	; 0x1c56 <malloc+0x120>
    1c2e:	2e 1b       	sub	r18, r30
    1c30:	3f 0b       	sbc	r19, r31
    1c32:	28 17       	cp	r18, r24
    1c34:	39 07       	cpc	r19, r25
    1c36:	78 f0       	brcs	.+30     	; 0x1c56 <malloc+0x120>
    1c38:	ac 01       	movw	r20, r24
    1c3a:	4e 5f       	subi	r20, 0xFE	; 254
    1c3c:	5f 4f       	sbci	r21, 0xFF	; 255
    1c3e:	24 17       	cp	r18, r20
    1c40:	35 07       	cpc	r19, r21
    1c42:	48 f0       	brcs	.+18     	; 0x1c56 <malloc+0x120>
    1c44:	4e 0f       	add	r20, r30
    1c46:	5f 1f       	adc	r21, r31
    1c48:	50 93 4b 03 	sts	0x034B, r21	; 0x80034b <__brkval+0x1>
    1c4c:	40 93 4a 03 	sts	0x034A, r20	; 0x80034a <__brkval>
    1c50:	81 93       	st	Z+, r24
    1c52:	91 93       	st	Z+, r25
    1c54:	02 c0       	rjmp	.+4      	; 0x1c5a <malloc+0x124>
    1c56:	e0 e0       	ldi	r30, 0x00	; 0
    1c58:	f0 e0       	ldi	r31, 0x00	; 0
    1c5a:	cf 01       	movw	r24, r30
    1c5c:	df 91       	pop	r29
    1c5e:	cf 91       	pop	r28
    1c60:	1f 91       	pop	r17
    1c62:	0f 91       	pop	r16
    1c64:	08 95       	ret

00001c66 <free>:
    1c66:	cf 93       	push	r28
    1c68:	df 93       	push	r29
    1c6a:	00 97       	sbiw	r24, 0x00	; 0
    1c6c:	09 f4       	brne	.+2      	; 0x1c70 <free+0xa>
    1c6e:	81 c0       	rjmp	.+258    	; 0x1d72 <free+0x10c>
    1c70:	fc 01       	movw	r30, r24
    1c72:	32 97       	sbiw	r30, 0x02	; 2
    1c74:	13 82       	std	Z+3, r1	; 0x03
    1c76:	12 82       	std	Z+2, r1	; 0x02
    1c78:	a0 91 4c 03 	lds	r26, 0x034C	; 0x80034c <__flp>
    1c7c:	b0 91 4d 03 	lds	r27, 0x034D	; 0x80034d <__flp+0x1>
    1c80:	10 97       	sbiw	r26, 0x00	; 0
    1c82:	81 f4       	brne	.+32     	; 0x1ca4 <free+0x3e>
    1c84:	20 81       	ld	r18, Z
    1c86:	31 81       	ldd	r19, Z+1	; 0x01
    1c88:	82 0f       	add	r24, r18
    1c8a:	93 1f       	adc	r25, r19
    1c8c:	20 91 4a 03 	lds	r18, 0x034A	; 0x80034a <__brkval>
    1c90:	30 91 4b 03 	lds	r19, 0x034B	; 0x80034b <__brkval+0x1>
    1c94:	28 17       	cp	r18, r24
    1c96:	39 07       	cpc	r19, r25
    1c98:	51 f5       	brne	.+84     	; 0x1cee <free+0x88>
    1c9a:	f0 93 4b 03 	sts	0x034B, r31	; 0x80034b <__brkval+0x1>
    1c9e:	e0 93 4a 03 	sts	0x034A, r30	; 0x80034a <__brkval>
    1ca2:	67 c0       	rjmp	.+206    	; 0x1d72 <free+0x10c>
    1ca4:	ed 01       	movw	r28, r26
    1ca6:	20 e0       	ldi	r18, 0x00	; 0
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	ce 17       	cp	r28, r30
    1cac:	df 07       	cpc	r29, r31
    1cae:	40 f4       	brcc	.+16     	; 0x1cc0 <free+0x5a>
    1cb0:	4a 81       	ldd	r20, Y+2	; 0x02
    1cb2:	5b 81       	ldd	r21, Y+3	; 0x03
    1cb4:	9e 01       	movw	r18, r28
    1cb6:	41 15       	cp	r20, r1
    1cb8:	51 05       	cpc	r21, r1
    1cba:	f1 f0       	breq	.+60     	; 0x1cf8 <free+0x92>
    1cbc:	ea 01       	movw	r28, r20
    1cbe:	f5 cf       	rjmp	.-22     	; 0x1caa <free+0x44>
    1cc0:	d3 83       	std	Z+3, r29	; 0x03
    1cc2:	c2 83       	std	Z+2, r28	; 0x02
    1cc4:	40 81       	ld	r20, Z
    1cc6:	51 81       	ldd	r21, Z+1	; 0x01
    1cc8:	84 0f       	add	r24, r20
    1cca:	95 1f       	adc	r25, r21
    1ccc:	c8 17       	cp	r28, r24
    1cce:	d9 07       	cpc	r29, r25
    1cd0:	59 f4       	brne	.+22     	; 0x1ce8 <free+0x82>
    1cd2:	88 81       	ld	r24, Y
    1cd4:	99 81       	ldd	r25, Y+1	; 0x01
    1cd6:	84 0f       	add	r24, r20
    1cd8:	95 1f       	adc	r25, r21
    1cda:	02 96       	adiw	r24, 0x02	; 2
    1cdc:	91 83       	std	Z+1, r25	; 0x01
    1cde:	80 83       	st	Z, r24
    1ce0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ce4:	93 83       	std	Z+3, r25	; 0x03
    1ce6:	82 83       	std	Z+2, r24	; 0x02
    1ce8:	21 15       	cp	r18, r1
    1cea:	31 05       	cpc	r19, r1
    1cec:	29 f4       	brne	.+10     	; 0x1cf8 <free+0x92>
    1cee:	f0 93 4d 03 	sts	0x034D, r31	; 0x80034d <__flp+0x1>
    1cf2:	e0 93 4c 03 	sts	0x034C, r30	; 0x80034c <__flp>
    1cf6:	3d c0       	rjmp	.+122    	; 0x1d72 <free+0x10c>
    1cf8:	e9 01       	movw	r28, r18
    1cfa:	fb 83       	std	Y+3, r31	; 0x03
    1cfc:	ea 83       	std	Y+2, r30	; 0x02
    1cfe:	49 91       	ld	r20, Y+
    1d00:	59 91       	ld	r21, Y+
    1d02:	c4 0f       	add	r28, r20
    1d04:	d5 1f       	adc	r29, r21
    1d06:	ec 17       	cp	r30, r28
    1d08:	fd 07       	cpc	r31, r29
    1d0a:	61 f4       	brne	.+24     	; 0x1d24 <free+0xbe>
    1d0c:	80 81       	ld	r24, Z
    1d0e:	91 81       	ldd	r25, Z+1	; 0x01
    1d10:	84 0f       	add	r24, r20
    1d12:	95 1f       	adc	r25, r21
    1d14:	02 96       	adiw	r24, 0x02	; 2
    1d16:	e9 01       	movw	r28, r18
    1d18:	99 83       	std	Y+1, r25	; 0x01
    1d1a:	88 83       	st	Y, r24
    1d1c:	82 81       	ldd	r24, Z+2	; 0x02
    1d1e:	93 81       	ldd	r25, Z+3	; 0x03
    1d20:	9b 83       	std	Y+3, r25	; 0x03
    1d22:	8a 83       	std	Y+2, r24	; 0x02
    1d24:	e0 e0       	ldi	r30, 0x00	; 0
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	12 96       	adiw	r26, 0x02	; 2
    1d2a:	8d 91       	ld	r24, X+
    1d2c:	9c 91       	ld	r25, X
    1d2e:	13 97       	sbiw	r26, 0x03	; 3
    1d30:	00 97       	sbiw	r24, 0x00	; 0
    1d32:	19 f0       	breq	.+6      	; 0x1d3a <free+0xd4>
    1d34:	fd 01       	movw	r30, r26
    1d36:	dc 01       	movw	r26, r24
    1d38:	f7 cf       	rjmp	.-18     	; 0x1d28 <free+0xc2>
    1d3a:	8d 91       	ld	r24, X+
    1d3c:	9c 91       	ld	r25, X
    1d3e:	11 97       	sbiw	r26, 0x01	; 1
    1d40:	9d 01       	movw	r18, r26
    1d42:	2e 5f       	subi	r18, 0xFE	; 254
    1d44:	3f 4f       	sbci	r19, 0xFF	; 255
    1d46:	82 0f       	add	r24, r18
    1d48:	93 1f       	adc	r25, r19
    1d4a:	20 91 4a 03 	lds	r18, 0x034A	; 0x80034a <__brkval>
    1d4e:	30 91 4b 03 	lds	r19, 0x034B	; 0x80034b <__brkval+0x1>
    1d52:	28 17       	cp	r18, r24
    1d54:	39 07       	cpc	r19, r25
    1d56:	69 f4       	brne	.+26     	; 0x1d72 <free+0x10c>
    1d58:	30 97       	sbiw	r30, 0x00	; 0
    1d5a:	29 f4       	brne	.+10     	; 0x1d66 <free+0x100>
    1d5c:	10 92 4d 03 	sts	0x034D, r1	; 0x80034d <__flp+0x1>
    1d60:	10 92 4c 03 	sts	0x034C, r1	; 0x80034c <__flp>
    1d64:	02 c0       	rjmp	.+4      	; 0x1d6a <free+0x104>
    1d66:	13 82       	std	Z+3, r1	; 0x03
    1d68:	12 82       	std	Z+2, r1	; 0x02
    1d6a:	b0 93 4b 03 	sts	0x034B, r27	; 0x80034b <__brkval+0x1>
    1d6e:	a0 93 4a 03 	sts	0x034A, r26	; 0x80034a <__brkval>
    1d72:	df 91       	pop	r29
    1d74:	cf 91       	pop	r28
    1d76:	08 95       	ret

00001d78 <strnlen_P>:
    1d78:	fc 01       	movw	r30, r24
    1d7a:	05 90       	lpm	r0, Z+
    1d7c:	61 50       	subi	r22, 0x01	; 1
    1d7e:	70 40       	sbci	r23, 0x00	; 0
    1d80:	01 10       	cpse	r0, r1
    1d82:	d8 f7       	brcc	.-10     	; 0x1d7a <strnlen_P+0x2>
    1d84:	80 95       	com	r24
    1d86:	90 95       	com	r25
    1d88:	8e 0f       	add	r24, r30
    1d8a:	9f 1f       	adc	r25, r31
    1d8c:	08 95       	ret

00001d8e <memset>:
    1d8e:	dc 01       	movw	r26, r24
    1d90:	01 c0       	rjmp	.+2      	; 0x1d94 <memset+0x6>
    1d92:	6d 93       	st	X+, r22
    1d94:	41 50       	subi	r20, 0x01	; 1
    1d96:	50 40       	sbci	r21, 0x00	; 0
    1d98:	e0 f7       	brcc	.-8      	; 0x1d92 <memset+0x4>
    1d9a:	08 95       	ret

00001d9c <strnlen>:
    1d9c:	fc 01       	movw	r30, r24
    1d9e:	61 50       	subi	r22, 0x01	; 1
    1da0:	70 40       	sbci	r23, 0x00	; 0
    1da2:	01 90       	ld	r0, Z+
    1da4:	01 10       	cpse	r0, r1
    1da6:	d8 f7       	brcc	.-10     	; 0x1d9e <strnlen+0x2>
    1da8:	80 95       	com	r24
    1daa:	90 95       	com	r25
    1dac:	8e 0f       	add	r24, r30
    1dae:	9f 1f       	adc	r25, r31
    1db0:	08 95       	ret

00001db2 <fputc>:
    1db2:	0f 93       	push	r16
    1db4:	1f 93       	push	r17
    1db6:	cf 93       	push	r28
    1db8:	df 93       	push	r29
    1dba:	fb 01       	movw	r30, r22
    1dbc:	23 81       	ldd	r18, Z+3	; 0x03
    1dbe:	21 fd       	sbrc	r18, 1
    1dc0:	03 c0       	rjmp	.+6      	; 0x1dc8 <fputc+0x16>
    1dc2:	8f ef       	ldi	r24, 0xFF	; 255
    1dc4:	9f ef       	ldi	r25, 0xFF	; 255
    1dc6:	2c c0       	rjmp	.+88     	; 0x1e20 <fputc+0x6e>
    1dc8:	22 ff       	sbrs	r18, 2
    1dca:	16 c0       	rjmp	.+44     	; 0x1df8 <fputc+0x46>
    1dcc:	46 81       	ldd	r20, Z+6	; 0x06
    1dce:	57 81       	ldd	r21, Z+7	; 0x07
    1dd0:	24 81       	ldd	r18, Z+4	; 0x04
    1dd2:	35 81       	ldd	r19, Z+5	; 0x05
    1dd4:	42 17       	cp	r20, r18
    1dd6:	53 07       	cpc	r21, r19
    1dd8:	44 f4       	brge	.+16     	; 0x1dea <fputc+0x38>
    1dda:	a0 81       	ld	r26, Z
    1ddc:	b1 81       	ldd	r27, Z+1	; 0x01
    1dde:	9d 01       	movw	r18, r26
    1de0:	2f 5f       	subi	r18, 0xFF	; 255
    1de2:	3f 4f       	sbci	r19, 0xFF	; 255
    1de4:	31 83       	std	Z+1, r19	; 0x01
    1de6:	20 83       	st	Z, r18
    1de8:	8c 93       	st	X, r24
    1dea:	26 81       	ldd	r18, Z+6	; 0x06
    1dec:	37 81       	ldd	r19, Z+7	; 0x07
    1dee:	2f 5f       	subi	r18, 0xFF	; 255
    1df0:	3f 4f       	sbci	r19, 0xFF	; 255
    1df2:	37 83       	std	Z+7, r19	; 0x07
    1df4:	26 83       	std	Z+6, r18	; 0x06
    1df6:	14 c0       	rjmp	.+40     	; 0x1e20 <fputc+0x6e>
    1df8:	8b 01       	movw	r16, r22
    1dfa:	ec 01       	movw	r28, r24
    1dfc:	fb 01       	movw	r30, r22
    1dfe:	00 84       	ldd	r0, Z+8	; 0x08
    1e00:	f1 85       	ldd	r31, Z+9	; 0x09
    1e02:	e0 2d       	mov	r30, r0
    1e04:	09 95       	icall
    1e06:	89 2b       	or	r24, r25
    1e08:	e1 f6       	brne	.-72     	; 0x1dc2 <fputc+0x10>
    1e0a:	d8 01       	movw	r26, r16
    1e0c:	16 96       	adiw	r26, 0x06	; 6
    1e0e:	8d 91       	ld	r24, X+
    1e10:	9c 91       	ld	r25, X
    1e12:	17 97       	sbiw	r26, 0x07	; 7
    1e14:	01 96       	adiw	r24, 0x01	; 1
    1e16:	17 96       	adiw	r26, 0x07	; 7
    1e18:	9c 93       	st	X, r25
    1e1a:	8e 93       	st	-X, r24
    1e1c:	16 97       	sbiw	r26, 0x06	; 6
    1e1e:	ce 01       	movw	r24, r28
    1e20:	df 91       	pop	r29
    1e22:	cf 91       	pop	r28
    1e24:	1f 91       	pop	r17
    1e26:	0f 91       	pop	r16
    1e28:	08 95       	ret

00001e2a <__ultoa_invert>:
    1e2a:	fa 01       	movw	r30, r20
    1e2c:	aa 27       	eor	r26, r26
    1e2e:	28 30       	cpi	r18, 0x08	; 8
    1e30:	51 f1       	breq	.+84     	; 0x1e86 <__ultoa_invert+0x5c>
    1e32:	20 31       	cpi	r18, 0x10	; 16
    1e34:	81 f1       	breq	.+96     	; 0x1e96 <__ultoa_invert+0x6c>
    1e36:	e8 94       	clt
    1e38:	6f 93       	push	r22
    1e3a:	6e 7f       	andi	r22, 0xFE	; 254
    1e3c:	6e 5f       	subi	r22, 0xFE	; 254
    1e3e:	7f 4f       	sbci	r23, 0xFF	; 255
    1e40:	8f 4f       	sbci	r24, 0xFF	; 255
    1e42:	9f 4f       	sbci	r25, 0xFF	; 255
    1e44:	af 4f       	sbci	r26, 0xFF	; 255
    1e46:	b1 e0       	ldi	r27, 0x01	; 1
    1e48:	3e d0       	rcall	.+124    	; 0x1ec6 <__ultoa_invert+0x9c>
    1e4a:	b4 e0       	ldi	r27, 0x04	; 4
    1e4c:	3c d0       	rcall	.+120    	; 0x1ec6 <__ultoa_invert+0x9c>
    1e4e:	67 0f       	add	r22, r23
    1e50:	78 1f       	adc	r23, r24
    1e52:	89 1f       	adc	r24, r25
    1e54:	9a 1f       	adc	r25, r26
    1e56:	a1 1d       	adc	r26, r1
    1e58:	68 0f       	add	r22, r24
    1e5a:	79 1f       	adc	r23, r25
    1e5c:	8a 1f       	adc	r24, r26
    1e5e:	91 1d       	adc	r25, r1
    1e60:	a1 1d       	adc	r26, r1
    1e62:	6a 0f       	add	r22, r26
    1e64:	71 1d       	adc	r23, r1
    1e66:	81 1d       	adc	r24, r1
    1e68:	91 1d       	adc	r25, r1
    1e6a:	a1 1d       	adc	r26, r1
    1e6c:	20 d0       	rcall	.+64     	; 0x1eae <__ultoa_invert+0x84>
    1e6e:	09 f4       	brne	.+2      	; 0x1e72 <__ultoa_invert+0x48>
    1e70:	68 94       	set
    1e72:	3f 91       	pop	r19
    1e74:	2a e0       	ldi	r18, 0x0A	; 10
    1e76:	26 9f       	mul	r18, r22
    1e78:	11 24       	eor	r1, r1
    1e7a:	30 19       	sub	r19, r0
    1e7c:	30 5d       	subi	r19, 0xD0	; 208
    1e7e:	31 93       	st	Z+, r19
    1e80:	de f6       	brtc	.-74     	; 0x1e38 <__ultoa_invert+0xe>
    1e82:	cf 01       	movw	r24, r30
    1e84:	08 95       	ret
    1e86:	46 2f       	mov	r20, r22
    1e88:	47 70       	andi	r20, 0x07	; 7
    1e8a:	40 5d       	subi	r20, 0xD0	; 208
    1e8c:	41 93       	st	Z+, r20
    1e8e:	b3 e0       	ldi	r27, 0x03	; 3
    1e90:	0f d0       	rcall	.+30     	; 0x1eb0 <__ultoa_invert+0x86>
    1e92:	c9 f7       	brne	.-14     	; 0x1e86 <__ultoa_invert+0x5c>
    1e94:	f6 cf       	rjmp	.-20     	; 0x1e82 <__ultoa_invert+0x58>
    1e96:	46 2f       	mov	r20, r22
    1e98:	4f 70       	andi	r20, 0x0F	; 15
    1e9a:	40 5d       	subi	r20, 0xD0	; 208
    1e9c:	4a 33       	cpi	r20, 0x3A	; 58
    1e9e:	18 f0       	brcs	.+6      	; 0x1ea6 <__ultoa_invert+0x7c>
    1ea0:	49 5d       	subi	r20, 0xD9	; 217
    1ea2:	31 fd       	sbrc	r19, 1
    1ea4:	40 52       	subi	r20, 0x20	; 32
    1ea6:	41 93       	st	Z+, r20
    1ea8:	02 d0       	rcall	.+4      	; 0x1eae <__ultoa_invert+0x84>
    1eaa:	a9 f7       	brne	.-22     	; 0x1e96 <__ultoa_invert+0x6c>
    1eac:	ea cf       	rjmp	.-44     	; 0x1e82 <__ultoa_invert+0x58>
    1eae:	b4 e0       	ldi	r27, 0x04	; 4
    1eb0:	a6 95       	lsr	r26
    1eb2:	97 95       	ror	r25
    1eb4:	87 95       	ror	r24
    1eb6:	77 95       	ror	r23
    1eb8:	67 95       	ror	r22
    1eba:	ba 95       	dec	r27
    1ebc:	c9 f7       	brne	.-14     	; 0x1eb0 <__ultoa_invert+0x86>
    1ebe:	00 97       	sbiw	r24, 0x00	; 0
    1ec0:	61 05       	cpc	r22, r1
    1ec2:	71 05       	cpc	r23, r1
    1ec4:	08 95       	ret
    1ec6:	9b 01       	movw	r18, r22
    1ec8:	ac 01       	movw	r20, r24
    1eca:	0a 2e       	mov	r0, r26
    1ecc:	06 94       	lsr	r0
    1ece:	57 95       	ror	r21
    1ed0:	47 95       	ror	r20
    1ed2:	37 95       	ror	r19
    1ed4:	27 95       	ror	r18
    1ed6:	ba 95       	dec	r27
    1ed8:	c9 f7       	brne	.-14     	; 0x1ecc <__ultoa_invert+0xa2>
    1eda:	62 0f       	add	r22, r18
    1edc:	73 1f       	adc	r23, r19
    1ede:	84 1f       	adc	r24, r20
    1ee0:	95 1f       	adc	r25, r21
    1ee2:	a0 1d       	adc	r26, r0
    1ee4:	08 95       	ret

00001ee6 <__prologue_saves__>:
    1ee6:	2f 92       	push	r2
    1ee8:	3f 92       	push	r3
    1eea:	4f 92       	push	r4
    1eec:	5f 92       	push	r5
    1eee:	6f 92       	push	r6
    1ef0:	7f 92       	push	r7
    1ef2:	8f 92       	push	r8
    1ef4:	9f 92       	push	r9
    1ef6:	af 92       	push	r10
    1ef8:	bf 92       	push	r11
    1efa:	cf 92       	push	r12
    1efc:	df 92       	push	r13
    1efe:	ef 92       	push	r14
    1f00:	ff 92       	push	r15
    1f02:	0f 93       	push	r16
    1f04:	1f 93       	push	r17
    1f06:	cf 93       	push	r28
    1f08:	df 93       	push	r29
    1f0a:	cd b7       	in	r28, 0x3d	; 61
    1f0c:	de b7       	in	r29, 0x3e	; 62
    1f0e:	ca 1b       	sub	r28, r26
    1f10:	db 0b       	sbc	r29, r27
    1f12:	0f b6       	in	r0, 0x3f	; 63
    1f14:	f8 94       	cli
    1f16:	de bf       	out	0x3e, r29	; 62
    1f18:	0f be       	out	0x3f, r0	; 63
    1f1a:	cd bf       	out	0x3d, r28	; 61
    1f1c:	09 94       	ijmp

00001f1e <__epilogue_restores__>:
    1f1e:	2a 88       	ldd	r2, Y+18	; 0x12
    1f20:	39 88       	ldd	r3, Y+17	; 0x11
    1f22:	48 88       	ldd	r4, Y+16	; 0x10
    1f24:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f26:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f28:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f2a:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f2c:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f2e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f30:	b9 84       	ldd	r11, Y+9	; 0x09
    1f32:	c8 84       	ldd	r12, Y+8	; 0x08
    1f34:	df 80       	ldd	r13, Y+7	; 0x07
    1f36:	ee 80       	ldd	r14, Y+6	; 0x06
    1f38:	fd 80       	ldd	r15, Y+5	; 0x05
    1f3a:	0c 81       	ldd	r16, Y+4	; 0x04
    1f3c:	1b 81       	ldd	r17, Y+3	; 0x03
    1f3e:	aa 81       	ldd	r26, Y+2	; 0x02
    1f40:	b9 81       	ldd	r27, Y+1	; 0x01
    1f42:	ce 0f       	add	r28, r30
    1f44:	d1 1d       	adc	r29, r1
    1f46:	0f b6       	in	r0, 0x3f	; 63
    1f48:	f8 94       	cli
    1f4a:	de bf       	out	0x3e, r29	; 62
    1f4c:	0f be       	out	0x3f, r0	; 63
    1f4e:	cd bf       	out	0x3d, r28	; 61
    1f50:	ed 01       	movw	r28, r26
    1f52:	08 95       	ret

00001f54 <_exit>:
    1f54:	f8 94       	cli

00001f56 <__stop_program>:
    1f56:	ff cf       	rjmp	.-2      	; 0x1f56 <__stop_program>
